VERSION = 1.2
AVAILABLE_BOARDS = sama5d4-xplained sama5d4-ek \
		   sama5d2-xplained sama5d2-xplained-proto \
		   sama5d2-vb-bga196 sama5d2-vb-bga289 \
		   sama5d2-ptc-engi
MEMORIES = sram ddram

eq = $(and $(findstring $(1),$(2)),$(findstring $(2),$(1)))

ifndef TARGET
$(error "No TARGET specified.")
endif

ifndef $(or RELEASE,DEBUG)
DEBUG = 5
endif

VARIANT ?= sram
AVAILABLE_VARIANTS ?= $(MEMORIES)

SELECTED_BOARD = $(strip $(foreach board,$(AVAILABLE_BOARDS),$(if $(call eq,$(TARGET),$(board)),$(board))))
SELECTED_VARIANT = $(strip $(foreach variant,$(AVAILABLE_VARIANTS),$(if $(call eq,$(VARIANT),$(variant)),$(variant))))

ifeq ($(SELECTED_BOARD),)
$(info The wanted target "$(TARGET)" is not supported or not available)
$(error Please set TARGET to one value from the list above: $(AVAILABLE_BOARDS))
endif

ifeq ($(SELECTED_VARIANT),)
$(info The selected variant "$(VARIANT)" is not supported or not available)
$(error Please set VARIANT to one value from the list above: $(AVAILABLE_VARIANTS))
endif

ifeq ($(V),1)
Q :=
ECHO := @true
else
Q := @
ECHO := @echo
endif

#-------------------------------------------------------------------------------
#		Create version string using git if possible
#-------------------------------------------------------------------------------
GIT_VERSION = $(shell if git rev-parse --show-toplevel >/dev/null 2>&1 ; \
	then git describe --tags --dirty; fi)
ifneq ($(GIT_VERSION),)
SOFTPACK_VERSION := $(VERSION) ($(GIT_VERSION))
else
SOFTPACK_VERSION := $(VERSION)
endif

#-------------------------------------------------------------------------------
#		Setup cross-compilation tools
#-------------------------------------------------------------------------------
# Tool suffix when cross-compiling
CROSS_COMPILE = arm-none-eabi-

# Compilation tools
CC = $(CROSS_COMPILE)gcc
LD = $(CROSS_COMPILE)ld
SIZE = $(CROSS_COMPILE)size
STRIP = $(CROSS_COMPILE)strip
OBJCOPY = $(CROSS_COMPILE)objcopy
GDB = $(CROSS_COMPILE)gdb
NM = $(CROSS_COMPILE)nm
AR = $(CROSS_COMPILE)ar

#-------------------------------------------------------------------------------
#		Setup compilation params
#-------------------------------------------------------------------------------

CFLAGS_OPT_sram = -Os
CFLAGS_OPT_ddram = -O2
CFLAGS_OPT ?= $(CFLAGS_OPT_$(VARIANT))

# compiler flags
CFLAGS = -Wall -Wchar-subscripts -Wcomment -Wformat=2 -Wimplicit-int
CFLAGS += -Werror-implicit-function-declaration -Wmain -Wparentheses
CFLAGS += -Wsequence-point -Wreturn-type -Wswitch -Wtrigraphs
CFLAGS += -Wuninitialized -Wunknown-pragmas -Wfloat-equal -Wundef
CFLAGS += -Wshadow -Wpointer-arith -Wbad-function-cast -Wwrite-strings
CFLAGS += -Waggregate-return -Wstrict-prototypes
CFLAGS += -Wmissing-prototypes -Wmissing-declarations
CFLAGS += -Wformat -Wmissing-format-attribute -Wno-deprecated-declarations
CFLAGS += -Wredundant-decls -Wnested-externs -Winline
CFLAGS += -Wunreachable-code -ffunction-sections -Wall -Dprintf=iprintf
CFLAGS += $(CFLAGS_OPT)

CFLAGS_ASM = -Wall -D__ASSEMBLY__

CFLAGS_DEFS += -DSOFTPACK_VERSION="\"$(SOFTPACK_VERSION)\""

# Trace level used for compilation
# (can be overriden by adding TRACE_LEVEL=#number to the command-line)
# TRACE_LEVEL_DEBUG      5
# TRACE_LEVEL_INFO       4
# TRACE_LEVEL_WARNING    3
# TRACE_LEVEL_ERROR      2
# TRACE_LEVEL_FATAL      1
# TRACE_LEVEL_NO_TRACE   0
ifdef DEBUG
TRACE_LEVEL ?= 5
CFLAGS_DEFS += -DTRACE_LEVEL=$(TRACE_LEVEL)
CFLAGS += -g3
CFLAGS_ASM += -g3
else
TRACE_LEVEL ?= 4
CFLAGS_DEFS += -DNDEBUG -DTRACE_LEVEL=$(TRACE_LEVEL)
endif

ifeq ($(VARIANT),ddram)
CFLAGS_DEFS += -DVARIANT_DDRAM
endif

CFLAGS_DEFS_sram = $(CFLAGS_DEFS)
CFLAGS_DEFS_ddram = $(CFLAGS_DEFS)
CFLAGS_DEFS_ddram += -DVARIANT_DDRAM

# linker flags
LDFLAGS = --specs=nano.specs -Wl,--cref -Wl,--check-sections -Wl,--gc-sections
LDFLAGS += -Wl,--unresolved-symbols=report-all -Wl,--warn-common
LDFLAGS += -Wl,--warn-section-align -lgcc -lc

include $(TOP)/scripts/Makefile.vars.sama5d2
include $(TOP)/scripts/Makefile.vars.sama5d4
