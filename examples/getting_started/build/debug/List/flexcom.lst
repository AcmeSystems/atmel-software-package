###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        21/May/2015  13:39:01
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  arm
#    Endian       =  little
#    Source file  =  
#        C:\Users\dfronek\Documents\Project\softpack\drivers\serial\flexcom.c
#    Command line =  
#        C:\Users\dfronek\Documents\Project\softpack\drivers\serial\flexcom.c
#        -D BOARD_SAMA5D2_XPLAINED -D API_PIOv4 -D SERIE_SAMA5D2 -D
#        CHIP_SAMA5D27 -D sram --preprocess=l
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\List\
#        -lC
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\List\
#        -o
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-A5 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../drivers\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../examples\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../lib\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../target\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../target/include\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../target/sama5d2\
#        --section .text=SOFTPACK --cpu_mode arm -On
#    List file    =  
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\List\flexcom.lst
#    Object file  =  
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\Obj\flexcom.o
#
###############################################################################

C:\Users\dfronek\Documents\Project\softpack\drivers\serial\flexcom.c
      1          /* ----------------------------------------------------------------------------
                                                                                               ^
Warning[Pa050]: non-native end of line sequence detected (this diagnostic is
          only issued once)
      2           *         SAM Software Package License
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2015, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          /*------------------------------------------------------------------------------
     31           *         Headers
     32           *------------------------------------------------------------------------------*/
     33          
     34          #include "chip.h"

   \                                 In section .rodata, align 4
   \   __absolute unsigned int const _id_h64_matrix[14]
   \                     _id_h64_matrix:
   \   00000000   0x00000006         DC32 6, 7, 9, 10, 12, 13, 15, 31, 32, 45, 46, 52, 53, 63
   \              0x00000007   
   \              0x00000009   
   \              0x0000000A   
   \              0x0000000C   
   \              0x0000000D   
   \              0x0000000F   
   \              0x0000001F   
   \              0x00000020   
   \              0x0000002D   
   \              0x0000002E   
   \              0x00000034   
   \              0x00000035   
   \              0x0000003F   
     35          #include "serial/flexcom.h"
     36          
     37          #include "serial/usart.h"
     38          #include "bus/spi.h"
     39          #include "bus/twi.h"
     40          
     41          #include <assert.h>
     42          
     43          /*------------------------------------------------------------------------------
     44           *         Exported functions
     45           *------------------------------------------------------------------------------*/
     46          
     47          /**
     48           * \brief Select a protocol for a FLEXCOM device
     49           *
     50           *
     51           *  \param flexcom  Pointer to FLEXCOM peripheral to configure.
     52           *  \param protocol  Protocol to use.
     53           */

   \                                 In section SOFTPACK, align 4, keep-with-next
     54          void flexcom_select(Flexcom * flexcom, uint32_t protocol)
     55          {
   \                     flexcom_select:
   \   00000000   0xE92D4070         PUSH     {R4-R6,LR}
   \   00000004   0xE1B04000         MOVS     R4,R0
   \   00000008   0xE1B05001         MOVS     R5,R1
     56          	assert(flexcom);
   \   0000000C   0xE3540000         CMP      R4,#+0
   \   00000010   0x1A000004         BNE      ??flexcom_select_0
   \   00000014   0xE3A02038         MOV      R2,#+56
   \   00000018   0xE59F106C         LDR      R1,??flexcom_select_1
   \   0000001C   0xE59F006C         LDR      R0,??flexcom_select_1+0x4
   \   00000020   0x........         BL       __aeabi_assert
   \   00000024   0x........         BL       __iar_EmptyStepPoint
     57          	uint32_t current_protocol = flexcom->FLEX_MR;
   \                     ??flexcom_select_0:
   \   00000028   0xE5946000         LDR      R6,[R4, #+0]
     58          
     59          	usart_set_receiver_enabled(&flexcom->usart, 0u);
   \   0000002C   0xE3A01000         MOV      R1,#+0
   \   00000030   0xE2940F80         ADDS     R0,R4,#+512
   \   00000034   0x........         BL       usart_set_receiver_enabled
     60          	
     61          	/* Shutdown previous protocol */
     62          	switch (current_protocol) {
   \   00000038   0xE3560001         CMP      R6,#+1
   \   0000003C   0x0A000004         BEQ      ??flexcom_select_2
   \   00000040   0x3A00000F         BCC      ??flexcom_select_3
   \   00000044   0xE3560003         CMP      R6,#+3
   \   00000048   0x0A00000B         BEQ      ??flexcom_select_4
   \   0000004C   0x3A000007         BCC      ??flexcom_select_5
   \   00000050   0xEA00000B         B        ??flexcom_select_3
     63          	case FLEX_MR_OPMODE_USART:
     64          		usart_set_receiver_enabled(&flexcom->usart, 0u);
   \                     ??flexcom_select_2:
   \   00000054   0xE3A01000         MOV      R1,#+0
   \   00000058   0xE2940F80         ADDS     R0,R4,#+512
   \   0000005C   0x........         BL       usart_set_receiver_enabled
     65          		usart_set_transmitter_enabled(&flexcom->usart, 0u);
   \   00000060   0xE3A01000         MOV      R1,#+0
   \   00000064   0xE2940F80         ADDS     R0,R4,#+512
   \   00000068   0x........         BL       usart_set_transmitter_enabled
     66          		break;
   \   0000006C   0xEA000004         B        ??flexcom_select_6
     67          	case FLEX_MR_OPMODE_SPI:
     68          		spi_disable(&flexcom->spi);
   \                     ??flexcom_select_5:
   \   00000070   0xE2940E40         ADDS     R0,R4,#+1024
   \   00000074   0x........         BL       spi_disable
     69          		break;
   \   00000078   0xEA000001         B        ??flexcom_select_6
     70          	case FLEX_MR_OPMODE_TWI:
     71          		twi_stop(&flexcom->twi);
   \                     ??flexcom_select_4:
   \   0000007C   0xE2940E60         ADDS     R0,R4,#+1536
   \   00000080   0x........         BL       twi_stop
     72          	default:
     73          		break;
     74          	}
     75          
     76          	assert(protocol & FLEX_MR_OPMODE_NO_COM ||
     77          	       protocol & FLEX_MR_OPMODE_USART ||
     78          	       FLEX_MR_OPMODE_SPI || FLEX_MR_OPMODE_TWI);
     79          	
     80          	/* Activate the new mode () */
     81          	flexcom->FLEX_MR = protocol;
   \                     ??flexcom_select_3:
   \                     ??flexcom_select_6:
   \   00000084   0xE5845000         STR      R5,[R4, #+0]
     82          }
   \   00000088   0xE8BD8070         POP      {R4-R6,PC}       ;; return
   \                     ??flexcom_select_1:
   \   0000008C   0x........         DC32     ?_1
   \   00000090   0x........         DC32     ?_0

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x66 0x6C          DC8 "flexcom"
   \              0x65 0x78    
   \              0x63 0x6F    
   \              0x6D 0x00    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x43 0x3A          DC8 43H, 3AH, 5CH, 55H, 73H, 65H, 72H, 73H
   \              0x5C 0x55    
   \              0x73 0x65    
   \              0x72 0x73    
   \   00000008   0x5C 0x64          DC8 5CH, 64H, 66H, 72H, 6FH, 6EH, 65H, 6BH
   \              0x66 0x72    
   \              0x6F 0x6E    
   \              0x65 0x6B    
   \   00000010   0x5C 0x44          DC8 5CH, 44H, 6FH, 63H, 75H, 6DH, 65H, 6EH
   \              0x6F 0x63    
   \              0x75 0x6D    
   \              0x65 0x6E    
   \   00000018   0x74 0x73          DC8 74H, 73H, 5CH, 50H, 72H, 6FH, 6AH, 65H
   \              0x5C 0x50    
   \              0x72 0x6F    
   \              0x6A 0x65    
   \   00000020   0x63 0x74          DC8 63H, 74H, 5CH, 73H, 6FH, 66H, 74H, 70H
   \              0x5C 0x73    
   \              0x6F 0x66    
   \              0x74 0x70    
   \   00000028   0x61 0x63          DC8 61H, 63H, 6BH, 5CH, 64H, 72H, 69H, 76H
   \              0x6B 0x5C    
   \              0x64 0x72    
   \              0x69 0x76    
   \   00000030   0x65 0x72          DC8 65H, 72H, 73H, 5CH, 73H, 65H, 72H, 69H
   \              0x73 0x5C    
   \              0x73 0x65    
   \              0x72 0x69    
   \   00000038   0x61 0x6C          DC8 61H, 6CH, 5CH, 66H, 6CH, 65H, 78H, 63H
   \              0x5C 0x66    
   \              0x6C 0x65    
   \              0x78 0x63    
   \   00000040   0x6F 0x6D          DC8 6FH, 6DH, 2EH, 63H, 0
   \              0x2E 0x63    
   \              0x00         
   \   00000045   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   flexcom_select
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
        16   -> spi_disable
        16   -> twi_stop
        16   -> usart_set_receiver_enabled
        16   -> usart_set_transmitter_enabled


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?_0
      72  ?_1
      56  _id_h64_matrix
     148  flexcom_select

 
 136 bytes in section .rodata
 148 bytes in section SOFTPACK
 
 148 bytes of CODE  memory
 136 bytes of CONST memory

Errors: none
Warnings: 1
