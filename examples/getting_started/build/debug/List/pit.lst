###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        21/May/2015  13:39:04
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  arm
#    Endian       =  little
#    Source file  =  
#        C:\Users\dfronek\Documents\Project\softpack\drivers\time\pit.c
#    Command line =  
#        C:\Users\dfronek\Documents\Project\softpack\drivers\time\pit.c -D
#        BOARD_SAMA5D2_XPLAINED -D API_PIOv4 -D SERIE_SAMA5D2 -D CHIP_SAMA5D27
#        -D sram --preprocess=l
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\List\
#        -lC
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\List\
#        -o
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-A5 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../drivers\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../examples\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../lib\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../target\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../target/include\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../target/sama5d2\
#        --section .text=SOFTPACK --cpu_mode arm -On
#    List file    =  
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\List\pit.lst
#    Object file  =  
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\Obj\pit.o
#
###############################################################################

C:\Users\dfronek\Documents\Project\softpack\drivers\time\pit.c
      1          /* ----------------------------------------------------------------------------
                                                                                               ^
Warning[Pa050]: non-native end of line sequence detected (this diagnostic is
          only issued once)
      2           *         SAM Software Package License
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2015, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          /** \addtogroup pit_module Working with PIT
     31           * \section Purpose
     32           * The PIT driver provides the Interface for configuration the Periodic
     33           *  Interval Timer (PIT) peripheral.
     34           *
     35           * \section Usage
     36           * <ul>
     37           * <li>  Initialize the PIT with the desired period using pit_init().
     38           *    Alternatively, the Periodic Interval Value (PIV) can be configured
     39           *    manually using pit_set_piv(). </li>
     40           * <li>  Start the PIT counting using pit_enable().
     41           * <li>  Enable & disable the PIT interrupt using pit_enable_it() and
     42           *    pit_disable_it(). </li>
     43           * <li>  Retrieve the current status of the PIT using pit_get_status(). </li>
     44           * <li>  To get the current value of the internal counter and the number of ticks
     45           *    that have occurred, use either pit_get_pivr() or pit_get_piir() depending
     46           *    on whether you want the values to be cleared or not. </li>
     47           *
     48           * </ul>
     49           * For more accurate information, please look at the PIT section of the
     50           * Datasheet.
     51           *
     52           * Related files :\n
     53           * \ref pit.c\n
     54           * \ref pit.h.\n
     55          */
     56          /*@{*/
     57          /*@}*/
     58          
     59          /**
     60           * \file
     61           *
     62           * Implementation of PIT (Periodic Interval Timer) controller.
     63           *
     64           */
     65          /*------------------------------------------------------------------------------
     66           *         Headers
     67           *------------------------------------------------------------------------------*/
     68          
     69          #include "chip.h"

   \                                 In section .rodata, align 4
   \   __absolute unsigned int const _id_h64_matrix[14]
   \                     _id_h64_matrix:
   \   00000000   0x00000006         DC32 6, 7, 9, 10, 12, 13, 15, 31, 32, 45, 46, 52, 53, 63
   \              0x00000007   
   \              0x00000009   
   \              0x0000000A   
   \              0x0000000C   
   \              0x0000000D   
   \              0x0000000F   
   \              0x0000001F   
   \              0x00000020   
   \              0x0000002D   
   \              0x0000002E   
   \              0x00000034   
   \              0x00000035   
   \              0x0000003F   
     70          #include "time/pit.h"
     71          #include "core/pmc.h"
     72          
     73          /*------------------------------------------------------------------------------
     74           *         Exported functions
     75           *------------------------------------------------------------------------------*/
     76          
     77          /**
     78          * \brief Initialize the Periodic Interval Timer to generate a tick at the
     79          * specified period, given the current master clock frequency.
     80          *
     81          *  \param period  Period in uSecond.
     82          *  \param pit_frequency  Master clock frequency in MHz.
     83          */
     84          

   \                                 In section SOFTPACK, align 4, keep-with-next
     85          void pit_init(uint32_t period)
     86          {
   \                     pit_init:
   \   00000000   0xE92D4010         PUSH     {R4,LR}
   \   00000004   0xE1B04000         MOVS     R4,R0
     87          	uint32_t pit_frequency = pmc_get_peripheral_max_clock(ID_PIT) / 1000000;
   \   00000008   0xE3A00003         MOV      R0,#+3
   \   0000000C   0x........         BL       pmc_get_peripheral_max_clock
   \   00000010   0xE3A01AF4         MOV      R1,#+999424
   \   00000014   0xE3811F90         ORR      R1,R1,#0x240
   \   00000018   0x........         BL       __aeabi_uidiv
     88          	PIT->PIT_MR = period ? (period * pit_frequency + 8) >> 4 : 0;
   \   0000001C   0xE3540000         CMP      R4,#+0
   \   00000020   0x0A000003         BEQ      ??pit_init_0
   \   00000024   0xE0110490         MULS     R1,R0,R4
   \   00000028   0xE2911008         ADDS     R1,R1,#+8
   \   0000002C   0xE1B01221         LSRS     R1,R1,#+4
   \   00000030   0xEA000000         B        ??pit_init_1
   \                     ??pit_init_0:
   \   00000034   0xE3A01000         MOV      R1,#+0
   \                     ??pit_init_1:
   \   00000038   0x........         LDR      R2,??DataTable9  ;; 0xf8048030
   \   0000003C   0xE5821000         STR      R1,[R2, #+0]
     89          	PIT->PIT_MR |= PIT_MR_PITEN;
   \   00000040   0x........         LDR      R1,??DataTable9  ;; 0xf8048030
   \   00000044   0xE5911000         LDR      R1,[R1, #+0]
   \   00000048   0xE3911740         ORRS     R1,R1,#0x1000000
   \   0000004C   0x........         LDR      R2,??DataTable9  ;; 0xf8048030
   \   00000050   0xE5821000         STR      R1,[R2, #+0]
     90          }
   \   00000054   0xE8BD8010         POP      {R4,PC}          ;; return
     91          
     92          /**
     93           * \brief Set the Periodic Interval Value of the PIT.
     94           *
     95           *  \param piv  PIV value to set.
     96           */

   \                                 In section SOFTPACK, align 4, keep-with-next
     97          void pit_set_piv(uint32_t piv)
     98          {
     99          	uint32_t dwMr = PIT->PIT_MR & (~PIT_MR_PIV_Msk);
   \                     pit_set_piv:
   \   00000000   0x........         LDR      R1,??DataTable9  ;; 0xf8048030
   \   00000004   0xE5911000         LDR      R1,[R1, #+0]
   \   00000008   0xE1B01A21         LSRS     R1,R1,#+20
   \   0000000C   0xE1B01A01         LSLS     R1,R1,#+20
    100          	PIT->PIT_MR = dwMr | PIT_MR_PIV(piv);
   \   00000010   0xE1B02600         LSLS     R2,R0,#+12
   \   00000014   0xE1912622         ORRS     R2,R1,R2, LSR #+12
   \   00000018   0x........         LDR      R3,??DataTable9  ;; 0xf8048030
   \   0000001C   0xE5832000         STR      R2,[R3, #+0]
    101          }
   \   00000020   0xE12FFF1E         BX       LR               ;; return
    102          
    103          /**
    104           * \brief Enables the PIT if this is not already the case.
    105           *
    106           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    107          void pit_enable(void)
    108          {
    109          	PIT->PIT_MR |= PIT_MR_PITEN;
   \                     pit_enable:
   \   00000000   0x........         LDR      R0,??DataTable9  ;; 0xf8048030
   \   00000004   0xE5900000         LDR      R0,[R0, #+0]
   \   00000008   0xE3900740         ORRS     R0,R0,#0x1000000
   \   0000000C   0x........         LDR      R1,??DataTable9  ;; 0xf8048030
   \   00000010   0xE5810000         STR      R0,[R1, #+0]
    110          }
   \   00000014   0xE12FFF1E         BX       LR               ;; return
    111          
    112          /**
    113           * \brief Disnables the PIT when PIV value is reached.
    114           *
    115           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    116          void pit_disable(void)
    117          {
    118          	PIT->PIT_MR &= ~PIT_MR_PITEN;
   \                     pit_disable:
   \   00000000   0x........         LDR      R0,??DataTable9  ;; 0xf8048030
   \   00000004   0xE5900000         LDR      R0,[R0, #+0]
   \   00000008   0xE3D00740         BICS     R0,R0,#0x1000000
   \   0000000C   0x........         LDR      R1,??DataTable9  ;; 0xf8048030
   \   00000010   0xE5810000         STR      R0,[R1, #+0]
    119          }
   \   00000014   0xE12FFF1E         BX       LR               ;; return
    120          
    121          /**
    122           * \brief Enable the PIT periodic interrupt.
    123           *
    124           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    125          void pit_enable_it(void)
    126          {
    127          	PIT->PIT_MR |= PIT_MR_PITIEN;
   \                     pit_enable_it:
   \   00000000   0x........         LDR      R0,??DataTable9  ;; 0xf8048030
   \   00000004   0xE5900000         LDR      R0,[R0, #+0]
   \   00000008   0xE3900780         ORRS     R0,R0,#0x2000000
   \   0000000C   0x........         LDR      R1,??DataTable9  ;; 0xf8048030
   \   00000010   0xE5810000         STR      R0,[R1, #+0]
    128          }
   \   00000014   0xE12FFF1E         BX       LR               ;; return
    129          
    130          /**
    131           * \brief Disables the PIT periodic interrupt.
    132           *
    133           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    134          void pit_disable_it(void)
    135          {
    136          	PIT->PIT_MR &= ~PIT_MR_PITIEN;
   \                     pit_disable_it:
   \   00000000   0x........         LDR      R0,??DataTable9  ;; 0xf8048030
   \   00000004   0xE5900000         LDR      R0,[R0, #+0]
   \   00000008   0xE3D00780         BICS     R0,R0,#0x2000000
   \   0000000C   0x........         LDR      R1,??DataTable9  ;; 0xf8048030
   \   00000010   0xE5810000         STR      R0,[R1, #+0]
    137          }
   \   00000014   0xE12FFF1E         BX       LR               ;; return
    138          
    139          /**
    140           * \brief Returns the value of the PIT mode register.
    141           *
    142           * \return PIT_MR value.
    143           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    144          uint32_t pit_get_mode(void)
    145          {
    146          	return PIT->PIT_MR;
   \                     pit_get_mode:
   \   00000000   0x........         LDR      R0,??DataTable9  ;; 0xf8048030
   \   00000004   0xE5900000         LDR      R0,[R0, #+0]
   \   00000008   0xE12FFF1E         BX       LR               ;; return
    147          }
    148          
    149          /**
    150           * \brief Returns the value of the PIT status register, clearing it as a side effect.
    151           *
    152           * \return PIT_SR value.
    153           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    154          uint32_t pit_get_status(void)
    155          {
    156          	return PIT->PIT_SR;
   \                     pit_get_status:
   \   00000000   0x........         LDR      R0,??DataTable9_1  ;; 0xf8048034
   \   00000004   0xE5900000         LDR      R0,[R0, #+0]
   \   00000008   0xE12FFF1E         BX       LR               ;; return
    157          }
    158          
    159          /**
    160           * \brief Returns the value of the PIT Image Register, to read PICNT and CPIV without
    161           *  clearing the current values.
    162           *
    163           * \return PIT_PIIR value.
    164           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    165          uint32_t pit_get_piir(void)
    166          {
    167          	return PIT->PIT_PIIR;
   \                     pit_get_piir:
   \   00000000   0x........         LDR      R0,??DataTable9_2  ;; 0xf804803c
   \   00000004   0xE5900000         LDR      R0,[R0, #+0]
   \   00000008   0xE12FFF1E         BX       LR               ;; return
    168          }
    169          
    170          /**
    171           * \brief Returns the value of the PIT Value Register, clearing it as a side effect.
    172           *
    173           * \return PITC_PIVR value.
    174           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    175          uint32_t pit_get_pivr(void)
    176          {
    177          	return PIT->PIT_PIVR;
   \                     pit_get_pivr:
   \   00000000   0x........         LDR      R0,??DataTable9_3  ;; 0xf8048038
   \   00000004   0xE5900000         LDR      R0,[R0, #+0]
   \   00000008   0xE12FFF1E         BX       LR               ;; return
    178          }

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0xF8048030         DC32     0xf8048030

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0xF8048034         DC32     0xf8048034

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0xF804803C         DC32     0xf804803c

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   0xF8048038         DC32     0xf8048038

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   pit_disable
       0   pit_disable_it
       0   pit_enable
       0   pit_enable_it
       0   pit_get_mode
       0   pit_get_piir
       0   pit_get_pivr
       0   pit_get_status
       8   pit_init
         8   -> pmc_get_peripheral_max_clock
         8 __aeabi_uidiv
       0   pit_set_piv


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_2
       4  ??DataTable9_3
      56  _id_h64_matrix
      24  pit_disable
      24  pit_disable_it
      24  pit_enable
      24  pit_enable_it
      12  pit_get_mode
      12  pit_get_piir
      12  pit_get_pivr
      12  pit_get_status
      88  pit_init
      36  pit_set_piv

 
  56 bytes in section .rodata
 284 bytes in section SOFTPACK
 
 284 bytes of CODE  memory
  56 bytes of CONST memory

Errors: none
Warnings: 1
