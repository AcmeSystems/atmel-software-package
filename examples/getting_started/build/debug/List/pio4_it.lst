###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        21/May/2015  13:39:03
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  arm
#    Endian       =  little
#    Source file  =  
#        C:\Users\dfronek\Documents\Project\softpack\drivers\core\pio4_it.c
#    Command line =  
#        C:\Users\dfronek\Documents\Project\softpack\drivers\core\pio4_it.c -D
#        BOARD_SAMA5D2_XPLAINED -D API_PIOv4 -D SERIE_SAMA5D2 -D CHIP_SAMA5D27
#        -D sram --preprocess=l
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\List\
#        -lC
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\List\
#        -o
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-A5 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../drivers\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../examples\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../lib\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../target\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../target/include\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../target/sama5d2\
#        --section .text=SOFTPACK --cpu_mode arm -On
#    List file    =  
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\List\pio4_it.lst
#    Object file  =  
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\Obj\pio4_it.o
#
###############################################################################

C:\Users\dfronek\Documents\Project\softpack\drivers\core\pio4_it.c
      1          /* ----------------------------------------------------------------------------
                                                                                               ^
Warning[Pa050]: non-native end of line sequence detected (this diagnostic is
          only issued once)
      2           *         SAM Software Package License
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2013, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          /** \file */
     31          
     32          /*----------------------------------------------------------------------------
     33           *        Headers
     34           *----------------------------------------------------------------------------*/
     35          
     36          #include "chip.h"

   \                                 In section .rodata, align 4
   \   __absolute unsigned int const _id_h64_matrix[14]
   \                     _id_h64_matrix:
   \   00000000   0x00000006         DC32 6, 7, 9, 10, 12, 13, 15, 31, 32, 45, 46, 52, 53, 63
   \              0x00000007   
   \              0x00000009   
   \              0x0000000A   
   \              0x0000000C   
   \              0x0000000D   
   \              0x0000000F   
   \              0x0000001F   
   \              0x00000020   
   \              0x0000002D   
   \              0x0000002E   
   \              0x00000034   
   \              0x00000035   
   \              0x0000003F   
     37          #include "core/pio_it.h"
     38          #include "core/aic.h"
     39          #include "core/pmc.h"
     40          #include "utils/trace.h"
     41          
     42          #include <assert.h>
     43          
     44          /*----------------------------------------------------------------------------
     45           *        Local definitions
     46           *----------------------------------------------------------------------------*/
     47          
     48          /* Maximum number of interrupt sources that can be defined. This
     49           * constant can be increased, but the current value is the smallest possible
     50           * that will be compatible with all existing projects. */
     51          #define MAX_INTERRUPT_SOURCES       7
     52          
     53          /*----------------------------------------------------------------------------
     54           *        Local types
     55           *----------------------------------------------------------------------------*/
     56          
     57          /**
     58           * Describes a PIO interrupt source, including the PIO instance triggering the
     59           * interrupt and the associated interrupt handler.
     60           */
     61          struct _interrupt_source {
     62          	const struct _pin *pin;					/* Pointer to the source pin instance. */
     63          	void (*handler) (const struct _pin *); 	/* Interrupt handler. */
     64          } ;
     65          
     66          /*----------------------------------------------------------------------------
     67           *        Local variables
     68           *----------------------------------------------------------------------------*/
     69          
     70          /* List of interrupt sources. */

   \                                 In section .bss, align 4
     71          static struct _interrupt_source int_sources[MAX_INTERRUPT_SOURCES];
   \                     int_sources:
   \   00000000                      DS8 56
     72          
     73          /* Number of currently defined interrupt sources. */

   \                                 In section .bss, align 4
     74          static uint32_t num_sources = 0;
   \                     num_sources:
   \   00000000                      DS8 4
     75          

   \                                 In section .rodata, align 4
     76          const uint8_t idt[PIOIO_GROUP_NUMBER] = {ID_PIOA, ID_PIOB, ID_PIOC, ID_PIOD};
   \                     idt:
   \   00000000   0x12 0x44          DC8 18, 68, 69, 70
   \              0x45 0x46    
     77          
     78          /*----------------------------------------------------------------------------
     79           *        Local Functions
     80           *----------------------------------------------------------------------------*/
     81          
     82          /**
     83           * \brief Handles all interrupts on the given PIO controller.
     84           * \param id  PIO controller ID.
     85           * \param pPio  PIO controller base address.
     86           */

   \                                 In section SOFTPACK, align 4, keep-with-next
     87          void _pio_it_handler(uint8_t id)
     88          {
   \                     _pio_it_handler:
   \   00000000   0xE92D40F8         PUSH     {R3-R7,LR}
   \   00000004   0xE1B04000         MOVS     R4,R0
     89          	uint32_t status;
     90          	uint32_t i;
     91          	PioIo_group* pioiog = &PIO_ADD->PIO_IO_GROUP[id];
   \   00000008   0xE3A004FC         MOV      R0,#-67108864
   \   0000000C   0xE3800BE0         ORR      R0,R0,#0x38000
   \   00000010   0xE1B01004         MOVS     R1,R4
   \   00000014   0xE6EF1071         UXTB     R1,R1
   \   00000018   0xE1B01301         LSLS     R1,R1,#+6
   \   0000001C   0xE0917000         ADDS     R7,R1,R0
     92          
     93          	/* Read PIO controller status */
     94          	status = pioiog->PIO_ISR;
   \   00000020   0xE597002C         LDR      R0,[R7, #+44]
   \   00000024   0xE1B05000         MOVS     R5,R0
     95          	status &= pioiog->PIO_IMR;
   \   00000028   0xE5970028         LDR      R0,[R7, #+40]
   \   0000002C   0xE0105005         ANDS     R5,R0,R5
     96          
     97          	/* Check pending events */
     98          	if (status != 0) {
   \   00000030   0xE3550000         CMP      R5,#+0
   \   00000034   0x0A000028         BEQ      ??_pio_it_handler_0
     99          		TRACE_DEBUG("PIO interrupt on PIO controller #%d\n\r", id);
    100          		/* Find triggering source */
    101          		i = 0;
   \   00000038   0xE3A00000         MOV      R0,#+0
   \   0000003C   0xE1B06000         MOVS     R6,R0
    102          		while (status != 0) {
   \                     ??_pio_it_handler_1:
   \   00000040   0xE3550000         CMP      R5,#+0
   \   00000044   0x0A000024         BEQ      ??_pio_it_handler_0
    103          			/* There cannot be an unconfigured source enabled. */
    104          			assert(i < num_sources);
   \   00000048   0x........         LDR      R0,??DataTable5
   \   0000004C   0xE5900000         LDR      R0,[R0, #+0]
   \   00000050   0xE1560000         CMP      R6,R0
   \   00000054   0x3A000004         BCC      ??_pio_it_handler_2
   \   00000058   0xE3A02068         MOV      R2,#+104
   \   0000005C   0x........         LDR      R1,??DataTable5_1
   \   00000060   0x........         LDR      R0,??DataTable5_2
   \   00000064   0x........         BL       __aeabi_assert
   \   00000068   0x........         BL       __iar_EmptyStepPoint
    105          			/* Source is configured on the same controller */
    106          			if ( int_sources[i].pin->id == id) {
   \                     ??_pio_it_handler_2:
   \   0000006C   0x........         LDR      R0,??DataTable5_3
   \   00000070   0xE1B01186         LSLS     R1,R6,#+3
   \   00000074   0xE7910000         LDR      R0,[R1, +R0]
   \   00000078   0xE5D00008         LDRB     R0,[R0, #+8]
   \   0000007C   0xE6EF4074         UXTB     R4,R4
   \   00000080   0xE1500004         CMP      R0,R4
   \   00000084   0x1A000012         BNE      ??_pio_it_handler_3
    107          				/* Source has PIOs whose statuses have changed */
    108          				if ((status & int_sources[i].pin->mask) != 0) {
   \   00000088   0x........         LDR      R0,??DataTable5_3
   \   0000008C   0xE1B01186         LSLS     R1,R6,#+3
   \   00000090   0xE7910000         LDR      R0,[R1, +R0]
   \   00000094   0xE5900000         LDR      R0,[R0, #+0]
   \   00000098   0xE1100005         TST      R0,R5
   \   0000009C   0x0A00000C         BEQ      ??_pio_it_handler_3
    109          					TRACE_DEBUG ("Interrupt source #%d triggered\n\r", i);
    110          					int_sources[i].handler(int_sources[i].pin);
   \   000000A0   0x........         LDR      R0,??DataTable5_3
   \   000000A4   0xE1B01186         LSLS     R1,R6,#+3
   \   000000A8   0xE7910000         LDR      R0,[R1, +R0]
   \   000000AC   0x........         LDR      R1,??DataTable5_3
   \   000000B0   0xE1B02186         LSLS     R2,R6,#+3
   \   000000B4   0xE0921001         ADDS     R1,R2,R1
   \   000000B8   0xE5911004         LDR      R1,[R1, #+4]
   \   000000BC   0xE12FFF31         BLX      R1
    111          					status &= ~(int_sources[i].pin->mask);
   \   000000C0   0x........         LDR      R0,??DataTable5_3
   \   000000C4   0xE1B01186         LSLS     R1,R6,#+3
   \   000000C8   0xE7910000         LDR      R0,[R1, +R0]
   \   000000CC   0xE5900000         LDR      R0,[R0, #+0]
   \   000000D0   0xE1D55000         BICS     R5,R5,R0
    112          				}
    113          			}
    114          			i++;
   \                     ??_pio_it_handler_3:
   \   000000D4   0xE2966001         ADDS     R6,R6,#+1
   \   000000D8   0xEAFFFFD8         B        ??_pio_it_handler_1
    115          		}
    116          	}
    117          }
   \                     ??_pio_it_handler_0:
   \   000000DC   0xE8BD80F1         POP      {R0,R4-R7,PC}    ;; return
    118          
    119          
    120          /*----------------------------------------------------------------------------
    121           *        Global Functions
    122           *----------------------------------------------------------------------------*/
    123          
    124          /**
    125           * Generic PIO interrupt handler. Single entry point for interrupts coming
    126           * from any PIO controller (PIO A, B, C ...). Dispatches the interrupt to
    127           * the user-configured handlers.
    128           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    129          void pio_it_handler(void)
    130          {
   \                     pio_it_handler:
   \   00000000   0xE92D4010         PUSH     {R4,LR}
    131          	uint8_t i;
    132          	for(i=0; i<PIOIO_GROUP_NUMBER; i++) {
   \   00000004   0xE3A00000         MOV      R0,#+0
   \   00000008   0xE1B04000         MOVS     R4,R0
   \                     ??pio_it_handler_0:
   \   0000000C   0xE1B00004         MOVS     R0,R4
   \   00000010   0xE6EF0070         UXTB     R0,R0
   \   00000014   0xE3500004         CMP      R0,#+4
   \   00000018   0xAA000006         BGE      ??pio_it_handler_1
    133          		_pio_it_handler(idt[i]);
   \   0000001C   0x........         LDR      R0,??DataTable5_4
   \   00000020   0xE1B01004         MOVS     R1,R4
   \   00000024   0xE6EF1071         UXTB     R1,R1
   \   00000028   0xE7D10000         LDRB     R0,[R1, +R0]
   \   0000002C   0x........         BL       _pio_it_handler
    134          	}
   \   00000030   0xE2944001         ADDS     R4,R4,#+1
   \   00000034   0xEAFFFFF4         B        ??pio_it_handler_0
    135          }
   \                     ??pio_it_handler_1:
   \   00000038   0xE8BD8010         POP      {R4,PC}          ;; return
    136          
    137          /**
    138           * \brief Initializes the PIO interrupt management logic
    139           *
    140           * The desired priority of PIO interrupts must be provided.
    141           * Calling this function multiple times result in the reset of currently
    142           * configured interrupts.
    143           *
    144           * \param priority  PIO controller interrupts priority.
    145           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    146          void pio_initialize_it(uint32_t priority)
    147          {
   \                     pio_initialize_it:
   \   00000000   0xE92D41F0         PUSH     {R4-R8,LR}
   \   00000004   0xE1B04000         MOVS     R4,R0
    148          	uint8_t i;
    149          	uint32_t status, id ;
                 	         ^
Warning[Pe550]: variable "status" was set but never used
    150          
    151          	TRACE_DEBUG("pio_initialize_it()\n\r");
    152          	/* Reset sources */
    153          	num_sources = 0;
   \   00000008   0xE3A00000         MOV      R0,#+0
   \   0000000C   0x........         LDR      R1,??DataTable5
   \   00000010   0xE5810000         STR      R0,[R1, #+0]
    154          
    155          	for(i=0; i<PIOIO_GROUP_NUMBER; i++) {
   \   00000014   0xE3A00000         MOV      R0,#+0
   \   00000018   0xE1B07000         MOVS     R7,R0
   \                     ??pio_initialize_it_0:
   \   0000001C   0xE1B00007         MOVS     R0,R7
   \   00000020   0xE6EF0070         UXTB     R0,R0
   \   00000024   0xE3500004         CMP      R0,#+4
   \   00000028   0xAA000012         BGE      ??pio_initialize_it_1
    156          		/* Configure PIO interrupt sources */
    157          		id = idt[i];
   \   0000002C   0x........         LDR      R0,??DataTable5_4
   \   00000030   0xE1B01007         MOVS     R1,R7
   \   00000034   0xE6EF1071         UXTB     R1,R1
   \   00000038   0xE7D10000         LDRB     R0,[R1, +R0]
   \   0000003C   0xE1B06000         MOVS     R6,R0
    158          		TRACE_DEBUG("PIO_Initialize: Configuring PIO%c \n\r", 0x40+id);
    159          		pmc_enable_peripheral(id);
   \   00000040   0xE1B00006         MOVS     R0,R6
   \   00000044   0x........         BL       pmc_enable_peripheral
    160          		PioIo_group* pioiog = &PIO_ADD->PIO_IO_GROUP[id];
   \   00000048   0xE3A004FC         MOV      R0,#-67108864
   \   0000004C   0xE3800BE0         ORR      R0,R0,#0x38000
   \   00000050   0xE1B01306         LSLS     R1,R6,#+6
   \   00000054   0xE0918000         ADDS     R8,R1,R0
    161          		/* Read PIO Interrupt Status Register */
    162          		status = pioiog->PIO_ISR;
   \   00000058   0xE598002C         LDR      R0,[R8, #+44]
   \   0000005C   0xE1B05000         MOVS     R5,R0
    163          		/* Disable all interrupt */
    164          		pioiog->PIO_IDR = 0xFFFFFFFF;
   \   00000060   0xE3E00000         MVN      R0,#+0
   \   00000064   0xE5880024         STR      R0,[R8, #+36]
    165          		aic_enable(id);
   \   00000068   0xE1B00006         MOVS     R0,R6
   \   0000006C   0x........         BL       aic_enable
    166          	}
   \   00000070   0xE2977001         ADDS     R7,R7,#+1
   \   00000074   0xEAFFFFE8         B        ??pio_initialize_it_0
    167          }
   \                     ??pio_initialize_it_1:
   \   00000078   0xE8BD81F0         POP      {R4-R8,PC}       ;; return
    168          
    169          /**
    170           * Configures a PIO or a group of PIO to generate an interrupt on status
    171           * change. The provided interrupt handler will be called with the triggering
    172           * pin as its parameter (enabling different pin instances to share the same
    173           * handler).
    174           * \param pPin  Pointer to a Pin instance.
    175           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    176          void pio_configure_it(const struct _pin *pin)
    177          {
   \                     pio_configure_it:
   \   00000000   0xE92D4010         PUSH     {R4,LR}
   \   00000004   0xE1B04000         MOVS     R4,R0
    178          	TRACE_DEBUG("pio_configure_it()\n\r");
    179          	assert(pin != NULL);
   \   00000008   0xE3540000         CMP      R4,#+0
   \   0000000C   0x1A000004         BNE      ??pio_configure_it_0
   \   00000010   0xE3A020B3         MOV      R2,#+179
   \   00000014   0x........         LDR      R1,??DataTable5_1
   \   00000018   0x........         LDR      R0,??DataTable5_5
   \   0000001C   0x........         BL       __aeabi_assert
   \   00000020   0x........         BL       __iar_EmptyStepPoint
    180          	assert(num_sources < MAX_INTERRUPT_SOURCES);
   \                     ??pio_configure_it_0:
   \   00000024   0x........         LDR      R0,??DataTable5
   \   00000028   0xE5900000         LDR      R0,[R0, #+0]
   \   0000002C   0xE3500007         CMP      R0,#+7
   \   00000030   0x3A000004         BCC      ??pio_configure_it_1
   \   00000034   0xE3A020B4         MOV      R2,#+180
   \   00000038   0x........         LDR      R1,??DataTable5_1
   \   0000003C   0x........         LDR      R0,??DataTable5_6
   \   00000040   0x........         BL       __aeabi_assert
   \   00000044   0x........         BL       __iar_EmptyStepPoint
    181          	struct _interrupt_source *p_int_source;
    182          	PioIo_group* pioiog = &pin->pio->PIO_IO_GROUP[pin->id];
   \                     ??pio_configure_it_1:
   \   00000048   0xE5941004         LDR      R1,[R4, #+4]
   \   0000004C   0xE5D42008         LDRB     R2,[R4, #+8]
   \   00000050   0xE1B02302         LSLS     R2,R2,#+6
   \   00000054   0xE0921001         ADDS     R1,R2,R1
    183          
    184          	// Add pio interrupt to int_sources
    185          	p_int_source = &(int_sources[num_sources]);
   \   00000058   0x........         LDR      R2,??DataTable5_3
   \   0000005C   0x........         LDR      R3,??DataTable5
   \   00000060   0xE5933000         LDR      R3,[R3, #+0]
   \   00000064   0xE1B03183         LSLS     R3,R3,#+3
   \   00000068   0xE0932002         ADDS     R2,R3,R2
   \   0000006C   0xE1B00002         MOVS     R0,R2
    186          	p_int_source->pin = pin;
   \   00000070   0xE5804000         STR      R4,[R0, #+0]
    187          	num_sources++;
   \   00000074   0x........         LDR      R2,??DataTable5
   \   00000078   0xE5922000         LDR      R2,[R2, #+0]
   \   0000007C   0xE2922001         ADDS     R2,R2,#+1
   \   00000080   0x........         LDR      R3,??DataTable5
   \   00000084   0xE5832000         STR      R2,[R3, #+0]
    188          	/* disable additional interrupt mode */
    189          	pioiog->PIO_IDR = pin->mask;
   \   00000088   0xE5942000         LDR      R2,[R4, #+0]
   \   0000008C   0xE5812024         STR      R2,[R1, #+36]
    190          }
   \   00000090   0xE8BD8010         POP      {R4,PC}          ;; return
    191          
    192          /**
    193           * Enables the given interrupt source if it has been configured. The status
    194           * register of the corresponding PIO controller is cleared prior to enabling
    195           * the interrupt.
    196           * \param pin  Interrupt source to enable.
    197           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    198          void pio_enable_it(const struct _pin *pin)
    199          {
   \                     pio_enable_it:
   \   00000000   0xE92D40F8         PUSH     {R3-R7,LR}
   \   00000004   0xE1B04000         MOVS     R4,R0
    200          	TRACE_DEBUG("pio_enable_it() \n\r");
    201          	assert(pin != NULL);
   \   00000008   0xE3540000         CMP      R4,#+0
   \   0000000C   0x1A000004         BNE      ??pio_enable_it_0
   \   00000010   0xE3A020C9         MOV      R2,#+201
   \   00000014   0x........         LDR      R1,??DataTable5_1
   \   00000018   0x........         LDR      R0,??DataTable5_5
   \   0000001C   0x........         BL       __aeabi_assert
   \   00000020   0x........         BL       __iar_EmptyStepPoint
    202          	PioIo_group* pioiog = &pin->pio->PIO_IO_GROUP[pin->id];
   \                     ??pio_enable_it_0:
   \   00000024   0xE5940004         LDR      R0,[R4, #+4]
   \   00000028   0xE5D41008         LDRB     R1,[R4, #+8]
   \   0000002C   0xE1B01301         LSLS     R1,R1,#+6
   \   00000030   0xE0915000         ADDS     R5,R1,R0
    203          
    204          #ifndef NOASSERT
    205          	uint32_t i = 0;
   \   00000034   0xE3A06000         MOV      R6,#+0
    206          	uint32_t dwFound = 0;
   \   00000038   0xE3A07000         MOV      R7,#+0
    207          
    208          	while ((i < num_sources) && !dwFound) {
   \                     ??pio_enable_it_1:
   \   0000003C   0x........         LDR      R0,??DataTable5
   \   00000040   0xE5900000         LDR      R0,[R0, #+0]
   \   00000044   0xE1560000         CMP      R6,R0
   \   00000048   0x2A00000A         BCS      ??pio_enable_it_2
   \   0000004C   0xE3570000         CMP      R7,#+0
   \   00000050   0x1A000008         BNE      ??pio_enable_it_2
    209          		if (int_sources[i].pin == pin) {
   \   00000054   0x........         LDR      R0,??DataTable5_3
   \   00000058   0xE1B01186         LSLS     R1,R6,#+3
   \   0000005C   0xE7910000         LDR      R0,[R1, +R0]
   \   00000060   0xE1500004         CMP      R0,R4
   \   00000064   0x1A000001         BNE      ??pio_enable_it_3
    210          			dwFound = 1;
   \   00000068   0xE3A00001         MOV      R0,#+1
   \   0000006C   0xE1B07000         MOVS     R7,R0
    211          		}
    212          		i++;
   \                     ??pio_enable_it_3:
   \   00000070   0xE2966001         ADDS     R6,R6,#+1
   \   00000074   0xEAFFFFF0         B        ??pio_enable_it_1
    213          	}
    214          	assert(dwFound != 0);
   \                     ??pio_enable_it_2:
   \   00000078   0xE3570000         CMP      R7,#+0
   \   0000007C   0x1A000004         BNE      ??pio_enable_it_4
   \   00000080   0xE3A020D6         MOV      R2,#+214
   \   00000084   0x........         LDR      R1,??DataTable5_1
   \   00000088   0x........         LDR      R0,??DataTable5_7
   \   0000008C   0x........         BL       __aeabi_assert
   \   00000090   0x........         BL       __iar_EmptyStepPoint
    215          #endif
    216          
    217          	i = pioiog->PIO_ISR;
   \                     ??pio_enable_it_4:
   \   00000094   0xE595002C         LDR      R0,[R5, #+44]
   \   00000098   0xE1B06000         MOVS     R6,R0
    218           	/* Configure interrupt enable register */
    219          	pioiog->PIO_IER = pin->mask;	/* enable interrupt register */
   \   0000009C   0xE5940000         LDR      R0,[R4, #+0]
   \   000000A0   0xE5850020         STR      R0,[R5, #+32]
    220          }
   \   000000A4   0xE8BD80F1         POP      {R0,R4-R7,PC}    ;; return
    221          
    222          /**
    223           * Disables a given interrupt source, with no added side effects.
    224           *
    225           * \param pin  Interrupt source to disable.
    226           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    227          void pio_disable_it(const struct _pin *pin)
    228          {
   \                     pio_disable_it:
   \   00000000   0xE92D4010         PUSH     {R4,LR}
   \   00000004   0xE1B04000         MOVS     R4,R0
    229          	assert(pin != NULL);
   \   00000008   0xE3540000         CMP      R4,#+0
   \   0000000C   0x1A000004         BNE      ??pio_disable_it_0
   \   00000010   0xE3A020E5         MOV      R2,#+229
   \   00000014   0x........         LDR      R1,??DataTable5_1
   \   00000018   0x........         LDR      R0,??DataTable5_5
   \   0000001C   0x........         BL       __aeabi_assert
   \   00000020   0x........         BL       __iar_EmptyStepPoint
    230          	TRACE_DEBUG("pio_enable_it()\n\r");
    231          	PioIo_group* pioiog = &pin->pio->PIO_IO_GROUP[pin->id];
   \                     ??pio_disable_it_0:
   \   00000024   0xE5940004         LDR      R0,[R4, #+4]
   \   00000028   0xE5D41008         LDRB     R1,[R4, #+8]
   \   0000002C   0xE1B01301         LSLS     R1,R1,#+6
   \   00000030   0xE0910000         ADDS     R0,R1,R0
    232          	pioiog->PIO_IDR = pin->mask;
   \   00000034   0xE5941000         LDR      R1,[R4, #+0]
   \   00000038   0xE5801024         STR      R1,[R0, #+36]
    233          }
   \   0000003C   0xE8BD8010         POP      {R4,PC}          ;; return

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     num_sources

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     ?_1

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     ?_0

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     int_sources

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     idt

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     ?_2

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x........         DC32     ?_3

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x69 0x20          DC8 "i < num_sources"
   \              0x3C 0x20    
   \              0x6E 0x75    
   \              0x6D 0x5F    
   \              0x73 0x6F    
   \              0x75 0x72    
   \              0x63 0x65    
   \              0x73 0x00    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x43 0x3A          DC8 43H, 3AH, 5CH, 55H, 73H, 65H, 72H, 73H
   \              0x5C 0x55    
   \              0x73 0x65    
   \              0x72 0x73    
   \   00000008   0x5C 0x64          DC8 5CH, 64H, 66H, 72H, 6FH, 6EH, 65H, 6BH
   \              0x66 0x72    
   \              0x6F 0x6E    
   \              0x65 0x6B    
   \   00000010   0x5C 0x44          DC8 5CH, 44H, 6FH, 63H, 75H, 6DH, 65H, 6EH
   \              0x6F 0x63    
   \              0x75 0x6D    
   \              0x65 0x6E    
   \   00000018   0x74 0x73          DC8 74H, 73H, 5CH, 50H, 72H, 6FH, 6AH, 65H
   \              0x5C 0x50    
   \              0x72 0x6F    
   \              0x6A 0x65    
   \   00000020   0x63 0x74          DC8 63H, 74H, 5CH, 73H, 6FH, 66H, 74H, 70H
   \              0x5C 0x73    
   \              0x6F 0x66    
   \              0x74 0x70    
   \   00000028   0x61 0x63          DC8 61H, 63H, 6BH, 5CH, 64H, 72H, 69H, 76H
   \              0x6B 0x5C    
   \              0x64 0x72    
   \              0x69 0x76    
   \   00000030   0x65 0x72          DC8 65H, 72H, 73H, 5CH, 63H, 6FH, 72H, 65H
   \              0x73 0x5C    
   \              0x63 0x6F    
   \              0x72 0x65    
   \   00000038   0x5C 0x70          DC8 5CH, 70H, 69H, 6FH, 34H, 5FH, 69H, 74H
   \              0x69 0x6F    
   \              0x34 0x5F    
   \              0x69 0x74    
   \   00000040   0x2E 0x63          DC8 2EH, 63H, 0
   \              0x00         
   \   00000043   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x70 0x69          DC8 "pin != NULL"
   \              0x6E 0x20    
   \              0x21 0x3D    
   \              0x20 0x4E    
   \              0x55 0x4C    
   \              0x4C 0x00    

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x6E 0x75          DC8 "num_sources < MAX_INTERRUPT_SOURCES"
   \              0x6D 0x5F    
   \              0x73 0x6F    
   \              0x75 0x72    
   \              0x63 0x65    
   \              0x73 0x20    
   \              0x3C 0x20    
   \              0x4D 0x41    
   \              0x58 0x5F    
   \              0x49 0x4E    
   \              0x54 0x45    
   \              0x52 0x52    
   \              0x55 0x50    
   \              0x54 0x5F    
   \              0x53 0x4F    
   \              0x55 0x52    
   \              0x43 0x45    
   \              0x53 0x00    

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x64 0x77          DC8 "dwFound != 0"
   \              0x46 0x6F    
   \              0x75 0x6E    
   \              0x64 0x20    
   \              0x21 0x3D    
   \              0x20 0x30    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   _pio_it_handler
        24   -- Indirect call
        24   -> __aeabi_assert
        24   -> __iar_EmptyStepPoint
       8   pio_configure_it
         8   -> __aeabi_assert
         8   -> __iar_EmptyStepPoint
       8   pio_disable_it
         8   -> __aeabi_assert
         8   -> __iar_EmptyStepPoint
      24   pio_enable_it
        24   -> __aeabi_assert
        24   -> __iar_EmptyStepPoint
      24   pio_initialize_it
        24   -> aic_enable
        24   -> pmc_enable_peripheral
       8   pio_it_handler
         8   -> _pio_it_handler


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
      16  ?_0
      68  ?_1
      12  ?_2
      36  ?_3
      16  ?_4
      56  _id_h64_matrix
     224  _pio_it_handler
       4  idt
      56  int_sources
       4  num_sources
     148  pio_configure_it
      64  pio_disable_it
     168  pio_enable_it
     124  pio_initialize_it
      60  pio_it_handler

 
  60 bytes in section .bss
 208 bytes in section .rodata
 820 bytes in section SOFTPACK
 
 820 bytes of CODE  memory
 208 bytes of CONST memory
  60 bytes of DATA  memory

Errors: none
Warnings: 2
