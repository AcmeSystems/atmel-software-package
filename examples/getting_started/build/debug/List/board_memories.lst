###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        21/May/2015  13:39:00
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  arm
#    Endian       =  little
#    Source file  =  
#        C:\Users\dfronek\Documents\Project\softpack\target\sama5d2\board_memories.c
#    Command line =  
#        C:\Users\dfronek\Documents\Project\softpack\target\sama5d2\board_memories.c
#        -D BOARD_SAMA5D2_XPLAINED -D API_PIOv4 -D SERIE_SAMA5D2 -D
#        CHIP_SAMA5D27 -D sram --preprocess=l
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\List\
#        -lC
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\List\
#        -o
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-A5 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../drivers\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../examples\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../lib\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../target\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../target/include\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../target/sama5d2\
#        --section .text=SOFTPACK --cpu_mode arm -On
#    List file    =  
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\List\board_memories.lst
#    Object file  =  
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\Obj\board_memories.o
#
###############################################################################

C:\Users\dfronek\Documents\Project\softpack\target\sama5d2\board_memories.c
      1          /* ----------------------------------------------------------------------------
                                                                                               ^
Warning[Pa050]: non-native end of line sequence detected (this diagnostic is
          only issued once)
      2           *         SAM Software Package License
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2015, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          /**
     31           * \file
     32           *
     33           * Implementation of memories configuration on board.
     34           *
     35           */
     36          
     37          
     38          /*----------------------------------------------------------------------------
     39           *        Headers
     40           *----------------------------------------------------------------------------*/
     41          
     42          #include "board.h"

   \                                 In section .rodata, align 4
   \   __absolute unsigned int const _id_h64_matrix[14]
   \                     _id_h64_matrix:
   \   00000000   0x00000006         DC32 6, 7, 9, 10, 12, 13, 15, 31, 32, 45, 46, 52, 53, 63
   \              0x00000007   
   \              0x00000009   
   \              0x0000000A   
   \              0x0000000C   
   \              0x0000000D   
   \              0x0000000F   
   \              0x0000001F   
   \              0x00000020   
   \              0x0000002D   
   \              0x0000002E   
   \              0x00000034   
   \              0x00000035   
   \              0x0000003F   
     43          
     44          /*----------------------------------------------------------------------------
     45           *        Exported functions
     46           *----------------------------------------------------------------------------*/
     47          
     48          /**
     49           * \brief Changes the mapping of the chip so that the remap area mirrors the
     50           * internal ROM or the EBI CS0.
     51           */

   \                                 In section SOFTPACK, align 4, keep-with-next
     52          void board_remap_rom(void)
     53          {
     54              AXIMX->AXIMX_REMAP = 0;
   \                     board_remap_rom:
   \   00000000   0xE3A00000         MOV      R0,#+0
   \   00000004   0xE3A01860         MOV      R1,#+6291456
   \   00000008   0xE5810000         STR      R0,[R1, #+0]
     55          }
   \   0000000C   0xE12FFF1E         BX       LR               ;; return
     56          
     57          /**
     58           * \brief Changes the mapping of the chip so that the remap area mirrors the
     59           * internal RAM.
     60           */
     61          

   \                                 In section SOFTPACK, align 4, keep-with-next
     62          void board_remap_ram(void)
     63          {
   \                     board_remap_ram:
   \   00000000   0xE24DD004         SUB      SP,SP,#+4
     64          	volatile uint32_t i;
     65              AXIMX->AXIMX_REMAP = AXIMX_REMAP_REMAP0;
   \   00000004   0xE3A00001         MOV      R0,#+1
   \   00000008   0xE3A01860         MOV      R1,#+6291456
   \   0000000C   0xE5810000         STR      R0,[R1, #+0]
     66          	for(i=1000;--i;);
   \   00000010   0xE3A00FFA         MOV      R0,#+1000
   \   00000014   0xE58D0000         STR      R0,[SP, #+0]
   \                     ??board_remap_ram_0:
   \   00000018   0xE59D0000         LDR      R0,[SP, #+0]
   \   0000001C   0xE2500001         SUBS     R0,R0,#+1
   \   00000020   0xE58D0000         STR      R0,[SP, #+0]
   \   00000024   0xE3500000         CMP      R0,#+0
   \   00000028   0x1AFFFFFA         BNE      ??board_remap_ram_0
     67          }
   \   0000002C   0xE28DD004         ADD      SP,SP,#+4        ;; stack cleaning
   \   00000030   0xE12FFF1E         BX       LR               ;; return
     68          
     69          /**
     70           * \brief Initialize Vdd EBI drive
     71           * \param 0: 1.8V 1: 3.3V
     72           */

   \                                 In section SOFTPACK, align 4, keep-with-next
     73          void board_configure_vdd_mem_sel(uint8_t VddMemSel)
     74          {
     75          }
   \                     board_configure_vdd_mem_sel:
   \   00000000   0xE12FFF1E         BX       LR               ;; return
     76          
     77          static void matrix_configure_slave_ddr(void)
                             ^
Warning[Pe177]: function "matrix_configure_slave_ddr" was declared but never
          referenced
     78          {
     79          }
     80          
     81          static void matrix_configure_slave_nand(void)
                             ^
Warning[Pe177]: function "matrix_configure_slave_nand" was declared but never
          referenced
     82          {
     83          }
     84          
     85          /**
     86           * \brief Configures DDR3
     87           */

   \                                 In section SOFTPACK, align 4, keep-with-next
     88          void board_configure_ddram(void)
     89          {
     90          }
   \                     board_configure_ddram:
   \   00000000   0xE12FFF1E         BX       LR               ;; return
     91          
     92          /**
     93           * \brief Configures SDRAM.
     94           */

   \                                 In section SOFTPACK, align 4, keep-with-next
     95          void board_configure_sdram(void)
     96          {
     97          }
   \                     board_configure_sdram:
   \   00000000   0xE12FFF1E         BX       LR               ;; return
     98          
     99          /** \brief Configures NandFlash
    100           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    101          void board_configure_nand_flash(uint8_t busWidth)
    102          {
    103          }
   \                     board_configure_nand_flash:
   \   00000000   0xE12FFF1E         BX       LR               ;; return
    104          
    105          /** \brief Configures NorFlash
    106           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    107          void  board_configure_nor_flash(uint8_t busWidth)
    108          {
    109          }
   \                     board_configure_nor_flash:
   \   00000000   0xE12FFF1E         BX       LR               ;; return

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   board_configure_ddram
       0   board_configure_nand_flash
       0   board_configure_nor_flash
       0   board_configure_sdram
       0   board_configure_vdd_mem_sel
       4   board_remap_ram
       0   board_remap_rom


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      56  _id_h64_matrix
       4  board_configure_ddram
       4  board_configure_nand_flash
       4  board_configure_nor_flash
       4  board_configure_sdram
       4  board_configure_vdd_mem_sel
      52  board_remap_ram
      16  board_remap_rom

 
 56 bytes in section .rodata
 88 bytes in section SOFTPACK
 
 88 bytes of CODE  memory
 56 bytes of CONST memory

Errors: none
Warnings: 3
