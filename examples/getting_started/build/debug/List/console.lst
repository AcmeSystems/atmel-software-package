###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        21/May/2015  13:39:01
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  arm
#    Endian       =  little
#    Source file  =  
#        C:\Users\dfronek\Documents\Project\softpack\drivers\bus\console.c
#    Command line =  
#        C:\Users\dfronek\Documents\Project\softpack\drivers\bus\console.c -D
#        BOARD_SAMA5D2_XPLAINED -D API_PIOv4 -D SERIE_SAMA5D2 -D CHIP_SAMA5D27
#        -D sram --preprocess=l
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\List\
#        -lC
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\List\
#        -o
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-A5 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../drivers\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../examples\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../lib\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../target\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../target/include\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../target/sama5d2\
#        --section .text=SOFTPACK --cpu_mode arm -On
#    List file    =  
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\List\console.lst
#    Object file  =  
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\Obj\console.o
#
###############################################################################

C:\Users\dfronek\Documents\Project\softpack\drivers\bus\console.c
      1          /* ----------------------------------------------------------------------------
                                                                                               ^
Warning[Pa050]: non-native end of line sequence detected (this diagnostic is
          only issued once)
      2           *         SAM Software Package License
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2015, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          /**
     31          * \file
     32          *
     33          * Implements CONSOLE.
     34          *
     35          */
     36          
     37          /*----------------------------------------------------------------------------
     38          *        Headers
     39          *----------------------------------------------------------------------------*/
     40          
     41          #include "board.h"

   \                                 In section .rodata, align 4
   \   __absolute unsigned int const _id_h64_matrix[14]
   \                     _id_h64_matrix:
   \   00000000   0x00000006         DC32 6, 7, 9, 10, 12, 13, 15, 31, 32, 45, 46, 52, 53, 63
   \              0x00000007   
   \              0x00000009   
   \              0x0000000A   
   \              0x0000000C   
   \              0x0000000D   
   \              0x0000000F   
   \              0x0000001F   
   \              0x00000020   
   \              0x0000002D   
   \              0x0000002E   
   \              0x00000034   
   \              0x00000035   
   \              0x0000003F   
     42          #include "chip.h"
     43          
     44          #include "core/pio.h"
     45          #include "core/pmc.h"
     46          
     47          #include "bus/console.h"
     48          #include "serial/uart.h"
     49          
     50          #include <stdio.h>
     51          
     52          /*----------------------------------------------------------------------------
     53          *        Variables
     54          *----------------------------------------------------------------------------*/
     55          
     56          /* Initialize console structure according to board configuration */
     57          #if (CONSOLE_DRIVER == DRV_USART)
     58          #include "serial/usart.h"
     59          static const struct _console console = {
     60          	CONSOLE_PER_ADD,
     61          	usart_configure,
     62          	usart_put_char,
     63          	usart_get_char,
     64          	usart_is_rx_ready
     65          };
     66          #elif (CONSOLE_DRIVER == DRV_UART)
     67          #include "serial/uart.h"

   \                                 In section .rodata, align 4
     68          static const struct _console console = {
   \                     console:
   \   00000000   0xF8020000         DC32 0F8020000H, uart_configure, uart_put_char, uart_get_char
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000010   0x........         DC32 uart_is_rx_ready, uart_set_int
   \              0x........   
     69          	CONSOLE_PER_ADD,
     70          	(void (*)(void*, uint32_t, uint32_t)) uart_configure,
     71          	(void (*) (void*, uint8_t)) uart_put_char,
     72          	(uint32_t (*) (void*))uart_get_char,
     73          	(uint32_t (*) (void*))uart_is_rx_ready,
     74          	(void (*)(void*,uint32_t))uart_set_int
     75          };
     76          #elif (CONSOLE_DRIVER == DRV_DBGU)
     77          #include "serial/dbgu.h"
     78          static const struct _console console = {
     79          	CONSOLE_PER_ADD,
     80          	dbgu_configure,
     81          	dbgu_put_char,
     82          	dbgu_get_char,
     83          	dbgu_is_rx_ready
     84          };
     85          #endif
     86          
     87          /** Pins for CONSOLE */

   \                                 In section .rodata, align 4
     88          static const struct _pin pinsConsole[] = PINS_CONSOLE;
   \                     pinsConsole:
   \   00000000   0x00000004         DC32 4, 0FC038000H
   \              0xFC038000   
   \   00000008   0x03 0x01          DC8 3, 1, 0, 0
   \              0x00 0x00    
   \   0000000C   0x00000008         DC32 8, 0FC038000H
   \              0xFC038000   
   \   00000014   0x03 0x01          DC8 3, 1, 0, 0
   \              0x00 0x00    
     89          
     90          /** Console initialize status */

   \                                 In section .bss, align 1
     91          static uint8_t _bConsoleIsInitialized = 0;
   \                     _bConsoleIsInitialized:
   \   00000000                      DS8 1
     92          
     93          /*------------------------------------------------------------------------------
     94          *         Exported functions
     95          *------------------------------------------------------------------------------*/
     96          
     97          /**
     98          * \brief Configures a CONSOLE peripheral with the specified parameters.
     99          *
    100          * \param baudrate  Baudrate at which the CONSOLE should operate (in Hz).
    101          */

   \                                 In section SOFTPACK, align 4, keep-with-next
    102          void console_configure(uint32_t baudrate)
    103          {
   \                     console_configure:
   \   00000000   0xE92D4038         PUSH     {R3-R5,LR}
   \   00000004   0xE1B04000         MOVS     R4,R0
    104          	/* Configure PIO */
    105          	pio_configure(pinsConsole, PIO_LISTSIZE(pinsConsole));
   \   00000008   0xE3A01002         MOV      R1,#+2
   \   0000000C   0x........         LDR      R0,??DataTable9_3
   \   00000010   0x........         BL       pio_configure
    106          	pmc_enable_peripheral(CONSOLE_ID);
   \   00000014   0xE3A00019         MOV      R0,#+25
   \   00000018   0x........         BL       pmc_enable_peripheral
    107          
    108          	uint32_t mode;
    109          #if CONSOLE_DRIVER != DRV_DBGU
    110          	mode = US_MR_CHMODE_NORMAL | US_MR_PAR_NO | US_MR_CHRL_8_BIT;
   \   0000001C   0xE3A00E8C         MOV      R0,#+2240
   \   00000020   0xE1B05000         MOVS     R5,R0
    111          #else
    112          	mode = US_MR_CHMODE_NORMAL | US_MR_PAR_NO;
    113          #endif
    114          
    115          	//console.addr = CONSOLE_PER_ADD;
    116          	//console.init = (void (*)(void*, uint32_t, uint32_t))uart_configure;
    117          
    118          
    119          
    120          	/* Initialize driver to use */
    121          	console.init(console.addr, mode, baudrate);
   \   00000024   0xE1B02004         MOVS     R2,R4
   \   00000028   0xE1B01005         MOVS     R1,R5
   \   0000002C   0x........         LDR      R0,??DataTable9_4
   \   00000030   0xE5900000         LDR      R0,[R0, #+0]
   \   00000034   0x........         LDR      R3,??DataTable9_4
   \   00000038   0xE5933004         LDR      R3,[R3, #+4]
   \   0000003C   0xE12FFF33         BLX      R3
    122          	/* Finally */
    123          	_bConsoleIsInitialized = 1;
   \   00000040   0xE3A00001         MOV      R0,#+1
   \   00000044   0x........         LDR      R1,??DataTable9_5
   \   00000048   0xE5C10000         STRB     R0,[R1, #+0]
    124          
    125          #if defined(__GNUC__)
    126          	setvbuf(stdout, (char *)NULL, _IONBF, 0);
    127          #endif
    128          }
   \   0000004C   0xE8BD8031         POP      {R0,R4,R5,PC}    ;; return
    129          
    130          /**
    131          * \brief Outputs a character on the CONSOLE line.
    132          *
    133          * \note This function is synchronous (i.e. uses polling).
    134          * \param c  Character to send.
    135          */

   \                                 In section SOFTPACK, align 4, keep-with-next
    136          void console_put_char(uint8_t c)
    137          {
   \                     console_put_char:
   \   00000000   0xE92D4010         PUSH     {R4,LR}
   \   00000004   0xE1B04000         MOVS     R4,R0
    138          	if (!_bConsoleIsInitialized)
   \   00000008   0x........         LDR      R0,??DataTable9_5
   \   0000000C   0xE5D00000         LDRB     R0,[R0, #+0]
   \   00000010   0xE3500000         CMP      R0,#+0
   \   00000014   0x1A000002         BNE      ??console_put_char_0
    139          		console_configure(CONSOLE_BAUDRATE);
   \   00000018   0xE3A00B40         MOV      R0,#+65536
   \   0000001C   0xE3800CC2         ORR      R0,R0,#0xC200
   \   00000020   0x........         BL       console_configure
    140          
    141          	console.put_char(console.addr, c);
   \                     ??console_put_char_0:
   \   00000024   0xE1B01004         MOVS     R1,R4
   \   00000028   0xE6EF1071         UXTB     R1,R1
   \   0000002C   0x........         LDR      R0,??DataTable9_4
   \   00000030   0xE5900000         LDR      R0,[R0, #+0]
   \   00000034   0x........         LDR      R2,??DataTable9_4
   \   00000038   0xE5922008         LDR      R2,[R2, #+8]
   \   0000003C   0xE12FFF32         BLX      R2
    142          }
   \   00000040   0xE8BD8010         POP      {R4,PC}          ;; return
    143          
    144          /**
    145          * \brief Input a character from the CONSOLE line.
    146          *
    147          * \note This function is synchronous
    148          * \return character received.
    149          */

   \                                 In section SOFTPACK, align 4, keep-with-next
    150          extern uint32_t console_get_char(void)
    151          {
   \                     console_get_char:
   \   00000000   0xE92D5000         PUSH     {R12,LR}
    152          	if (!_bConsoleIsInitialized)
   \   00000004   0x........         LDR      R0,??DataTable9_5
   \   00000008   0xE5D00000         LDRB     R0,[R0, #+0]
   \   0000000C   0xE3500000         CMP      R0,#+0
   \   00000010   0x1A000002         BNE      ??console_get_char_0
    153          		console_configure(CONSOLE_BAUDRATE);
   \   00000014   0xE3A00B40         MOV      R0,#+65536
   \   00000018   0xE3800CC2         ORR      R0,R0,#0xC200
   \   0000001C   0x........         BL       console_configure
    154          	return console.get_char(console.addr);
   \                     ??console_get_char_0:
   \   00000020   0x........         LDR      R0,??DataTable9_4
   \   00000024   0xE5900000         LDR      R0,[R0, #+0]
   \   00000028   0x........         LDR      R1,??DataTable9_4
   \   0000002C   0xE591100C         LDR      R1,[R1, #+12]
   \   00000030   0xE12FFF31         BLX      R1
   \   00000034   0xE8BD8002         POP      {R1,PC}          ;; return
    155          }
    156          
    157          /**
    158          * \brief Check if there is Input from DBGU line.
    159          *
    160          * \return true if there is Input.
    161          */

   \                                 In section SOFTPACK, align 4, keep-with-next
    162          extern uint32_t console_is_rx_ready(void)
    163          {
   \                     console_is_rx_ready:
   \   00000000   0xE92D5000         PUSH     {R12,LR}
    164          	if (!_bConsoleIsInitialized)
   \   00000004   0x........         LDR      R0,??DataTable9_5
   \   00000008   0xE5D00000         LDRB     R0,[R0, #+0]
   \   0000000C   0xE3500000         CMP      R0,#+0
   \   00000010   0x1A000002         BNE      ??console_is_rx_ready_0
    165          		console_configure(CONSOLE_BAUDRATE);
   \   00000014   0xE3A00B40         MOV      R0,#+65536
   \   00000018   0xE3800CC2         ORR      R0,R0,#0xC200
   \   0000001C   0x........         BL       console_configure
    166          	return console.is_rx_ready(console.addr);
   \                     ??console_is_rx_ready_0:
   \   00000020   0x........         LDR      R0,??DataTable9_4
   \   00000024   0xE5900000         LDR      R0,[R0, #+0]
   \   00000028   0x........         LDR      R1,??DataTable9_4
   \   0000002C   0xE5911010         LDR      R1,[R1, #+16]
   \   00000030   0xE12FFF31         BLX      R1
   \   00000034   0xE8BD8002         POP      {R1,PC}          ;; return
    167          }
    168          
    169          /**
    170          *  Displays the content of the given frame on the DBGU.
    171          *
    172          *  \param pucFrame Pointer to the frame to dump.
    173          *  \param size   Buffer size in bytes.
    174          */

   \                                 In section SOFTPACK, align 4, keep-with-next
    175          void console_dump_frame(uint8_t * pframe, uint32_t size)
    176          {
   \                     console_dump_frame:
   \   00000000   0xE92D4070         PUSH     {R4-R6,LR}
   \   00000004   0xE1B04000         MOVS     R4,R0
   \   00000008   0xE1B05001         MOVS     R5,R1
    177          	uint32_t dw;
    178          
    179          	for (dw = 0; dw < size; dw++) {
   \   0000000C   0xE3A00000         MOV      R0,#+0
   \   00000010   0xE1B06000         MOVS     R6,R0
   \                     ??console_dump_frame_0:
   \   00000014   0xE1560005         CMP      R6,R5
   \   00000018   0x2A000004         BCS      ??console_dump_frame_1
    180          		printf("%02X ", pframe[dw]);
   \   0000001C   0xE7D61004         LDRB     R1,[R6, +R4]
   \   00000020   0x........         LDR      R0,??DataTable9_6
   \   00000024   0x........         BL       printf
    181          	}
   \   00000028   0xE2966001         ADDS     R6,R6,#+1
   \   0000002C   0xEAFFFFF8         B        ??console_dump_frame_0
    182          	printf("\n\r");
   \                     ??console_dump_frame_1:
   \   00000030   0x........         ADR      R0,??DataTable8  ;; 0x0A, 0x0D, 0x00, 0x00
   \   00000034   0x........         BL       printf
    183          }
   \   00000038   0xE8BD8070         POP      {R4-R6,PC}       ;; return
    184          
    185          /**
    186          *  Displays the content of the given buffer on the DBGU.
    187          *
    188          *  \param pbuffer  Pointer to the buffer to dump.
    189          *  \param size     Buffer size in bytes.
    190          *  \param address  Start address to display
    191          */

   \                                 In section SOFTPACK, align 4, keep-with-next
    192          void console_dump_memory(uint8_t * pbuffer, uint32_t size,
    193          				uint32_t address)
    194          {
   \                     console_dump_memory:
   \   00000000   0xE92D47F0         PUSH     {R4-R10,LR}
   \   00000004   0xE24DD008         SUB      SP,SP,#+8
   \   00000008   0xE1B04000         MOVS     R4,R0
   \   0000000C   0xE1B05001         MOVS     R5,R1
   \   00000010   0xE1B06002         MOVS     R6,R2
    195          	uint32_t i, j;
    196          	uint32_t last_line_start;
    197          	uint8_t *tmp;
    198          
    199          	for (i = 0; i < (size / 16); i++) {
   \   00000014   0xE3A00000         MOV      R0,#+0
   \   00000018   0xE1B07000         MOVS     R7,R0
   \                     ??console_dump_memory_0:
   \   0000001C   0xE1570225         CMP      R7,R5, LSR #+4
   \   00000020   0x2A000024         BCS      ??console_dump_memory_1
    200          		printf("0x%08X: ", (unsigned int)(address + (i * 16)));
   \   00000024   0xE3A00010         MOV      R0,#+16
   \   00000028   0xE0216790         MLA      R1,R0,R7,R6
   \   0000002C   0x........         LDR      R0,??DataTable9_7
   \   00000030   0x........         BL       printf
    201          		tmp = (uint8_t *) & pbuffer[i * 16];
   \   00000034   0xE1B00207         LSLS     R0,R7,#+4
   \   00000038   0xE0900004         ADDS     R0,R0,R4
   \   0000003C   0xE1B0A000         MOVS     R10,R0
    202          		for (j = 0; j < 4; j++) {
   \   00000040   0xE3A00000         MOV      R0,#+0
   \   00000044   0xE1B08000         MOVS     R8,R0
   \                     ??console_dump_memory_2:
   \   00000048   0xE3580004         CMP      R8,#+4
   \   0000004C   0x2A000009         BCS      ??console_dump_memory_3
    203          			printf("%02X%02X%02X%02X ", tmp[0], tmp[1], tmp[2],
    204          			       tmp[3]);
   \   00000050   0xE5DA0003         LDRB     R0,[R10, #+3]
   \   00000054   0xE58D0000         STR      R0,[SP, #+0]
   \   00000058   0xE5DA3002         LDRB     R3,[R10, #+2]
   \   0000005C   0xE5DA2001         LDRB     R2,[R10, #+1]
   \   00000060   0xE5DA1000         LDRB     R1,[R10, #+0]
   \   00000064   0x........         LDR      R0,??DataTable9_8
   \   00000068   0x........         BL       printf
    205          			tmp += 4;
   \   0000006C   0xE29AA004         ADDS     R10,R10,#+4
    206          		}
   \   00000070   0xE2988001         ADDS     R8,R8,#+1
   \   00000074   0xEAFFFFF3         B        ??console_dump_memory_2
    207          		tmp = (uint8_t *) & pbuffer[i * 16];
   \                     ??console_dump_memory_3:
   \   00000078   0xE1B00207         LSLS     R0,R7,#+4
   \   0000007C   0xE0900004         ADDS     R0,R0,R4
   \   00000080   0xE1B0A000         MOVS     R10,R0
    208          		for (j = 0; j < 16; j++) {
   \   00000084   0xE3A00000         MOV      R0,#+0
   \   00000088   0xE1B08000         MOVS     R8,R0
   \                     ??console_dump_memory_4:
   \   0000008C   0xE3580010         CMP      R8,#+16
   \   00000090   0x2A000004         BCS      ??console_dump_memory_5
    209          			console_put_char(*tmp++);
   \   00000094   0xE5DA0000         LDRB     R0,[R10, #+0]
   \   00000098   0x........         BL       console_put_char
   \   0000009C   0xE29AA001         ADDS     R10,R10,#+1
    210          		}
   \   000000A0   0xE2988001         ADDS     R8,R8,#+1
   \   000000A4   0xEAFFFFF8         B        ??console_dump_memory_4
    211          		printf("\n\r");
   \                     ??console_dump_memory_5:
   \   000000A8   0x........         ADR      R0,??DataTable9  ;; 0x0A, 0x0D, 0x00, 0x00
   \   000000AC   0x........         BL       printf
    212          	}
   \   000000B0   0xE2977001         ADDS     R7,R7,#+1
   \   000000B4   0xEAFFFFD8         B        ??console_dump_memory_0
    213          	if ((size % 16) != 0) {
   \                     ??console_dump_memory_1:
   \   000000B8   0xE215000F         ANDS     R0,R5,#0xF       ;; Zero extend
   \   000000BC   0xE3500000         CMP      R0,#+0
   \   000000C0   0x0A000025         BEQ      ??console_dump_memory_6
    214          		last_line_start = size - (size % 16);
   \   000000C4   0xE215000F         ANDS     R0,R5,#0xF       ;; Zero extend
   \   000000C8   0xE0550000         SUBS     R0,R5,R0
   \   000000CC   0xE1B09000         MOVS     R9,R0
    215          		printf("0x%08X: ", (unsigned int)(address + last_line_start));
   \   000000D0   0xE0991006         ADDS     R1,R9,R6
   \   000000D4   0x........         LDR      R0,??DataTable9_7
   \   000000D8   0x........         BL       printf
    216          		for (j = last_line_start; j < last_line_start + 16; j++) {
   \   000000DC   0xE1B08009         MOVS     R8,R9
   \                     ??console_dump_memory_7:
   \   000000E0   0xE2990010         ADDS     R0,R9,#+16
   \   000000E4   0xE1580000         CMP      R8,R0
   \   000000E8   0x2A000010         BCS      ??console_dump_memory_8
    217          			if ((j != last_line_start) && (j % 4 == 0)) {
   \   000000EC   0xE1580009         CMP      R8,R9
   \   000000F0   0x0A000004         BEQ      ??console_dump_memory_9
   \   000000F4   0xE2180003         ANDS     R0,R8,#0x3       ;; Zero extend
   \   000000F8   0xE3500000         CMP      R0,#+0
   \   000000FC   0x1A000001         BNE      ??console_dump_memory_9
    218          				printf(" ");
   \   00000100   0x........         ADR      R0,??DataTable9_1  ;; " "
   \   00000104   0x........         BL       printf
    219          			}
    220          			if (j < size)
   \                     ??console_dump_memory_9:
   \   00000108   0xE1580005         CMP      R8,R5
   \   0000010C   0x2A000003         BCS      ??console_dump_memory_10
    221          				printf("%02X", pbuffer[j]);
   \   00000110   0xE7D81004         LDRB     R1,[R8, +R4]
   \   00000114   0x........         LDR      R0,??DataTable9_9
   \   00000118   0x........         BL       printf
   \   0000011C   0xEA000001         B        ??console_dump_memory_11
    222          			else
    223          				printf("  ");
   \                     ??console_dump_memory_10:
   \   00000120   0x........         ADR      R0,??DataTable9_2  ;; 0x20, 0x20, 0x00, 0x00
   \   00000124   0x........         BL       printf
    224          		}
   \                     ??console_dump_memory_11:
   \   00000128   0xE2988001         ADDS     R8,R8,#+1
   \   0000012C   0xEAFFFFEB         B        ??console_dump_memory_7
    225          		printf(" ");
   \                     ??console_dump_memory_8:
   \   00000130   0x........         ADR      R0,??DataTable9_1  ;; " "
   \   00000134   0x........         BL       printf
    226          		for (j = last_line_start; j < size; j++) {
   \   00000138   0xE1B08009         MOVS     R8,R9
   \                     ??console_dump_memory_12:
   \   0000013C   0xE1580005         CMP      R8,R5
   \   00000140   0x2A000003         BCS      ??console_dump_memory_13
    227          			console_put_char(pbuffer[j]);
   \   00000144   0xE7D80004         LDRB     R0,[R8, +R4]
   \   00000148   0x........         BL       console_put_char
    228          		}
   \   0000014C   0xE2988001         ADDS     R8,R8,#+1
   \   00000150   0xEAFFFFF9         B        ??console_dump_memory_12
    229          		printf("\n\r");
   \                     ??console_dump_memory_13:
   \   00000154   0x........         ADR      R0,??DataTable9  ;; 0x0A, 0x0D, 0x00, 0x00
   \   00000158   0x........         BL       printf
    230          	}
    231          }
   \                     ??console_dump_memory_6:
   \   0000015C   0xE8BD87F3         POP      {R0,R1,R4-R10,PC}  ;; return
    232          
    233          /**
    234          *  Reads an integer
    235          *
    236          *  \param pvalue  Pointer to the uint32_t variable to contain the input value.
    237          */

   \                                 In section SOFTPACK, align 4, keep-with-next
    238          extern uint32_t console_get_integer(uint32_t * pvalue)
    239          {
   \                     console_get_integer:
   \   00000000   0xE92D40F8         PUSH     {R3-R7,LR}
   \   00000004   0xE1B04000         MOVS     R4,R0
    240          	uint8_t key;
    241          	uint8_t nb = 0;
   \   00000008   0xE3A06000         MOV      R6,#+0
    242          	uint32_t value = 0;
   \   0000000C   0xE3A07000         MOV      R7,#+0
    243          
    244          	while (1) {
    245          		key = console_get_char();
   \                     ??console_get_integer_0:
   \   00000010   0x........         BL       console_get_char
   \   00000014   0xE1B05000         MOVS     R5,R0
    246          		console_put_char(key);
   \   00000018   0xE1B00005         MOVS     R0,R5
   \   0000001C   0xE6EF0070         UXTB     R0,R0
   \   00000020   0x........         BL       console_put_char
    247          
    248          		if (key >= '0' && key <= '9') {
   \   00000024   0xE1B00005         MOVS     R0,R5
   \   00000028   0xE6EF0070         UXTB     R0,R0
   \   0000002C   0xE3500030         CMP      R0,#+48
   \   00000030   0xBA00000A         BLT      ??console_get_integer_1
   \   00000034   0xE1B00005         MOVS     R0,R5
   \   00000038   0xE6EF0070         UXTB     R0,R0
   \   0000003C   0xE350003A         CMP      R0,#+58
   \   00000040   0xAA000006         BGE      ??console_get_integer_1
    249          			value = (value * 10) + (key - '0');
   \   00000044   0xE3A0000A         MOV      R0,#+10
   \   00000048   0xE1B01005         MOVS     R1,R5
   \   0000004C   0xE6EF1071         UXTB     R1,R1
   \   00000050   0xE2511030         SUBS     R1,R1,#+48
   \   00000054   0xE0271790         MLA      R7,R0,R7,R1
    250          			nb++;
   \   00000058   0xE2966001         ADDS     R6,R6,#+1
   \   0000005C   0xEAFFFFEB         B        ??console_get_integer_0
    251          		} else {
    252          			if (key == 0x0D || key == ' ') {
   \                     ??console_get_integer_1:
   \   00000060   0xE1B00005         MOVS     R0,R5
   \   00000064   0xE6EF0070         UXTB     R0,R0
   \   00000068   0xE350000D         CMP      R0,#+13
   \   0000006C   0x0A000003         BEQ      ??console_get_integer_2
   \   00000070   0xE1B00005         MOVS     R0,R5
   \   00000074   0xE6EF0070         UXTB     R0,R0
   \   00000078   0xE3500020         CMP      R0,#+32
   \   0000007C   0x1A00000C         BNE      ??console_get_integer_3
    253          				if (nb == 0) {
   \                     ??console_get_integer_2:
   \   00000080   0xE1B00006         MOVS     R0,R6
   \   00000084   0xE6EF0070         UXTB     R0,R0
   \   00000088   0xE3500000         CMP      R0,#+0
   \   0000008C   0x1A000003         BNE      ??console_get_integer_4
    254          					printf
    255          					    ("\n\rWrite a number and press ENTER or SPACE!\n\r");
   \   00000090   0x........         LDR      R0,??DataTable9_10
   \   00000094   0x........         BL       printf
    256          					return 0;
   \   00000098   0xE3A00000         MOV      R0,#+0
   \   0000009C   0xEA000009         B        ??console_get_integer_5
    257          				} else {
    258          					printf("\n\r");
   \                     ??console_get_integer_4:
   \   000000A0   0x........         ADR      R0,??DataTable8  ;; 0x0A, 0x0D, 0x00, 0x00
   \   000000A4   0x........         BL       printf
    259          					*pvalue = value;
   \   000000A8   0xE5847000         STR      R7,[R4, #+0]
    260          					return 1;
   \   000000AC   0xE3A00001         MOV      R0,#+1
   \   000000B0   0xEA000004         B        ??console_get_integer_5
    261          				}
    262          			} else {
    263          				printf("\n\r'%c' not a number!\n\r", key);
   \                     ??console_get_integer_3:
   \   000000B4   0xE1B01005         MOVS     R1,R5
   \   000000B8   0xE6EF1071         UXTB     R1,R1
   \   000000BC   0x........         LDR      R0,??DataTable9_11
   \   000000C0   0x........         BL       printf
    264          				return 0;
   \   000000C4   0xE3A00000         MOV      R0,#+0
   \                     ??console_get_integer_5:
   \   000000C8   0xE8BD80F2         POP      {R1,R4-R7,PC}    ;; return
    265          			}
    266          		}
    267          	}
    268          }
    269          
    270          /**
    271          *  Reads an integer and check the value
    272          *
    273          *  \param pvalue  Pointer to the uint32_t variable to contain the input value.
    274          *  \param dwMin     Minimum value
    275          *  \param dwMax     Maximum value
    276          */

   \                                 In section SOFTPACK, align 4, keep-with-next
    277          extern uint32_t console_get_integer_min_max(uint32_t * pvalue, uint32_t min,
    278          					 uint32_t max)
    279          {
   \                     console_get_integer_min_max:
   \   00000000   0xE92D4070         PUSH     {R4-R6,LR}
   \   00000004   0xE24DD008         SUB      SP,SP,#+8
   \   00000008   0xE1B04000         MOVS     R4,R0
   \   0000000C   0xE1B05001         MOVS     R5,R1
   \   00000010   0xE1B06002         MOVS     R6,R2
    280          	uint32_t value = 0;
   \   00000014   0xE3A00000         MOV      R0,#+0
   \   00000018   0xE58D0000         STR      R0,[SP, #+0]
    281          
    282          	if (console_get_integer(&value) == 0)
   \   0000001C   0xE1B0000D         MOVS     R0,SP
   \   00000020   0x........         BL       console_get_integer
   \   00000024   0xE3500000         CMP      R0,#+0
   \   00000028   0x1A000001         BNE      ??console_get_integer_min_max_0
    283          		return 0;
   \   0000002C   0xE3A00000         MOV      R0,#+0
   \   00000030   0xEA000010         B        ??console_get_integer_min_max_1
    284          	if (value < min || value > max) {
   \                     ??console_get_integer_min_max_0:
   \   00000034   0xE59D0000         LDR      R0,[SP, #+0]
   \   00000038   0xE1500005         CMP      R0,R5
   \   0000003C   0x3A000002         BCC      ??console_get_integer_min_max_2
   \   00000040   0xE59D0000         LDR      R0,[SP, #+0]
   \   00000044   0xE1560000         CMP      R6,R0
   \   00000048   0x2A000005         BCS      ??console_get_integer_min_max_3
    285          		printf("\n\rThe number have to be between %u and %u\n\r",
    286          		       (unsigned int)min, (unsigned int)max);
   \                     ??console_get_integer_min_max_2:
   \   0000004C   0xE1B02006         MOVS     R2,R6
   \   00000050   0xE1B01005         MOVS     R1,R5
   \   00000054   0x........         LDR      R0,??DataTable9_12
   \   00000058   0x........         BL       printf
    287          		return 0;
   \   0000005C   0xE3A00000         MOV      R0,#+0
   \   00000060   0xEA000004         B        ??console_get_integer_min_max_1
    288          	}
    289          	printf("\n\r");
   \                     ??console_get_integer_min_max_3:
   \   00000064   0x........         ADR      R0,??DataTable9  ;; 0x0A, 0x0D, 0x00, 0x00
   \   00000068   0x........         BL       printf
    290          	*pvalue = value;
   \   0000006C   0xE59D0000         LDR      R0,[SP, #+0]
   \   00000070   0xE5840000         STR      R0,[R4, #+0]
    291          	return 1;
   \   00000074   0xE3A00001         MOV      R0,#+1
   \                     ??console_get_integer_min_max_1:
   \   00000078   0xE8BD8076         POP      {R1,R2,R4-R6,PC}  ;; return
    292          }
    293          

   \                                 In section SOFTPACK, align 4, keep-with-next
    294          void console_enable_interrupts(uint32_t mask)
    295          {
   \                     console_enable_interrupts:
   \   00000000   0xE92D4010         PUSH     {R4,LR}
   \   00000004   0xE1B04000         MOVS     R4,R0
    296          	console.enable_interrupts(console.addr, mask);
   \   00000008   0xE1B01004         MOVS     R1,R4
   \   0000000C   0x........         LDR      R0,??DataTable9_4
   \   00000010   0xE5900000         LDR      R0,[R0, #+0]
   \   00000014   0x........         LDR      R2,??DataTable9_4
   \   00000018   0xE5922014         LDR      R2,[R2, #+20]
   \   0000001C   0xE12FFF32         BLX      R2
    297          }
   \   00000020   0xE8BD8010         POP      {R4,PC}          ;; return
    298          
    299          /**
    300          *  Reads an hexadecimal number
    301          *
    302          *  \param pvalue  Pointer to the uint32_t variable to contain the input value.
    303          */

   \                                 In section SOFTPACK, align 4, keep-with-next
    304          extern uint32_t console_get_hexa_32(uint32_t * pvalue)
    305          {
   \                     console_get_hexa_32:
   \   00000000   0xE92D40F8         PUSH     {R3-R7,LR}
   \   00000004   0xE1B04000         MOVS     R4,R0
    306          	uint8_t key;
    307          	uint32_t dw = 0;
   \   00000008   0xE3A05000         MOV      R5,#+0
    308          	uint32_t value = 0;
   \   0000000C   0xE3A06000         MOV      R6,#+0
    309          
    310          	for (dw = 0; dw < 8; dw++) {
   \   00000010   0xE3A00000         MOV      R0,#+0
   \   00000014   0xE1B05000         MOVS     R5,R0
   \                     ??console_get_hexa_32_0:
   \   00000018   0xE3550008         CMP      R5,#+8
   \   0000001C   0x2A000034         BCS      ??console_get_hexa_32_1
    311          		key = console_get_char();
   \   00000020   0x........         BL       console_get_char
   \   00000024   0xE1B07000         MOVS     R7,R0
    312          		console_put_char(key);
   \   00000028   0xE1B00007         MOVS     R0,R7
   \   0000002C   0xE6EF0070         UXTB     R0,R0
   \   00000030   0x........         BL       console_put_char
    313          
    314          		if (key >= '0' && key <= '9') {
   \   00000034   0xE1B00007         MOVS     R0,R7
   \   00000038   0xE6EF0070         UXTB     R0,R0
   \   0000003C   0xE3500030         CMP      R0,#+48
   \   00000040   0xBA000009         BLT      ??console_get_hexa_32_2
   \   00000044   0xE1B00007         MOVS     R0,R7
   \   00000048   0xE6EF0070         UXTB     R0,R0
   \   0000004C   0xE350003A         CMP      R0,#+58
   \   00000050   0xAA000005         BGE      ??console_get_hexa_32_2
    315          			value = (value * 16) + (key - '0');
   \   00000054   0xE3A00010         MOV      R0,#+16
   \   00000058   0xE1B01007         MOVS     R1,R7
   \   0000005C   0xE6EF1071         UXTB     R1,R1
   \   00000060   0xE2511030         SUBS     R1,R1,#+48
   \   00000064   0xE0261690         MLA      R6,R0,R6,R1
   \   00000068   0xEA00001F         B        ??console_get_hexa_32_3
    316          		} else {
    317          			if (key >= 'A' && key <= 'F') {
   \                     ??console_get_hexa_32_2:
   \   0000006C   0xE1B00007         MOVS     R0,R7
   \   00000070   0xE6EF0070         UXTB     R0,R0
   \   00000074   0xE3500041         CMP      R0,#+65
   \   00000078   0xBA000009         BLT      ??console_get_hexa_32_4
   \   0000007C   0xE1B00007         MOVS     R0,R7
   \   00000080   0xE6EF0070         UXTB     R0,R0
   \   00000084   0xE3500047         CMP      R0,#+71
   \   00000088   0xAA000005         BGE      ??console_get_hexa_32_4
    318          				value = (value * 16) + (key - 'A' + 10);
   \   0000008C   0xE3A00010         MOV      R0,#+16
   \   00000090   0xE1B01007         MOVS     R1,R7
   \   00000094   0xE6EF1071         UXTB     R1,R1
   \   00000098   0xE2511037         SUBS     R1,R1,#+55
   \   0000009C   0xE0261690         MLA      R6,R0,R6,R1
   \   000000A0   0xEA000011         B        ??console_get_hexa_32_3
    319          			} else {
    320          				if (key >= 'a' && key <= 'f') {
   \                     ??console_get_hexa_32_4:
   \   000000A4   0xE1B00007         MOVS     R0,R7
   \   000000A8   0xE6EF0070         UXTB     R0,R0
   \   000000AC   0xE3500061         CMP      R0,#+97
   \   000000B0   0xBA000009         BLT      ??console_get_hexa_32_5
   \   000000B4   0xE1B00007         MOVS     R0,R7
   \   000000B8   0xE6EF0070         UXTB     R0,R0
   \   000000BC   0xE3500067         CMP      R0,#+103
   \   000000C0   0xAA000005         BGE      ??console_get_hexa_32_5
    321          					value = (value * 16) + (key - 'a' + 10);
   \   000000C4   0xE3A00010         MOV      R0,#+16
   \   000000C8   0xE1B01007         MOVS     R1,R7
   \   000000CC   0xE6EF1071         UXTB     R1,R1
   \   000000D0   0xE2511057         SUBS     R1,R1,#+87
   \   000000D4   0xE0261690         MLA      R6,R0,R6,R1
   \   000000D8   0xEA000003         B        ??console_get_hexa_32_3
    322          				} else {
    323          					printf
    324          					    ("\n\rIt is not a hexa character!\n\r");
   \                     ??console_get_hexa_32_5:
   \   000000DC   0x........         LDR      R0,??DataTable9_13
   \   000000E0   0x........         BL       printf
    325          					return 0;
   \   000000E4   0xE3A00000         MOV      R0,#+0
   \   000000E8   0xEA000005         B        ??console_get_hexa_32_6
    326          				}
    327          			}
    328          		}
    329          	}
   \                     ??console_get_hexa_32_3:
   \   000000EC   0xE2955001         ADDS     R5,R5,#+1
   \   000000F0   0xEAFFFFC8         B        ??console_get_hexa_32_0
    330          	printf("\n\r");
   \                     ??console_get_hexa_32_1:
   \   000000F4   0x........         ADR      R0,??DataTable9  ;; 0x0A, 0x0D, 0x00, 0x00
   \   000000F8   0x........         BL       printf
    331          	*pvalue = value;
   \   000000FC   0xE5846000         STR      R6,[R4, #+0]
    332          	return 1;
   \   00000100   0xE3A00001         MOV      R0,#+1
   \                     ??console_get_hexa_32_6:
   \   00000104   0xE8BD80F2         POP      {R1,R4-R7,PC}    ;; return
    333          }
    334          
    335          /*----------------------------------------------------------------------------
    336          *
    337          *----------------------------------------------------------------------------*/
    338          
    339          #if defined __ICCARM__
    340          /**
    341           * \brief Outputs a character on the CONSOLE.
    342           * \param c  Character to output.
    343           * \return The character that was output.
    344           */
    345          

   \                                 In section SOFTPACK, align 4, keep-with-next
    346          extern WEAK signed int putchar( signed int c )
    347          {
   \                     putchar:
   \   00000000   0xE92D4010         PUSH     {R4,LR}
   \   00000004   0xE1B04000         MOVS     R4,R0
    348              console_put_char((uint8_t)c) ;
   \   00000008   0xE1B00004         MOVS     R0,R4
   \   0000000C   0xE6EF0070         UXTB     R0,R0
   \   00000010   0x........         BL       console_put_char
    349              return c ;
   \   00000014   0xE1B00004         MOVS     R0,R4
   \   00000018   0xE8BD8010         POP      {R4,PC}          ;; return
    350          }

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x0A 0x0D          DC8      0x0A, 0x0D, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x0A 0x0D          DC8      0x0A, 0x0D, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0x20 0x00          DC8      " ",0x0,0x0
   \              0x00 0x00    

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0x20 0x20          DC8      0x20, 0x20, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   0x........         DC32     pinsConsole

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable9_4:
   \   00000000   0x........         DC32     console

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable9_5:
   \   00000000   0x........         DC32     _bConsoleIsInitialized

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable9_6:
   \   00000000   0x........         DC32     ?_0

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable9_7:
   \   00000000   0x........         DC32     ?_2

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable9_8:
   \   00000000   0x........         DC32     ?_3

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable9_9:
   \   00000000   0x........         DC32     ?_5

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable9_10:
   \   00000000   0x........         DC32     ?_7

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable9_11:
   \   00000000   0x........         DC32     ?_8

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable9_12:
   \   00000000   0x........         DC32     ?_9

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable9_13:
   \   00000000   0x........         DC32     ?_10

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x25 0x30          DC8 "%02X "
   \              0x32 0x58    
   \              0x20 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \   00000000   0x0A 0x0D          DC8 "\012\015"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x30 0x78          DC8 "0x%08X: "
   \              0x25 0x30    
   \              0x38 0x58    
   \              0x3A 0x20    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x25 0x30          DC8 "%02X%02X%02X%02X "
   \              0x32 0x58    
   \              0x25 0x30    
   \              0x32 0x58    
   \              0x25 0x30    
   \              0x32 0x58    
   \              0x25 0x30    
   \              0x32 0x58    
   \              0x20 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 2
   \   00000000   0x20 0x00          DC8 " "

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x25 0x30          DC8 "%02X"
   \              0x32 0x58    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x20 0x20          DC8 "  "
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x0A 0x0D          DC8 "\012\015Write a number and press ENTER or SPACE!\012\015"
   \              0x57 0x72    
   \              0x69 0x74    
   \              0x65 0x20    
   \              0x61 0x20    
   \              0x6E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \              0x20 0x61    
   \              0x6E 0x64    
   \              0x20 0x70    
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x20 0x45    
   \              0x4E 0x54    
   \              0x45 0x52    
   \              0x20 0x6F    
   \              0x72 0x20    
   \              0x53 0x50    
   \              0x41 0x43    
   \              0x45 0x21    
   \              0x0A 0x0D    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x0A 0x0D          DC8 "\012\015'%c' not a number!\012\015"
   \              0x27 0x25    
   \              0x63 0x27    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6E    
   \              0x75 0x6D    
   \              0x62 0x65    
   \              0x72 0x21    
   \              0x0A 0x0D    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x0A 0x0D          DC8 "\012\015The number have to be between %u and %u\012\015"
   \              0x54 0x68    
   \              0x65 0x20    
   \              0x6E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \              0x20 0x68    
   \              0x61 0x76    
   \              0x65 0x20    
   \              0x74 0x6F    
   \              0x20 0x62    
   \              0x65 0x20    
   \              0x62 0x65    
   \              0x74 0x77    
   \              0x65 0x65    
   \              0x6E 0x20    
   \              0x25 0x75    
   \              0x20 0x61    
   \              0x6E 0x64    
   \              0x20 0x25    
   \              0x75 0x0A    
   \              0x0D 0x00    

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x0A 0x0D          DC8 "\012\015It is not a hexa character!\012\015"
   \              0x49 0x74    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x61 0x20    
   \              0x68 0x65    
   \              0x78 0x61    
   \              0x20 0x63    
   \              0x68 0x61    
   \              0x72 0x61    
   \              0x63 0x74    
   \              0x65 0x72    
   \              0x21 0x0A    
   \              0x0D 0x00    
    351          
    352          #endif // defined __ICCARM__

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   console_configure
        16   -- Indirect call
        16   -> pio_configure
        16   -> pmc_enable_peripheral
      16   console_dump_frame
        16   -> printf
      40   console_dump_memory
        40   -> console_put_char
        40   -> printf
       8   console_enable_interrupts
         8   -- Indirect call
       8   console_get_char
         8   -- Indirect call
         8   -> console_configure
      24   console_get_hexa_32
        24   -> console_get_char
        24   -> console_put_char
        24   -> printf
      24   console_get_integer
        24   -> console_get_char
        24   -> console_put_char
        24   -> printf
      24   console_get_integer_min_max
        24   -> console_get_integer
        24   -> printf
       8   console_is_rx_ready
         8   -- Indirect call
         8   -> console_configure
       8   console_put_char
         8   -- Indirect call
         8   -> console_configure
       8   putchar
         8   -> console_put_char


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_10
       4  ??DataTable9_11
       4  ??DataTable9_12
       4  ??DataTable9_13
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
       4  ??DataTable9_6
       4  ??DataTable9_7
       4  ??DataTable9_8
       4  ??DataTable9_9
       8  ?_0
       4  ?_1
      32  ?_10
      12  ?_2
      20  ?_3
       2  ?_4
       8  ?_5
       4  ?_6
      48  ?_7
      24  ?_8
      44  ?_9
       1  _bConsoleIsInitialized
      56  _id_h64_matrix
      24  console
      80  console_configure
      60  console_dump_frame
     352  console_dump_memory
      36  console_enable_interrupts
      56  console_get_char
     264  console_get_hexa_32
     204  console_get_integer
     124  console_get_integer_min_max
      56  console_is_rx_ready
      68  console_put_char
      24  pinsConsole
      28  putchar

 
     1 byte  in section .bss
   310 bytes in section .rodata
 1 388 bytes in section SOFTPACK
 
 1 388 bytes of CODE  memory
   310 bytes of CONST memory
     1 byte  of DATA  memory

Errors: none
Warnings: 1
