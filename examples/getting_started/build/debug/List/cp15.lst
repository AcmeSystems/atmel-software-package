###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        21/May/2015  13:39:01
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  arm
#    Endian       =  little
#    Source file  =  
#        C:\Users\dfronek\Documents\Project\softpack\drivers\core\cp15.c
#    Command line =  
#        C:\Users\dfronek\Documents\Project\softpack\drivers\core\cp15.c -D
#        BOARD_SAMA5D2_XPLAINED -D API_PIOv4 -D SERIE_SAMA5D2 -D CHIP_SAMA5D27
#        -D sram --preprocess=l
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\List\
#        -lC
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\List\
#        -o
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-A5 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../drivers\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../examples\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../lib\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../target\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../target/include\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../target/sama5d2\
#        --section .text=SOFTPACK --cpu_mode arm -On
#    List file    =  
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\List\cp15.lst
#    Object file  =  
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\Obj\cp15.o
#
###############################################################################

C:\Users\dfronek\Documents\Project\softpack\drivers\core\cp15.c
      1          /* ----------------------------------------------------------------------------
                                                                                               ^
Warning[Pa050]: non-native end of line sequence detected (this diagnostic is
          only issued once)
      2           *         SAM Software Package License
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2015, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          //-----------------------------------------------------------------------------
     31          // Reg Reads                    Writes
     32          //----------------------------------------------------------------------------
     33          // 0   ID code                  Unpredictable
     34          // 0   cache type               Unpredictable
     35          // 0   TCM status               Unpredictable
     36          // 1   Control                  Control
     37          // 2   Translation table base   Translation table base
     38          // 3   Domain access control    Domain access control
     39          // 4                                                       (Reserved)
     40          // 5   Data fault status        Data fault status
     41          // 5   Instruction fault status Instruction fault status
     42          // 6   Fault address            Fault address
     43          // 7   cache operations         cache operations
     44          // 8   Unpredictable            TLB operations
     45          // 9   cache lockdown           cache lockdown
     46          // 9   TCM region               TCM region
     47          // 10  TLB lockdown             TLB lockdown
     48          // 11                                                      (Reserved)
     49          // 12                                                      (Reserved)
     50          // 13  FCSE PID                 FCSE PID
     51          // 13  Context ID               Context ID
     52          // 14                                                      (Reserved)
     53          // 15  Test configuration       Test configuration
     54          //-----------------------------------------------------------------------------
     55          
     56          /** \page cp15_f CP15 Functions
     57           *
     58           * \section CP15 function Usage
     59           *
     60           * Methods to manage the Coprocessor 15. Coprocessor 15, or System Control
     61           * Coprocessor CP15, is used to configure and control all the items in the
     62           * list below:
     63           * <ul>
     64           * <li> ARM core
     65           * <li> caches (Icache, Dcache and write buffer)
     66           * <li> TCM
     67           * <li> MMU
     68           * <li> Other system options
     69           * </ul>
     70           * \section Usage
     71           *
     72           * -# Enable or disable D cache with cp15_enable_dcache() and cp15_disable_dcache()
     73           * -# Enable or disable I cache with cp15_enable_icache() and cp15_disable_icache()
     74           *
     75           * Related files:\n
     76           * \ref cp15.h\n
     77           * \ref cp15.c\n
     78           */
     79          
     80          /** \file */
     81          
     82          /**
     83           * \addtogroup cp15_cache L1 Cache Operations
     84           * \ingroup cache_module
     85           *
     86           * \section Usage
     87           *
     88           * They are performed as MCR instructions and only operate on a level 1 cache associated with
     89           * ATM v7 processor.
     90           * The supported operations are:
     91           * <ul>
     92           * <li> Any of these operations can be applied to
     93           *  -# any data cache
     94           *  -# any unified cache.
     95           * <li> Invalidate by MVA
     96           *   Performs an invalidate of a data or unified cache line based on the address it contains.
     97           * <li> Invalidate by set/way
     98           *   Performs an invalidate of a data or unified cache line based on its location in the cache hierarchy.
     99           * <li> Clean by MVA
    100           *   Performs a clean of a data or unified cache line based on the address it contains.
    101           * <li> Clean by set/way
    102           *   Performs a clean of a data or unified cache line based on its location in the cache hierarchy.
    103           * <li> Clean and Invalidate by MVA
    104           *   Performs a clean and invalidate of a data or unified cache line based on the address it contains.
    105           * <li> Clean and Invalidate by set/way
    106           *   Performs a clean and invalidate of a data or unified cache line based on its location in the cache hierarchy.
    107           * </ul>
    108           *
    109           * Related files:\n
    110           * \ref cp15.h\n
    111           * \ref cp15_asm_gcc.S \n
    112           * \ref cp15_asm_iar.s \n
    113           */
    114          
    115          /*----------------------------------------------------------------------------
    116           *        Headers
    117           *----------------------------------------------------------------------------*/
    118          
    119          #include "chip.h"

   \                                 In section .rodata, align 4
   \   __absolute unsigned int const _id_h64_matrix[14]
   \                     _id_h64_matrix:
   \   00000000   0x00000006         DC32 6, 7, 9, 10, 12, 13, 15, 31, 32, 45, 46, 52, 53, 63
   \              0x00000007   
   \              0x00000009   
   \              0x0000000A   
   \              0x0000000C   
   \              0x0000000D   
   \              0x0000000F   
   \              0x0000001F   
   \              0x00000020   
   \              0x0000002D   
   \              0x0000002E   
   \              0x00000034   
   \              0x00000035   
   \              0x0000003F   
    120          
    121          #if defined(__ICCARM__)
    122          	#include <intrinsics.h>
    123          #endif
    124          
    125          #include "core/cp15.h"
    126          #include "utils/trace.h"
    127          
    128          #include <assert.h>
    129          
    130          /*----------------------------------------------------------------------------
    131           *        Global functions
    132           *----------------------------------------------------------------------------*/
    133          
    134          /**
    135           * \brief Check Instruction cache
    136           * \return 0 if I_cache disable, 1 if I_cache enable
    137           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    138          unsigned int cp15_is_icached_enabled(void)
    139          {
   \                     cp15_is_icached_enabled:
   \   00000000   0xE92D4010         PUSH     {R4,LR}
    140          	unsigned int control;
    141          	control = cp15_read_control();
   \   00000004   0x........         BL       cp15_read_control
   \   00000008   0xE1B04000         MOVS     R4,R0
    142          	return ((control & (1 << CP15_I_BIT)) != 0);
   \   0000000C   0xE1B00624         LSRS     R0,R4,#+12
   \   00000010   0xE2100001         ANDS     R0,R0,#0x1
   \   00000014   0xE8BD8010         POP      {R4,PC}          ;; return
    143          }
    144          
    145          /**
    146           * \brief  Enable Instruction cache
    147           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    148          void cp15_enable_icache(void)
    149          {
   \                     cp15_enable_icache:
   \   00000000   0xE92D4010         PUSH     {R4,LR}
    150          	unsigned int control;
    151          	control = cp15_read_control();
   \   00000004   0x........         BL       cp15_read_control
   \   00000008   0xE1B04000         MOVS     R4,R0
    152          	// Check if cache is disabled
    153          	if ((control & (1 << CP15_I_BIT)) == 0) {
   \   0000000C   0xE3140D40         TST      R4,#0x1000
   \   00000010   0x1A000005         BNE      ??cp15_enable_icache_0
    154          
    155          		control |= (1 << CP15_I_BIT);
   \   00000014   0xE3944D40         ORRS     R4,R4,#0x1000
    156          		cp15_write_control(control);
   \   00000018   0xE1B00004         MOVS     R0,R4
   \   0000001C   0x........         BL       cp15_write_control
    157          		TRACE_INFO("I cache enabled.\n\r");
   \   00000020   0x........         LDR      R0,??DataTable7
   \   00000024   0x........         BL       printf
   \   00000028   0xEA000001         B        ??cp15_enable_icache_1
    158          	} else {
    159          
    160          		TRACE_INFO("I cache is already enabled.\n\r");
   \                     ??cp15_enable_icache_0:
   \   0000002C   0x........         LDR      R0,??DataTable7_1
   \   00000030   0x........         BL       printf
    161          	}
    162          }
   \                     ??cp15_enable_icache_1:
   \   00000034   0xE8BD8010         POP      {R4,PC}          ;; return
    163          
    164          /**
    165           * \brief  Disable Instruction cache
    166           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    167          void cp15_disable_icache(void)
    168          {
   \                     cp15_disable_icache:
   \   00000000   0xE92D4010         PUSH     {R4,LR}
    169          	unsigned int control;
    170          	control = cp15_read_control();
   \   00000004   0x........         BL       cp15_read_control
   \   00000008   0xE1B04000         MOVS     R4,R0
    171          	// Check if cache is enabled
    172          	if ((control & (1 << CP15_I_BIT)) != 0) {
   \   0000000C   0xE3140D40         TST      R4,#0x1000
   \   00000010   0x0A000005         BEQ      ??cp15_disable_icache_0
    173          
    174          		control &= ~(1ul << CP15_I_BIT);
   \   00000014   0xE3D44D40         BICS     R4,R4,#0x1000
    175          		cp15_write_control(control);
   \   00000018   0xE1B00004         MOVS     R0,R4
   \   0000001C   0x........         BL       cp15_write_control
    176          		TRACE_INFO("I cache disabled.\n\r");
   \   00000020   0x........         LDR      R0,??DataTable7_2
   \   00000024   0x........         BL       printf
   \   00000028   0xEA000001         B        ??cp15_disable_icache_1
    177          	} else {
    178          
    179          		TRACE_INFO("I cache is already disabled.\n\r");
   \                     ??cp15_disable_icache_0:
   \   0000002C   0x........         LDR      R0,??DataTable7_3
   \   00000030   0x........         BL       printf
    180          	}
    181          }
   \                     ??cp15_disable_icache_1:
   \   00000034   0xE8BD8010         POP      {R4,PC}          ;; return
    182          
    183          /**
    184           * \brief  Check MMU
    185           * \return  0 if MMU disable, 1 if MMU enable
    186           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    187          unsigned int cp15_is_mmu_enabled(void)
    188          {
   \                     cp15_is_mmu_enabled:
   \   00000000   0xE92D4010         PUSH     {R4,LR}
    189          	unsigned int control;
    190          	control = cp15_read_control();
   \   00000004   0x........         BL       cp15_read_control
   \   00000008   0xE1B04000         MOVS     R4,R0
    191          	return ((control & (1 << CP15_M_BIT)) != 0);
   \   0000000C   0xE2140001         ANDS     R0,R4,#0x1
   \   00000010   0xE8BD8010         POP      {R4,PC}          ;; return
    192          }
    193          
    194          /**
    195           * \brief  Enable MMU
    196           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    197          void cp15_enable_mmu(void)
    198          {
   \                     cp15_enable_mmu:
   \   00000000   0xE92D4010         PUSH     {R4,LR}
    199          	unsigned int control;
    200          	control = cp15_read_control();
   \   00000004   0x........         BL       cp15_read_control
   \   00000008   0xE1B04000         MOVS     R4,R0
    201          	// Check if MMU is disabled
    202          	if ((control & (1 << CP15_M_BIT)) == 0) {
   \   0000000C   0xE3140001         TST      R4,#0x1
   \   00000010   0x1A000005         BNE      ??cp15_enable_mmu_0
    203          
    204          		control |= (1 << CP15_M_BIT);
   \   00000014   0xE3944001         ORRS     R4,R4,#0x1
    205          		cp15_write_control(control);
   \   00000018   0xE1B00004         MOVS     R0,R4
   \   0000001C   0x........         BL       cp15_write_control
    206          		TRACE_INFO("MMU enabled.\n\r");
   \   00000020   0x........         LDR      R0,??DataTable7_4
   \   00000024   0x........         BL       printf
   \   00000028   0xEA000001         B        ??cp15_enable_mmu_1
    207          	} else {
    208          
    209          		TRACE_INFO("MMU is already enabled.\n\r");
   \                     ??cp15_enable_mmu_0:
   \   0000002C   0x........         LDR      R0,??DataTable7_5
   \   00000030   0x........         BL       printf
    210          	}
    211          }
   \                     ??cp15_enable_mmu_1:
   \   00000034   0xE8BD8010         POP      {R4,PC}          ;; return
    212          
    213          /**
    214           * \brief  Disable MMU
    215           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    216          void cp15_disable_mmu(void)
    217          {
   \                     cp15_disable_mmu:
   \   00000000   0xE92D4010         PUSH     {R4,LR}
    218          	unsigned int control;
    219          	control = cp15_read_control();
   \   00000004   0x........         BL       cp15_read_control
   \   00000008   0xE1B04000         MOVS     R4,R0
    220          	// Check if MMU is enabled
    221          	if ((control & (1 << CP15_M_BIT)) != 0) {
   \   0000000C   0xE3140001         TST      R4,#0x1
   \   00000010   0x0A000006         BEQ      ??cp15_disable_mmu_0
    222          
    223          		control &= ~(1ul << CP15_M_BIT);
   \   00000014   0xE3D44001         BICS     R4,R4,#0x1
    224          		control &= ~(1ul << CP15_C_BIT);
   \   00000018   0xE3D44004         BICS     R4,R4,#0x4
    225          		cp15_write_control(control);
   \   0000001C   0xE1B00004         MOVS     R0,R4
   \   00000020   0x........         BL       cp15_write_control
    226          		TRACE_INFO("MMU disabled.\n\r");
   \   00000024   0x........         LDR      R0,??DataTable7_6
   \   00000028   0x........         BL       printf
   \   0000002C   0xEA000001         B        ??cp15_disable_mmu_1
    227          	} else {
    228          
    229          		TRACE_INFO("MMU is already disabled.\n\r");
   \                     ??cp15_disable_mmu_0:
   \   00000030   0x........         LDR      R0,??DataTable7_7
   \   00000034   0x........         BL       printf
    230          	}
    231          }
   \                     ??cp15_disable_mmu_1:
   \   00000038   0xE8BD8010         POP      {R4,PC}          ;; return
    232          
    233          /**
    234           * \brief  Check D_cache
    235           * \return  0 if D_cache disable, 1 if D_cache enable (with MMU of course)
    236           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    237          unsigned int cp15_is_dcache_enabled(void)
    238          {
   \                     cp15_is_dcache_enabled:
   \   00000000   0xE92D4010         PUSH     {R4,LR}
    239          	unsigned int control;
    240          	control = cp15_read_control();
   \   00000004   0x........         BL       cp15_read_control
   \   00000008   0xE1B04000         MOVS     R4,R0
    241          	return ((control & ((1 << CP15_C_BIT) || (1 << CP15_M_BIT))) != 0);
   \   0000000C   0xE2140001         ANDS     R0,R4,#0x1
   \   00000010   0xE8BD8010         POP      {R4,PC}          ;; return
    242          }
    243          
    244          /**
    245           * \brief  Enable Data cache
    246           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    247          void cp15_enable_dcache(void)
    248          {
   \                     cp15_enable_dcache:
   \   00000000   0xE92D4010         PUSH     {R4,LR}
    249          	unsigned int control;
    250          	control = cp15_read_control();
   \   00000004   0x........         BL       cp15_read_control
   \   00000008   0xE1B04000         MOVS     R4,R0
    251          	if (!cp15_is_mmu_enabled()) {
   \   0000000C   0x........         BL       cp15_is_mmu_enabled
   \   00000010   0xE3500000         CMP      R0,#+0
   \   00000014   0x1A000002         BNE      ??cp15_enable_dcache_0
    252          		TRACE_ERROR("Do nothing: MMU not enabled\n\r");
   \   00000018   0x........         LDR      R0,??DataTable7_8
   \   0000001C   0x........         BL       printf
   \   00000020   0xEA000009         B        ??cp15_enable_dcache_1
    253          	} else {
    254          		// Check if cache is disabled
    255          		if ((control & (1 << CP15_C_BIT)) == 0) {
   \                     ??cp15_enable_dcache_0:
   \   00000024   0xE3140004         TST      R4,#0x4
   \   00000028   0x1A000005         BNE      ??cp15_enable_dcache_2
    256          
    257          			control |= (1 << CP15_C_BIT);
   \   0000002C   0xE3944004         ORRS     R4,R4,#0x4
    258          			cp15_write_control(control);
   \   00000030   0xE1B00004         MOVS     R0,R4
   \   00000034   0x........         BL       cp15_write_control
    259          			TRACE_INFO("D cache enabled.\n\r");
   \   00000038   0x........         LDR      R0,??DataTable7_9
   \   0000003C   0x........         BL       printf
   \   00000040   0xEA000001         B        ??cp15_enable_dcache_1
    260          		} else {
    261          
    262          			TRACE_INFO("D cache is already enabled.\n\r");
   \                     ??cp15_enable_dcache_2:
   \   00000044   0x........         LDR      R0,??DataTable7_10
   \   00000048   0x........         BL       printf
    263          		}
    264          	}
    265          }
   \                     ??cp15_enable_dcache_1:
   \   0000004C   0xE8BD8010         POP      {R4,PC}          ;; return
    266          
    267          /**
    268           * \brief  Disable Data cache
    269           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    270          void cp15_disable_dcache(void)
    271          {
   \                     cp15_disable_dcache:
   \   00000000   0xE92D4010         PUSH     {R4,LR}
    272          	unsigned int control;
    273          	control = cp15_read_control();
   \   00000004   0x........         BL       cp15_read_control
   \   00000008   0xE1B04000         MOVS     R4,R0
    274          	// Check if cache is enabled
    275          	if ((control & (1 << CP15_C_BIT)) != 0) {
   \   0000000C   0xE3140004         TST      R4,#0x4
   \   00000010   0x0A000005         BEQ      ??cp15_disable_dcache_0
    276          
    277          		control &= ~(1ul << CP15_C_BIT);
   \   00000014   0xE3D44004         BICS     R4,R4,#0x4
    278          		cp15_write_control(control);
   \   00000018   0xE1B00004         MOVS     R0,R4
   \   0000001C   0x........         BL       cp15_write_control
    279          		TRACE_INFO("D cache disabled.\n\r");
   \   00000020   0x........         LDR      R0,??DataTable7_11
   \   00000024   0x........         BL       printf
   \   00000028   0xEA000001         B        ??cp15_disable_dcache_1
    280          	} else {
    281          
    282          		TRACE_INFO("D cache is already disabled.\n\r");
   \                     ??cp15_disable_dcache_0:
   \   0000002C   0x........         LDR      R0,??DataTable7_12
   \   00000030   0x........         BL       printf
    283          	}
    284          }
   \                     ??cp15_disable_dcache_1:
   \   00000034   0xE8BD8010         POP      {R4,PC}          ;; return
    285          
    286          /**
    287           * \brief  Invalidate TLB
    288           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    289          void cp15_invalidate_tlb(void)
    290          {
    291          	asm("MCR   p15, 0, %0, c8, c3, 0": :"r"(1));
   \                     cp15_invalidate_tlb:
   \   00000000   0xE3A00001         MOV      R0,#+1
   \   00000004   0xEE080F13         MCR   p15, 0, R0, c8, c3, 0
    292          	asm("DSB");
   \   00000008   0xF57FF04F         DSB
    293          }
   \   0000000C   0xE12FFF1E         BX       LR               ;; return
    294          
    295          /**
    296           * \brief  Clean Data cache
    297           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    298          void cp15_cache_clean(uint8_t CacheType)
    299          {
   \                     cp15_cache_clean:
   \   00000000   0xE92D4010         PUSH     {R4,LR}
   \   00000004   0xE1B04000         MOVS     R4,R0
    300          	assert(!CacheType);
   \   00000008   0xE1B00004         MOVS     R0,R4
   \   0000000C   0xE6EF0070         UXTB     R0,R0
   \   00000010   0xE3500000         CMP      R0,#+0
   \   00000014   0x0A000004         BEQ      ??cp15_cache_clean_0
   \   00000018   0xE3A02F4B         MOV      R2,#+300
   \   0000001C   0x........         LDR      R1,??DataTable7_13
   \   00000020   0x........         LDR      R0,??DataTable7_14
   \   00000024   0x........         BL       __aeabi_assert
   \   00000028   0x........         BL       __iar_EmptyStepPoint
    301          	cp15_select_dcache();
   \                     ??cp15_cache_clean_0:
   \   0000002C   0x........         BL       cp15_select_dcache
    302          	cp15_clean_dcache_by_set_way();
   \   00000030   0x........         BL       cp15_clean_dcache_by_set_way
    303          	asm("DSB");
   \   00000034   0xF57FF04F         DSB
    304          }
   \   00000038   0xE8BD8010         POP      {R4,PC}          ;; return
    305          
    306          /**
    307           * \brief  Invalidate D/Icache
    308           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    309          void cp15_cache_invalidate(uint8_t CacheType)
    310          {
   \                     cp15_cache_invalidate:
   \   00000000   0xE92D4010         PUSH     {R4,LR}
   \   00000004   0xE1B04000         MOVS     R4,R0
    311          	if (CacheType) {
   \   00000008   0xE1B00004         MOVS     R0,R4
   \   0000000C   0xE6EF0070         UXTB     R0,R0
   \   00000010   0xE3500000         CMP      R0,#+0
   \   00000014   0x0A000004         BEQ      ??cp15_cache_invalidate_0
    312          		cp15_select_icache();
   \   00000018   0x........         BL       cp15_select_icache
    313          		cp15_invalid_icache_inner_sharable();
   \   0000001C   0x........         BL       cp15_invalid_icache_inner_sharable
    314          		asm("DSB");
   \   00000020   0xF57FF04F         DSB
    315          		asm("ISB");
   \   00000024   0xF57FF06F         ISB
   \   00000028   0xEA000003         B        ??cp15_cache_invalidate_1
    316          	} else {
    317          		cp15_select_dcache();
   \                     ??cp15_cache_invalidate_0:
   \   0000002C   0x........         BL       cp15_select_dcache
    318          		cp15_invalid_dcache_by_set_way();
   \   00000030   0x........         BL       cp15_invalid_dcache_by_set_way
    319          		asm("DSB");
   \   00000034   0xF57FF04F         DSB
    320          		asm("ISB");
   \   00000038   0xF57FF06F         ISB
    321          	}
    322          
    323          }
   \                     ??cp15_cache_invalidate_1:
   \   0000003C   0xE8BD8010         POP      {R4,PC}          ;; return
    324          
    325          /**
    326           * \brief  Flush(Clean and invalidate) Data cache
    327           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    328          void cp15_cache_flush(uint8_t CacheType)
    329          {
   \                     cp15_cache_flush:
   \   00000000   0xE92D4010         PUSH     {R4,LR}
   \   00000004   0xE1B04000         MOVS     R4,R0
    330          	assert(!CacheType);
   \   00000008   0xE1B00004         MOVS     R0,R4
   \   0000000C   0xE6EF0070         UXTB     R0,R0
   \   00000010   0xE3500000         CMP      R0,#+0
   \   00000014   0x0A000004         BEQ      ??cp15_cache_flush_0
   \   00000018   0xE300214A         MOVW     R2,#+330
   \   0000001C   0x........         LDR      R1,??DataTable7_13
   \   00000020   0x........         LDR      R0,??DataTable7_14
   \   00000024   0x........         BL       __aeabi_assert
   \   00000028   0x........         BL       __iar_EmptyStepPoint
    331          	cp15_select_dcache();
   \                     ??cp15_cache_flush_0:
   \   0000002C   0x........         BL       cp15_select_dcache
    332          	cp15_clean_invalid_dcache_by_set_way();
   \   00000030   0x........         BL       cp15_clean_invalid_dcache_by_set_way
    333          	asm("DSB");
   \   00000034   0xF57FF04F         DSB
    334          
    335          }
   \   00000038   0xE8BD8010         POP      {R4,PC}          ;; return
    336          
    337          /**
    338           * \brief  Invalidate Data cache by address
    339           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    340          void cp15_invalid_dcache_by_va(uint32_t S_Add, uint32_t E_Add)
    341          {
   \                     cp15_invalid_dcache_by_va:
   \   00000000   0xE92D4038         PUSH     {R3-R5,LR}
   \   00000004   0xE1B04000         MOVS     R4,R0
   \   00000008   0xE1B05001         MOVS     R5,R1
    342          	cp15_select_dcache();
   \   0000000C   0x........         BL       cp15_select_dcache
    343          	cp15_invalid_dcache_by_mva(S_Add, E_Add);
   \   00000010   0xE1B01005         MOVS     R1,R5
   \   00000014   0xE1B00004         MOVS     R0,R4
   \   00000018   0x........         BL       cp15_invalid_dcache_by_mva
    344          }
   \   0000001C   0xE8BD8031         POP      {R0,R4,R5,PC}    ;; return
    345          
    346          /**
    347           * \brief  Clean Data cache by address
    348           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    349          void cp15_clean_dcache_by_va(uint32_t S_Add, uint32_t E_Add)
    350          {
   \                     cp15_clean_dcache_by_va:
   \   00000000   0xE92D4038         PUSH     {R3-R5,LR}
   \   00000004   0xE1B04000         MOVS     R4,R0
   \   00000008   0xE1B05001         MOVS     R5,R1
    351          	cp15_select_dcache();
   \   0000000C   0x........         BL       cp15_select_dcache
    352          	cp15_clean_dcache_by_mva(S_Add, E_Add);
   \   00000010   0xE1B01005         MOVS     R1,R5
   \   00000014   0xE1B00004         MOVS     R0,R4
   \   00000018   0x........         BL       cp15_clean_dcache_by_mva
    353          }
   \   0000001C   0xE8BD8031         POP      {R0,R4,R5,PC}    ;; return
    354          
    355          /**
    356           * \brief  Flush Data cache by address
    357           */
    358          

   \                                 In section SOFTPACK, align 4, keep-with-next
    359          void cp15_flush_dcache_by_va(uint32_t S_Add, uint32_t E_Add)
    360          {
   \                     cp15_flush_dcache_by_va:
   \   00000000   0xE92D4038         PUSH     {R3-R5,LR}
   \   00000004   0xE1B04000         MOVS     R4,R0
   \   00000008   0xE1B05001         MOVS     R5,R1
    361          	cp15_select_dcache();
   \   0000000C   0x........         BL       cp15_select_dcache
    362          	cp15_clean_invalid_dcache_by_mva(S_Add, E_Add);
   \   00000010   0xE1B01005         MOVS     R1,R5
   \   00000014   0xE1B00004         MOVS     R0,R4
   \   00000018   0x........         BL       cp15_clean_invalid_dcache_by_mva
    363          }
   \   0000001C   0xE8BD8031         POP      {R0,R4,R5,PC}    ;; return

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x........         DC32     ?_0

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x........         DC32     ?_1

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x........         DC32     ?_2

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x........         DC32     ?_3

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x........         DC32     ?_4

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x........         DC32     ?_5

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x........         DC32     ?_6

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x........         DC32     ?_7

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x........         DC32     ?_8

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0x........         DC32     ?_9

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   0x........         DC32     ?_10

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable7_11:
   \   00000000   0x........         DC32     ?_11

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable7_12:
   \   00000000   0x........         DC32     ?_12

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable7_13:
   \   00000000   0x........         DC32     ?_14

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable7_14:
   \   00000000   0x........         DC32     ?_13

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x2D 0x49          DC8 "-I- I cache enabled.\012\015"
   \              0x2D 0x20    
   \              0x49 0x20    
   \              0x63 0x61    
   \              0x63 0x68    
   \              0x65 0x20    
   \              0x65 0x6E    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x64 0x2E    
   \              0x0A 0x0D    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x2D 0x49          DC8 "-I- I cache is already enabled.\012\015"
   \              0x2D 0x20    
   \              0x49 0x20    
   \              0x63 0x61    
   \              0x63 0x68    
   \              0x65 0x20    
   \              0x69 0x73    
   \              0x20 0x61    
   \              0x6C 0x72    
   \              0x65 0x61    
   \              0x64 0x79    
   \              0x20 0x65    
   \              0x6E 0x61    
   \              0x62 0x6C    
   \              0x65 0x64    
   \              0x2E 0x0A    
   \              0x0D 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x2D 0x49          DC8 "-I- I cache disabled.\012\015"
   \              0x2D 0x20    
   \              0x49 0x20    
   \              0x63 0x61    
   \              0x63 0x68    
   \              0x65 0x20    
   \              0x64 0x69    
   \              0x73 0x61    
   \              0x62 0x6C    
   \              0x65 0x64    
   \              0x2E 0x0A    
   \              0x0D 0x00    

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x2D 0x49          DC8 "-I- I cache is already disabled.\012\015"
   \              0x2D 0x20    
   \              0x49 0x20    
   \              0x63 0x61    
   \              0x63 0x68    
   \              0x65 0x20    
   \              0x69 0x73    
   \              0x20 0x61    
   \              0x6C 0x72    
   \              0x65 0x61    
   \              0x64 0x79    
   \              0x20 0x64    
   \              0x69 0x73    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x64 0x2E    
   \              0x0A 0x0D    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x2D 0x49          DC8 "-I- MMU enabled.\012\015"
   \              0x2D 0x20    
   \              0x4D 0x4D    
   \              0x55 0x20    
   \              0x65 0x6E    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x64 0x2E    
   \              0x0A 0x0D    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x2D 0x49          DC8 "-I- MMU is already enabled.\012\015"
   \              0x2D 0x20    
   \              0x4D 0x4D    
   \              0x55 0x20    
   \              0x69 0x73    
   \              0x20 0x61    
   \              0x6C 0x72    
   \              0x65 0x61    
   \              0x64 0x79    
   \              0x20 0x65    
   \              0x6E 0x61    
   \              0x62 0x6C    
   \              0x65 0x64    
   \              0x2E 0x0A    
   \              0x0D 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0x2D 0x49          DC8 "-I- MMU disabled.\012\015"
   \              0x2D 0x20    
   \              0x4D 0x4D    
   \              0x55 0x20    
   \              0x64 0x69    
   \              0x73 0x61    
   \              0x62 0x6C    
   \              0x65 0x64    
   \              0x2E 0x0A    
   \              0x0D 0x00    

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x2D 0x49          DC8 "-I- MMU is already disabled.\012\015"
   \              0x2D 0x20    
   \              0x4D 0x4D    
   \              0x55 0x20    
   \              0x69 0x73    
   \              0x20 0x61    
   \              0x6C 0x72    
   \              0x65 0x61    
   \              0x64 0x79    
   \              0x20 0x64    
   \              0x69 0x73    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x64 0x2E    
   \              0x0A 0x0D    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x2D 0x45          DC8 "-E- Do nothing: MMU not enabled\012\015"
   \              0x2D 0x20    
   \              0x44 0x6F    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x68 0x69    
   \              0x6E 0x67    
   \              0x3A 0x20    
   \              0x4D 0x4D    
   \              0x55 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x65 0x6E    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x64 0x0A    
   \              0x0D 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x2D 0x49          DC8 "-I- D cache enabled.\012\015"
   \              0x2D 0x20    
   \              0x44 0x20    
   \              0x63 0x61    
   \              0x63 0x68    
   \              0x65 0x20    
   \              0x65 0x6E    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x64 0x2E    
   \              0x0A 0x0D    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x2D 0x49          DC8 "-I- D cache is already enabled.\012\015"
   \              0x2D 0x20    
   \              0x44 0x20    
   \              0x63 0x61    
   \              0x63 0x68    
   \              0x65 0x20    
   \              0x69 0x73    
   \              0x20 0x61    
   \              0x6C 0x72    
   \              0x65 0x61    
   \              0x64 0x79    
   \              0x20 0x65    
   \              0x6E 0x61    
   \              0x62 0x6C    
   \              0x65 0x64    
   \              0x2E 0x0A    
   \              0x0D 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_11:
   \   00000000   0x2D 0x49          DC8 "-I- D cache disabled.\012\015"
   \              0x2D 0x20    
   \              0x44 0x20    
   \              0x63 0x61    
   \              0x63 0x68    
   \              0x65 0x20    
   \              0x64 0x69    
   \              0x73 0x61    
   \              0x62 0x6C    
   \              0x65 0x64    
   \              0x2E 0x0A    
   \              0x0D 0x00    

   \                                 In section .rodata, align 4
   \                     ?_12:
   \   00000000   0x2D 0x49          DC8 "-I- D cache is already disabled.\012\015"
   \              0x2D 0x20    
   \              0x44 0x20    
   \              0x63 0x61    
   \              0x63 0x68    
   \              0x65 0x20    
   \              0x69 0x73    
   \              0x20 0x61    
   \              0x6C 0x72    
   \              0x65 0x61    
   \              0x64 0x79    
   \              0x20 0x64    
   \              0x69 0x73    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x64 0x2E    
   \              0x0A 0x0D    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_13:
   \   00000000   0x21 0x43          DC8 "!CacheType"
   \              0x61 0x63    
   \              0x68 0x65    
   \              0x54 0x79    
   \              0x70 0x65    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_14:
   \   00000000   0x43 0x3A          DC8 43H, 3AH, 5CH, 55H, 73H, 65H, 72H, 73H
   \              0x5C 0x55    
   \              0x73 0x65    
   \              0x72 0x73    
   \   00000008   0x5C 0x64          DC8 5CH, 64H, 66H, 72H, 6FH, 6EH, 65H, 6BH
   \              0x66 0x72    
   \              0x6F 0x6E    
   \              0x65 0x6B    
   \   00000010   0x5C 0x44          DC8 5CH, 44H, 6FH, 63H, 75H, 6DH, 65H, 6EH
   \              0x6F 0x63    
   \              0x75 0x6D    
   \              0x65 0x6E    
   \   00000018   0x74 0x73          DC8 74H, 73H, 5CH, 50H, 72H, 6FH, 6AH, 65H
   \              0x5C 0x50    
   \              0x72 0x6F    
   \              0x6A 0x65    
   \   00000020   0x63 0x74          DC8 63H, 74H, 5CH, 73H, 6FH, 66H, 74H, 70H
   \              0x5C 0x73    
   \              0x6F 0x66    
   \              0x74 0x70    
   \   00000028   0x61 0x63          DC8 61H, 63H, 6BH, 5CH, 64H, 72H, 69H, 76H
   \              0x6B 0x5C    
   \              0x64 0x72    
   \              0x69 0x76    
   \   00000030   0x65 0x72          DC8 65H, 72H, 73H, 5CH, 63H, 6FH, 72H, 65H
   \              0x73 0x5C    
   \              0x63 0x6F    
   \              0x72 0x65    
   \   00000038   0x5C 0x63          DC8 5CH, 63H, 70H, 31H, 35H, 2EH, 63H, 0
   \              0x70 0x31    
   \              0x35 0x2E    
   \              0x63 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   cp15_cache_clean
         8   -> __aeabi_assert
         8   -> __iar_EmptyStepPoint
         8   -> cp15_clean_dcache_by_set_way
         8   -> cp15_select_dcache
       8   cp15_cache_flush
         8   -> __aeabi_assert
         8   -> __iar_EmptyStepPoint
         8   -> cp15_clean_invalid_dcache_by_set_way
         8   -> cp15_select_dcache
       8   cp15_cache_invalidate
         8   -> cp15_invalid_dcache_by_set_way
         8   -> cp15_invalid_icache_inner_sharable
         8   -> cp15_select_dcache
         8   -> cp15_select_icache
      16   cp15_clean_dcache_by_va
        16   -> cp15_clean_dcache_by_mva
        16   -> cp15_select_dcache
       8   cp15_disable_dcache
         8   -> cp15_read_control
         8   -> cp15_write_control
         8   -> printf
       8   cp15_disable_icache
         8   -> cp15_read_control
         8   -> cp15_write_control
         8   -> printf
       8   cp15_disable_mmu
         8   -> cp15_read_control
         8   -> cp15_write_control
         8   -> printf
       8   cp15_enable_dcache
         8   -> cp15_is_mmu_enabled
         8   -> cp15_read_control
         8   -> cp15_write_control
         8   -> printf
       8   cp15_enable_icache
         8   -> cp15_read_control
         8   -> cp15_write_control
         8   -> printf
       8   cp15_enable_mmu
         8   -> cp15_read_control
         8   -> cp15_write_control
         8   -> printf
      16   cp15_flush_dcache_by_va
        16   -> cp15_clean_invalid_dcache_by_mva
        16   -> cp15_select_dcache
      16   cp15_invalid_dcache_by_va
        16   -> cp15_invalid_dcache_by_mva
        16   -> cp15_select_dcache
       0   cp15_invalidate_tlb
       8   cp15_is_dcache_enabled
         8   -> cp15_read_control
       8   cp15_is_icached_enabled
         8   -> cp15_read_control
       8   cp15_is_mmu_enabled
         8   -> cp15_read_control


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_12
       4  ??DataTable7_13
       4  ??DataTable7_14
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
      24  ?_0
      36  ?_1
      36  ?_10
      24  ?_11
      36  ?_12
      12  ?_13
      64  ?_14
      24  ?_2
      36  ?_3
      20  ?_4
      32  ?_5
      20  ?_6
      32  ?_7
      36  ?_8
      24  ?_9
      56  _id_h64_matrix
      60  cp15_cache_clean
      60  cp15_cache_flush
      64  cp15_cache_invalidate
      32  cp15_clean_dcache_by_va
      56  cp15_disable_dcache
      56  cp15_disable_icache
      60  cp15_disable_mmu
      80  cp15_enable_dcache
      56  cp15_enable_icache
      56  cp15_enable_mmu
      32  cp15_flush_dcache_by_va
      32  cp15_invalid_dcache_by_va
      16  cp15_invalidate_tlb
      20  cp15_is_dcache_enabled
      24  cp15_is_icached_enabled
      20  cp15_is_mmu_enabled

 
 512 bytes in section .rodata
 784 bytes in section SOFTPACK
 
 784 bytes of CODE  memory
 512 bytes of CONST memory

Errors: none
Warnings: 1
