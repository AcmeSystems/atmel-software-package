###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        21/May/2015  13:39:06
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  arm
#    Endian       =  little
#    Source file  =  
#        C:\Users\dfronek\Documents\Project\softpack\drivers\time\timetick.c
#    Command line =  
#        C:\Users\dfronek\Documents\Project\softpack\drivers\time\timetick.c -D
#        BOARD_SAMA5D2_XPLAINED -D API_PIOv4 -D SERIE_SAMA5D2 -D CHIP_SAMA5D27
#        -D sram --preprocess=l
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\List\
#        -lC
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\List\
#        -o
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-A5 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../drivers\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../examples\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../lib\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../target\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../target/include\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../target/sama5d2\
#        --section .text=SOFTPACK --cpu_mode arm -On
#    List file    =  
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\List\timetick.lst
#    Object file  =  
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\Obj\timetick.o
#
###############################################################################

C:\Users\dfronek\Documents\Project\softpack\drivers\time\timetick.c
      1          /* ----------------------------------------------------------------------------
                                                                                               ^
Warning[Pa050]: non-native end of line sequence detected (this diagnostic is
          only issued once)
      2           *         SAM Software Package License
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2015, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          /**
     31           *  \file
     32           *  Implement simple PIT usage as system tick.
     33           */
     34          
     35          /*----------------------------------------------------------------------------
     36           *         Headers
     37           *----------------------------------------------------------------------------*/
     38          
     39          #include "time/timetick.h"
     40          #include "time/tc.h"

   \                                 In section .rodata, align 4
   \   __absolute unsigned int const _id_h64_matrix[14]
   \                     _id_h64_matrix:
   \   00000000   0x00000006         DC32 6, 7, 9, 10, 12, 13, 15, 31, 32, 45, 46, 52, 53, 63
   \              0x00000007   
   \              0x00000009   
   \              0x0000000A   
   \              0x0000000C   
   \              0x0000000D   
   \              0x0000000F   
   \              0x0000001F   
   \              0x00000020   
   \              0x0000002D   
   \              0x0000002E   
   \              0x00000034   
   \              0x00000035   
   \              0x0000003F   
     41          #include "time/pit.h"
     42          
     43          /*----------------------------------------------------------------------------
     44           *         Local variables
     45           *----------------------------------------------------------------------------*/
     46          
     47          /** Tick Counter united by ms */

   \                                 In section .bss, align 4
     48          static volatile uint32_t _tick_count = 0;
   \                     _tick_count:
   \   00000000                      DS8 4
     49          
     50          /*----------------------------------------------------------------------------
     51           *         Exported Functions
     52           *----------------------------------------------------------------------------*/
     53          
     54          /**
     55           *  \brief Handler for Sytem Tick interrupt.
     56           */

   \                                 In section SOFTPACK, align 4, keep-with-next
     57          void timetick_increment(uint32_t inc)
     58          {
     59          	_tick_count += inc;
   \                     timetick_increment:
   \   00000000   0x........         LDR      R1,??DataTable4
   \   00000004   0xE5911000         LDR      R1,[R1, #+0]
   \   00000008   0xE0901001         ADDS     R1,R0,R1
   \   0000000C   0x........         LDR      R2,??DataTable4
   \   00000010   0xE5821000         STR      R1,[R2, #+0]
     60          }
   \   00000014   0xE12FFF1E         BX       LR               ;; return
     61          
     62          /**
     63           *  \brief Configures the PIT & reset tickCount.
     64           *  Systick interrupt handler will generates 1ms interrupt and increase a
     65           *  tickCount.
     66           *  \note IRQ handler must be configured before invoking this function.
     67           *  \note PIT is enabled automatically in this function.
     68           *  \param new_mck  Current master clock.
     69           */

   \                                 In section SOFTPACK, align 4, keep-with-next
     70          extern uint32_t timetick_configure(uint32_t new_mck)
     71          {
   \                     timetick_configure:
   \   00000000   0xE92D4010         PUSH     {R4,LR}
   \   00000004   0xE1B04000         MOVS     R4,R0
     72          	_tick_count = 0;
   \   00000008   0xE3A00000         MOV      R0,#+0
   \   0000000C   0x........         LDR      R1,??DataTable4
   \   00000010   0xE5810000         STR      R0,[R1, #+0]
     73          	pit_init(1000);
   \   00000014   0xE3A00FFA         MOV      R0,#+1000
   \   00000018   0x........         BL       pit_init
     74          	pit_enable_it();
   \   0000001C   0x........         BL       pit_enable_it
     75          	pit_enable();
   \   00000020   0x........         BL       pit_enable
     76          	return 0;
   \   00000024   0xE3A00000         MOV      R0,#+0
   \   00000028   0xE8BD8010         POP      {R4,PC}          ;; return
     77          }
     78          
     79          /**
     80           * Get Delayed number of tick
     81           * \param startTick Start tick point.
     82           * \param endTick   End tick point.
     83           */

   \                                 In section SOFTPACK, align 4, keep-with-next
     84          extern uint32_t timetick_get_delay_in_ticks(uint32_t startTick, uint32_t endTick)
     85          {
     86          	if (endTick >= startTick)
   \                     timetick_get_delay_in_ticks:
   \   00000000   0xE1510000         CMP      R1,R0
   \   00000004   0x3A000001         BCC      ??timetick_get_delay_in_ticks_0
     87          		return (endTick - startTick);
   \   00000008   0xE0510000         SUBS     R0,R1,R0
   \   0000000C   0xEA000002         B        ??timetick_get_delay_in_ticks_1
     88          	return (endTick + (0xFFFFFFFF - startTick) + 1);
   \                     ??timetick_get_delay_in_ticks_0:
   \   00000010   0xE2511001         SUBS     R1,R1,#+1
   \   00000014   0xE0510000         SUBS     R0,R1,R0
   \   00000018   0xE2900001         ADDS     R0,R0,#+1
   \                     ??timetick_get_delay_in_ticks_1:
   \   0000001C   0xE12FFF1E         BX       LR               ;; return
     89          }
     90          
     91          /**
     92           *  \brief Get current Tick Count, in ms.
     93           */

   \                                 In section SOFTPACK, align 4, keep-with-next
     94          extern uint32_t timetick_get_tick_count(void)
     95          {
     96          	return _tick_count;
   \                     timetick_get_tick_count:
   \   00000000   0x........         LDR      R0,??DataTable4
   \   00000004   0xE5900000         LDR      R0,[R0, #+0]
   \   00000008   0xE12FFF1E         BX       LR               ;; return
     97          }
     98          
     99          /**
    100           *  \brief Sync Wait for several ms
    101           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    102          void timetick_wait(volatile uint32_t ms)
    103          {
   \                     timetick_wait:
   \   00000000   0xE92D0001         PUSH     {R0}
    104          	uint32_t start, current;
    105          	start = _tick_count;
   \   00000004   0x........         LDR      R2,??DataTable4
   \   00000008   0xE5922000         LDR      R2,[R2, #+0]
   \   0000000C   0xE1B00002         MOVS     R0,R2
    106          	do {
    107          		current = _tick_count;
   \                     ??timetick_wait_0:
   \   00000010   0x........         LDR      R2,??DataTable4
   \   00000014   0xE5922000         LDR      R2,[R2, #+0]
   \   00000018   0xE1B01002         MOVS     R1,R2
    108          	} while (current - start < ms);
   \   0000001C   0xE0512000         SUBS     R2,R1,R0
   \   00000020   0xE59D3000         LDR      R3,[SP, #+0]
   \   00000024   0xE1520003         CMP      R2,R3
   \   00000028   0x3AFFFFF8         BCC      ??timetick_wait_0
    109          }
   \   0000002C   0xE28DD004         ADD      SP,SP,#+4        ;; stack cleaning
   \   00000030   0xE12FFF1E         BX       LR               ;; return
    110          
    111          /**
    112           *  \brief Sync Sleep for several ms
    113           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    114          void timetick_sleep(volatile uint32_t ms)
    115          {
   \                     timetick_sleep:
   \   00000000   0xE92D0001         PUSH     {R0}
    116          	uint32_t start, current;
    117          	asm("CPSIE   I");
   \   00000004   0xF1080080         CPSIE   I
    118          	start = _tick_count;
   \   00000008   0x........         LDR      R2,??DataTable4
   \   0000000C   0xE5922000         LDR      R2,[R2, #+0]
   \   00000010   0xE1B00002         MOVS     R0,R2
    119          
    120          	do {
    121          		current = _tick_count;
   \                     ??timetick_sleep_0:
   \   00000014   0x........         LDR      R2,??DataTable4
   \   00000018   0xE5922000         LDR      R2,[R2, #+0]
   \   0000001C   0xE1B01002         MOVS     R1,R2
    122          		if (current - start > ms) {
   \   00000020   0xE59D2000         LDR      R2,[SP, #+0]
   \   00000024   0xE0513000         SUBS     R3,R1,R0
   \   00000028   0xE1520003         CMP      R2,R3
   \   0000002C   0x3A000001         BCC      ??timetick_sleep_1
    123          			break;
    124          		}
    125          		asm("WFI");
    126          	} while (1);
    127          }
   \                     ??timetick_sleep_2:
   \   00000030   0xE320F003         WFI
   \   00000034   0xEAFFFFF6         B        ??timetick_sleep_0
   \                     ??timetick_sleep_1:
   \   00000038   0xE28DD004         ADD      SP,SP,#+4        ;; stack cleaning
   \   0000003C   0xE12FFF1E         BX       LR               ;; return

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     _tick_count

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   timetick_configure
         8   -> pit_enable
         8   -> pit_enable_it
         8   -> pit_init
       0   timetick_get_delay_in_ticks
       0   timetick_get_tick_count
       0   timetick_increment
       4   timetick_sleep
       4   timetick_wait


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
      56  _id_h64_matrix
       4  _tick_count
      44  timetick_configure
      32  timetick_get_delay_in_ticks
      12  timetick_get_tick_count
      24  timetick_increment
      64  timetick_sleep
      52  timetick_wait

 
   4 bytes in section .bss
  56 bytes in section .rodata
 232 bytes in section SOFTPACK
 
 232 bytes of CODE  memory
  56 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: 1
