###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        21/May/2015  13:38:59
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  arm
#    Endian       =  little
#    Source file  =  
#        C:\Users\dfronek\Documents\Project\softpack\target\sama5d2\board_lowlevel.c
#    Command line =  
#        C:\Users\dfronek\Documents\Project\softpack\target\sama5d2\board_lowlevel.c
#        -D BOARD_SAMA5D2_XPLAINED -D API_PIOv4 -D SERIE_SAMA5D2 -D
#        CHIP_SAMA5D27 -D sram --preprocess=l
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\List\
#        -lC
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\List\
#        -o
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-A5 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../drivers\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../examples\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../lib\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../target\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../target/include\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started/../../target/sama5d2\
#        --section .text=SOFTPACK --cpu_mode arm -On
#    List file    =  
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\List\board_lowlevel.lst
#    Object file  =  
#        C:\Users\dfronek\Documents\Project\softpack\examples\getting_started\build\debug\Obj\board_lowlevel.o
#
###############################################################################

C:\Users\dfronek\Documents\Project\softpack\target\sama5d2\board_lowlevel.c
      1          /* ----------------------------------------------------------------------------
                                                                                               ^
Warning[Pa050]: non-native end of line sequence detected (this diagnostic is
          only issued once)
      2           *         SAM Software Package License
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2015, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          /**
     31           * \file
     32           *
     33           * Provides the low-level initialization function that called on chip startup.
     34           */
     35          
     36          /*----------------------------------------------------------------------------
     37           *        Headers
     38           *----------------------------------------------------------------------------*/
     39          
     40          #include "chip.h"

   \                                 In section .rodata, align 4
   \   __absolute unsigned int const _id_h64_matrix[14]
   \                     _id_h64_matrix:
   \   00000000   0x00000006         DC32 6, 7, 9, 10, 12, 13, 15, 31, 32, 45, 46, 52, 53, 63
   \              0x00000007   
   \              0x00000009   
   \              0x0000000A   
   \              0x0000000C   
   \              0x0000000D   
   \              0x0000000F   
   \              0x0000001F   
   \              0x00000020   
   \              0x0000002D   
   \              0x0000002E   
   \              0x00000034   
   \              0x00000035   
   \              0x0000003F   
     41          #include "board.h"

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     dummy_handler:
   \   __interwork __softfp void Spurious_handler(void)
   \                     Spurious_handler:
   \   __interwork __softfp void SAIC_Handler(void)
   \                     SAIC_Handler:
   \   __interwork __softfp void PIT_Handler(void)
   \                     PIT_Handler:
   \   __interwork __softfp void WDT_Handler(void)
   \                     WDT_Handler:
   \   __interwork __softfp void PIOD_Handler(void)
   \                     PIOD_Handler:
   \   __interwork __softfp void XDMAC0_Handler(void)
   \                     XDMAC0_Handler:
   \   __interwork __softfp void ICM_Handler(void)
   \                     ICM_Handler:
   \   __interwork __softfp void AES_Handler(void)
   \                     AES_Handler:
   \   __interwork __softfp void AESB_Handler(void)
   \                     AESB_Handler:
   \   __interwork __softfp void TDES_Handler(void)
   \                     TDES_Handler:
   \   __interwork __softfp void SHA_Handler(void)
   \                     SHA_Handler:
   \   __interwork __softfp void MPDDRC_Handler(void)
   \                     MPDDRC_Handler:
   \   __interwork __softfp void HSMC_Handler(void)
   \                     HSMC_Handler:
   \   __interwork __softfp void PIOA_Handler(void)
   \                     PIOA_Handler:
   \   __interwork __softfp void PIOB_Handler(void)
   \                     PIOB_Handler:
   \   __interwork __softfp void PIOC_Handler(void)
   \                     PIOC_Handler:
   \   __interwork __softfp void UART0_Handler(void)
   \                     UART0_Handler:
   \   __interwork __softfp void UART1_Handler(void)
   \                     UART1_Handler:
   \   __interwork __softfp void UART2_Handler(void)
   \                     UART2_Handler:
   \   __interwork __softfp void UART3_Handler(void)
   \                     UART3_Handler:
   \   __interwork __softfp void UART4_Handler(void)
   \                     UART4_Handler:
   \   __interwork __softfp void SPI0_Handler(void)
   \                     SPI0_Handler:
   \   __interwork __softfp void SPI1_Handler(void)
   \                     SPI1_Handler:
   \   __interwork __softfp void TC0_Handler(void)
   \                     TC0_Handler:
   \   __interwork __softfp void TC1_Handler(void)
   \                     TC1_Handler:
   \   __interwork __softfp void PWM_Handler(void)
   \                     PWM_Handler:
   \   __interwork __softfp void ADC_Handler(void)
   \                     ADC_Handler:
   \   __interwork __softfp void UHPHS_Handler(void)
   \                     UHPHS_Handler:
   \   __interwork __softfp void UDPHS_Handler(void)
   \                     UDPHS_Handler:
   \   __interwork __softfp void SSC0_Handler(void)
   \                     SSC0_Handler:
   \   __interwork __softfp void SSC1_Handler(void)
   \                     SSC1_Handler:
   \   __interwork __softfp void XDMAC1_Handler(void)
   \                     XDMAC1_Handler:
   \   __interwork __softfp void LCDC_Handler(void)
   \                     LCDC_Handler:
   \   __interwork __softfp void TRNG_Handler(void)
   \                     TRNG_Handler:
   \   __interwork __softfp void GMAC_Handler(void)
   \                     GMAC_Handler:
   \   __interwork __softfp void AIC_Handler(void)
   \                     AIC_Handler:
   \   __interwork __softfp void SFC_Handler(void)
   \                     SFC_Handler:
   \   __interwork __softfp void SFR_Handler(void)
   \                     SFR_Handler:
   \   __interwork __softfp void L2CC_Handler(void)
   \                     L2CC_Handler:
   \   __interwork __softfp void MATRIX1_Handler(void)
   \                     MATRIX1_Handler:
   \   __interwork __softfp void MATRIX0_Handler(void)
   \                     MATRIX0_Handler:
   \   __interwork __softfp void FLEXCOM0_Handler(void)
   \                     FLEXCOM0_Handler:
   \   __interwork __softfp void FLEXCOM1_Handler(void)
   \                     FLEXCOM1_Handler:
   \   __interwork __softfp void FLEXCOM2_Handler(void)
   \                     FLEXCOM2_Handler:
   \   __interwork __softfp void FLEXCOM3_Handler(void)
   \                     FLEXCOM3_Handler:
   \   __interwork __softfp void FLEXCOM4_Handler(void)
   \                     FLEXCOM4_Handler:
   \   __interwork __softfp void TWIHS0_Handler(void)
   \                     TWIHS0_Handler:
   \   __interwork __softfp void TWIHS1_Handler(void)
   \                     TWIHS1_Handler:
   \   __interwork __softfp void QSPI0_Handler(void)
   \                     QSPI0_Handler:
   \   __interwork __softfp void QSPI1_Handler(void)
   \                     QSPI1_Handler:
   \   __interwork __softfp void PDMIC_Handler(void)
   \                     PDMIC_Handler:
   \   __interwork __softfp void I2SC0_Handler(void)
   \                     I2SC0_Handler:
   \   __interwork __softfp void I2SC1_Handler(void)
   \                     I2SC1_Handler:
   \   __interwork __softfp void CLASSD_Handler(void)
   \                     CLASSD_Handler:
   \   __interwork __softfp void ACC_Handler(void)
   \                     ACC_Handler:
   \   __interwork __softfp void RXLP_Handler(void)
   \                     RXLP_Handler:
   \   __interwork __softfp void CHIPID_Handler(void)
   \                     CHIPID_Handler:
   \                     ??dummy_handler_0:
   \   00000000   0xEAFFFFFE         B        ??dummy_handler_0
     42          #include "resources/compiler_defines.h"
     43          #include "core/pmc.h"
     44          #include "core/pio.h"
     45          #include <stdio.h>
     46          
     47          /*----------------------------------------------------------------------------
     48           *        Definiation
     49           *----------------------------------------------------------------------------*/
     50          
     51          #define CPSR_MASK_IRQ 0x00000080
     52          #define CPSR_MASK_FIQ 0x00000040
     53          
     54          /*----------------------------------------------------------------------------
     55           *        Local variables
     56           *----------------------------------------------------------------------------*/
     57          
     58          /** Array of dividers to compute max supported peripheral frequence for SAMA5D2
     59           *  chips.
     60           */

   \                                 In section .rodata, align 4
     61          const uint32_t peripherals_min_clock_dividers[] = {
   \                     peripherals_min_clock_dividers:
   \   00000000   0x00000002         DC32 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 1, 2, 2, 2, 2, 1, 0, 2, 2, 2, 2, 2
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000001   
   \              0x00000001   
   \              0x00000002   
   \              0x00000002   
   \              0x00000001   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000001   
   \              0x00000000   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \   00000058   0x00000002         DC32 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 0, 2, 0, 2, 2, 2, 2
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000001   
   \              0x00000001   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000000   
   \              0x00000002   
   \              0x00000000   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \   000000B0   0x00000002         DC32 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2
   \              0x00000001   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \   00000108   0x00000002         DC32 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 2
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000000   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000000   
   \              0x00000002   
     62          	2,/* ID_SAIC_FIQ */
     63          	2,/* ID_PMC */
     64          	2,/* ID_ARM_PMU */
     65          	2,/* ID_PIT */
     66          	2,/* ID_WDT */
     67          	2,/* ID_GMAC */
     68          	1,/* ID_XDMAC0 */
     69          	1,/* ID_XDMAC1 */
     70          	2,/* ID_ICM */
     71          	2,/* ID_AES */
     72          	1,/* ID_AESB */
     73          	2,/* ID_TDES */
     74          	2,/* ID_SHA */
     75          	2,/* ID_MPDDRC */
     76          	2,/* ID_MATRIX1 */
     77          	1,/* ID_MATRIX0 */
     78          	0,
     79          	2,/* ID_HSMC */
     80          	2,/* ID_PIOA */
     81          	2,/* ID_FLEXCOM0 */
     82          	2,/* ID_FLEXCOM1 */
     83          	2,/* ID_FLEXCOM2 */
     84          	2,/* ID_FLEXCOM3 */
     85          	2,/* ID_FLEXCOM4 */
     86          	2,/* ID_UART0 */
     87          	2,/* ID_UART1 */
     88          	2,/* ID_UART2 */
     89          	2,/* ID_UART3 */
     90          	2,/* ID_UART4 */
     91          	2,/* ID_TWIHS0 */
     92          	2,/* ID_TWIHS1 */
     93          	1,/* ID_SDHC0 */
     94          	1,/* ID_SDHC1 */
     95          	2,/* ID_SPI0 */
     96          	2,/* ID_SPI1 */
     97          	2,/* ID_TC0 */
     98          	2,/* ID_TC1 */
     99          	0,
    100          	2,/* ID_PWM */
    101          	0,
    102          	2,/* ID_ADC */
    103          	2,/* ID_UHPHS */
    104          	2,/* ID_UDPHS */
    105          	2,/* ID_SSC0 */
    106          	2,/* ID_SSC1 */
    107          	1,/* ID_LCDC */
    108          	2,/* ID_ISC */
    109          	2,/* ID_TRNG */
    110          	2,/* ID_PDMIC */
    111          	2,/* ID_AIC_IRQ */
    112          	2,/* ID_SFC */
    113          	2,/* ID_SECURAM */
    114          	2,/* ID_QSPI0 */
    115          	2,/* ID_QSPI1 */
    116          	2,/* ID_I2SC0 */
    117          	2,/* ID_I2SC1 */
    118          	0,
    119          	0,
    120          	0,
    121          	2,/* ID_CLASSD */
    122          	2,/* ID_SFR */
    123          	2,/* ID_SAIC */
    124          	2,/* ID_AIC */
    125          	2,/* ID_L2CC */
    126          	2,/* ID_CAN0_INT1 */
    127          	2,/* ID_CAN1_INT1 */
    128          	2,/* ID_GMAC_Q1 */
    129          	2,/* ID_GMAC_Q2 */
    130          	2,/* ID_PIOB */
    131          	2,/* ID_PIOC */
    132          	2,/* ID_PIOD */
    133          	2,/* ID_SDHC0_TIMER */
    134          	0,
    135          	2,/* ID_RSTC */
    136          	2,/* ID_RTC */
    137          	2,/* ID_ACC */
    138          	2,/* ID_RXLP */
    139          	0,
    140          	2,/* ID_CHIPID */
    141          };

   \                                 In section .data, align 4
    142          static const char* abort_status[][2]=
   \                     abort_status:
   \   00000000   0x........         DC32 ?_0, ?_0, ?_0, ?_1, ?_2, ?_2, ?_3, ?_3, ?_0, ?_4, ?_5, ?_5, ?_6
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000034   0x........         DC32 ?_6, ?_7, ?_7, ?_8, ?_9, ?_10, ?_10, ?_0, ?_0, ?_11, ?_11, ?_12
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000064   0x........         DC32 ?_12, ?_13, ?_13, ?_14, ?_14, ?_15, ?_15, ?_0, ?_0, ?_0, ?_0, ?_0
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000094   0x........         DC32 ?_0, ?_0, ?_0, ?_0, ?_0, ?_0, ?_0, ?_0, ?_16
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
    143          {
    144          	// IFSR status        ,       DFSR status
    145          	{"Unknown(reserved status)",                          "Unknown(reserved status)"                      },//0
    146          	{"Unknown(reserved status)",                          "Alignment Fault"                               },//1
    147          	{"Debug Event",                                       "Debug Event"                                   },//2
    148          	{"Access flag - section",                             "Access flag - section"                         },//3
    149          	{"Unknown(reserved status)",                          "Instruction cache maintenance"                 },//4
    150          	{"Translation fault - section",                       "Translation fault - section"                   },//5
    151          	{"Access flag - Page",                                "Access flag - Page"                            },//6
    152          	{"Translation fault -Page",                           "Translation fault -Page"                       },//7
    153          	{"Synchronous external abort",                        "Synchronous external abort, nontranslation"    },//8
    154          	{"Domain fault - Section",                            "Domain fault - Section"                        },//9
    155          	{"Unknown(reserved status)",                          "Unknown(reserved status)"                      },//10
    156          	{"Domain fault - Page",                               "Domain fault - Page"                           },//11
    157          	{"Synchronous external abort - L1 Translation",       "Synchronous external abort - L1 Translation"   },//12
    158          	{"Permission fault - Section",                        "Permission fault - Section"                    },//13
    159          	{"Synchronous external abort - L2 Translation",       "Synchronous external abort - L2 Translation"   },//14
    160          	{"Permission fault - Page",                           "Permission fault - Page"                       },//15
    161          	{"Unknown(reserved status)",                          "Unknown(reserved status)"                      },//16
    162          	{"Unknown(reserved status)",                          "Unknown(reserved status)"                      },//17
    163          	{"Unknown(reserved status)",                          "Unknown(reserved status)"                      },//18
    164          	{"Unknown(reserved status)",                          "Unknown(reserved status)"                      },//19
    165          	{"Unknown(reserved status)",                          "Unknown(reserved status)"                      },//20
    166          	{"Unknown(reserved status)",                          "Unknown(reserved status)"                      },//21
    167          	{"Unknown(reserved status)",                          "Asynchronous external abort"}
    168          };
    169          
    170          /*----------------------------------------------------------------------------
    171           *        Low level functions
    172           *----------------------------------------------------------------------------*/
    173          

   \                                 In section SOFTPACK, align 4, keep-with-next
    174          static void v_arm_set_cpsr_bits(uint32_t mask)
    175          {
    176          /*
    177          	uint32_t cpsr = 0;
    178          	asm volatile ("mrs %[cpsr_wrt], CPSR\r\n"
    179          		      "orr %[cpsr_wrt], %[cpsr_rd], %[mask_to_apl]\r\n"
    180          		      "msr CPSR_c, %[cpsr_rd]" : [cpsr_wrt] "=r"(cpsr)
    181          		      : [cpsr_rd] "r" (cpsr), [mask_to_apl] "r" (mask));
    182          */
    183          	asm("MRS R1, CPSR");   // Get current CPSR
   \                     v_arm_set_cpsr_bits:
   \   00000000   0xE10F1000         MRS R1, CPSR
    184          	asm("ORR R0, R0, R1"); // Calculate new CPSR value
   \   00000004   0xE1800001         ORR R0, R0, R1
    185          	asm("MSR CPSR_c,R0");  // Set new value
   \   00000008   0xE121F000         MSR CPSR_c,R0
    186          	asm("bx lr");
   \   0000000C   0xE12FFF1E         bx lr
    187          }
   \   00000010   0xE12FFF1E         BX       LR               ;; return

   \                                 In section SOFTPACK, align 4, keep-with-next
    188          static void v_arm_clr_cpsr_bits(uint32_t mask)
    189          {
    190          /*
    191          	uint32_t cpsr = 0;
    192          	mask = ~mask;
    193          	asm volatile ("mrs %[cpsr_wrt], CPSR\r\n"
    194          		      "and %[cpsr_wrt], %[cpsr_rd], %[mask_to_apl]\r\n"
    195          		      "msr CPSR_c, %[cpsr_rd]" : [cpsr_wrt] "=r"(cpsr)
    196          		      : [cpsr_rd] "r" (cpsr), [mask_to_apl] "r" (mask));
    197          */
    198          	asm("MRS R1, CPSR");   // Get current CPSR
   \                     v_arm_clr_cpsr_bits:
   \   00000000   0xE10F1000         MRS R1, CPSR
    199          	asm("MVN R0, R0");     // invert
   \   00000004   0xE1E00000         MVN R0, R0
    200          	asm("AND R0, R0, R1"); // Calculate new CPSR value
   \   00000008   0xE0000001         AND R0, R0, R1
    201          	asm("MSR CPSR_c,R0");  // Set new value
   \   0000000C   0xE121F000         MSR CPSR_c,R0
    202          	asm("bx lr");
   \   00000010   0xE12FFF1E         bx lr
    203          
    204          }
   \   00000014   0xE12FFF1E         BX       LR               ;; return
    205          
    206          /*----------------------------------------------------------------------------
    207           *
    208           *----------------------------------------------------------------------------*/
    209          
    210          extern WEAK void low_level_init(void);
    211          
    212          void default_spurious_handler(void);
    213          void abort_c_handler(void);
    214          void prefetch_c_handler(void);
    215          void undefined_c_Handler(void);
    216          void v_arm_clr_cpsr_bits(uint32_t mask);
    217          void dummy_handler(void);
    218          void non_secure_it_init(void);
    219          void secure_it_init(void);
    220          
    221          /*----------------------------------------------------------------------------
    222           *        Functions
    223           *----------------------------------------------------------------------------*/
    224          
    225          /**
    226           * \brief Performs the low-level initialization of the chip.
    227           * It also enable a low level on the pin NRST triggers a user reset.
    228           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    229          extern WEAK void __low_level_init(void)
    230          {
   \                     __low_level_init:
   \   00000000   0xE92D4010         PUSH     {R4,LR}
    231          	volatile uint32_t * pAicFuse = (volatile uint32_t *) REG_SFR_AICREDIR;
   \   00000004   0x........         LDR      R0,??DataTable4  ;; 0xf8030054
   \   00000008   0xE5904000         LDR      R4,[R0, #+0]
    232          
    233          	non_secure_it_init();
   \   0000000C   0x........         BL       non_secure_it_init
    234          
    235          	if(!(*pAicFuse)) {
   \   00000010   0xE5940000         LDR      R0,[R4, #+0]
   \   00000014   0xE3500000         CMP      R0,#+0
   \   00000018   0x1A000000         BNE      ??__low_level_init_0
    236          		secure_it_init();
   \   0000001C   0x........         BL       secure_it_init
    237          	}
    238          
    239          	/* clock configure */
    240          	if ((uint32_t)low_level_init < DDR_CS_ADDR) /* Code not in external mem */ {
   \                     ??__low_level_init_0:
   \   00000020   0x........         LDR      R0,??DataTable4_1
   \   00000024   0xE3500580         CMP      R0,#+536870912
   \   00000028   0x2A00000B         BCS      ??__low_level_init_1
    241          		pmc_select_external_osc();
   \   0000002C   0x........         BL       pmc_select_external_osc
    242          		pmc_switch_mck_to_main();
   \   00000030   0x........         BL       pmc_switch_mck_to_main
    243          		pmc_set_plla( CKGR_PLLAR_ONE |
    244          			      CKGR_PLLAR_PLLACOUNT(0x3F) |
    245          			      CKGR_PLLAR_OUTA(0x0) |
    246          			      CKGR_PLLAR_MULA(87) |
    247          			      1,
    248          			      PMC_PLLICPR_IPLL_PLLA(0x0));
   \   00000034   0xE3A01000         MOV      R1,#+0
   \   00000038   0x........         LDR      R0,??DataTable4_2  ;; 0x215c3f01
   \   0000003C   0x........         BL       pmc_set_plla
    249          
    250          		pmc_set_mck_plla_div(PMC_MCKR_PLLADIV2);
   \   00000040   0xE3A00D40         MOV      R0,#+4096
   \   00000044   0x........         BL       pmc_set_mck_plla_div
    251          		pmc_set_mck_prescaler(PMC_MCKR_PRES_CLOCK);
   \   00000048   0xE3A00000         MOV      R0,#+0
   \   0000004C   0x........         BL       pmc_set_mck_prescaler
    252          		pmc_set_mck_divider(PMC_MCKR_MDIV_PCK_DIV3);
   \   00000050   0xE3A00FC0         MOV      R0,#+768
   \   00000054   0x........         BL       pmc_set_mck_divider
    253          		pmc_switch_mck_to_pll();
   \   00000058   0x........         BL       pmc_switch_mck_to_pll
    254          	}
    255          	/* Remap */
    256          	board_remap_ram();
   \                     ??__low_level_init_1:
   \   0000005C   0x........         BL       board_remap_ram
    257          }
   \   00000060   0xE8BD8010         POP      {R4,PC}          ;; return
    258          
    259          /**
    260           * \brief Default spurious interrupt handler.
    261           * Infinite loop.
    262           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    263          void default_spurious_handler(void)
    264          {
    265          	while (1);
   \                     default_spurious_handler:
   \                     ??default_spurious_handler_0:
   \   00000000   0xEAFFFFFE         B        ??default_spurious_handler_0
    266          }
    267          
    268          /**
    269           * \brief Abort c handler.
    270           * Infinite loop.
    271           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    272          void abort_c_handler(void)
    273          {
   \                     abort_c_handler:
   \   00000000   0xE92D4070         PUSH     {R4-R6,LR}
    274          	uint32_t v1,v2, dfsr;
    275          	v1= 0;
   \   00000004   0xE3A00000         MOV      R0,#+0
   \   00000008   0xE1B04000         MOVS     R4,R0
    276          	v2= 0;
   \   0000000C   0xE3A00000         MOV      R0,#+0
   \   00000010   0xE1B05000         MOVS     R5,R0
    277          	asm("mrc   p15, 0, %0, c5, c0, 0" : : "r"(v1));
   \   00000014   0xEE154F10         mrc   p15, 0, R4, c5, c0, 0
    278          	asm("mrc   p15, 0, %0, c6, c0, 0" : : "r"(v2));
   \   00000018   0xEE165F10         mrc   p15, 0, R5, c6, c0, 0
    279          
    280          	dfsr = ((v1 >> 4) & 0x0F);
   \   0000001C   0xE7E30254         UBFX     R0,R4,#+4,#+4
   \   00000020   0xE1B06000         MOVS     R6,R0
    281          	printf("\n\r######################################################################\n\r");
   \   00000024   0x........         LDR      R0,??DataTable4_3
   \   00000028   0x........         BL       printf
    282          	printf("Data Abort occured in %x domain\n\r", (uint32_t)dfsr);
   \   0000002C   0xE1B01006         MOVS     R1,R6
   \   00000030   0x........         LDR      R0,??DataTable4_4
   \   00000034   0x........         BL       printf
    283          	dfsr = (((v1 & 0x400) >> 6) | (v1 & 0x0F));
   \   00000038   0xE3A00010         MOV      R0,#+16
   \   0000003C   0xE0100324         ANDS     R0,R0,R4, LSR #+6
   \   00000040   0xE214100F         ANDS     R1,R4,#0xF
   \   00000044   0xE1910000         ORRS     R0,R1,R0
   \   00000048   0xE1B06000         MOVS     R6,R0
    284          	printf("Data abort fault reason is: %s\n\r", (char*)abort_status[dfsr][1]);
   \   0000004C   0x........         LDR      R0,??DataTable4_5
   \   00000050   0xE1B01186         LSLS     R1,R6,#+3
   \   00000054   0xE0910000         ADDS     R0,R1,R0
   \   00000058   0xE5901004         LDR      R1,[R0, #+4]
   \   0000005C   0x........         LDR      R0,??DataTable4_6
   \   00000060   0x........         BL       printf
    285          	printf("Data fault occured at Address = 0x%08x\n\n\r",(uint32_t)v2);
   \   00000064   0xE1B01005         MOVS     R1,R5
   \   00000068   0x........         LDR      R0,??DataTable4_7
   \   0000006C   0x........         BL       printf
    286          	printf("-[Info]-Data fault status register value = 0x%x\n\r",(uint32_t)v1);
   \   00000070   0xE1B01004         MOVS     R1,R4
   \   00000074   0x........         LDR      R0,??DataTable5
   \   00000078   0x........         BL       printf
    287          	while(1);
   \                     ??abort_c_handler_0:
   \   0000007C   0xEAFFFFFE         B        ??abort_c_handler_0
    288          }
    289          
    290          /**
    291           * \brief Prefetch c handler.
    292           * Infinite loop.
    293           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    294          void prefetch_c_handler(void)
    295          {
   \                     prefetch_c_handler:
   \   00000000   0xE92D4070         PUSH     {R4-R6,LR}
    296          	uint32_t v1,v2, ifsr;
    297          	v1= 0;
   \   00000004   0xE3A00000         MOV      R0,#+0
   \   00000008   0xE1B04000         MOVS     R4,R0
    298          	v2= 0;
   \   0000000C   0xE3A00000         MOV      R0,#+0
   \   00000010   0xE1B05000         MOVS     R5,R0
    299          
    300          	asm("mrc   p15, 0, %0, c5, c0, 1" : : "r"(v1));
   \   00000014   0xEE154F30         mrc   p15, 0, R4, c5, c0, 1
    301          	asm("mrc   p15, 0, %0, c6, c0, 2" : : "r"(v2));
   \   00000018   0xEE165F50         mrc   p15, 0, R5, c6, c0, 2
    302          
    303          	ifsr = (((v1 & 0x400) >> 6) | (v1 & 0x0F));
   \   0000001C   0xE3A00010         MOV      R0,#+16
   \   00000020   0xE0100324         ANDS     R0,R0,R4, LSR #+6
   \   00000024   0xE214100F         ANDS     R1,R4,#0xF
   \   00000028   0xE1910000         ORRS     R0,R1,R0
   \   0000002C   0xE1B06000         MOVS     R6,R0
    304          	printf("\n\r######################################################################\n\r");
   \   00000030   0x........         LDR      R0,??DataTable4_3
   \   00000034   0x........         BL       printf
    305          	printf("Instruction prefetch abort reason is: %s\n\r", (char*)abort_status[ifsr][0]);
   \   00000038   0x........         LDR      R0,??DataTable4_5
   \   0000003C   0xE1B01186         LSLS     R1,R6,#+3
   \   00000040   0xE7911000         LDR      R1,[R1, +R0]
   \   00000044   0x........         LDR      R0,??DataTable4_8
   \   00000048   0x........         BL       printf
    306          	printf("Instruction prefetch Fault occured at Address = 0x%08x\n\n\r",(uint32_t)v2);
   \   0000004C   0xE1B01005         MOVS     R1,R5
   \   00000050   0x........         LDR      R0,??DataTable4_9
   \   00000054   0x........         BL       printf
    307          	printf("-[INFO]- Prefetch Fault status register value by = 0x%x\n\r",(uint32_t)v1);
   \   00000058   0xE1B01004         MOVS     R1,R4
   \   0000005C   0x........         LDR      R0,??DataTable5_1
   \   00000060   0x........         BL       printf
    308          	while(1);
   \                     ??prefetch_c_handler_0:
   \   00000064   0xEAFFFFFE         B        ??prefetch_c_handler_0
    309          }
    310          
    311          /**
    312           * \brief Undefined c handler.
    313           * Infinite loop.
    314           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    315          void undefined_c_Handler(void)
    316          {
   \                     undefined_c_Handler:
   \   00000000   0xE92D5000         PUSH     {R12,LR}
    317          	printf("Undefined abort \n\r");
   \   00000004   0x........         LDR      R0,??DataTable5_2
   \   00000008   0x........         BL       printf
    318          	while(1);
   \                     ??undefined_c_Handler_0:
   \   0000000C   0xEAFFFFFE         B        ??undefined_c_Handler_0
    319          }
    320          
    321          /**
    322           * \brief dummy default handler.
    323           */
    324          void dummy_handler(void)
    325          {
    326          	while(1) ;
    327          }
    328          
    329          //------------------------------------------------------------------------------
    330          //------------------------------------------------------------------------------
    331          
    332          #pragma weak PIT_Handler=dummy_handler              /**<  3 SAMA5D2x Periodic Interval Timer Interrupt (PIT) */
    333          #pragma weak WDT_Handler=dummy_handler              /**<  4 SAMA5D2x Watchdog timer Interrupt (WDT) */
    334          #pragma weak GMAC_Handler=dummy_handler             /**<  5 SAMA5D2x Ethernet MAC (GMAC) */
    335          #pragma weak XDMAC0_Handler=dummy_handler           /**<  6 SAMA5D2x DMA Controller 0 (XDMAC0) */
    336          #pragma weak XDMAC1_Handler=dummy_handler           /**<  7 SAMA5D2x DMA Controller 1 (XDMAC1) */
    337          #pragma weak ICM_Handler=dummy_handler              /**<  8 SAMA5D2x Integritry Check Monitor (ICM) */
    338          #pragma weak AES_Handler=dummy_handler              /**<  9 SAMA5D2x Advanced Enion Standard (AES) */
    339          #pragma weak AESB_Handler=dummy_handler             /**< 10 SAMA5D2x AES bridge (AESB) */
    340          #pragma weak TDES_Handler=dummy_handler             /**< 11 SAMA5D2x Triple Data Enion Standard (TDES) */
    341          #pragma weak SHA_Handler=dummy_handler              /**< 12 SAMA5D2x SHA Signature (SHA) */
    342          #pragma weak MPDDRC_Handler=dummy_handler           /**< 13 SAMA5D2x MPDDR controller (MPDDRC) */
    343          #pragma weak MATRIX1_Handler=dummy_handler          /**< 14 SAMA5D2x H32MX, 32-bit AHB Matrix (MATRIX1) */
    344          #pragma weak MATRIX0_Handler=dummy_handler          /**< 15 SAMA5D2x H64MX, 64-bit AHB Matrix (MATRIX0) */
    345          #pragma weak HSMC_Handler=dummy_handler             /**< 17 SAMA5D2x Multi-bit ECC Interrupt (HSMC) */
    346          #pragma weak PIOA_Handler=dummy_handler             /**< 18 SAMA5D2x Parallel I/O Controller (PIOA) */
    347          #pragma weak FLEXCOM0_Handler=dummy_handler         /**< 19 SAMA5D2x FLEXCOM 0 (FLEXCOM0) */
    348          #pragma weak FLEXCOM1_Handler=dummy_handler         /**< 20 SAMA5D2x FLEXCOM 1 (FLEXCOM1) */
    349          #pragma weak FLEXCOM2_Handler=dummy_handler         /**< 21 SAMA5D2x FLEXCOM 2 (FLEXCOM2) */
    350          #pragma weak FLEXCOM3_Handler=dummy_handler         /**< 22 SAMA5D2x FLEXCOM 3 (FLEXCOM3) */
    351          #pragma weak FLEXCOM4_Handler=dummy_handler         /**< 23 SAMA5D2x FLEXCOM 4 (FLEXCOM4) */
    352          #pragma weak UART0_Handler=dummy_handler            /**< 24 SAMA5D2x UART 0 (UART0) */
    353          #pragma weak UART1_Handler=dummy_handler            /**< 25 SAMA5D2x UART 1 (UART1) */
    354          #pragma weak UART2_Handler=dummy_handler            /**< 26 SAMA5D2x UART 2 (UART2) */
    355          #pragma weak UART3_Handler=dummy_handler            /**< 27 SAMA5D2x UART 3 (UART3) */
    356          #pragma weak UART4_Handler=dummy_handler            /**< 28 SAMA5D2x UART 4 (UART4) */
    357          #pragma weak TWIHS0_Handler=dummy_handler           /**< 29 SAMA5D2x Two-Wire Interface 0 (TWIHS0) */
    358          #pragma weak TWIHS1_Handler=dummy_handler           /**< 30 SAMA5D2x Two-Wire Interface 1 (TWIHS1) */
    359          #pragma weak SPI0_Handler=dummy_handler             /**< 33 SAMA5D2x Serial Peripheral Interface 0 (SPI0) */
    360          #pragma weak SPI1_Handler=dummy_handler             /**< 34 SAMA5D2x Serial Peripheral Interface 1 (SPI1) */
    361          #pragma weak TC0_Handler=dummy_handler              /**< 35 SAMA5D2x Timer Counter 0 (ch. 0, 1, 2) (TC0) */
    362          #pragma weak TC1_Handler=dummy_handler              /**< 36 SAMA5D2x Timer Counter 1 (ch. 3, 4, 5) (TC1) */
    363          #pragma weak PWM_Handler=dummy_handler              /**< 38 SAMA5D2x Pulse Width Modulation Controller0 (ch. 0, 1, 2, 3) (PWM) */
    364          #pragma weak ADC_Handler=dummy_handler              /**< 40 SAMA5D2x Touch Screen ADC Controller (ADC) */
    365          #pragma weak UHPHS_Handler=dummy_handler            /**< 41 SAMA5D2x USB Host High Speed (UHPHS) */
    366          #pragma weak UDPHS_Handler=dummy_handler            /**< 42 SAMA5D2x USB Device High Speed (UDPHS) */
    367          #pragma weak SSC0_Handler=dummy_handler             /**< 43 SAMA5D2x Synchronous Serial Controller 0 (SSC0) */
    368          #pragma weak SSC1_Handler=dummy_handler             /**< 44 SAMA5D2x Synchronous Serial Controller 1 (SSC1) */
    369          #pragma weak LCDC_Handler=dummy_handler             /**< 45 SAMA5D2x LCD Controller (LCDC) */
    370          #pragma weak TRNG_Handler=dummy_handler             /**< 47 SAMA5D2x True Random Number Generator (TRNG) */
    371          #pragma weak PDMIC_Handler=dummy_handler            /**< 48 SAMA5D2x Pulse Density Modulation Interface Controller (PDMIC) */
    372          #pragma weak SFC_Handler=dummy_handler              /**< 50 SAMA5D2x Fuse Controller (SFC) */
    373          #pragma weak QSPI0_Handler=dummy_handler            /**< 52 SAMA5D2x QSPI 0 (QSPI0) */
    374          #pragma weak QSPI1_Handler=dummy_handler            /**< 53 SAMA5D2x QSPI 1 (QSPI1) */
    375          #pragma weak I2SC0_Handler=dummy_handler            /**< 54 SAMA5D2x Inter-IC Sound Controller 0 (I2SC0) */
    376          #pragma weak I2SC1_Handler=dummy_handler            /**< 55 SAMA5D2x Inter-IC Sound Controller 1 (I2SC1) */
    377          #pragma weak CLASSD_Handler=dummy_handler           /**< 59 SAMA5D2x Audio Class D amplifier (CLASSD) */
    378          #pragma weak SFR_Handler=dummy_handler              /**< 60 SAMA5D2x Special Function Register  (SFR) */
    379          #pragma weak SAIC_Handler=dummy_handler             /**< 61 SAMA5D2x Secured Advanced Interrupt Controller  (SAIC) */
    380          #pragma weak AIC_Handler=dummy_handler              /**< 62 SAMA5D2x Advanced Interrupt Controller  (AIC) */
    381          #pragma weak L2CC_Handler=dummy_handler             /**< 63 SAMA5D2x L2 Cache Controller (L2CC) */
    382          #pragma weak PIOB_Handler=dummy_handler             /**< 68 SAMA5D2x  (PIOB) */
    383          #pragma weak PIOC_Handler=dummy_handler             /**< 69 SAMA5D2x  (PIOC) */
    384          #pragma weak PIOD_Handler=dummy_handler             /**< 70 SAMA5D2x  (PIOD) */
    385          #pragma weak ACC_Handler=dummy_handler              /**< 75 SAMA5D2x Analog Comparator (ACC) */
    386          #pragma weak RXLP_Handler=dummy_handler             /**< 76 SAMA5D2x Uart Low Power (RXLP) */
    387          #pragma weak CHIPID_Handler=dummy_handler           /**< 78 SAMA5D2x Chip ID (CHIPID) */
    388          
    389          #pragma weak Spurious_handler=dummy_handler
    390          
    391          //------------------------------------------------------------------------------
    392          //------------------------------------------------------------------------------
    393          
    394          /**
    395           * \brief Non-secure Interupt Init.
    396           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    397          void non_secure_it_init(void)
    398          {
   \                     non_secure_it_init:
   \   00000000   0xE92D4010         PUSH     {R4,LR}
    399          	uint32_t i;
    400          
    401          	/* Assign handler addesses */
    402          	AIC->AIC_SSR =  3; AIC->AIC_SVR = (uint32_t) PIT_Handler;              /**<  3 SAMA5D2x Periodic Interval Timer Interrupt (PIT) */
   \   00000004   0xE3A00003         MOV      R0,#+3
   \   00000008   0xE3A014FC         MOV      R1,#-67108864
   \   0000000C   0xE3811B80         ORR      R1,R1,#0x20000
   \   00000010   0xE5810000         STR      R0,[R1, #+0]
   \   00000014   0x........         LDR      R0,??DataTable4_10
   \   00000018   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   0000001C   0xE5810000         STR      R0,[R1, #+0]
    403          	AIC->AIC_SSR =  4; AIC->AIC_SVR = (uint32_t) WDT_Handler;              /**<  4 SAMA5D2x Watchdog timer Interrupt (WDT) */
   \   00000020   0xE3A00004         MOV      R0,#+4
   \   00000024   0xE3A014FC         MOV      R1,#-67108864
   \   00000028   0xE3811B80         ORR      R1,R1,#0x20000
   \   0000002C   0xE5810000         STR      R0,[R1, #+0]
   \   00000030   0x........         LDR      R0,??DataTable4_12
   \   00000034   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   00000038   0xE5810000         STR      R0,[R1, #+0]
    404          	AIC->AIC_SSR =  5; AIC->AIC_SVR = (uint32_t) GMAC_Handler;             /**<  5 SAMA5D2x Ethernet MAC (GMAC) */
   \   0000003C   0xE3A00005         MOV      R0,#+5
   \   00000040   0xE3A014FC         MOV      R1,#-67108864
   \   00000044   0xE3811B80         ORR      R1,R1,#0x20000
   \   00000048   0xE5810000         STR      R0,[R1, #+0]
   \   0000004C   0x........         LDR      R0,??DataTable4_13
   \   00000050   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   00000054   0xE5810000         STR      R0,[R1, #+0]
    405          	AIC->AIC_SSR =  6; AIC->AIC_SVR = (uint32_t) XDMAC0_Handler;           /**<  6 SAMA5D2x DMA Controller 0 (XDMAC0) */
   \   00000058   0xE3A00006         MOV      R0,#+6
   \   0000005C   0xE3A014FC         MOV      R1,#-67108864
   \   00000060   0xE3811B80         ORR      R1,R1,#0x20000
   \   00000064   0xE5810000         STR      R0,[R1, #+0]
   \   00000068   0x........         LDR      R0,??DataTable4_14
   \   0000006C   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   00000070   0xE5810000         STR      R0,[R1, #+0]
    406          	AIC->AIC_SSR =  7; AIC->AIC_SVR = (uint32_t) XDMAC1_Handler;           /**<  7 SAMA5D2x DMA Controller 1 (XDMAC1) */
   \   00000074   0xE3A00007         MOV      R0,#+7
   \   00000078   0xE3A014FC         MOV      R1,#-67108864
   \   0000007C   0xE3811B80         ORR      R1,R1,#0x20000
   \   00000080   0xE5810000         STR      R0,[R1, #+0]
   \   00000084   0x........         LDR      R0,??DataTable4_15
   \   00000088   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   0000008C   0xE5810000         STR      R0,[R1, #+0]
    407          	AIC->AIC_SSR =  8; AIC->AIC_SVR = (uint32_t) ICM_Handler;              /**<  8 SAMA5D2x Integritry Check Monitor (ICM) */
   \   00000090   0xE3A00008         MOV      R0,#+8
   \   00000094   0xE3A014FC         MOV      R1,#-67108864
   \   00000098   0xE3811B80         ORR      R1,R1,#0x20000
   \   0000009C   0xE5810000         STR      R0,[R1, #+0]
   \   000000A0   0x........         LDR      R0,??DataTable4_16
   \   000000A4   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   000000A8   0xE5810000         STR      R0,[R1, #+0]
    408          	AIC->AIC_SSR =  9; AIC->AIC_SVR = (uint32_t) AES_Handler;              /**<  9 SAMA5D2x Advanced Enion Standard (AES) */
   \   000000AC   0xE3A00009         MOV      R0,#+9
   \   000000B0   0xE3A014FC         MOV      R1,#-67108864
   \   000000B4   0xE3811B80         ORR      R1,R1,#0x20000
   \   000000B8   0xE5810000         STR      R0,[R1, #+0]
   \   000000BC   0x........         LDR      R0,??DataTable4_17
   \   000000C0   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   000000C4   0xE5810000         STR      R0,[R1, #+0]
    409          	AIC->AIC_SSR = 10; AIC->AIC_SVR = (uint32_t) AESB_Handler;             /**< 10 SAMA5D2x AES bridge (AESB) */
   \   000000C8   0xE3A0000A         MOV      R0,#+10
   \   000000CC   0xE3A014FC         MOV      R1,#-67108864
   \   000000D0   0xE3811B80         ORR      R1,R1,#0x20000
   \   000000D4   0xE5810000         STR      R0,[R1, #+0]
   \   000000D8   0x........         LDR      R0,??DataTable4_18
   \   000000DC   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   000000E0   0xE5810000         STR      R0,[R1, #+0]
    410          	AIC->AIC_SSR = 11; AIC->AIC_SVR = (uint32_t) TDES_Handler;             /**< 11 SAMA5D2x Triple Data Enion Standard (TDES) */
   \   000000E4   0xE3A0000B         MOV      R0,#+11
   \   000000E8   0xE3A014FC         MOV      R1,#-67108864
   \   000000EC   0xE3811B80         ORR      R1,R1,#0x20000
   \   000000F0   0xE5810000         STR      R0,[R1, #+0]
   \   000000F4   0x........         LDR      R0,??DataTable4_19
   \   000000F8   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   000000FC   0xE5810000         STR      R0,[R1, #+0]
    411          	AIC->AIC_SSR = 12; AIC->AIC_SVR = (uint32_t) SHA_Handler;              /**< 12 SAMA5D2x SHA Signature (SHA) */
   \   00000100   0xE3A0000C         MOV      R0,#+12
   \   00000104   0xE3A014FC         MOV      R1,#-67108864
   \   00000108   0xE3811B80         ORR      R1,R1,#0x20000
   \   0000010C   0xE5810000         STR      R0,[R1, #+0]
   \   00000110   0x........         LDR      R0,??DataTable4_20
   \   00000114   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   00000118   0xE5810000         STR      R0,[R1, #+0]
    412          	AIC->AIC_SSR = 13; AIC->AIC_SVR = (uint32_t) MPDDRC_Handler;           /**< 13 SAMA5D2x MPDDR controller (MPDDRC) */
   \   0000011C   0xE3A0000D         MOV      R0,#+13
   \   00000120   0xE3A014FC         MOV      R1,#-67108864
   \   00000124   0xE3811B80         ORR      R1,R1,#0x20000
   \   00000128   0xE5810000         STR      R0,[R1, #+0]
   \   0000012C   0x........         LDR      R0,??DataTable4_21
   \   00000130   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   00000134   0xE5810000         STR      R0,[R1, #+0]
    413          	AIC->AIC_SSR = 14; AIC->AIC_SVR = (uint32_t) MATRIX1_Handler;          /**< 14 SAMA5D2x H32MX, 32-bit AHB Matrix (MATRIX1) */
   \   00000138   0xE3A0000E         MOV      R0,#+14
   \   0000013C   0xE3A014FC         MOV      R1,#-67108864
   \   00000140   0xE3811B80         ORR      R1,R1,#0x20000
   \   00000144   0xE5810000         STR      R0,[R1, #+0]
   \   00000148   0x........         LDR      R0,??DataTable4_22
   \   0000014C   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   00000150   0xE5810000         STR      R0,[R1, #+0]
    414          	AIC->AIC_SSR = 15; AIC->AIC_SVR = (uint32_t) MATRIX0_Handler;          /**< 15 SAMA5D2x H64MX, 64-bit AHB Matrix (MATRIX0) */
   \   00000154   0xE3A0000F         MOV      R0,#+15
   \   00000158   0xE3A014FC         MOV      R1,#-67108864
   \   0000015C   0xE3811B80         ORR      R1,R1,#0x20000
   \   00000160   0xE5810000         STR      R0,[R1, #+0]
   \   00000164   0x........         LDR      R0,??DataTable4_23
   \   00000168   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   0000016C   0xE5810000         STR      R0,[R1, #+0]
    415          	AIC->AIC_SSR = 17; AIC->AIC_SVR = (uint32_t) HSMC_Handler;             /**< 17 SAMA5D2x Multi-bit ECC Interrupt (HSMC) */
   \   00000170   0xE3A00011         MOV      R0,#+17
   \   00000174   0xE3A014FC         MOV      R1,#-67108864
   \   00000178   0xE3811B80         ORR      R1,R1,#0x20000
   \   0000017C   0xE5810000         STR      R0,[R1, #+0]
   \   00000180   0x........         LDR      R0,??DataTable4_24
   \   00000184   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   00000188   0xE5810000         STR      R0,[R1, #+0]
    416          	AIC->AIC_SSR = 18; AIC->AIC_SVR = (uint32_t) PIOA_Handler;             /**< 18 SAMA5D2x Parallel I/O Controller (PIOA) */
   \   0000018C   0xE3A00012         MOV      R0,#+18
   \   00000190   0xE3A014FC         MOV      R1,#-67108864
   \   00000194   0xE3811B80         ORR      R1,R1,#0x20000
   \   00000198   0xE5810000         STR      R0,[R1, #+0]
   \   0000019C   0x........         LDR      R0,??DataTable4_25
   \   000001A0   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   000001A4   0xE5810000         STR      R0,[R1, #+0]
    417          	AIC->AIC_SSR = 19; AIC->AIC_SVR = (uint32_t) FLEXCOM0_Handler;         /**< 19 SAMA5D2x FLEXCOM 0 (FLEXCOM0) */
   \   000001A8   0xE3A00013         MOV      R0,#+19
   \   000001AC   0xE3A014FC         MOV      R1,#-67108864
   \   000001B0   0xE3811B80         ORR      R1,R1,#0x20000
   \   000001B4   0xE5810000         STR      R0,[R1, #+0]
   \   000001B8   0x........         LDR      R0,??DataTable5_3
   \   000001BC   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   000001C0   0xE5810000         STR      R0,[R1, #+0]
    418          	AIC->AIC_SSR = 20; AIC->AIC_SVR = (uint32_t) FLEXCOM1_Handler;         /**< 20 SAMA5D2x FLEXCOM 1 (FLEXCOM1) */
   \   000001C4   0xE3A00014         MOV      R0,#+20
   \   000001C8   0xE3A014FC         MOV      R1,#-67108864
   \   000001CC   0xE3811B80         ORR      R1,R1,#0x20000
   \   000001D0   0xE5810000         STR      R0,[R1, #+0]
   \   000001D4   0x........         LDR      R0,??DataTable5_4
   \   000001D8   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   000001DC   0xE5810000         STR      R0,[R1, #+0]
    419          	AIC->AIC_SSR = 21; AIC->AIC_SVR = (uint32_t) FLEXCOM2_Handler;         /**< 21 SAMA5D2x FLEXCOM 2 (FLEXCOM2) */
   \   000001E0   0xE3A00015         MOV      R0,#+21
   \   000001E4   0xE3A014FC         MOV      R1,#-67108864
   \   000001E8   0xE3811B80         ORR      R1,R1,#0x20000
   \   000001EC   0xE5810000         STR      R0,[R1, #+0]
   \   000001F0   0x........         LDR      R0,??DataTable5_5
   \   000001F4   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   000001F8   0xE5810000         STR      R0,[R1, #+0]
    420          	AIC->AIC_SSR = 22; AIC->AIC_SVR = (uint32_t) FLEXCOM3_Handler;         /**< 22 SAMA5D2x FLEXCOM 3 (FLEXCOM3) */
   \   000001FC   0xE3A00016         MOV      R0,#+22
   \   00000200   0xE3A014FC         MOV      R1,#-67108864
   \   00000204   0xE3811B80         ORR      R1,R1,#0x20000
   \   00000208   0xE5810000         STR      R0,[R1, #+0]
   \   0000020C   0x........         LDR      R0,??DataTable5_6
   \   00000210   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   00000214   0xE5810000         STR      R0,[R1, #+0]
    421          	AIC->AIC_SSR = 23; AIC->AIC_SVR = (uint32_t) FLEXCOM4_Handler;         /**< 23 SAMA5D2x FLEXCOM 4 (FLEXCOM4) */
   \   00000218   0xE3A00017         MOV      R0,#+23
   \   0000021C   0xE3A014FC         MOV      R1,#-67108864
   \   00000220   0xE3811B80         ORR      R1,R1,#0x20000
   \   00000224   0xE5810000         STR      R0,[R1, #+0]
   \   00000228   0x........         LDR      R0,??DataTable5_7
   \   0000022C   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   00000230   0xE5810000         STR      R0,[R1, #+0]
    422          	AIC->AIC_SSR = 24; AIC->AIC_SVR = (uint32_t) UART0_Handler;            /**< 24 SAMA5D2x UART 0 (UART0) */
   \   00000234   0xE3A00018         MOV      R0,#+24
   \   00000238   0xE3A014FC         MOV      R1,#-67108864
   \   0000023C   0xE3811B80         ORR      R1,R1,#0x20000
   \   00000240   0xE5810000         STR      R0,[R1, #+0]
   \   00000244   0x........         LDR      R0,??DataTable5_8
   \   00000248   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   0000024C   0xE5810000         STR      R0,[R1, #+0]
    423          	AIC->AIC_SSR = 25; AIC->AIC_SVR = (uint32_t) UART1_Handler;            /**< 25 SAMA5D2x UART 1 (UART1) */
   \   00000250   0xE3A00019         MOV      R0,#+25
   \   00000254   0xE3A014FC         MOV      R1,#-67108864
   \   00000258   0xE3811B80         ORR      R1,R1,#0x20000
   \   0000025C   0xE5810000         STR      R0,[R1, #+0]
   \   00000260   0x........         LDR      R0,??DataTable5_9
   \   00000264   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   00000268   0xE5810000         STR      R0,[R1, #+0]
    424          	AIC->AIC_SSR = 26; AIC->AIC_SVR = (uint32_t) UART2_Handler;            /**< 26 SAMA5D2x UART 2 (UART2) */
   \   0000026C   0xE3A0001A         MOV      R0,#+26
   \   00000270   0xE3A014FC         MOV      R1,#-67108864
   \   00000274   0xE3811B80         ORR      R1,R1,#0x20000
   \   00000278   0xE5810000         STR      R0,[R1, #+0]
   \   0000027C   0x........         LDR      R0,??DataTable5_10
   \   00000280   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   00000284   0xE5810000         STR      R0,[R1, #+0]
    425          	AIC->AIC_SSR = 27; AIC->AIC_SVR = (uint32_t) UART3_Handler;            /**< 27 SAMA5D2x UART 3 (UART3) */
   \   00000288   0xE3A0001B         MOV      R0,#+27
   \   0000028C   0xE3A014FC         MOV      R1,#-67108864
   \   00000290   0xE3811B80         ORR      R1,R1,#0x20000
   \   00000294   0xE5810000         STR      R0,[R1, #+0]
   \   00000298   0x........         LDR      R0,??DataTable5_11
   \   0000029C   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   000002A0   0xE5810000         STR      R0,[R1, #+0]
    426          	AIC->AIC_SSR = 28; AIC->AIC_SVR = (uint32_t) UART4_Handler;            /**< 28 SAMA5D2x UART 4 (UART4) */
   \   000002A4   0xE3A0001C         MOV      R0,#+28
   \   000002A8   0xE3A014FC         MOV      R1,#-67108864
   \   000002AC   0xE3811B80         ORR      R1,R1,#0x20000
   \   000002B0   0xE5810000         STR      R0,[R1, #+0]
   \   000002B4   0x........         LDR      R0,??DataTable5_12
   \   000002B8   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   000002BC   0xE5810000         STR      R0,[R1, #+0]
    427          	AIC->AIC_SSR = 29; AIC->AIC_SVR = (uint32_t) TWIHS0_Handler;           /**< 29 SAMA5D2x Two-Wire Interface 0 (TWIHS0) */
   \   000002C0   0xE3A0001D         MOV      R0,#+29
   \   000002C4   0xE3A014FC         MOV      R1,#-67108864
   \   000002C8   0xE3811B80         ORR      R1,R1,#0x20000
   \   000002CC   0xE5810000         STR      R0,[R1, #+0]
   \   000002D0   0x........         LDR      R0,??DataTable5_13
   \   000002D4   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   000002D8   0xE5810000         STR      R0,[R1, #+0]
    428          	AIC->AIC_SSR = 30; AIC->AIC_SVR = (uint32_t) TWIHS1_Handler;           /**< 30 SAMA5D2x Two-Wire Interface 1 (TWIHS1) */
   \   000002DC   0xE3A0001E         MOV      R0,#+30
   \   000002E0   0xE3A014FC         MOV      R1,#-67108864
   \   000002E4   0xE3811B80         ORR      R1,R1,#0x20000
   \   000002E8   0xE5810000         STR      R0,[R1, #+0]
   \   000002EC   0x........         LDR      R0,??DataTable5_14
   \   000002F0   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   000002F4   0xE5810000         STR      R0,[R1, #+0]
    429          	AIC->AIC_SSR = 33; AIC->AIC_SVR = (uint32_t) SPI0_Handler;             /**< 33 SAMA5D2x Serial Peripheral Interface 0 (SPI0) */
   \   000002F8   0xE3A00021         MOV      R0,#+33
   \   000002FC   0xE3A014FC         MOV      R1,#-67108864
   \   00000300   0xE3811B80         ORR      R1,R1,#0x20000
   \   00000304   0xE5810000         STR      R0,[R1, #+0]
   \   00000308   0x........         LDR      R0,??DataTable5_15
   \   0000030C   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   00000310   0xE5810000         STR      R0,[R1, #+0]
    430          	AIC->AIC_SSR = 34; AIC->AIC_SVR = (uint32_t) SPI1_Handler;             /**< 34 SAMA5D2x Serial Peripheral Interface 1 (SPI1) */
   \   00000314   0xE3A00022         MOV      R0,#+34
   \   00000318   0xE3A014FC         MOV      R1,#-67108864
   \   0000031C   0xE3811B80         ORR      R1,R1,#0x20000
   \   00000320   0xE5810000         STR      R0,[R1, #+0]
   \   00000324   0x........         LDR      R0,??DataTable5_16
   \   00000328   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   0000032C   0xE5810000         STR      R0,[R1, #+0]
    431          	AIC->AIC_SSR = 35; AIC->AIC_SVR = (uint32_t) TC0_Handler;              /**< 35 SAMA5D2x Timer Counter 0 (ch. 0, 1, 2) (TC0) */
   \   00000330   0xE3A00023         MOV      R0,#+35
   \   00000334   0xE3A014FC         MOV      R1,#-67108864
   \   00000338   0xE3811B80         ORR      R1,R1,#0x20000
   \   0000033C   0xE5810000         STR      R0,[R1, #+0]
   \   00000340   0x........         LDR      R0,??DataTable5_17
   \   00000344   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   00000348   0xE5810000         STR      R0,[R1, #+0]
    432          	AIC->AIC_SSR = 36; AIC->AIC_SVR = (uint32_t) TC1_Handler;              /**< 36 SAMA5D2x Timer Counter 1 (ch. 3, 4, 5) (TC1) */
   \   0000034C   0xE3A00024         MOV      R0,#+36
   \   00000350   0xE3A014FC         MOV      R1,#-67108864
   \   00000354   0xE3811B80         ORR      R1,R1,#0x20000
   \   00000358   0xE5810000         STR      R0,[R1, #+0]
   \   0000035C   0x........         LDR      R0,??DataTable5_18
   \   00000360   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   00000364   0xE5810000         STR      R0,[R1, #+0]
    433          	AIC->AIC_SSR = 38; AIC->AIC_SVR = (uint32_t) PWM_Handler;              /**< 38 SAMA5D2x Pulse Width Modulation Controller0 (ch. 0, 1, 2, 3) (PWM) */
   \   00000368   0xE3A00026         MOV      R0,#+38
   \   0000036C   0xE3A014FC         MOV      R1,#-67108864
   \   00000370   0xE3811B80         ORR      R1,R1,#0x20000
   \   00000374   0xE5810000         STR      R0,[R1, #+0]
   \   00000378   0x........         LDR      R0,??DataTable5_19
   \   0000037C   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   00000380   0xE5810000         STR      R0,[R1, #+0]
    434          	AIC->AIC_SSR = 40; AIC->AIC_SVR = (uint32_t) ADC_Handler;              /**< 40 SAMA5D2x Touch Screen ADC Controller (ADC) */
   \   00000384   0xE3A00028         MOV      R0,#+40
   \   00000388   0xE3A014FC         MOV      R1,#-67108864
   \   0000038C   0xE3811B80         ORR      R1,R1,#0x20000
   \   00000390   0xE5810000         STR      R0,[R1, #+0]
   \   00000394   0x........         LDR      R0,??DataTable5_20
   \   00000398   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   0000039C   0xE5810000         STR      R0,[R1, #+0]
    435          	AIC->AIC_SSR = 41; AIC->AIC_SVR = (uint32_t) UHPHS_Handler;            /**< 41 SAMA5D2x USB Host High Speed (UHPHS) */
   \   000003A0   0xE3A00029         MOV      R0,#+41
   \   000003A4   0xE3A014FC         MOV      R1,#-67108864
   \   000003A8   0xE3811B80         ORR      R1,R1,#0x20000
   \   000003AC   0xE5810000         STR      R0,[R1, #+0]
   \   000003B0   0x........         LDR      R0,??DataTable5_21
   \   000003B4   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   000003B8   0xE5810000         STR      R0,[R1, #+0]
    436          	AIC->AIC_SSR = 42; AIC->AIC_SVR = (uint32_t) UDPHS_Handler;            /**< 42 SAMA5D2x USB Device High Speed (UDPHS) */
   \   000003BC   0xE3A0002A         MOV      R0,#+42
   \   000003C0   0xE3A014FC         MOV      R1,#-67108864
   \   000003C4   0xE3811B80         ORR      R1,R1,#0x20000
   \   000003C8   0xE5810000         STR      R0,[R1, #+0]
   \   000003CC   0x........         LDR      R0,??DataTable5_22
   \   000003D0   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   000003D4   0xE5810000         STR      R0,[R1, #+0]
    437          	AIC->AIC_SSR = 43; AIC->AIC_SVR = (uint32_t) SSC0_Handler;             /**< 43 SAMA5D2x Synchronous Serial Controller 0 (SSC0) */
   \   000003D8   0xE3A0002B         MOV      R0,#+43
   \   000003DC   0xE3A014FC         MOV      R1,#-67108864
   \   000003E0   0xE3811B80         ORR      R1,R1,#0x20000
   \   000003E4   0xE5810000         STR      R0,[R1, #+0]
   \   000003E8   0x........         LDR      R0,??DataTable5_23
   \   000003EC   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   000003F0   0xE5810000         STR      R0,[R1, #+0]
    438          	AIC->AIC_SSR = 44; AIC->AIC_SVR = (uint32_t) SSC1_Handler;             /**< 44 SAMA5D2x Synchronous Serial Controller 1 (SSC1) */
   \   000003F4   0xE3A0002C         MOV      R0,#+44
   \   000003F8   0xE3A014FC         MOV      R1,#-67108864
   \   000003FC   0xE3811B80         ORR      R1,R1,#0x20000
   \   00000400   0xE5810000         STR      R0,[R1, #+0]
   \   00000404   0x........         LDR      R0,??DataTable5_24
   \   00000408   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   0000040C   0xE5810000         STR      R0,[R1, #+0]
    439          	AIC->AIC_SSR = 45; AIC->AIC_SVR = (uint32_t) LCDC_Handler;             /**< 45 SAMA5D2x LCD Controller (LCDC) */
   \   00000410   0xE3A0002D         MOV      R0,#+45
   \   00000414   0xE3A014FC         MOV      R1,#-67108864
   \   00000418   0xE3811B80         ORR      R1,R1,#0x20000
   \   0000041C   0xE5810000         STR      R0,[R1, #+0]
   \   00000420   0x........         LDR      R0,??DataTable5_25
   \   00000424   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   00000428   0xE5810000         STR      R0,[R1, #+0]
    440          	AIC->AIC_SSR = 47; AIC->AIC_SVR = (uint32_t) TRNG_Handler;             /**< 47 SAMA5D2x True Random Number Generator (TRNG) */
   \   0000042C   0xE3A0002F         MOV      R0,#+47
   \   00000430   0xE3A014FC         MOV      R1,#-67108864
   \   00000434   0xE3811B80         ORR      R1,R1,#0x20000
   \   00000438   0xE5810000         STR      R0,[R1, #+0]
   \   0000043C   0x........         LDR      R0,??DataTable5_26
   \   00000440   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   00000444   0xE5810000         STR      R0,[R1, #+0]
    441          	AIC->AIC_SSR = 48; AIC->AIC_SVR = (uint32_t) PDMIC_Handler;            /**< 48 SAMA5D2x Pulse Density Modulation Interface Controller (PDMIC) */
   \   00000448   0xE3A00030         MOV      R0,#+48
   \   0000044C   0xE3A014FC         MOV      R1,#-67108864
   \   00000450   0xE3811B80         ORR      R1,R1,#0x20000
   \   00000454   0xE5810000         STR      R0,[R1, #+0]
   \   00000458   0x........         LDR      R0,??DataTable5_27
   \   0000045C   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   00000460   0xE5810000         STR      R0,[R1, #+0]
    442          	AIC->AIC_SSR = 50; AIC->AIC_SVR = (uint32_t) SFC_Handler;              /**< 50 SAMA5D2x Fuse Controller (SFC) */
   \   00000464   0xE3A00032         MOV      R0,#+50
   \   00000468   0xE3A014FC         MOV      R1,#-67108864
   \   0000046C   0xE3811B80         ORR      R1,R1,#0x20000
   \   00000470   0xE5810000         STR      R0,[R1, #+0]
   \   00000474   0x........         LDR      R0,??DataTable5_28
   \   00000478   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   0000047C   0xE5810000         STR      R0,[R1, #+0]
    443          	AIC->AIC_SSR = 52; AIC->AIC_SVR = (uint32_t) QSPI0_Handler;            /**< 52 SAMA5D2x QSPI 0 (QSPI0) */
   \   00000480   0xE3A00034         MOV      R0,#+52
   \   00000484   0xE3A014FC         MOV      R1,#-67108864
   \   00000488   0xE3811B80         ORR      R1,R1,#0x20000
   \   0000048C   0xE5810000         STR      R0,[R1, #+0]
   \   00000490   0x........         LDR      R0,??DataTable5_29
   \   00000494   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   00000498   0xE5810000         STR      R0,[R1, #+0]
    444          	AIC->AIC_SSR = 53; AIC->AIC_SVR = (uint32_t) QSPI1_Handler;            /**< 53 SAMA5D2x QSPI 1 (QSPI1) */
   \   0000049C   0xE3A00035         MOV      R0,#+53
   \   000004A0   0xE3A014FC         MOV      R1,#-67108864
   \   000004A4   0xE3811B80         ORR      R1,R1,#0x20000
   \   000004A8   0xE5810000         STR      R0,[R1, #+0]
   \   000004AC   0x........         LDR      R0,??DataTable5_30
   \   000004B0   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   000004B4   0xE5810000         STR      R0,[R1, #+0]
    445          	AIC->AIC_SSR = 54; AIC->AIC_SVR = (uint32_t) I2SC0_Handler;            /**< 54 SAMA5D2x Inter-IC Sound Controller 0 (I2SC0) */
   \   000004B8   0xE3A00036         MOV      R0,#+54
   \   000004BC   0xE3A014FC         MOV      R1,#-67108864
   \   000004C0   0xE3811B80         ORR      R1,R1,#0x20000
   \   000004C4   0xE5810000         STR      R0,[R1, #+0]
   \   000004C8   0x........         LDR      R0,??DataTable5_31
   \   000004CC   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   000004D0   0xE5810000         STR      R0,[R1, #+0]
    446          	AIC->AIC_SSR = 55; AIC->AIC_SVR = (uint32_t) I2SC1_Handler;            /**< 55 SAMA5D2x Inter-IC Sound Controller 1 (I2SC1) */
   \   000004D4   0xE3A00037         MOV      R0,#+55
   \   000004D8   0xE3A014FC         MOV      R1,#-67108864
   \   000004DC   0xE3811B80         ORR      R1,R1,#0x20000
   \   000004E0   0xE5810000         STR      R0,[R1, #+0]
   \   000004E4   0x........         LDR      R0,??DataTable5_32
   \   000004E8   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   000004EC   0xE5810000         STR      R0,[R1, #+0]
    447          	AIC->AIC_SSR = 59; AIC->AIC_SVR = (uint32_t) CLASSD_Handler;           /**< 59 SAMA5D2x Audio Class D amplifier (CLASSD) */
   \   000004F0   0xE3A0003B         MOV      R0,#+59
   \   000004F4   0xE3A014FC         MOV      R1,#-67108864
   \   000004F8   0xE3811B80         ORR      R1,R1,#0x20000
   \   000004FC   0xE5810000         STR      R0,[R1, #+0]
   \   00000500   0x........         LDR      R0,??DataTable5_33
   \   00000504   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   00000508   0xE5810000         STR      R0,[R1, #+0]
    448          	AIC->AIC_SSR = 60; AIC->AIC_SVR = (uint32_t) SFR_Handler;              /**< 60 SAMA5D2x Special Function Register  (SFR) */
   \   0000050C   0xE3A0003C         MOV      R0,#+60
   \   00000510   0xE3A014FC         MOV      R1,#-67108864
   \   00000514   0xE3811B80         ORR      R1,R1,#0x20000
   \   00000518   0xE5810000         STR      R0,[R1, #+0]
   \   0000051C   0x........         LDR      R0,??DataTable5_34
   \   00000520   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   00000524   0xE5810000         STR      R0,[R1, #+0]
    449          	AIC->AIC_SSR = 61; AIC->AIC_SVR = (uint32_t) SAIC_Handler;             /**< 61 SAMA5D2x Secured Advanced Interrupt Controller  (SAIC) */
   \   00000528   0xE3A0003D         MOV      R0,#+61
   \   0000052C   0xE3A014FC         MOV      R1,#-67108864
   \   00000530   0xE3811B80         ORR      R1,R1,#0x20000
   \   00000534   0xE5810000         STR      R0,[R1, #+0]
   \   00000538   0x........         LDR      R0,??DataTable5_35
   \   0000053C   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   00000540   0xE5810000         STR      R0,[R1, #+0]
    450          	AIC->AIC_SSR = 62; AIC->AIC_SVR = (uint32_t) AIC_Handler;              /**< 62 SAMA5D2x Advanced Interrupt Controller  (AIC) */
   \   00000544   0xE3A0003E         MOV      R0,#+62
   \   00000548   0xE3A014FC         MOV      R1,#-67108864
   \   0000054C   0xE3811B80         ORR      R1,R1,#0x20000
   \   00000550   0xE5810000         STR      R0,[R1, #+0]
   \   00000554   0x........         LDR      R0,??DataTable5_36
   \   00000558   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   0000055C   0xE5810000         STR      R0,[R1, #+0]
    451          	AIC->AIC_SSR = 63; AIC->AIC_SVR = (uint32_t) L2CC_Handler;             /**< 63 SAMA5D2x L2 Cache Controller (L2CC) */
   \   00000560   0xE3A0003F         MOV      R0,#+63
   \   00000564   0xE3A014FC         MOV      R1,#-67108864
   \   00000568   0xE3811B80         ORR      R1,R1,#0x20000
   \   0000056C   0xE5810000         STR      R0,[R1, #+0]
   \   00000570   0x........         LDR      R0,??DataTable5_37
   \   00000574   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   00000578   0xE5810000         STR      R0,[R1, #+0]
    452          	AIC->AIC_SSR = 68; AIC->AIC_SVR = (uint32_t) PIOB_Handler;             /**< 68 SAMA5D2x  (PIOB) */
   \   0000057C   0xE3A00044         MOV      R0,#+68
   \   00000580   0xE3A014FC         MOV      R1,#-67108864
   \   00000584   0xE3811B80         ORR      R1,R1,#0x20000
   \   00000588   0xE5810000         STR      R0,[R1, #+0]
   \   0000058C   0x........         LDR      R0,??DataTable5_38
   \   00000590   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   00000594   0xE5810000         STR      R0,[R1, #+0]
    453          	AIC->AIC_SSR = 69; AIC->AIC_SVR = (uint32_t) PIOC_Handler;             /**< 69 SAMA5D2x  (PIOC) */
   \   00000598   0xE3A00045         MOV      R0,#+69
   \   0000059C   0xE3A014FC         MOV      R1,#-67108864
   \   000005A0   0xE3811B80         ORR      R1,R1,#0x20000
   \   000005A4   0xE5810000         STR      R0,[R1, #+0]
   \   000005A8   0x........         LDR      R0,??DataTable5_39
   \   000005AC   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   000005B0   0xE5810000         STR      R0,[R1, #+0]
    454          	AIC->AIC_SSR = 70; AIC->AIC_SVR = (uint32_t) PIOD_Handler;             /**< 70 SAMA5D2x  (PIOD) */
   \   000005B4   0xE3A00046         MOV      R0,#+70
   \   000005B8   0xE3A014FC         MOV      R1,#-67108864
   \   000005BC   0xE3811B80         ORR      R1,R1,#0x20000
   \   000005C0   0xE5810000         STR      R0,[R1, #+0]
   \   000005C4   0x........         LDR      R0,??DataTable5_40
   \   000005C8   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   000005CC   0xE5810000         STR      R0,[R1, #+0]
    455          	AIC->AIC_SSR = 75; AIC->AIC_SVR = (uint32_t) ACC_Handler;              /**< 75 SAMA5D2x Analog Comparator (ACC) */
   \   000005D0   0xE3A0004B         MOV      R0,#+75
   \   000005D4   0xE3A014FC         MOV      R1,#-67108864
   \   000005D8   0xE3811B80         ORR      R1,R1,#0x20000
   \   000005DC   0xE5810000         STR      R0,[R1, #+0]
   \   000005E0   0x........         LDR      R0,??DataTable5_41
   \   000005E4   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   000005E8   0xE5810000         STR      R0,[R1, #+0]
    456          	AIC->AIC_SSR = 76; AIC->AIC_SVR = (uint32_t) RXLP_Handler;             /**< 76 SAMA5D2x Uart Low Power (RXLP) */
   \   000005EC   0xE3A0004C         MOV      R0,#+76
   \   000005F0   0xE3A014FC         MOV      R1,#-67108864
   \   000005F4   0xE3811B80         ORR      R1,R1,#0x20000
   \   000005F8   0xE5810000         STR      R0,[R1, #+0]
   \   000005FC   0x........         LDR      R0,??DataTable5_42
   \   00000600   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   00000604   0xE5810000         STR      R0,[R1, #+0]
    457          	AIC->AIC_SSR = 78; AIC->AIC_SVR = (uint32_t) CHIPID_Handler;           /**< 78 SAMA5D2x Chip ID (CHIPID) */
   \   00000608   0xE3A0004E         MOV      R0,#+78
   \   0000060C   0xE3A014FC         MOV      R1,#-67108864
   \   00000610   0xE3811B80         ORR      R1,R1,#0x20000
   \   00000614   0xE5810000         STR      R0,[R1, #+0]
   \   00000618   0x........         LDR      R0,??DataTable5_43
   \   0000061C   0x........         LDR      R1,??DataTable4_11  ;; 0xfc020008
   \   00000620   0xE5810000         STR      R0,[R1, #+0]
    458          
    459          	AIC->AIC_SPU = (uint32_t)Spurious_handler;
   \   00000624   0x........         LDR      R0,??DataTable5_44
   \   00000628   0x........         LDR      R1,??DataTable5_45  ;; 0xfc02003c
   \   0000062C   0xE5810000         STR      R0,[R1, #+0]
    460          
    461          	/* Disable IRQ and FIQ at core level */
    462          	v_arm_set_cpsr_bits(CPSR_MASK_IRQ|CPSR_MASK_FIQ);
   \   00000630   0xE3A000C0         MOV      R0,#+192
   \   00000634   0x........         BL       v_arm_set_cpsr_bits
    463          
    464          	/* Disable all interrupts */
    465          	for (i = 1; i < ID_PERIPH_COUNT; i++){
   \   00000638   0xE3A00001         MOV      R0,#+1
   \   0000063C   0xE1B04000         MOVS     R4,R0
   \                     ??non_secure_it_init_0:
   \   00000640   0xE354004F         CMP      R4,#+79
   \   00000644   0x2A000007         BCS      ??non_secure_it_init_1
    466          		AIC->AIC_SSR = i;
   \   00000648   0xE3A004FC         MOV      R0,#-67108864
   \   0000064C   0xE3800B80         ORR      R0,R0,#0x20000
   \   00000650   0xE5804000         STR      R4,[R0, #+0]
    467          		AIC->AIC_IDCR = AIC_IDCR_INTD;
   \   00000654   0xE3A00001         MOV      R0,#+1
   \   00000658   0x........         LDR      R1,??DataTable5_46  ;; 0xfc020044
   \   0000065C   0xE5810000         STR      R0,[R1, #+0]
    468          	}
   \   00000660   0xE2944001         ADDS     R4,R4,#+1
   \   00000664   0xEAFFFFF5         B        ??non_secure_it_init_0
    469          	/* Clear All pending interrupts flags */
    470          	for (i = 0; i < ID_PERIPH_COUNT; i++){
   \                     ??non_secure_it_init_1:
   \   00000668   0xE3A00000         MOV      R0,#+0
   \   0000066C   0xE1B04000         MOVS     R4,R0
   \                     ??non_secure_it_init_2:
   \   00000670   0xE354004F         CMP      R4,#+79
   \   00000674   0x2A000007         BCS      ??non_secure_it_init_3
    471          		AIC->AIC_SSR  = i;
   \   00000678   0xE3A004FC         MOV      R0,#-67108864
   \   0000067C   0xE3800B80         ORR      R0,R0,#0x20000
   \   00000680   0xE5804000         STR      R4,[R0, #+0]
    472          		AIC->AIC_ICCR = AIC_ICCR_INTCLR;
   \   00000684   0xE3A00001         MOV      R0,#+1
   \   00000688   0x........         LDR      R1,??DataTable5_47  ;; 0xfc020048
   \   0000068C   0xE5810000         STR      R0,[R1, #+0]
    473          	}
   \   00000690   0xE2944001         ADDS     R4,R4,#+1
   \   00000694   0xEAFFFFF5         B        ??non_secure_it_init_2
    474          	/* /\* Perform 8 IT acknoledge (write any value in EOICR) *\/ */
    475          	for (i = 0; i < 8; i++){
   \                     ??non_secure_it_init_3:
   \   00000698   0xE3A00000         MOV      R0,#+0
   \   0000069C   0xE1B04000         MOVS     R4,R0
   \                     ??non_secure_it_init_4:
   \   000006A0   0xE3540008         CMP      R4,#+8
   \   000006A4   0x2A000004         BCS      ??non_secure_it_init_5
    476          		AIC->AIC_EOICR = 0;
   \   000006A8   0xE3A00000         MOV      R0,#+0
   \   000006AC   0x........         LDR      R1,??DataTable5_48  ;; 0xfc020038
   \   000006B0   0xE5810000         STR      R0,[R1, #+0]
    477          	}
   \   000006B4   0xE2944001         ADDS     R4,R4,#+1
   \   000006B8   0xEAFFFFF8         B        ??non_secure_it_init_4
    478          
    479          	/* Enable IRQ and FIQ at core level */
    480          	v_arm_clr_cpsr_bits(CPSR_MASK_IRQ|CPSR_MASK_FIQ);
   \                     ??non_secure_it_init_5:
   \   000006BC   0xE3A000C0         MOV      R0,#+192
   \   000006C0   0x........         BL       v_arm_clr_cpsr_bits
    481          }
   \   000006C4   0xE8BD8010         POP      {R4,PC}          ;; return
    482          
    483          /**
    484           * \brief Secure interrupt init.
    485           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    486          void secure_it_init(void)
    487          {
   \                     secure_it_init:
   \   00000000   0xE92D4010         PUSH     {R4,LR}
    488          	uint32_t i;
    489          
    490          	/* Assign handler addesses */
    491          	SAIC->AIC_SSR =  3; SAIC->AIC_SVR = (uint32_t) PIT_Handler;              /**<  3 SAMA5D2x Periodic Interval Timer Interrupt (PIT) */
   \   00000004   0xE3A00003         MOV      R0,#+3
   \   00000008   0xE3A014F8         MOV      R1,#-134217728
   \   0000000C   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   00000010   0xE5810000         STR      R0,[R1, #+0]
   \   00000014   0x........         LDR      R0,??DataTable5_49
   \   00000018   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   0000001C   0xE5810000         STR      R0,[R1, #+0]
    492          	SAIC->AIC_SSR =  4; SAIC->AIC_SVR = (uint32_t) WDT_Handler;              /**<  4 SAMA5D2x Watchdog timer Interrupt (WDT) */
   \   00000020   0xE3A00004         MOV      R0,#+4
   \   00000024   0xE3A014F8         MOV      R1,#-134217728
   \   00000028   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   0000002C   0xE5810000         STR      R0,[R1, #+0]
   \   00000030   0x........         LDR      R0,??DataTable5_51
   \   00000034   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   00000038   0xE5810000         STR      R0,[R1, #+0]
    493          	SAIC->AIC_SSR =  5; SAIC->AIC_SVR = (uint32_t) GMAC_Handler;             /**<  5 SAMA5D2x Ethernet MAC (GMAC) */
   \   0000003C   0xE3A00005         MOV      R0,#+5
   \   00000040   0xE3A014F8         MOV      R1,#-134217728
   \   00000044   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   00000048   0xE5810000         STR      R0,[R1, #+0]
   \   0000004C   0x........         LDR      R0,??DataTable5_52
   \   00000050   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   00000054   0xE5810000         STR      R0,[R1, #+0]
    494          	SAIC->AIC_SSR =  6; SAIC->AIC_SVR = (uint32_t) XDMAC0_Handler;           /**<  6 SAMA5D2x DMA Controller 0 (XDMAC0) */
   \   00000058   0xE3A00006         MOV      R0,#+6
   \   0000005C   0xE3A014F8         MOV      R1,#-134217728
   \   00000060   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   00000064   0xE5810000         STR      R0,[R1, #+0]
   \   00000068   0x........         LDR      R0,??DataTable5_53
   \   0000006C   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   00000070   0xE5810000         STR      R0,[R1, #+0]
    495          	SAIC->AIC_SSR =  7; SAIC->AIC_SVR = (uint32_t) XDMAC1_Handler;           /**<  7 SAMA5D2x DMA Controller 1 (XDMAC1) */
   \   00000074   0xE3A00007         MOV      R0,#+7
   \   00000078   0xE3A014F8         MOV      R1,#-134217728
   \   0000007C   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   00000080   0xE5810000         STR      R0,[R1, #+0]
   \   00000084   0x........         LDR      R0,??DataTable5_54
   \   00000088   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   0000008C   0xE5810000         STR      R0,[R1, #+0]
    496          	SAIC->AIC_SSR =  8; SAIC->AIC_SVR = (uint32_t) ICM_Handler;              /**<  8 SAMA5D2x Integritry Check Monitor (ICM) */
   \   00000090   0xE3A00008         MOV      R0,#+8
   \   00000094   0xE3A014F8         MOV      R1,#-134217728
   \   00000098   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   0000009C   0xE5810000         STR      R0,[R1, #+0]
   \   000000A0   0x........         LDR      R0,??DataTable5_55
   \   000000A4   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   000000A8   0xE5810000         STR      R0,[R1, #+0]
    497          	SAIC->AIC_SSR =  9; SAIC->AIC_SVR = (uint32_t) AES_Handler;              /**<  9 SAMA5D2x Advanced Enion Standard (AES) */
   \   000000AC   0xE3A00009         MOV      R0,#+9
   \   000000B0   0xE3A014F8         MOV      R1,#-134217728
   \   000000B4   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   000000B8   0xE5810000         STR      R0,[R1, #+0]
   \   000000BC   0x........         LDR      R0,??DataTable5_56
   \   000000C0   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   000000C4   0xE5810000         STR      R0,[R1, #+0]
    498          	SAIC->AIC_SSR = 10; SAIC->AIC_SVR = (uint32_t) AESB_Handler;             /**< 10 SAMA5D2x AES bridge (AESB) */
   \   000000C8   0xE3A0000A         MOV      R0,#+10
   \   000000CC   0xE3A014F8         MOV      R1,#-134217728
   \   000000D0   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   000000D4   0xE5810000         STR      R0,[R1, #+0]
   \   000000D8   0x........         LDR      R0,??DataTable5_57
   \   000000DC   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   000000E0   0xE5810000         STR      R0,[R1, #+0]
    499          	SAIC->AIC_SSR = 11; SAIC->AIC_SVR = (uint32_t) TDES_Handler;             /**< 11 SAMA5D2x Triple Data Enion Standard (TDES) */
   \   000000E4   0xE3A0000B         MOV      R0,#+11
   \   000000E8   0xE3A014F8         MOV      R1,#-134217728
   \   000000EC   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   000000F0   0xE5810000         STR      R0,[R1, #+0]
   \   000000F4   0x........         LDR      R0,??DataTable5_58
   \   000000F8   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   000000FC   0xE5810000         STR      R0,[R1, #+0]
    500          	SAIC->AIC_SSR = 12; SAIC->AIC_SVR = (uint32_t) SHA_Handler;              /**< 12 SAMA5D2x SHA Signature (SHA) */
   \   00000100   0xE3A0000C         MOV      R0,#+12
   \   00000104   0xE3A014F8         MOV      R1,#-134217728
   \   00000108   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   0000010C   0xE5810000         STR      R0,[R1, #+0]
   \   00000110   0x........         LDR      R0,??DataTable5_59
   \   00000114   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   00000118   0xE5810000         STR      R0,[R1, #+0]
    501          	SAIC->AIC_SSR = 13; SAIC->AIC_SVR = (uint32_t) MPDDRC_Handler;           /**< 13 SAMA5D2x MPDDR controller (MPDDRC) */
   \   0000011C   0xE3A0000D         MOV      R0,#+13
   \   00000120   0xE3A014F8         MOV      R1,#-134217728
   \   00000124   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   00000128   0xE5810000         STR      R0,[R1, #+0]
   \   0000012C   0x........         LDR      R0,??DataTable5_60
   \   00000130   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   00000134   0xE5810000         STR      R0,[R1, #+0]
    502          	SAIC->AIC_SSR = 14; SAIC->AIC_SVR = (uint32_t) MATRIX1_Handler;          /**< 14 SAMA5D2x H32MX, 32-bit AHB Matrix (MATRIX1) */
   \   00000138   0xE3A0000E         MOV      R0,#+14
   \   0000013C   0xE3A014F8         MOV      R1,#-134217728
   \   00000140   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   00000144   0xE5810000         STR      R0,[R1, #+0]
   \   00000148   0x........         LDR      R0,??DataTable5_61
   \   0000014C   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   00000150   0xE5810000         STR      R0,[R1, #+0]
    503          	SAIC->AIC_SSR = 15; SAIC->AIC_SVR = (uint32_t) MATRIX0_Handler;          /**< 15 SAMA5D2x H64MX, 64-bit AHB Matrix (MATRIX0) */
   \   00000154   0xE3A0000F         MOV      R0,#+15
   \   00000158   0xE3A014F8         MOV      R1,#-134217728
   \   0000015C   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   00000160   0xE5810000         STR      R0,[R1, #+0]
   \   00000164   0x........         LDR      R0,??DataTable5_62
   \   00000168   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   0000016C   0xE5810000         STR      R0,[R1, #+0]
    504          	SAIC->AIC_SSR = 17; SAIC->AIC_SVR = (uint32_t) HSMC_Handler;             /**< 17 SAMA5D2x Multi-bit ECC Interrupt (HSMC) */
   \   00000170   0xE3A00011         MOV      R0,#+17
   \   00000174   0xE3A014F8         MOV      R1,#-134217728
   \   00000178   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   0000017C   0xE5810000         STR      R0,[R1, #+0]
   \   00000180   0x........         LDR      R0,??DataTable5_63
   \   00000184   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   00000188   0xE5810000         STR      R0,[R1, #+0]
    505          	SAIC->AIC_SSR = 18; SAIC->AIC_SVR = (uint32_t) PIOA_Handler;             /**< 18 SAMA5D2x Parallel I/O Controller (PIOA) */
   \   0000018C   0xE3A00012         MOV      R0,#+18
   \   00000190   0xE3A014F8         MOV      R1,#-134217728
   \   00000194   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   00000198   0xE5810000         STR      R0,[R1, #+0]
   \   0000019C   0x........         LDR      R0,??DataTable5_64
   \   000001A0   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   000001A4   0xE5810000         STR      R0,[R1, #+0]
    506          	SAIC->AIC_SSR = 19; SAIC->AIC_SVR = (uint32_t) FLEXCOM0_Handler;         /**< 19 SAMA5D2x FLEXCOM 0 (FLEXCOM0) */
   \   000001A8   0xE3A00013         MOV      R0,#+19
   \   000001AC   0xE3A014F8         MOV      R1,#-134217728
   \   000001B0   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   000001B4   0xE5810000         STR      R0,[R1, #+0]
   \   000001B8   0x........         LDR      R0,??DataTable5_3
   \   000001BC   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   000001C0   0xE5810000         STR      R0,[R1, #+0]
    507          	SAIC->AIC_SSR = 20; SAIC->AIC_SVR = (uint32_t) FLEXCOM1_Handler;         /**< 20 SAMA5D2x FLEXCOM 1 (FLEXCOM1) */
   \   000001C4   0xE3A00014         MOV      R0,#+20
   \   000001C8   0xE3A014F8         MOV      R1,#-134217728
   \   000001CC   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   000001D0   0xE5810000         STR      R0,[R1, #+0]
   \   000001D4   0x........         LDR      R0,??DataTable5_4
   \   000001D8   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   000001DC   0xE5810000         STR      R0,[R1, #+0]
    508          	SAIC->AIC_SSR = 21; SAIC->AIC_SVR = (uint32_t) FLEXCOM2_Handler;         /**< 21 SAMA5D2x FLEXCOM 2 (FLEXCOM2) */
   \   000001E0   0xE3A00015         MOV      R0,#+21
   \   000001E4   0xE3A014F8         MOV      R1,#-134217728
   \   000001E8   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   000001EC   0xE5810000         STR      R0,[R1, #+0]
   \   000001F0   0x........         LDR      R0,??DataTable5_5
   \   000001F4   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   000001F8   0xE5810000         STR      R0,[R1, #+0]
    509          	SAIC->AIC_SSR = 22; SAIC->AIC_SVR = (uint32_t) FLEXCOM3_Handler;         /**< 22 SAMA5D2x FLEXCOM 3 (FLEXCOM3) */
   \   000001FC   0xE3A00016         MOV      R0,#+22
   \   00000200   0xE3A014F8         MOV      R1,#-134217728
   \   00000204   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   00000208   0xE5810000         STR      R0,[R1, #+0]
   \   0000020C   0x........         LDR      R0,??DataTable5_6
   \   00000210   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   00000214   0xE5810000         STR      R0,[R1, #+0]
    510          	SAIC->AIC_SSR = 23; SAIC->AIC_SVR = (uint32_t) FLEXCOM4_Handler;         /**< 23 SAMA5D2x FLEXCOM 4 (FLEXCOM4) */
   \   00000218   0xE3A00017         MOV      R0,#+23
   \   0000021C   0xE3A014F8         MOV      R1,#-134217728
   \   00000220   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   00000224   0xE5810000         STR      R0,[R1, #+0]
   \   00000228   0x........         LDR      R0,??DataTable5_7
   \   0000022C   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   00000230   0xE5810000         STR      R0,[R1, #+0]
    511          	SAIC->AIC_SSR = 24; SAIC->AIC_SVR = (uint32_t) UART0_Handler;            /**< 24 SAMA5D2x UART 0 (UART0) */
   \   00000234   0xE3A00018         MOV      R0,#+24
   \   00000238   0xE3A014F8         MOV      R1,#-134217728
   \   0000023C   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   00000240   0xE5810000         STR      R0,[R1, #+0]
   \   00000244   0x........         LDR      R0,??DataTable5_8
   \   00000248   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   0000024C   0xE5810000         STR      R0,[R1, #+0]
    512          	SAIC->AIC_SSR = 25; SAIC->AIC_SVR = (uint32_t) UART1_Handler;            /**< 25 SAMA5D2x UART 1 (UART1) */
   \   00000250   0xE3A00019         MOV      R0,#+25
   \   00000254   0xE3A014F8         MOV      R1,#-134217728
   \   00000258   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   0000025C   0xE5810000         STR      R0,[R1, #+0]
   \   00000260   0x........         LDR      R0,??DataTable5_9
   \   00000264   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   00000268   0xE5810000         STR      R0,[R1, #+0]
    513          	SAIC->AIC_SSR = 26; SAIC->AIC_SVR = (uint32_t) UART2_Handler;            /**< 26 SAMA5D2x UART 2 (UART2) */
   \   0000026C   0xE3A0001A         MOV      R0,#+26
   \   00000270   0xE3A014F8         MOV      R1,#-134217728
   \   00000274   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   00000278   0xE5810000         STR      R0,[R1, #+0]
   \   0000027C   0x........         LDR      R0,??DataTable5_10
   \   00000280   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   00000284   0xE5810000         STR      R0,[R1, #+0]
    514          	SAIC->AIC_SSR = 27; SAIC->AIC_SVR = (uint32_t) UART3_Handler;            /**< 27 SAMA5D2x UART 3 (UART3) */
   \   00000288   0xE3A0001B         MOV      R0,#+27
   \   0000028C   0xE3A014F8         MOV      R1,#-134217728
   \   00000290   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   00000294   0xE5810000         STR      R0,[R1, #+0]
   \   00000298   0x........         LDR      R0,??DataTable5_11
   \   0000029C   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   000002A0   0xE5810000         STR      R0,[R1, #+0]
    515          	SAIC->AIC_SSR = 28; SAIC->AIC_SVR = (uint32_t) UART4_Handler;            /**< 28 SAMA5D2x UART 4 (UART4) */
   \   000002A4   0xE3A0001C         MOV      R0,#+28
   \   000002A8   0xE3A014F8         MOV      R1,#-134217728
   \   000002AC   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   000002B0   0xE5810000         STR      R0,[R1, #+0]
   \   000002B4   0x........         LDR      R0,??DataTable5_12
   \   000002B8   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   000002BC   0xE5810000         STR      R0,[R1, #+0]
    516          	SAIC->AIC_SSR = 29; SAIC->AIC_SVR = (uint32_t) TWIHS0_Handler;           /**< 29 SAMA5D2x Two-Wire Interface 0 (TWIHS0) */
   \   000002C0   0xE3A0001D         MOV      R0,#+29
   \   000002C4   0xE3A014F8         MOV      R1,#-134217728
   \   000002C8   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   000002CC   0xE5810000         STR      R0,[R1, #+0]
   \   000002D0   0x........         LDR      R0,??DataTable5_13
   \   000002D4   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   000002D8   0xE5810000         STR      R0,[R1, #+0]
    517          	SAIC->AIC_SSR = 30; SAIC->AIC_SVR = (uint32_t) TWIHS1_Handler;           /**< 30 SAMA5D2x Two-Wire Interface 1 (TWIHS1) */
   \   000002DC   0xE3A0001E         MOV      R0,#+30
   \   000002E0   0xE3A014F8         MOV      R1,#-134217728
   \   000002E4   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   000002E8   0xE5810000         STR      R0,[R1, #+0]
   \   000002EC   0x........         LDR      R0,??DataTable5_14
   \   000002F0   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   000002F4   0xE5810000         STR      R0,[R1, #+0]
    518          	SAIC->AIC_SSR = 33; SAIC->AIC_SVR = (uint32_t) SPI0_Handler;             /**< 33 SAMA5D2x Serial Peripheral Interface 0 (SPI0) */
   \   000002F8   0xE3A00021         MOV      R0,#+33
   \   000002FC   0xE3A014F8         MOV      R1,#-134217728
   \   00000300   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   00000304   0xE5810000         STR      R0,[R1, #+0]
   \   00000308   0x........         LDR      R0,??DataTable5_15
   \   0000030C   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   00000310   0xE5810000         STR      R0,[R1, #+0]
    519          	SAIC->AIC_SSR = 34; SAIC->AIC_SVR = (uint32_t) SPI1_Handler;             /**< 34 SAMA5D2x Serial Peripheral Interface 1 (SPI1) */
   \   00000314   0xE3A00022         MOV      R0,#+34
   \   00000318   0xE3A014F8         MOV      R1,#-134217728
   \   0000031C   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   00000320   0xE5810000         STR      R0,[R1, #+0]
   \   00000324   0x........         LDR      R0,??DataTable5_16
   \   00000328   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   0000032C   0xE5810000         STR      R0,[R1, #+0]
    520          	SAIC->AIC_SSR = 35; SAIC->AIC_SVR = (uint32_t) TC0_Handler;              /**< 35 SAMA5D2x Timer Counter 0 (ch. 0, 1, 2) (TC0) */
   \   00000330   0xE3A00023         MOV      R0,#+35
   \   00000334   0xE3A014F8         MOV      R1,#-134217728
   \   00000338   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   0000033C   0xE5810000         STR      R0,[R1, #+0]
   \   00000340   0x........         LDR      R0,??DataTable5_17
   \   00000344   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   00000348   0xE5810000         STR      R0,[R1, #+0]
    521          	SAIC->AIC_SSR = 36; SAIC->AIC_SVR = (uint32_t) TC1_Handler;              /**< 36 SAMA5D2x Timer Counter 1 (ch. 3, 4, 5) (TC1) */
   \   0000034C   0xE3A00024         MOV      R0,#+36
   \   00000350   0xE3A014F8         MOV      R1,#-134217728
   \   00000354   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   00000358   0xE5810000         STR      R0,[R1, #+0]
   \   0000035C   0x........         LDR      R0,??DataTable5_18
   \   00000360   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   00000364   0xE5810000         STR      R0,[R1, #+0]
    522          	SAIC->AIC_SSR = 38; SAIC->AIC_SVR = (uint32_t) PWM_Handler;              /**< 38 SAMA5D2x Pulse Width Modulation Controller0 (ch. 0, 1, 2, 3) (PWM) */
   \   00000368   0xE3A00026         MOV      R0,#+38
   \   0000036C   0xE3A014F8         MOV      R1,#-134217728
   \   00000370   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   00000374   0xE5810000         STR      R0,[R1, #+0]
   \   00000378   0x........         LDR      R0,??DataTable5_19
   \   0000037C   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   00000380   0xE5810000         STR      R0,[R1, #+0]
    523          	SAIC->AIC_SSR = 40; SAIC->AIC_SVR = (uint32_t) ADC_Handler;              /**< 40 SAMA5D2x Touch Screen ADC Controller (ADC) */
   \   00000384   0xE3A00028         MOV      R0,#+40
   \   00000388   0xE3A014F8         MOV      R1,#-134217728
   \   0000038C   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   00000390   0xE5810000         STR      R0,[R1, #+0]
   \   00000394   0x........         LDR      R0,??DataTable5_20
   \   00000398   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   0000039C   0xE5810000         STR      R0,[R1, #+0]
    524          	SAIC->AIC_SSR = 41; SAIC->AIC_SVR = (uint32_t) UHPHS_Handler;            /**< 41 SAMA5D2x USB Host High Speed (UHPHS) */
   \   000003A0   0xE3A00029         MOV      R0,#+41
   \   000003A4   0xE3A014F8         MOV      R1,#-134217728
   \   000003A8   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   000003AC   0xE5810000         STR      R0,[R1, #+0]
   \   000003B0   0x........         LDR      R0,??DataTable5_21
   \   000003B4   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   000003B8   0xE5810000         STR      R0,[R1, #+0]
    525          	SAIC->AIC_SSR = 42; SAIC->AIC_SVR = (uint32_t) UDPHS_Handler;            /**< 42 SAMA5D2x USB Device High Speed (UDPHS) */
   \   000003BC   0xE3A0002A         MOV      R0,#+42
   \   000003C0   0xE3A014F8         MOV      R1,#-134217728
   \   000003C4   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   000003C8   0xE5810000         STR      R0,[R1, #+0]
   \   000003CC   0x........         LDR      R0,??DataTable5_22
   \   000003D0   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   000003D4   0xE5810000         STR      R0,[R1, #+0]
    526          	SAIC->AIC_SSR = 43; SAIC->AIC_SVR = (uint32_t) SSC0_Handler;             /**< 43 SAMA5D2x Synchronous Serial Controller 0 (SSC0) */
   \   000003D8   0xE3A0002B         MOV      R0,#+43
   \   000003DC   0xE3A014F8         MOV      R1,#-134217728
   \   000003E0   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   000003E4   0xE5810000         STR      R0,[R1, #+0]
   \   000003E8   0x........         LDR      R0,??DataTable5_23
   \   000003EC   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   000003F0   0xE5810000         STR      R0,[R1, #+0]
    527          	SAIC->AIC_SSR = 44; SAIC->AIC_SVR = (uint32_t) SSC1_Handler;             /**< 44 SAMA5D2x Synchronous Serial Controller 1 (SSC1) */
   \   000003F4   0xE3A0002C         MOV      R0,#+44
   \   000003F8   0xE3A014F8         MOV      R1,#-134217728
   \   000003FC   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   00000400   0xE5810000         STR      R0,[R1, #+0]
   \   00000404   0x........         LDR      R0,??DataTable5_24
   \   00000408   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   0000040C   0xE5810000         STR      R0,[R1, #+0]
    528          	SAIC->AIC_SSR = 45; SAIC->AIC_SVR = (uint32_t) LCDC_Handler;             /**< 45 SAMA5D2x LCD Controller (LCDC) */
   \   00000410   0xE3A0002D         MOV      R0,#+45
   \   00000414   0xE3A014F8         MOV      R1,#-134217728
   \   00000418   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   0000041C   0xE5810000         STR      R0,[R1, #+0]
   \   00000420   0x........         LDR      R0,??DataTable5_25
   \   00000424   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   00000428   0xE5810000         STR      R0,[R1, #+0]
    529          	SAIC->AIC_SSR = 47; SAIC->AIC_SVR = (uint32_t) TRNG_Handler;             /**< 47 SAMA5D2x True Random Number Generator (TRNG) */
   \   0000042C   0xE3A0002F         MOV      R0,#+47
   \   00000430   0xE3A014F8         MOV      R1,#-134217728
   \   00000434   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   00000438   0xE5810000         STR      R0,[R1, #+0]
   \   0000043C   0x........         LDR      R0,??DataTable5_26
   \   00000440   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   00000444   0xE5810000         STR      R0,[R1, #+0]
    530          	SAIC->AIC_SSR = 48; SAIC->AIC_SVR = (uint32_t) PDMIC_Handler;            /**< 48 SAMA5D2x Pulse Density Modulation Interface Controller (PDMIC) */
   \   00000448   0xE3A00030         MOV      R0,#+48
   \   0000044C   0xE3A014F8         MOV      R1,#-134217728
   \   00000450   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   00000454   0xE5810000         STR      R0,[R1, #+0]
   \   00000458   0x........         LDR      R0,??DataTable5_27
   \   0000045C   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   00000460   0xE5810000         STR      R0,[R1, #+0]
    531          	SAIC->AIC_SSR = 50; SAIC->AIC_SVR = (uint32_t) SFC_Handler;              /**< 50 SAMA5D2x Fuse Controller (SFC) */
   \   00000464   0xE3A00032         MOV      R0,#+50
   \   00000468   0xE3A014F8         MOV      R1,#-134217728
   \   0000046C   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   00000470   0xE5810000         STR      R0,[R1, #+0]
   \   00000474   0x........         LDR      R0,??DataTable5_28
   \   00000478   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   0000047C   0xE5810000         STR      R0,[R1, #+0]
    532          	SAIC->AIC_SSR = 52; SAIC->AIC_SVR = (uint32_t) QSPI0_Handler;            /**< 52 SAMA5D2x QSPI 0 (QSPI0) */
   \   00000480   0xE3A00034         MOV      R0,#+52
   \   00000484   0xE3A014F8         MOV      R1,#-134217728
   \   00000488   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   0000048C   0xE5810000         STR      R0,[R1, #+0]
   \   00000490   0x........         LDR      R0,??DataTable5_29
   \   00000494   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   00000498   0xE5810000         STR      R0,[R1, #+0]
    533          	SAIC->AIC_SSR = 53; SAIC->AIC_SVR = (uint32_t) QSPI1_Handler;            /**< 53 SAMA5D2x QSPI 1 (QSPI1) */
   \   0000049C   0xE3A00035         MOV      R0,#+53
   \   000004A0   0xE3A014F8         MOV      R1,#-134217728
   \   000004A4   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   000004A8   0xE5810000         STR      R0,[R1, #+0]
   \   000004AC   0x........         LDR      R0,??DataTable5_30
   \   000004B0   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   000004B4   0xE5810000         STR      R0,[R1, #+0]
    534          	SAIC->AIC_SSR = 54; SAIC->AIC_SVR = (uint32_t) I2SC0_Handler;            /**< 54 SAMA5D2x Inter-IC Sound Controller 0 (I2SC0) */
   \   000004B8   0xE3A00036         MOV      R0,#+54
   \   000004BC   0xE3A014F8         MOV      R1,#-134217728
   \   000004C0   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   000004C4   0xE5810000         STR      R0,[R1, #+0]
   \   000004C8   0x........         LDR      R0,??DataTable5_31
   \   000004CC   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   000004D0   0xE5810000         STR      R0,[R1, #+0]
    535          	SAIC->AIC_SSR = 55; SAIC->AIC_SVR = (uint32_t) I2SC1_Handler;            /**< 55 SAMA5D2x Inter-IC Sound Controller 1 (I2SC1) */
   \   000004D4   0xE3A00037         MOV      R0,#+55
   \   000004D8   0xE3A014F8         MOV      R1,#-134217728
   \   000004DC   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   000004E0   0xE5810000         STR      R0,[R1, #+0]
   \   000004E4   0x........         LDR      R0,??DataTable5_32
   \   000004E8   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   000004EC   0xE5810000         STR      R0,[R1, #+0]
    536          	SAIC->AIC_SSR = 59; SAIC->AIC_SVR = (uint32_t) CLASSD_Handler;           /**< 59 SAMA5D2x Audio Class D amplifier (CLASSD) */
   \   000004F0   0xE3A0003B         MOV      R0,#+59
   \   000004F4   0xE3A014F8         MOV      R1,#-134217728
   \   000004F8   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   000004FC   0xE5810000         STR      R0,[R1, #+0]
   \   00000500   0x........         LDR      R0,??DataTable5_33
   \   00000504   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   00000508   0xE5810000         STR      R0,[R1, #+0]
    537          	SAIC->AIC_SSR = 60; SAIC->AIC_SVR = (uint32_t) SFR_Handler;              /**< 60 SAMA5D2x Special Function Register  (SFR) */
   \   0000050C   0xE3A0003C         MOV      R0,#+60
   \   00000510   0xE3A014F8         MOV      R1,#-134217728
   \   00000514   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   00000518   0xE5810000         STR      R0,[R1, #+0]
   \   0000051C   0x........         LDR      R0,??DataTable5_34
   \   00000520   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   00000524   0xE5810000         STR      R0,[R1, #+0]
    538          	SAIC->AIC_SSR = 61; SAIC->AIC_SVR = (uint32_t) SAIC_Handler;             /**< 61 SAMA5D2x Secured Advanced Interrupt Controller  (SAIC) */
   \   00000528   0xE3A0003D         MOV      R0,#+61
   \   0000052C   0xE3A014F8         MOV      R1,#-134217728
   \   00000530   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   00000534   0xE5810000         STR      R0,[R1, #+0]
   \   00000538   0x........         LDR      R0,??DataTable5_35
   \   0000053C   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   00000540   0xE5810000         STR      R0,[R1, #+0]
    539          	SAIC->AIC_SSR = 62; SAIC->AIC_SVR = (uint32_t) AIC_Handler;              /**< 62 SAMA5D2x Advanced Interrupt Controller  (AIC) */
   \   00000544   0xE3A0003E         MOV      R0,#+62
   \   00000548   0xE3A014F8         MOV      R1,#-134217728
   \   0000054C   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   00000550   0xE5810000         STR      R0,[R1, #+0]
   \   00000554   0x........         LDR      R0,??DataTable5_36
   \   00000558   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   0000055C   0xE5810000         STR      R0,[R1, #+0]
    540          	SAIC->AIC_SSR = 63; SAIC->AIC_SVR = (uint32_t) L2CC_Handler;             /**< 63 SAMA5D2x L2 Cache Controller (L2CC) */
   \   00000560   0xE3A0003F         MOV      R0,#+63
   \   00000564   0xE3A014F8         MOV      R1,#-134217728
   \   00000568   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   0000056C   0xE5810000         STR      R0,[R1, #+0]
   \   00000570   0x........         LDR      R0,??DataTable5_37
   \   00000574   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   00000578   0xE5810000         STR      R0,[R1, #+0]
    541          	SAIC->AIC_SSR = 68; SAIC->AIC_SVR = (uint32_t) PIOB_Handler;             /**< 68 SAMA5D2x  (PIOB) */
   \   0000057C   0xE3A00044         MOV      R0,#+68
   \   00000580   0xE3A014F8         MOV      R1,#-134217728
   \   00000584   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   00000588   0xE5810000         STR      R0,[R1, #+0]
   \   0000058C   0x........         LDR      R0,??DataTable5_38
   \   00000590   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   00000594   0xE5810000         STR      R0,[R1, #+0]
    542          	SAIC->AIC_SSR = 69; SAIC->AIC_SVR = (uint32_t) PIOC_Handler;             /**< 69 SAMA5D2x  (PIOC) */
   \   00000598   0xE3A00045         MOV      R0,#+69
   \   0000059C   0xE3A014F8         MOV      R1,#-134217728
   \   000005A0   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   000005A4   0xE5810000         STR      R0,[R1, #+0]
   \   000005A8   0x........         LDR      R0,??DataTable5_39
   \   000005AC   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   000005B0   0xE5810000         STR      R0,[R1, #+0]
    543          	SAIC->AIC_SSR = 70; SAIC->AIC_SVR = (uint32_t) PIOD_Handler;             /**< 70 SAMA5D2x  (PIOD) */
   \   000005B4   0xE3A00046         MOV      R0,#+70
   \   000005B8   0xE3A014F8         MOV      R1,#-134217728
   \   000005BC   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   000005C0   0xE5810000         STR      R0,[R1, #+0]
   \   000005C4   0x........         LDR      R0,??DataTable5_40
   \   000005C8   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   000005CC   0xE5810000         STR      R0,[R1, #+0]
    544          	SAIC->AIC_SSR = 75; SAIC->AIC_SVR = (uint32_t) ACC_Handler;              /**< 75 SAMA5D2x Analog Comparator (ACC) */
   \   000005D0   0xE3A0004B         MOV      R0,#+75
   \   000005D4   0xE3A014F8         MOV      R1,#-134217728
   \   000005D8   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   000005DC   0xE5810000         STR      R0,[R1, #+0]
   \   000005E0   0x........         LDR      R0,??DataTable5_41
   \   000005E4   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   000005E8   0xE5810000         STR      R0,[R1, #+0]
    545          	SAIC->AIC_SSR = 76; SAIC->AIC_SVR = (uint32_t) RXLP_Handler;             /**< 76 SAMA5D2x Uart Low Power (RXLP) */
   \   000005EC   0xE3A0004C         MOV      R0,#+76
   \   000005F0   0xE3A014F8         MOV      R1,#-134217728
   \   000005F4   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   000005F8   0xE5810000         STR      R0,[R1, #+0]
   \   000005FC   0x........         LDR      R0,??DataTable5_42
   \   00000600   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   00000604   0xE5810000         STR      R0,[R1, #+0]
    546          	SAIC->AIC_SSR = 78; SAIC->AIC_SVR = (uint32_t) CHIPID_Handler;           /**< 78 SAMA5D2x Chip ID (CHIPID) */
   \   00000608   0xE3A0004E         MOV      R0,#+78
   \   0000060C   0xE3A014F8         MOV      R1,#-134217728
   \   00000610   0xE3811BF0         ORR      R1,R1,#0x3C000
   \   00000614   0xE5810000         STR      R0,[R1, #+0]
   \   00000618   0x........         LDR      R0,??DataTable5_43
   \   0000061C   0x........         LDR      R1,??DataTable5_50  ;; 0xf803c008
   \   00000620   0xE5810000         STR      R0,[R1, #+0]
    547          
    548          	SAIC->AIC_SPU = (uint32_t)Spurious_handler;
   \   00000624   0x........         LDR      R0,??DataTable5_44
   \   00000628   0x........         LDR      R1,??DataTable5_65  ;; 0xf803c03c
   \   0000062C   0xE5810000         STR      R0,[R1, #+0]
    549          
    550          	/* Disable all interrupts */
    551          	for (i = 1; i < ID_PERIPH_COUNT; i++){
   \   00000630   0xE3A00001         MOV      R0,#+1
   \   00000634   0xE1B04000         MOVS     R4,R0
   \                     ??secure_it_init_0:
   \   00000638   0xE354004F         CMP      R4,#+79
   \   0000063C   0x2A000007         BCS      ??secure_it_init_1
    552          		SAIC->AIC_SSR = i;
   \   00000640   0xE3A004F8         MOV      R0,#-134217728
   \   00000644   0xE3800BF0         ORR      R0,R0,#0x3C000
   \   00000648   0xE5804000         STR      R4,[R0, #+0]
    553          		SAIC->AIC_IDCR = AIC_IDCR_INTD;
   \   0000064C   0xE3A00001         MOV      R0,#+1
   \   00000650   0x........         LDR      R1,??DataTable5_66  ;; 0xf803c044
   \   00000654   0xE5810000         STR      R0,[R1, #+0]
    554          	}
   \   00000658   0xE2944001         ADDS     R4,R4,#+1
   \   0000065C   0xEAFFFFF5         B        ??secure_it_init_0
    555          	/* Clear All pending interrupts flags */
    556          	for (i = 0; i < ID_PERIPH_COUNT; i++){
   \                     ??secure_it_init_1:
   \   00000660   0xE3A00000         MOV      R0,#+0
   \   00000664   0xE1B04000         MOVS     R4,R0
   \                     ??secure_it_init_2:
   \   00000668   0xE354004F         CMP      R4,#+79
   \   0000066C   0x2A000007         BCS      ??secure_it_init_3
    557          		SAIC->AIC_SSR = i;
   \   00000670   0xE3A004F8         MOV      R0,#-134217728
   \   00000674   0xE3800BF0         ORR      R0,R0,#0x3C000
   \   00000678   0xE5804000         STR      R4,[R0, #+0]
    558          		SAIC->AIC_ICCR = AIC_ICCR_INTCLR;
   \   0000067C   0xE3A00001         MOV      R0,#+1
   \   00000680   0x........         LDR      R1,??DataTable5_67  ;; 0xf803c048
   \   00000684   0xE5810000         STR      R0,[R1, #+0]
    559          	}
   \   00000688   0xE2944001         ADDS     R4,R4,#+1
   \   0000068C   0xEAFFFFF5         B        ??secure_it_init_2
    560          	/* Perform 8 IT acknoledge (write any value in EOICR) (VPy) */
    561          	for (i = 0; i < 8; i++){
   \                     ??secure_it_init_3:
   \   00000690   0xE3A00000         MOV      R0,#+0
   \   00000694   0xE1B04000         MOVS     R4,R0
   \                     ??secure_it_init_4:
   \   00000698   0xE3540008         CMP      R4,#+8
   \   0000069C   0x2A000004         BCS      ??secure_it_init_5
    562          		SAIC->AIC_EOICR = 0;
   \   000006A0   0xE3A00000         MOV      R0,#+0
   \   000006A4   0x........         LDR      R1,??DataTable5_68  ;; 0xf803c038
   \   000006A8   0xE5810000         STR      R0,[R1, #+0]
    563          	}
   \   000006AC   0xE2944001         ADDS     R4,R4,#+1
   \   000006B0   0xEAFFFFF8         B        ??secure_it_init_4
    564          	/* Enable IRQ and FIQ at core level */
    565          	v_arm_clr_cpsr_bits(CPSR_MASK_IRQ|CPSR_MASK_FIQ);
   \                     ??secure_it_init_5:
   \   000006B4   0xE3A000C0         MOV      R0,#+192
   \   000006B8   0x........         BL       v_arm_clr_cpsr_bits
    566          }
   \   000006BC   0xE8BD8010         POP      {R4,PC}          ;; return

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0xF8030054         DC32     0xf8030054

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     low_level_init

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x215C3F01         DC32     0x215c3f01

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     ?_17

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     ?_18

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     abort_status

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x........         DC32     ?_19

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x........         DC32     ?_20

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x........         DC32     ?_22

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x........         DC32     ?_23

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0x........         DC32     PIT_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   0xFC020008         DC32     0xfc020008

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable4_12:
   \   00000000   0x........         DC32     WDT_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable4_13:
   \   00000000   0x........         DC32     GMAC_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable4_14:
   \   00000000   0x........         DC32     XDMAC0_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable4_15:
   \   00000000   0x........         DC32     XDMAC1_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable4_16:
   \   00000000   0x........         DC32     ICM_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable4_17:
   \   00000000   0x........         DC32     AES_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable4_18:
   \   00000000   0x........         DC32     AESB_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable4_19:
   \   00000000   0x........         DC32     TDES_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable4_20:
   \   00000000   0x........         DC32     SHA_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable4_21:
   \   00000000   0x........         DC32     MPDDRC_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable4_22:
   \   00000000   0x........         DC32     MATRIX1_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable4_23:
   \   00000000   0x........         DC32     MATRIX0_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable4_24:
   \   00000000   0x........         DC32     HSMC_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable4_25:
   \   00000000   0x........         DC32     PIOA_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     ?_21

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     ?_24

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     ?_25

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     FLEXCOM0_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     FLEXCOM1_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     FLEXCOM2_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x........         DC32     FLEXCOM3_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x........         DC32     FLEXCOM4_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x........         DC32     UART0_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x........         DC32     UART1_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x........         DC32     UART2_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x........         DC32     UART3_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_12:
   \   00000000   0x........         DC32     UART4_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_13:
   \   00000000   0x........         DC32     TWIHS0_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_14:
   \   00000000   0x........         DC32     TWIHS1_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_15:
   \   00000000   0x........         DC32     SPI0_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_16:
   \   00000000   0x........         DC32     SPI1_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_17:
   \   00000000   0x........         DC32     TC0_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_18:
   \   00000000   0x........         DC32     TC1_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_19:
   \   00000000   0x........         DC32     PWM_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_20:
   \   00000000   0x........         DC32     ADC_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_21:
   \   00000000   0x........         DC32     UHPHS_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_22:
   \   00000000   0x........         DC32     UDPHS_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_23:
   \   00000000   0x........         DC32     SSC0_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_24:
   \   00000000   0x........         DC32     SSC1_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_25:
   \   00000000   0x........         DC32     LCDC_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_26:
   \   00000000   0x........         DC32     TRNG_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_27:
   \   00000000   0x........         DC32     PDMIC_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_28:
   \   00000000   0x........         DC32     SFC_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_29:
   \   00000000   0x........         DC32     QSPI0_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_30:
   \   00000000   0x........         DC32     QSPI1_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_31:
   \   00000000   0x........         DC32     I2SC0_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_32:
   \   00000000   0x........         DC32     I2SC1_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_33:
   \   00000000   0x........         DC32     CLASSD_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_34:
   \   00000000   0x........         DC32     SFR_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_35:
   \   00000000   0x........         DC32     SAIC_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_36:
   \   00000000   0x........         DC32     AIC_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_37:
   \   00000000   0x........         DC32     L2CC_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_38:
   \   00000000   0x........         DC32     PIOB_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_39:
   \   00000000   0x........         DC32     PIOC_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_40:
   \   00000000   0x........         DC32     PIOD_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_41:
   \   00000000   0x........         DC32     ACC_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_42:
   \   00000000   0x........         DC32     RXLP_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_43:
   \   00000000   0x........         DC32     CHIPID_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_44:
   \   00000000   0x........         DC32     Spurious_handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_45:
   \   00000000   0xFC02003C         DC32     0xfc02003c

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_46:
   \   00000000   0xFC020044         DC32     0xfc020044

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_47:
   \   00000000   0xFC020048         DC32     0xfc020048

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_48:
   \   00000000   0xFC020038         DC32     0xfc020038

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_49:
   \   00000000   0x........         DC32     PIT_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_50:
   \   00000000   0xF803C008         DC32     0xf803c008

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_51:
   \   00000000   0x........         DC32     WDT_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_52:
   \   00000000   0x........         DC32     GMAC_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_53:
   \   00000000   0x........         DC32     XDMAC0_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_54:
   \   00000000   0x........         DC32     XDMAC1_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_55:
   \   00000000   0x........         DC32     ICM_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_56:
   \   00000000   0x........         DC32     AES_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_57:
   \   00000000   0x........         DC32     AESB_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_58:
   \   00000000   0x........         DC32     TDES_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_59:
   \   00000000   0x........         DC32     SHA_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_60:
   \   00000000   0x........         DC32     MPDDRC_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_61:
   \   00000000   0x........         DC32     MATRIX1_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_62:
   \   00000000   0x........         DC32     MATRIX0_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_63:
   \   00000000   0x........         DC32     HSMC_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_64:
   \   00000000   0x........         DC32     PIOA_Handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_65:
   \   00000000   0xF803C03C         DC32     0xf803c03c

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_66:
   \   00000000   0xF803C044         DC32     0xf803c044

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_67:
   \   00000000   0xF803C048         DC32     0xf803c048

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_68:
   \   00000000   0xF803C038         DC32     0xf803c038

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x55 0x6E          DC8 "Unknown(reserved status)"
   \              0x6B 0x6E    
   \              0x6F 0x77    
   \              0x6E 0x28    
   \              0x72 0x65    
   \              0x73 0x65    
   \              0x72 0x76    
   \              0x65 0x64    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x29    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x41 0x6C          DC8 "Alignment Fault"
   \              0x69 0x67    
   \              0x6E 0x6D    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x46 0x61    
   \              0x75 0x6C    
   \              0x74 0x00    

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x44 0x65          DC8 "Debug Event"
   \              0x62 0x75    
   \              0x67 0x20    
   \              0x45 0x76    
   \              0x65 0x6E    
   \              0x74 0x00    

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x41 0x63          DC8 "Access flag - section"
   \              0x63 0x65    
   \              0x73 0x73    
   \              0x20 0x66    
   \              0x6C 0x61    
   \              0x67 0x20    
   \              0x2D 0x20    
   \              0x73 0x65    
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x49 0x6E          DC8 "Instruction cache maintenance"
   \              0x73 0x74    
   \              0x72 0x75    
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x63 0x61    
   \              0x63 0x68    
   \              0x65 0x20    
   \              0x6D 0x61    
   \              0x69 0x6E    
   \              0x74 0x65    
   \              0x6E 0x61    
   \              0x6E 0x63    
   \              0x65 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x54 0x72          DC8 "Translation fault - section"
   \              0x61 0x6E    
   \              0x73 0x6C    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x66 0x61    
   \              0x75 0x6C    
   \              0x74 0x20    
   \              0x2D 0x20    
   \              0x73 0x65    
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0x41 0x63          DC8 "Access flag - Page"
   \              0x63 0x65    
   \              0x73 0x73    
   \              0x20 0x66    
   \              0x6C 0x61    
   \              0x67 0x20    
   \              0x2D 0x20    
   \              0x50 0x61    
   \              0x67 0x65    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x54 0x72          DC8 "Translation fault -Page"
   \              0x61 0x6E    
   \              0x73 0x6C    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x66 0x61    
   \              0x75 0x6C    
   \              0x74 0x20    
   \              0x2D 0x50    
   \              0x61 0x67    
   \              0x65 0x00    

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x53 0x79          DC8 "Synchronous external abort"
   \              0x6E 0x63    
   \              0x68 0x72    
   \              0x6F 0x6E    
   \              0x6F 0x75    
   \              0x73 0x20    
   \              0x65 0x78    
   \              0x74 0x65    
   \              0x72 0x6E    
   \              0x61 0x6C    
   \              0x20 0x61    
   \              0x62 0x6F    
   \              0x72 0x74    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x53 0x79          DC8 "Synchronous external abort, nontranslation"
   \              0x6E 0x63    
   \              0x68 0x72    
   \              0x6F 0x6E    
   \              0x6F 0x75    
   \              0x73 0x20    
   \              0x65 0x78    
   \              0x74 0x65    
   \              0x72 0x6E    
   \              0x61 0x6C    
   \              0x20 0x61    
   \              0x62 0x6F    
   \              0x72 0x74    
   \              0x2C 0x20    
   \              0x6E 0x6F    
   \              0x6E 0x74    
   \              0x72 0x61    
   \              0x6E 0x73    
   \              0x6C 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x44 0x6F          DC8 "Domain fault - Section"
   \              0x6D 0x61    
   \              0x69 0x6E    
   \              0x20 0x66    
   \              0x61 0x75    
   \              0x6C 0x74    
   \              0x20 0x2D    
   \              0x20 0x53    
   \              0x65 0x63    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_11:
   \   00000000   0x44 0x6F          DC8 "Domain fault - Page"
   \              0x6D 0x61    
   \              0x69 0x6E    
   \              0x20 0x66    
   \              0x61 0x75    
   \              0x6C 0x74    
   \              0x20 0x2D    
   \              0x20 0x50    
   \              0x61 0x67    
   \              0x65 0x00    

   \                                 In section .rodata, align 4
   \                     ?_12:
   \   00000000   0x53 0x79          DC8 "Synchronous external abort - L1 Translation"
   \              0x6E 0x63    
   \              0x68 0x72    
   \              0x6F 0x6E    
   \              0x6F 0x75    
   \              0x73 0x20    
   \              0x65 0x78    
   \              0x74 0x65    
   \              0x72 0x6E    
   \              0x61 0x6C    
   \              0x20 0x61    
   \              0x62 0x6F    
   \              0x72 0x74    
   \              0x20 0x2D    
   \              0x20 0x4C    
   \              0x31 0x20    
   \              0x54 0x72    
   \              0x61 0x6E    
   \              0x73 0x6C    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_13:
   \   00000000   0x50 0x65          DC8 "Permission fault - Section"
   \              0x72 0x6D    
   \              0x69 0x73    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x20 0x66    
   \              0x61 0x75    
   \              0x6C 0x74    
   \              0x20 0x2D    
   \              0x20 0x53    
   \              0x65 0x63    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_14:
   \   00000000   0x53 0x79          DC8 "Synchronous external abort - L2 Translation"
   \              0x6E 0x63    
   \              0x68 0x72    
   \              0x6F 0x6E    
   \              0x6F 0x75    
   \              0x73 0x20    
   \              0x65 0x78    
   \              0x74 0x65    
   \              0x72 0x6E    
   \              0x61 0x6C    
   \              0x20 0x61    
   \              0x62 0x6F    
   \              0x72 0x74    
   \              0x20 0x2D    
   \              0x20 0x4C    
   \              0x32 0x20    
   \              0x54 0x72    
   \              0x61 0x6E    
   \              0x73 0x6C    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_15:
   \   00000000   0x50 0x65          DC8 "Permission fault - Page"
   \              0x72 0x6D    
   \              0x69 0x73    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x20 0x66    
   \              0x61 0x75    
   \              0x6C 0x74    
   \              0x20 0x2D    
   \              0x20 0x50    
   \              0x61 0x67    
   \              0x65 0x00    

   \                                 In section .rodata, align 4
   \                     ?_16:
   \   00000000   0x41 0x73          DC8 "Asynchronous external abort"
   \              0x79 0x6E    
   \              0x63 0x68    
   \              0x72 0x6F    
   \              0x6E 0x6F    
   \              0x75 0x73    
   \              0x20 0x65    
   \              0x78 0x74    
   \              0x65 0x72    
   \              0x6E 0x61    
   \              0x6C 0x20    
   \              0x61 0x62    
   \              0x6F 0x72    
   \              0x74 0x00    

   \                                 In section .rodata, align 4
   \                     ?_17:
   \   00000000   0x0A 0x0D          DC8 0AH, 0DH, 23H, 23H, 23H, 23H, 23H, 23H
   \              0x23 0x23    
   \              0x23 0x23    
   \              0x23 0x23    
   \   00000008   0x23 0x23          DC8 23H, 23H, 23H, 23H, 23H, 23H, 23H, 23H
   \              0x23 0x23    
   \              0x23 0x23    
   \              0x23 0x23    
   \   00000010   0x23 0x23          DC8 23H, 23H, 23H, 23H, 23H, 23H, 23H, 23H
   \              0x23 0x23    
   \              0x23 0x23    
   \              0x23 0x23    
   \   00000018   0x23 0x23          DC8 23H, 23H, 23H, 23H, 23H, 23H, 23H, 23H
   \              0x23 0x23    
   \              0x23 0x23    
   \              0x23 0x23    
   \   00000020   0x23 0x23          DC8 23H, 23H, 23H, 23H, 23H, 23H, 23H, 23H
   \              0x23 0x23    
   \              0x23 0x23    
   \              0x23 0x23    
   \   00000028   0x23 0x23          DC8 23H, 23H, 23H, 23H, 23H, 23H, 23H, 23H
   \              0x23 0x23    
   \              0x23 0x23    
   \              0x23 0x23    
   \   00000030   0x23 0x23          DC8 23H, 23H, 23H, 23H, 23H, 23H, 23H, 23H
   \              0x23 0x23    
   \              0x23 0x23    
   \              0x23 0x23    
   \   00000038   0x23 0x23          DC8 23H, 23H, 23H, 23H, 23H, 23H, 23H, 23H
   \              0x23 0x23    
   \              0x23 0x23    
   \              0x23 0x23    
   \   00000040   0x23 0x23          DC8 23H, 23H, 23H, 23H, 23H, 23H, 23H, 23H
   \              0x23 0x23    
   \              0x23 0x23    
   \              0x23 0x23    
   \   00000048   0x0A 0x0D          DC8 0AH, 0DH, 0
   \              0x00         
   \   0000004B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_18:
   \   00000000   0x44 0x61          DC8 "Data Abort occured in %x domain\012\015"
   \              0x74 0x61    
   \              0x20 0x41    
   \              0x62 0x6F    
   \              0x72 0x74    
   \              0x20 0x6F    
   \              0x63 0x63    
   \              0x75 0x72    
   \              0x65 0x64    
   \              0x20 0x69    
   \              0x6E 0x20    
   \              0x25 0x78    
   \              0x20 0x64    
   \              0x6F 0x6D    
   \              0x61 0x69    
   \              0x6E 0x0A    
   \              0x0D 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_19:
   \   00000000   0x44 0x61          DC8 "Data abort fault reason is: %s\012\015"
   \              0x74 0x61    
   \              0x20 0x61    
   \              0x62 0x6F    
   \              0x72 0x74    
   \              0x20 0x66    
   \              0x61 0x75    
   \              0x6C 0x74    
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x73 0x6F    
   \              0x6E 0x20    
   \              0x69 0x73    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x0A 0x0D    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_20:
   \   00000000   0x44 0x61          DC8 "Data fault occured at Address = 0x%08x\012\012\015"
   \              0x74 0x61    
   \              0x20 0x66    
   \              0x61 0x75    
   \              0x6C 0x74    
   \              0x20 0x6F    
   \              0x63 0x63    
   \              0x75 0x72    
   \              0x65 0x64    
   \              0x20 0x61    
   \              0x74 0x20    
   \              0x41 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x3D 0x20    
   \              0x30 0x78    
   \              0x25 0x30    
   \              0x38 0x78    
   \              0x0A 0x0A    
   \              0x0D 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_21:
   \   00000000   0x2D 0x5B          DC8 "-[Info]-Data fault status register value = 0x%x\012\015"
   \              0x49 0x6E    
   \              0x66 0x6F    
   \              0x5D 0x2D    
   \              0x44 0x61    
   \              0x74 0x61    
   \              0x20 0x66    
   \              0x61 0x75    
   \              0x6C 0x74    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x20    
   \              0x72 0x65    
   \              0x67 0x69    
   \              0x73 0x74    
   \              0x65 0x72    
   \              0x20 0x76    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x20 0x3D    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x78 0x0A    
   \              0x0D 0x00    
   \   00000032   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_22:
   \   00000000   0x49 0x6E          DC8 "Instruction prefetch abort reason is: %s\012\015"
   \              0x73 0x74    
   \              0x72 0x75    
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x70 0x72    
   \              0x65 0x66    
   \              0x65 0x74    
   \              0x63 0x68    
   \              0x20 0x61    
   \              0x62 0x6F    
   \              0x72 0x74    
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x73 0x6F    
   \              0x6E 0x20    
   \              0x69 0x73    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x0A 0x0D    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_23:
   \   00000000   0x49 0x6E          DC8 49H, 6EH, 73H, 74H, 72H, 75H, 63H, 74H
   \              0x73 0x74    
   \              0x72 0x75    
   \              0x63 0x74    
   \   00000008   0x69 0x6F          DC8 69H, 6FH, 6EH, 20H, 70H, 72H, 65H, 66H
   \              0x6E 0x20    
   \              0x70 0x72    
   \              0x65 0x66    
   \   00000010   0x65 0x74          DC8 65H, 74H, 63H, 68H, 20H, 46H, 61H, 75H
   \              0x63 0x68    
   \              0x20 0x46    
   \              0x61 0x75    
   \   00000018   0x6C 0x74          DC8 6CH, 74H, 20H, 6FH, 63H, 63H, 75H, 72H
   \              0x20 0x6F    
   \              0x63 0x63    
   \              0x75 0x72    
   \   00000020   0x65 0x64          DC8 65H, 64H, 20H, 61H, 74H, 20H, 41H, 64H
   \              0x20 0x61    
   \              0x74 0x20    
   \              0x41 0x64    
   \   00000028   0x64 0x72          DC8 64H, 72H, 65H, 73H, 73H, 20H, 3DH, 20H
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x3D 0x20    
   \   00000030   0x30 0x78          DC8 30H, 78H, 25H, 30H, 38H, 78H, 0AH, 0AH
   \              0x25 0x30    
   \              0x38 0x78    
   \              0x0A 0x0A    
   \   00000038   0x0D 0x00          DC8 0DH, 0
   \   0000003A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_24:
   \   00000000   0x2D 0x5B          DC8 2DH, 5BH, 49H, 4EH, 46H, 4FH, 5DH, 2DH
   \              0x49 0x4E    
   \              0x46 0x4F    
   \              0x5D 0x2D    
   \   00000008   0x20 0x50          DC8 20H, 50H, 72H, 65H, 66H, 65H, 74H, 63H
   \              0x72 0x65    
   \              0x66 0x65    
   \              0x74 0x63    
   \   00000010   0x68 0x20          DC8 68H, 20H, 46H, 61H, 75H, 6CH, 74H, 20H
   \              0x46 0x61    
   \              0x75 0x6C    
   \              0x74 0x20    
   \   00000018   0x73 0x74          DC8 73H, 74H, 61H, 74H, 75H, 73H, 20H, 72H
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x20 0x72    
   \   00000020   0x65 0x67          DC8 65H, 67H, 69H, 73H, 74H, 65H, 72H, 20H
   \              0x69 0x73    
   \              0x74 0x65    
   \              0x72 0x20    
   \   00000028   0x76 0x61          DC8 76H, 61H, 6CH, 75H, 65H, 20H, 62H, 79H
   \              0x6C 0x75    
   \              0x65 0x20    
   \              0x62 0x79    
   \   00000030   0x20 0x3D          DC8 20H, 3DH, 20H, 30H, 78H, 25H, 78H, 0AH
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x78 0x0A    
   \   00000038   0x0D 0x00          DC8 0DH, 0
   \   0000003A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_25:
   \   00000000   0x55 0x6E          DC8 "Undefined abort \012\015"
   \              0x64 0x65    
   \              0x66 0x69    
   \              0x6E 0x65    
   \              0x64 0x20    
   \              0x61 0x62    
   \              0x6F 0x72    
   \              0x74 0x20    
   \              0x0A 0x0D    
   \              0x00         
   \   00000013   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   ACC_Handler
       0   ADC_Handler
       0   AESB_Handler
       0   AES_Handler
       0   AIC_Handler
       0   CHIPID_Handler
       0   CLASSD_Handler
       0   FLEXCOM0_Handler
       0   FLEXCOM1_Handler
       0   FLEXCOM2_Handler
       0   FLEXCOM3_Handler
       0   FLEXCOM4_Handler
       0   GMAC_Handler
       0   HSMC_Handler
       0   I2SC0_Handler
       0   I2SC1_Handler
       0   ICM_Handler
       0   L2CC_Handler
       0   LCDC_Handler
       0   MATRIX0_Handler
       0   MATRIX1_Handler
       0   MPDDRC_Handler
       0   PDMIC_Handler
       0   PIOA_Handler
       0   PIOB_Handler
       0   PIOC_Handler
       0   PIOD_Handler
       0   PIT_Handler
       0   PWM_Handler
       0   QSPI0_Handler
       0   QSPI1_Handler
       0   RXLP_Handler
       0   SAIC_Handler
       0   SFC_Handler
       0   SFR_Handler
       0   SHA_Handler
       0   SPI0_Handler
       0   SPI1_Handler
       0   SSC0_Handler
       0   SSC1_Handler
       0   Spurious_handler
       0   TC0_Handler
       0   TC1_Handler
       0   TDES_Handler
       0   TRNG_Handler
       0   TWIHS0_Handler
       0   TWIHS1_Handler
       0   UART0_Handler
       0   UART1_Handler
       0   UART2_Handler
       0   UART3_Handler
       0   UART4_Handler
       0   UDPHS_Handler
       0   UHPHS_Handler
       0   WDT_Handler
       0   XDMAC0_Handler
       0   XDMAC1_Handler
       8   __low_level_init
         8   -> board_remap_ram
         8   -> non_secure_it_init
         8   -> pmc_select_external_osc
         8   -> pmc_set_mck_divider
         8   -> pmc_set_mck_plla_div
         8   -> pmc_set_mck_prescaler
         8   -> pmc_set_plla
         8   -> pmc_switch_mck_to_main
         8   -> pmc_switch_mck_to_pll
         8   -> secure_it_init
      16   abort_c_handler
        16   -> printf
       0   default_spurious_handler
       0   dummy_handler
       8   non_secure_it_init
         8   -> v_arm_clr_cpsr_bits
         8   -> v_arm_set_cpsr_bits
      16   prefetch_c_handler
        16   -> printf
       8   secure_it_init
         8   -> v_arm_clr_cpsr_bits
       8   undefined_c_Handler
         8   -> printf
       0   v_arm_clr_cpsr_bits
       0   v_arm_set_cpsr_bits


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_14
       4  ??DataTable4_15
       4  ??DataTable4_16
       4  ??DataTable4_17
       4  ??DataTable4_18
       4  ??DataTable4_19
       4  ??DataTable4_2
       4  ??DataTable4_20
       4  ??DataTable4_21
       4  ??DataTable4_22
       4  ??DataTable4_23
       4  ??DataTable4_24
       4  ??DataTable4_25
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_13
       4  ??DataTable5_14
       4  ??DataTable5_15
       4  ??DataTable5_16
       4  ??DataTable5_17
       4  ??DataTable5_18
       4  ??DataTable5_19
       4  ??DataTable5_2
       4  ??DataTable5_20
       4  ??DataTable5_21
       4  ??DataTable5_22
       4  ??DataTable5_23
       4  ??DataTable5_24
       4  ??DataTable5_25
       4  ??DataTable5_26
       4  ??DataTable5_27
       4  ??DataTable5_28
       4  ??DataTable5_29
       4  ??DataTable5_3
       4  ??DataTable5_30
       4  ??DataTable5_31
       4  ??DataTable5_32
       4  ??DataTable5_33
       4  ??DataTable5_34
       4  ??DataTable5_35
       4  ??DataTable5_36
       4  ??DataTable5_37
       4  ??DataTable5_38
       4  ??DataTable5_39
       4  ??DataTable5_4
       4  ??DataTable5_40
       4  ??DataTable5_41
       4  ??DataTable5_42
       4  ??DataTable5_43
       4  ??DataTable5_44
       4  ??DataTable5_45
       4  ??DataTable5_46
       4  ??DataTable5_47
       4  ??DataTable5_48
       4  ??DataTable5_49
       4  ??DataTable5_5
       4  ??DataTable5_50
       4  ??DataTable5_51
       4  ??DataTable5_52
       4  ??DataTable5_53
       4  ??DataTable5_54
       4  ??DataTable5_55
       4  ??DataTable5_56
       4  ??DataTable5_57
       4  ??DataTable5_58
       4  ??DataTable5_59
       4  ??DataTable5_6
       4  ??DataTable5_60
       4  ??DataTable5_61
       4  ??DataTable5_62
       4  ??DataTable5_63
       4  ??DataTable5_64
       4  ??DataTable5_65
       4  ??DataTable5_66
       4  ??DataTable5_67
       4  ??DataTable5_68
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
      28  ?_0
      16  ?_1
      24  ?_10
      20  ?_11
      44  ?_12
      28  ?_13
      44  ?_14
      24  ?_15
      28  ?_16
      76  ?_17
      36  ?_18
      36  ?_19
      12  ?_2
      44  ?_20
      52  ?_21
      44  ?_22
      60  ?_23
      60  ?_24
      20  ?_25
      24  ?_3
      32  ?_4
      28  ?_5
      20  ?_6
      24  ?_7
      28  ?_8
      44  ?_9
       4  Spurious_handler
          SAIC_Handler
          PIT_Handler
          WDT_Handler
          PIOD_Handler
          XDMAC0_Handler
          ICM_Handler
          AES_Handler
          AESB_Handler
          TDES_Handler
          SHA_Handler
          MPDDRC_Handler
          HSMC_Handler
          PIOA_Handler
          PIOB_Handler
          PIOC_Handler
          UART0_Handler
          UART1_Handler
          UART2_Handler
          UART3_Handler
          UART4_Handler
          SPI0_Handler
          SPI1_Handler
          TC0_Handler
          TC1_Handler
          PWM_Handler
          ADC_Handler
          UHPHS_Handler
          UDPHS_Handler
          SSC0_Handler
          SSC1_Handler
          XDMAC1_Handler
          LCDC_Handler
          TRNG_Handler
          GMAC_Handler
          AIC_Handler
          SFC_Handler
          SFR_Handler
          L2CC_Handler
          MATRIX1_Handler
          MATRIX0_Handler
          FLEXCOM0_Handler
          FLEXCOM1_Handler
          FLEXCOM2_Handler
          FLEXCOM3_Handler
          FLEXCOM4_Handler
          TWIHS0_Handler
          TWIHS1_Handler
          QSPI0_Handler
          QSPI1_Handler
          PDMIC_Handler
          I2SC0_Handler
          I2SC1_Handler
          CLASSD_Handler
          ACC_Handler
          RXLP_Handler
          CHIPID_Handler
          dummy_handler
     100  __low_level_init
      56  _id_h64_matrix
     128  abort_c_handler
     184  abort_status
       4  default_spurious_handler
    1736  non_secure_it_init
     316  peripherals_min_clock_dividers
     104  prefetch_c_handler
    1728  secure_it_init
      16  undefined_c_Handler
      24  v_arm_clr_cpsr_bits
      20  v_arm_set_cpsr_bits

 
   184 bytes in section .data
 1 268 bytes in section .rodata
 4 244 bytes in section SOFTPACK
 
 4 244 bytes of CODE  memory
 1 268 bytes of CONST memory
   184 bytes of DATA  memory

Errors: none
Warnings: 1
