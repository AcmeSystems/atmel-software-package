###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.1.7746/W32 for ARM        29/Apr/2015  16:09:35
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  arm
#    Endian       =  little
#    Source file  =  
#        C:\Users\dfronek\Documents\Project\softpack\drivers\core\pio4.c
#    Command line =  
#        C:\Users\dfronek\Documents\Project\softpack\drivers\core\pio4.c -D
#        BOARD_SAMA5D2_XPLAINED -D API_PIOv4 -D SERIE_SAMA5D2 -D CHIP_SAMA5D21
#        -lcN
#        C:\Users\dfronek\Documents\Project\softpack\examples\test_board_hw\Debug\List\
#        -o
#        C:\Users\dfronek\Documents\Project\softpack\examples\test_board_hw\Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-A5 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0_2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\test_board_hw/../../\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\test_board_hw/../../drivers\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\test_board_hw/../../examples\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\test_board_hw/../../lib\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\test_board_hw/../../target\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\test_board_hw/../../target/include\
#        -I
#        C:\Users\dfronek\Documents\Project\softpack\examples\test_board_hw/../../target/sama5d2\
#        --interwork --cpu_mode arm -On
#    List file    =  
#        C:\Users\dfronek\Documents\Project\softpack\examples\test_board_hw\Debug\List\pio4.lst
#    Object file  =  
#        C:\Users\dfronek\Documents\Project\softpack\examples\test_board_hw\Debug\Obj\pio4.o
#
###############################################################################

C:\Users\dfronek\Documents\Project\softpack\drivers\core\pio4.c
      1          /* ----------------------------------------------------------------------------
      2           *         SAM Software Package License
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2015, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          /** \addtogroup pio_module Working with PIO
     31           * \section Purpose
     32           * The PIO driver provides the Interface for configuration the Parallel Input/Output
     33           *  Controller (PIO).
     34           *
     35           * \section Usage
     36           * <ul>
     37           * <li>  Initialize the PIO with the desired period using pio_configure().
     38           * <li>  Set a high or low output level on the given PIO using pio_set() or pio_clear().
     39           * <li>  Get the level of the given PIOs using pio_get() or pio_get_output_date_status().
     40           * <li>  Configures Glitch or Debouncing filter for given input PIO using pio_set_debounce_filter().
     41           * <li>  Enable & disable write protect of the given PIOs using pio_enable_write_protect() or pio_disable_write_protect().
     42           * <li>  Get write protect violation information of given PIO using pio_get_write_protect_violation_info().
     43           * </li>
     44           * </ul>
     45           *
     46           * For more accurate information, please look at the PIT section of the Datasheet.
     47           *
     48           * Related files :\n
     49           * \ref pio.c\n
     50           * \ref pio3.h\n
     51          */
     52          /*@{*/
     53          /*@}*/
     54          
     55          /**
     56           * \file
     57           *
     58           * Implementation of PIO V3 (Parallel Input/Output) controller.
     59           *
     60           */
     61          /*----------------------------------------------------------------------------
     62           *        Headers
     63           *----------------------------------------------------------------------------*/
     64          
     65          #include "chip.h"
     66          #include "core/pio.h"
     67          
     68          #include <string.h>
     69          
     70          /*----------------------------------------------------------------------------
     71           *        Local define
     72           *----------------------------------------------------------------------------*/
     73          
     74          struct _bitfield_pio_cfgr_func {
     75          	uint32_t
     76          	func		: 3,
     77          	rfu3_7		: 5,
     78          	dir			: 1,
     79          	puen		: 1,
     80          	pden		: 1,
     81          	rfu11		: 1,
     82          	ifen		: 1,
     83          	ifscen		: 1,
     84          	opd			: 1,
     85          	schmitt		: 1,
     86          	drvstr		: 2,
     87          	rfu18_23	: 6,
     88          	evtsel		: 3,
     89          	rfu27_28	: 2,
     90          	pcfs		: 1,
     91          	icfs		: 1,
     92          	tampen		: 1;
     93          };
     94          
     95          /*----------------------------------------------------------------------------
     96           *        Local functions
     97           *----------------------------------------------------------------------------*/
     98          
     99          
    100          
    101          /*----------------------------------------------------------------------------
    102           *         Exported functions
    103           *----------------------------------------------------------------------------*/
    104          
    105          /**
    106           * \brief Configures a list of Pin instances, each of which can either hold a single
    107           * pin or a group of pins, depending on the mask value; all pins are configured
    108           * by this function. The size of the array must also be provided and is easily
    109           * computed using PIO_LISTSIZE whenever its length is not known in advance.
    110           *
    111           * \param list  Pointer to a list of _pin instances.
    112           * \param size  Size of the _pin list (calculated using PIN_LISTSIZE).
    113           *
    114           * \return 1 if the pins have been configured properly; otherwise 0.
    115           */
    116          
    117          uint8_t pio_configure(const struct _pin *pin_list, uint32_t size)
    118          {
    119          	struct _bitfield_pio_cfgr_func 	bf1;
    120          	uint8_t group;
    121          	PioIo_group* pioiog;
    122          
    123          	/* Configure pins */
    124          	while (size > 0)
    125          	{
    126          		memset (&bf1, 0x00, sizeof(struct _bitfield_pio_cfgr_func));
    127          		group = pin_list->id;
    128          		pioiog = &pin_list->pio->PIO_IO_GROUP[group];
    129          
    130          		if ( pin_list->attribute != PIO_DEFAULT) {
    131          			bf1.puen = (pin_list->attribute & PIO_PULLUP)? 1:0 ;
    132          			bf1.pden = (pin_list->attribute & PIO_PULLDOWN)? 1:0 ;
    133          			bf1.ifen = (pin_list->attribute & PIO_DEGLITCH)? 1:0 ;
    134          			bf1.ifscen = (pin_list->attribute & PIO_FILTER_SLOW_CLOCK)? 1:0 ;
    135          			bf1.opd	= (pin_list->attribute & PIO_OPENDRAIN)? 1:0 ;
    136          			bf1.schmitt	= (pin_list->attribute & PIO_TRIGGER_DIS)? 1:0 ;
    137          			bf1.drvstr = pin_list->attribute & PIO_DRVSTR_Msk;
    138          			bf1.evtsel = pin_list->attribute & PIO_EVTSEL_Msk;
    139          			bf1.pcfs = (pin_list->attribute & PIO_PCFS_FREEZE)? 1:0 ;
    140          			bf1.icfs = (pin_list->attribute & PIO_ICFS_FREEZE)? 1:0 ;
    141          			bf1.tampen = (pin_list->attribute & PIO_TAMPEN_FREEZE)? 1:0 ;
    142          		}
    143          
    144                  switch ( pin_list->type ){
    145          
    146                      case PIO_PERIPH_A:
    147          				bf1.func = PIO_CFGR_FUNC_PERIPH_A;
    148          				break;
    149          			case PIO_PERIPH_B:
    150          				bf1.func = PIO_CFGR_FUNC_PERIPH_B;
    151          				break;
    152                      case PIO_PERIPH_C:
    153          				bf1.func = PIO_CFGR_FUNC_PERIPH_C;
    154          				break;
    155                      case PIO_PERIPH_D:
    156          				bf1.func = PIO_CFGR_FUNC_PERIPH_D;
    157          				break;
    158                      case PIO_PERIPH_E:
    159          				bf1.func = PIO_CFGR_FUNC_PERIPH_E;
    160          				break;
    161          
    162          			case PIO_GENERIC:
    163          			case PIO_INPUT:
    164          				bf1.dir = 0;
    165                          break;
    166          
    167                      case PIO_OUTPUT_0:
    168          				bf1.dir = 1;
    169          				pio_clear(pin_list);
    170                          break;
    171          
    172          			case PIO_OUTPUT_1:
    173          				bf1.dir = 1;
    174          				pio_set(pin_list);
    175                          break;
    176          
    177                      default:
    178          			case PIO_PERIPH_F:
    179                      case PIO_PERIPH_G:
    180          				return 0;
    181                  }
    182          
    183          		pioiog->PIO_MSKR = pin_list->mask;
    184          		memcpy ((void*)pioiog->PIO_CFGR, &bf1, sizeof(struct _bitfield_pio_cfgr_func));
    185          
    186            		pin_list++;
    187          		size--;
    188          	}
    189          	return 1;
    190          }
    191          
    192          /**
    193           * \brief Sets a high output level on all the PIOs defined in the given Pin instance.
    194           * This has no immediate effects on PIOs that are not output, but the PIO
    195           * controller will memorize the value they are changed to outputs.
    196           *
    197           * \param pin  Pointer to a Pin instance describing one or more pins.
    198           */
    199          void pio_set(const struct _pin *pin)
    200          {
    201          	PioIo_group* pioiog = &pin->pio->PIO_IO_GROUP[pin->id];
    202          	pioiog->PIO_SODR = pin->mask;
    203          }
    204          
    205          /**
    206           * \brief Sets a low output level on all the PIOs defined in the given Pin instance.
    207           * This has no immediate effects on PIOs that are not output, but the PIO
    208           * controller will memorize the value they are changed to outputs.
    209           *
    210           * \param pin  Pointer to a Pin instance describing one or more pins.
    211           */
    212          void pio_clear(const struct _pin *pin)
    213          {
    214          	PioIo_group* pioiog = &pin->pio->PIO_IO_GROUP[pin->id];
    215          	pioiog->PIO_CODR = pin->mask;
    216          }
    217          
    218          /**
    219           * \brief Returns 1 if one or more PIO of the given Pin instance currently have
    220           * a high level; otherwise returns 0. This method returns the actual value that
    221           * is being read on the pin. To return the supposed output value of a pin, use
    222           * pio_get_output_date_status() instead.
    223           *
    224           * \param pin  Pointer to a Pin instance describing one or more pins.
    225           *
    226           * \return 1 if the Pin instance contains at least one PIO that currently has
    227           * a high level; otherwise 0.
    228           */
    229          uint8_t pio_get(const struct _pin *pin)
    230          {
    231              uint32_t reg ;
    232          	PioIo_group* pioiog = &pin->pio->PIO_IO_GROUP[pin->id];
    233          
    234              if ((pin->type == PIO_OUTPUT_0) || (pin->type == PIO_OUTPUT_1)) {
    235                  reg = pioiog->PIO_ODSR ;
    236              }
    237              else {
    238                  reg = pioiog->PIO_PDSR ;
    239              }
    240              if ( (reg & pin->mask) == 0 ) {
    241                  return 0 ;
    242              }
    243              else {
    244                  return 1 ;
    245              }
    246          }
    247          
    248          /**
    249           * \brief Returns 1 if one or more PIO of the given Pin are configured to output a
    250           * high level (even if they are not output).
    251           * To get the actual value of the pin, use pio_get() instead.
    252           *
    253           * \param pin  Pointer to a Pin instance describing one or more pins.
    254           *
    255           * \return 1 if the Pin instance contains at least one PIO that is configured
    256           * to output a high level; otherwise 0.
    257           */
    258          uint8_t pio_get_output_data_status(const struct _pin *pin)
    259          {
    260          	PioIo_group* pioiog = &pin->pio->PIO_IO_GROUP[pin->id];
    261              if ((pioiog->PIO_ODSR & pin->mask) == 0) {
    262                  return 0;
    263              }
    264              else {
    265                  return 1;
    266              }
    267          }
    268          
    269          /**
    270           * \brief Configures Glitch or Debouncing filter for input.
    271           *
    272           * \param pin  Pointer to a Pin instance describing one or more pins.
    273           * \param cuttoff  Cutt off frequency for debounce filter.
    274           */
    275          void pio_set_debounce_filter(const struct _pin *pin, uint32_t cuttoff)
    276          {
    277          	Pio *pio = pin->pio;
    278          	if (cuttoff == 0) {
    279          	   pio->S_PIO_SCDR = 0;
    280          	}
    281          	else {
    282          		/* the lowest 14 bits work */
    283          		pio->S_PIO_SCDR = ((32678/(2*(cuttoff))) - 1) & 0x3FFF;
    284          	}
    285          }
    286          
    287          /**
    288           * \brief Enable write protect.
    289           *
    290           * \param pin  Pointer to a Pin instance describing one or more pins.
    291           */
    292          void pio_enable_write_protect(const struct _pin *pin)
    293          {
    294          	Pio *pio = pin->pio;
    295          	pio->PIO_WPMR = (PIO_WPMR_WPKEY_VALID | PIO_WPMR_WPEN_EN  );
    296          }
    297          
    298          /**
    299           * \brief Disable write protect.
    300           *
    301           * \param pin  Pointer to a Pin instance describing one or more pins.
    302           */
    303          void pio_disable_write_protect(const struct _pin *pin)
    304          {
    305          	Pio *pio = pin->pio;
    306          	pio->PIO_WPMR = (PIO_WPMR_WPKEY_VALID | PIO_WPMR_WPEN_DIS );
    307          }
    308          
    309          /**
    310           * \brief Get write protect violation information.
    311           *
    312           * \param pin  Pointer to a Pin instance describing one or more pins.
    313           */
    314          uint32_t pio_get_write_protect_violation_info(const struct _pin * pin)
    315          {
    316          	Pio *pio = pin->pio;
    317          	return pio->PIO_WPSR;
    318          }
    319          
    320          /**
    321           * \brief Configure all pio output low
    322           *
    323           * \param pio  Pointer to a Pio instance describing one or more pins.
    324           * \param pioId PIO ID
    325           * \param mask  Bitmask of one or more pin(s) to configure.
    326           */
    327          void pio_output_low (Pio *pio, uint32_t pioId ,uint32_t mask)
    328          {
    329          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   pio_clear
      40   pio_configure
        40   -> __aeabi_memcpy
        40   -> __aeabi_memset
        40   -> pio_clear
        40   -> pio_set
       0   pio_disable_write_protect
       0   pio_enable_write_protect
       0   pio_get
       0   pio_get_output_data_status
       0   pio_get_write_protect_violation_info
       0   pio_output_low
       0   pio_set
      16   pio_set_debounce_filter
        16 __aeabi_uidiv


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
      48  _id_h64_matrix
      28  pio_clear
     580  pio_configure
      16  pio_disable_write_protect
      16  pio_enable_write_protect
      92  pio_get
      52  pio_get_output_data_status
      16  pio_get_write_protect_violation_info
       4  pio_output_low
      28  pio_set
      76  pio_set_debounce_filter

 
  48 bytes in section .rodata
 916 bytes in section .text
 
 916 bytes of CODE  memory
  48 bytes of CONST memory

Errors: none
Warnings: 1
