/* ---------------------------------------------------------------------------- */
/*                  Atmel Microcontroller Software Support                      */
/*                       SAM Software Package License                           */
/* ---------------------------------------------------------------------------- */
/* Copyright (c) %copyright_year%, Atmel Corporation                                        */
/*                                                                              */
/* All rights reserved.                                                         */
/*                                                                              */
/* Redistribution and use in source and binary forms, with or without           */
/* modification, are permitted provided that the following condition is met:    */
/*                                                                              */
/* - Redistributions of source code must retain the above copyright notice,     */
/* this list of conditions and the disclaimer below.                            */
/*                                                                              */
/* Atmel's name may not be used to endorse or promote products derived from     */
/* this software without specific prior written permission.                     */
/*                                                                              */
/* DISCLAIMER:  THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR   */
/* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF */
/* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE   */
/* DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,      */
/* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT */
/* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,  */
/* OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF    */
/* LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING         */
/* NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, */
/* EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                           */
/* ---------------------------------------------------------------------------- */

#ifndef _SAMA5D2_
#define _SAMA5D2_

/** \addtogroup SAMA5D2_definitions SAMA5D2 definitions
  This file defines all structures and symbols for SAMA5D2:
    - registers and bitfields
    - peripheral base address
    - peripheral ID
    - PIO definitions
*/
/*@{*/

#ifdef __cplusplus
 extern "C" {
#endif 

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
#include <stdint.h>
#ifdef __cplusplus
  #define __I  volatile       /**< Defines 'read-only'  permissions */
#else
  #define __I  volatile const /**< Defines 'read-only'  permissions */
#endif
#define   __O  volatile       /**< Defines 'write-only' permissions */
#define   __IO volatile       /**< Defines 'read/write' permissions */
#endif

typedef enum IRQn
{
  SAIC_FIQ_IRQn        =  0, /**<  0 SAMA5D2 FIQ Interrupt ID (SAIC_FIQ) */
  PMC_IRQn             =  1, /**<  1 SAMA5D2 System Controller Interrupt (PMC) */
  ARM_PMU_IRQn         =  2, /**<  2 SAMA5D2 Performance Monitor Unit (PMU) (ARM_PMU) */
  PIT_IRQn             =  3, /**<  3 SAMA5D2 Periodic Interval Timer Interrupt (PIT) */
  WDT_IRQn             =  4, /**<  4 SAMA5D2 Watchdog timer Interrupt (WDT) */
  GMAC_IRQn            =  5, /**<  5 SAMA5D2 Ethernet MAC (GMAC) */
  XDMAC0_IRQn          =  6, /**<  6 SAMA5D2 DMA Controller 0 (XDMAC0) */
  XDMAC1_IRQn          =  7, /**<  7 SAMA5D2 DMA Controller 1 (XDMAC1) */
  ICM_IRQn             =  8, /**<  8 SAMA5D2 Integritry Check Monitor (ICM) */
  AES_IRQn             =  9, /**<  9 SAMA5D2 Advanced Enion Standard (AES) */
  AESB_IRQn            = 10, /**< 10 SAMA5D2 AES bridge (AESB) */
  TDES_IRQn            = 11, /**< 11 SAMA5D2 Triple Data Enion Standard (TDES) */
  SHA_IRQn             = 12, /**< 12 SAMA5D2 SHA Signature (SHA) */
  MPDDRC_IRQn          = 13, /**< 13 SAMA5D2 MPDDR controller (MPDDRC) */
  MATRIX1_IRQn         = 14, /**< 14 SAMA5D2 H32MX, 32-bit AHB Matrix (MATRIX1) */
  MATRIX0_IRQn         = 15, /**< 15 SAMA5D2 H64MX, 64-bit AHB Matrix (MATRIX0) */
  SECUMOD_IRQn         = 16, /**< 16 SAMA5D2 Secure Module (SECUMOD) */
  HSMC_IRQn            = 17, /**< 17 SAMA5D2 Multi-bit ECC Interrupt (HSMC) */
  PIOA_IRQn            = 18, /**< 18 SAMA5D2 Parallel I/O Controller (PIOA) */
  FLEXCOM0_IRQn        = 19, /**< 19 SAMA5D2 FLEXCOM 0 (FLEXCOM0) */
  FLEXCOM1_IRQn        = 20, /**< 20 SAMA5D2 FLEXCOM 1 (FLEXCOM1) */
  FLEXCOM2_IRQn        = 21, /**< 21 SAMA5D2 FLEXCOM 2 (FLEXCOM2) */
  FLEXCOM3_IRQn        = 22, /**< 22 SAMA5D2 FLEXCOM 3 (FLEXCOM3) */
  FLEXCOM4_IRQn        = 23, /**< 23 SAMA5D2 FLEXCOM 4 (FLEXCOM4) */
  UART0_IRQn           = 24, /**< 24 SAMA5D2 UART 0 (UART0) */
  UART1_IRQn           = 25, /**< 25 SAMA5D2 UART 1 (UART1) */
  UART2_IRQn           = 26, /**< 26 SAMA5D2 UART 2 (UART2) */
  UART3_IRQn           = 27, /**< 27 SAMA5D2 UART 3 (UART3) */
  UART4_IRQn           = 28, /**< 28 SAMA5D2 UART 4 (UART4) */
  TWIHS0_IRQn          = 29, /**< 29 SAMA5D2 Two-Wire Interface 0 (TWIHS0) */
  TWIHS1_IRQn          = 30, /**< 30 SAMA5D2 Two-Wire Interface 1 (TWIHS1) */
  SDHC0_IRQn           = 31, /**< 31 SAMA5D2 Ultra High Speed SD Host Controller 0 (SDHC0) */
  SDHC1_IRQn           = 32, /**< 32 SAMA5D2 Ultra High Speed SD Host Controller 1 (SDHC1) */
  SPI0_IRQn            = 33, /**< 33 SAMA5D2 Serial Peripheral Interface 0 (SPI0) */
  SPI1_IRQn            = 34, /**< 34 SAMA5D2 Serial Peripheral Interface 1 (SPI1) */
  TC0_IRQn             = 35, /**< 35 SAMA5D2 Timer Counter 0 (ch. 0, 1, 2) (TC0) */
  TC1_IRQn             = 36, /**< 36 SAMA5D2 Timer Counter 1 (ch. 3, 4, 5) (TC1) */
  PWM_IRQn             = 38, /**< 38 SAMA5D2 Pulse Width Modulation Controller0 (ch. 0, 1, 2, 3) (PWM) */
  ADC_IRQn             = 40, /**< 40 SAMA5D2 Touch Screen ADC Controller (ADC) */
  UHPHS_IRQn           = 41, /**< 41 SAMA5D2 USB Host High Speed (UHPHS) */
  UDPHS_IRQn           = 42, /**< 42 SAMA5D2 USB Device High Speed (UDPHS) */
  SSC0_IRQn            = 43, /**< 43 SAMA5D2 Synchronous Serial Controller 0 (SSC0) */
  SSC1_IRQn            = 44, /**< 44 SAMA5D2 Synchronous Serial Controller 1 (SSC1) */
  LCDC_IRQn            = 45, /**< 45 SAMA5D2 LCD Controller (LCDC) */
  ISI_IRQn             = 46, /**< 46 SAMA5D2 Camera Interface (ISI) */
  TRNG_IRQn            = 47, /**< 47 SAMA5D2 True Random Number Generator (TRNG) */
  PDMIC_IRQn           = 48, /**< 48 SAMA5D2 Pulse Density Modulation Interface Controller (PDMIC) */
  AIC_IRQ_IRQn         = 49, /**< 49 SAMA5D2 IRQ Interrupt ID (AIC_IRQ) */
  SFC_IRQn             = 50, /**< 50 SAMA5D2 Fuse Controller (SFC) */
  SECURAM_IRQn         = 51, /**< 51 SAMA5D2 Secured RAM (SECURAM) */
  QSPI0_IRQn           = 52, /**< 52 SAMA5D2 QSPI 0 (QSPI0) */
  QSPI1_IRQn           = 53, /**< 53 SAMA5D2 QSPI 1 (QSPI1) */
  I2SC0_IRQn           = 54, /**< 54 SAMA5D2 Inter-IC Sound Controller 0 (I2SC0) */
  I2SC1_IRQn           = 55, /**< 55 SAMA5D2 Inter-IC Sound Controller 1 (I2SC1) */
  CAN0_INT0_IRQn       = 56, /**< 56 SAMA5D2 MCAN 0 Interrupt0 (CAN0_INT0) */
  CAN1_INT0_IRQn       = 57, /**< 57 SAMA5D2 MCAN 1 Interrupt0 (CAN1_INT0) */
  PTC_IRQn             = 58, /**< 58 SAMA5D2 Peripheral Touch Controller (PTC) */
  CLASSD_IRQn          = 59, /**< 59 SAMA5D2 Audio Class D amplifier (CLASSD) */
  SFR_IRQn             = 60, /**< 60 SAMA5D2 Special Function Register  (SFR) */
  L2CC_IRQn            = 63, /**< 63 SAMA5D2 L2 Cache Controller (L2CC) */
  CAN0_INT1_IRQn       = 64, /**< 64 SAMA5D2 MCAN 0 Interrupt1 (CAN0_INT1) */
  CAN1_INT1_IRQn       = 65, /**< 65 SAMA5D2 MCAN 1 Interrupt1 (CAN1_INT1) */
  GMAC_Q1_IRQn         = 66, /**< 66 SAMA5D2 GMAC Queue 1 Interrupt (GMAC_Q1) */
  GMAC_Q2_IRQn         = 67, /**< 67 SAMA5D2 GMAC Queue 2 Interrupt (GMAC_Q2) */
  PIOB_IRQn            = 68, /**< 68 SAMA5D2  (PIOB) */
  PIOC_IRQn            = 69, /**< 69 SAMA5D2  (PIOC) */
  PIOD_IRQn            = 70, /**< 70 SAMA5D2  (PIOD) */
  SDHC0_TIMER_IRQn     = 71, /**< 71 SAMA5D2  (SDHC0_TIMER) */
  RSTC_IRQn            = 73, /**< 73 SAMA5D2 System Controller Interrupt (RSTC) */
  RTC_IRQn             = 74, /**< 74 SAMA5D2 System Controller Interrupt (RTC) */
  ACC_IRQn             = 75, /**< 75 SAMA5D2 Analog Comparator (ACC) */
  RXLP_IRQn            = 76, /**< 76 SAMA5D2 Uart Low Power (RXLP) */
  SFRBU_IRQn           = 77, /**< 77 SAMA5D2 Special Function Register BackUp (SFRBU) */
  CHIPID_IRQn          = 78, /**< 78 SAMA5D2 Chip ID (CHIPID) */

  PERIPH_COUNT_IRQn    = 79  /**< Number of peripheral IDs */
} IRQn_Type;

/* ************************************************************************** */
/**  SOFTWARE PERIPHERAL API DEFINITION FOR SAMA5D2 */
/* ************************************************************************** */
/** \addtogroup SAMA5D2_api Peripheral Software API */
/*@{*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR Analog Comparator Controller */
/* ============================================================================= */
/** \addtogroup SAMA5D2_ACC Analog Comparator Controller */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief Acc hardware registers */
typedef struct {
  __O  uint32_t ACC_CR;        /**< \brief (Acc Offset: 0x00) Control Register */
  __IO uint32_t ACC_MR;        /**< \brief (Acc Offset: 0x04) Mode Register */
  __I  uint32_t Reserved1[7];
  __O  uint32_t ACC_IER;       /**< \brief (Acc Offset: 0x24) Interrupt Enable Register */
  __O  uint32_t ACC_IDR;       /**< \brief (Acc Offset: 0x28) Interrupt Disable Register */
  __I  uint32_t ACC_IMR;       /**< \brief (Acc Offset: 0x2C) Interrupt Mask Register */
  __I  uint32_t ACC_ISR;       /**< \brief (Acc Offset: 0x30) Interrupt Status Register */
  __I  uint32_t Reserved2[24];
  __IO uint32_t ACC_ACR;       /**< \brief (Acc Offset: 0x94) Analog Control Register */
  __I  uint32_t Reserved3[19];
  __IO uint32_t ACC_WPMR;      /**< \brief (Acc Offset: 0xE4) Write Protection Mode Register */
  __I  uint32_t ACC_WPSR;      /**< \brief (Acc Offset: 0xE8) Write Protection Status Register */
  __I  uint32_t Reserved4[4];
  __I  uint32_t ACC_VER;       /**< \brief (Acc Offset: 0xFC) Version Register */
} Acc;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- ACC_CR : (ACC Offset: 0x00) Control Register -------- */
#define ACC_CR_SWRST (0x1u << 0) /**< \brief (ACC_CR) Software Reset */
/* -------- ACC_MR : (ACC Offset: 0x04) Mode Register -------- */
#define ACC_MR_SELMINUS_Pos 0
#define ACC_MR_SELMINUS_Msk (0x7u << ACC_MR_SELMINUS_Pos) /**< \brief (ACC_MR) Selection for Minus Comparator Input */
#define   ACC_MR_SELMINUS_TS (0x0u << 0) /**< \brief (ACC_MR) Select TS */
#define   ACC_MR_SELMINUS_ADVREF (0x1u << 0) /**< \brief (ACC_MR) Select ADVREF */
#define   ACC_MR_SELMINUS_DAC0 (0x2u << 0) /**< \brief (ACC_MR) Select DAC0 */
#define   ACC_MR_SELMINUS_DAC1 (0x3u << 0) /**< \brief (ACC_MR) Select DAC1 */
#define   ACC_MR_SELMINUS_AD0 (0x4u << 0) /**< \brief (ACC_MR) Select AD0 */
#define   ACC_MR_SELMINUS_AD1 (0x5u << 0) /**< \brief (ACC_MR) Select AD1 */
#define   ACC_MR_SELMINUS_AD2 (0x6u << 0) /**< \brief (ACC_MR) Select AD2 */
#define   ACC_MR_SELMINUS_AD3 (0x7u << 0) /**< \brief (ACC_MR) Select AD3 */
#define ACC_MR_SELPLUS_Pos 4
#define ACC_MR_SELPLUS_Msk (0x7u << ACC_MR_SELPLUS_Pos) /**< \brief (ACC_MR) Selection For Plus Comparator Input */
#define   ACC_MR_SELPLUS_AD0 (0x0u << 4) /**< \brief (ACC_MR) Select AD0 */
#define   ACC_MR_SELPLUS_AD1 (0x1u << 4) /**< \brief (ACC_MR) Select AD1 */
#define   ACC_MR_SELPLUS_AD2 (0x2u << 4) /**< \brief (ACC_MR) Select AD2 */
#define   ACC_MR_SELPLUS_AD3 (0x3u << 4) /**< \brief (ACC_MR) Select AD3 */
#define   ACC_MR_SELPLUS_AD4 (0x4u << 4) /**< \brief (ACC_MR) Select AD4 */
#define   ACC_MR_SELPLUS_AD5 (0x5u << 4) /**< \brief (ACC_MR) Select AD5 */
#define   ACC_MR_SELPLUS_AD6 (0x6u << 4) /**< \brief (ACC_MR) Select AD6 */
#define   ACC_MR_SELPLUS_AD7 (0x7u << 4) /**< \brief (ACC_MR) Select AD7 */
#define ACC_MR_ACEN (0x1u << 8) /**< \brief (ACC_MR) Analog Comparator Enable */
#define   ACC_MR_ACEN_DIS (0x0u << 8) /**< \brief (ACC_MR) Analog comparator disabled. */
#define   ACC_MR_ACEN_EN (0x1u << 8) /**< \brief (ACC_MR) Analog comparator enabled. */
#define ACC_MR_EDGETYP_Pos 9
#define ACC_MR_EDGETYP_Msk (0x3u << ACC_MR_EDGETYP_Pos) /**< \brief (ACC_MR) Edge Type */
#define   ACC_MR_EDGETYP_RISING (0x0u << 9) /**< \brief (ACC_MR) Only rising edge of comparator output */
#define   ACC_MR_EDGETYP_FALLING (0x1u << 9) /**< \brief (ACC_MR) Falling edge of comparator output */
#define   ACC_MR_EDGETYP_ANY (0x2u << 9) /**< \brief (ACC_MR) Any edge of comparator output */
#define ACC_MR_INV (0x1u << 12) /**< \brief (ACC_MR) Invert Comparator Output */
#define   ACC_MR_INV_DIS (0x0u << 12) /**< \brief (ACC_MR) Analog comparator output is directly processed. */
#define   ACC_MR_INV_EN (0x1u << 12) /**< \brief (ACC_MR) Analog comparator output is inverted prior to being processed. */
#define ACC_MR_SELFS (0x1u << 13) /**< \brief (ACC_MR) Selection Of Fault Source */
#define   ACC_MR_SELFS_CF (0x0u << 13) /**< \brief (ACC_MR) The CF flag is used to drive the FAULT output. */
#define   ACC_MR_SELFS_OUTPUT (0x1u << 13) /**< \brief (ACC_MR) The output of the analog comparator flag is used to drive the FAULT output. */
#define ACC_MR_FE (0x1u << 14) /**< \brief (ACC_MR) Fault Enable */
#define   ACC_MR_FE_DIS (0x0u << 14) /**< \brief (ACC_MR) The FAULT output is tied to 0. */
#define   ACC_MR_FE_EN (0x1u << 14) /**< \brief (ACC_MR) The FAULT output is driven by the signal defined by SELFS. */
/* -------- ACC_IER : (ACC Offset: 0x24) Interrupt Enable Register -------- */
#define ACC_IER_CE (0x1u << 0) /**< \brief (ACC_IER) Comparison Edge */
/* -------- ACC_IDR : (ACC Offset: 0x28) Interrupt Disable Register -------- */
#define ACC_IDR_CE (0x1u << 0) /**< \brief (ACC_IDR) Comparison Edge */
/* -------- ACC_IMR : (ACC Offset: 0x2C) Interrupt Mask Register -------- */
#define ACC_IMR_CE (0x1u << 0) /**< \brief (ACC_IMR) Comparison Edge */
/* -------- ACC_ISR : (ACC Offset: 0x30) Interrupt Status Register -------- */
#define ACC_ISR_CE (0x1u << 0) /**< \brief (ACC_ISR) Comparison Edge */
#define ACC_ISR_SCO (0x1u << 1) /**< \brief (ACC_ISR) Synchronized Comparator Output */
#define ACC_ISR_MASK (0x1u << 31) /**< \brief (ACC_ISR) Flag Mask */
/* -------- ACC_ACR : (ACC Offset: 0x94) Analog Control Register -------- */
#define ACC_ACR_ISEL (0x1u << 0) /**< \brief (ACC_ACR) Current Selection */
#define   ACC_ACR_ISEL_LOPW (0x0u << 0) /**< \brief (ACC_ACR) Low-power option. */
#define   ACC_ACR_ISEL_HISP (0x1u << 0) /**< \brief (ACC_ACR) High-speed option. */
#define ACC_ACR_HYST_Pos 1
#define ACC_ACR_HYST_Msk (0x3u << ACC_ACR_HYST_Pos) /**< \brief (ACC_ACR) Hysteresis Selection */
#define ACC_ACR_HYST(value) ((ACC_ACR_HYST_Msk & ((value) << ACC_ACR_HYST_Pos)))
/* -------- ACC_WPMR : (ACC Offset: 0xE4) Write Protection Mode Register -------- */
#define ACC_WPMR_WPEN (0x1u << 0) /**< \brief (ACC_WPMR) Write Protection Enable */
#define ACC_WPMR_WPKEY_Pos 8
#define ACC_WPMR_WPKEY_Msk (0xffffffu << ACC_WPMR_WPKEY_Pos) /**< \brief (ACC_WPMR) Write Protection Key */
#define   ACC_WPMR_WPKEY_PASSWD (0x414343u << 8) /**< \brief (ACC_WPMR) Writing any other value in this field aborts the write operation of the WPEN bit.Always reads as 0. */
/* -------- ACC_WPSR : (ACC Offset: 0xE8) Write Protection Status Register -------- */
#define ACC_WPSR_WPVS (0x1u << 0) /**< \brief (ACC_WPSR) Write Protection Violation Status */
/* -------- ACC_VER : (ACC Offset: 0xFC) Version Register -------- */
#define ACC_VER_VERSION_Pos 0
#define ACC_VER_VERSION_Msk (0xfffu << ACC_VER_VERSION_Pos) /**< \brief (ACC_VER) Version of the Hardware Module */
#define ACC_VER_MFN_Pos 16
#define ACC_VER_MFN_Msk (0x7u << ACC_VER_MFN_Pos) /**< \brief (ACC_VER) Metal Fix Number */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR Analog-to-Digital Converter */
/* ============================================================================= */
/** \addtogroup SAMA5D2_ADC Analog-to-Digital Converter */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief Adc hardware registers */
typedef struct {
  __O  uint32_t ADC_CR;       /**< \brief (Adc Offset: 0x00) Control Register */
  __IO uint32_t ADC_MR;       /**< \brief (Adc Offset: 0x04) Mode Register */
  __IO uint32_t ADC_SEQR1;    /**< \brief (Adc Offset: 0x08) Channel Sequence Register 1 */
  __IO uint32_t ADC_SEQR2;    /**< \brief (Adc Offset: 0x0C) Channel Sequence Register 2 */
  __O  uint32_t ADC_CHER;     /**< \brief (Adc Offset: 0x10) Channel Enable Register */
  __O  uint32_t ADC_CHDR;     /**< \brief (Adc Offset: 0x14) Channel Disable Register */
  __I  uint32_t ADC_CHSR;     /**< \brief (Adc Offset: 0x18) Channel Status Register */
  __I  uint32_t Reserved1[1];
  __I  uint32_t ADC_LCDR;     /**< \brief (Adc Offset: 0x20) Last Converted Data Register */
  __O  uint32_t ADC_IER;      /**< \brief (Adc Offset: 0x24) Interrupt Enable Register */
  __O  uint32_t ADC_IDR;      /**< \brief (Adc Offset: 0x28) Interrupt Disable Register */
  __I  uint32_t ADC_IMR;      /**< \brief (Adc Offset: 0x2C) Interrupt Mask Register */
  __I  uint32_t ADC_ISR;      /**< \brief (Adc Offset: 0x30) Interrupt Status Register */
  __IO uint32_t ADC_LCTMR;    /**< \brief (Adc Offset: 0x34) Last Channel Trigger Mode Register */
  __IO uint32_t ADC_LCCWR;    /**< \brief (Adc Offset: 0x38) Last Channel Compare Window Register */
  __I  uint32_t ADC_OVER;     /**< \brief (Adc Offset: 0x3C) Overrun Status Register */
  __IO uint32_t ADC_EMR;      /**< \brief (Adc Offset: 0x40) Extended Mode Register */
  __IO uint32_t ADC_CWR;      /**< \brief (Adc Offset: 0x44) Compare Window Register */
  __IO uint32_t ADC_CGR;      /**< \brief (Adc Offset: 0x48) Channel Gain Register */
  __IO uint32_t ADC_COR;      /**< \brief (Adc Offset: 0x4C) Channel Offset Register */
  __I  uint32_t ADC_CDR0;     /**< \brief (Adc Offset: 0x50) Channel Data Register 0 */
  __I  uint32_t ADC_CDR1;     /**< \brief (Adc Offset: 0x54) Channel Data Register 1 */
  __I  uint32_t ADC_CDR2;     /**< \brief (Adc Offset: 0x58) Channel Data Register 2 */
  __I  uint32_t ADC_CDR3;     /**< \brief (Adc Offset: 0x5C) Channel Data Register 3 */
  __I  uint32_t ADC_CDR4;     /**< \brief (Adc Offset: 0x60) Channel Data Register 4 */
  __I  uint32_t ADC_CDR5;     /**< \brief (Adc Offset: 0x64) Channel Data Register 5 */
  __I  uint32_t ADC_CDR6;     /**< \brief (Adc Offset: 0x68) Channel Data Register 6 */
  __I  uint32_t ADC_CDR7;     /**< \brief (Adc Offset: 0x6C) Channel Data Register 7 */
  __I  uint32_t ADC_CDR8;     /**< \brief (Adc Offset: 0x70) Channel Data Register 8 */
  __I  uint32_t ADC_CDR9;     /**< \brief (Adc Offset: 0x74) Channel Data Register 9 */
  __I  uint32_t ADC_CDR10;    /**< \brief (Adc Offset: 0x78) Channel Data Register 10 */
  __I  uint32_t ADC_CDR11;    /**< \brief (Adc Offset: 0x7C) Channel Data Register 11 */
  __I  uint32_t ADC_CDR12;    /**< \brief (Adc Offset: 0x80) Channel Data Register 12 */
  __I  uint32_t ADC_CDR13;    /**< \brief (Adc Offset: 0x84) Channel Data Register 13 */
  __I  uint32_t ADC_CDR14;    /**< \brief (Adc Offset: 0x88) Channel Data Register 14 */
  __I  uint32_t ADC_CDR15;    /**< \brief (Adc Offset: 0x8C) Channel Data Register 15 */
  __I  uint32_t ADC_CDR16;    /**< \brief (Adc Offset: 0x90) Channel Data Register 16 */
  __IO uint32_t ADC_ACR;      /**< \brief (Adc Offset: 0x94) Analog Control Register */
  __I  uint32_t Reserved2[6];
  __IO uint32_t ADC_TSMR;     /**< \brief (Adc Offset: 0xB0) Touchscreen Mode Register */
  __I  uint32_t ADC_XPOSR;    /**< \brief (Adc Offset: 0xB4) Touchscreen X Position Register */
  __I  uint32_t ADC_YPOSR;    /**< \brief (Adc Offset: 0xB8) Touchscreen Y Position Register */
  __I  uint32_t ADC_PRESSR;   /**< \brief (Adc Offset: 0xBC) Touchscreen Pressure Register */
  __IO uint32_t ADC_TRGR;     /**< \brief (Adc Offset: 0xC0) Trigger Register */
  __I  uint32_t Reserved3[8];
  __IO uint32_t ADC_WPMR;     /**< \brief (Adc Offset: 0xE4) Write Protection Mode Register */
  __I  uint32_t ADC_WPSR;     /**< \brief (Adc Offset: 0xE8) Write Protection Status Register */
  __I  uint32_t Reserved4[4];
  __I  uint32_t ADC_VERSION;  /**< \brief (Adc Offset: 0xFC) Version Register */
} Adc;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- ADC_CR : (ADC Offset: 0x00) Control Register -------- */
#define ADC_CR_SWRST (0x1u << 0) /**< \brief (ADC_CR) Software Reset */
#define ADC_CR_START (0x1u << 1) /**< \brief (ADC_CR) Start Conversion */
#define ADC_CR_TSCALIB (0x1u << 2) /**< \brief (ADC_CR) Touchscreen Calibration */
/* -------- ADC_MR : (ADC Offset: 0x04) Mode Register -------- */
#define ADC_MR_SLEEP (0x1u << 5) /**< \brief (ADC_MR) Sleep Mode */
#define   ADC_MR_SLEEP_NORMAL (0x0u << 5) /**< \brief (ADC_MR) Normal Mode: The ADC core and reference voltage circuitry are kept ON between conversions. */
#define   ADC_MR_SLEEP_SLEEP (0x1u << 5) /**< \brief (ADC_MR) Sleep Mode: The wake-up time can be modified by programming FWUP bit. */
#define ADC_MR_FWUP (0x1u << 6) /**< \brief (ADC_MR) Fast Wake Up */
#define   ADC_MR_FWUP_OFF (0x0u << 6) /**< \brief (ADC_MR) If SLEEP is 1 then both ADC core and reference voltage circuitry are OFF between conversions */
#define   ADC_MR_FWUP_ON (0x1u << 6) /**< \brief (ADC_MR) If SLEEP is 1 then Fast Wake-up Sleep mode: The voltage reference is ON between conversions and ADC Core is OFF */
#define ADC_MR_PRESCAL_Pos 8
#define ADC_MR_PRESCAL_Msk (0xffu << ADC_MR_PRESCAL_Pos) /**< \brief (ADC_MR) Prescaler Rate Selection */
#define ADC_MR_PRESCAL(value) ((ADC_MR_PRESCAL_Msk & ((value) << ADC_MR_PRESCAL_Pos)))
#define ADC_MR_STARTUP_Pos 16
#define ADC_MR_STARTUP_Msk (0xfu << ADC_MR_STARTUP_Pos) /**< \brief (ADC_MR) Start Up Time */
#define   ADC_MR_STARTUP_SUT0 (0x0u << 16) /**< \brief (ADC_MR) 0 periods of ADCCLK */
#define   ADC_MR_STARTUP_SUT8 (0x1u << 16) /**< \brief (ADC_MR) 8 periods of ADCCLK */
#define   ADC_MR_STARTUP_SUT16 (0x2u << 16) /**< \brief (ADC_MR) 16 periods of ADCCLK */
#define   ADC_MR_STARTUP_SUT24 (0x3u << 16) /**< \brief (ADC_MR) 24 periods of ADCCLK */
#define   ADC_MR_STARTUP_SUT64 (0x4u << 16) /**< \brief (ADC_MR) 64 periods of ADCCLK */
#define   ADC_MR_STARTUP_SUT80 (0x5u << 16) /**< \brief (ADC_MR) 80 periods of ADCCLK */
#define   ADC_MR_STARTUP_SUT96 (0x6u << 16) /**< \brief (ADC_MR) 96 periods of ADCCLK */
#define   ADC_MR_STARTUP_SUT112 (0x7u << 16) /**< \brief (ADC_MR) 112 periods of ADCCLK */
#define   ADC_MR_STARTUP_SUT512 (0x8u << 16) /**< \brief (ADC_MR) 512 periods of ADCCLK */
#define   ADC_MR_STARTUP_SUT576 (0x9u << 16) /**< \brief (ADC_MR) 576 periods of ADCCLK */
#define   ADC_MR_STARTUP_SUT640 (0xAu << 16) /**< \brief (ADC_MR) 640 periods of ADCCLK */
#define   ADC_MR_STARTUP_SUT704 (0xBu << 16) /**< \brief (ADC_MR) 704 periods of ADCCLK */
#define   ADC_MR_STARTUP_SUT768 (0xCu << 16) /**< \brief (ADC_MR) 768 periods of ADCCLK */
#define   ADC_MR_STARTUP_SUT832 (0xDu << 16) /**< \brief (ADC_MR) 832 periods of ADCCLK */
#define   ADC_MR_STARTUP_SUT896 (0xEu << 16) /**< \brief (ADC_MR) 896 periods of ADCCLK */
#define   ADC_MR_STARTUP_SUT960 (0xFu << 16) /**< \brief (ADC_MR) 960 periods of ADCCLK */
#define ADC_MR_SETTLING_Pos 20
#define ADC_MR_SETTLING_Msk (0x3u << ADC_MR_SETTLING_Pos) /**< \brief (ADC_MR) Analog Settling Time */
#define   ADC_MR_SETTLING_AST3 (0x0u << 20) /**< \brief (ADC_MR) 3 periods of ADCCLK */
#define   ADC_MR_SETTLING_AST5 (0x1u << 20) /**< \brief (ADC_MR) 5 periods of ADCCLK */
#define   ADC_MR_SETTLING_AST9 (0x2u << 20) /**< \brief (ADC_MR) 9 periods of ADCCLK */
#define   ADC_MR_SETTLING_AST17 (0x3u << 20) /**< \brief (ADC_MR) 17 periods of ADCCLK */
#define ADC_MR_ANACH (0x1u << 23) /**< \brief (ADC_MR) Analog Change */
#define   ADC_MR_ANACH_NONE (0x0u << 23) /**< \brief (ADC_MR) No analog change on channel switching: DIFF0, GAIN0 and OFF0 are used for all channels. */
#define   ADC_MR_ANACH_ALLOWED (0x1u << 23) /**< \brief (ADC_MR) Allows different analog settings for each channel. See ADC_CGR and ADC_COR registers. */
#define ADC_MR_TRACKTIM_Pos 24
#define ADC_MR_TRACKTIM_Msk (0xfu << ADC_MR_TRACKTIM_Pos) /**< \brief (ADC_MR) Tracking Time */
#define ADC_MR_TRACKTIM(value) ((ADC_MR_TRACKTIM_Msk & ((value) << ADC_MR_TRACKTIM_Pos)))
#define ADC_MR_TRANSFER_Pos 28
#define ADC_MR_TRANSFER_Msk (0x3u << ADC_MR_TRANSFER_Pos) /**< \brief (ADC_MR) Transfer Period */
#define ADC_MR_TRANSFER(value) ((ADC_MR_TRANSFER_Msk & ((value) << ADC_MR_TRANSFER_Pos)))
#define ADC_MR_USEQ (0x1u << 31) /**< \brief (ADC_MR) Use Sequence Enable */
#define   ADC_MR_USEQ_NUM_ORDER (0x0u << 31) /**< \brief (ADC_MR) Normal Mode: The controller converts channels in a simple numeric order depending only on the channel index. */
#define   ADC_MR_USEQ_REG_ORDER (0x1u << 31) /**< \brief (ADC_MR) User Sequence Mode: The sequence respects what is defined in ADC_SEQR1 and ADC_SEQR2 registers and can be used to convert the same channel several times. */
/* -------- ADC_SEQR1 : (ADC Offset: 0x08) Channel Sequence Register 1 -------- */
#define ADC_SEQR1_USCH1_Pos 0
#define ADC_SEQR1_USCH1_Msk (0xfu << ADC_SEQR1_USCH1_Pos) /**< \brief (ADC_SEQR1) User Sequence Number 1 */
#define ADC_SEQR1_USCH1(value) ((ADC_SEQR1_USCH1_Msk & ((value) << ADC_SEQR1_USCH1_Pos)))
#define ADC_SEQR1_USCH2_Pos 4
#define ADC_SEQR1_USCH2_Msk (0xfu << ADC_SEQR1_USCH2_Pos) /**< \brief (ADC_SEQR1) User Sequence Number 2 */
#define ADC_SEQR1_USCH2(value) ((ADC_SEQR1_USCH2_Msk & ((value) << ADC_SEQR1_USCH2_Pos)))
#define ADC_SEQR1_USCH3_Pos 8
#define ADC_SEQR1_USCH3_Msk (0xfu << ADC_SEQR1_USCH3_Pos) /**< \brief (ADC_SEQR1) User Sequence Number 3 */
#define ADC_SEQR1_USCH3(value) ((ADC_SEQR1_USCH3_Msk & ((value) << ADC_SEQR1_USCH3_Pos)))
#define ADC_SEQR1_USCH4_Pos 12
#define ADC_SEQR1_USCH4_Msk (0xfu << ADC_SEQR1_USCH4_Pos) /**< \brief (ADC_SEQR1) User Sequence Number 4 */
#define ADC_SEQR1_USCH4(value) ((ADC_SEQR1_USCH4_Msk & ((value) << ADC_SEQR1_USCH4_Pos)))
#define ADC_SEQR1_USCH5_Pos 16
#define ADC_SEQR1_USCH5_Msk (0xfu << ADC_SEQR1_USCH5_Pos) /**< \brief (ADC_SEQR1) User Sequence Number 5 */
#define ADC_SEQR1_USCH5(value) ((ADC_SEQR1_USCH5_Msk & ((value) << ADC_SEQR1_USCH5_Pos)))
#define ADC_SEQR1_USCH6_Pos 20
#define ADC_SEQR1_USCH6_Msk (0xfu << ADC_SEQR1_USCH6_Pos) /**< \brief (ADC_SEQR1) User Sequence Number 6 */
#define ADC_SEQR1_USCH6(value) ((ADC_SEQR1_USCH6_Msk & ((value) << ADC_SEQR1_USCH6_Pos)))
#define ADC_SEQR1_USCH7_Pos 24
#define ADC_SEQR1_USCH7_Msk (0xfu << ADC_SEQR1_USCH7_Pos) /**< \brief (ADC_SEQR1) User Sequence Number 7 */
#define ADC_SEQR1_USCH7(value) ((ADC_SEQR1_USCH7_Msk & ((value) << ADC_SEQR1_USCH7_Pos)))
#define ADC_SEQR1_USCH8_Pos 28
#define ADC_SEQR1_USCH8_Msk (0xfu << ADC_SEQR1_USCH8_Pos) /**< \brief (ADC_SEQR1) User Sequence Number 8 */
#define ADC_SEQR1_USCH8(value) ((ADC_SEQR1_USCH8_Msk & ((value) << ADC_SEQR1_USCH8_Pos)))
/* -------- ADC_SEQR2 : (ADC Offset: 0x0C) Channel Sequence Register 2 -------- */
#define ADC_SEQR2_USCH9_Pos 0
#define ADC_SEQR2_USCH9_Msk (0xfu << ADC_SEQR2_USCH9_Pos) /**< \brief (ADC_SEQR2) User Sequence Number 9 */
#define ADC_SEQR2_USCH9(value) ((ADC_SEQR2_USCH9_Msk & ((value) << ADC_SEQR2_USCH9_Pos)))
#define ADC_SEQR2_USCH10_Pos 4
#define ADC_SEQR2_USCH10_Msk (0xfu << ADC_SEQR2_USCH10_Pos) /**< \brief (ADC_SEQR2) User Sequence Number 10 */
#define ADC_SEQR2_USCH10(value) ((ADC_SEQR2_USCH10_Msk & ((value) << ADC_SEQR2_USCH10_Pos)))
#define ADC_SEQR2_USCH11_Pos 8
#define ADC_SEQR2_USCH11_Msk (0xfu << ADC_SEQR2_USCH11_Pos) /**< \brief (ADC_SEQR2) User Sequence Number 11 */
#define ADC_SEQR2_USCH11(value) ((ADC_SEQR2_USCH11_Msk & ((value) << ADC_SEQR2_USCH11_Pos)))
/* -------- ADC_CHER : (ADC Offset: 0x10) Channel Enable Register -------- */
#define ADC_CHER_CH0 (0x1u << 0) /**< \brief (ADC_CHER) Channel 0 Enable */
#define ADC_CHER_CH1 (0x1u << 1) /**< \brief (ADC_CHER) Channel 1 Enable */
#define ADC_CHER_CH2 (0x1u << 2) /**< \brief (ADC_CHER) Channel 2 Enable */
#define ADC_CHER_CH3 (0x1u << 3) /**< \brief (ADC_CHER) Channel 3 Enable */
#define ADC_CHER_CH4 (0x1u << 4) /**< \brief (ADC_CHER) Channel 4 Enable */
#define ADC_CHER_CH5 (0x1u << 5) /**< \brief (ADC_CHER) Channel 5 Enable */
#define ADC_CHER_CH6 (0x1u << 6) /**< \brief (ADC_CHER) Channel 6 Enable */
#define ADC_CHER_CH7 (0x1u << 7) /**< \brief (ADC_CHER) Channel 7 Enable */
#define ADC_CHER_CH8 (0x1u << 8) /**< \brief (ADC_CHER) Channel 8 Enable */
#define ADC_CHER_CH9 (0x1u << 9) /**< \brief (ADC_CHER) Channel 9 Enable */
#define ADC_CHER_CH10 (0x1u << 10) /**< \brief (ADC_CHER) Channel 10 Enable */
#define ADC_CHER_CH11 (0x1u << 11) /**< \brief (ADC_CHER) Channel 11 Enable */
/* -------- ADC_CHDR : (ADC Offset: 0x14) Channel Disable Register -------- */
#define ADC_CHDR_CH0 (0x1u << 0) /**< \brief (ADC_CHDR) Channel 0 Disable */
#define ADC_CHDR_CH1 (0x1u << 1) /**< \brief (ADC_CHDR) Channel 1 Disable */
#define ADC_CHDR_CH2 (0x1u << 2) /**< \brief (ADC_CHDR) Channel 2 Disable */
#define ADC_CHDR_CH3 (0x1u << 3) /**< \brief (ADC_CHDR) Channel 3 Disable */
#define ADC_CHDR_CH4 (0x1u << 4) /**< \brief (ADC_CHDR) Channel 4 Disable */
#define ADC_CHDR_CH5 (0x1u << 5) /**< \brief (ADC_CHDR) Channel 5 Disable */
#define ADC_CHDR_CH6 (0x1u << 6) /**< \brief (ADC_CHDR) Channel 6 Disable */
#define ADC_CHDR_CH7 (0x1u << 7) /**< \brief (ADC_CHDR) Channel 7 Disable */
#define ADC_CHDR_CH8 (0x1u << 8) /**< \brief (ADC_CHDR) Channel 8 Disable */
#define ADC_CHDR_CH9 (0x1u << 9) /**< \brief (ADC_CHDR) Channel 9 Disable */
#define ADC_CHDR_CH10 (0x1u << 10) /**< \brief (ADC_CHDR) Channel 10 Disable */
#define ADC_CHDR_CH11 (0x1u << 11) /**< \brief (ADC_CHDR) Channel 11 Disable */
/* -------- ADC_CHSR : (ADC Offset: 0x18) Channel Status Register -------- */
#define ADC_CHSR_CH0 (0x1u << 0) /**< \brief (ADC_CHSR) Channel 0 Status */
#define ADC_CHSR_CH1 (0x1u << 1) /**< \brief (ADC_CHSR) Channel 1 Status */
#define ADC_CHSR_CH2 (0x1u << 2) /**< \brief (ADC_CHSR) Channel 2 Status */
#define ADC_CHSR_CH3 (0x1u << 3) /**< \brief (ADC_CHSR) Channel 3 Status */
#define ADC_CHSR_CH4 (0x1u << 4) /**< \brief (ADC_CHSR) Channel 4 Status */
#define ADC_CHSR_CH5 (0x1u << 5) /**< \brief (ADC_CHSR) Channel 5 Status */
#define ADC_CHSR_CH6 (0x1u << 6) /**< \brief (ADC_CHSR) Channel 6 Status */
#define ADC_CHSR_CH7 (0x1u << 7) /**< \brief (ADC_CHSR) Channel 7 Status */
#define ADC_CHSR_CH8 (0x1u << 8) /**< \brief (ADC_CHSR) Channel 8 Status */
#define ADC_CHSR_CH9 (0x1u << 9) /**< \brief (ADC_CHSR) Channel 9 Status */
#define ADC_CHSR_CH10 (0x1u << 10) /**< \brief (ADC_CHSR) Channel 10 Status */
#define ADC_CHSR_CH11 (0x1u << 11) /**< \brief (ADC_CHSR) Channel 11 Status */
/* -------- ADC_LCDR : (ADC Offset: 0x20) Last Converted Data Register -------- */
#define ADC_LCDR_LDATA_Pos 0
#define ADC_LCDR_LDATA_Msk (0xfffu << ADC_LCDR_LDATA_Pos) /**< \brief (ADC_LCDR) Last Data Converted */
#define ADC_LCDR_CHNB_Pos 12
#define ADC_LCDR_CHNB_Msk (0xfu << ADC_LCDR_CHNB_Pos) /**< \brief (ADC_LCDR) Channel Number */
/* -------- ADC_IER : (ADC Offset: 0x24) Interrupt Enable Register -------- */
#define ADC_IER_EOC0 (0x1u << 0) /**< \brief (ADC_IER) End of Conversion Interrupt Enable 0 */
#define ADC_IER_EOC1 (0x1u << 1) /**< \brief (ADC_IER) End of Conversion Interrupt Enable 1 */
#define ADC_IER_EOC2 (0x1u << 2) /**< \brief (ADC_IER) End of Conversion Interrupt Enable 2 */
#define ADC_IER_EOC3 (0x1u << 3) /**< \brief (ADC_IER) End of Conversion Interrupt Enable 3 */
#define ADC_IER_EOC4 (0x1u << 4) /**< \brief (ADC_IER) End of Conversion Interrupt Enable 4 */
#define ADC_IER_EOC5 (0x1u << 5) /**< \brief (ADC_IER) End of Conversion Interrupt Enable 5 */
#define ADC_IER_EOC6 (0x1u << 6) /**< \brief (ADC_IER) End of Conversion Interrupt Enable 6 */
#define ADC_IER_EOC7 (0x1u << 7) /**< \brief (ADC_IER) End of Conversion Interrupt Enable 7 */
#define ADC_IER_EOC8 (0x1u << 8) /**< \brief (ADC_IER) End of Conversion Interrupt Enable 8 */
#define ADC_IER_EOC9 (0x1u << 9) /**< \brief (ADC_IER) End of Conversion Interrupt Enable 9 */
#define ADC_IER_EOC10 (0x1u << 10) /**< \brief (ADC_IER) End of Conversion Interrupt Enable 10 */
#define ADC_IER_EOC11 (0x1u << 11) /**< \brief (ADC_IER) End of Conversion Interrupt Enable 11 */
#define ADC_IER_LCCHG (0x1u << 19) /**< \brief (ADC_IER) Last Channel Change Interrupt Enable */
#define ADC_IER_XRDY (0x1u << 20) /**< \brief (ADC_IER) Touchscreen Measure XPOS Ready Interrupt Enable */
#define ADC_IER_YRDY (0x1u << 21) /**< \brief (ADC_IER) Touchscreen Measure YPOS Ready Interrupt Enable */
#define ADC_IER_PRDY (0x1u << 22) /**< \brief (ADC_IER) Touchscreen Measure Pressure Ready Interrupt Enable */
#define ADC_IER_DRDY (0x1u << 24) /**< \brief (ADC_IER) Data Ready Interrupt Enable */
#define ADC_IER_GOVRE (0x1u << 25) /**< \brief (ADC_IER) General Overrun Error Interrupt Enable */
#define ADC_IER_COMPE (0x1u << 26) /**< \brief (ADC_IER) Comparison Event Interrupt Enable */
#define ADC_IER_PEN (0x1u << 29) /**< \brief (ADC_IER) Pen Contact Interrupt Enable */
#define ADC_IER_NOPEN (0x1u << 30) /**< \brief (ADC_IER) No Pen Contact Interrupt Enable */
/* -------- ADC_IDR : (ADC Offset: 0x28) Interrupt Disable Register -------- */
#define ADC_IDR_EOC0 (0x1u << 0) /**< \brief (ADC_IDR) End of Conversion Interrupt Disable 0 */
#define ADC_IDR_EOC1 (0x1u << 1) /**< \brief (ADC_IDR) End of Conversion Interrupt Disable 1 */
#define ADC_IDR_EOC2 (0x1u << 2) /**< \brief (ADC_IDR) End of Conversion Interrupt Disable 2 */
#define ADC_IDR_EOC3 (0x1u << 3) /**< \brief (ADC_IDR) End of Conversion Interrupt Disable 3 */
#define ADC_IDR_EOC4 (0x1u << 4) /**< \brief (ADC_IDR) End of Conversion Interrupt Disable 4 */
#define ADC_IDR_EOC5 (0x1u << 5) /**< \brief (ADC_IDR) End of Conversion Interrupt Disable 5 */
#define ADC_IDR_EOC6 (0x1u << 6) /**< \brief (ADC_IDR) End of Conversion Interrupt Disable 6 */
#define ADC_IDR_EOC7 (0x1u << 7) /**< \brief (ADC_IDR) End of Conversion Interrupt Disable 7 */
#define ADC_IDR_EOC8 (0x1u << 8) /**< \brief (ADC_IDR) End of Conversion Interrupt Disable 8 */
#define ADC_IDR_EOC9 (0x1u << 9) /**< \brief (ADC_IDR) End of Conversion Interrupt Disable 9 */
#define ADC_IDR_EOC10 (0x1u << 10) /**< \brief (ADC_IDR) End of Conversion Interrupt Disable 10 */
#define ADC_IDR_EOC11 (0x1u << 11) /**< \brief (ADC_IDR) End of Conversion Interrupt Disable 11 */
#define ADC_IDR_LCCHG (0x1u << 19) /**< \brief (ADC_IDR) Last Channel Change Interrupt Disable */
#define ADC_IDR_XRDY (0x1u << 20) /**< \brief (ADC_IDR) Touchscreen Measure XPOS Ready Interrupt Disable */
#define ADC_IDR_YRDY (0x1u << 21) /**< \brief (ADC_IDR) Touchscreen Measure YPOS Ready Interrupt Disable */
#define ADC_IDR_PRDY (0x1u << 22) /**< \brief (ADC_IDR) Touchscreen Measure Pressure Ready Interrupt Disable */
#define ADC_IDR_DRDY (0x1u << 24) /**< \brief (ADC_IDR) Data Ready Interrupt Disable */
#define ADC_IDR_GOVRE (0x1u << 25) /**< \brief (ADC_IDR) General Overrun Error Interrupt Disable */
#define ADC_IDR_COMPE (0x1u << 26) /**< \brief (ADC_IDR) Comparison Event Interrupt Disable */
#define ADC_IDR_PEN (0x1u << 29) /**< \brief (ADC_IDR) Pen Contact Interrupt Disable */
#define ADC_IDR_NOPEN (0x1u << 30) /**< \brief (ADC_IDR) No Pen Contact Interrupt Disable */
/* -------- ADC_IMR : (ADC Offset: 0x2C) Interrupt Mask Register -------- */
#define ADC_IMR_EOC0 (0x1u << 0) /**< \brief (ADC_IMR) End of Conversion Interrupt Mask 0 */
#define ADC_IMR_EOC1 (0x1u << 1) /**< \brief (ADC_IMR) End of Conversion Interrupt Mask 1 */
#define ADC_IMR_EOC2 (0x1u << 2) /**< \brief (ADC_IMR) End of Conversion Interrupt Mask 2 */
#define ADC_IMR_EOC3 (0x1u << 3) /**< \brief (ADC_IMR) End of Conversion Interrupt Mask 3 */
#define ADC_IMR_EOC4 (0x1u << 4) /**< \brief (ADC_IMR) End of Conversion Interrupt Mask 4 */
#define ADC_IMR_EOC5 (0x1u << 5) /**< \brief (ADC_IMR) End of Conversion Interrupt Mask 5 */
#define ADC_IMR_EOC6 (0x1u << 6) /**< \brief (ADC_IMR) End of Conversion Interrupt Mask 6 */
#define ADC_IMR_EOC7 (0x1u << 7) /**< \brief (ADC_IMR) End of Conversion Interrupt Mask 7 */
#define ADC_IMR_EOC8 (0x1u << 8) /**< \brief (ADC_IMR) End of Conversion Interrupt Mask 8 */
#define ADC_IMR_EOC9 (0x1u << 9) /**< \brief (ADC_IMR) End of Conversion Interrupt Mask 9 */
#define ADC_IMR_EOC10 (0x1u << 10) /**< \brief (ADC_IMR) End of Conversion Interrupt Mask 10 */
#define ADC_IMR_EOC11 (0x1u << 11) /**< \brief (ADC_IMR) End of Conversion Interrupt Mask 11 */
#define ADC_IMR_LCCHG (0x1u << 19) /**< \brief (ADC_IMR) Last Channel Change Interrupt Mask */
#define ADC_IMR_XRDY (0x1u << 20) /**< \brief (ADC_IMR) Touchscreen Measure XPOS Ready Interrupt Mask */
#define ADC_IMR_YRDY (0x1u << 21) /**< \brief (ADC_IMR) Touchscreen Measure YPOS Ready Interrupt Mask */
#define ADC_IMR_PRDY (0x1u << 22) /**< \brief (ADC_IMR) Touchscreen Measure Pressure Ready Interrupt Mask */
#define ADC_IMR_DRDY (0x1u << 24) /**< \brief (ADC_IMR) Data Ready Interrupt Mask */
#define ADC_IMR_GOVRE (0x1u << 25) /**< \brief (ADC_IMR) General Overrun Error Interrupt Mask */
#define ADC_IMR_COMPE (0x1u << 26) /**< \brief (ADC_IMR) Comparison Event Interrupt Mask */
#define ADC_IMR_PEN (0x1u << 29) /**< \brief (ADC_IMR) Pen Contact Interrupt Mask */
#define ADC_IMR_NOPEN (0x1u << 30) /**< \brief (ADC_IMR) No Pen Contact Interrupt Mask */
/* -------- ADC_ISR : (ADC Offset: 0x30) Interrupt Status Register -------- */
#define ADC_ISR_EOC0 (0x1u << 0) /**< \brief (ADC_ISR) End of Conversion 0 */
#define ADC_ISR_EOC1 (0x1u << 1) /**< \brief (ADC_ISR) End of Conversion 1 */
#define ADC_ISR_EOC2 (0x1u << 2) /**< \brief (ADC_ISR) End of Conversion 2 */
#define ADC_ISR_EOC3 (0x1u << 3) /**< \brief (ADC_ISR) End of Conversion 3 */
#define ADC_ISR_EOC4 (0x1u << 4) /**< \brief (ADC_ISR) End of Conversion 4 */
#define ADC_ISR_EOC5 (0x1u << 5) /**< \brief (ADC_ISR) End of Conversion 5 */
#define ADC_ISR_EOC6 (0x1u << 6) /**< \brief (ADC_ISR) End of Conversion 6 */
#define ADC_ISR_EOC7 (0x1u << 7) /**< \brief (ADC_ISR) End of Conversion 7 */
#define ADC_ISR_EOC8 (0x1u << 8) /**< \brief (ADC_ISR) End of Conversion 8 */
#define ADC_ISR_EOC9 (0x1u << 9) /**< \brief (ADC_ISR) End of Conversion 9 */
#define ADC_ISR_EOC10 (0x1u << 10) /**< \brief (ADC_ISR) End of Conversion 10 */
#define ADC_ISR_EOC11 (0x1u << 11) /**< \brief (ADC_ISR) End of Conversion 11 */
#define ADC_ISR_LCCHG (0x1u << 19) /**< \brief (ADC_ISR) Last Channel Change */
#define ADC_ISR_XRDY (0x1u << 20) /**< \brief (ADC_ISR) Touchscreen XPOS Measure Ready */
#define ADC_ISR_YRDY (0x1u << 21) /**< \brief (ADC_ISR) Touchscreen YPOS Measure Ready */
#define ADC_ISR_PRDY (0x1u << 22) /**< \brief (ADC_ISR) Touchscreen Pressure Measure Ready */
#define ADC_ISR_DRDY (0x1u << 24) /**< \brief (ADC_ISR) Data Ready */
#define ADC_ISR_GOVRE (0x1u << 25) /**< \brief (ADC_ISR) General Overrun Error */
#define ADC_ISR_COMPE (0x1u << 26) /**< \brief (ADC_ISR) Comparison Event */
#define ADC_ISR_PEN (0x1u << 29) /**< \brief (ADC_ISR) Pen contact */
#define ADC_ISR_NOPEN (0x1u << 30) /**< \brief (ADC_ISR) No Pen Contact */
#define ADC_ISR_PENS (0x1u << 31) /**< \brief (ADC_ISR) Pen Detect Status */
/* -------- ADC_LCTMR : (ADC Offset: 0x34) Last Channel Trigger Mode Register -------- */
#define ADC_LCTMR_DUALTRIG (0x1u << 0) /**< \brief (ADC_LCTMR) Dual Trigger ON */
#define ADC_LCTMR_CMPMOD_Pos 4
#define ADC_LCTMR_CMPMOD_Msk (0x3u << ADC_LCTMR_CMPMOD_Pos) /**< \brief (ADC_LCTMR) Last Channel Comparison Mode */
#define   ADC_LCTMR_CMPMOD_LOW (0x0u << 4) /**< \brief (ADC_LCTMR) Generates an event when the converted data is lower than the low threshold of the window. */
#define   ADC_LCTMR_CMPMOD_HIGH (0x1u << 4) /**< \brief (ADC_LCTMR) Generates an event when the converted data is higher than the high threshold of the window. */
#define   ADC_LCTMR_CMPMOD_IN (0x2u << 4) /**< \brief (ADC_LCTMR) Generates an event when the converted data is in the comparison window. */
#define   ADC_LCTMR_CMPMOD_OUT (0x3u << 4) /**< \brief (ADC_LCTMR) Generates an event when the converted data is out of the comparison window. */
/* -------- ADC_LCCWR : (ADC Offset: 0x38) Last Channel Compare Window Register -------- */
#define ADC_LCCWR_LOWTHRES_Pos 0
#define ADC_LCCWR_LOWTHRES_Msk (0xfffu << ADC_LCCWR_LOWTHRES_Pos) /**< \brief (ADC_LCCWR) Low Threshold */
#define ADC_LCCWR_LOWTHRES(value) ((ADC_LCCWR_LOWTHRES_Msk & ((value) << ADC_LCCWR_LOWTHRES_Pos)))
#define ADC_LCCWR_HIGHTHRES_Pos 16
#define ADC_LCCWR_HIGHTHRES_Msk (0xfffu << ADC_LCCWR_HIGHTHRES_Pos) /**< \brief (ADC_LCCWR) High Threshold */
#define ADC_LCCWR_HIGHTHRES(value) ((ADC_LCCWR_HIGHTHRES_Msk & ((value) << ADC_LCCWR_HIGHTHRES_Pos)))
/* -------- ADC_OVER : (ADC Offset: 0x3C) Overrun Status Register -------- */
#define ADC_OVER_OVRE0 (0x1u << 0) /**< \brief (ADC_OVER) Overrun Error 0 */
#define ADC_OVER_OVRE1 (0x1u << 1) /**< \brief (ADC_OVER) Overrun Error 1 */
#define ADC_OVER_OVRE2 (0x1u << 2) /**< \brief (ADC_OVER) Overrun Error 2 */
#define ADC_OVER_OVRE3 (0x1u << 3) /**< \brief (ADC_OVER) Overrun Error 3 */
#define ADC_OVER_OVRE4 (0x1u << 4) /**< \brief (ADC_OVER) Overrun Error 4 */
#define ADC_OVER_OVRE5 (0x1u << 5) /**< \brief (ADC_OVER) Overrun Error 5 */
#define ADC_OVER_OVRE6 (0x1u << 6) /**< \brief (ADC_OVER) Overrun Error 6 */
#define ADC_OVER_OVRE7 (0x1u << 7) /**< \brief (ADC_OVER) Overrun Error 7 */
#define ADC_OVER_OVRE8 (0x1u << 8) /**< \brief (ADC_OVER) Overrun Error 8 */
#define ADC_OVER_OVRE9 (0x1u << 9) /**< \brief (ADC_OVER) Overrun Error 9 */
#define ADC_OVER_OVRE10 (0x1u << 10) /**< \brief (ADC_OVER) Overrun Error 10 */
#define ADC_OVER_OVRE11 (0x1u << 11) /**< \brief (ADC_OVER) Overrun Error 11 */
/* -------- ADC_EMR : (ADC Offset: 0x40) Extended Mode Register -------- */
#define ADC_EMR_CMPMODE_Pos 0
#define ADC_EMR_CMPMODE_Msk (0x3u << ADC_EMR_CMPMODE_Pos) /**< \brief (ADC_EMR) Comparison Mode */
#define   ADC_EMR_CMPMODE_LOW (0x0u << 0) /**< \brief (ADC_EMR) Generates an event when the converted data is lower than the low threshold of the window. */
#define   ADC_EMR_CMPMODE_HIGH (0x1u << 0) /**< \brief (ADC_EMR) Generates an event when the converted data is higher than the high threshold of the window. */
#define   ADC_EMR_CMPMODE_IN (0x2u << 0) /**< \brief (ADC_EMR) Generates an event when the converted data is in the comparison window. */
#define   ADC_EMR_CMPMODE_OUT (0x3u << 0) /**< \brief (ADC_EMR) Generates an event when the converted data is out of the comparison window. */
#define ADC_EMR_CMPSEL_Pos 4
#define ADC_EMR_CMPSEL_Msk (0xfu << ADC_EMR_CMPSEL_Pos) /**< \brief (ADC_EMR) Comparison Selected Channel */
#define ADC_EMR_CMPSEL(value) ((ADC_EMR_CMPSEL_Msk & ((value) << ADC_EMR_CMPSEL_Pos)))
#define ADC_EMR_CMPALL (0x1u << 9) /**< \brief (ADC_EMR) Compare All Channels */
#define ADC_EMR_CMPFILTER_Pos 12
#define ADC_EMR_CMPFILTER_Msk (0x3u << ADC_EMR_CMPFILTER_Pos) /**< \brief (ADC_EMR) Compare Event Filtering */
#define ADC_EMR_CMPFILTER(value) ((ADC_EMR_CMPFILTER_Msk & ((value) << ADC_EMR_CMPFILTER_Pos)))
#define ADC_EMR_TAG (0x1u << 24) /**< \brief (ADC_EMR) Tag of the ADC_LCDR */
/* -------- ADC_CWR : (ADC Offset: 0x44) Compare Window Register -------- */
#define ADC_CWR_LOWTHRES_Pos 0
#define ADC_CWR_LOWTHRES_Msk (0xfffu << ADC_CWR_LOWTHRES_Pos) /**< \brief (ADC_CWR) Low Threshold */
#define ADC_CWR_LOWTHRES(value) ((ADC_CWR_LOWTHRES_Msk & ((value) << ADC_CWR_LOWTHRES_Pos)))
#define ADC_CWR_HIGHTHRES_Pos 16
#define ADC_CWR_HIGHTHRES_Msk (0xfffu << ADC_CWR_HIGHTHRES_Pos) /**< \brief (ADC_CWR) High Threshold */
#define ADC_CWR_HIGHTHRES(value) ((ADC_CWR_HIGHTHRES_Msk & ((value) << ADC_CWR_HIGHTHRES_Pos)))
/* -------- ADC_CGR : (ADC Offset: 0x48) Channel Gain Register -------- */
#define ADC_CGR_GAIN0_Pos 0
#define ADC_CGR_GAIN0_Msk (0x3u << ADC_CGR_GAIN0_Pos) /**< \brief (ADC_CGR) Gain for Channel 0 */
#define   ADC_CGR_GAIN0_SE1_DIFF0_5 (0x0u << 0) /**< \brief (ADC_CGR) Single-ended gain = 1 (ADC_COR.DIFFx = 0), differential gain = 0.5 (ADC_COR.DIFFx = 1) */
#define   ADC_CGR_GAIN0_SE1_DIFF1 (0x1u << 0) /**< \brief (ADC_CGR) Single-ended gain = 1 (ADC_COR.DIFFx = 0), differential gain = 1 (ADC_COR.DIFFx = 1) */
#define   ADC_CGR_GAIN0_SE2_DIFF2 (0x2u << 0) /**< \brief (ADC_CGR) Single-ended gain = 2 (ADC_COR.DIFFx = 0), differential gain = 2 (ADC_COR.DIFFx = 1) */
#define   ADC_CGR_GAIN0_SE4_DIFF2 (0x3u << 0) /**< \brief (ADC_CGR) Single-ended gain = 4 (ADC_COR.DIFFx = 0), differential gain = 2 (ADC_COR.DIFFx = 1) */
#define ADC_CGR_GAIN1_Pos 2
#define ADC_CGR_GAIN1_Msk (0x3u << ADC_CGR_GAIN1_Pos) /**< \brief (ADC_CGR) Gain for Channel 1 */
#define   ADC_CGR_GAIN1_SE1_DIFF0_5 (0x0u << 2) /**< \brief (ADC_CGR) Single-ended gain = 1 (ADC_COR.DIFFx = 0), differential gain = 0.5 (ADC_COR.DIFFx = 1) */
#define   ADC_CGR_GAIN1_SE1_DIFF1 (0x1u << 2) /**< \brief (ADC_CGR) Single-ended gain = 1 (ADC_COR.DIFFx = 0), differential gain = 1 (ADC_COR.DIFFx = 1) */
#define   ADC_CGR_GAIN1_SE2_DIFF2 (0x2u << 2) /**< \brief (ADC_CGR) Single-ended gain = 2 (ADC_COR.DIFFx = 0), differential gain = 2 (ADC_COR.DIFFx = 1) */
#define   ADC_CGR_GAIN1_SE4_DIFF2 (0x3u << 2) /**< \brief (ADC_CGR) Single-ended gain = 4 (ADC_COR.DIFFx = 0), differential gain = 2 (ADC_COR.DIFFx = 1) */
#define ADC_CGR_GAIN2_Pos 4
#define ADC_CGR_GAIN2_Msk (0x3u << ADC_CGR_GAIN2_Pos) /**< \brief (ADC_CGR) Gain for Channel 2 */
#define   ADC_CGR_GAIN2_SE1_DIFF0_5 (0x0u << 4) /**< \brief (ADC_CGR) Single-ended gain = 1 (ADC_COR.DIFFx = 0), differential gain = 0.5 (ADC_COR.DIFFx = 1) */
#define   ADC_CGR_GAIN2_SE1_DIFF1 (0x1u << 4) /**< \brief (ADC_CGR) Single-ended gain = 1 (ADC_COR.DIFFx = 0), differential gain = 1 (ADC_COR.DIFFx = 1) */
#define   ADC_CGR_GAIN2_SE2_DIFF2 (0x2u << 4) /**< \brief (ADC_CGR) Single-ended gain = 2 (ADC_COR.DIFFx = 0), differential gain = 2 (ADC_COR.DIFFx = 1) */
#define   ADC_CGR_GAIN2_SE4_DIFF2 (0x3u << 4) /**< \brief (ADC_CGR) Single-ended gain = 4 (ADC_COR.DIFFx = 0), differential gain = 2 (ADC_COR.DIFFx = 1) */
#define ADC_CGR_GAIN3_Pos 6
#define ADC_CGR_GAIN3_Msk (0x3u << ADC_CGR_GAIN3_Pos) /**< \brief (ADC_CGR) Gain for Channel 3 */
#define   ADC_CGR_GAIN3_SE1_DIFF0_5 (0x0u << 6) /**< \brief (ADC_CGR) Single-ended gain = 1 (ADC_COR.DIFFx = 0), differential gain = 0.5 (ADC_COR.DIFFx = 1) */
#define   ADC_CGR_GAIN3_SE1_DIFF1 (0x1u << 6) /**< \brief (ADC_CGR) Single-ended gain = 1 (ADC_COR.DIFFx = 0), differential gain = 1 (ADC_COR.DIFFx = 1) */
#define   ADC_CGR_GAIN3_SE2_DIFF2 (0x2u << 6) /**< \brief (ADC_CGR) Single-ended gain = 2 (ADC_COR.DIFFx = 0), differential gain = 2 (ADC_COR.DIFFx = 1) */
#define   ADC_CGR_GAIN3_SE4_DIFF2 (0x3u << 6) /**< \brief (ADC_CGR) Single-ended gain = 4 (ADC_COR.DIFFx = 0), differential gain = 2 (ADC_COR.DIFFx = 1) */
#define ADC_CGR_GAIN4_Pos 8
#define ADC_CGR_GAIN4_Msk (0x3u << ADC_CGR_GAIN4_Pos) /**< \brief (ADC_CGR) Gain for Channel 4 */
#define   ADC_CGR_GAIN4_SE1_DIFF0_5 (0x0u << 8) /**< \brief (ADC_CGR) Single-ended gain = 1 (ADC_COR.DIFFx = 0), differential gain = 0.5 (ADC_COR.DIFFx = 1) */
#define   ADC_CGR_GAIN4_SE1_DIFF1 (0x1u << 8) /**< \brief (ADC_CGR) Single-ended gain = 1 (ADC_COR.DIFFx = 0), differential gain = 1 (ADC_COR.DIFFx = 1) */
#define   ADC_CGR_GAIN4_SE2_DIFF2 (0x2u << 8) /**< \brief (ADC_CGR) Single-ended gain = 2 (ADC_COR.DIFFx = 0), differential gain = 2 (ADC_COR.DIFFx = 1) */
#define   ADC_CGR_GAIN4_SE4_DIFF2 (0x3u << 8) /**< \brief (ADC_CGR) Single-ended gain = 4 (ADC_COR.DIFFx = 0), differential gain = 2 (ADC_COR.DIFFx = 1) */
#define ADC_CGR_GAIN5_Pos 10
#define ADC_CGR_GAIN5_Msk (0x3u << ADC_CGR_GAIN5_Pos) /**< \brief (ADC_CGR) Gain for Channel 5 */
#define   ADC_CGR_GAIN5_SE1_DIFF0_5 (0x0u << 10) /**< \brief (ADC_CGR) Single-ended gain = 1 (ADC_COR.DIFFx = 0), differential gain = 0.5 (ADC_COR.DIFFx = 1) */
#define   ADC_CGR_GAIN5_SE1_DIFF1 (0x1u << 10) /**< \brief (ADC_CGR) Single-ended gain = 1 (ADC_COR.DIFFx = 0), differential gain = 1 (ADC_COR.DIFFx = 1) */
#define   ADC_CGR_GAIN5_SE2_DIFF2 (0x2u << 10) /**< \brief (ADC_CGR) Single-ended gain = 2 (ADC_COR.DIFFx = 0), differential gain = 2 (ADC_COR.DIFFx = 1) */
#define   ADC_CGR_GAIN5_SE4_DIFF2 (0x3u << 10) /**< \brief (ADC_CGR) Single-ended gain = 4 (ADC_COR.DIFFx = 0), differential gain = 2 (ADC_COR.DIFFx = 1) */
#define ADC_CGR_GAIN6_Pos 12
#define ADC_CGR_GAIN6_Msk (0x3u << ADC_CGR_GAIN6_Pos) /**< \brief (ADC_CGR) Gain for Channel 6 */
#define   ADC_CGR_GAIN6_SE1_DIFF0_5 (0x0u << 12) /**< \brief (ADC_CGR) Single-ended gain = 1 (ADC_COR.DIFFx = 0), differential gain = 0.5 (ADC_COR.DIFFx = 1) */
#define   ADC_CGR_GAIN6_SE1_DIFF1 (0x1u << 12) /**< \brief (ADC_CGR) Single-ended gain = 1 (ADC_COR.DIFFx = 0), differential gain = 1 (ADC_COR.DIFFx = 1) */
#define   ADC_CGR_GAIN6_SE2_DIFF2 (0x2u << 12) /**< \brief (ADC_CGR) Single-ended gain = 2 (ADC_COR.DIFFx = 0), differential gain = 2 (ADC_COR.DIFFx = 1) */
#define   ADC_CGR_GAIN6_SE4_DIFF2 (0x3u << 12) /**< \brief (ADC_CGR) Single-ended gain = 4 (ADC_COR.DIFFx = 0), differential gain = 2 (ADC_COR.DIFFx = 1) */
#define ADC_CGR_GAIN7_Pos 14
#define ADC_CGR_GAIN7_Msk (0x3u << ADC_CGR_GAIN7_Pos) /**< \brief (ADC_CGR) Gain for Channel 7 */
#define   ADC_CGR_GAIN7_SE1_DIFF0_5 (0x0u << 14) /**< \brief (ADC_CGR) Single-ended gain = 1 (ADC_COR.DIFFx = 0), differential gain = 0.5 (ADC_COR.DIFFx = 1) */
#define   ADC_CGR_GAIN7_SE1_DIFF1 (0x1u << 14) /**< \brief (ADC_CGR) Single-ended gain = 1 (ADC_COR.DIFFx = 0), differential gain = 1 (ADC_COR.DIFFx = 1) */
#define   ADC_CGR_GAIN7_SE2_DIFF2 (0x2u << 14) /**< \brief (ADC_CGR) Single-ended gain = 2 (ADC_COR.DIFFx = 0), differential gain = 2 (ADC_COR.DIFFx = 1) */
#define   ADC_CGR_GAIN7_SE4_DIFF2 (0x3u << 14) /**< \brief (ADC_CGR) Single-ended gain = 4 (ADC_COR.DIFFx = 0), differential gain = 2 (ADC_COR.DIFFx = 1) */
#define ADC_CGR_GAIN8_Pos 16
#define ADC_CGR_GAIN8_Msk (0x3u << ADC_CGR_GAIN8_Pos) /**< \brief (ADC_CGR) Gain for Channel 8 */
#define   ADC_CGR_GAIN8_SE1_DIFF0_5 (0x0u << 16) /**< \brief (ADC_CGR) Single-ended gain = 1 (ADC_COR.DIFFx = 0), differential gain = 0.5 (ADC_COR.DIFFx = 1) */
#define   ADC_CGR_GAIN8_SE1_DIFF1 (0x1u << 16) /**< \brief (ADC_CGR) Single-ended gain = 1 (ADC_COR.DIFFx = 0), differential gain = 1 (ADC_COR.DIFFx = 1) */
#define   ADC_CGR_GAIN8_SE2_DIFF2 (0x2u << 16) /**< \brief (ADC_CGR) Single-ended gain = 2 (ADC_COR.DIFFx = 0), differential gain = 2 (ADC_COR.DIFFx = 1) */
#define   ADC_CGR_GAIN8_SE4_DIFF2 (0x3u << 16) /**< \brief (ADC_CGR) Single-ended gain = 4 (ADC_COR.DIFFx = 0), differential gain = 2 (ADC_COR.DIFFx = 1) */
#define ADC_CGR_GAIN9_Pos 18
#define ADC_CGR_GAIN9_Msk (0x3u << ADC_CGR_GAIN9_Pos) /**< \brief (ADC_CGR) Gain for Channel 9 */
#define   ADC_CGR_GAIN9_SE1_DIFF0_5 (0x0u << 18) /**< \brief (ADC_CGR) Single-ended gain = 1 (ADC_COR.DIFFx = 0), differential gain = 0.5 (ADC_COR.DIFFx = 1) */
#define   ADC_CGR_GAIN9_SE1_DIFF1 (0x1u << 18) /**< \brief (ADC_CGR) Single-ended gain = 1 (ADC_COR.DIFFx = 0), differential gain = 1 (ADC_COR.DIFFx = 1) */
#define   ADC_CGR_GAIN9_SE2_DIFF2 (0x2u << 18) /**< \brief (ADC_CGR) Single-ended gain = 2 (ADC_COR.DIFFx = 0), differential gain = 2 (ADC_COR.DIFFx = 1) */
#define   ADC_CGR_GAIN9_SE4_DIFF2 (0x3u << 18) /**< \brief (ADC_CGR) Single-ended gain = 4 (ADC_COR.DIFFx = 0), differential gain = 2 (ADC_COR.DIFFx = 1) */
#define ADC_CGR_GAIN10_Pos 20
#define ADC_CGR_GAIN10_Msk (0x3u << ADC_CGR_GAIN10_Pos) /**< \brief (ADC_CGR) Gain for Channel 10 */
#define   ADC_CGR_GAIN10_SE1_DIFF0_5 (0x0u << 20) /**< \brief (ADC_CGR) Single-ended gain = 1 (ADC_COR.DIFFx = 0), differential gain = 0.5 (ADC_COR.DIFFx = 1) */
#define   ADC_CGR_GAIN10_SE1_DIFF1 (0x1u << 20) /**< \brief (ADC_CGR) Single-ended gain = 1 (ADC_COR.DIFFx = 0), differential gain = 1 (ADC_COR.DIFFx = 1) */
#define   ADC_CGR_GAIN10_SE2_DIFF2 (0x2u << 20) /**< \brief (ADC_CGR) Single-ended gain = 2 (ADC_COR.DIFFx = 0), differential gain = 2 (ADC_COR.DIFFx = 1) */
#define   ADC_CGR_GAIN10_SE4_DIFF2 (0x3u << 20) /**< \brief (ADC_CGR) Single-ended gain = 4 (ADC_COR.DIFFx = 0), differential gain = 2 (ADC_COR.DIFFx = 1) */
#define ADC_CGR_GAIN11_Pos 22
#define ADC_CGR_GAIN11_Msk (0x3u << ADC_CGR_GAIN11_Pos) /**< \brief (ADC_CGR) Gain for Channel 11 */
#define   ADC_CGR_GAIN11_SE1_DIFF0_5 (0x0u << 22) /**< \brief (ADC_CGR) Single-ended gain = 1 (ADC_COR.DIFFx = 0), differential gain = 0.5 (ADC_COR.DIFFx = 1) */
#define   ADC_CGR_GAIN11_SE1_DIFF1 (0x1u << 22) /**< \brief (ADC_CGR) Single-ended gain = 1 (ADC_COR.DIFFx = 0), differential gain = 1 (ADC_COR.DIFFx = 1) */
#define   ADC_CGR_GAIN11_SE2_DIFF2 (0x2u << 22) /**< \brief (ADC_CGR) Single-ended gain = 2 (ADC_COR.DIFFx = 0), differential gain = 2 (ADC_COR.DIFFx = 1) */
#define   ADC_CGR_GAIN11_SE4_DIFF2 (0x3u << 22) /**< \brief (ADC_CGR) Single-ended gain = 4 (ADC_COR.DIFFx = 0), differential gain = 2 (ADC_COR.DIFFx = 1) */
/* -------- ADC_COR : (ADC Offset: 0x4C) Channel Offset Register -------- */
#define ADC_COR_OFF0 (0x1u << 0) /**< \brief (ADC_COR) Offset for Channel 0 */
#define ADC_COR_OFF1 (0x1u << 1) /**< \brief (ADC_COR) Offset for Channel 1 */
#define ADC_COR_OFF2 (0x1u << 2) /**< \brief (ADC_COR) Offset for Channel 2 */
#define ADC_COR_OFF3 (0x1u << 3) /**< \brief (ADC_COR) Offset for Channel 3 */
#define ADC_COR_OFF4 (0x1u << 4) /**< \brief (ADC_COR) Offset for Channel 4 */
#define ADC_COR_OFF5 (0x1u << 5) /**< \brief (ADC_COR) Offset for Channel 5 */
#define ADC_COR_OFF6 (0x1u << 6) /**< \brief (ADC_COR) Offset for Channel 6 */
#define ADC_COR_OFF7 (0x1u << 7) /**< \brief (ADC_COR) Offset for Channel 7 */
#define ADC_COR_OFF8 (0x1u << 8) /**< \brief (ADC_COR) Offset for Channel 8 */
#define ADC_COR_OFF9 (0x1u << 9) /**< \brief (ADC_COR) Offset for Channel 9 */
#define ADC_COR_OFF10 (0x1u << 10) /**< \brief (ADC_COR) Offset for Channel 10 */
#define ADC_COR_OFF11 (0x1u << 11) /**< \brief (ADC_COR) Offset for Channel 11 */
#define ADC_COR_DIFF0 (0x1u << 16) /**< \brief (ADC_COR) Differential Inputs for Channel 0 */
#define ADC_COR_DIFF1 (0x1u << 17) /**< \brief (ADC_COR) Differential Inputs for Channel 1 */
#define ADC_COR_DIFF2 (0x1u << 18) /**< \brief (ADC_COR) Differential Inputs for Channel 2 */
#define ADC_COR_DIFF3 (0x1u << 19) /**< \brief (ADC_COR) Differential Inputs for Channel 3 */
#define ADC_COR_DIFF4 (0x1u << 20) /**< \brief (ADC_COR) Differential Inputs for Channel 4 */
#define ADC_COR_DIFF5 (0x1u << 21) /**< \brief (ADC_COR) Differential Inputs for Channel 5 */
#define ADC_COR_DIFF6 (0x1u << 22) /**< \brief (ADC_COR) Differential Inputs for Channel 6 */
#define ADC_COR_DIFF7 (0x1u << 23) /**< \brief (ADC_COR) Differential Inputs for Channel 7 */
#define ADC_COR_DIFF8 (0x1u << 24) /**< \brief (ADC_COR) Differential Inputs for Channel 8 */
#define ADC_COR_DIFF9 (0x1u << 25) /**< \brief (ADC_COR) Differential Inputs for Channel 9 */
#define ADC_COR_DIFF10 (0x1u << 26) /**< \brief (ADC_COR) Differential Inputs for Channel 10 */
#define ADC_COR_DIFF11 (0x1u << 27) /**< \brief (ADC_COR) Differential Inputs for Channel 11 */
/* -------- ADC_CDR0 : (ADC Offset: 0x50) Channel Data Register 0 -------- */
#define ADC_CDR0_DATA_Pos 0
#define ADC_CDR0_DATA_Msk (0xfffu << ADC_CDR0_DATA_Pos) /**< \brief (ADC_CDR0) Converted Data */
/* -------- ADC_CDR1 : (ADC Offset: 0x54) Channel Data Register 1 -------- */
#define ADC_CDR1_DATA_Pos 0
#define ADC_CDR1_DATA_Msk (0xfffu << ADC_CDR1_DATA_Pos) /**< \brief (ADC_CDR1) Converted Data */
/* -------- ADC_CDR2 : (ADC Offset: 0x58) Channel Data Register 2 -------- */
#define ADC_CDR2_DATA_Pos 0
#define ADC_CDR2_DATA_Msk (0xfffu << ADC_CDR2_DATA_Pos) /**< \brief (ADC_CDR2) Converted Data */
/* -------- ADC_CDR3 : (ADC Offset: 0x5C) Channel Data Register 3 -------- */
#define ADC_CDR3_DATA_Pos 0
#define ADC_CDR3_DATA_Msk (0xfffu << ADC_CDR3_DATA_Pos) /**< \brief (ADC_CDR3) Converted Data */
/* -------- ADC_CDR4 : (ADC Offset: 0x60) Channel Data Register 4 -------- */
#define ADC_CDR4_DATA_Pos 0
#define ADC_CDR4_DATA_Msk (0xfffu << ADC_CDR4_DATA_Pos) /**< \brief (ADC_CDR4) Converted Data */
/* -------- ADC_CDR5 : (ADC Offset: 0x64) Channel Data Register 5 -------- */
#define ADC_CDR5_DATA_Pos 0
#define ADC_CDR5_DATA_Msk (0xfffu << ADC_CDR5_DATA_Pos) /**< \brief (ADC_CDR5) Converted Data */
/* -------- ADC_CDR6 : (ADC Offset: 0x68) Channel Data Register 6 -------- */
#define ADC_CDR6_DATA_Pos 0
#define ADC_CDR6_DATA_Msk (0xfffu << ADC_CDR6_DATA_Pos) /**< \brief (ADC_CDR6) Converted Data */
/* -------- ADC_CDR7 : (ADC Offset: 0x6C) Channel Data Register 7 -------- */
#define ADC_CDR7_DATA_Pos 0
#define ADC_CDR7_DATA_Msk (0xfffu << ADC_CDR7_DATA_Pos) /**< \brief (ADC_CDR7) Converted Data */
/* -------- ADC_CDR8 : (ADC Offset: 0x70) Channel Data Register 8 -------- */
#define ADC_CDR8_DATA_Pos 0
#define ADC_CDR8_DATA_Msk (0xfffu << ADC_CDR8_DATA_Pos) /**< \brief (ADC_CDR8) Converted Data */
/* -------- ADC_CDR9 : (ADC Offset: 0x74) Channel Data Register 9 -------- */
#define ADC_CDR9_DATA_Pos 0
#define ADC_CDR9_DATA_Msk (0xfffu << ADC_CDR9_DATA_Pos) /**< \brief (ADC_CDR9) Converted Data */
/* -------- ADC_CDR10 : (ADC Offset: 0x78) Channel Data Register 10 -------- */
#define ADC_CDR10_DATA_Pos 0
#define ADC_CDR10_DATA_Msk (0xfffu << ADC_CDR10_DATA_Pos) /**< \brief (ADC_CDR10) Converted Data */
/* -------- ADC_CDR11 : (ADC Offset: 0x7C) Channel Data Register 11 -------- */
#define ADC_CDR11_DATA_Pos 0
#define ADC_CDR11_DATA_Msk (0xfffu << ADC_CDR11_DATA_Pos) /**< \brief (ADC_CDR11) Converted Data */
/* -------- ADC_ACR : (ADC Offset: 0x94) Analog Control Register -------- */
#define ADC_ACR_PENDETSENS_Pos 0
#define ADC_ACR_PENDETSENS_Msk (0x3u << ADC_ACR_PENDETSENS_Pos) /**< \brief (ADC_ACR) Pen Detection Sensitivity */
#define ADC_ACR_PENDETSENS(value) ((ADC_ACR_PENDETSENS_Msk & ((value) << ADC_ACR_PENDETSENS_Pos)))
/* -------- ADC_TSMR : (ADC Offset: 0xB0) Touchscreen Mode Register -------- */
#define ADC_TSMR_TSMODE_Pos 0
#define ADC_TSMR_TSMODE_Msk (0x3u << ADC_TSMR_TSMODE_Pos) /**< \brief (ADC_TSMR) Touchscreen Mode */
#define   ADC_TSMR_TSMODE_NONE (0x0u << 0) /**< \brief (ADC_TSMR) No Touchscreen */
#define   ADC_TSMR_TSMODE_4_WIRE_NO_PM (0x1u << 0) /**< \brief (ADC_TSMR) 4-wire Touchscreen without pressure measurement */
#define   ADC_TSMR_TSMODE_4_WIRE (0x2u << 0) /**< \brief (ADC_TSMR) 4-wire Touchscreen with pressure measurement */
#define   ADC_TSMR_TSMODE_5_WIRE (0x3u << 0) /**< \brief (ADC_TSMR) 5-wire Touchscreen */
#define ADC_TSMR_TSAV_Pos 4
#define ADC_TSMR_TSAV_Msk (0x3u << ADC_TSMR_TSAV_Pos) /**< \brief (ADC_TSMR) Touchscreen Average */
#define   ADC_TSMR_TSAV_NO_FILTER (0x0u << 4) /**< \brief (ADC_TSMR) No Filtering. Only one ADC conversion per measure */
#define   ADC_TSMR_TSAV_AVG2CONV (0x1u << 4) /**< \brief (ADC_TSMR) Averages 2 ADC conversions */
#define   ADC_TSMR_TSAV_AVG4CONV (0x2u << 4) /**< \brief (ADC_TSMR) Averages 4 ADC conversions */
#define   ADC_TSMR_TSAV_AVG8CONV (0x3u << 4) /**< \brief (ADC_TSMR) Averages 8 ADC conversions */
#define ADC_TSMR_TSFREQ_Pos 8
#define ADC_TSMR_TSFREQ_Msk (0xfu << ADC_TSMR_TSFREQ_Pos) /**< \brief (ADC_TSMR) Touchscreen Frequency */
#define ADC_TSMR_TSFREQ(value) ((ADC_TSMR_TSFREQ_Msk & ((value) << ADC_TSMR_TSFREQ_Pos)))
#define ADC_TSMR_TSSCTIM_Pos 16
#define ADC_TSMR_TSSCTIM_Msk (0xfu << ADC_TSMR_TSSCTIM_Pos) /**< \brief (ADC_TSMR) Touchscreen Switches Closure Time */
#define ADC_TSMR_TSSCTIM(value) ((ADC_TSMR_TSSCTIM_Msk & ((value) << ADC_TSMR_TSSCTIM_Pos)))
#define ADC_TSMR_NOTSDMA (0x1u << 22) /**< \brief (ADC_TSMR) No TouchScreen DMA */
#define ADC_TSMR_PENDET (0x1u << 24) /**< \brief (ADC_TSMR) Pen Contact Detection Enable */
#define ADC_TSMR_PENDBC_Pos 28
#define ADC_TSMR_PENDBC_Msk (0xfu << ADC_TSMR_PENDBC_Pos) /**< \brief (ADC_TSMR) Pen Detect Debouncing Period */
#define ADC_TSMR_PENDBC(value) ((ADC_TSMR_PENDBC_Msk & ((value) << ADC_TSMR_PENDBC_Pos)))
/* -------- ADC_XPOSR : (ADC Offset: 0xB4) Touchscreen X Position Register -------- */
#define ADC_XPOSR_XPOS_Pos 0
#define ADC_XPOSR_XPOS_Msk (0xfffu << ADC_XPOSR_XPOS_Pos) /**< \brief (ADC_XPOSR) X Position */
#define ADC_XPOSR_XSCALE_Pos 16
#define ADC_XPOSR_XSCALE_Msk (0xfffu << ADC_XPOSR_XSCALE_Pos) /**< \brief (ADC_XPOSR) Scale of XPOS */
/* -------- ADC_YPOSR : (ADC Offset: 0xB8) Touchscreen Y Position Register -------- */
#define ADC_YPOSR_YPOS_Pos 0
#define ADC_YPOSR_YPOS_Msk (0xfffu << ADC_YPOSR_YPOS_Pos) /**< \brief (ADC_YPOSR) Y Position */
#define ADC_YPOSR_YSCALE_Pos 16
#define ADC_YPOSR_YSCALE_Msk (0xfffu << ADC_YPOSR_YSCALE_Pos) /**< \brief (ADC_YPOSR) Scale of YPOS */
/* -------- ADC_PRESSR : (ADC Offset: 0xBC) Touchscreen Pressure Register -------- */
#define ADC_PRESSR_Z1_Pos 0
#define ADC_PRESSR_Z1_Msk (0xfffu << ADC_PRESSR_Z1_Pos) /**< \brief (ADC_PRESSR) Data of Z1 Measurement */
#define ADC_PRESSR_Z2_Pos 16
#define ADC_PRESSR_Z2_Msk (0xfffu << ADC_PRESSR_Z2_Pos) /**< \brief (ADC_PRESSR) Data of Z2 Measurement */
/* -------- ADC_TRGR : (ADC Offset: 0xC0) Trigger Register -------- */
#define ADC_TRGR_TRGMOD_Pos 0
#define ADC_TRGR_TRGMOD_Msk (0x7u << ADC_TRGR_TRGMOD_Pos) /**< \brief (ADC_TRGR) Trigger Mode */
#define   ADC_TRGR_TRGMOD_NO_TRIGGER (0x0u << 0) /**< \brief (ADC_TRGR) No trigger, only software trigger can start conversions */
#define   ADC_TRGR_TRGMOD_EXT_TRIG_RISE (0x1u << 0) /**< \brief (ADC_TRGR) External Trigger Rising Edge */
#define   ADC_TRGR_TRGMOD_EXT_TRIG_FALL (0x2u << 0) /**< \brief (ADC_TRGR) External Trigger Falling Edge */
#define   ADC_TRGR_TRGMOD_EXT_TRIG_ANY (0x3u << 0) /**< \brief (ADC_TRGR) External Trigger Any Edge */
#define   ADC_TRGR_TRGMOD_PEN_TRIG (0x4u << 0) /**< \brief (ADC_TRGR) Pen Detect Trigger (shall be selected only if PENDET is set and TSAMOD = Touchscreen only mode) */
#define   ADC_TRGR_TRGMOD_PERIOD_TRIG (0x5u << 0) /**< \brief (ADC_TRGR) ADC Internal Periodic Trigger (see field TRGPER) */
#define   ADC_TRGR_TRGMOD_CONTINUOUS (0x6u << 0) /**< \brief (ADC_TRGR) Continuous Mode */
#define ADC_TRGR_TRGPER_Pos 16
#define ADC_TRGR_TRGPER_Msk (0xffffu << ADC_TRGR_TRGPER_Pos) /**< \brief (ADC_TRGR) Trigger Period */
#define ADC_TRGR_TRGPER(value) ((ADC_TRGR_TRGPER_Msk & ((value) << ADC_TRGR_TRGPER_Pos)))
/* -------- ADC_WPMR : (ADC Offset: 0xE4) Write Protection Mode Register -------- */
#define ADC_WPMR_WPEN (0x1u << 0) /**< \brief (ADC_WPMR) Write Protection Enable */
#define ADC_WPMR_WPKEY_Pos 8
#define ADC_WPMR_WPKEY_Msk (0xffffffu << ADC_WPMR_WPKEY_Pos) /**< \brief (ADC_WPMR) Write Protection Key */
#define   ADC_WPMR_WPKEY_PASSWD (0x414443u << 8) /**< \brief (ADC_WPMR) Writing any other value in this field aborts the write operation of the WPEN bit.Always reads as 0 */
/* -------- ADC_WPSR : (ADC Offset: 0xE8) Write Protection Status Register -------- */
#define ADC_WPSR_WPVS (0x1u << 0) /**< \brief (ADC_WPSR) Write Protection Violation Status */
#define ADC_WPSR_WPVSRC_Pos 8
#define ADC_WPSR_WPVSRC_Msk (0xffffu << ADC_WPSR_WPVSRC_Pos) /**< \brief (ADC_WPSR) Write Protection Violation Source */
/* -------- ADC_VERSION : (ADC Offset: 0xFC) Version Register -------- */
#define ADC_VERSION_VERSION_Pos 0
#define ADC_VERSION_VERSION_Msk (0xfffu << ADC_VERSION_VERSION_Pos) /**< \brief (ADC_VERSION) Version of the Hardware Module */
#define ADC_VERSION_MFN_Pos 16
#define ADC_VERSION_MFN_Msk (0x7u << ADC_VERSION_MFN_Pos) /**< \brief (ADC_VERSION) Metal Fix Number */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR Advanced Encryption Standard */
/* ============================================================================= */
/** \addtogroup SAMA5D2_AES Advanced Encryption Standard */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief Aes hardware registers */
typedef struct {
  __O  uint32_t AES_CR;        /**< \brief (Aes Offset: 0x00) Control Register */
  __IO uint32_t AES_MR;        /**< \brief (Aes Offset: 0x04) Mode Register */
  __I  uint32_t Reserved1[2];
  __O  uint32_t AES_IER;       /**< \brief (Aes Offset: 0x10) Interrupt Enable Register */
  __O  uint32_t AES_IDR;       /**< \brief (Aes Offset: 0x14) Interrupt Disable Register */
  __I  uint32_t AES_IMR;       /**< \brief (Aes Offset: 0x18) Interrupt Mask Register */
  __I  uint32_t AES_ISR;       /**< \brief (Aes Offset: 0x1C) Interrupt Status Register */
  __O  uint32_t AES_KEYWR[8];  /**< \brief (Aes Offset: 0x20) Key Word Register */
  __O  uint32_t AES_IDATAR[4]; /**< \brief (Aes Offset: 0x40) Input Data Register */
  __I  uint32_t AES_ODATAR[4]; /**< \brief (Aes Offset: 0x50) Output Data Register */
  __O  uint32_t AES_IVR[4];    /**< \brief (Aes Offset: 0x60) Initialization Vector Register */
  __IO uint32_t AES_AADLENR;   /**< \brief (Aes Offset: 0x70) Additional Authenticated Data Length Register */
  __IO uint32_t AES_CLENR;     /**< \brief (Aes Offset: 0x74) Plaintext/Ciphertext Length Register */
  __IO uint32_t AES_GHASHR[4]; /**< \brief (Aes Offset: 0x78) GCM Intermediate Hash Word Register */
  __I  uint32_t AES_TAGR[4];   /**< \brief (Aes Offset: 0x88) GCM Authentication Tag Word Register */
  __I  uint32_t AES_CTRR;      /**< \brief (Aes Offset: 0x98) GCM Encryption Counter Value Register */
  __IO uint32_t AES_GCMHR[4];  /**< \brief (Aes Offset: 0x9C) GCM H Word Register */
  __I  uint32_t Reserved2[1];
  __IO uint32_t AES_EMR;       /**< \brief (Aes Offset: 0xB0) Extended Mode Register */
  __IO uint32_t AES_BCNT;      /**< \brief (Aes Offset: 0xB4) Byte Counter Register */
  __I  uint32_t Reserved3[17];
  __I  uint32_t AES_VERSION;   /**< \brief (Aes Offset: 0xFC) Version Register */
} Aes;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- AES_CR : (AES Offset: 0x00) Control Register -------- */
#define AES_CR_START (0x1u << 0) /**< \brief (AES_CR) Start Processing */
#define AES_CR_SWRST (0x1u << 8) /**< \brief (AES_CR) Software Reset */
#define AES_CR_LOADSEED (0x1u << 16) /**< \brief (AES_CR) Random Number Generator Seed Loading */
/* -------- AES_MR : (AES Offset: 0x04) Mode Register -------- */
#define AES_MR_CIPHER (0x1u << 0) /**< \brief (AES_MR) Processing Mode */
#define AES_MR_GTAGEN (0x1u << 1) /**< \brief (AES_MR) GCM Automatic Tag Generation Enable */
#define AES_MR_DUALBUFF (0x1u << 3) /**< \brief (AES_MR) Dual Input Buffer */
#define   AES_MR_DUALBUFF_INACTIVE (0x0u << 3) /**< \brief (AES_MR) AES_IDATARx cannot be written during processing of previous block. */
#define   AES_MR_DUALBUFF_ACTIVE (0x1u << 3) /**< \brief (AES_MR) AES_IDATARx can be written during processing of previous block when SMOD = 0x2. It speeds up the overall runtime of large files. */
#define AES_MR_PROCDLY_Pos 4
#define AES_MR_PROCDLY_Msk (0xfu << AES_MR_PROCDLY_Pos) /**< \brief (AES_MR) Processing Delay */
#define AES_MR_PROCDLY(value) ((AES_MR_PROCDLY_Msk & ((value) << AES_MR_PROCDLY_Pos)))
#define AES_MR_SMOD_Pos 8
#define AES_MR_SMOD_Msk (0x3u << AES_MR_SMOD_Pos) /**< \brief (AES_MR) Start Mode */
#define   AES_MR_SMOD_MANUAL_START (0x0u << 8) /**< \brief (AES_MR) Manual Mode */
#define   AES_MR_SMOD_AUTO_START (0x1u << 8) /**< \brief (AES_MR) Auto Mode */
#define   AES_MR_SMOD_IDATAR0_START (0x2u << 8) /**< \brief (AES_MR) AES_IDATAR0 access only Auto Mode */
#define AES_MR_KEYSIZE_Pos 10
#define AES_MR_KEYSIZE_Msk (0x3u << AES_MR_KEYSIZE_Pos) /**< \brief (AES_MR) Key Size */
#define   AES_MR_KEYSIZE_AES128 (0x0u << 10) /**< \brief (AES_MR) AES Key Size is 128 bits */
#define   AES_MR_KEYSIZE_AES192 (0x1u << 10) /**< \brief (AES_MR) AES Key Size is 192 bits */
#define   AES_MR_KEYSIZE_AES256 (0x2u << 10) /**< \brief (AES_MR) AES Key Size is 256 bits */
#define AES_MR_OPMOD_Pos 12
#define AES_MR_OPMOD_Msk (0x7u << AES_MR_OPMOD_Pos) /**< \brief (AES_MR) Operation Mode */
#define   AES_MR_OPMOD_ECB (0x0u << 12) /**< \brief (AES_MR) ECB: Electronic Code Book mode */
#define   AES_MR_OPMOD_CBC (0x1u << 12) /**< \brief (AES_MR) CBC: Cipher Block Chaining mode */
#define   AES_MR_OPMOD_OFB (0x2u << 12) /**< \brief (AES_MR) OFB: Output Feedback mode */
#define   AES_MR_OPMOD_CFB (0x3u << 12) /**< \brief (AES_MR) CFB: Cipher Feedback mode */
#define   AES_MR_OPMOD_CTR (0x4u << 12) /**< \brief (AES_MR) CTR: Counter mode (16-bit internal counter) */
#define   AES_MR_OPMOD_GCM (0x5u << 12) /**< \brief (AES_MR) GCM: Galois/Counter mode */
#define AES_MR_LOD (0x1u << 15) /**< \brief (AES_MR) Last Output Data Mode */
#define AES_MR_CFBS_Pos 16
#define AES_MR_CFBS_Msk (0x7u << AES_MR_CFBS_Pos) /**< \brief (AES_MR) Cipher Feedback Data Size */
#define   AES_MR_CFBS_SIZE_128BIT (0x0u << 16) /**< \brief (AES_MR) 128-bit */
#define   AES_MR_CFBS_SIZE_64BIT (0x1u << 16) /**< \brief (AES_MR) 64-bit */
#define   AES_MR_CFBS_SIZE_32BIT (0x2u << 16) /**< \brief (AES_MR) 32-bit */
#define   AES_MR_CFBS_SIZE_16BIT (0x3u << 16) /**< \brief (AES_MR) 16-bit */
#define   AES_MR_CFBS_SIZE_8BIT (0x4u << 16) /**< \brief (AES_MR) 8-bit */
#define AES_MR_CKEY_Pos 20
#define AES_MR_CKEY_Msk (0xfu << AES_MR_CKEY_Pos) /**< \brief (AES_MR) Countermeasure Key */
#define AES_MR_CKEY(value) ((AES_MR_CKEY_Msk & ((value) << AES_MR_CKEY_Pos)))
#define   AES_MR_CKEY_PASSWD (0xEu << 20) /**< \brief (AES_MR) This field must be written with 0xE to allow CMTYPx fields change. Any other values will abort the write operation in CMTYPx fields.Always reads as 0. */
#define AES_MR_CMTYP1 (0x1u << 24) /**< \brief (AES_MR) Countermeasure Type 1 */
#define   AES_MR_CMTYP1_NOPROT_EXTKEY (0x0u << 24) /**< \brief (AES_MR) Countermeasure type 1 is disabled */
#define   AES_MR_CMTYP1_PROT_EXTKEY (0x1u << 24) /**< \brief (AES_MR) Countermeasure type 1 is enabled */
#define AES_MR_CMTYP2 (0x1u << 25) /**< \brief (AES_MR) Countermeasure Type 2 */
#define   AES_MR_CMTYP2_NO_PAUSE (0x0u << 25) /**< \brief (AES_MR) Countermeasure type 2 is disabled */
#define   AES_MR_CMTYP2_PAUSE (0x1u << 25) /**< \brief (AES_MR) Countermeasure type 2 is enabled */
#define AES_MR_CMTYP3 (0x1u << 26) /**< \brief (AES_MR) Countermeasure Type 3 */
#define   AES_MR_CMTYP3_NO_DUMMY (0x0u << 26) /**< \brief (AES_MR) Countermeasure type 3 is disabled */
#define   AES_MR_CMTYP3_DUMMY (0x1u << 26) /**< \brief (AES_MR) Countermeasure type 3 is enabled */
#define AES_MR_CMTYP4 (0x1u << 27) /**< \brief (AES_MR) Countermeasure Type 4 */
#define   AES_MR_CMTYP4_NO_RESTART (0x0u << 27) /**< \brief (AES_MR) Countermeasure type 4 is disabled */
#define   AES_MR_CMTYP4_RESTART (0x1u << 27) /**< \brief (AES_MR) Countermeasure type 4 is enabled */
#define AES_MR_CMTYP5 (0x1u << 28) /**< \brief (AES_MR) Countermeasure Type 5 */
#define   AES_MR_CMTYP5_NO_ADDACCESS (0x0u << 28) /**< \brief (AES_MR) Countermeasure type 5 is disabled */
#define   AES_MR_CMTYP5_ADDACCESS (0x1u << 28) /**< \brief (AES_MR) Countermeasure type 5 is enabled */
#define AES_MR_CMTYP6 (0x1u << 29) /**< \brief (AES_MR) CounterMeasure Type 6 */
#define   AES_MR_CMTYP6_NO_IDLECURRENT (0x0u << 29) /**< \brief (AES_MR) Countermeasure type 6 is disabled */
#define   AES_MR_CMTYP6_IDLECURRENT (0x1u << 29) /**< \brief (AES_MR) Countermeasure type 6 is enabled */
/* -------- AES_IER : (AES Offset: 0x10) Interrupt Enable Register -------- */
#define AES_IER_DATRDY (0x1u << 0) /**< \brief (AES_IER) Data Ready Interrupt Enable */
#define AES_IER_URAD (0x1u << 8) /**< \brief (AES_IER) Unspecified Register Access Detection Interrupt Enable */
#define AES_IER_TAGRDY (0x1u << 16) /**< \brief (AES_IER) GCM Tag Ready Interrupt Enable */
#define AES_IER_EOPAD (0x1u << 17) /**< \brief (AES_IER) End of Padding Interrupt Enable */
#define AES_IER_PLENERR (0x1u << 18) /**< \brief (AES_IER) Padding Length Error Interrupt Enable */
/* -------- AES_IDR : (AES Offset: 0x14) Interrupt Disable Register -------- */
#define AES_IDR_DATRDY (0x1u << 0) /**< \brief (AES_IDR) Data Ready Interrupt Disable */
#define AES_IDR_URAD (0x1u << 8) /**< \brief (AES_IDR) Unspecified Register Access Detection Interrupt Disable */
#define AES_IDR_TAGRDY (0x1u << 16) /**< \brief (AES_IDR) GCM Tag Ready Interrupt Disable */
#define AES_IDR_EOPAD (0x1u << 17) /**< \brief (AES_IDR) End of Padding Interrupt Disable */
#define AES_IDR_PLENERR (0x1u << 18) /**< \brief (AES_IDR) Padding Length Error Interrupt Disable */
/* -------- AES_IMR : (AES Offset: 0x18) Interrupt Mask Register -------- */
#define AES_IMR_DATRDY (0x1u << 0) /**< \brief (AES_IMR) Data Ready Interrupt Mask */
#define AES_IMR_URAD (0x1u << 8) /**< \brief (AES_IMR) Unspecified Register Access Detection Interrupt Mask */
#define AES_IMR_TAGRDY (0x1u << 16) /**< \brief (AES_IMR) GCM Tag Ready Interrupt Mask */
#define AES_IMR_EOPAD (0x1u << 17) /**< \brief (AES_IMR) End of Padding Interrupt Mask */
#define AES_IMR_PLENERR (0x1u << 18) /**< \brief (AES_IMR) Padding Length Error Interrupt Mask */
/* -------- AES_ISR : (AES Offset: 0x1C) Interrupt Status Register -------- */
#define AES_ISR_DATRDY (0x1u << 0) /**< \brief (AES_ISR) Data Ready */
#define AES_ISR_URAD (0x1u << 8) /**< \brief (AES_ISR) Unspecified Register Access Detection Status */
#define AES_ISR_URAT_Pos 12
#define AES_ISR_URAT_Msk (0xfu << AES_ISR_URAT_Pos) /**< \brief (AES_ISR) Unspecified Register Access */
#define   AES_ISR_URAT_IDR_WR_PROCESSING (0x0u << 12) /**< \brief (AES_ISR) Input Data Register written during the data processing when SMOD = 0x2 mode. */
#define   AES_ISR_URAT_ODR_RD_PROCESSING (0x1u << 12) /**< \brief (AES_ISR) Output Data Register read during the data processing. */
#define   AES_ISR_URAT_MR_WR_PROCESSING (0x2u << 12) /**< \brief (AES_ISR) Mode Register written during the data processing. */
#define   AES_ISR_URAT_ODR_RD_SUBKGEN (0x3u << 12) /**< \brief (AES_ISR) Output Data Register read during the sub-keys generation. */
#define   AES_ISR_URAT_MR_WR_SUBKGEN (0x4u << 12) /**< \brief (AES_ISR) Mode Register written during the sub-keys generation. */
#define   AES_ISR_URAT_WOR_RD_ACCESS (0x5u << 12) /**< \brief (AES_ISR) Write-only register read access. */
#define AES_ISR_TAGRDY (0x1u << 16) /**< \brief (AES_ISR) GCM Tag Ready */
#define AES_ISR_EOPAD (0x1u << 17) /**< \brief (AES_ISR) End of Padding */
#define AES_ISR_PLENERR (0x1u << 18) /**< \brief (AES_ISR) Padding Length Error */
/* -------- AES_KEYWR[8] : (AES Offset: 0x20) Key Word Register -------- */
#define AES_KEYWR_KEYW_Pos 0
#define AES_KEYWR_KEYW_Msk (0xffffffffu << AES_KEYWR_KEYW_Pos) /**< \brief (AES_KEYWR[8]) Key Word */
#define AES_KEYWR_KEYW(value) ((AES_KEYWR_KEYW_Msk & ((value) << AES_KEYWR_KEYW_Pos)))
/* -------- AES_IDATAR[4] : (AES Offset: 0x40) Input Data Register -------- */
#define AES_IDATAR_IDATA_Pos 0
#define AES_IDATAR_IDATA_Msk (0xffffffffu << AES_IDATAR_IDATA_Pos) /**< \brief (AES_IDATAR[4]) Input Data Word */
#define AES_IDATAR_IDATA(value) ((AES_IDATAR_IDATA_Msk & ((value) << AES_IDATAR_IDATA_Pos)))
/* -------- AES_ODATAR[4] : (AES Offset: 0x50) Output Data Register -------- */
#define AES_ODATAR_ODATA_Pos 0
#define AES_ODATAR_ODATA_Msk (0xffffffffu << AES_ODATAR_ODATA_Pos) /**< \brief (AES_ODATAR[4]) Output Data */
/* -------- AES_IVR[4] : (AES Offset: 0x60) Initialization Vector Register -------- */
#define AES_IVR_IV_Pos 0
#define AES_IVR_IV_Msk (0xffffffffu << AES_IVR_IV_Pos) /**< \brief (AES_IVR[4]) Initialization Vector */
#define AES_IVR_IV(value) ((AES_IVR_IV_Msk & ((value) << AES_IVR_IV_Pos)))
/* -------- AES_AADLENR : (AES Offset: 0x70) Additional Authenticated Data Length Register -------- */
#define AES_AADLENR_AADLEN_Pos 0
#define AES_AADLENR_AADLEN_Msk (0xffffffffu << AES_AADLENR_AADLEN_Pos) /**< \brief (AES_AADLENR) Additional Authenticated Data Length */
#define AES_AADLENR_AADLEN(value) ((AES_AADLENR_AADLEN_Msk & ((value) << AES_AADLENR_AADLEN_Pos)))
/* -------- AES_CLENR : (AES Offset: 0x74) Plaintext/Ciphertext Length Register -------- */
#define AES_CLENR_CLEN_Pos 0
#define AES_CLENR_CLEN_Msk (0xffffffffu << AES_CLENR_CLEN_Pos) /**< \brief (AES_CLENR) Plaintext/Ciphertext Length */
#define AES_CLENR_CLEN(value) ((AES_CLENR_CLEN_Msk & ((value) << AES_CLENR_CLEN_Pos)))
/* -------- AES_GHASHR[4] : (AES Offset: 0x78) GCM Intermediate Hash Word Register -------- */
#define AES_GHASHR_GHASH_Pos 0
#define AES_GHASHR_GHASH_Msk (0xffffffffu << AES_GHASHR_GHASH_Pos) /**< \brief (AES_GHASHR[4]) Intermediate GCM Hash Word x */
#define AES_GHASHR_GHASH(value) ((AES_GHASHR_GHASH_Msk & ((value) << AES_GHASHR_GHASH_Pos)))
/* -------- AES_TAGR[4] : (AES Offset: 0x88) GCM Authentication Tag Word Register -------- */
#define AES_TAGR_TAG_Pos 0
#define AES_TAGR_TAG_Msk (0xffffffffu << AES_TAGR_TAG_Pos) /**< \brief (AES_TAGR[4]) GCM Authentication Tag x */
/* -------- AES_CTRR : (AES Offset: 0x98) GCM Encryption Counter Value Register -------- */
#define AES_CTRR_CTR_Pos 0
#define AES_CTRR_CTR_Msk (0xffffffffu << AES_CTRR_CTR_Pos) /**< \brief (AES_CTRR) GCM Encryption Counter */
/* -------- AES_GCMHR[4] : (AES Offset: 0x9C) GCM H Word Register -------- */
#define AES_GCMHR_H_Pos 0
#define AES_GCMHR_H_Msk (0xffffffffu << AES_GCMHR_H_Pos) /**< \brief (AES_GCMHR[4]) GCM H Word x */
#define AES_GCMHR_H(value) ((AES_GCMHR_H_Msk & ((value) << AES_GCMHR_H_Pos)))
/* -------- AES_EMR : (AES Offset: 0xB0) Extended Mode Register -------- */
#define AES_EMR_APEN (0x1u << 0) /**< \brief (AES_EMR) Auto Padding Enable */
#define AES_EMR_APM (0x1u << 1) /**< \brief (AES_EMR) Auto Padding Mode */
#define AES_EMR_HAPEN (0x1u << 4) /**< \brief (AES_EMR) HMAC Auto Padding Enable */
#define AES_EMR_HAPM (0x1u << 5) /**< \brief (AES_EMR) HMAC Auto Padding Mode */
#define AES_EMR_PADLEN_Pos 8
#define AES_EMR_PADLEN_Msk (0xffu << AES_EMR_PADLEN_Pos) /**< \brief (AES_EMR) Auto Padding Length */
#define AES_EMR_PADLEN(value) ((AES_EMR_PADLEN_Msk & ((value) << AES_EMR_PADLEN_Pos)))
#define AES_EMR_NHEAD_Pos 16
#define AES_EMR_NHEAD_Msk (0xffu << AES_EMR_NHEAD_Pos) /**< \brief (AES_EMR) IPSEC Next Header */
#define AES_EMR_NHEAD(value) ((AES_EMR_NHEAD_Msk & ((value) << AES_EMR_NHEAD_Pos)))
/* -------- AES_BCNT : (AES Offset: 0xB4) Byte Counter Register -------- */
#define AES_BCNT_BCNT_Pos 0
#define AES_BCNT_BCNT_Msk (0xffffffffu << AES_BCNT_BCNT_Pos) /**< \brief (AES_BCNT) Auto Padding Byte Counter */
#define AES_BCNT_BCNT(value) ((AES_BCNT_BCNT_Msk & ((value) << AES_BCNT_BCNT_Pos)))
/* -------- AES_VERSION : (AES Offset: 0xFC) Version Register -------- */
#define AES_VERSION_VERSION_Pos 0
#define AES_VERSION_VERSION_Msk (0xfffu << AES_VERSION_VERSION_Pos) /**< \brief (AES_VERSION) Version of the Hardware Module */
#define AES_VERSION_MFN_Pos 16
#define AES_VERSION_MFN_Msk (0x7u << AES_VERSION_MFN_Pos) /**< \brief (AES_VERSION) Metal Fix Number */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR Advanced Encryption Standard Bridge */
/* ============================================================================= */
/** \addtogroup SAMA5D2_AESB Advanced Encryption Standard Bridge */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief Aesb hardware registers */
typedef struct {
  __O  uint32_t AESB_CR;        /**< \brief (Aesb Offset: 0x00) Control Register */
  __IO uint32_t AESB_MR;        /**< \brief (Aesb Offset: 0x04) Mode Register */
  __I  uint32_t Reserved1[2];
  __O  uint32_t AESB_IER;       /**< \brief (Aesb Offset: 0x10) Interrupt Enable Register */
  __O  uint32_t AESB_IDR;       /**< \brief (Aesb Offset: 0x14) Interrupt Disable Register */
  __I  uint32_t AESB_IMR;       /**< \brief (Aesb Offset: 0x18) Interrupt Mask Register */
  __I  uint32_t AESB_ISR;       /**< \brief (Aesb Offset: 0x1C) Interrupt Status Register */
  __O  uint32_t AESB_KEYWR[4];  /**< \brief (Aesb Offset: 0x20) Key Word Register */
  __I  uint32_t Reserved2[4];
  __O  uint32_t AESB_IDATAR[4]; /**< \brief (Aesb Offset: 0x40) Input Data Register */
  __I  uint32_t AESB_ODATAR[4]; /**< \brief (Aesb Offset: 0x50) Output Data Register */
  __O  uint32_t AESB_IVR[4];    /**< \brief (Aesb Offset: 0x60) Initialization Vector Register */
  __I  uint32_t Reserved3[35];
  __I  uint32_t AESB_VERSION;   /**< \brief (Aesb Offset: 0xFC) Version Register */
} Aesb;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- AESB_CR : (AESB Offset: 0x00) Control Register -------- */
#define AESB_CR_START (0x1u << 0) /**< \brief (AESB_CR) Start Processing */
#define AESB_CR_SWRST (0x1u << 8) /**< \brief (AESB_CR) Software Reset */
#define AESB_CR_LOADSEED (0x1u << 16) /**< \brief (AESB_CR) Random Number Generator Seed Loading */
/* -------- AESB_MR : (AESB Offset: 0x04) Mode Register -------- */
#define AESB_MR_CIPHER (0x1u << 0) /**< \brief (AESB_MR) Processing Mode */
#define AESB_MR_AAHB (0x1u << 2) /**< \brief (AESB_MR) Automatic Bridge Mode */
#define AESB_MR_DUALBUFF (0x1u << 3) /**< \brief (AESB_MR) Dual Input BUFFer */
#define   AESB_MR_DUALBUFF_INACTIVE (0x0u << 3) /**< \brief (AESB_MR) AESB_IDATARx cannot be written during processing of previous block. */
#define   AESB_MR_DUALBUFF_ACTIVE (0x1u << 3) /**< \brief (AESB_MR) AESB_IDATARx can be written during processing of previous block when SMOD = 0x2. It speeds up the overall runtime of large files. */
#define AESB_MR_PROCDLY_Pos 4
#define AESB_MR_PROCDLY_Msk (0xfu << AESB_MR_PROCDLY_Pos) /**< \brief (AESB_MR) Processing Delay */
#define AESB_MR_PROCDLY(value) ((AESB_MR_PROCDLY_Msk & ((value) << AESB_MR_PROCDLY_Pos)))
#define AESB_MR_SMOD_Pos 8
#define AESB_MR_SMOD_Msk (0x3u << AESB_MR_SMOD_Pos) /**< \brief (AESB_MR) Start Mode */
#define   AESB_MR_SMOD_MANUAL_START (0x0u << 8) /**< \brief (AESB_MR) Manual Mode */
#define   AESB_MR_SMOD_AUTO_START (0x1u << 8) /**< \brief (AESB_MR) Auto Mode */
#define   AESB_MR_SMOD_IDATAR0_START (0x2u << 8) /**< \brief (AESB_MR) AESB_IDATAR0 access only Auto Mode */
#define AESB_MR_OPMOD_Pos 12
#define AESB_MR_OPMOD_Msk (0x7u << AESB_MR_OPMOD_Pos) /**< \brief (AESB_MR) Operation Mode */
#define   AESB_MR_OPMOD_ECB (0x0u << 12) /**< \brief (AESB_MR) ECB: Electronic Code Book mode */
#define   AESB_MR_OPMOD_CBC (0x1u << 12) /**< \brief (AESB_MR) CBC: Cipher Block Chaining mode */
#define   AESB_MR_OPMOD_CTR (0x4u << 12) /**< \brief (AESB_MR) CTR: Counter mode (16-bit internal counter) */
#define AESB_MR_LOD (0x1u << 15) /**< \brief (AESB_MR) Last Output Data Mode */
#define AESB_MR_CKEY_Pos 20
#define AESB_MR_CKEY_Msk (0xfu << AESB_MR_CKEY_Pos) /**< \brief (AESB_MR) Countermeasure Key */
#define   AESB_MR_CKEY_PASSWD (0xEu << 20) /**< \brief (AESB_MR) This field must be written with 0xE to allow CMTYPx fields change. Any other values will abort the write operation in CMTYPx fields.Always reads as 0. */
#define AESB_MR_CMTYP1 (0x1u << 24) /**< \brief (AESB_MR) Countermeasure Type 1 */
#define   AESB_MR_CMTYP1_NOPROT_EXTKEY (0x0u << 24) /**< \brief (AESB_MR) Countermeasure type 1 is disabled. */
#define   AESB_MR_CMTYP1_PROT_EXTKEY (0x1u << 24) /**< \brief (AESB_MR) Countermeasure type 1 is enabled. */
#define AESB_MR_CMTYP2 (0x1u << 25) /**< \brief (AESB_MR) Countermeasure Type 2 */
#define   AESB_MR_CMTYP2_NO_PAUSE (0x0u << 25) /**< \brief (AESB_MR) Countermeasure type 2 is disabled. */
#define   AESB_MR_CMTYP2_PAUSE (0x1u << 25) /**< \brief (AESB_MR) Countermeasure type 2 is enabled. */
#define AESB_MR_CMTYP3 (0x1u << 26) /**< \brief (AESB_MR) Countermeasure Type 3 */
#define   AESB_MR_CMTYP3_NO_DUMMY (0x0u << 26) /**< \brief (AESB_MR) Countermeasure type 3 is disabled. */
#define   AESB_MR_CMTYP3_DUMMY (0x1u << 26) /**< \brief (AESB_MR) Countermeasure type 3 is enabled. */
#define AESB_MR_CMTYP4 (0x1u << 27) /**< \brief (AESB_MR) Countermeasure Type 4 */
#define   AESB_MR_CMTYP4_NO_RESTART (0x0u << 27) /**< \brief (AESB_MR) Countermeasure type 4 is disabled. */
#define   AESB_MR_CMTYP4_RESTART (0x1u << 27) /**< \brief (AESB_MR) Countermeasure type 4 is enabled. */
#define AESB_MR_CMTYP5 (0x1u << 28) /**< \brief (AESB_MR) Countermeasure Type 5 */
#define   AESB_MR_CMTYP5_NO_ADDACCESS (0x0u << 28) /**< \brief (AESB_MR) Countermeasure type 5 is disabled. */
#define   AESB_MR_CMTYP5_ADDACCESS (0x1u << 28) /**< \brief (AESB_MR) Countermeasure type 5 is enabled. */
#define AESB_MR_CMTYP6 (0x1u << 29) /**< \brief (AESB_MR) CounterMeasure Type 6 */
#define   AESB_MR_CMTYP6_NO_IDLECURRENT (0x0u << 29) /**< \brief (AESB_MR) Countermeasure type 6 is disabled. */
#define   AESB_MR_CMTYP6_IDLECURRENT (0x1u << 29) /**< \brief (AESB_MR) Countermeasure type 6 is enabled. */
/* -------- AESB_IER : (AESB Offset: 0x10) Interrupt Enable Register -------- */
#define AESB_IER_DATRDY (0x1u << 0) /**< \brief (AESB_IER) Data Ready Interrupt Enable */
#define AESB_IER_URAD (0x1u << 8) /**< \brief (AESB_IER) Unspecified Register Access Detection Interrupt Enable */
/* -------- AESB_IDR : (AESB Offset: 0x14) Interrupt Disable Register -------- */
#define AESB_IDR_DATRDY (0x1u << 0) /**< \brief (AESB_IDR) Data Ready Interrupt Disable */
#define AESB_IDR_URAD (0x1u << 8) /**< \brief (AESB_IDR) Unspecified Register Access Detection Interrupt Disable */
/* -------- AESB_IMR : (AESB Offset: 0x18) Interrupt Mask Register -------- */
#define AESB_IMR_DATRDY (0x1u << 0) /**< \brief (AESB_IMR) Data Ready Interrupt Mask */
#define AESB_IMR_URAD (0x1u << 8) /**< \brief (AESB_IMR) Unspecified Register Access Detection Interrupt Mask */
/* -------- AESB_ISR : (AESB Offset: 0x1C) Interrupt Status Register -------- */
#define AESB_ISR_DATRDY (0x1u << 0) /**< \brief (AESB_ISR) Data Ready */
#define AESB_ISR_URAD (0x1u << 8) /**< \brief (AESB_ISR) Unspecified Register Access Detection Status */
#define AESB_ISR_URAT_Pos 12
#define AESB_ISR_URAT_Msk (0xfu << AESB_ISR_URAT_Pos) /**< \brief (AESB_ISR) Unspecified Register Access: */
#define   AESB_ISR_URAT_IDR_WR_PROCESSING (0x0u << 12) /**< \brief (AESB_ISR) Input Data Register written during the data processing when SMOD=0x2 mode. */
#define   AESB_ISR_URAT_ODR_RD_PROCESSING (0x1u << 12) /**< \brief (AESB_ISR) Output Data Register read during the data processing. */
#define   AESB_ISR_URAT_MR_WR_PROCESSING (0x2u << 12) /**< \brief (AESB_ISR) Mode Register written during the data processing. */
#define   AESB_ISR_URAT_ODR_RD_SUBKGEN (0x3u << 12) /**< \brief (AESB_ISR) Output Data Register read during the sub-keys generation. */
#define   AESB_ISR_URAT_MR_WR_SUBKGEN (0x4u << 12) /**< \brief (AESB_ISR) Mode Register written during the sub-keys generation. */
#define   AESB_ISR_URAT_WOR_RD_ACCESS (0x5u << 12) /**< \brief (AESB_ISR) Write-only register read access. */
/* -------- AESB_KEYWR[4] : (AESB Offset: 0x20) Key Word Register -------- */
#define AESB_KEYWR_KEYW_Pos 0
#define AESB_KEYWR_KEYW_Msk (0xffffffffu << AESB_KEYWR_KEYW_Pos) /**< \brief (AESB_KEYWR[4]) Key Word */
#define AESB_KEYWR_KEYW(value) ((AESB_KEYWR_KEYW_Msk & ((value) << AESB_KEYWR_KEYW_Pos)))
/* -------- AESB_IDATAR[4] : (AESB Offset: 0x40) Input Data Register -------- */
#define AESB_IDATAR_IDATA_Pos 0
#define AESB_IDATAR_IDATA_Msk (0xffffffffu << AESB_IDATAR_IDATA_Pos) /**< \brief (AESB_IDATAR[4]) Input Data Word */
#define AESB_IDATAR_IDATA(value) ((AESB_IDATAR_IDATA_Msk & ((value) << AESB_IDATAR_IDATA_Pos)))
/* -------- AESB_ODATAR[4] : (AESB Offset: 0x50) Output Data Register -------- */
#define AESB_ODATAR_ODATA_Pos 0
#define AESB_ODATAR_ODATA_Msk (0xffffffffu << AESB_ODATAR_ODATA_Pos) /**< \brief (AESB_ODATAR[4]) Output Data */
/* -------- AESB_IVR[4] : (AESB Offset: 0x60) Initialization Vector Register -------- */
#define AESB_IVR_IV_Pos 0
#define AESB_IVR_IV_Msk (0xffffffffu << AESB_IVR_IV_Pos) /**< \brief (AESB_IVR[4]) Initialization Vector */
#define AESB_IVR_IV(value) ((AESB_IVR_IV_Msk & ((value) << AESB_IVR_IV_Pos)))
/* -------- AESB_VERSION : (AESB Offset: 0xFC) Version Register -------- */
#define AESB_VERSION_VERSION_Pos 0
#define AESB_VERSION_VERSION_Msk (0xfffu << AESB_VERSION_VERSION_Pos) /**< \brief (AESB_VERSION) Version of the Hardware Module */
#define AESB_VERSION_MFN_Pos 16
#define AESB_VERSION_MFN_Msk (0x7u << AESB_VERSION_MFN_Pos) /**< \brief (AESB_VERSION) Metal Fix Number */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR Advanced Interrupt Controller */
/* ============================================================================= */
/** \addtogroup SAMA5D2_AIC Advanced Interrupt Controller */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief Aic hardware registers */
typedef struct {
  __IO uint32_t AIC_SSR;       /**< \brief (Aic Offset: 0x00) Source Select Register */
  __IO uint32_t AIC_SMR;       /**< \brief (Aic Offset: 0x04) Source Mode Register */
  __IO uint32_t AIC_SVR;       /**< \brief (Aic Offset: 0x08) Source Vector Register */
  __I  uint32_t Reserved1[1];
  __I  uint32_t AIC_IVR;       /**< \brief (Aic Offset: 0x10) Interrupt Vector Register */
  __I  uint32_t AIC_FVR;       /**< \brief (Aic Offset: 0x14) FIQ Vector Register */
  __I  uint32_t AIC_ISR;       /**< \brief (Aic Offset: 0x18) Interrupt Status Register */
  __I  uint32_t Reserved2[1];
  __I  uint32_t AIC_IPR0;      /**< \brief (Aic Offset: 0x20) Interrupt Pending Register 0 */
  __I  uint32_t AIC_IPR1;      /**< \brief (Aic Offset: 0x24) Interrupt Pending Register 1 */
  __I  uint32_t AIC_IPR2;      /**< \brief (Aic Offset: 0x28) Interrupt Pending Register 2 */
  __I  uint32_t AIC_IPR3;      /**< \brief (Aic Offset: 0x2C) Interrupt Pending Register 3 */
  __I  uint32_t AIC_IMR;       /**< \brief (Aic Offset: 0x30) Interrupt Mask Register */
  __I  uint32_t AIC_CISR;      /**< \brief (Aic Offset: 0x34) Core Interrupt Status Register */
  __O  uint32_t AIC_EOICR;     /**< \brief (Aic Offset: 0x38) End of Interrupt Command Register */
  __IO uint32_t AIC_SPU;       /**< \brief (Aic Offset: 0x3C) Spurious Interrupt Vector Register */
  __O  uint32_t AIC_IECR;      /**< \brief (Aic Offset: 0x40) Interrupt Enable Command Register */
  __O  uint32_t AIC_IDCR;      /**< \brief (Aic Offset: 0x44) Interrupt Disable Command Register */
  __O  uint32_t AIC_ICCR;      /**< \brief (Aic Offset: 0x48) Interrupt Clear Command Register */
  __O  uint32_t AIC_ISCR;      /**< \brief (Aic Offset: 0x4C) Interrupt Set Command Register */
  __I  uint32_t Reserved3[7];
  __IO uint32_t AIC_DCR;       /**< \brief (Aic Offset: 0x6C) Debug Control Register */
  __I  uint32_t Reserved4[29];
  __IO uint32_t AIC_WPMR;      /**< \brief (Aic Offset: 0xE4) Write Protection Mode Register */
  __I  uint32_t AIC_WPSR;      /**< \brief (Aic Offset: 0xE8) Write Protection Status Register */
  __I  uint32_t Reserved5[4];
  __I  uint32_t AIC_VERSION;   /**< \brief (Aic Offset: 0XFC) AIC Version Register */
} Aic;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- AIC_SSR : (AIC Offset: 0x00) Source Select Register -------- */
#define AIC_SSR_INTSEL_Pos 0
#define AIC_SSR_INTSEL_Msk (0x7fu << AIC_SSR_INTSEL_Pos) /**< \brief (AIC_SSR) Interrupt Line Selection */
#define AIC_SSR_INTSEL(value) ((AIC_SSR_INTSEL_Msk & ((value) << AIC_SSR_INTSEL_Pos)))
/* -------- AIC_SMR : (AIC Offset: 0x04) Source Mode Register -------- */
#define AIC_SMR_PRIOR_Pos 0
#define AIC_SMR_PRIOR_Msk (0x7u << AIC_SMR_PRIOR_Pos) /**< \brief (AIC_SMR) Priority Level */
#define AIC_SMR_PRIOR(value) ((AIC_SMR_PRIOR_Msk & ((value) << AIC_SMR_PRIOR_Pos)))
#define AIC_SMR_SRCTYPE_Pos 5
#define AIC_SMR_SRCTYPE_Msk (0x3u << AIC_SMR_SRCTYPE_Pos) /**< \brief (AIC_SMR) Interrupt Source Type */
#define   AIC_SMR_SRCTYPE_INT_LEVEL_SENSITIVE (0x0u << 5) /**< \brief (AIC_SMR) High level Sensitive for internal sourceLow level Sensitive for external source */
#define   AIC_SMR_SRCTYPE_INT_EDGE_TRIGGERED (0x1u << 5) /**< \brief (AIC_SMR) Positive edge triggered for internal sourceNegative edge triggered for external source */
#define   AIC_SMR_SRCTYPE_EXT_HIGH_LEVEL (0x2u << 5) /**< \brief (AIC_SMR) High level Sensitive for internal sourceHigh level Sensitive for external source */
#define   AIC_SMR_SRCTYPE_EXT_POSITIVE_EDGE (0x3u << 5) /**< \brief (AIC_SMR) Positive edge triggered for internal sourcePositive edge triggered for external source */
/* -------- AIC_SVR : (AIC Offset: 0x08) Source Vector Register -------- */
#define AIC_SVR_VECTOR_Pos 0
#define AIC_SVR_VECTOR_Msk (0xffffffffu << AIC_SVR_VECTOR_Pos) /**< \brief (AIC_SVR) Source Vector */
#define AIC_SVR_VECTOR(value) ((AIC_SVR_VECTOR_Msk & ((value) << AIC_SVR_VECTOR_Pos)))
/* -------- AIC_IVR : (AIC Offset: 0x10) Interrupt Vector Register -------- */
#define AIC_IVR_IRQV_Pos 0
#define AIC_IVR_IRQV_Msk (0xffffffffu << AIC_IVR_IRQV_Pos) /**< \brief (AIC_IVR) Interrupt Vector Register */
/* -------- AIC_FVR : (AIC Offset: 0x14) FIQ Vector Register -------- */
#define AIC_FVR_FIQV_Pos 0
#define AIC_FVR_FIQV_Msk (0xffffffffu << AIC_FVR_FIQV_Pos) /**< \brief (AIC_FVR) FIQ Vector Register */
/* -------- AIC_ISR : (AIC Offset: 0x18) Interrupt Status Register -------- */
#define AIC_ISR_IRQID_Pos 0
#define AIC_ISR_IRQID_Msk (0x7fu << AIC_ISR_IRQID_Pos) /**< \brief (AIC_ISR) Current Interrupt Identifier */
/* -------- AIC_IPR0 : (AIC Offset: 0x20) Interrupt Pending Register 0 -------- */
#define AIC_IPR0_FIQ (0x1u << 0) /**< \brief (AIC_IPR0) Interrupt Pending */
#define AIC_IPR0_SYS (0x1u << 1) /**< \brief (AIC_IPR0) Interrupt Pending */
#define AIC_IPR0_PID2 (0x1u << 2) /**< \brief (AIC_IPR0) Interrupt Pending */
#define AIC_IPR0_PID3 (0x1u << 3) /**< \brief (AIC_IPR0) Interrupt Pending */
#define AIC_IPR0_PID4 (0x1u << 4) /**< \brief (AIC_IPR0) Interrupt Pending */
#define AIC_IPR0_PID5 (0x1u << 5) /**< \brief (AIC_IPR0) Interrupt Pending */
#define AIC_IPR0_PID6 (0x1u << 6) /**< \brief (AIC_IPR0) Interrupt Pending */
#define AIC_IPR0_PID7 (0x1u << 7) /**< \brief (AIC_IPR0) Interrupt Pending */
#define AIC_IPR0_PID8 (0x1u << 8) /**< \brief (AIC_IPR0) Interrupt Pending */
#define AIC_IPR0_PID9 (0x1u << 9) /**< \brief (AIC_IPR0) Interrupt Pending */
#define AIC_IPR0_PID10 (0x1u << 10) /**< \brief (AIC_IPR0) Interrupt Pending */
#define AIC_IPR0_PID11 (0x1u << 11) /**< \brief (AIC_IPR0) Interrupt Pending */
#define AIC_IPR0_PID12 (0x1u << 12) /**< \brief (AIC_IPR0) Interrupt Pending */
#define AIC_IPR0_PID13 (0x1u << 13) /**< \brief (AIC_IPR0) Interrupt Pending */
#define AIC_IPR0_PID14 (0x1u << 14) /**< \brief (AIC_IPR0) Interrupt Pending */
#define AIC_IPR0_PID15 (0x1u << 15) /**< \brief (AIC_IPR0) Interrupt Pending */
#define AIC_IPR0_PID16 (0x1u << 16) /**< \brief (AIC_IPR0) Interrupt Pending */
#define AIC_IPR0_PID17 (0x1u << 17) /**< \brief (AIC_IPR0) Interrupt Pending */
#define AIC_IPR0_PID18 (0x1u << 18) /**< \brief (AIC_IPR0) Interrupt Pending */
#define AIC_IPR0_PID19 (0x1u << 19) /**< \brief (AIC_IPR0) Interrupt Pending */
#define AIC_IPR0_PID20 (0x1u << 20) /**< \brief (AIC_IPR0) Interrupt Pending */
#define AIC_IPR0_PID21 (0x1u << 21) /**< \brief (AIC_IPR0) Interrupt Pending */
#define AIC_IPR0_PID22 (0x1u << 22) /**< \brief (AIC_IPR0) Interrupt Pending */
#define AIC_IPR0_PID23 (0x1u << 23) /**< \brief (AIC_IPR0) Interrupt Pending */
#define AIC_IPR0_PID24 (0x1u << 24) /**< \brief (AIC_IPR0) Interrupt Pending */
#define AIC_IPR0_PID25 (0x1u << 25) /**< \brief (AIC_IPR0) Interrupt Pending */
#define AIC_IPR0_PID26 (0x1u << 26) /**< \brief (AIC_IPR0) Interrupt Pending */
#define AIC_IPR0_PID27 (0x1u << 27) /**< \brief (AIC_IPR0) Interrupt Pending */
#define AIC_IPR0_PID28 (0x1u << 28) /**< \brief (AIC_IPR0) Interrupt Pending */
#define AIC_IPR0_PID29 (0x1u << 29) /**< \brief (AIC_IPR0) Interrupt Pending */
#define AIC_IPR0_PID30 (0x1u << 30) /**< \brief (AIC_IPR0) Interrupt Pending */
#define AIC_IPR0_PID31 (0x1u << 31) /**< \brief (AIC_IPR0) Interrupt Pending */
/* -------- AIC_IPR1 : (AIC Offset: 0x24) Interrupt Pending Register 1 -------- */
#define AIC_IPR1_PID32 (0x1u << 0) /**< \brief (AIC_IPR1) Interrupt Pending */
#define AIC_IPR1_PID33 (0x1u << 1) /**< \brief (AIC_IPR1) Interrupt Pending */
#define AIC_IPR1_PID34 (0x1u << 2) /**< \brief (AIC_IPR1) Interrupt Pending */
#define AIC_IPR1_PID35 (0x1u << 3) /**< \brief (AIC_IPR1) Interrupt Pending */
#define AIC_IPR1_PID36 (0x1u << 4) /**< \brief (AIC_IPR1) Interrupt Pending */
#define AIC_IPR1_PID37 (0x1u << 5) /**< \brief (AIC_IPR1) Interrupt Pending */
#define AIC_IPR1_PID38 (0x1u << 6) /**< \brief (AIC_IPR1) Interrupt Pending */
#define AIC_IPR1_PID39 (0x1u << 7) /**< \brief (AIC_IPR1) Interrupt Pending */
#define AIC_IPR1_PID40 (0x1u << 8) /**< \brief (AIC_IPR1) Interrupt Pending */
#define AIC_IPR1_PID41 (0x1u << 9) /**< \brief (AIC_IPR1) Interrupt Pending */
#define AIC_IPR1_PID42 (0x1u << 10) /**< \brief (AIC_IPR1) Interrupt Pending */
#define AIC_IPR1_PID43 (0x1u << 11) /**< \brief (AIC_IPR1) Interrupt Pending */
#define AIC_IPR1_PID44 (0x1u << 12) /**< \brief (AIC_IPR1) Interrupt Pending */
#define AIC_IPR1_PID45 (0x1u << 13) /**< \brief (AIC_IPR1) Interrupt Pending */
#define AIC_IPR1_PID46 (0x1u << 14) /**< \brief (AIC_IPR1) Interrupt Pending */
#define AIC_IPR1_PID47 (0x1u << 15) /**< \brief (AIC_IPR1) Interrupt Pending */
#define AIC_IPR1_PID48 (0x1u << 16) /**< \brief (AIC_IPR1) Interrupt Pending */
#define AIC_IPR1_PID49 (0x1u << 17) /**< \brief (AIC_IPR1) Interrupt Pending */
#define AIC_IPR1_PID50 (0x1u << 18) /**< \brief (AIC_IPR1) Interrupt Pending */
#define AIC_IPR1_PID51 (0x1u << 19) /**< \brief (AIC_IPR1) Interrupt Pending */
#define AIC_IPR1_PID52 (0x1u << 20) /**< \brief (AIC_IPR1) Interrupt Pending */
#define AIC_IPR1_PID53 (0x1u << 21) /**< \brief (AIC_IPR1) Interrupt Pending */
#define AIC_IPR1_PID54 (0x1u << 22) /**< \brief (AIC_IPR1) Interrupt Pending */
#define AIC_IPR1_PID55 (0x1u << 23) /**< \brief (AIC_IPR1) Interrupt Pending */
#define AIC_IPR1_PID56 (0x1u << 24) /**< \brief (AIC_IPR1) Interrupt Pending */
#define AIC_IPR1_PID57 (0x1u << 25) /**< \brief (AIC_IPR1) Interrupt Pending */
#define AIC_IPR1_PID58 (0x1u << 26) /**< \brief (AIC_IPR1) Interrupt Pending */
#define AIC_IPR1_PID59 (0x1u << 27) /**< \brief (AIC_IPR1) Interrupt Pending */
#define AIC_IPR1_PID60 (0x1u << 28) /**< \brief (AIC_IPR1) Interrupt Pending */
#define AIC_IPR1_PID61 (0x1u << 29) /**< \brief (AIC_IPR1) Interrupt Pending */
#define AIC_IPR1_PID62 (0x1u << 30) /**< \brief (AIC_IPR1) Interrupt Pending */
#define AIC_IPR1_PID63 (0x1u << 31) /**< \brief (AIC_IPR1) Interrupt Pending */
/* -------- AIC_IPR2 : (AIC Offset: 0x28) Interrupt Pending Register 2 -------- */
#define AIC_IPR2_PID64 (0x1u << 0) /**< \brief (AIC_IPR2) Interrupt Pending */
#define AIC_IPR2_PID65 (0x1u << 1) /**< \brief (AIC_IPR2) Interrupt Pending */
#define AIC_IPR2_PID66 (0x1u << 2) /**< \brief (AIC_IPR2) Interrupt Pending */
#define AIC_IPR2_PID67 (0x1u << 3) /**< \brief (AIC_IPR2) Interrupt Pending */
#define AIC_IPR2_PID68 (0x1u << 4) /**< \brief (AIC_IPR2) Interrupt Pending */
#define AIC_IPR2_PID69 (0x1u << 5) /**< \brief (AIC_IPR2) Interrupt Pending */
#define AIC_IPR2_PID70 (0x1u << 6) /**< \brief (AIC_IPR2) Interrupt Pending */
#define AIC_IPR2_PID71 (0x1u << 7) /**< \brief (AIC_IPR2) Interrupt Pending */
#define AIC_IPR2_PID72 (0x1u << 8) /**< \brief (AIC_IPR2) Interrupt Pending */
#define AIC_IPR2_PID73 (0x1u << 9) /**< \brief (AIC_IPR2) Interrupt Pending */
#define AIC_IPR2_PID74 (0x1u << 10) /**< \brief (AIC_IPR2) Interrupt Pending */
#define AIC_IPR2_PID75 (0x1u << 11) /**< \brief (AIC_IPR2) Interrupt Pending */
#define AIC_IPR2_PID76 (0x1u << 12) /**< \brief (AIC_IPR2) Interrupt Pending */
#define AIC_IPR2_PID77 (0x1u << 13) /**< \brief (AIC_IPR2) Interrupt Pending */
#define AIC_IPR2_PID78 (0x1u << 14) /**< \brief (AIC_IPR2) Interrupt Pending */
#define AIC_IPR2_PID79 (0x1u << 15) /**< \brief (AIC_IPR2) Interrupt Pending */
#define AIC_IPR2_PID80 (0x1u << 16) /**< \brief (AIC_IPR2) Interrupt Pending */
#define AIC_IPR2_PID81 (0x1u << 17) /**< \brief (AIC_IPR2) Interrupt Pending */
#define AIC_IPR2_PID82 (0x1u << 18) /**< \brief (AIC_IPR2) Interrupt Pending */
#define AIC_IPR2_PID83 (0x1u << 19) /**< \brief (AIC_IPR2) Interrupt Pending */
#define AIC_IPR2_PID84 (0x1u << 20) /**< \brief (AIC_IPR2) Interrupt Pending */
#define AIC_IPR2_PID85 (0x1u << 21) /**< \brief (AIC_IPR2) Interrupt Pending */
#define AIC_IPR2_PID86 (0x1u << 22) /**< \brief (AIC_IPR2) Interrupt Pending */
#define AIC_IPR2_PID87 (0x1u << 23) /**< \brief (AIC_IPR2) Interrupt Pending */
#define AIC_IPR2_PID88 (0x1u << 24) /**< \brief (AIC_IPR2) Interrupt Pending */
#define AIC_IPR2_PID89 (0x1u << 25) /**< \brief (AIC_IPR2) Interrupt Pending */
#define AIC_IPR2_PID90 (0x1u << 26) /**< \brief (AIC_IPR2) Interrupt Pending */
#define AIC_IPR2_PID91 (0x1u << 27) /**< \brief (AIC_IPR2) Interrupt Pending */
#define AIC_IPR2_PID92 (0x1u << 28) /**< \brief (AIC_IPR2) Interrupt Pending */
#define AIC_IPR2_PID93 (0x1u << 29) /**< \brief (AIC_IPR2) Interrupt Pending */
#define AIC_IPR2_PID94 (0x1u << 30) /**< \brief (AIC_IPR2) Interrupt Pending */
#define AIC_IPR2_PID95 (0x1u << 31) /**< \brief (AIC_IPR2) Interrupt Pending */
/* -------- AIC_IPR3 : (AIC Offset: 0x2C) Interrupt Pending Register 3 -------- */
#define AIC_IPR3_PID96 (0x1u << 0) /**< \brief (AIC_IPR3) Interrupt Pending */
#define AIC_IPR3_PID97 (0x1u << 1) /**< \brief (AIC_IPR3) Interrupt Pending */
#define AIC_IPR3_PID98 (0x1u << 2) /**< \brief (AIC_IPR3) Interrupt Pending */
#define AIC_IPR3_PID99 (0x1u << 3) /**< \brief (AIC_IPR3) Interrupt Pending */
#define AIC_IPR3_PID100 (0x1u << 4) /**< \brief (AIC_IPR3) Interrupt Pending */
#define AIC_IPR3_PID101 (0x1u << 5) /**< \brief (AIC_IPR3) Interrupt Pending */
#define AIC_IPR3_PID102 (0x1u << 6) /**< \brief (AIC_IPR3) Interrupt Pending */
#define AIC_IPR3_PID103 (0x1u << 7) /**< \brief (AIC_IPR3) Interrupt Pending */
#define AIC_IPR3_PID104 (0x1u << 8) /**< \brief (AIC_IPR3) Interrupt Pending */
#define AIC_IPR3_PID105 (0x1u << 9) /**< \brief (AIC_IPR3) Interrupt Pending */
#define AIC_IPR3_PID106 (0x1u << 10) /**< \brief (AIC_IPR3) Interrupt Pending */
#define AIC_IPR3_PID107 (0x1u << 11) /**< \brief (AIC_IPR3) Interrupt Pending */
#define AIC_IPR3_PID108 (0x1u << 12) /**< \brief (AIC_IPR3) Interrupt Pending */
#define AIC_IPR3_PID109 (0x1u << 13) /**< \brief (AIC_IPR3) Interrupt Pending */
#define AIC_IPR3_PID110 (0x1u << 14) /**< \brief (AIC_IPR3) Interrupt Pending */
#define AIC_IPR3_PID111 (0x1u << 15) /**< \brief (AIC_IPR3) Interrupt Pending */
#define AIC_IPR3_PID112 (0x1u << 16) /**< \brief (AIC_IPR3) Interrupt Pending */
#define AIC_IPR3_PID113 (0x1u << 17) /**< \brief (AIC_IPR3) Interrupt Pending */
#define AIC_IPR3_PID114 (0x1u << 18) /**< \brief (AIC_IPR3) Interrupt Pending */
#define AIC_IPR3_PID115 (0x1u << 19) /**< \brief (AIC_IPR3) Interrupt Pending */
#define AIC_IPR3_PID116 (0x1u << 20) /**< \brief (AIC_IPR3) Interrupt Pending */
#define AIC_IPR3_PID117 (0x1u << 21) /**< \brief (AIC_IPR3) Interrupt Pending */
#define AIC_IPR3_PID118 (0x1u << 22) /**< \brief (AIC_IPR3) Interrupt Pending */
#define AIC_IPR3_PID119 (0x1u << 23) /**< \brief (AIC_IPR3) Interrupt Pending */
#define AIC_IPR3_PID120 (0x1u << 24) /**< \brief (AIC_IPR3) Interrupt Pending */
#define AIC_IPR3_PID121 (0x1u << 25) /**< \brief (AIC_IPR3) Interrupt Pending */
#define AIC_IPR3_PID122 (0x1u << 26) /**< \brief (AIC_IPR3) Interrupt Pending */
#define AIC_IPR3_PID123 (0x1u << 27) /**< \brief (AIC_IPR3) Interrupt Pending */
#define AIC_IPR3_PID124 (0x1u << 28) /**< \brief (AIC_IPR3) Interrupt Pending */
#define AIC_IPR3_PID125 (0x1u << 29) /**< \brief (AIC_IPR3) Interrupt Pending */
#define AIC_IPR3_PID126 (0x1u << 30) /**< \brief (AIC_IPR3) Interrupt Pending */
#define AIC_IPR3_PID127 (0x1u << 31) /**< \brief (AIC_IPR3) Interrupt Pending */
/* -------- AIC_IMR : (AIC Offset: 0x30) Interrupt Mask Register -------- */
#define AIC_IMR_INTM (0x1u << 0) /**< \brief (AIC_IMR) Interrupt Mask */
/* -------- AIC_CISR : (AIC Offset: 0x34) Core Interrupt Status Register -------- */
#define AIC_CISR_NFIQ (0x1u << 0) /**< \brief (AIC_CISR) NFIQ Status */
#define AIC_CISR_NIRQ (0x1u << 1) /**< \brief (AIC_CISR) NIRQ Status */
/* -------- AIC_EOICR : (AIC Offset: 0x38) End of Interrupt Command Register -------- */
#define AIC_EOICR_ENDIT (0x1u << 0) /**< \brief (AIC_EOICR) Interrupt Processing Complete Command */
/* -------- AIC_SPU : (AIC Offset: 0x3C) Spurious Interrupt Vector Register -------- */
#define AIC_SPU_SIVR_Pos 0
#define AIC_SPU_SIVR_Msk (0xffffffffu << AIC_SPU_SIVR_Pos) /**< \brief (AIC_SPU) Spurious Interrupt Vector Register */
#define AIC_SPU_SIVR(value) ((AIC_SPU_SIVR_Msk & ((value) << AIC_SPU_SIVR_Pos)))
/* -------- AIC_IECR : (AIC Offset: 0x40) Interrupt Enable Command Register -------- */
#define AIC_IECR_INTEN (0x1u << 0) /**< \brief (AIC_IECR) Interrupt Enable */
/* -------- AIC_IDCR : (AIC Offset: 0x44) Interrupt Disable Command Register -------- */
#define AIC_IDCR_INTD (0x1u << 0) /**< \brief (AIC_IDCR) Interrupt Disable */
/* -------- AIC_ICCR : (AIC Offset: 0x48) Interrupt Clear Command Register -------- */
#define AIC_ICCR_INTCLR (0x1u << 0) /**< \brief (AIC_ICCR) Interrupt Clear */
/* -------- AIC_ISCR : (AIC Offset: 0x4C) Interrupt Set Command Register -------- */
#define AIC_ISCR_INTSET (0x1u << 0) /**< \brief (AIC_ISCR) Interrupt Set */
/* -------- AIC_DCR : (AIC Offset: 0x6C) Debug Control Register -------- */
#define AIC_DCR_PROT (0x1u << 0) /**< \brief (AIC_DCR) Protection Mode */
#define AIC_DCR_GMSK (0x1u << 1) /**< \brief (AIC_DCR) General Interrupt Mask */
/* -------- AIC_WPMR : (AIC Offset: 0xE4) Write Protection Mode Register -------- */
#define AIC_WPMR_WPEN (0x1u << 0) /**< \brief (AIC_WPMR) Write Protection Enable */
#define AIC_WPMR_WPKEY_Pos 8
#define AIC_WPMR_WPKEY_Msk (0xffffffu << AIC_WPMR_WPKEY_Pos) /**< \brief (AIC_WPMR) Write Protection Key */
#define   AIC_WPMR_WPKEY_PASSWD (0x414943u << 8) /**< \brief (AIC_WPMR) Writing any other value in this field aborts the write operation of the WPEN bit.Always reads as 0. */
/* -------- AIC_WPSR : (AIC Offset: 0xE8) Write Protection Status Register -------- */
#define AIC_WPSR_WPVS (0x1u << 0) /**< \brief (AIC_WPSR) Write Protection Violation Status */
#define AIC_WPSR_WPVSRC_Pos 8
#define AIC_WPSR_WPVSRC_Msk (0xffffu << AIC_WPSR_WPVSRC_Pos) /**< \brief (AIC_WPSR) Write Protection Violation Source */
/* -------- AIC_VERSION : (AIC Offset: 0XFC) AIC Version Register -------- */
#define AIC_VERSION_VERSION_Pos 0
#define AIC_VERSION_VERSION_Msk (0xfffu << AIC_VERSION_VERSION_Pos) /**< \brief (AIC_VERSION) Version of the Hardware Module */
#define AIC_VERSION_MFN_Pos 16
#define AIC_VERSION_MFN_Msk (0x7u << AIC_VERSION_MFN_Pos) /**< \brief (AIC_VERSION) Metal Fix Number */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR AXI Matrix */
/* ============================================================================= */
/** \addtogroup SAMA5D2_AXIMX AXI Matrix */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief Aximx hardware registers */
typedef struct {
  __O uint32_t AXIMX_REMAP; /**< \brief (Aximx Offset: 0x00) AXI Matrix Remap Register */
} Aximx;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- AXIMX_REMAP : (AXIMX Offset: 0x00) AXI Matrix Remap Register -------- */
#define AXIMX_REMAP_REMAP0 (0x1u << 0) /**< \brief (AXIMX_REMAP) Remap State 0 */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR Controller Area Network */
/* ============================================================================= */
/** \addtogroup SAMA5D2_CAN Controller Area Network */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief Can hardware registers */
typedef struct {
  __IO uint32_t CAN_CREL;     /**< \brief (Can Offset: 0x0000) Mode Register */
  __O  uint32_t CAN_ENDN;     /**< \brief (Can Offset: 0x0004) Interrupt Enable Register */
  __O  uint32_t CAN_CUST;     /**< \brief (Can Offset: 0x0008) Interrupt Enable Register */
  __O  uint32_t CAN_FBTP;     /**< \brief (Can Offset: 0x000C) Interrupt Enable Register */
  __O  uint32_t CAN_TEST;     /**< \brief (Can Offset: 0x0010) Interrupt Enable Register */
  __O  uint32_t CAN_RWD;      /**< \brief (Can Offset: 0x0014) Interrupt Enable Register */
  __O  uint32_t CAN_CCCR;     /**< \brief (Can Offset: 0x0018) Interrupt Enable Register */
  __O  uint32_t CAN_BTP;      /**< \brief (Can Offset: 0x001C) Interrupt Enable Register */
  __O  uint32_t CAN_TSCC;     /**< \brief (Can Offset: 0x0020) Interrupt Enable Register */
  __O  uint32_t CAN_TSVC;     /**< \brief (Can Offset: 0x0024) Interrupt Enable Register */
  __O  uint32_t CAN_TOCC;     /**< \brief (Can Offset: 0x0028) Interrupt Enable Register */
  __O  uint32_t CAN_TOCV;     /**< \brief (Can Offset: 0x002C) Interrupt Enable Register */
  __I  uint32_t Reserved1[4];
  __O  uint32_t CAN_ECR;      /**< \brief (Can Offset: 0x0040) Interrupt Enable Register */
  __O  uint32_t CAN_PSR;      /**< \brief (Can Offset: 0x0044) Interrupt Enable Register */
  __I  uint32_t Reserved2[2];
  __O  uint32_t CAN_IR;       /**< \brief (Can Offset: 0x0050) Interrupt Enable Register */
  __O  uint32_t CAN_IE;       /**< \brief (Can Offset: 0x0054) Interrupt Enable Register */
  __O  uint32_t CAN_ILS;      /**< \brief (Can Offset: 0x0058) Interrupt Enable Register */
  __O  uint32_t CAN_ILE;      /**< \brief (Can Offset: 0x005C) Interrupt Enable Register */
  __I  uint32_t Reserved3[8];
  __O  uint32_t CAN_GFC;      /**< \brief (Can Offset: 0x0080) Interrupt Enable Register */
  __O  uint32_t CAN_SIDFC;    /**< \brief (Can Offset: 0x0084) Interrupt Enable Register */
  __O  uint32_t CAN_XIDFC;    /**< \brief (Can Offset: 0x0088) Interrupt Enable Register */
  __I  uint32_t Reserved4[1];
  __O  uint32_t CAN_XIDAM;    /**< \brief (Can Offset: 0x0090) Interrupt Enable Register */
  __O  uint32_t CAN_HPMS;     /**< \brief (Can Offset: 0x0094) Interrupt Enable Register */
  __O  uint32_t CAN_NDAT1;    /**< \brief (Can Offset: 0x0098) Interrupt Enable Register */
  __O  uint32_t CAN_NDAT2;    /**< \brief (Can Offset: 0x009C) Interrupt Enable Register */
  __O  uint32_t CAN_RXF0C;    /**< \brief (Can Offset: 0x00A0) Interrupt Enable Register */
  __O  uint32_t CAN_RXF0S;    /**< \brief (Can Offset: 0x00A4) Interrupt Enable Register */
  __O  uint32_t CAN_RXF0A;    /**< \brief (Can Offset: 0x00A8) Interrupt Enable Register */
  __O  uint32_t CAN_RXBC;     /**< \brief (Can Offset: 0x00AC) Interrupt Enable Register */
  __O  uint32_t CAN_RXF1C;    /**< \brief (Can Offset: 0x00B0) Interrupt Enable Register */
  __O  uint32_t CAN_RXF1S;    /**< \brief (Can Offset: 0x00B4) Interrupt Enable Register */
  __O  uint32_t CAN_RXF1A;    /**< \brief (Can Offset: 0x00B8) Interrupt Enable Register */
  __O  uint32_t CAN_RXESC;    /**< \brief (Can Offset: 0x00BC) Interrupt Enable Register */
  __O  uint32_t CAN_TXBC;     /**< \brief (Can Offset: 0x00C0) Interrupt Enable Register */
  __O  uint32_t CAN_TXFQS;    /**< \brief (Can Offset: 0x00C4) Interrupt Enable Register */
  __O  uint32_t CAN_TXESC;    /**< \brief (Can Offset: 0x00C8) Interrupt Enable Register */
  __O  uint32_t CAN_TXBRP;    /**< \brief (Can Offset: 0x00CC) Interrupt Enable Register */
  __O  uint32_t CAN_TXBAR;    /**< \brief (Can Offset: 0x00D0) Interrupt Enable Register */
  __O  uint32_t CAN_TXBCR;    /**< \brief (Can Offset: 0x00D4) Interrupt Enable Register */
  __O  uint32_t CAN_TXBTO;    /**< \brief (Can Offset: 0x00D8) Interrupt Enable Register */
  __O  uint32_t CAN_TXBCF;    /**< \brief (Can Offset: 0x00DC) Interrupt Enable Register */
  __O  uint32_t CAN_TXBTIE;   /**< \brief (Can Offset: 0x00E0) Interrupt Enable Register */
  __O  uint32_t CAN_TXBCIE;   /**< \brief (Can Offset: 0x00E4) Interrupt Enable Register */
  __I  uint32_t Reserved5[2];
  __O  uint32_t CAN_TXEFC;    /**< \brief (Can Offset: 0x00F0) Interrupt Enable Register */
  __O  uint32_t CAN_TXEFS;    /**< \brief (Can Offset: 0x00F4) Interrupt Enable Register */
  __O  uint32_t CAN_TXEFA;    /**< \brief (Can Offset: 0x00F8) Interrupt Enable Register */
} Can;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR Chip Identifier */
/* ============================================================================= */
/** \addtogroup SAMA5D2_CHIPID Chip Identifier */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief Chipid hardware registers */
typedef struct {
  __I uint32_t CHIPID_CIDR; /**< \brief (Chipid Offset: 0x0) Chip ID Register */
  __I uint32_t CHIPID_EXID; /**< \brief (Chipid Offset: 0x4) Chip ID Extension Register */
} Chipid;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- CHIPID_CIDR : (CHIPID Offset: 0x0) Chip ID Register -------- */
#define CHIPID_CIDR_VERSION_Pos 0
#define CHIPID_CIDR_VERSION_Msk (0x1fu << CHIPID_CIDR_VERSION_Pos) /**< \brief (CHIPID_CIDR) Version of the Device */
#define CHIPID_CIDR_EPROC_Pos 5
#define CHIPID_CIDR_EPROC_Msk (0x7u << CHIPID_CIDR_EPROC_Pos) /**< \brief (CHIPID_CIDR) Embedded Processor */
#define   CHIPID_CIDR_EPROC_ARM946ES (0x1u << 5) /**< \brief (CHIPID_CIDR) ARM946ES */
#define   CHIPID_CIDR_EPROC_ARM7TDMI (0x2u << 5) /**< \brief (CHIPID_CIDR) ARM7TDMI */
#define   CHIPID_CIDR_EPROC_CM3 (0x3u << 5) /**< \brief (CHIPID_CIDR) Cortex-M3 */
#define   CHIPID_CIDR_EPROC_ARM920T (0x4u << 5) /**< \brief (CHIPID_CIDR) ARM920T */
#define   CHIPID_CIDR_EPROC_ARM926EJS (0x5u << 5) /**< \brief (CHIPID_CIDR) ARM926EJS */
#define   CHIPID_CIDR_EPROC_CA5 (0x6u << 5) /**< \brief (CHIPID_CIDR) Cortex-A5 */
#define   CHIPID_CIDR_EPROC_CM4 (0x7u << 5) /**< \brief (CHIPID_CIDR) Cortex-M4 */
#define CHIPID_CIDR_NVPSIZ_Pos 8
#define CHIPID_CIDR_NVPSIZ_Msk (0xfu << CHIPID_CIDR_NVPSIZ_Pos) /**< \brief (CHIPID_CIDR) Nonvolatile Program Memory Size */
#define   CHIPID_CIDR_NVPSIZ_NONE (0x0u << 8) /**< \brief (CHIPID_CIDR) None */
#define   CHIPID_CIDR_NVPSIZ_8K (0x1u << 8) /**< \brief (CHIPID_CIDR) 8 Kbytes */
#define   CHIPID_CIDR_NVPSIZ_16K (0x2u << 8) /**< \brief (CHIPID_CIDR) 16 Kbytes */
#define   CHIPID_CIDR_NVPSIZ_32K (0x3u << 8) /**< \brief (CHIPID_CIDR) 32 Kbytes */
#define   CHIPID_CIDR_NVPSIZ_64K (0x5u << 8) /**< \brief (CHIPID_CIDR) 64 Kbytes */
#define   CHIPID_CIDR_NVPSIZ_128K (0x7u << 8) /**< \brief (CHIPID_CIDR) 128 Kbytes */
#define   CHIPID_CIDR_NVPSIZ_256K (0x9u << 8) /**< \brief (CHIPID_CIDR) 256 Kbytes */
#define   CHIPID_CIDR_NVPSIZ_512K (0xAu << 8) /**< \brief (CHIPID_CIDR) 512 Kbytes */
#define   CHIPID_CIDR_NVPSIZ_1024K (0xCu << 8) /**< \brief (CHIPID_CIDR) 1024 Kbytes */
#define   CHIPID_CIDR_NVPSIZ_2048K (0xEu << 8) /**< \brief (CHIPID_CIDR) 2048 Kbytes */
#define CHIPID_CIDR_NVPSIZ2_Pos 12
#define CHIPID_CIDR_NVPSIZ2_Msk (0xfu << CHIPID_CIDR_NVPSIZ2_Pos) /**< \brief (CHIPID_CIDR) Second Nonvolatile Program Memory Size */
#define   CHIPID_CIDR_NVPSIZ2_NONE (0x0u << 12) /**< \brief (CHIPID_CIDR) None */
#define   CHIPID_CIDR_NVPSIZ2_8K (0x1u << 12) /**< \brief (CHIPID_CIDR) 8 Kbytes */
#define   CHIPID_CIDR_NVPSIZ2_16K (0x2u << 12) /**< \brief (CHIPID_CIDR) 16 Kbytes */
#define   CHIPID_CIDR_NVPSIZ2_32K (0x3u << 12) /**< \brief (CHIPID_CIDR) 32 Kbytes */
#define   CHIPID_CIDR_NVPSIZ2_64K (0x5u << 12) /**< \brief (CHIPID_CIDR) 64 Kbytes */
#define   CHIPID_CIDR_NVPSIZ2_128K (0x7u << 12) /**< \brief (CHIPID_CIDR) 128 Kbytes */
#define   CHIPID_CIDR_NVPSIZ2_256K (0x9u << 12) /**< \brief (CHIPID_CIDR) 256 Kbytes */
#define   CHIPID_CIDR_NVPSIZ2_512K (0xAu << 12) /**< \brief (CHIPID_CIDR) 512 Kbytes */
#define   CHIPID_CIDR_NVPSIZ2_1024K (0xCu << 12) /**< \brief (CHIPID_CIDR) 1024 Kbytes */
#define   CHIPID_CIDR_NVPSIZ2_2048K (0xEu << 12) /**< \brief (CHIPID_CIDR) 2048 Kbytes */
#define CHIPID_CIDR_SRAMSIZ_Pos 16
#define CHIPID_CIDR_SRAMSIZ_Msk (0xfu << CHIPID_CIDR_SRAMSIZ_Pos) /**< \brief (CHIPID_CIDR) Internal SRAM Size */
#define   CHIPID_CIDR_SRAMSIZ_48K (0x0u << 16) /**< \brief (CHIPID_CIDR) 48 Kbytes */
#define   CHIPID_CIDR_SRAMSIZ_192K (0x1u << 16) /**< \brief (CHIPID_CIDR) 192 Kbytes */
#define   CHIPID_CIDR_SRAMSIZ_2K (0x2u << 16) /**< \brief (CHIPID_CIDR) 2 Kbytes */
#define   CHIPID_CIDR_SRAMSIZ_6K (0x3u << 16) /**< \brief (CHIPID_CIDR) 6 Kbytes */
#define   CHIPID_CIDR_SRAMSIZ_24K (0x4u << 16) /**< \brief (CHIPID_CIDR) 24 Kbytes */
#define   CHIPID_CIDR_SRAMSIZ_4K (0x5u << 16) /**< \brief (CHIPID_CIDR) 4 Kbytes */
#define   CHIPID_CIDR_SRAMSIZ_80K (0x6u << 16) /**< \brief (CHIPID_CIDR) 80 Kbytes */
#define   CHIPID_CIDR_SRAMSIZ_160K (0x7u << 16) /**< \brief (CHIPID_CIDR) 160 Kbytes */
#define   CHIPID_CIDR_SRAMSIZ_8K (0x8u << 16) /**< \brief (CHIPID_CIDR) 8 Kbytes */
#define   CHIPID_CIDR_SRAMSIZ_16K (0x9u << 16) /**< \brief (CHIPID_CIDR) 16 Kbytes */
#define   CHIPID_CIDR_SRAMSIZ_32K (0xAu << 16) /**< \brief (CHIPID_CIDR) 32 Kbytes */
#define   CHIPID_CIDR_SRAMSIZ_64K (0xBu << 16) /**< \brief (CHIPID_CIDR) 64 Kbytes */
#define   CHIPID_CIDR_SRAMSIZ_128K (0xCu << 16) /**< \brief (CHIPID_CIDR) 128 Kbytes */
#define   CHIPID_CIDR_SRAMSIZ_256K (0xDu << 16) /**< \brief (CHIPID_CIDR) 256 Kbytes */
#define   CHIPID_CIDR_SRAMSIZ_96K (0xEu << 16) /**< \brief (CHIPID_CIDR) 96 Kbytes */
#define   CHIPID_CIDR_SRAMSIZ_512K (0xFu << 16) /**< \brief (CHIPID_CIDR) 512 Kbytes */
#define CHIPID_CIDR_ARCH_Pos 20
#define CHIPID_CIDR_ARCH_Msk (0xffu << CHIPID_CIDR_ARCH_Pos) /**< \brief (CHIPID_CIDR) Architecture Identifier */
#define   CHIPID_CIDR_ARCH_SAMA5 (0xA5u << 20) /**< \brief (CHIPID_CIDR) SAMA5 */
#define CHIPID_CIDR_NVPTYP_Pos 28
#define CHIPID_CIDR_NVPTYP_Msk (0x7u << CHIPID_CIDR_NVPTYP_Pos) /**< \brief (CHIPID_CIDR) Nonvolatile Program Memory Type */
#define   CHIPID_CIDR_NVPTYP_ROM (0x0u << 28) /**< \brief (CHIPID_CIDR) ROM */
#define   CHIPID_CIDR_NVPTYP_ROMLESS (0x1u << 28) /**< \brief (CHIPID_CIDR) ROMless or on-chip Flash */
#define   CHIPID_CIDR_NVPTYP_FLASH (0x2u << 28) /**< \brief (CHIPID_CIDR) Embedded Flash Memory */
#define   CHIPID_CIDR_NVPTYP_ROM_FLASH (0x3u << 28) /**< \brief (CHIPID_CIDR) ROM and Embedded Flash Memory- NVPSIZ is ROM size- NVPSIZ2 is Flash size */
#define   CHIPID_CIDR_NVPTYP_SRAM (0x4u << 28) /**< \brief (CHIPID_CIDR) SRAM emulating ROM */
#define CHIPID_CIDR_EXT (0x1u << 31) /**< \brief (CHIPID_CIDR) Extension Flag */
/* -------- CHIPID_EXID : (CHIPID Offset: 0x4) Chip ID Extension Register -------- */
#define CHIPID_EXID_EXID_Pos 0
#define CHIPID_EXID_EXID_Msk (0xffffffffu << CHIPID_EXID_EXID_Pos) /**< \brief (CHIPID_EXID) Chip ID Extension */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR Audio Class D Amplifier (CLASSD) */
/* ============================================================================= */
/** \addtogroup SAMA5D2_CLASSD Audio Class D Amplifier (CLASSD) */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief Classd hardware registers */
typedef struct {
  __O  uint32_t CLASSD_CR;      /**< \brief (Classd Offset: 0x00) Control Register */
  __IO uint32_t CLASSD_MR;      /**< \brief (Classd Offset: 0x04) Mode Register */
  __IO uint32_t CLASSD_INTPMR;  /**< \brief (Classd Offset: 0x08) Interpolator Mode Register */
  __I  uint32_t CLASSD_INTSR;   /**< \brief (Classd Offset: 0x0C) Interpolator Status Register */
  __IO uint32_t CLASSD_THR;     /**< \brief (Classd Offset: 0x10) Transmit Holding Register */
  __O  uint32_t CLASSD_IER;     /**< \brief (Classd Offset: 0x14) Interrupt Enable Register */
  __O  uint32_t CLASSD_IDR;     /**< \brief (Classd Offset: 0x18) Interrupt Disable Register */
  __IO uint32_t CLASSD_IMR;     /**< \brief (Classd Offset: 0x1C) Interrupt Mask Register */
  __I  uint32_t CLASSD_ISR;     /**< \brief (Classd Offset: 0x20) Interrupt Status Register */
  __I  uint32_t Reserved1[48];
  __IO uint32_t CLASSD_WPMR;    /**< \brief (Classd Offset: 0xE4) Write Protection Mode Register */
  __I  uint32_t Reserved2[5];
  __I  uint32_t CLASSD_VERSION; /**< \brief (Classd Offset: 0xFC) IP Version Register */
} Classd;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- CLASSD_CR : (CLASSD Offset: 0x00) Control Register -------- */
#define CLASSD_CR_SWRST (0x1u << 0) /**< \brief (CLASSD_CR) Software Reset */
/* -------- CLASSD_MR : (CLASSD Offset: 0x04) Mode Register -------- */
#define CLASSD_MR_ENCHL (0x1u << 0) /**< \brief (CLASSD_MR) Enable Left Channel */
#define CLASSD_MR_MUTECHL (0x1u << 1) /**< \brief (CLASSD_MR) Mute Left Channel */
#define CLASSD_MR_ENCHR (0x1u << 4) /**< \brief (CLASSD_MR) Enable Right Channel */
#define CLASSD_MR_MUTECHR (0x1u << 5) /**< \brief (CLASSD_MR) Mute Right Channel */
#define CLASSD_MR_PWMTYP (0x1u << 8) /**< \brief (CLASSD_MR) PWM Modulation Type */
#define CLASSD_MR_NOVRE (0x1u << 16) /**< \brief (CLASSD_MR) Non-Overlapping Enable */
#define CLASSD_MR_NOVRVAL_Pos 20
#define CLASSD_MR_NOVRVAL_Msk (0x3u << CLASSD_MR_NOVRVAL_Pos) /**< \brief (CLASSD_MR) Non-Overlapping Value */
#define   CLASSD_MR_NOVRVAL_5NS (0x0u << 20) /**< \brief (CLASSD_MR) Non-Overlapping time is 5ns */
#define   CLASSD_MR_NOVRVAL_10NS (0x1u << 20) /**< \brief (CLASSD_MR) Non-Overlapping time is 10ns */
#define   CLASSD_MR_NOVRVAL_15NS (0x2u << 20) /**< \brief (CLASSD_MR) Non-Overlapping time is 15ns */
#define   CLASSD_MR_NOVRVAL_20NS (0x3u << 20) /**< \brief (CLASSD_MR) Non-Overlapping time is 20ns */
/* -------- CLASSD_INTPMR : (CLASSD Offset: 0x08) Interpolator Mode Register -------- */
#define CLASSD_INTPMR_ATTL_Pos 0
#define CLASSD_INTPMR_ATTL_Msk (0x7fu << CLASSD_INTPMR_ATTL_Pos) /**< \brief (CLASSD_INTPMR) Left Channel Attenuation */
#define CLASSD_INTPMR_ATTL(value) ((CLASSD_INTPMR_ATTL_Msk & ((value) << CLASSD_INTPMR_ATTL_Pos)))
#define CLASSD_INTPMR_ATTR_Pos 8
#define CLASSD_INTPMR_ATTR_Msk (0x7fu << CLASSD_INTPMR_ATTR_Pos) /**< \brief (CLASSD_INTPMR) Right Channel Attenuation */
#define CLASSD_INTPMR_ATTR(value) ((CLASSD_INTPMR_ATTR_Msk & ((value) << CLASSD_INTPMR_ATTR_Pos)))
#define CLASSD_INTPMR_ACLKFREQ_Pos 16
#define CLASSD_INTPMR_ACLKFREQ_Msk (0x3u << CLASSD_INTPMR_ACLKFREQ_Pos) /**< \brief (CLASSD_INTPMR) Audio Clock Frequency */
#define   CLASSD_INTPMR_ACLKFREQ_12M288 (0x0u << 16) /**< \brief (CLASSD_INTPMR) Audio Clock (ACLK) is 12.288 MHz */
#define   CLASSD_INTPMR_ACLKFREQ_11M2896 (0x1u << 16) /**< \brief (CLASSD_INTPMR) Audio Clock (ACLK) is 11.2896 MHz */
#define CLASSD_INTPMR_DEEMP (0x1u << 18) /**< \brief (CLASSD_INTPMR) Enable De-emphasis Filter */
#define CLASSD_INTPMR_SWAP (0x1u << 19) /**< \brief (CLASSD_INTPMR) Swap Left and Right Channels */
#define CLASSD_INTPMR_FRAME_Pos 20
#define CLASSD_INTPMR_FRAME_Msk (0x7u << CLASSD_INTPMR_FRAME_Pos) /**< \brief (CLASSD_INTPMR) CLASSD Incoming data Sampling Frequency */
#define   CLASSD_INTPMR_FRAME_FRAME_8K (0x0u << 20) /**< \brief (CLASSD_INTPMR) 8 kHz */
#define   CLASSD_INTPMR_FRAME_FRAME_16K (0x1u << 20) /**< \brief (CLASSD_INTPMR) 16 kHz */
#define   CLASSD_INTPMR_FRAME_FRAME_32K (0x2u << 20) /**< \brief (CLASSD_INTPMR) 32 kHz */
#define   CLASSD_INTPMR_FRAME_FRAME_48K (0x3u << 20) /**< \brief (CLASSD_INTPMR) 48 kHz */
#define   CLASSD_INTPMR_FRAME_FRAME_96K (0x4u << 20) /**< \brief (CLASSD_INTPMR) 96 kHz */
#define   CLASSD_INTPMR_FRAME_FRAME_22K (0x5u << 20) /**< \brief (CLASSD_INTPMR) 22.05 kHz */
#define   CLASSD_INTPMR_FRAME_FRAME_44K (0x6u << 20) /**< \brief (CLASSD_INTPMR) 44.1 kHz */
#define   CLASSD_INTPMR_FRAME_FRAME_88K (0x7u << 20) /**< \brief (CLASSD_INTPMR) 88.2 kHz */
#define CLASSD_INTPMR_EQCFG_Pos 24
#define CLASSD_INTPMR_EQCFG_Msk (0xfu << CLASSD_INTPMR_EQCFG_Pos) /**< \brief (CLASSD_INTPMR) Equalization Selection */
#define   CLASSD_INTPMR_EQCFG_FLAT (0x0u << 24) /**< \brief (CLASSD_INTPMR) Flat Response */
#define   CLASSD_INTPMR_EQCFG_BBOOST12 (0x1u << 24) /**< \brief (CLASSD_INTPMR) Bass boost +12dB */
#define   CLASSD_INTPMR_EQCFG_BBOOST6 (0x2u << 24) /**< \brief (CLASSD_INTPMR) Bass boost +6dB */
#define   CLASSD_INTPMR_EQCFG_BCUT12 (0x3u << 24) /**< \brief (CLASSD_INTPMR) Bass cut -12dB */
#define   CLASSD_INTPMR_EQCFG_BCUT6 (0x4u << 24) /**< \brief (CLASSD_INTPMR) Bass cut -6dB */
#define   CLASSD_INTPMR_EQCFG_MBOOST3 (0x5u << 24) /**< \brief (CLASSD_INTPMR) Medium boost +3dB */
#define   CLASSD_INTPMR_EQCFG_MBOOST8 (0x6u << 24) /**< \brief (CLASSD_INTPMR) Medium boost +8dB */
#define   CLASSD_INTPMR_EQCFG_MCUT3 (0x7u << 24) /**< \brief (CLASSD_INTPMR) Medium cut -3dB */
#define   CLASSD_INTPMR_EQCFG_MCUT8 (0x8u << 24) /**< \brief (CLASSD_INTPMR) Medium cut -8dB */
#define   CLASSD_INTPMR_EQCFG_TBOOST12 (0x9u << 24) /**< \brief (CLASSD_INTPMR) Treble boost +12dB */
#define   CLASSD_INTPMR_EQCFG_TBOOST6 (0xAu << 24) /**< \brief (CLASSD_INTPMR) Treble boost +6dB */
#define   CLASSD_INTPMR_EQCFG_TCUT12 (0xBu << 24) /**< \brief (CLASSD_INTPMR) Treble cut -12dB */
#define   CLASSD_INTPMR_EQCFG_TCUT6 (0xCu << 24) /**< \brief (CLASSD_INTPMR) Treble cut -6dB */
#define CLASSD_INTPMR_MONO (0x1u << 28) /**< \brief (CLASSD_INTPMR) Mono Signal */
#define CLASSD_INTPMR_MONOMODE_Pos 29
#define CLASSD_INTPMR_MONOMODE_Msk (0x3u << CLASSD_INTPMR_MONOMODE_Pos) /**< \brief (CLASSD_INTPMR) Mono Mode Selection */
#define   CLASSD_INTPMR_MONOMODE_MONOMIX (0x0u << 29) /**< \brief (CLASSD_INTPMR) (left + right) / 2 is sent on both channels */
#define   CLASSD_INTPMR_MONOMODE_MONOSAT (0x1u << 29) /**< \brief (CLASSD_INTPMR) (left + right) is sent to both channels. If the sum is too high, the result is saturated. */
#define   CLASSD_INTPMR_MONOMODE_MONOLEFT (0x2u << 29) /**< \brief (CLASSD_INTPMR) THR[15:0] is sent on both left and right channels */
#define   CLASSD_INTPMR_MONOMODE_MONORIGHT (0x3u << 29) /**< \brief (CLASSD_INTPMR) THR[31:16] is sent on both left and right channels */
/* -------- CLASSD_INTSR : (CLASSD Offset: 0x0C) Interpolator Status Register -------- */
#define CLASSD_INTSR_CFGERR (0x1u << 0) /**< \brief (CLASSD_INTSR) Configuration Error */
/* -------- CLASSD_THR : (CLASSD Offset: 0x10) Transmit Holding Register -------- */
#define CLASSD_THR_DATAL_Pos 0
#define CLASSD_THR_DATAL_Msk (0xffffu << CLASSD_THR_DATAL_Pos) /**< \brief (CLASSD_THR) Left Channel Data */
#define CLASSD_THR_DATAL(value) ((CLASSD_THR_DATAL_Msk & ((value) << CLASSD_THR_DATAL_Pos)))
#define CLASSD_THR_DATAR_Pos 16
#define CLASSD_THR_DATAR_Msk (0xffffu << CLASSD_THR_DATAR_Pos) /**< \brief (CLASSD_THR) Right Channel Data */
#define CLASSD_THR_DATAR(value) ((CLASSD_THR_DATAR_Msk & ((value) << CLASSD_THR_DATAR_Pos)))
/* -------- CLASSD_IER : (CLASSD Offset: 0x14) Interrupt Enable Register -------- */
#define CLASSD_IER_DATRDY (0x1u << 0) /**< \brief (CLASSD_IER) Data Ready */
/* -------- CLASSD_IDR : (CLASSD Offset: 0x18) Interrupt Disable Register -------- */
#define CLASSD_IDR_DATRDY (0x1u << 0) /**< \brief (CLASSD_IDR) Data Ready */
/* -------- CLASSD_IMR : (CLASSD Offset: 0x1C) Interrupt Mask Register -------- */
#define CLASSD_IMR_DATRDY (0x1u << 0) /**< \brief (CLASSD_IMR) Data Ready */
/* -------- CLASSD_ISR : (CLASSD Offset: 0x20) Interrupt Status Register -------- */
#define CLASSD_ISR_DATRDY (0x1u << 0) /**< \brief (CLASSD_ISR) Data Ready */
/* -------- CLASSD_WPMR : (CLASSD Offset: 0xE4) Write Protection Mode Register -------- */
#define CLASSD_WPMR_WPEN (0x1u << 0) /**< \brief (CLASSD_WPMR) Write Protection Enable */
#define CLASSD_WPMR_WPKEY_Pos 8
#define CLASSD_WPMR_WPKEY_Msk (0xffffffu << CLASSD_WPMR_WPKEY_Pos) /**< \brief (CLASSD_WPMR) Write Protection Key */
#define   CLASSD_WPMR_WPKEY_PASSWD (0x434C44u << 8) /**< \brief (CLASSD_WPMR) Writing any other value in this field aborts the write operation of the WPEN bit.Always reads as 0. */
/* -------- CLASSD_VERSION : (CLASSD Offset: 0xFC) IP Version Register -------- */
#define CLASSD_VERSION_VERSION_Pos 0
#define CLASSD_VERSION_VERSION_Msk (0xfffu << CLASSD_VERSION_VERSION_Pos) /**< \brief (CLASSD_VERSION) Version of the Hardware Module */
#define CLASSD_VERSION_MFN_Pos 16
#define CLASSD_VERSION_MFN_Msk (0x7u << CLASSD_VERSION_MFN_Pos) /**< \brief (CLASSD_VERSION) Metal Fix Number */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR Flexible Serial Communication Unit */
/* ============================================================================= */
/** \addtogroup SAMA5D2_FLEXCOM Flexible Serial Communication Unit */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief Flexcom hardware registers */
typedef struct {
  __IO uint32_t FX_MR;          /**< \brief (Flexcom Offset: 0x000) FLEXCOM Mode Register */
  __I  uint32_t Reserved1[3];
  __I  uint32_t FX_RHR;         /**< \brief (Flexcom Offset: 0x010) FLEXCOM Receive Holding Register */
  __I  uint32_t Reserved2[3];
  __IO uint32_t FX_THR;         /**< \brief (Flexcom Offset: 0x020) FLEXCOM Transmit Holding Register */
  __I  uint32_t Reserved3[54];
  __I  uint32_t FX_VERSION;     /**< \brief (Flexcom Offset: 0x0FC) FLEXCOM Version Register */
  __I  uint32_t Reserved4[64];
  __O  uint32_t FX_US_CR;       /**< \brief (Flexcom Offset: 0x200) USART Control Register */
  __IO uint32_t FX_US_MR;       /**< \brief (Flexcom Offset: 0x204) USART Mode Register */
  __O  uint32_t FX_US_IER;      /**< \brief (Flexcom Offset: 0x208) USART Interrupt Enable Register */
  __O  uint32_t FX_US_IDR;      /**< \brief (Flexcom Offset: 0x20C) USART Interrupt Disable Register */
  __I  uint32_t FX_US_IMR;      /**< \brief (Flexcom Offset: 0x210) USART Interrupt Mask Register */
  __I  uint32_t FX_US_CSR;      /**< \brief (Flexcom Offset: 0x214) USART Channel Status Register */
  __I  uint32_t FX_US_RHR;      /**< \brief (Flexcom Offset: 0x218) USART Receive Holding Register */
  __O  uint32_t FX_US_THR;      /**< \brief (Flexcom Offset: 0x21C) USART Transmit Holding Register */
  __IO uint32_t FX_US_BRGR;     /**< \brief (Flexcom Offset: 0x220) USART Baud Rate Generator Register */
  __IO uint32_t FX_US_RTOR;     /**< \brief (Flexcom Offset: 0x224) USART Receiver Timeout Register */
  __IO uint32_t FX_US_TTGR;     /**< \brief (Flexcom Offset: 0x228) USART Transmitter Timeguard Register */
  __I  uint32_t Reserved5[5];
  __IO uint32_t FX_US_FIDI;     /**< \brief (Flexcom Offset: 0x240) USART FI DI Ratio Register */
  __I  uint32_t FX_US_NER;      /**< \brief (Flexcom Offset: 0x244) USART Number of Errors Register */
  __I  uint32_t Reserved6[1];
  __IO uint32_t FX_US_IF;       /**< \brief (Flexcom Offset: 0x24C) USART IrDA Filter Register */
  __IO uint32_t FX_US_MAN;      /**< \brief (Flexcom Offset: 0x250) USART Manchester Configuration Register */
  __IO uint32_t FX_US_LINMR;    /**< \brief (Flexcom Offset: 0x254) USART LIN Mode Register */
  __IO uint32_t FX_US_LINIR;    /**< \brief (Flexcom Offset: 0x258) USART LIN Identifier Register */
  __I  uint32_t FX_US_LINBRR;   /**< \brief (Flexcom Offset: 0x25C) USART LIN Baud Rate Register */
  __I  uint32_t Reserved7[12];
  __IO uint32_t FX_US_CMPR;     /**< \brief (Flexcom Offset: 0x290) USART Comparison Register */
  __I  uint32_t Reserved8[20];
  __IO uint32_t FX_US_WPMR;     /**< \brief (Flexcom Offset: 0x2E4) USART Write Protection Mode Register */
  __I  uint32_t FX_US_WPSR;     /**< \brief (Flexcom Offset: 0x2E8) USART Write Protection Status Register */
  __I  uint32_t Reserved9[4];
  __I  uint32_t FX_US_VERSION;  /**< \brief (Flexcom Offset: 0x2FC) USART Version Register */
  __I  uint32_t Reserved10[64];
  __O  uint32_t FX_SPI_CR;      /**< \brief (Flexcom Offset: 0x400) SPI Control Register */
  __IO uint32_t FX_SPI_MR;      /**< \brief (Flexcom Offset: 0x404) SPI Mode Register */
  __I  uint32_t FX_SPI_RDR;     /**< \brief (Flexcom Offset: 0x408) SPI Receive Data Register */
  __O  uint32_t FX_SPI_TDR;     /**< \brief (Flexcom Offset: 0x40C) SPI Transmit Data Register */
  __I  uint32_t FX_SPI_SR;      /**< \brief (Flexcom Offset: 0x410) SPI Status Register */
  __O  uint32_t FX_SPI_IER;     /**< \brief (Flexcom Offset: 0x414) SPI Interrupt Enable Register */
  __O  uint32_t FX_SPI_IDR;     /**< \brief (Flexcom Offset: 0x418) SPI Interrupt Disable Register */
  __I  uint32_t FX_SPI_IMR;     /**< \brief (Flexcom Offset: 0x41C) SPI Interrupt Mask Register */
  __I  uint32_t Reserved11[4];
  __IO uint32_t FX_SPI_CSR[2];  /**< \brief (Flexcom Offset: 0x430) SPI Chip Select Register */
  __I  uint32_t Reserved12[4];
  __IO uint32_t FX_SPI_CMPR;    /**< \brief (Flexcom Offset: 0x448) SPI Comparison Register */
  __I  uint32_t Reserved13[38];
  __IO uint32_t FX_SPI_WPMR;    /**< \brief (Flexcom Offset: 0x4E4) SPI Write Protection Mode Register */
  __I  uint32_t FX_SPI_WPSR;    /**< \brief (Flexcom Offset: 0x4E8) SPI Write Protection Status Register */
  __I  uint32_t Reserved14[4];
  __I  uint32_t FX_SPI_VERSION; /**< \brief (Flexcom Offset: 0x4FC) SPI Version Register */
  __I  uint32_t Reserved15[64];
  __O  uint32_t FX_TWI_CR;      /**< \brief (Flexcom Offset: 0x600) TWI Control Register */
  __IO uint32_t FX_TWI_MMR;     /**< \brief (Flexcom Offset: 0x604) TWI Master Mode Register */
  __IO uint32_t FX_TWI_SMR;     /**< \brief (Flexcom Offset: 0x608) TWI Slave Mode Register */
  __IO uint32_t FX_TWI_IADR;    /**< \brief (Flexcom Offset: 0x60C) TWI Internal Address Register */
  __IO uint32_t FX_TWI_CWGR;    /**< \brief (Flexcom Offset: 0x610) TWI Clock Waveform Generator Register */
  __I  uint32_t Reserved16[3];
  __I  uint32_t FX_TWI_SR;      /**< \brief (Flexcom Offset: 0x620) TWI Status Register */
  __O  uint32_t FX_TWI_IER;     /**< \brief (Flexcom Offset: 0x624) TWI Interrupt Enable Register */
  __O  uint32_t FX_TWI_IDR;     /**< \brief (Flexcom Offset: 0x628) TWI Interrupt Disable Register */
  __I  uint32_t FX_TWI_IMR;     /**< \brief (Flexcom Offset: 0x62C) TWI Interrupt Mask Register */
  __I  uint32_t FX_TWI_RHR;     /**< \brief (Flexcom Offset: 0x630) TWI Receive Holding Register */
  __O  uint32_t FX_TWI_THR;     /**< \brief (Flexcom Offset: 0x634) TWI Transmit Holding Register */
  __IO uint32_t FX_TWI_SMBTR;   /**< \brief (Flexcom Offset: 0x638) TWI SMBus Timing Register */
  __I  uint32_t Reserved17[1];
  __IO uint32_t FX_TWI_ACR;     /**< \brief (Flexcom Offset: 0x640) TWI Alternative Command Register */
  __IO uint32_t FX_TWI_FILTR;   /**< \brief (Flexcom Offset: 0x644) TWI Filter Register */
  __I  uint32_t Reserved18[1];
  __IO uint32_t FX_TWI_SWMR;    /**< \brief (Flexcom Offset: 0x64C) TWI SleepWalking Matching Register */
  __I  uint32_t Reserved19[32];
  __I  uint32_t FX_TWI_DR;      /**< \brief (Flexcom Offset: 0x6D0) TWI Debug Register */
  __I  uint32_t Reserved20[4];
  __IO uint32_t FX_TWI_WPMR;    /**< \brief (Flexcom Offset: 0x6E4) TWI Protection Mode Register */
  __I  uint32_t FX_TWI_WPSR;    /**< \brief (Flexcom Offset: 0x6E8) TWI Protection Status Register */
  __I  uint32_t Reserved21[4];
  __I  uint32_t FX_TWI_VER;     /**< \brief (Flexcom Offset: 0x6FC) TWI Version Register */
} Flexcom;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- FX_MR : (FLEXCOM Offset: 0x000) FLEXCOM Mode Register -------- */
#define FX_MR_OPMODE_Pos 0
#define FX_MR_OPMODE_Msk (0x3u << FX_MR_OPMODE_Pos) /**< \brief (FX_MR) FLEXCOM Operating Mode */
#define   FX_MR_OPMODE_NO_COM (0x0u << 0) /**< \brief (FX_MR) No communication */
#define   FX_MR_OPMODE_USART (0x1u << 0) /**< \brief (FX_MR) All related UART related protocols are selected (RS232, RS485, IrDA, ISO7816, LIN,)All SPI/TWI related registers are not accessible and have no impact on IOs. */
#define   FX_MR_OPMODE_SPI (0x2u << 0) /**< \brief (FX_MR) SPI operating mode is selected.All USART/TWI related registers are not accessible and have no impact on IOs. */
#define   FX_MR_OPMODE_TWI (0x3u << 0) /**< \brief (FX_MR) All related TWI protocols are selected (TWI, SMBUS). All USART/SPI related registers are not accessible and have no impact on IOs. */
/* -------- FX_RHR : (FLEXCOM Offset: 0x010) FLEXCOM Receive Holding Register -------- */
#define FX_RHR_RXDATA_Pos 0
#define FX_RHR_RXDATA_Msk (0xffffu << FX_RHR_RXDATA_Pos) /**< \brief (FX_RHR) Receive Data */
/* -------- FX_THR : (FLEXCOM Offset: 0x020) FLEXCOM Transmit Holding Register -------- */
#define FX_THR_TXDATA_Pos 0
#define FX_THR_TXDATA_Msk (0xffffu << FX_THR_TXDATA_Pos) /**< \brief (FX_THR) Transmit Data */
#define FX_THR_TXDATA(value) ((FX_THR_TXDATA_Msk & ((value) << FX_THR_TXDATA_Pos)))
/* -------- FX_VERSION : (FLEXCOM Offset: 0x0FC) FLEXCOM Version Register -------- */
#define FX_VERSION_VERSION_Pos 0
#define FX_VERSION_VERSION_Msk (0xfffu << FX_VERSION_VERSION_Pos) /**< \brief (FX_VERSION) Hardware Module Version */
#define FX_VERSION_MFN_Pos 16
#define FX_VERSION_MFN_Msk (0x7u << FX_VERSION_MFN_Pos) /**< \brief (FX_VERSION) Metal Fix Number */
/* -------- FX_US_CR : (FLEXCOM Offset: 0x200) USART Control Register -------- */
#define FX_US_CR_RSTRX (0x1u << 2) /**< \brief (FX_US_CR) Reset Receiver */
#define FX_US_CR_RSTTX (0x1u << 3) /**< \brief (FX_US_CR) Reset Transmitter */
#define FX_US_CR_RXEN (0x1u << 4) /**< \brief (FX_US_CR) Receiver Enable */
#define FX_US_CR_RXDIS (0x1u << 5) /**< \brief (FX_US_CR) Receiver Disable */
#define FX_US_CR_TXEN (0x1u << 6) /**< \brief (FX_US_CR) Transmitter Enable */
#define FX_US_CR_TXDIS (0x1u << 7) /**< \brief (FX_US_CR) Transmitter Disable */
#define FX_US_CR_RSTSTA (0x1u << 8) /**< \brief (FX_US_CR) Reset Status Bits */
#define FX_US_CR_STTBRK (0x1u << 9) /**< \brief (FX_US_CR) Start Break */
#define FX_US_CR_STPBRK (0x1u << 10) /**< \brief (FX_US_CR) Stop Break */
#define FX_US_CR_STTTO (0x1u << 11) /**< \brief (FX_US_CR) Start Timeout */
#define FX_US_CR_SENDA (0x1u << 12) /**< \brief (FX_US_CR) Send Address */
#define FX_US_CR_RSTIT (0x1u << 13) /**< \brief (FX_US_CR) Reset Iterations */
#define FX_US_CR_RSTNACK (0x1u << 14) /**< \brief (FX_US_CR) Reset Non Acknowledge */
#define FX_US_CR_RETTO (0x1u << 15) /**< \brief (FX_US_CR) Rearm Timeout */
#define FX_US_CR_RTSEN (0x1u << 18) /**< \brief (FX_US_CR) Request to Send Enable */
#define FX_US_CR_RTSDIS (0x1u << 19) /**< \brief (FX_US_CR) Request to Send Disable */
#define FX_US_CR_LINABT (0x1u << 20) /**< \brief (FX_US_CR) Abort LIN Transmission */
#define FX_US_CR_LINWKUP (0x1u << 21) /**< \brief (FX_US_CR) Send LIN Wakeup Signal */
#define FX_US_CR_REQCLR (0x1u << 28) /**< \brief (FX_US_CR) Request to Clear the Comparison Trigger */
/* -------- FX_US_MR : (FLEXCOM Offset: 0x204) USART Mode Register -------- */
#define FX_US_MR_USART_MODE_Pos 0
#define FX_US_MR_USART_MODE_Msk (0xfu << FX_US_MR_USART_MODE_Pos) /**< \brief (FX_US_MR) USART Mode of Operation */
#define   FX_US_MR_USART_MODE_NORMAL (0x0u << 0) /**< \brief (FX_US_MR) Normal mode */
#define   FX_US_MR_USART_MODE_RS485 (0x1u << 0) /**< \brief (FX_US_MR) RS485 */
#define   FX_US_MR_USART_MODE_HW_HANDSHAKING (0x2u << 0) /**< \brief (FX_US_MR) Hardware Handshaking */
#define   FX_US_MR_USART_MODE_IS07816_T_0 (0x4u << 0) /**< \brief (FX_US_MR) IS07816 Protocol: T = 0 */
#define   FX_US_MR_USART_MODE_IS07816_T_1 (0x6u << 0) /**< \brief (FX_US_MR) IS07816 Protocol: T = 1 */
#define   FX_US_MR_USART_MODE_IRDA (0x8u << 0) /**< \brief (FX_US_MR) IrDA */
#define   FX_US_MR_USART_MODE_LIN_MASTER (0xAu << 0) /**< \brief (FX_US_MR) LIN master */
#define   FX_US_MR_USART_MODE_LIN_SLAVE (0xBu << 0) /**< \brief (FX_US_MR) LIN Slave */
#define FX_US_MR_USCLKS_Pos 4
#define FX_US_MR_USCLKS_Msk (0x3u << FX_US_MR_USCLKS_Pos) /**< \brief (FX_US_MR) Clock Selection */
#define   FX_US_MR_USCLKS_MCK (0x0u << 4) /**< \brief (FX_US_MR) Peripheral clock is selected */
#define   FX_US_MR_USCLKS_DIV (0x1u << 4) /**< \brief (FX_US_MR) Peripheral clock Divided (DIV=(DIV=8)) is selected */
#define   FX_US_MR_USCLKS_PMC_PCK (0x2u << 4) /**< \brief (FX_US_MR) A PMC programmable clock is selected */
#define   FX_US_MR_USCLKS_SCK (0x3u << 4) /**< \brief (FX_US_MR) External pin SCK is selected */
#define FX_US_MR_CHRL_Pos 6
#define FX_US_MR_CHRL_Msk (0x3u << FX_US_MR_CHRL_Pos) /**< \brief (FX_US_MR) Character Length */
#define   FX_US_MR_CHRL_5_BIT (0x0u << 6) /**< \brief (FX_US_MR) Character length is 5 bits */
#define   FX_US_MR_CHRL_6_BIT (0x1u << 6) /**< \brief (FX_US_MR) Character length is 6 bits */
#define   FX_US_MR_CHRL_7_BIT (0x2u << 6) /**< \brief (FX_US_MR) Character length is 7 bits */
#define   FX_US_MR_CHRL_8_BIT (0x3u << 6) /**< \brief (FX_US_MR) Character length is 8 bits */
#define FX_US_MR_SYNC (0x1u << 8) /**< \brief (FX_US_MR) Synchronous Mode Select */
#define FX_US_MR_PAR_Pos 9
#define FX_US_MR_PAR_Msk (0x7u << FX_US_MR_PAR_Pos) /**< \brief (FX_US_MR) Parity Type */
#define   FX_US_MR_PAR_EVEN (0x0u << 9) /**< \brief (FX_US_MR) Even parity */
#define   FX_US_MR_PAR_ODD (0x1u << 9) /**< \brief (FX_US_MR) Odd parity */
#define   FX_US_MR_PAR_SPACE (0x2u << 9) /**< \brief (FX_US_MR) Parity forced to 0 (Space) */
#define   FX_US_MR_PAR_MARK (0x3u << 9) /**< \brief (FX_US_MR) Parity forced to 1 (Mark) */
#define   FX_US_MR_PAR_NO (0x4u << 9) /**< \brief (FX_US_MR) No parity */
#define   FX_US_MR_PAR_MULTIDROP (0x6u << 9) /**< \brief (FX_US_MR) Multidrop mode */
#define FX_US_MR_NBSTOP_Pos 12
#define FX_US_MR_NBSTOP_Msk (0x3u << FX_US_MR_NBSTOP_Pos) /**< \brief (FX_US_MR) Number of Stop Bits */
#define   FX_US_MR_NBSTOP_1_BIT (0x0u << 12) /**< \brief (FX_US_MR) 1 stop bit */
#define   FX_US_MR_NBSTOP_1_5_BIT (0x1u << 12) /**< \brief (FX_US_MR) 1.5 stop bit (SYNC = 0) or reserved (SYNC = 1) */
#define   FX_US_MR_NBSTOP_2_BIT (0x2u << 12) /**< \brief (FX_US_MR) 2 stop bits */
#define FX_US_MR_CHMODE_Pos 14
#define FX_US_MR_CHMODE_Msk (0x3u << FX_US_MR_CHMODE_Pos) /**< \brief (FX_US_MR) Channel Mode */
#define   FX_US_MR_CHMODE_NORMAL (0x0u << 14) /**< \brief (FX_US_MR) Normal mode */
#define   FX_US_MR_CHMODE_AUTOMATIC (0x1u << 14) /**< \brief (FX_US_MR) Automatic Echo. Receiver input is connected to the TXD pin. */
#define   FX_US_MR_CHMODE_LOCAL_LOOPBACK (0x2u << 14) /**< \brief (FX_US_MR) Local Loopback. Transmitter output is connected to the Receiver Input. */
#define   FX_US_MR_CHMODE_REMOTE_LOOPBACK (0x3u << 14) /**< \brief (FX_US_MR) Remote Loopback. RXD pin is internally connected to the TXD pin. */
#define FX_US_MR_MSBF (0x1u << 16) /**< \brief (FX_US_MR) Bit Order */
#define FX_US_MR_MODE9 (0x1u << 17) /**< \brief (FX_US_MR) 9-bit Character Length */
#define FX_US_MR_CLKO (0x1u << 18) /**< \brief (FX_US_MR) Clock Output Select */
#define FX_US_MR_OVER (0x1u << 19) /**< \brief (FX_US_MR) Oversampling Mode */
#define FX_US_MR_INACK (0x1u << 20) /**< \brief (FX_US_MR) Inhibit Non Acknowledge */
#define FX_US_MR_DSNACK (0x1u << 21) /**< \brief (FX_US_MR) Disable Successive NACK */
#define FX_US_MR_VAR_SYNC (0x1u << 22) /**< \brief (FX_US_MR) Variable Synchronization of Command/Data Sync Start Frame Delimiter */
#define FX_US_MR_INVDATA (0x1u << 23) /**< \brief (FX_US_MR) Inverted Data */
#define FX_US_MR_MAX_ITERATION_Pos 24
#define FX_US_MR_MAX_ITERATION_Msk (0x7u << FX_US_MR_MAX_ITERATION_Pos) /**< \brief (FX_US_MR) Maximum Number of Automatic Iteration */
#define FX_US_MR_MAX_ITERATION(value) ((FX_US_MR_MAX_ITERATION_Msk & ((value) << FX_US_MR_MAX_ITERATION_Pos)))
#define FX_US_MR_FILTER (0x1u << 28) /**< \brief (FX_US_MR) Receive Line Filter */
#define FX_US_MR_MAN (0x1u << 29) /**< \brief (FX_US_MR) Manchester Encoder/Decoder Enable */
#define FX_US_MR_MODSYNC (0x1u << 30) /**< \brief (FX_US_MR) Manchester Synchronization Mode */
#define FX_US_MR_ONEBIT (0x1u << 31) /**< \brief (FX_US_MR) Start Frame Delimiter Selector */
/* -------- FX_US_IER : (FLEXCOM Offset: 0x208) USART Interrupt Enable Register -------- */
#define FX_US_IER_RXRDY (0x1u << 0) /**< \brief (FX_US_IER) RXRDY Interrupt Enable */
#define FX_US_IER_TXRDY (0x1u << 1) /**< \brief (FX_US_IER) TXRDY Interrupt Enable */
#define FX_US_IER_RXBRK (0x1u << 2) /**< \brief (FX_US_IER) Receiver Break Interrupt Enable */
#define FX_US_IER_OVRE (0x1u << 5) /**< \brief (FX_US_IER) Overrun Error Interrupt Enable */
#define FX_US_IER_FRAME (0x1u << 6) /**< \brief (FX_US_IER) Framing Error Interrupt Enable */
#define FX_US_IER_PARE (0x1u << 7) /**< \brief (FX_US_IER) Parity Error Interrupt Enable */
#define FX_US_IER_TIMEOUT (0x1u << 8) /**< \brief (FX_US_IER) Timeout Interrupt Enable */
#define FX_US_IER_TXEMPTY (0x1u << 9) /**< \brief (FX_US_IER) TXEMPTY Interrupt Enable */
#define FX_US_IER_ITER (0x1u << 10) /**< \brief (FX_US_IER) Max number of Repetitions Reached Interrupt Enable */
#define FX_US_IER_NACK (0x1u << 13) /**< \brief (FX_US_IER) Non Acknowledge Interrupt Enable */
#define FX_US_IER_CTSIC (0x1u << 19) /**< \brief (FX_US_IER) Clear to Send Input Change Interrupt Enable */
#define FX_US_IER_CMP (0x1u << 22) /**< \brief (FX_US_IER) Comparison Interrupt Enable */
#define FX_US_IER_MANE (0x1u << 24) /**< \brief (FX_US_IER) Manchester Error Interrupt Enable */
#define FX_US_IER_LINBK (0x1u << 13) /**< \brief (FX_US_IER) LIN Break Sent or LIN Break Received Interrupt Enable */
#define FX_US_IER_LINID (0x1u << 14) /**< \brief (FX_US_IER) LIN Identifier Sent or LIN Identifier Received Interrupt Enable */
#define FX_US_IER_LINTC (0x1u << 15) /**< \brief (FX_US_IER) LIN Transfer Completed Interrupt Enable */
#define FX_US_IER_LINBE (0x1u << 25) /**< \brief (FX_US_IER) LIN Bus Error Interrupt Enable */
#define FX_US_IER_LINISFE (0x1u << 26) /**< \brief (FX_US_IER) LIN Inconsistent Synch Field Error Interrupt Enable */
#define FX_US_IER_LINIPE (0x1u << 27) /**< \brief (FX_US_IER) LIN Identifier Parity Interrupt Enable */
#define FX_US_IER_LINCE (0x1u << 28) /**< \brief (FX_US_IER) LIN Checksum Error Interrupt Enable */
#define FX_US_IER_LINSNRE (0x1u << 29) /**< \brief (FX_US_IER) LIN Slave Not Responding Error Interrupt Enable */
#define FX_US_IER_LINSTE (0x1u << 30) /**< \brief (FX_US_IER) LIN Synch Tolerance Error Interrupt Enable */
#define FX_US_IER_LINHTE (0x1u << 31) /**< \brief (FX_US_IER) LIN Header Timeout Error Interrupt Enable */
/* -------- FX_US_IDR : (FLEXCOM Offset: 0x20C) USART Interrupt Disable Register -------- */
#define FX_US_IDR_RXRDY (0x1u << 0) /**< \brief (FX_US_IDR) RXRDY Interrupt Disable */
#define FX_US_IDR_TXRDY (0x1u << 1) /**< \brief (FX_US_IDR) TXRDY Interrupt Disable */
#define FX_US_IDR_RXBRK (0x1u << 2) /**< \brief (FX_US_IDR) Receiver Break Interrupt Disable */
#define FX_US_IDR_OVRE (0x1u << 5) /**< \brief (FX_US_IDR) Overrun Error Interrupt Enable */
#define FX_US_IDR_FRAME (0x1u << 6) /**< \brief (FX_US_IDR) Framing Error Interrupt Disable */
#define FX_US_IDR_PARE (0x1u << 7) /**< \brief (FX_US_IDR) Parity Error Interrupt Disable */
#define FX_US_IDR_TIMEOUT (0x1u << 8) /**< \brief (FX_US_IDR) Timeout Interrupt Disable */
#define FX_US_IDR_TXEMPTY (0x1u << 9) /**< \brief (FX_US_IDR) TXEMPTY Interrupt Disable */
#define FX_US_IDR_ITER (0x1u << 10) /**< \brief (FX_US_IDR) Max Number of Repetitions Reached Interrupt Disable */
#define FX_US_IDR_NACK (0x1u << 13) /**< \brief (FX_US_IDR) Non Acknowledge Interrupt Disable */
#define FX_US_IDR_CTSIC (0x1u << 19) /**< \brief (FX_US_IDR) Clear to Send Input Change Interrupt Disable */
#define FX_US_IDR_CMP (0x1u << 22) /**< \brief (FX_US_IDR) Comparison Interrupt Disable */
#define FX_US_IDR_MANE (0x1u << 24) /**< \brief (FX_US_IDR) Manchester Error Interrupt Disable */
#define FX_US_IDR_LINBK (0x1u << 13) /**< \brief (FX_US_IDR) LIN Break Sent or LIN Break Received Interrupt Disable */
#define FX_US_IDR_LINID (0x1u << 14) /**< \brief (FX_US_IDR) LIN Identifier Sent or LIN Identifier Received Interrupt Disable */
#define FX_US_IDR_LINTC (0x1u << 15) /**< \brief (FX_US_IDR) LIN Transfer Completed Interrupt Disable */
#define FX_US_IDR_LINBE (0x1u << 25) /**< \brief (FX_US_IDR) LIN Bus Error Interrupt Disable */
#define FX_US_IDR_LINISFE (0x1u << 26) /**< \brief (FX_US_IDR) LIN Inconsistent Synch Field Error Interrupt Disable */
#define FX_US_IDR_LINIPE (0x1u << 27) /**< \brief (FX_US_IDR) LIN Identifier Parity Interrupt Disable */
#define FX_US_IDR_LINCE (0x1u << 28) /**< \brief (FX_US_IDR) LIN Checksum Error Interrupt Disable */
#define FX_US_IDR_LINSNRE (0x1u << 29) /**< \brief (FX_US_IDR) LIN Slave Not Responding Error Interrupt Disable */
#define FX_US_IDR_LINSTE (0x1u << 30) /**< \brief (FX_US_IDR) LIN Synch Tolerance Error Interrupt Disable */
#define FX_US_IDR_LINHTE (0x1u << 31) /**< \brief (FX_US_IDR) LIN Header Timeout Error Interrupt Disable */
/* -------- FX_US_IMR : (FLEXCOM Offset: 0x210) USART Interrupt Mask Register -------- */
#define FX_US_IMR_RXRDY (0x1u << 0) /**< \brief (FX_US_IMR) RXRDY Interrupt Mask */
#define FX_US_IMR_TXRDY (0x1u << 1) /**< \brief (FX_US_IMR) TXRDY Interrupt Mask */
#define FX_US_IMR_RXBRK (0x1u << 2) /**< \brief (FX_US_IMR) Receiver Break Interrupt Mask */
#define FX_US_IMR_OVRE (0x1u << 5) /**< \brief (FX_US_IMR) Overrun Error Interrupt Mask */
#define FX_US_IMR_FRAME (0x1u << 6) /**< \brief (FX_US_IMR) Framing Error Interrupt Mask */
#define FX_US_IMR_PARE (0x1u << 7) /**< \brief (FX_US_IMR) Parity Error Interrupt Mask */
#define FX_US_IMR_TIMEOUT (0x1u << 8) /**< \brief (FX_US_IMR) Timeout Interrupt Mask */
#define FX_US_IMR_TXEMPTY (0x1u << 9) /**< \brief (FX_US_IMR) TXEMPTY Interrupt Mask */
#define FX_US_IMR_ITER (0x1u << 10) /**< \brief (FX_US_IMR) Max Number of Repetitions Reached Interrupt Mask */
#define FX_US_IMR_NACK (0x1u << 13) /**< \brief (FX_US_IMR) Non Acknowledge Interrupt Mask */
#define FX_US_IMR_CTSIC (0x1u << 19) /**< \brief (FX_US_IMR) Clear to Send Input Change Interrupt Mask */
#define FX_US_IMR_CMP (0x1u << 22) /**< \brief (FX_US_IMR) Comparison Interrupt Mask */
#define FX_US_IMR_MANE (0x1u << 24) /**< \brief (FX_US_IMR) Manchester Error Interrupt Mask */
#define FX_US_IMR_LINBK (0x1u << 13) /**< \brief (FX_US_IMR) LIN Break Sent or LIN Break Received Interrupt Mask */
#define FX_US_IMR_LINID (0x1u << 14) /**< \brief (FX_US_IMR) LIN Identifier Sent or LIN Identifier Received Interrupt Mask */
#define FX_US_IMR_LINTC (0x1u << 15) /**< \brief (FX_US_IMR) LIN Transfer Completed Interrupt Mask */
#define FX_US_IMR_LINBE (0x1u << 25) /**< \brief (FX_US_IMR) LIN Bus Error Interrupt Mask */
#define FX_US_IMR_LINISFE (0x1u << 26) /**< \brief (FX_US_IMR) LIN Inconsistent Synch Field Error Interrupt Mask */
#define FX_US_IMR_LINIPE (0x1u << 27) /**< \brief (FX_US_IMR) LIN Identifier Parity Interrupt Mask */
#define FX_US_IMR_LINCE (0x1u << 28) /**< \brief (FX_US_IMR) LIN Checksum Error Interrupt Mask */
#define FX_US_IMR_LINSNRE (0x1u << 29) /**< \brief (FX_US_IMR) LIN Slave Not Responding Error Interrupt Mask */
#define FX_US_IMR_LINSTE (0x1u << 30) /**< \brief (FX_US_IMR) LIN Synch Tolerance Error Interrupt Mask */
#define FX_US_IMR_LINHTE (0x1u << 31) /**< \brief (FX_US_IMR) LIN Header Timeout Error Interrupt Mask */
/* -------- FX_US_CSR : (FLEXCOM Offset: 0x214) USART Channel Status Register -------- */
#define FX_US_CSR_RXRDY (0x1u << 0) /**< \brief (FX_US_CSR) Receiver Ready */
#define FX_US_CSR_TXRDY (0x1u << 1) /**< \brief (FX_US_CSR) Transmitter Ready */
#define FX_US_CSR_RXBRK (0x1u << 2) /**< \brief (FX_US_CSR) Break Received/End of Break */
#define FX_US_CSR_OVRE (0x1u << 5) /**< \brief (FX_US_CSR) Overrun Error */
#define FX_US_CSR_FRAME (0x1u << 6) /**< \brief (FX_US_CSR) Framing Error */
#define FX_US_CSR_PARE (0x1u << 7) /**< \brief (FX_US_CSR) Parity Error */
#define FX_US_CSR_TIMEOUT (0x1u << 8) /**< \brief (FX_US_CSR) Receiver Timeout */
#define FX_US_CSR_TXEMPTY (0x1u << 9) /**< \brief (FX_US_CSR) Transmitter Empty */
#define FX_US_CSR_ITER (0x1u << 10) /**< \brief (FX_US_CSR) Max Number of Repetitions Reached */
#define FX_US_CSR_NACK (0x1u << 13) /**< \brief (FX_US_CSR) Non Acknowledge Interrupt */
#define FX_US_CSR_CTSIC (0x1u << 19) /**< \brief (FX_US_CSR) Clear to Send Input Change Flag */
#define FX_US_CSR_CMP (0x1u << 22) /**< \brief (FX_US_CSR) Comparison Status */
#define FX_US_CSR_CTS (0x1u << 23) /**< \brief (FX_US_CSR) Image of CTS Input */
#define FX_US_CSR_MANE (0x1u << 24) /**< \brief (FX_US_CSR) Manchester Error */
#define FX_US_CSR_LINBK (0x1u << 13) /**< \brief (FX_US_CSR) LIN Break Sent or LIN Break Received */
#define FX_US_CSR_LINID (0x1u << 14) /**< \brief (FX_US_CSR) LIN Identifier Sent or LIN Identifier Received */
#define FX_US_CSR_LINTC (0x1u << 15) /**< \brief (FX_US_CSR) LIN Transfer Completed */
#define FX_US_CSR_LINBLS (0x1u << 23) /**< \brief (FX_US_CSR) LIN Bus Line Status */
#define FX_US_CSR_LINBE (0x1u << 25) /**< \brief (FX_US_CSR) LIN Bit Error */
#define FX_US_CSR_LINISFE (0x1u << 26) /**< \brief (FX_US_CSR) LIN Inconsistent Synch Field Error */
#define FX_US_CSR_LINIPE (0x1u << 27) /**< \brief (FX_US_CSR) LIN Identifier Parity Error */
#define FX_US_CSR_LINCE (0x1u << 28) /**< \brief (FX_US_CSR) LIN Checksum Error */
#define FX_US_CSR_LINSNRE (0x1u << 29) /**< \brief (FX_US_CSR) LIN Slave Not Responding Error */
#define FX_US_CSR_LINSTE (0x1u << 30) /**< \brief (FX_US_CSR) LIN Synch Tolerance Error */
#define FX_US_CSR_LINHTE (0x1u << 31) /**< \brief (FX_US_CSR) LIN Header Timeout Error */
/* -------- FX_US_RHR : (FLEXCOM Offset: 0x218) USART Receive Holding Register -------- */
#define FX_US_RHR_RXCHR_Pos 0
#define FX_US_RHR_RXCHR_Msk (0x1ffu << FX_US_RHR_RXCHR_Pos) /**< \brief (FX_US_RHR) Received Character */
#define FX_US_RHR_RXSYNH (0x1u << 15) /**< \brief (FX_US_RHR) Received Sync */
/* -------- FX_US_THR : (FLEXCOM Offset: 0x21C) USART Transmit Holding Register -------- */
#define FX_US_THR_TXCHR_Pos 0
#define FX_US_THR_TXCHR_Msk (0x1ffu << FX_US_THR_TXCHR_Pos) /**< \brief (FX_US_THR) Character to be Transmitted */
#define FX_US_THR_TXCHR(value) ((FX_US_THR_TXCHR_Msk & ((value) << FX_US_THR_TXCHR_Pos)))
#define FX_US_THR_TXSYNH (0x1u << 15) /**< \brief (FX_US_THR) Sync Field to be Transmitted */
/* -------- FX_US_BRGR : (FLEXCOM Offset: 0x220) USART Baud Rate Generator Register -------- */
#define FX_US_BRGR_CD_Pos 0
#define FX_US_BRGR_CD_Msk (0xffffu << FX_US_BRGR_CD_Pos) /**< \brief (FX_US_BRGR) Clock Divider */
#define FX_US_BRGR_CD(value) ((FX_US_BRGR_CD_Msk & ((value) << FX_US_BRGR_CD_Pos)))
#define FX_US_BRGR_FP_Pos 16
#define FX_US_BRGR_FP_Msk (0x7u << FX_US_BRGR_FP_Pos) /**< \brief (FX_US_BRGR) Fractional Part */
#define FX_US_BRGR_FP(value) ((FX_US_BRGR_FP_Msk & ((value) << FX_US_BRGR_FP_Pos)))
/* -------- FX_US_RTOR : (FLEXCOM Offset: 0x224) USART Receiver Timeout Register -------- */
#define FX_US_RTOR_TO_Pos 0
#define FX_US_RTOR_TO_Msk (0x1ffffu << FX_US_RTOR_TO_Pos) /**< \brief (FX_US_RTOR) Timeout Value */
#define FX_US_RTOR_TO(value) ((FX_US_RTOR_TO_Msk & ((value) << FX_US_RTOR_TO_Pos)))
/* -------- FX_US_TTGR : (FLEXCOM Offset: 0x228) USART Transmitter Timeguard Register -------- */
#define FX_US_TTGR_TG_Pos 0
#define FX_US_TTGR_TG_Msk (0xffu << FX_US_TTGR_TG_Pos) /**< \brief (FX_US_TTGR) Timeguard Value */
#define FX_US_TTGR_TG(value) ((FX_US_TTGR_TG_Msk & ((value) << FX_US_TTGR_TG_Pos)))
/* -------- FX_US_FIDI : (FLEXCOM Offset: 0x240) USART FI DI Ratio Register -------- */
#define FX_US_FIDI_FI_DI_RATIO_Pos 0
#define FX_US_FIDI_FI_DI_RATIO_Msk (0xffffu << FX_US_FIDI_FI_DI_RATIO_Pos) /**< \brief (FX_US_FIDI) FI Over DI Ratio Value */
#define FX_US_FIDI_FI_DI_RATIO(value) ((FX_US_FIDI_FI_DI_RATIO_Msk & ((value) << FX_US_FIDI_FI_DI_RATIO_Pos)))
/* -------- FX_US_NER : (FLEXCOM Offset: 0x244) USART Number of Errors Register -------- */
#define FX_US_NER_NB_ERRORS_Pos 0
#define FX_US_NER_NB_ERRORS_Msk (0xffu << FX_US_NER_NB_ERRORS_Pos) /**< \brief (FX_US_NER) Number of Errors */
/* -------- FX_US_IF : (FLEXCOM Offset: 0x24C) USART IrDA Filter Register -------- */
#define FX_US_IF_IRDA_FILTER_Pos 0
#define FX_US_IF_IRDA_FILTER_Msk (0xffu << FX_US_IF_IRDA_FILTER_Pos) /**< \brief (FX_US_IF) IrDA Filter */
#define FX_US_IF_IRDA_FILTER(value) ((FX_US_IF_IRDA_FILTER_Msk & ((value) << FX_US_IF_IRDA_FILTER_Pos)))
/* -------- FX_US_MAN : (FLEXCOM Offset: 0x250) USART Manchester Configuration Register -------- */
#define FX_US_MAN_TX_PL_Pos 0
#define FX_US_MAN_TX_PL_Msk (0xfu << FX_US_MAN_TX_PL_Pos) /**< \brief (FX_US_MAN) Transmitter Preamble Length */
#define FX_US_MAN_TX_PL(value) ((FX_US_MAN_TX_PL_Msk & ((value) << FX_US_MAN_TX_PL_Pos)))
#define FX_US_MAN_TX_PP_Pos 8
#define FX_US_MAN_TX_PP_Msk (0x3u << FX_US_MAN_TX_PP_Pos) /**< \brief (FX_US_MAN) Transmitter Preamble Pattern */
#define   FX_US_MAN_TX_PP_ALL_ONE (0x0u << 8) /**< \brief (FX_US_MAN) The preamble is composed of '1's */
#define   FX_US_MAN_TX_PP_ALL_ZERO (0x1u << 8) /**< \brief (FX_US_MAN) The preamble is composed of '0's */
#define   FX_US_MAN_TX_PP_ZERO_ONE (0x2u << 8) /**< \brief (FX_US_MAN) The preamble is composed of '01's */
#define   FX_US_MAN_TX_PP_ONE_ZERO (0x3u << 8) /**< \brief (FX_US_MAN) The preamble is composed of '10's */
#define FX_US_MAN_TX_MPOL (0x1u << 12) /**< \brief (FX_US_MAN) Transmitter Manchester Polarity */
#define FX_US_MAN_RX_PL_Pos 16
#define FX_US_MAN_RX_PL_Msk (0xfu << FX_US_MAN_RX_PL_Pos) /**< \brief (FX_US_MAN) Receiver Preamble Length */
#define FX_US_MAN_RX_PL(value) ((FX_US_MAN_RX_PL_Msk & ((value) << FX_US_MAN_RX_PL_Pos)))
#define FX_US_MAN_RX_PP_Pos 24
#define FX_US_MAN_RX_PP_Msk (0x3u << FX_US_MAN_RX_PP_Pos) /**< \brief (FX_US_MAN) Receiver Preamble Pattern detected */
#define   FX_US_MAN_RX_PP_ALL_ONE (0x0u << 24) /**< \brief (FX_US_MAN) The preamble is composed of '1's */
#define   FX_US_MAN_RX_PP_ALL_ZERO (0x1u << 24) /**< \brief (FX_US_MAN) The preamble is composed of '0's */
#define   FX_US_MAN_RX_PP_ZERO_ONE (0x2u << 24) /**< \brief (FX_US_MAN) The preamble is composed of '01's */
#define   FX_US_MAN_RX_PP_ONE_ZERO (0x3u << 24) /**< \brief (FX_US_MAN) The preamble is composed of '10's */
#define FX_US_MAN_RX_MPOL (0x1u << 28) /**< \brief (FX_US_MAN) Receiver Manchester Polarity */
#define FX_US_MAN_ONE (0x1u << 29) /**< \brief (FX_US_MAN) Must Be Set to 1 */
#define FX_US_MAN_DRIFT (0x1u << 30) /**< \brief (FX_US_MAN) Drift Compensation */
#define FX_US_MAN_RXIDLEV (0x1u << 31) /**< \brief (FX_US_MAN) Receiver Idle Value */
/* -------- FX_US_LINMR : (FLEXCOM Offset: 0x254) USART LIN Mode Register -------- */
#define FX_US_LINMR_NACT_Pos 0
#define FX_US_LINMR_NACT_Msk (0x3u << FX_US_LINMR_NACT_Pos) /**< \brief (FX_US_LINMR) LIN Node Action */
#define   FX_US_LINMR_NACT_PUBLISH (0x0u << 0) /**< \brief (FX_US_LINMR) The USART transmits the response. */
#define   FX_US_LINMR_NACT_SUBSCRIBE (0x1u << 0) /**< \brief (FX_US_LINMR) The USART receives the response. */
#define   FX_US_LINMR_NACT_IGNORE (0x2u << 0) /**< \brief (FX_US_LINMR) The USART does not transmit and does not receive the response. */
#define FX_US_LINMR_PARDIS (0x1u << 2) /**< \brief (FX_US_LINMR) Parity Disable */
#define FX_US_LINMR_CHKDIS (0x1u << 3) /**< \brief (FX_US_LINMR) Checksum Disable */
#define FX_US_LINMR_CHKTYP (0x1u << 4) /**< \brief (FX_US_LINMR) Checksum Type */
#define FX_US_LINMR_DLM (0x1u << 5) /**< \brief (FX_US_LINMR) Data Length Mode */
#define FX_US_LINMR_FSDIS (0x1u << 6) /**< \brief (FX_US_LINMR) Frame Slot Mode Disable */
#define FX_US_LINMR_WKUPTYP (0x1u << 7) /**< \brief (FX_US_LINMR) Wakeup Signal Type */
#define FX_US_LINMR_DLC_Pos 8
#define FX_US_LINMR_DLC_Msk (0xffu << FX_US_LINMR_DLC_Pos) /**< \brief (FX_US_LINMR) Data Length Control */
#define FX_US_LINMR_DLC(value) ((FX_US_LINMR_DLC_Msk & ((value) << FX_US_LINMR_DLC_Pos)))
#define FX_US_LINMR_PDCM (0x1u << 16) /**< \brief (FX_US_LINMR) DMAC Mode */
#define FX_US_LINMR_SYNCDIS (0x1u << 17) /**< \brief (FX_US_LINMR) Synchronization Disable */
/* -------- FX_US_LINIR : (FLEXCOM Offset: 0x258) USART LIN Identifier Register -------- */
#define FX_US_LINIR_IDCHR_Pos 0
#define FX_US_LINIR_IDCHR_Msk (0xffu << FX_US_LINIR_IDCHR_Pos) /**< \brief (FX_US_LINIR) Identifier Character */
#define FX_US_LINIR_IDCHR(value) ((FX_US_LINIR_IDCHR_Msk & ((value) << FX_US_LINIR_IDCHR_Pos)))
/* -------- FX_US_LINBRR : (FLEXCOM Offset: 0x25C) USART LIN Baud Rate Register -------- */
#define FX_US_LINBRR_LINCD_Pos 0
#define FX_US_LINBRR_LINCD_Msk (0xffffu << FX_US_LINBRR_LINCD_Pos) /**< \brief (FX_US_LINBRR) Clock Divider after Synchronization */
#define FX_US_LINBRR_LINFP_Pos 16
#define FX_US_LINBRR_LINFP_Msk (0x7u << FX_US_LINBRR_LINFP_Pos) /**< \brief (FX_US_LINBRR) Fractional Part after Synchronization */
/* -------- FX_US_CMPR : (FLEXCOM Offset: 0x290) USART Comparison Register -------- */
#define FX_US_CMPR_VAL1_Pos 0
#define FX_US_CMPR_VAL1_Msk (0x1ffu << FX_US_CMPR_VAL1_Pos) /**< \brief (FX_US_CMPR) First Comparison Value for Received Character */
#define FX_US_CMPR_VAL1(value) ((FX_US_CMPR_VAL1_Msk & ((value) << FX_US_CMPR_VAL1_Pos)))
#define FX_US_CMPR_CMPMODE (0x1u << 12) /**< \brief (FX_US_CMPR) Comparison Mode */
#define   FX_US_CMPR_CMPMODE_FLAG_ONLY (0x0u << 12) /**< \brief (FX_US_CMPR) Any character is received and comparison function drives CMP flag. */
#define   FX_US_CMPR_CMPMODE_START_CONDITION (0x1u << 12) /**< \brief (FX_US_CMPR) Comparison condition must be met to start reception. */
#define FX_US_CMPR_CMPPAR (0x1u << 14) /**< \brief (FX_US_CMPR) Compare Parity */
#define FX_US_CMPR_VAL2_Pos 16
#define FX_US_CMPR_VAL2_Msk (0x1ffu << FX_US_CMPR_VAL2_Pos) /**< \brief (FX_US_CMPR) Second Comparison Value for Received Character */
#define FX_US_CMPR_VAL2(value) ((FX_US_CMPR_VAL2_Msk & ((value) << FX_US_CMPR_VAL2_Pos)))
/* -------- FX_US_WPMR : (FLEXCOM Offset: 0x2E4) USART Write Protection Mode Register -------- */
#define FX_US_WPMR_WPEN (0x1u << 0) /**< \brief (FX_US_WPMR) Write Protection Enable */
#define FX_US_WPMR_WPKEY_Pos 8
#define FX_US_WPMR_WPKEY_Msk (0xffffffu << FX_US_WPMR_WPKEY_Pos) /**< \brief (FX_US_WPMR) Write Protection Key */
#define   FX_US_WPMR_WPKEY_PASSWD (0x555341u << 8) /**< \brief (FX_US_WPMR) Writing any other value in this field aborts the write operation of the WPEN bit. Always reads as 0. */
/* -------- FX_US_WPSR : (FLEXCOM Offset: 0x2E8) USART Write Protection Status Register -------- */
#define FX_US_WPSR_WPVS (0x1u << 0) /**< \brief (FX_US_WPSR) Write Protection Violation Status */
#define FX_US_WPSR_WPVSRC_Pos 8
#define FX_US_WPSR_WPVSRC_Msk (0xffffu << FX_US_WPSR_WPVSRC_Pos) /**< \brief (FX_US_WPSR) Write Protection Violation Source */
/* -------- FX_US_VERSION : (FLEXCOM Offset: 0x2FC) USART Version Register -------- */
#define FX_US_VERSION_VERSION_Pos 0
#define FX_US_VERSION_VERSION_Msk (0xfffu << FX_US_VERSION_VERSION_Pos) /**< \brief (FX_US_VERSION) Hardware Module Version */
#define FX_US_VERSION_MFN_Pos 16
#define FX_US_VERSION_MFN_Msk (0x7u << FX_US_VERSION_MFN_Pos) /**< \brief (FX_US_VERSION) Metal Fix Number */
/* -------- FX_SPI_CR : (FLEXCOM Offset: 0x400) SPI Control Register -------- */
#define FX_SPI_CR_SPIEN (0x1u << 0) /**< \brief (FX_SPI_CR) SPI Enable */
#define FX_SPI_CR_SPIDIS (0x1u << 1) /**< \brief (FX_SPI_CR) SPI Disable */
#define FX_SPI_CR_SWRST (0x1u << 7) /**< \brief (FX_SPI_CR) SPI Software Reset */
#define FX_SPI_CR_REQCLR (0x1u << 12) /**< \brief (FX_SPI_CR) Request to Clear the Comparison Trigger */
#define FX_SPI_CR_LASTXFER (0x1u << 24) /**< \brief (FX_SPI_CR) Last Transfer */
/* -------- FX_SPI_MR : (FLEXCOM Offset: 0x404) SPI Mode Register -------- */
#define FX_SPI_MR_MSTR (0x1u << 0) /**< \brief (FX_SPI_MR) Master/Slave Mode */
#define FX_SPI_MR_PS (0x1u << 1) /**< \brief (FX_SPI_MR) Peripheral Select */
#define FX_SPI_MR_PCSDEC (0x1u << 2) /**< \brief (FX_SPI_MR) Chip Select Decode */
#define FX_SPI_MR_BRSRCCLK (0x1u << 3) /**< \brief (FX_SPI_MR) Bit Rate Source Clock */
#define   FX_SPI_MR_BRSRCCLK_PERIPH_CLK (0x0u << 3) /**< \brief (FX_SPI_MR) The peripheral clock is the source clock for the bit rate generation. */
#define   FX_SPI_MR_BRSRCCLK_PMC_PCK (0x1u << 3) /**< \brief (FX_SPI_MR) PMC PCKx is the source clock for the bit rate generation, thus the bit rate can be independent of the core/peripheral clock. */
#define FX_SPI_MR_MODFDIS (0x1u << 4) /**< \brief (FX_SPI_MR) Mode Fault Detection */
#define FX_SPI_MR_WDRBT (0x1u << 5) /**< \brief (FX_SPI_MR) Wait Data Read Before Transfer */
#define FX_SPI_MR_LLB (0x1u << 7) /**< \brief (FX_SPI_MR) Local Loopback Enable */
#define FX_SPI_MR_CMPMODE (0x1u << 12) /**< \brief (FX_SPI_MR) Comparison Mode */
#define   FX_SPI_MR_CMPMODE_FLAG_ONLY (0x0u << 12) /**< \brief (FX_SPI_MR) Any character is received and comparison function drives CMP flag. */
#define   FX_SPI_MR_CMPMODE_START_CONDITION (0x1u << 12) /**< \brief (FX_SPI_MR) Comparison condition must be met to start reception of all incoming characters until REQCLR is set. */
#define FX_SPI_MR_PCS_Pos 16
#define FX_SPI_MR_PCS_Msk (0x3u << FX_SPI_MR_PCS_Pos) /**< \brief (FX_SPI_MR) Peripheral Chip Select */
#define FX_SPI_MR_PCS(value) ((FX_SPI_MR_PCS_Msk & ((value) << FX_SPI_MR_PCS_Pos)))
#define FX_SPI_MR_DLYBCS_Pos 24
#define FX_SPI_MR_DLYBCS_Msk (0xffu << FX_SPI_MR_DLYBCS_Pos) /**< \brief (FX_SPI_MR) Delay Between Chip Selects */
#define FX_SPI_MR_DLYBCS(value) ((FX_SPI_MR_DLYBCS_Msk & ((value) << FX_SPI_MR_DLYBCS_Pos)))
/* -------- FX_SPI_RDR : (FLEXCOM Offset: 0x408) SPI Receive Data Register -------- */
#define FX_SPI_RDR_RD_Pos 0
#define FX_SPI_RDR_RD_Msk (0xffffu << FX_SPI_RDR_RD_Pos) /**< \brief (FX_SPI_RDR) Receive Data */
#define FX_SPI_RDR_PCS_Pos 16
#define FX_SPI_RDR_PCS_Msk (0xfu << FX_SPI_RDR_PCS_Pos) /**< \brief (FX_SPI_RDR) Peripheral Chip Select */
/* -------- FX_SPI_TDR : (FLEXCOM Offset: 0x40C) SPI Transmit Data Register -------- */
#define FX_SPI_TDR_TD_Pos 0
#define FX_SPI_TDR_TD_Msk (0xffffu << FX_SPI_TDR_TD_Pos) /**< \brief (FX_SPI_TDR) Transmit Data */
#define FX_SPI_TDR_TD(value) ((FX_SPI_TDR_TD_Msk & ((value) << FX_SPI_TDR_TD_Pos)))
#define FX_SPI_TDR_PCS_Pos 16
#define FX_SPI_TDR_PCS_Msk (0xfu << FX_SPI_TDR_PCS_Pos) /**< \brief (FX_SPI_TDR) Peripheral Chip Select */
#define FX_SPI_TDR_PCS(value) ((FX_SPI_TDR_PCS_Msk & ((value) << FX_SPI_TDR_PCS_Pos)))
#define FX_SPI_TDR_LASTXFER (0x1u << 24) /**< \brief (FX_SPI_TDR) Last Transfer */
/* -------- FX_SPI_SR : (FLEXCOM Offset: 0x410) SPI Status Register -------- */
#define FX_SPI_SR_RDRF (0x1u << 0) /**< \brief (FX_SPI_SR) Receive Data Register Full */
#define FX_SPI_SR_TDRE (0x1u << 1) /**< \brief (FX_SPI_SR) Transmit Data Register Empty */
#define FX_SPI_SR_MODF (0x1u << 2) /**< \brief (FX_SPI_SR) Mode Fault Error */
#define FX_SPI_SR_OVRES (0x1u << 3) /**< \brief (FX_SPI_SR) Overrun Error Status */
#define FX_SPI_SR_NSSR (0x1u << 8) /**< \brief (FX_SPI_SR) NSS Rising */
#define FX_SPI_SR_TXEMPTY (0x1u << 9) /**< \brief (FX_SPI_SR) Transmission Registers Empty */
#define FX_SPI_SR_UNDES (0x1u << 10) /**< \brief (FX_SPI_SR) Underrun Error Status (Slave mode Only) */
#define FX_SPI_SR_CMP (0x1u << 11) /**< \brief (FX_SPI_SR) Comparison Status */
#define FX_SPI_SR_SPIENS (0x1u << 16) /**< \brief (FX_SPI_SR) SPI Enable Status */
/* -------- FX_SPI_IER : (FLEXCOM Offset: 0x414) SPI Interrupt Enable Register -------- */
#define FX_SPI_IER_RDRF (0x1u << 0) /**< \brief (FX_SPI_IER) Receive Data Register Full Interrupt Enable */
#define FX_SPI_IER_TDRE (0x1u << 1) /**< \brief (FX_SPI_IER) SPI Transmit Data Register Empty Interrupt Enable */
#define FX_SPI_IER_MODF (0x1u << 2) /**< \brief (FX_SPI_IER) Mode Fault Error Interrupt Enable */
#define FX_SPI_IER_OVRES (0x1u << 3) /**< \brief (FX_SPI_IER) Overrun Error Interrupt Enable */
#define FX_SPI_IER_NSSR (0x1u << 8) /**< \brief (FX_SPI_IER) NSS Rising Interrupt Enable */
#define FX_SPI_IER_TXEMPTY (0x1u << 9) /**< \brief (FX_SPI_IER) Transmission Registers Empty Enable */
#define FX_SPI_IER_UNDES (0x1u << 10) /**< \brief (FX_SPI_IER) Underrun Error Interrupt Enable */
#define FX_SPI_IER_CMP (0x1u << 11) /**< \brief (FX_SPI_IER) Comparison Interrupt Enable */
/* -------- FX_SPI_IDR : (FLEXCOM Offset: 0x418) SPI Interrupt Disable Register -------- */
#define FX_SPI_IDR_RDRF (0x1u << 0) /**< \brief (FX_SPI_IDR) Receive Data Register Full Interrupt Disable */
#define FX_SPI_IDR_TDRE (0x1u << 1) /**< \brief (FX_SPI_IDR) SPI Transmit Data Register Empty Interrupt Disable */
#define FX_SPI_IDR_MODF (0x1u << 2) /**< \brief (FX_SPI_IDR) Mode Fault Error Interrupt Disable */
#define FX_SPI_IDR_OVRES (0x1u << 3) /**< \brief (FX_SPI_IDR) Overrun Error Interrupt Disable */
#define FX_SPI_IDR_NSSR (0x1u << 8) /**< \brief (FX_SPI_IDR) NSS Rising Interrupt Disable */
#define FX_SPI_IDR_TXEMPTY (0x1u << 9) /**< \brief (FX_SPI_IDR) Transmission Registers Empty Disable */
#define FX_SPI_IDR_UNDES (0x1u << 10) /**< \brief (FX_SPI_IDR) Underrun Error Interrupt Disable */
#define FX_SPI_IDR_CMP (0x1u << 11) /**< \brief (FX_SPI_IDR) Comparison Interrupt Disable */
/* -------- FX_SPI_IMR : (FLEXCOM Offset: 0x41C) SPI Interrupt Mask Register -------- */
#define FX_SPI_IMR_RDRF (0x1u << 0) /**< \brief (FX_SPI_IMR) Receive Data Register Full Interrupt Mask */
#define FX_SPI_IMR_TDRE (0x1u << 1) /**< \brief (FX_SPI_IMR) SPI Transmit Data Register Empty Interrupt Mask */
#define FX_SPI_IMR_MODF (0x1u << 2) /**< \brief (FX_SPI_IMR) Mode Fault Error Interrupt Mask */
#define FX_SPI_IMR_OVRES (0x1u << 3) /**< \brief (FX_SPI_IMR) Overrun Error Interrupt Mask */
#define FX_SPI_IMR_NSSR (0x1u << 8) /**< \brief (FX_SPI_IMR) NSS Rising Interrupt Mask */
#define FX_SPI_IMR_TXEMPTY (0x1u << 9) /**< \brief (FX_SPI_IMR) Transmission Registers Empty Mask */
#define FX_SPI_IMR_UNDES (0x1u << 10) /**< \brief (FX_SPI_IMR) Underrun Error Interrupt Mask */
#define FX_SPI_IMR_CMP (0x1u << 11) /**< \brief (FX_SPI_IMR) Comparison Interrupt Mask */
/* -------- FX_SPI_CSR[2] : (FLEXCOM Offset: 0x430) SPI Chip Select Register -------- */
#define FX_SPI_CSR_CPOL (0x1u << 0) /**< \brief (FX_SPI_CSR[2]) Clock Polarity */
#define FX_SPI_CSR_NCPHA (0x1u << 1) /**< \brief (FX_SPI_CSR[2]) Clock Phase */
#define FX_SPI_CSR_CSNAAT (0x1u << 2) /**< \brief (FX_SPI_CSR[2]) Chip Select Not Active After Transfer (Ignored if CSAAT = 1) */
#define FX_SPI_CSR_CSAAT (0x1u << 3) /**< \brief (FX_SPI_CSR[2]) Chip Select Active After Transfer */
#define FX_SPI_CSR_BITS_Pos 4
#define FX_SPI_CSR_BITS_Msk (0xfu << FX_SPI_CSR_BITS_Pos) /**< \brief (FX_SPI_CSR[2]) Bits Per Transfer */
#define   FX_SPI_CSR_BITS_8_BIT (0x0u << 4) /**< \brief (FX_SPI_CSR[2]) 8 bits for transfer */
#define   FX_SPI_CSR_BITS_9_BIT (0x1u << 4) /**< \brief (FX_SPI_CSR[2]) 9 bits for transfer */
#define   FX_SPI_CSR_BITS_10_BIT (0x2u << 4) /**< \brief (FX_SPI_CSR[2]) 10 bits for transfer */
#define   FX_SPI_CSR_BITS_11_BIT (0x3u << 4) /**< \brief (FX_SPI_CSR[2]) 11 bits for transfer */
#define   FX_SPI_CSR_BITS_12_BIT (0x4u << 4) /**< \brief (FX_SPI_CSR[2]) 12 bits for transfer */
#define   FX_SPI_CSR_BITS_13_BIT (0x5u << 4) /**< \brief (FX_SPI_CSR[2]) 13 bits for transfer */
#define   FX_SPI_CSR_BITS_14_BIT (0x6u << 4) /**< \brief (FX_SPI_CSR[2]) 14 bits for transfer */
#define   FX_SPI_CSR_BITS_15_BIT (0x7u << 4) /**< \brief (FX_SPI_CSR[2]) 15 bits for transfer */
#define   FX_SPI_CSR_BITS_16_BIT (0x8u << 4) /**< \brief (FX_SPI_CSR[2]) 16 bits for transfer */
#define FX_SPI_CSR_SCBR_Pos 8
#define FX_SPI_CSR_SCBR_Msk (0xffu << FX_SPI_CSR_SCBR_Pos) /**< \brief (FX_SPI_CSR[2]) Serial Clock Bit Rate */
#define FX_SPI_CSR_SCBR(value) ((FX_SPI_CSR_SCBR_Msk & ((value) << FX_SPI_CSR_SCBR_Pos)))
#define FX_SPI_CSR_DLYBS_Pos 16
#define FX_SPI_CSR_DLYBS_Msk (0xffu << FX_SPI_CSR_DLYBS_Pos) /**< \brief (FX_SPI_CSR[2]) Delay Before SPCK */
#define FX_SPI_CSR_DLYBS(value) ((FX_SPI_CSR_DLYBS_Msk & ((value) << FX_SPI_CSR_DLYBS_Pos)))
#define FX_SPI_CSR_DLYBCT_Pos 24
#define FX_SPI_CSR_DLYBCT_Msk (0xffu << FX_SPI_CSR_DLYBCT_Pos) /**< \brief (FX_SPI_CSR[2]) Delay Between Consecutive Transfers */
#define FX_SPI_CSR_DLYBCT(value) ((FX_SPI_CSR_DLYBCT_Msk & ((value) << FX_SPI_CSR_DLYBCT_Pos)))
/* -------- FX_SPI_CMPR : (FLEXCOM Offset: 0x448) SPI Comparison Register -------- */
#define FX_SPI_CMPR_VAL1_Pos 0
#define FX_SPI_CMPR_VAL1_Msk (0xffffu << FX_SPI_CMPR_VAL1_Pos) /**< \brief (FX_SPI_CMPR) First Comparison Value for Received Character */
#define FX_SPI_CMPR_VAL1(value) ((FX_SPI_CMPR_VAL1_Msk & ((value) << FX_SPI_CMPR_VAL1_Pos)))
#define FX_SPI_CMPR_VAL2_Pos 16
#define FX_SPI_CMPR_VAL2_Msk (0xffffu << FX_SPI_CMPR_VAL2_Pos) /**< \brief (FX_SPI_CMPR) Second Comparison Value for Received Character */
#define FX_SPI_CMPR_VAL2(value) ((FX_SPI_CMPR_VAL2_Msk & ((value) << FX_SPI_CMPR_VAL2_Pos)))
/* -------- FX_SPI_WPMR : (FLEXCOM Offset: 0x4E4) SPI Write Protection Mode Register -------- */
#define FX_SPI_WPMR_WPEN (0x1u << 0) /**< \brief (FX_SPI_WPMR) Write Protection Enable */
#define FX_SPI_WPMR_WPKEY_Pos 8
#define FX_SPI_WPMR_WPKEY_Msk (0xffffffu << FX_SPI_WPMR_WPKEY_Pos) /**< \brief (FX_SPI_WPMR) Write Protection Key */
#define   FX_SPI_WPMR_WPKEY_PASSWD (0x535049u << 8) /**< \brief (FX_SPI_WPMR) Writing any other value in this field aborts the write operation of the WPEN bit.Always reads as 0 */
/* -------- FX_SPI_WPSR : (FLEXCOM Offset: 0x4E8) SPI Write Protection Status Register -------- */
#define FX_SPI_WPSR_WPVS (0x1u << 0) /**< \brief (FX_SPI_WPSR) Write Protection Violation Status */
#define FX_SPI_WPSR_WPVSRC_Pos 8
#define FX_SPI_WPSR_WPVSRC_Msk (0xffu << FX_SPI_WPSR_WPVSRC_Pos) /**< \brief (FX_SPI_WPSR) Write Protection Violation Source */
/* -------- FX_SPI_VERSION : (FLEXCOM Offset: 0x4FC) SPI Version Register -------- */
#define FX_SPI_VERSION_VERSION_Pos 0
#define FX_SPI_VERSION_VERSION_Msk (0xfffu << FX_SPI_VERSION_VERSION_Pos) /**< \brief (FX_SPI_VERSION) Version of the Hardware Module */
#define FX_SPI_VERSION_MFN_Pos 16
#define FX_SPI_VERSION_MFN_Msk (0x7u << FX_SPI_VERSION_MFN_Pos) /**< \brief (FX_SPI_VERSION) Metal Fix Number */
/* -------- FX_TWI_CR : (FLEXCOM Offset: 0x600) TWI Control Register -------- */
#define FX_TWI_CR_START (0x1u << 0) /**< \brief (FX_TWI_CR) Send a START Condition */
#define FX_TWI_CR_STOP (0x1u << 1) /**< \brief (FX_TWI_CR) Send a STOP Condition */
#define FX_TWI_CR_MSEN (0x1u << 2) /**< \brief (FX_TWI_CR) TWI Master Mode Enabled */
#define FX_TWI_CR_MSDIS (0x1u << 3) /**< \brief (FX_TWI_CR) TWI Master Mode Disabled */
#define FX_TWI_CR_SVEN (0x1u << 4) /**< \brief (FX_TWI_CR) TWI Slave Mode Enabled */
#define FX_TWI_CR_SVDIS (0x1u << 5) /**< \brief (FX_TWI_CR) TWI Slave Mode Disabled */
#define FX_TWI_CR_QUICK (0x1u << 6) /**< \brief (FX_TWI_CR) SMBUS Quick Command */
#define FX_TWI_CR_SWRST (0x1u << 7) /**< \brief (FX_TWI_CR) Software Reset */
#define FX_TWI_CR_HSEN (0x1u << 8) /**< \brief (FX_TWI_CR) TWI High-Speed Mode Enabled */
#define FX_TWI_CR_HSDIS (0x1u << 9) /**< \brief (FX_TWI_CR) TWI High-Speed Mode Disabled */
#define FX_TWI_CR_SMBEN (0x1u << 10) /**< \brief (FX_TWI_CR) SMBus Mode Enabled */
#define FX_TWI_CR_SMBDIS (0x1u << 11) /**< \brief (FX_TWI_CR) SMBus Mode Disabled */
#define FX_TWI_CR_PECEN (0x1u << 12) /**< \brief (FX_TWI_CR) Packet Error Checking Enable */
#define FX_TWI_CR_PECDIS (0x1u << 13) /**< \brief (FX_TWI_CR) Packet Error Checking Disable */
#define FX_TWI_CR_PECRQ (0x1u << 14) /**< \brief (FX_TWI_CR) PEC Request */
#define FX_TWI_CR_CLEAR (0x1u << 15) /**< \brief (FX_TWI_CR) Bus CLEAR Command */
#define FX_TWI_CR_ACMEN (0x1u << 16) /**< \brief (FX_TWI_CR) Alternative Command Mode Enable */
#define FX_TWI_CR_ACMDIS (0x1u << 17) /**< \brief (FX_TWI_CR) Alternative Command Mode Disable */
#define FX_TWI_CR_THRCLR (0x1u << 24) /**< \brief (FX_TWI_CR) Transmit Holding Register Clear */
#define FX_TWI_CR_LOCKCLR (0x1u << 26) /**< \brief (FX_TWI_CR) Lock Clear */
/* -------- FX_TWI_MMR : (FLEXCOM Offset: 0x604) TWI Master Mode Register -------- */
#define FX_TWI_MMR_IADRSZ_Pos 8
#define FX_TWI_MMR_IADRSZ_Msk (0x3u << FX_TWI_MMR_IADRSZ_Pos) /**< \brief (FX_TWI_MMR) Internal Device Address Size */
#define   FX_TWI_MMR_IADRSZ_NONE (0x0u << 8) /**< \brief (FX_TWI_MMR) No internal device address */
#define   FX_TWI_MMR_IADRSZ_1_BYTE (0x1u << 8) /**< \brief (FX_TWI_MMR) One-byte internal device address */
#define   FX_TWI_MMR_IADRSZ_2_BYTE (0x2u << 8) /**< \brief (FX_TWI_MMR) Two-byte internal device address */
#define   FX_TWI_MMR_IADRSZ_3_BYTE (0x3u << 8) /**< \brief (FX_TWI_MMR) Three-byte internal device address */
#define FX_TWI_MMR_MREAD (0x1u << 12) /**< \brief (FX_TWI_MMR) Master Read Direction */
#define FX_TWI_MMR_DADR_Pos 16
#define FX_TWI_MMR_DADR_Msk (0x7fu << FX_TWI_MMR_DADR_Pos) /**< \brief (FX_TWI_MMR) Device Address */
#define FX_TWI_MMR_DADR(value) ((FX_TWI_MMR_DADR_Msk & ((value) << FX_TWI_MMR_DADR_Pos)))
/* -------- FX_TWI_SMR : (FLEXCOM Offset: 0x608) TWI Slave Mode Register -------- */
#define FX_TWI_SMR_NACKEN (0x1u << 0) /**< \brief (FX_TWI_SMR) Slave Receiver Data Phase NACK Enable */
#define FX_TWI_SMR_SMDA (0x1u << 2) /**< \brief (FX_TWI_SMR) SMBus Default Address */
#define FX_TWI_SMR_SMHH (0x1u << 3) /**< \brief (FX_TWI_SMR) SMBus Host Header */
#define FX_TWI_SMR_SCLWSDIS (0x1u << 6) /**< \brief (FX_TWI_SMR) Clock Wait State Disable */
#define FX_TWI_SMR_MASK_Pos 8
#define FX_TWI_SMR_MASK_Msk (0x7fu << FX_TWI_SMR_MASK_Pos) /**< \brief (FX_TWI_SMR) Slave Address Mask */
#define FX_TWI_SMR_MASK(value) ((FX_TWI_SMR_MASK_Msk & ((value) << FX_TWI_SMR_MASK_Pos)))
#define FX_TWI_SMR_SADR_Pos 16
#define FX_TWI_SMR_SADR_Msk (0x7fu << FX_TWI_SMR_SADR_Pos) /**< \brief (FX_TWI_SMR) Slave Address */
#define FX_TWI_SMR_SADR(value) ((FX_TWI_SMR_SADR_Msk & ((value) << FX_TWI_SMR_SADR_Pos)))
#define FX_TWI_SMR_SADR1EN (0x1u << 28) /**< \brief (FX_TWI_SMR) Slave Address 1 Enable */
#define FX_TWI_SMR_SADR2EN (0x1u << 29) /**< \brief (FX_TWI_SMR) Slave Address 2 Enable */
#define FX_TWI_SMR_SADR3EN (0x1u << 30) /**< \brief (FX_TWI_SMR) Slave Address 3 Enable */
#define FX_TWI_SMR_DATAMEN (0x1u << 31) /**< \brief (FX_TWI_SMR) Data Matching Enable */
/* -------- FX_TWI_IADR : (FLEXCOM Offset: 0x60C) TWI Internal Address Register -------- */
#define FX_TWI_IADR_IADR_Pos 0
#define FX_TWI_IADR_IADR_Msk (0xffffffu << FX_TWI_IADR_IADR_Pos) /**< \brief (FX_TWI_IADR) Internal Address */
#define FX_TWI_IADR_IADR(value) ((FX_TWI_IADR_IADR_Msk & ((value) << FX_TWI_IADR_IADR_Pos)))
/* -------- FX_TWI_CWGR : (FLEXCOM Offset: 0x610) TWI Clock Waveform Generator Register -------- */
#define FX_TWI_CWGR_CLDIV_Pos 0
#define FX_TWI_CWGR_CLDIV_Msk (0xffu << FX_TWI_CWGR_CLDIV_Pos) /**< \brief (FX_TWI_CWGR) Clock Low Divider */
#define FX_TWI_CWGR_CLDIV(value) ((FX_TWI_CWGR_CLDIV_Msk & ((value) << FX_TWI_CWGR_CLDIV_Pos)))
#define FX_TWI_CWGR_CHDIV_Pos 8
#define FX_TWI_CWGR_CHDIV_Msk (0xffu << FX_TWI_CWGR_CHDIV_Pos) /**< \brief (FX_TWI_CWGR) Clock High Divider */
#define FX_TWI_CWGR_CHDIV(value) ((FX_TWI_CWGR_CHDIV_Msk & ((value) << FX_TWI_CWGR_CHDIV_Pos)))
#define FX_TWI_CWGR_CKDIV_Pos 16
#define FX_TWI_CWGR_CKDIV_Msk (0x7u << FX_TWI_CWGR_CKDIV_Pos) /**< \brief (FX_TWI_CWGR) Clock Divider */
#define FX_TWI_CWGR_CKDIV(value) ((FX_TWI_CWGR_CKDIV_Msk & ((value) << FX_TWI_CWGR_CKDIV_Pos)))
#define FX_TWI_CWGR_BRSRCCLK (0x1u << 20) /**< \brief (FX_TWI_CWGR) Bit Rate Source Clock */
#define   FX_TWI_CWGR_BRSRCCLK_PERIPH_CLK (0x0u << 20) /**< \brief (FX_TWI_CWGR) The peripheral clock is the source clock for the bit rate generation. */
#define   FX_TWI_CWGR_BRSRCCLK_PMC_PCK (0x1u << 20) /**< \brief (FX_TWI_CWGR) PMC PCKx is the source clock for the bit rate generation, thus the bit rate can be independent of the core/peripheral clock. */
#define FX_TWI_CWGR_HOLD_Pos 24
#define FX_TWI_CWGR_HOLD_Msk (0x1fu << FX_TWI_CWGR_HOLD_Pos) /**< \brief (FX_TWI_CWGR) TWD Hold Time Versus TWCK Falling */
#define FX_TWI_CWGR_HOLD(value) ((FX_TWI_CWGR_HOLD_Msk & ((value) << FX_TWI_CWGR_HOLD_Pos)))
/* -------- FX_TWI_SR : (FLEXCOM Offset: 0x620) TWI Status Register -------- */
#define FX_TWI_SR_TXCOMP (0x1u << 0) /**< \brief (FX_TWI_SR) Transmission Completed (automatically set / reset) */
#define FX_TWI_SR_RXRDY (0x1u << 1) /**< \brief (FX_TWI_SR) Receive Holding Register Ready (automatically set / reset) */
#define FX_TWI_SR_TXRDY (0x1u << 2) /**< \brief (FX_TWI_SR) Transmit Holding Register Ready (automatically set / reset) */
#define FX_TWI_SR_SVREAD (0x1u << 3) /**< \brief (FX_TWI_SR) Slave Read (automatically set / reset) */
#define FX_TWI_SR_SVACC (0x1u << 4) /**< \brief (FX_TWI_SR) Slave Access (automatically set / reset) */
#define FX_TWI_SR_GACC (0x1u << 5) /**< \brief (FX_TWI_SR) General Call Access (clear on read) */
#define FX_TWI_SR_OVRE (0x1u << 6) /**< \brief (FX_TWI_SR) Overrun Error (clear on read) */
#define FX_TWI_SR_UNRE (0x1u << 7) /**< \brief (FX_TWI_SR) Underrun Error (clear on read) */
#define FX_TWI_SR_NACK (0x1u << 8) /**< \brief (FX_TWI_SR) Not Acknowledged (clear on read) */
#define FX_TWI_SR_ARBLST (0x1u << 9) /**< \brief (FX_TWI_SR) Arbitration Lost (clear on read) */
#define FX_TWI_SR_SCLWS (0x1u << 10) /**< \brief (FX_TWI_SR) Clock Wait State (automatically set / reset) */
#define FX_TWI_SR_EOSACC (0x1u << 11) /**< \brief (FX_TWI_SR) End Of Slave Access (clear on read) */
#define FX_TWI_SR_ENDRX (0x1u << 12) /**< \brief (FX_TWI_SR) End of RX Buffer */
#define FX_TWI_SR_ENDTX (0x1u << 13) /**< \brief (FX_TWI_SR) End of TX Buffer */
#define FX_TWI_SR_RXBUFF (0x1u << 14) /**< \brief (FX_TWI_SR) RX Buffer Full */
#define FX_TWI_SR_TXBUFE (0x1u << 15) /**< \brief (FX_TWI_SR) TX Buffer Empty */
#define FX_TWI_SR_MCACK (0x1u << 16) /**< \brief (FX_TWI_SR) Master Code Acknowledge */
#define FX_TWI_SR_TOUT (0x1u << 18) /**< \brief (FX_TWI_SR) Timeout Error */
#define FX_TWI_SR_PECERR (0x1u << 19) /**< \brief (FX_TWI_SR) PEC Error */
#define FX_TWI_SR_SMBDAM (0x1u << 20) /**< \brief (FX_TWI_SR) SMBus Default Address Match */
#define FX_TWI_SR_SMBHHM (0x1u << 21) /**< \brief (FX_TWI_SR) SMBus Host Header Address Match */
#define FX_TWI_SR_LOCK (0x1u << 23) /**< \brief (FX_TWI_SR) TWI Lock due to Frame Errors */
#define FX_TWI_SR_SCL (0x1u << 24) /**< \brief (FX_TWI_SR) SCL line value */
#define FX_TWI_SR_SDA (0x1u << 25) /**< \brief (FX_TWI_SR) SDA line value */
/* -------- FX_TWI_IER : (FLEXCOM Offset: 0x624) TWI Interrupt Enable Register -------- */
#define FX_TWI_IER_TXCOMP (0x1u << 0) /**< \brief (FX_TWI_IER) Transmission Completed Interrupt Enable */
#define FX_TWI_IER_RXRDY (0x1u << 1) /**< \brief (FX_TWI_IER) Receive Holding Register Ready Interrupt Enable */
#define FX_TWI_IER_TXRDY (0x1u << 2) /**< \brief (FX_TWI_IER) Transmit Holding Register Ready Interrupt Enable */
#define FX_TWI_IER_SVACC (0x1u << 4) /**< \brief (FX_TWI_IER) Slave Access Interrupt Enable */
#define FX_TWI_IER_GACC (0x1u << 5) /**< \brief (FX_TWI_IER) General Call Access Interrupt Enable */
#define FX_TWI_IER_OVRE (0x1u << 6) /**< \brief (FX_TWI_IER) Overrun Error Interrupt Enable */
#define FX_TWI_IER_UNRE (0x1u << 7) /**< \brief (FX_TWI_IER) Underrun Error Interrupt Enable */
#define FX_TWI_IER_NACK (0x1u << 8) /**< \brief (FX_TWI_IER) Not Acknowledge Interrupt Enable */
#define FX_TWI_IER_ARBLST (0x1u << 9) /**< \brief (FX_TWI_IER) Arbitration Lost Interrupt Enable */
#define FX_TWI_IER_SCL_WS (0x1u << 10) /**< \brief (FX_TWI_IER) Clock Wait State Interrupt Enable */
#define FX_TWI_IER_EOSACC (0x1u << 11) /**< \brief (FX_TWI_IER) End Of Slave Access Interrupt Enable */
#define FX_TWI_IER_ENDRX (0x1u << 12) /**< \brief (FX_TWI_IER) End of Receive Buffer Interrupt Enable */
#define FX_TWI_IER_ENDTX (0x1u << 13) /**< \brief (FX_TWI_IER) End of Transmit Buffer Interrupt Enable */
#define FX_TWI_IER_RXBUFF (0x1u << 14) /**< \brief (FX_TWI_IER) Receive Buffer Full Interrupt Enable */
#define FX_TWI_IER_TXBUFE (0x1u << 15) /**< \brief (FX_TWI_IER) Transmit Buffer Empty Interrupt Enable */
#define FX_TWI_IER_MCACK (0x1u << 16) /**< \brief (FX_TWI_IER) Master Code Acknowledge Interrupt Enable */
#define FX_TWI_IER_TOUT (0x1u << 18) /**< \brief (FX_TWI_IER) Timeout Error Interrupt Enable */
#define FX_TWI_IER_PECERR (0x1u << 19) /**< \brief (FX_TWI_IER) PEC Error Interrupt Enable */
#define FX_TWI_IER_SMBDAM (0x1u << 20) /**< \brief (FX_TWI_IER) SMBus Default Address Match Interrupt Enable */
#define FX_TWI_IER_SMBHHM (0x1u << 21) /**< \brief (FX_TWI_IER) SMBus Host Header Address Match Interrupt Enable */
/* -------- FX_TWI_IDR : (FLEXCOM Offset: 0x628) TWI Interrupt Disable Register -------- */
#define FX_TWI_IDR_TXCOMP (0x1u << 0) /**< \brief (FX_TWI_IDR) Transmission Completed Interrupt Disable */
#define FX_TWI_IDR_RXRDY (0x1u << 1) /**< \brief (FX_TWI_IDR) Receive Holding Register Ready Interrupt Disable */
#define FX_TWI_IDR_TXRDY (0x1u << 2) /**< \brief (FX_TWI_IDR) Transmit Holding Register Ready Interrupt Disable */
#define FX_TWI_IDR_SVACC (0x1u << 4) /**< \brief (FX_TWI_IDR) Slave Access Interrupt Disable */
#define FX_TWI_IDR_GACC (0x1u << 5) /**< \brief (FX_TWI_IDR) General Call Access Interrupt Disable */
#define FX_TWI_IDR_OVRE (0x1u << 6) /**< \brief (FX_TWI_IDR) Overrun Error Interrupt Disable */
#define FX_TWI_IDR_UNRE (0x1u << 7) /**< \brief (FX_TWI_IDR) Underrun Error Interrupt Disable */
#define FX_TWI_IDR_NACK (0x1u << 8) /**< \brief (FX_TWI_IDR) Not Acknowledge Interrupt Disable */
#define FX_TWI_IDR_ARBLST (0x1u << 9) /**< \brief (FX_TWI_IDR) Arbitration Lost Interrupt Disable */
#define FX_TWI_IDR_SCL_WS (0x1u << 10) /**< \brief (FX_TWI_IDR) Clock Wait State Interrupt Disable */
#define FX_TWI_IDR_EOSACC (0x1u << 11) /**< \brief (FX_TWI_IDR) End Of Slave Access Interrupt Disable */
#define FX_TWI_IDR_ENDRX (0x1u << 12) /**< \brief (FX_TWI_IDR) End of Receive Buffer Interrupt Disable */
#define FX_TWI_IDR_ENDTX (0x1u << 13) /**< \brief (FX_TWI_IDR) End of Transmit Buffer Interrupt Disable */
#define FX_TWI_IDR_RXBUFF (0x1u << 14) /**< \brief (FX_TWI_IDR) Receive Buffer Full Interrupt Disable */
#define FX_TWI_IDR_TXBUFE (0x1u << 15) /**< \brief (FX_TWI_IDR) Transmit Buffer Empty Interrupt Disable */
#define FX_TWI_IDR_MCACK (0x1u << 16) /**< \brief (FX_TWI_IDR) Master Code Acknowledge Interrupt Disable */
#define FX_TWI_IDR_TOUT (0x1u << 18) /**< \brief (FX_TWI_IDR) Timeout Error Interrupt Disable */
#define FX_TWI_IDR_PECERR (0x1u << 19) /**< \brief (FX_TWI_IDR) PEC Error Interrupt Disable */
#define FX_TWI_IDR_SMBDAM (0x1u << 20) /**< \brief (FX_TWI_IDR) SMBus Default Address Match Interrupt Disable */
#define FX_TWI_IDR_SMBHHM (0x1u << 21) /**< \brief (FX_TWI_IDR) SMBus Host Header Address Match Interrupt Disable */
/* -------- FX_TWI_IMR : (FLEXCOM Offset: 0x62C) TWI Interrupt Mask Register -------- */
#define FX_TWI_IMR_TXCOMP (0x1u << 0) /**< \brief (FX_TWI_IMR) Transmission Completed Interrupt Mask */
#define FX_TWI_IMR_RXRDY (0x1u << 1) /**< \brief (FX_TWI_IMR) Receive Holding Register Ready Interrupt Mask */
#define FX_TWI_IMR_TXRDY (0x1u << 2) /**< \brief (FX_TWI_IMR) Transmit Holding Register Ready Interrupt Mask */
#define FX_TWI_IMR_SVACC (0x1u << 4) /**< \brief (FX_TWI_IMR) Slave Access Interrupt Mask */
#define FX_TWI_IMR_GACC (0x1u << 5) /**< \brief (FX_TWI_IMR) General Call Access Interrupt Mask */
#define FX_TWI_IMR_OVRE (0x1u << 6) /**< \brief (FX_TWI_IMR) Overrun Error Interrupt Mask */
#define FX_TWI_IMR_UNRE (0x1u << 7) /**< \brief (FX_TWI_IMR) Underrun Error Interrupt Mask */
#define FX_TWI_IMR_NACK (0x1u << 8) /**< \brief (FX_TWI_IMR) Not Acknowledge Interrupt Mask */
#define FX_TWI_IMR_ARBLST (0x1u << 9) /**< \brief (FX_TWI_IMR) Arbitration Lost Interrupt Mask */
#define FX_TWI_IMR_SCL_WS (0x1u << 10) /**< \brief (FX_TWI_IMR) Clock Wait State Interrupt Mask */
#define FX_TWI_IMR_EOSACC (0x1u << 11) /**< \brief (FX_TWI_IMR) End Of Slave Access Interrupt Mask */
#define FX_TWI_IMR_ENDRX (0x1u << 12) /**< \brief (FX_TWI_IMR) End of Receive Buffer Interrupt Mask */
#define FX_TWI_IMR_ENDTX (0x1u << 13) /**< \brief (FX_TWI_IMR) End of Transmit Buffer Interrupt Mask */
#define FX_TWI_IMR_RXBUFF (0x1u << 14) /**< \brief (FX_TWI_IMR) Receive Buffer Full Interrupt Mask */
#define FX_TWI_IMR_TXBUFE (0x1u << 15) /**< \brief (FX_TWI_IMR) Transmit Buffer Empty Interrupt Mask */
#define FX_TWI_IMR_MCACK (0x1u << 16) /**< \brief (FX_TWI_IMR) Master Code Acknowledge Interrupt Mask */
#define FX_TWI_IMR_TOUT (0x1u << 18) /**< \brief (FX_TWI_IMR) Timeout Error Interrupt Mask */
#define FX_TWI_IMR_PECERR (0x1u << 19) /**< \brief (FX_TWI_IMR) PEC Error Interrupt Mask */
#define FX_TWI_IMR_SMBDAM (0x1u << 20) /**< \brief (FX_TWI_IMR) SMBus Default Address Match Interrupt Mask */
#define FX_TWI_IMR_SMBHHM (0x1u << 21) /**< \brief (FX_TWI_IMR) SMBus Host Header Address Match Interrupt Mask */
/* -------- FX_TWI_RHR : (FLEXCOM Offset: 0x630) TWI Receive Holding Register -------- */
#define FX_TWI_RHR_RXDATA_Pos 0
#define FX_TWI_RHR_RXDATA_Msk (0xffu << FX_TWI_RHR_RXDATA_Pos) /**< \brief (FX_TWI_RHR) Master or Slave Receive Holding Data */
/* -------- FX_TWI_THR : (FLEXCOM Offset: 0x634) TWI Transmit Holding Register -------- */
#define FX_TWI_THR_TXDATA_Pos 0
#define FX_TWI_THR_TXDATA_Msk (0xffu << FX_TWI_THR_TXDATA_Pos) /**< \brief (FX_TWI_THR) Master or Slave Transmit Holding Data */
#define FX_TWI_THR_TXDATA(value) ((FX_TWI_THR_TXDATA_Msk & ((value) << FX_TWI_THR_TXDATA_Pos)))
/* -------- FX_TWI_SMBTR : (FLEXCOM Offset: 0x638) TWI SMBus Timing Register -------- */
#define FX_TWI_SMBTR_PRESC_Pos 0
#define FX_TWI_SMBTR_PRESC_Msk (0xfu << FX_TWI_SMBTR_PRESC_Pos) /**< \brief (FX_TWI_SMBTR) SMBus Clock Prescaler */
#define FX_TWI_SMBTR_PRESC(value) ((FX_TWI_SMBTR_PRESC_Msk & ((value) << FX_TWI_SMBTR_PRESC_Pos)))
#define FX_TWI_SMBTR_TLOWS_Pos 8
#define FX_TWI_SMBTR_TLOWS_Msk (0xffu << FX_TWI_SMBTR_TLOWS_Pos) /**< \brief (FX_TWI_SMBTR) Slave Clock Stretch Maximum Cycles */
#define FX_TWI_SMBTR_TLOWS(value) ((FX_TWI_SMBTR_TLOWS_Msk & ((value) << FX_TWI_SMBTR_TLOWS_Pos)))
#define FX_TWI_SMBTR_TLOWM_Pos 16
#define FX_TWI_SMBTR_TLOWM_Msk (0xffu << FX_TWI_SMBTR_TLOWM_Pos) /**< \brief (FX_TWI_SMBTR) Master Clock Stretch Maximum Cycles */
#define FX_TWI_SMBTR_TLOWM(value) ((FX_TWI_SMBTR_TLOWM_Msk & ((value) << FX_TWI_SMBTR_TLOWM_Pos)))
#define FX_TWI_SMBTR_THMAX_Pos 24
#define FX_TWI_SMBTR_THMAX_Msk (0xffu << FX_TWI_SMBTR_THMAX_Pos) /**< \brief (FX_TWI_SMBTR) Clock High Maximum Cycles */
#define FX_TWI_SMBTR_THMAX(value) ((FX_TWI_SMBTR_THMAX_Msk & ((value) << FX_TWI_SMBTR_THMAX_Pos)))
/* -------- FX_TWI_ACR : (FLEXCOM Offset: 0x640) TWI Alternative Command Register -------- */
#define FX_TWI_ACR_DATAL_Pos 0
#define FX_TWI_ACR_DATAL_Msk (0xffu << FX_TWI_ACR_DATAL_Pos) /**< \brief (FX_TWI_ACR) Data Length */
#define FX_TWI_ACR_DATAL(value) ((FX_TWI_ACR_DATAL_Msk & ((value) << FX_TWI_ACR_DATAL_Pos)))
#define FX_TWI_ACR_DIR (0x1u << 8) /**< \brief (FX_TWI_ACR) Transfer Direction */
#define FX_TWI_ACR_PEC (0x1u << 9) /**< \brief (FX_TWI_ACR) PEC Request (SMBus Mode only) */
#define FX_TWI_ACR_NDATAL_Pos 16
#define FX_TWI_ACR_NDATAL_Msk (0xffu << FX_TWI_ACR_NDATAL_Pos) /**< \brief (FX_TWI_ACR) Next Data Length */
#define FX_TWI_ACR_NDATAL(value) ((FX_TWI_ACR_NDATAL_Msk & ((value) << FX_TWI_ACR_NDATAL_Pos)))
#define FX_TWI_ACR_NDIR (0x1u << 24) /**< \brief (FX_TWI_ACR) Next Transfer Direction */
#define FX_TWI_ACR_NPEC (0x1u << 25) /**< \brief (FX_TWI_ACR) Next PEC Request (SMBus Mode only) */
/* -------- FX_TWI_FILTR : (FLEXCOM Offset: 0x644) TWI Filter Register -------- */
#define FX_TWI_FILTR_FILT (0x1u << 0) /**< \brief (FX_TWI_FILTR) RX Digital Filter */
#define FX_TWI_FILTR_PADFEN (0x1u << 1) /**< \brief (FX_TWI_FILTR) PAD Filter Enable */
#define FX_TWI_FILTR_PADFCFG (0x1u << 2) /**< \brief (FX_TWI_FILTR) PAD Filter Config */
#define FX_TWI_FILTR_THRES_Pos 8
#define FX_TWI_FILTR_THRES_Msk (0x7u << FX_TWI_FILTR_THRES_Pos) /**< \brief (FX_TWI_FILTR) Digital Filter Threshold */
#define FX_TWI_FILTR_THRES(value) ((FX_TWI_FILTR_THRES_Msk & ((value) << FX_TWI_FILTR_THRES_Pos)))
/* -------- FX_TWI_SWMR : (FLEXCOM Offset: 0x64C) TWI SleepWalking Matching Register -------- */
#define FX_TWI_SWMR_SADR1_Pos 0
#define FX_TWI_SWMR_SADR1_Msk (0x7fu << FX_TWI_SWMR_SADR1_Pos) /**< \brief (FX_TWI_SWMR) Slave Address 1 */
#define FX_TWI_SWMR_SADR1(value) ((FX_TWI_SWMR_SADR1_Msk & ((value) << FX_TWI_SWMR_SADR1_Pos)))
#define FX_TWI_SWMR_SADR2_Pos 8
#define FX_TWI_SWMR_SADR2_Msk (0x7fu << FX_TWI_SWMR_SADR2_Pos) /**< \brief (FX_TWI_SWMR) Slave Address 2 */
#define FX_TWI_SWMR_SADR2(value) ((FX_TWI_SWMR_SADR2_Msk & ((value) << FX_TWI_SWMR_SADR2_Pos)))
#define FX_TWI_SWMR_SADR3_Pos 16
#define FX_TWI_SWMR_SADR3_Msk (0x7fu << FX_TWI_SWMR_SADR3_Pos) /**< \brief (FX_TWI_SWMR) Slave Address 3 */
#define FX_TWI_SWMR_SADR3(value) ((FX_TWI_SWMR_SADR3_Msk & ((value) << FX_TWI_SWMR_SADR3_Pos)))
#define FX_TWI_SWMR_DATAM_Pos 24
#define FX_TWI_SWMR_DATAM_Msk (0xffu << FX_TWI_SWMR_DATAM_Pos) /**< \brief (FX_TWI_SWMR) Data Match */
#define FX_TWI_SWMR_DATAM(value) ((FX_TWI_SWMR_DATAM_Msk & ((value) << FX_TWI_SWMR_DATAM_Pos)))
/* -------- FX_TWI_DR : (FLEXCOM Offset: 0x6D0) TWI Debug Register -------- */
#define FX_TWI_DR_SWEN (0x1u << 0) /**< \brief (FX_TWI_DR) SleepWalking Enable */
#define FX_TWI_DR_CLKRQ (0x1u << 1) /**< \brief (FX_TWI_DR) Clock Request */
#define FX_TWI_DR_SWMATCH (0x1u << 2) /**< \brief (FX_TWI_DR) SleepWalking Match */
#define FX_TWI_DR_TRP (0x1u << 3) /**< \brief (FX_TWI_DR) Transfer Pending */
/* -------- FX_TWI_WPMR : (FLEXCOM Offset: 0x6E4) TWI Protection Mode Register -------- */
#define FX_TWI_WPMR_WPEN (0x1u << 0) /**< \brief (FX_TWI_WPMR) Write Protection Enable */
#define FX_TWI_WPMR_WPKEY_Pos 8
#define FX_TWI_WPMR_WPKEY_Msk (0xffffffu << FX_TWI_WPMR_WPKEY_Pos) /**< \brief (FX_TWI_WPMR) Write Protection Key */
#define   FX_TWI_WPMR_WPKEY_PASSWD (0x545749u << 8) /**< \brief (FX_TWI_WPMR) Writing any other value in this field aborts the write operation of the WPEN bit.Always reads as 0 */
/* -------- FX_TWI_WPSR : (FLEXCOM Offset: 0x6E8) TWI Protection Status Register -------- */
#define FX_TWI_WPSR_WPVS (0x1u << 0) /**< \brief (FX_TWI_WPSR) Write Protect Violation Status */
#define FX_TWI_WPSR_WPVSRC_Pos 8
#define FX_TWI_WPSR_WPVSRC_Msk (0xffffffu << FX_TWI_WPSR_WPVSRC_Pos) /**< \brief (FX_TWI_WPSR) Write Protection Violation Source */
/* -------- FX_TWI_VER : (FLEXCOM Offset: 0x6FC) TWI Version Register -------- */
#define FX_TWI_VER_VERSION_Pos 0
#define FX_TWI_VER_VERSION_Msk (0xfffu << FX_TWI_VER_VERSION_Pos) /**< \brief (FX_TWI_VER) Version of the Hardware Module */
#define FX_TWI_VER_MFN_Pos 16
#define FX_TWI_VER_MFN_Msk (0x7u << FX_TWI_VER_MFN_Pos) /**< \brief (FX_TWI_VER) Metal Fix Number */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR Gigabit Ethernet MAC */
/* ============================================================================= */
/** \addtogroup SAMA5D2_GMAC Gigabit Ethernet MAC */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief GmacSa hardware registers */
typedef struct {
  __IO uint32_t GMAC_SAB; /**< \brief (GmacSa Offset: 0x0) Specific Address 1 Bottom [31:0] Register */
  __IO uint32_t GMAC_SAT; /**< \brief (GmacSa Offset: 0x4) Specific Address 1 Top [47:32] Register */
} GmacSa;
/** \brief Gmac hardware registers */
#define GMACSA_NUMBER 4
typedef struct {
  __IO uint32_t GMAC_NCR;               /**< \brief (Gmac Offset: 0x000) Network Control Register */
  __IO uint32_t GMAC_NCFGR;             /**< \brief (Gmac Offset: 0x004) Network Configuration Register */
  __I  uint32_t GMAC_NSR;               /**< \brief (Gmac Offset: 0x008) Network Status Register */
  __IO uint32_t GMAC_UR;                /**< \brief (Gmac Offset: 0x00C) User Register */
  __IO uint32_t GMAC_DCFGR;             /**< \brief (Gmac Offset: 0x010) DMA Configuration Register */
  __IO uint32_t GMAC_TSR;               /**< \brief (Gmac Offset: 0x014) Transmit Status Register */
  __IO uint32_t GMAC_RBQB;              /**< \brief (Gmac Offset: 0x018) Receive Buffer Queue Base Address */
  __IO uint32_t GMAC_TBQB;              /**< \brief (Gmac Offset: 0x01C) Transmit Buffer Queue Base Address */
  __IO uint32_t GMAC_RSR;               /**< \brief (Gmac Offset: 0x020) Receive Status Register */
  __I  uint32_t GMAC_ISR;               /**< \brief (Gmac Offset: 0x024) Interrupt Status Register */
  __O  uint32_t GMAC_IER;               /**< \brief (Gmac Offset: 0x028) Interrupt Enable Register */
  __O  uint32_t GMAC_IDR;               /**< \brief (Gmac Offset: 0x02C) Interrupt Disable Register */
  __I  uint32_t GMAC_IMR;               /**< \brief (Gmac Offset: 0x030) Interrupt Mask Register */
  __IO uint32_t GMAC_MAN;               /**< \brief (Gmac Offset: 0x034) PHY Maintenance Register */
  __I  uint32_t GMAC_RPQ;               /**< \brief (Gmac Offset: 0x038) Received Pause Quantum Register */
  __IO uint32_t GMAC_TPQ;               /**< \brief (Gmac Offset: 0x03C) Transmit Pause Quantum Register */
  __IO uint32_t GMAC_TPSF;              /**< \brief (Gmac Offset: 0x040) TX Partial Store and Forward Register */
  __IO uint32_t GMAC_RPSF;              /**< \brief (Gmac Offset: 0x044) RX Partial Store and Forward Register */
  __I  uint32_t Reserved1[14];
  __IO uint32_t GMAC_HRB;               /**< \brief (Gmac Offset: 0x080) Hash Register Bottom [31:0] */
  __IO uint32_t GMAC_HRT;               /**< \brief (Gmac Offset: 0x084) Hash Register Top [63:32] */
       GmacSa   GMAC_SA[GMACSA_NUMBER]; /**< \brief (Gmac Offset: 0x088) 1 .. 4 */
  __IO uint32_t GMAC_TIDM[4];           /**< \brief (Gmac Offset: 0x0A8) Type ID Match 1 Register */
  __IO uint32_t GMAC_WOL;               /**< \brief (Gmac Offset: 0x0B8) Wake on LAN Register */
  __IO uint32_t GMAC_IPGS;              /**< \brief (Gmac Offset: 0x0BC) IPG Stretch Register */
  __IO uint32_t GMAC_SVLAN;             /**< \brief (Gmac Offset: 0x0C0) Stacked VLAN Register */
  __IO uint32_t GMAC_TPFCP;             /**< \brief (Gmac Offset: 0x0C4) Transmit PFC Pause Register */
  __IO uint32_t GMAC_SAMB1;             /**< \brief (Gmac Offset: 0x0C8) Specific Address 1 Mask Bottom [31:0] Register */
  __IO uint32_t GMAC_SAMT1;             /**< \brief (Gmac Offset: 0x0CC) Specific Address 1 Mask Top [47:32] Register */
  __I  uint32_t Reserved2[3];
  __IO uint32_t GMAC_NSC;               /**< \brief (Gmac Offset: 0x0DC) 1588 Timer Nanosecond Comparison Register */
  __IO uint32_t GMAC_SCL;               /**< \brief (Gmac Offset: 0x0E0) 1588 Timer Second Comparison [31:0] Register */
  __IO uint32_t GMAC_SCH;               /**< \brief (Gmac Offset: 0x0E4) 1588 Timer Second Comparison [47:32] Register */
  __I  uint32_t Reserved3[5];
  __I  uint32_t GMAC_MID;               /**< \brief (Gmac Offset: 0x0FC) Module ID Register */
  __I  uint32_t GMAC_OTLO;              /**< \brief (Gmac Offset: 0x100) Octets Transmitted [31:0] Register */
  __I  uint32_t GMAC_OTHI;              /**< \brief (Gmac Offset: 0x104) Octets Transmitted [47:32] Register */
  __I  uint32_t GMAC_FT;                /**< \brief (Gmac Offset: 0x108) Frames Transmitted Register */
  __I  uint32_t GMAC_BCFT;              /**< \brief (Gmac Offset: 0x10C) Broadcast Frames Transmitted Register */
  __I  uint32_t GMAC_MFT;               /**< \brief (Gmac Offset: 0x110) Multicast Frames Transmitted Register */
  __I  uint32_t GMAC_PFT;               /**< \brief (Gmac Offset: 0x114) Pause Frames Transmitted Register */
  __I  uint32_t GMAC_BFT64;             /**< \brief (Gmac Offset: 0x118) 64 Byte Frames Transmitted Register */
  __I  uint32_t GMAC_TBFT127;           /**< \brief (Gmac Offset: 0x11C) 65 to 127 Byte Frames Transmitted Register */
  __I  uint32_t GMAC_TBFT255;           /**< \brief (Gmac Offset: 0x120) 128 to 255 Byte Frames Transmitted Register */
  __I  uint32_t GMAC_TBFT511;           /**< \brief (Gmac Offset: 0x124) 256 to 511 Byte Frames Transmitted Register */
  __I  uint32_t GMAC_TBFT1023;          /**< \brief (Gmac Offset: 0x128) 512 to 1023 Byte Frames Transmitted Register */
  __I  uint32_t GMAC_TBFT1518;          /**< \brief (Gmac Offset: 0x12C) 1024 to 1518 Byte Frames Transmitted Register */
  __I  uint32_t GMAC_GTBFT1518;         /**< \brief (Gmac Offset: 0x130) Greater Than 1518 Byte Frames Transmitted Register */
  __I  uint32_t GMAC_TUR;               /**< \brief (Gmac Offset: 0x134) Transmit Underruns Register */
  __I  uint32_t GMAC_SCF;               /**< \brief (Gmac Offset: 0x138) Single Collision Frames Register */
  __I  uint32_t GMAC_MCF;               /**< \brief (Gmac Offset: 0x13C) Multiple Collision Frames Register */
  __I  uint32_t GMAC_EC;                /**< \brief (Gmac Offset: 0x140) Excessive Collisions Register */
  __I  uint32_t GMAC_LC;                /**< \brief (Gmac Offset: 0x144) Late Collisions Register */
  __I  uint32_t GMAC_DTF;               /**< \brief (Gmac Offset: 0x148) Deferred Transmission Frames Register */
  __I  uint32_t GMAC_CSE;               /**< \brief (Gmac Offset: 0x14C) Carrier Sense Errors Register */
  __I  uint32_t GMAC_ORLO;              /**< \brief (Gmac Offset: 0x150) Octets Received [31:0] Received */
  __I  uint32_t GMAC_ORHI;              /**< \brief (Gmac Offset: 0x154) Octets Received [47:32] Received */
  __I  uint32_t GMAC_FR;                /**< \brief (Gmac Offset: 0x158) Frames Received Register */
  __I  uint32_t GMAC_BCFR;              /**< \brief (Gmac Offset: 0x15C) Broadcast Frames Received Register */
  __I  uint32_t GMAC_MFR;               /**< \brief (Gmac Offset: 0x160) Multicast Frames Received Register */
  __I  uint32_t GMAC_PFR;               /**< \brief (Gmac Offset: 0x164) Pause Frames Received Register */
  __I  uint32_t GMAC_BFR64;             /**< \brief (Gmac Offset: 0x168) 64 Byte Frames Received Register */
  __I  uint32_t GMAC_TBFR127;           /**< \brief (Gmac Offset: 0x16C) 65 to 127 Byte Frames Received Register */
  __I  uint32_t GMAC_TBFR255;           /**< \brief (Gmac Offset: 0x170) 128 to 255 Byte Frames Received Register */
  __I  uint32_t GMAC_TBFR511;           /**< \brief (Gmac Offset: 0x174) 256 to 511Byte Frames Received Register */
  __I  uint32_t GMAC_TBFR1023;          /**< \brief (Gmac Offset: 0x178) 512 to 1023 Byte Frames Received Register */
  __I  uint32_t GMAC_TBFR1518;          /**< \brief (Gmac Offset: 0x17C) 1024 to 1518 Byte Frames Received Register */
  __I  uint32_t GMAC_TMXBFR;            /**< \brief (Gmac Offset: 0x180) 1519 to Maximum Byte Frames Received Register */
  __I  uint32_t GMAC_UFR;               /**< \brief (Gmac Offset: 0x184) Undersize Frames Received Register */
  __I  uint32_t GMAC_OFR;               /**< \brief (Gmac Offset: 0x188) Oversize Frames Received Register */
  __I  uint32_t GMAC_JR;                /**< \brief (Gmac Offset: 0x18C) Jabbers Received Register */
  __I  uint32_t GMAC_FCSE;              /**< \brief (Gmac Offset: 0x190) Frame Check Sequence Errors Register */
  __I  uint32_t GMAC_LFFE;              /**< \brief (Gmac Offset: 0x194) Length Field Frame Errors Register */
  __I  uint32_t GMAC_RSE;               /**< \brief (Gmac Offset: 0x198) Receive Symbol Errors Register */
  __I  uint32_t GMAC_AE;                /**< \brief (Gmac Offset: 0x19C) Alignment Errors Register */
  __I  uint32_t GMAC_RRE;               /**< \brief (Gmac Offset: 0x1A0) Receive Resource Errors Register */
  __I  uint32_t GMAC_ROE;               /**< \brief (Gmac Offset: 0x1A4) Receive Overrun Register */
  __I  uint32_t GMAC_IHCE;              /**< \brief (Gmac Offset: 0x1A8) IP Header Checksum Errors Register */
  __I  uint32_t GMAC_TCE;               /**< \brief (Gmac Offset: 0x1AC) TCP Checksum Errors Register */
  __I  uint32_t GMAC_UCE;               /**< \brief (Gmac Offset: 0x1B0) UDP Checksum Errors Register */
  __I  uint32_t Reserved4[2];
  __IO uint32_t GMAC_TISUBN;            /**< \brief (Gmac Offset: 0x1BC) 1588 Timer Increment Sub-nanoseconds Register */
  __IO uint32_t GMAC_TSH;               /**< \brief (Gmac Offset: 0x1C0) 1588 Timer Seconds [47:32] Register */
  __IO uint32_t GMAC_TSSSH;             /**< \brief (Gmac Offset: 0x1C4) 1588 Timer Sync Strobe Seconds [47:32] Register */
  __IO uint32_t GMAC_TSSSL;             /**< \brief (Gmac Offset: 0x1C8) 1588 Timer Sync Strobe Seconds [31:0] Register */
  __IO uint32_t GMAC_TSSN;              /**< \brief (Gmac Offset: 0x1CC) 1588 Timer Sync Strobe Nanoseconds Register */
  __IO uint32_t GMAC_TSL;               /**< \brief (Gmac Offset: 0x1D0) 1588 Timer Seconds [31:0] Register */
  __IO uint32_t GMAC_TN;                /**< \brief (Gmac Offset: 0x1D4) 1588 Timer Nanoseconds Register */
  __O  uint32_t GMAC_TA;                /**< \brief (Gmac Offset: 0x1D8) 1588 Timer Adjust Register */
  __IO uint32_t GMAC_TI;                /**< \brief (Gmac Offset: 0x1DC) 1588 Timer Increment Register */
  __I  uint32_t GMAC_EFTS;              /**< \brief (Gmac Offset: 0x1E0) PTP Event Frame Transmitted Seconds */
  __I  uint32_t GMAC_EFTN;              /**< \brief (Gmac Offset: 0x1E4) PTP Event Frame Transmitted Nanoseconds */
  __I  uint32_t GMAC_EFRS;              /**< \brief (Gmac Offset: 0x1E8) PTP Event Frame Received Seconds */
  __I  uint32_t GMAC_EFRN;              /**< \brief (Gmac Offset: 0x1EC) PTP Event Frame Received Nanoseconds */
  __I  uint32_t GMAC_PEFTS;             /**< \brief (Gmac Offset: 0x1F0) PTP Peer Event Frame Transmitted Seconds */
  __I  uint32_t GMAC_PEFTN;             /**< \brief (Gmac Offset: 0x1F4) PTP Peer Event Frame Transmitted Nanoseconds */
  __I  uint32_t GMAC_PEFRS;             /**< \brief (Gmac Offset: 0x1F8) PTP Peer Event Frame Received Seconds */
  __I  uint32_t GMAC_PEFRN;             /**< \brief (Gmac Offset: 0x1FC) PTP Peer Event Frame Received Nanoseconds */
  __I  uint32_t Reserved5[128];
  __I  uint32_t GMAC_ISRPQ[7];          /**< \brief (Gmac Offset: 0x400) Interrupt Status Register Priority Queue */
  __I  uint32_t Reserved6[9];
  __IO uint32_t GMAC_TBQBAPQ[7];        /**< \brief (Gmac Offset: 0x440) Transmit Buffer Queue Base Address Priority Queue */
  __I  uint32_t Reserved7[9];
  __IO uint32_t GMAC_RBQBAPQ[7];        /**< \brief (Gmac Offset: 0x480) Receive Buffer Queue Base Address Priority Queue */
  __I  uint32_t Reserved8[1];
  __IO uint32_t GMAC_RBSRPQ[7];         /**< \brief (Gmac Offset: 0x4A0) Receive Buffer Size Register Priority Queue */
  __I  uint32_t Reserved9[17];
  __IO uint32_t GMAC_ST1RPQ[16];        /**< \brief (Gmac Offset: 0x500) Screening Type 1 Register Priority Queue */
  __IO uint32_t GMAC_ST2RPQ[16];        /**< \brief (Gmac Offset: 0x540) Screening Type 2 Register Priority Queue */
  __I  uint32_t Reserved10[32];
  __O  uint32_t GMAC_IERPQ[7];          /**< \brief (Gmac Offset: 0x600) Interrupt Enable Register Priority Queue */
  __I  uint32_t Reserved11[1];
  __O  uint32_t GMAC_IDRPQ[7];          /**< \brief (Gmac Offset: 0x620) Interrupt Disable Register Priority Queue */
  __I  uint32_t Reserved12[1];
  __IO uint32_t GMAC_IMRPQ[7];          /**< \brief (Gmac Offset: 0x640) Interrupt Mask Register Priority Queue */
  __I  uint32_t Reserved13[33];
  __IO uint32_t GMAC_ST2ETHR[4];        /**< \brief (Gmac Offset: 0x6e0) Screener Type 2 - Ethertype Registers */
  __I  uint32_t Reserved14[4];
  __IO uint32_t GMAC_ST2CMPR[24];       /**< \brief (Gmac Offset: 0x700) Screener Type 2 - Compare Registers */
} Gmac;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- GMAC_NCR : (GMAC Offset: 0x000) Network Control Register -------- */
#define GMAC_NCR_LBL (0x1u << 1) /**< \brief (GMAC_NCR) Loop Back Local */
#define GMAC_NCR_RXEN (0x1u << 2) /**< \brief (GMAC_NCR) Receive Enable */
#define GMAC_NCR_TXEN (0x1u << 3) /**< \brief (GMAC_NCR) Transmit Enable */
#define GMAC_NCR_MPE (0x1u << 4) /**< \brief (GMAC_NCR) Management Port Enable */
#define GMAC_NCR_CLRSTAT (0x1u << 5) /**< \brief (GMAC_NCR) Clear Statistics Registers */
#define GMAC_NCR_INCSTAT (0x1u << 6) /**< \brief (GMAC_NCR) Increment Statistics Registers */
#define GMAC_NCR_WESTAT (0x1u << 7) /**< \brief (GMAC_NCR) Write Enable for Statistics Registers */
#define GMAC_NCR_BP (0x1u << 8) /**< \brief (GMAC_NCR) Back pressure */
#define GMAC_NCR_TSTART (0x1u << 9) /**< \brief (GMAC_NCR) Start Transmission */
#define GMAC_NCR_THALT (0x1u << 10) /**< \brief (GMAC_NCR) Transmit Halt */
#define GMAC_NCR_TXPF (0x1u << 11) /**< \brief (GMAC_NCR) Transmit Pause Frame */
#define GMAC_NCR_TXZQPF (0x1u << 12) /**< \brief (GMAC_NCR) Transmit Zero Quantum Pause Frame */
#define GMAC_NCR_RDS (0x1u << 14) /**< \brief (GMAC_NCR) Read Snapshot */
#define GMAC_NCR_SRTSM (0x1u << 15) /**< \brief (GMAC_NCR) Store Receive Time Stamp to Memory */
#define GMAC_NCR_ENPBPR (0x1u << 16) /**< \brief (GMAC_NCR) Enable PFC Priority-based Pause Reception */
#define GMAC_NCR_TXPBPF (0x1u << 17) /**< \brief (GMAC_NCR) Transmit PFC Priority-based Pause Frame */
#define GMAC_NCR_FNP (0x1u << 18) /**< \brief (GMAC_NCR) Flush Next Packet */
/* -------- GMAC_NCFGR : (GMAC Offset: 0x004) Network Configuration Register -------- */
#define GMAC_NCFGR_SPD (0x1u << 0) /**< \brief (GMAC_NCFGR) Speed */
#define GMAC_NCFGR_FD (0x1u << 1) /**< \brief (GMAC_NCFGR) Full Duplex */
#define GMAC_NCFGR_DNVLAN (0x1u << 2) /**< \brief (GMAC_NCFGR) Discard Non-VLAN FRAMES */
#define GMAC_NCFGR_JFRAME (0x1u << 3) /**< \brief (GMAC_NCFGR) Jumbo Frame Size */
#define GMAC_NCFGR_CAF (0x1u << 4) /**< \brief (GMAC_NCFGR) Copy All Frames */
#define GMAC_NCFGR_NBC (0x1u << 5) /**< \brief (GMAC_NCFGR) No Broadcast */
#define GMAC_NCFGR_MTIHEN (0x1u << 6) /**< \brief (GMAC_NCFGR) Multicast Hash Enable */
#define GMAC_NCFGR_UNIHEN (0x1u << 7) /**< \brief (GMAC_NCFGR) Unicast Hash Enable */
#define GMAC_NCFGR_MAXFS (0x1u << 8) /**< \brief (GMAC_NCFGR) 1536 Maximum Frame Size */
#define GMAC_NCFGR_RTY (0x1u << 12) /**< \brief (GMAC_NCFGR) Retry Test */
#define GMAC_NCFGR_PEN (0x1u << 13) /**< \brief (GMAC_NCFGR) Pause Enable */
#define GMAC_NCFGR_RXBUFO_Pos 14
#define GMAC_NCFGR_RXBUFO_Msk (0x3u << GMAC_NCFGR_RXBUFO_Pos) /**< \brief (GMAC_NCFGR) Receive Buffer Offset */
#define GMAC_NCFGR_RXBUFO(value) ((GMAC_NCFGR_RXBUFO_Msk & ((value) << GMAC_NCFGR_RXBUFO_Pos)))
#define GMAC_NCFGR_LFERD (0x1u << 16) /**< \brief (GMAC_NCFGR) Length Field Error Frame Discard */
#define GMAC_NCFGR_RFCS (0x1u << 17) /**< \brief (GMAC_NCFGR) Remove FCS */
#define GMAC_NCFGR_CLK_Pos 18
#define GMAC_NCFGR_CLK_Msk (0x7u << GMAC_NCFGR_CLK_Pos) /**< \brief (GMAC_NCFGR) MDC CLock Division */
#define   GMAC_NCFGR_CLK_MCK_8 (0x0u << 18) /**< \brief (GMAC_NCFGR) MCK divided by 8 (MCK up to 20 MHz) */
#define   GMAC_NCFGR_CLK_MCK_16 (0x1u << 18) /**< \brief (GMAC_NCFGR) MCK divided by 16 (MCK up to 40 MHz) */
#define   GMAC_NCFGR_CLK_MCK_32 (0x2u << 18) /**< \brief (GMAC_NCFGR) MCK divided by 32 (MCK up to 80 MHz) */
#define   GMAC_NCFGR_CLK_MCK_48 (0x3u << 18) /**< \brief (GMAC_NCFGR) MCK divided by 48 (MCK up to 120 MHz) */
#define   GMAC_NCFGR_CLK_MCK_64 (0x4u << 18) /**< \brief (GMAC_NCFGR) MCK divided by 64 (MCK up to 160 MHz) */
#define   GMAC_NCFGR_CLK_MCK_96 (0x5u << 18) /**< \brief (GMAC_NCFGR) MCK divided by 96 (MCK up to 240 MHz) */
#define GMAC_NCFGR_DBW_Pos 21
#define GMAC_NCFGR_DBW_Msk (0x3u << GMAC_NCFGR_DBW_Pos) /**< \brief (GMAC_NCFGR) Data Bus Width */
#define GMAC_NCFGR_DBW(value) ((GMAC_NCFGR_DBW_Msk & ((value) << GMAC_NCFGR_DBW_Pos)))
#define GMAC_NCFGR_DCPF (0x1u << 23) /**< \brief (GMAC_NCFGR) Disable Copy of Pause Frames */
#define GMAC_NCFGR_RXCOEN (0x1u << 24) /**< \brief (GMAC_NCFGR) Receive Checksum Offload Enable */
#define GMAC_NCFGR_EFRHD (0x1u << 25) /**< \brief (GMAC_NCFGR) Enable Frames Received in Half Duplex */
#define GMAC_NCFGR_IRXFCS (0x1u << 26) /**< \brief (GMAC_NCFGR) Ignore RX FCS */
#define GMAC_NCFGR_IPGSEN (0x1u << 28) /**< \brief (GMAC_NCFGR) IP Stretch Enable */
#define GMAC_NCFGR_RXBP (0x1u << 29) /**< \brief (GMAC_NCFGR) Receive Bad Preamble */
#define GMAC_NCFGR_IRXER (0x1u << 30) /**< \brief (GMAC_NCFGR) Ignore IPG GRXER */
/* -------- GMAC_NSR : (GMAC Offset: 0x008) Network Status Register -------- */
#define GMAC_NSR_MDIO (0x1u << 1) /**< \brief (GMAC_NSR) MDIO Input Status */
#define GMAC_NSR_IDLE (0x1u << 2) /**< \brief (GMAC_NSR) PHY Management Logic Idle */
/* -------- GMAC_UR : (GMAC Offset: 0x00C) User Register -------- */
#define GMAC_UR_RMIIMII (0x1u << 0) /**< \brief (GMAC_UR)  */
/* -------- GMAC_DCFGR : (GMAC Offset: 0x010) DMA Configuration Register -------- */
#define GMAC_DCFGR_FBLDO_Pos 0
#define GMAC_DCFGR_FBLDO_Msk (0x1fu << GMAC_DCFGR_FBLDO_Pos) /**< \brief (GMAC_DCFGR) Fixed Burst Length for DMA Data Operations: */
#define   GMAC_DCFGR_FBLDO_SINGLE (0x1u << 0) /**< \brief (GMAC_DCFGR) 00001: Always use SINGLE AHB bursts */
#define   GMAC_DCFGR_FBLDO_INCR4 (0x4u << 0) /**< \brief (GMAC_DCFGR) 001xx: Attempt to use INCR4 AHB bursts (Default) */
#define   GMAC_DCFGR_FBLDO_INCR8 (0x8u << 0) /**< \brief (GMAC_DCFGR) 01xxx: Attempt to use INCR8 AHB bursts */
#define   GMAC_DCFGR_FBLDO_INCR16 (0x10u << 0) /**< \brief (GMAC_DCFGR) 1xxxx: Attempt to use INCR16 AHB bursts */
#define GMAC_DCFGR_ESMA (0x1u << 6) /**< \brief (GMAC_DCFGR) Endian Swap Mode Enable for Management Descriptor Accesses */
#define GMAC_DCFGR_ESPA (0x1u << 7) /**< \brief (GMAC_DCFGR) Endian Swap Mode Enable for Packet Data Accesses */
#define GMAC_DCFGR_RXBMS_Pos 8
#define GMAC_DCFGR_RXBMS_Msk (0x3u << GMAC_DCFGR_RXBMS_Pos) /**< \brief (GMAC_DCFGR) Receiver Packet Buffer Memory Size Select */
#define   GMAC_DCFGR_RXBMS_EIGHTH (0x0u << 8) /**< \brief (GMAC_DCFGR) RECEIVE_BUFFER_SIZE/8 Kbyte Memory Size */
#define   GMAC_DCFGR_RXBMS_QUARTER (0x1u << 8) /**< \brief (GMAC_DCFGR) RECEIVE_BUFFER_SIZE/4 Kbytes Memory Size */
#define   GMAC_DCFGR_RXBMS_HALF (0x2u << 8) /**< \brief (GMAC_DCFGR) RECEIVE_BUFFER_SIZE/2 Kbytes Memory Size */
#define   GMAC_DCFGR_RXBMS_FULL (0x3u << 8) /**< \brief (GMAC_DCFGR) RECEIVE_BUFFER_SIZE Kbytes Memory Size */
#define GMAC_DCFGR_TXPBMS (0x1u << 10) /**< \brief (GMAC_DCFGR) Transmitter Packet Buffer Memory Size Select */
#define GMAC_DCFGR_TXCOEN (0x1u << 11) /**< \brief (GMAC_DCFGR) Transmitter Checksum Generation Offload Enable */
#define GMAC_DCFGR_DRBS_Pos 16
#define GMAC_DCFGR_DRBS_Msk (0xffu << GMAC_DCFGR_DRBS_Pos) /**< \brief (GMAC_DCFGR) DMA Receive Buffer Size */
#define GMAC_DCFGR_DRBS(value) ((GMAC_DCFGR_DRBS_Msk & ((value) << GMAC_DCFGR_DRBS_Pos)))
#define GMAC_DCFGR_DDRP (0x1u << 24) /**< \brief (GMAC_DCFGR) DMA Discard Receive Packets */
/* -------- GMAC_TSR : (GMAC Offset: 0x014) Transmit Status Register -------- */
#define GMAC_TSR_UBR (0x1u << 0) /**< \brief (GMAC_TSR) Used Bit Read */
#define GMAC_TSR_COL (0x1u << 1) /**< \brief (GMAC_TSR) Collision Occurred */
#define GMAC_TSR_RLE (0x1u << 2) /**< \brief (GMAC_TSR) Retry Limit Exceeded */
#define GMAC_TSR_TXGO (0x1u << 3) /**< \brief (GMAC_TSR) Transmit Go */
#define GMAC_TSR_TFC (0x1u << 4) /**< \brief (GMAC_TSR) Transmit Frame Corruption Due to AHB Error */
#define GMAC_TSR_TXCOMP (0x1u << 5) /**< \brief (GMAC_TSR) Transmit Complete */
#define GMAC_TSR_UND (0x1u << 6) /**< \brief (GMAC_TSR) Transmit Underrun */
#define GMAC_TSR_HRESP (0x1u << 8) /**< \brief (GMAC_TSR) HRESP Not OK */
/* -------- GMAC_RBQB : (GMAC Offset: 0x018) Receive Buffer Queue Base Address -------- */
#define GMAC_RBQB_ADDR_Pos 2
#define GMAC_RBQB_ADDR_Msk (0x3fffffffu << GMAC_RBQB_ADDR_Pos) /**< \brief (GMAC_RBQB) Receive Buffer Queue Base Address */
#define GMAC_RBQB_ADDR(value) ((GMAC_RBQB_ADDR_Msk & ((value) << GMAC_RBQB_ADDR_Pos)))
/* -------- GMAC_TBQB : (GMAC Offset: 0x01C) Transmit Buffer Queue Base Address -------- */
#define GMAC_TBQB_ADDR_Pos 2
#define GMAC_TBQB_ADDR_Msk (0x3fffffffu << GMAC_TBQB_ADDR_Pos) /**< \brief (GMAC_TBQB) Transmit Buffer Queue Base Address */
#define GMAC_TBQB_ADDR(value) ((GMAC_TBQB_ADDR_Msk & ((value) << GMAC_TBQB_ADDR_Pos)))
/* -------- GMAC_RSR : (GMAC Offset: 0x020) Receive Status Register -------- */
#define GMAC_RSR_BNA (0x1u << 0) /**< \brief (GMAC_RSR) Buffer Not Available */
#define GMAC_RSR_REC (0x1u << 1) /**< \brief (GMAC_RSR) Frame Received */
#define GMAC_RSR_RXOVR (0x1u << 2) /**< \brief (GMAC_RSR) Receive Overrun */
#define GMAC_RSR_HNO (0x1u << 3) /**< \brief (GMAC_RSR) HRESP Not OK */
/* -------- GMAC_ISR : (GMAC Offset: 0x024) Interrupt Status Register -------- */
#define GMAC_ISR_MFS (0x1u << 0) /**< \brief (GMAC_ISR) Management Frame Sent */
#define GMAC_ISR_RCOMP (0x1u << 1) /**< \brief (GMAC_ISR) Receive Complete */
#define GMAC_ISR_RXUBR (0x1u << 2) /**< \brief (GMAC_ISR) RX Used Bit Read */
#define GMAC_ISR_TXUBR (0x1u << 3) /**< \brief (GMAC_ISR) TX Used Bit Read */
#define GMAC_ISR_TUR (0x1u << 4) /**< \brief (GMAC_ISR) Transmit Underrun */
#define GMAC_ISR_RLEX (0x1u << 5) /**< \brief (GMAC_ISR) Retry Limit Exceeded */
#define GMAC_ISR_TFC (0x1u << 6) /**< \brief (GMAC_ISR) Transmit Frame Corruption Due to AHB Error */
#define GMAC_ISR_TCOMP (0x1u << 7) /**< \brief (GMAC_ISR) Transmit Complete */
#define GMAC_ISR_ROVR (0x1u << 10) /**< \brief (GMAC_ISR) Receive Overrun */
#define GMAC_ISR_HRESP (0x1u << 11) /**< \brief (GMAC_ISR) HRESP Not OK */
#define GMAC_ISR_PFNZ (0x1u << 12) /**< \brief (GMAC_ISR) Pause Frame with Non-zero Pause Quantum Received */
#define GMAC_ISR_PTZ (0x1u << 13) /**< \brief (GMAC_ISR) Pause Time Zero */
#define GMAC_ISR_PFTR (0x1u << 14) /**< \brief (GMAC_ISR) Pause Frame Transmitted */
#define GMAC_ISR_DRQFR (0x1u << 18) /**< \brief (GMAC_ISR) PTP Delay Request Frame Received */
#define GMAC_ISR_SFR (0x1u << 19) /**< \brief (GMAC_ISR) PTP Sync Frame Received */
#define GMAC_ISR_DRQFT (0x1u << 20) /**< \brief (GMAC_ISR) PTP Delay Request Frame Transmitted */
#define GMAC_ISR_SFT (0x1u << 21) /**< \brief (GMAC_ISR) PTP Sync Frame Transmitted */
#define GMAC_ISR_PDRQFR (0x1u << 22) /**< \brief (GMAC_ISR) PDelay Request Frame Received */
#define GMAC_ISR_PDRSFR (0x1u << 23) /**< \brief (GMAC_ISR) PDelay Response Frame Received */
#define GMAC_ISR_PDRQFT (0x1u << 24) /**< \brief (GMAC_ISR) PDelay Request Frame Transmitted */
#define GMAC_ISR_PDRSFT (0x1u << 25) /**< \brief (GMAC_ISR) PDelay Response Frame Transmitted */
#define GMAC_ISR_SRI (0x1u << 26) /**< \brief (GMAC_ISR) TSU Seconds Register Increment */
#define GMAC_ISR_WOL (0x1u << 28) /**< \brief (GMAC_ISR) Wake On LAN */
/* -------- GMAC_IER : (GMAC Offset: 0x028) Interrupt Enable Register -------- */
#define GMAC_IER_MFS (0x1u << 0) /**< \brief (GMAC_IER) Management Frame Sent */
#define GMAC_IER_RCOMP (0x1u << 1) /**< \brief (GMAC_IER) Receive Complete */
#define GMAC_IER_RXUBR (0x1u << 2) /**< \brief (GMAC_IER) RX Used Bit Read */
#define GMAC_IER_TXUBR (0x1u << 3) /**< \brief (GMAC_IER) TX Used Bit Read */
#define GMAC_IER_TUR (0x1u << 4) /**< \brief (GMAC_IER) Transmit Underrun */
#define GMAC_IER_RLEX (0x1u << 5) /**< \brief (GMAC_IER) Retry Limit Exceeded or Late Collision */
#define GMAC_IER_TFC (0x1u << 6) /**< \brief (GMAC_IER) Transmit Frame Corruption Due to AHB Error */
#define GMAC_IER_TCOMP (0x1u << 7) /**< \brief (GMAC_IER) Transmit Complete */
#define GMAC_IER_ROVR (0x1u << 10) /**< \brief (GMAC_IER) Receive Overrun */
#define GMAC_IER_HRESP (0x1u << 11) /**< \brief (GMAC_IER) HRESP Not OK */
#define GMAC_IER_PFNZ (0x1u << 12) /**< \brief (GMAC_IER) Pause Frame with Non-zero Pause Quantum Received */
#define GMAC_IER_PTZ (0x1u << 13) /**< \brief (GMAC_IER) Pause Time Zero */
#define GMAC_IER_PFTR (0x1u << 14) /**< \brief (GMAC_IER) Pause Frame Transmitted */
#define GMAC_IER_EXINT (0x1u << 15) /**< \brief (GMAC_IER) External Interrupt */
#define GMAC_IER_DRQFR (0x1u << 18) /**< \brief (GMAC_IER) PTP Delay Request Frame Received */
#define GMAC_IER_SFR (0x1u << 19) /**< \brief (GMAC_IER) PTP Sync Frame Received */
#define GMAC_IER_DRQFT (0x1u << 20) /**< \brief (GMAC_IER) PTP Delay Request Frame Transmitted */
#define GMAC_IER_SFT (0x1u << 21) /**< \brief (GMAC_IER) PTP Sync Frame Transmitted */
#define GMAC_IER_PDRQFR (0x1u << 22) /**< \brief (GMAC_IER) PDelay Request Frame Received */
#define GMAC_IER_PDRSFR (0x1u << 23) /**< \brief (GMAC_IER) PDelay Response Frame Received */
#define GMAC_IER_PDRQFT (0x1u << 24) /**< \brief (GMAC_IER) PDelay Request Frame Transmitted */
#define GMAC_IER_PDRSFT (0x1u << 25) /**< \brief (GMAC_IER) PDelay Response Frame Transmitted */
#define GMAC_IER_SRI (0x1u << 26) /**< \brief (GMAC_IER) TSU Seconds Register Increment */
#define GMAC_IER_WOL (0x1u << 28) /**< \brief (GMAC_IER) Wake On LAN */
/* -------- GMAC_IDR : (GMAC Offset: 0x02C) Interrupt Disable Register -------- */
#define GMAC_IDR_MFS (0x1u << 0) /**< \brief (GMAC_IDR) Management Frame Sent */
#define GMAC_IDR_RCOMP (0x1u << 1) /**< \brief (GMAC_IDR) Receive Complete */
#define GMAC_IDR_RXUBR (0x1u << 2) /**< \brief (GMAC_IDR) RX Used Bit Read */
#define GMAC_IDR_TXUBR (0x1u << 3) /**< \brief (GMAC_IDR) TX Used Bit Read */
#define GMAC_IDR_TUR (0x1u << 4) /**< \brief (GMAC_IDR) Transmit Underrun */
#define GMAC_IDR_RLEX (0x1u << 5) /**< \brief (GMAC_IDR) Retry Limit Exceeded or Late Collision */
#define GMAC_IDR_TFC (0x1u << 6) /**< \brief (GMAC_IDR) Transmit Frame Corruption Due to AHB Error */
#define GMAC_IDR_TCOMP (0x1u << 7) /**< \brief (GMAC_IDR) Transmit Complete */
#define GMAC_IDR_ROVR (0x1u << 10) /**< \brief (GMAC_IDR) Receive Overrun */
#define GMAC_IDR_HRESP (0x1u << 11) /**< \brief (GMAC_IDR) HRESP Not OK */
#define GMAC_IDR_PFNZ (0x1u << 12) /**< \brief (GMAC_IDR) Pause Frame with Non-zero Pause Quantum Received */
#define GMAC_IDR_PTZ (0x1u << 13) /**< \brief (GMAC_IDR) Pause Time Zero */
#define GMAC_IDR_PFTR (0x1u << 14) /**< \brief (GMAC_IDR) Pause Frame Transmitted */
#define GMAC_IDR_EXINT (0x1u << 15) /**< \brief (GMAC_IDR) External Interrupt */
#define GMAC_IDR_DRQFR (0x1u << 18) /**< \brief (GMAC_IDR) PTP Delay Request Frame Received */
#define GMAC_IDR_SFR (0x1u << 19) /**< \brief (GMAC_IDR) PTP Sync Frame Received */
#define GMAC_IDR_DRQFT (0x1u << 20) /**< \brief (GMAC_IDR) PTP Delay Request Frame Transmitted */
#define GMAC_IDR_SFT (0x1u << 21) /**< \brief (GMAC_IDR) PTP Sync Frame Transmitted */
#define GMAC_IDR_PDRQFR (0x1u << 22) /**< \brief (GMAC_IDR) PDelay Request Frame Received */
#define GMAC_IDR_PDRSFR (0x1u << 23) /**< \brief (GMAC_IDR) PDelay Response Frame Received */
#define GMAC_IDR_PDRQFT (0x1u << 24) /**< \brief (GMAC_IDR) PDelay Request Frame Transmitted */
#define GMAC_IDR_PDRSFT (0x1u << 25) /**< \brief (GMAC_IDR) PDelay Response Frame Transmitted */
#define GMAC_IDR_SRI (0x1u << 26) /**< \brief (GMAC_IDR) TSU Seconds Register Increment */
#define GMAC_IDR_WOL (0x1u << 28) /**< \brief (GMAC_IDR) Wake On LAN */
/* -------- GMAC_IMR : (GMAC Offset: 0x030) Interrupt Mask Register -------- */
#define GMAC_IMR_MFS (0x1u << 0) /**< \brief (GMAC_IMR) Management Frame Sent */
#define GMAC_IMR_RCOMP (0x1u << 1) /**< \brief (GMAC_IMR) Receive Complete */
#define GMAC_IMR_RXUBR (0x1u << 2) /**< \brief (GMAC_IMR) RX Used Bit Read */
#define GMAC_IMR_TXUBR (0x1u << 3) /**< \brief (GMAC_IMR) TX Used Bit Read */
#define GMAC_IMR_TUR (0x1u << 4) /**< \brief (GMAC_IMR) Transmit Underrun */
#define GMAC_IMR_RLEX (0x1u << 5) /**< \brief (GMAC_IMR) Retry Limit Exceeded */
#define GMAC_IMR_TFC (0x1u << 6) /**< \brief (GMAC_IMR) Transmit Frame Corruption Due to AHB Error */
#define GMAC_IMR_TCOMP (0x1u << 7) /**< \brief (GMAC_IMR) Transmit Complete */
#define GMAC_IMR_ROVR (0x1u << 10) /**< \brief (GMAC_IMR) Receive Overrun */
#define GMAC_IMR_HRESP (0x1u << 11) /**< \brief (GMAC_IMR) HRESP Not OK */
#define GMAC_IMR_PFNZ (0x1u << 12) /**< \brief (GMAC_IMR) Pause Frame with Non-zero Pause Quantum Received */
#define GMAC_IMR_PTZ (0x1u << 13) /**< \brief (GMAC_IMR) Pause Time Zero */
#define GMAC_IMR_PFTR (0x1u << 14) /**< \brief (GMAC_IMR) Pause Frame Transmitted */
#define GMAC_IMR_EXINT (0x1u << 15) /**< \brief (GMAC_IMR) External Interrupt */
#define GMAC_IMR_DRQFR (0x1u << 18) /**< \brief (GMAC_IMR) PTP Delay Request Frame Received */
#define GMAC_IMR_SFR (0x1u << 19) /**< \brief (GMAC_IMR) PTP Sync Frame Received */
#define GMAC_IMR_DRQFT (0x1u << 20) /**< \brief (GMAC_IMR) PTP Delay Request Frame Transmitted */
#define GMAC_IMR_SFT (0x1u << 21) /**< \brief (GMAC_IMR) PTP Sync Frame Transmitted */
#define GMAC_IMR_PDRQFR (0x1u << 22) /**< \brief (GMAC_IMR) PDelay Request Frame Received */
#define GMAC_IMR_PDRSFR (0x1u << 23) /**< \brief (GMAC_IMR) PDelay Response Frame Received */
#define GMAC_IMR_PDRQFT (0x1u << 24) /**< \brief (GMAC_IMR) PDelay Request Frame Transmitted */
#define GMAC_IMR_PDRSFT (0x1u << 25) /**< \brief (GMAC_IMR) PDelay Response Frame Transmitted */
/* -------- GMAC_MAN : (GMAC Offset: 0x034) PHY Maintenance Register -------- */
#define GMAC_MAN_DATA_Pos 0
#define GMAC_MAN_DATA_Msk (0xffffu << GMAC_MAN_DATA_Pos) /**< \brief (GMAC_MAN) PHY Data */
#define GMAC_MAN_DATA(value) ((GMAC_MAN_DATA_Msk & ((value) << GMAC_MAN_DATA_Pos)))
#define GMAC_MAN_WTN_Pos 16
#define GMAC_MAN_WTN_Msk (0x3u << GMAC_MAN_WTN_Pos) /**< \brief (GMAC_MAN) Write Ten */
#define GMAC_MAN_WTN(value) ((GMAC_MAN_WTN_Msk & ((value) << GMAC_MAN_WTN_Pos)))
#define GMAC_MAN_REGA_Pos 18
#define GMAC_MAN_REGA_Msk (0x1fu << GMAC_MAN_REGA_Pos) /**< \brief (GMAC_MAN) Register Address */
#define GMAC_MAN_REGA(value) ((GMAC_MAN_REGA_Msk & ((value) << GMAC_MAN_REGA_Pos)))
#define GMAC_MAN_PHYA_Pos 23
#define GMAC_MAN_PHYA_Msk (0x1fu << GMAC_MAN_PHYA_Pos) /**< \brief (GMAC_MAN) PHY Address */
#define GMAC_MAN_PHYA(value) ((GMAC_MAN_PHYA_Msk & ((value) << GMAC_MAN_PHYA_Pos)))
#define GMAC_MAN_OP_Pos 28
#define GMAC_MAN_OP_Msk (0x3u << GMAC_MAN_OP_Pos) /**< \brief (GMAC_MAN) Operation */
#define GMAC_MAN_OP(value) ((GMAC_MAN_OP_Msk & ((value) << GMAC_MAN_OP_Pos)))
#define GMAC_MAN_CLTTO (0x1u << 30) /**< \brief (GMAC_MAN) Clause 22 Operation */
#define GMAC_MAN_WZO (0x1u << 31) /**< \brief (GMAC_MAN) Write ZERO */
/* -------- GMAC_RPQ : (GMAC Offset: 0x038) Received Pause Quantum Register -------- */
#define GMAC_RPQ_RPQ_Pos 0
#define GMAC_RPQ_RPQ_Msk (0xffffu << GMAC_RPQ_RPQ_Pos) /**< \brief (GMAC_RPQ) Received Pause Quantum */
/* -------- GMAC_TPQ : (GMAC Offset: 0x03C) Transmit Pause Quantum Register -------- */
#define GMAC_TPQ_TPQ_Pos 0
#define GMAC_TPQ_TPQ_Msk (0xffffu << GMAC_TPQ_TPQ_Pos) /**< \brief (GMAC_TPQ) Transmit Pause Quantum */
#define GMAC_TPQ_TPQ(value) ((GMAC_TPQ_TPQ_Msk & ((value) << GMAC_TPQ_TPQ_Pos)))
/* -------- GMAC_TPSF : (GMAC Offset: 0x040) TX Partial Store and Forward Register -------- */
#define GMAC_TPSF_TPB1ADR_Pos 0
#define GMAC_TPSF_TPB1ADR_Msk (0xfffu << GMAC_TPSF_TPB1ADR_Pos) /**< \brief (GMAC_TPSF) Transmit Partial Store and Forward Address */
#define GMAC_TPSF_TPB1ADR(value) ((GMAC_TPSF_TPB1ADR_Msk & ((value) << GMAC_TPSF_TPB1ADR_Pos)))
#define GMAC_TPSF_ENTXP (0x1u << 31) /**< \brief (GMAC_TPSF) Enable TX Partial Store and Forward Operation */
/* -------- GMAC_RPSF : (GMAC Offset: 0x044) RX Partial Store and Forward Register -------- */
#define GMAC_RPSF_RPB1ADR_Pos 0
#define GMAC_RPSF_RPB1ADR_Msk (0xfffu << GMAC_RPSF_RPB1ADR_Pos) /**< \brief (GMAC_RPSF) Receive Partial Store and Forward Address */
#define GMAC_RPSF_RPB1ADR(value) ((GMAC_RPSF_RPB1ADR_Msk & ((value) << GMAC_RPSF_RPB1ADR_Pos)))
#define GMAC_RPSF_ENRXP (0x1u << 31) /**< \brief (GMAC_RPSF) Enable RX Partial Store and Forward Operation */
/* -------- GMAC_HRB : (GMAC Offset: 0x080) Hash Register Bottom [31:0] -------- */
#define GMAC_HRB_ADDR_Pos 0
#define GMAC_HRB_ADDR_Msk (0xffffffffu << GMAC_HRB_ADDR_Pos) /**< \brief (GMAC_HRB) Hash Address */
#define GMAC_HRB_ADDR(value) ((GMAC_HRB_ADDR_Msk & ((value) << GMAC_HRB_ADDR_Pos)))
/* -------- GMAC_HRT : (GMAC Offset: 0x084) Hash Register Top [63:32] -------- */
#define GMAC_HRT_ADDR_Pos 0
#define GMAC_HRT_ADDR_Msk (0xffffffffu << GMAC_HRT_ADDR_Pos) /**< \brief (GMAC_HRT) Hash Address */
#define GMAC_HRT_ADDR(value) ((GMAC_HRT_ADDR_Msk & ((value) << GMAC_HRT_ADDR_Pos)))
/* -------- GMAC_SAB1 : (GMAC Offset: 0x088) Specific Address 1 Bottom [31:0] Register -------- */
#define GMAC_SAB1_ADDR_Pos 0
#define GMAC_SAB1_ADDR_Msk (0xffffffffu << GMAC_SAB1_ADDR_Pos) /**< \brief (GMAC_SAB1) Specific Address 1 */
#define GMAC_SAB1_ADDR(value) ((GMAC_SAB1_ADDR_Msk & ((value) << GMAC_SAB1_ADDR_Pos)))
/* -------- GMAC_SAT1 : (GMAC Offset: 0x08C) Specific Address 1 Top [47:32] Register -------- */
#define GMAC_SAT1_ADDR_Pos 0
#define GMAC_SAT1_ADDR_Msk (0xffffu << GMAC_SAT1_ADDR_Pos) /**< \brief (GMAC_SAT1) Specific Address 1 */
#define GMAC_SAT1_ADDR(value) ((GMAC_SAT1_ADDR_Msk & ((value) << GMAC_SAT1_ADDR_Pos)))
/* -------- GMAC_SAB2 : (GMAC Offset: 0x090) Specific Address 2 Bottom [31:0] Register -------- */
#define GMAC_SAB2_ADDR_Pos 0
#define GMAC_SAB2_ADDR_Msk (0xffffffffu << GMAC_SAB2_ADDR_Pos) /**< \brief (GMAC_SAB2) Specific Address 2 */
#define GMAC_SAB2_ADDR(value) ((GMAC_SAB2_ADDR_Msk & ((value) << GMAC_SAB2_ADDR_Pos)))
/* -------- GMAC_SAT2 : (GMAC Offset: 0x094) Specific Address 2 Top [47:32] Register -------- */
#define GMAC_SAT2_ADDR_Pos 0
#define GMAC_SAT2_ADDR_Msk (0xffffu << GMAC_SAT2_ADDR_Pos) /**< \brief (GMAC_SAT2) Specific Address 2 */
#define GMAC_SAT2_ADDR(value) ((GMAC_SAT2_ADDR_Msk & ((value) << GMAC_SAT2_ADDR_Pos)))
/* -------- GMAC_SAB3 : (GMAC Offset: 0x098) Specific Address 3 Bottom [31:0] Register -------- */
#define GMAC_SAB3_ADDR_Pos 0
#define GMAC_SAB3_ADDR_Msk (0xffffffffu << GMAC_SAB3_ADDR_Pos) /**< \brief (GMAC_SAB3) Specific Address 3 */
#define GMAC_SAB3_ADDR(value) ((GMAC_SAB3_ADDR_Msk & ((value) << GMAC_SAB3_ADDR_Pos)))
/* -------- GMAC_SAT3 : (GMAC Offset: 0x09C) Specific Address 3 Top [47:32] Register -------- */
#define GMAC_SAT3_ADDR_Pos 0
#define GMAC_SAT3_ADDR_Msk (0xffffu << GMAC_SAT3_ADDR_Pos) /**< \brief (GMAC_SAT3) Specific Address 3 */
#define GMAC_SAT3_ADDR(value) ((GMAC_SAT3_ADDR_Msk & ((value) << GMAC_SAT3_ADDR_Pos)))
/* -------- GMAC_SAB4 : (GMAC Offset: 0x0A0) Specific Address 4 Bottom [31:0] Register -------- */
#define GMAC_SAB4_ADDR_Pos 0
#define GMAC_SAB4_ADDR_Msk (0xffffffffu << GMAC_SAB4_ADDR_Pos) /**< \brief (GMAC_SAB4) Specific Address 4 */
#define GMAC_SAB4_ADDR(value) ((GMAC_SAB4_ADDR_Msk & ((value) << GMAC_SAB4_ADDR_Pos)))
/* -------- GMAC_SAT4 : (GMAC Offset: 0x0A4) Specific Address 4 Top [47:32] Register -------- */
#define GMAC_SAT4_ADDR_Pos 0
#define GMAC_SAT4_ADDR_Msk (0xffffu << GMAC_SAT4_ADDR_Pos) /**< \brief (GMAC_SAT4) Specific Address 4 */
#define GMAC_SAT4_ADDR(value) ((GMAC_SAT4_ADDR_Msk & ((value) << GMAC_SAT4_ADDR_Pos)))
/* -------- GMAC_TIDM[4] : (GMAC Offset: 0x0A8) Type ID Match 1 Register -------- */
#define GMAC_TIDM_TID_Pos 0
#define GMAC_TIDM_TID_Msk (0xffffu << GMAC_TIDM_TID_Pos) /**< \brief (GMAC_TIDM[4]) Type ID Match 1 */
#define GMAC_TIDM_TID(value) ((GMAC_TIDM_TID_Msk & ((value) << GMAC_TIDM_TID_Pos)))
/* -------- GMAC_WOL : (GMAC Offset: 0x0B8) Wake on LAN Register -------- */
#define GMAC_WOL_IP_Pos 0
#define GMAC_WOL_IP_Msk (0xffffu << GMAC_WOL_IP_Pos) /**< \brief (GMAC_WOL) ARP Request IP Address */
#define GMAC_WOL_IP(value) ((GMAC_WOL_IP_Msk & ((value) << GMAC_WOL_IP_Pos)))
#define GMAC_WOL_MAG (0x1u << 16) /**< \brief (GMAC_WOL) Magic Packet Event Enable */
#define GMAC_WOL_ARP (0x1u << 17) /**< \brief (GMAC_WOL) ARP Request IP Address */
#define GMAC_WOL_SA1 (0x1u << 18) /**< \brief (GMAC_WOL) Specific Address Register 1 Event Enable */
#define GMAC_WOL_MTI (0x1u << 19) /**< \brief (GMAC_WOL) Multicast Hash Event Enable */
/* -------- GMAC_IPGS : (GMAC Offset: 0x0BC) IPG Stretch Register -------- */
#define GMAC_IPGS_FL_Pos 0
#define GMAC_IPGS_FL_Msk (0xffffu << GMAC_IPGS_FL_Pos) /**< \brief (GMAC_IPGS) Frame Length */
#define GMAC_IPGS_FL(value) ((GMAC_IPGS_FL_Msk & ((value) << GMAC_IPGS_FL_Pos)))
/* -------- GMAC_SVLAN : (GMAC Offset: 0x0C0) Stacked VLAN Register -------- */
#define GMAC_SVLAN_VLAN_TYPE_Pos 0
#define GMAC_SVLAN_VLAN_TYPE_Msk (0xffffu << GMAC_SVLAN_VLAN_TYPE_Pos) /**< \brief (GMAC_SVLAN) User Defined VLAN_TYPE Field */
#define GMAC_SVLAN_VLAN_TYPE(value) ((GMAC_SVLAN_VLAN_TYPE_Msk & ((value) << GMAC_SVLAN_VLAN_TYPE_Pos)))
#define GMAC_SVLAN_ESVLAN (0x1u << 31) /**< \brief (GMAC_SVLAN) Enable Stacked VLAN Processing Mode */
/* -------- GMAC_TPFCP : (GMAC Offset: 0x0C4) Transmit PFC Pause Register -------- */
#define GMAC_TPFCP_PEV_Pos 0
#define GMAC_TPFCP_PEV_Msk (0xffu << GMAC_TPFCP_PEV_Pos) /**< \brief (GMAC_TPFCP) Priority Enable Vector */
#define GMAC_TPFCP_PEV(value) ((GMAC_TPFCP_PEV_Msk & ((value) << GMAC_TPFCP_PEV_Pos)))
#define GMAC_TPFCP_PQ_Pos 8
#define GMAC_TPFCP_PQ_Msk (0xffu << GMAC_TPFCP_PQ_Pos) /**< \brief (GMAC_TPFCP) Pause Quantum */
#define GMAC_TPFCP_PQ(value) ((GMAC_TPFCP_PQ_Msk & ((value) << GMAC_TPFCP_PQ_Pos)))
/* -------- GMAC_SAMB1 : (GMAC Offset: 0x0C8) Specific Address 1 Mask Bottom [31:0] Register -------- */
#define GMAC_SAMB1_ADDR_Pos 0
#define GMAC_SAMB1_ADDR_Msk (0xffffffffu << GMAC_SAMB1_ADDR_Pos) /**< \brief (GMAC_SAMB1) Specific Address 1 Mask */
#define GMAC_SAMB1_ADDR(value) ((GMAC_SAMB1_ADDR_Msk & ((value) << GMAC_SAMB1_ADDR_Pos)))
/* -------- GMAC_SAMT1 : (GMAC Offset: 0x0CC) Specific Address 1 Mask Top [47:32] Register -------- */
#define GMAC_SAMT1_ADDR_Pos 0
#define GMAC_SAMT1_ADDR_Msk (0xffffu << GMAC_SAMT1_ADDR_Pos) /**< \brief (GMAC_SAMT1) Specific Address 1 Mask */
#define GMAC_SAMT1_ADDR(value) ((GMAC_SAMT1_ADDR_Msk & ((value) << GMAC_SAMT1_ADDR_Pos)))
/* -------- GMAC_NSC : (GMAC Offset: 0x0DC) 1588 Timer Nanosecond Comparison Register -------- */
#define GMAC_NSC_NANOSEC_Pos 0
#define GMAC_NSC_NANOSEC_Msk (0x3fffffu << GMAC_NSC_NANOSEC_Pos) /**< \brief (GMAC_NSC) 1588 Timer Nanosecond Comparison Value */
#define GMAC_NSC_NANOSEC(value) ((GMAC_NSC_NANOSEC_Msk & ((value) << GMAC_NSC_NANOSEC_Pos)))
/* -------- GMAC_SCL : (GMAC Offset: 0x0E0) 1588 Timer Second Comparison [31:0] Register -------- */
#define GMAC_SCL_SEC_Pos 0
#define GMAC_SCL_SEC_Msk (0xffffffffu << GMAC_SCL_SEC_Pos) /**< \brief (GMAC_SCL) 1588 Timer Second Comparison Value */
#define GMAC_SCL_SEC(value) ((GMAC_SCL_SEC_Msk & ((value) << GMAC_SCL_SEC_Pos)))
/* -------- GMAC_SCH : (GMAC Offset: 0x0E4) 1588 Timer Second Comparison [47:32] Register -------- */
#define GMAC_SCH_SEC_Pos 0
#define GMAC_SCH_SEC_Msk (0xffffu << GMAC_SCH_SEC_Pos) /**< \brief (GMAC_SCH) 1588 Timer Second Comparison Value */
#define GMAC_SCH_SEC(value) ((GMAC_SCH_SEC_Msk & ((value) << GMAC_SCH_SEC_Pos)))
/* -------- GMAC_MID : (GMAC Offset: 0x0FC) Module ID Register -------- */
#define GMAC_MID_MREV_Pos 0
#define GMAC_MID_MREV_Msk (0xffffu << GMAC_MID_MREV_Pos) /**< \brief (GMAC_MID) Module Revision */
#define GMAC_MID_MID_Pos 16
#define GMAC_MID_MID_Msk (0xffffu << GMAC_MID_MID_Pos) /**< \brief (GMAC_MID) Module Identification Number */
/* -------- GMAC_OTLO : (GMAC Offset: 0x100) Octets Transmitted [31:0] Register -------- */
#define GMAC_OTLO_TXO_Pos 0
#define GMAC_OTLO_TXO_Msk (0xffffffffu << GMAC_OTLO_TXO_Pos) /**< \brief (GMAC_OTLO) Transmitted Octets */
/* -------- GMAC_OTHI : (GMAC Offset: 0x104) Octets Transmitted [47:32] Register -------- */
#define GMAC_OTHI_TXO_Pos 0
#define GMAC_OTHI_TXO_Msk (0xffffu << GMAC_OTHI_TXO_Pos) /**< \brief (GMAC_OTHI) Transmitted Octets */
/* -------- GMAC_FT : (GMAC Offset: 0x108) Frames Transmitted Register -------- */
#define GMAC_FT_FTX_Pos 0
#define GMAC_FT_FTX_Msk (0xffffffffu << GMAC_FT_FTX_Pos) /**< \brief (GMAC_FT) Frames Transmitted without Error */
/* -------- GMAC_BCFT : (GMAC Offset: 0x10C) Broadcast Frames Transmitted Register -------- */
#define GMAC_BCFT_BFTX_Pos 0
#define GMAC_BCFT_BFTX_Msk (0xffffffffu << GMAC_BCFT_BFTX_Pos) /**< \brief (GMAC_BCFT) Broadcast Frames Transmitted without Error */
/* -------- GMAC_MFT : (GMAC Offset: 0x110) Multicast Frames Transmitted Register -------- */
#define GMAC_MFT_MFTX_Pos 0
#define GMAC_MFT_MFTX_Msk (0xffffffffu << GMAC_MFT_MFTX_Pos) /**< \brief (GMAC_MFT) Multicast Frames Transmitted without Error */
/* -------- GMAC_PFT : (GMAC Offset: 0x114) Pause Frames Transmitted Register -------- */
#define GMAC_PFT_PFTX_Pos 0
#define GMAC_PFT_PFTX_Msk (0xffffu << GMAC_PFT_PFTX_Pos) /**< \brief (GMAC_PFT) Pause Frames Transmitted Register */
/* -------- GMAC_BFT64 : (GMAC Offset: 0x118) 64 Byte Frames Transmitted Register -------- */
#define GMAC_BFT64_NFTX_Pos 0
#define GMAC_BFT64_NFTX_Msk (0xffffffffu << GMAC_BFT64_NFTX_Pos) /**< \brief (GMAC_BFT64) 64 Byte Frames Transmitted without Error */
/* -------- GMAC_TBFT127 : (GMAC Offset: 0x11C) 65 to 127 Byte Frames Transmitted Register -------- */
#define GMAC_TBFT127_NFTX_Pos 0
#define GMAC_TBFT127_NFTX_Msk (0xffffffffu << GMAC_TBFT127_NFTX_Pos) /**< \brief (GMAC_TBFT127) 65 to 127 Byte Frames Transmitted without Error */
/* -------- GMAC_TBFT255 : (GMAC Offset: 0x120) 128 to 255 Byte Frames Transmitted Register -------- */
#define GMAC_TBFT255_NFTX_Pos 0
#define GMAC_TBFT255_NFTX_Msk (0xffffffffu << GMAC_TBFT255_NFTX_Pos) /**< \brief (GMAC_TBFT255) 128 to 255 Byte Frames Transmitted without Error */
/* -------- GMAC_TBFT511 : (GMAC Offset: 0x124) 256 to 511 Byte Frames Transmitted Register -------- */
#define GMAC_TBFT511_NFTX_Pos 0
#define GMAC_TBFT511_NFTX_Msk (0xffffffffu << GMAC_TBFT511_NFTX_Pos) /**< \brief (GMAC_TBFT511) 256 to 511 Byte Frames Transmitted without Error */
/* -------- GMAC_TBFT1023 : (GMAC Offset: 0x128) 512 to 1023 Byte Frames Transmitted Register -------- */
#define GMAC_TBFT1023_NFTX_Pos 0
#define GMAC_TBFT1023_NFTX_Msk (0xffffffffu << GMAC_TBFT1023_NFTX_Pos) /**< \brief (GMAC_TBFT1023) 512 to 1023 Byte Frames Transmitted without Error */
/* -------- GMAC_TBFT1518 : (GMAC Offset: 0x12C) 1024 to 1518 Byte Frames Transmitted Register -------- */
#define GMAC_TBFT1518_NFTX_Pos 0
#define GMAC_TBFT1518_NFTX_Msk (0xffffffffu << GMAC_TBFT1518_NFTX_Pos) /**< \brief (GMAC_TBFT1518) 1024 to 1518 Byte Frames Transmitted without Error */
/* -------- GMAC_GTBFT1518 : (GMAC Offset: 0x130) Greater Than 1518 Byte Frames Transmitted Register -------- */
#define GMAC_GTBFT1518_NFTX_Pos 0
#define GMAC_GTBFT1518_NFTX_Msk (0xffffffffu << GMAC_GTBFT1518_NFTX_Pos) /**< \brief (GMAC_GTBFT1518) Greater than 1518 Byte Frames Transmitted without Error */
/* -------- GMAC_TUR : (GMAC Offset: 0x134) Transmit Underruns Register -------- */
#define GMAC_TUR_TXUNR_Pos 0
#define GMAC_TUR_TXUNR_Msk (0x3ffu << GMAC_TUR_TXUNR_Pos) /**< \brief (GMAC_TUR) Transmit Underruns */
/* -------- GMAC_SCF : (GMAC Offset: 0x138) Single Collision Frames Register -------- */
#define GMAC_SCF_SCOL_Pos 0
#define GMAC_SCF_SCOL_Msk (0x3ffffu << GMAC_SCF_SCOL_Pos) /**< \brief (GMAC_SCF) Single Collision */
/* -------- GMAC_MCF : (GMAC Offset: 0x13C) Multiple Collision Frames Register -------- */
#define GMAC_MCF_MCOL_Pos 0
#define GMAC_MCF_MCOL_Msk (0x3ffffu << GMAC_MCF_MCOL_Pos) /**< \brief (GMAC_MCF) Multiple Collision */
/* -------- GMAC_EC : (GMAC Offset: 0x140) Excessive Collisions Register -------- */
#define GMAC_EC_XCOL_Pos 0
#define GMAC_EC_XCOL_Msk (0x3ffu << GMAC_EC_XCOL_Pos) /**< \brief (GMAC_EC) Excessive Collisions */
/* -------- GMAC_LC : (GMAC Offset: 0x144) Late Collisions Register -------- */
#define GMAC_LC_LCOL_Pos 0
#define GMAC_LC_LCOL_Msk (0x3ffu << GMAC_LC_LCOL_Pos) /**< \brief (GMAC_LC) Late Collisions */
/* -------- GMAC_DTF : (GMAC Offset: 0x148) Deferred Transmission Frames Register -------- */
#define GMAC_DTF_DEFT_Pos 0
#define GMAC_DTF_DEFT_Msk (0x3ffffu << GMAC_DTF_DEFT_Pos) /**< \brief (GMAC_DTF) Deferred Transmission */
/* -------- GMAC_CSE : (GMAC Offset: 0x14C) Carrier Sense Errors Register -------- */
#define GMAC_CSE_CSR_Pos 0
#define GMAC_CSE_CSR_Msk (0x3ffu << GMAC_CSE_CSR_Pos) /**< \brief (GMAC_CSE) Carrier Sense Error */
/* -------- GMAC_ORLO : (GMAC Offset: 0x150) Octets Received [31:0] Received -------- */
#define GMAC_ORLO_RXO_Pos 0
#define GMAC_ORLO_RXO_Msk (0xffffffffu << GMAC_ORLO_RXO_Pos) /**< \brief (GMAC_ORLO) Received Octets */
/* -------- GMAC_ORHI : (GMAC Offset: 0x154) Octets Received [47:32] Received -------- */
#define GMAC_ORHI_RXO_Pos 0
#define GMAC_ORHI_RXO_Msk (0xffffu << GMAC_ORHI_RXO_Pos) /**< \brief (GMAC_ORHI) Received Octets */
/* -------- GMAC_FR : (GMAC Offset: 0x158) Frames Received Register -------- */
#define GMAC_FR_FRX_Pos 0
#define GMAC_FR_FRX_Msk (0xffffffffu << GMAC_FR_FRX_Pos) /**< \brief (GMAC_FR) Frames Received without Error */
/* -------- GMAC_BCFR : (GMAC Offset: 0x15C) Broadcast Frames Received Register -------- */
#define GMAC_BCFR_BFRX_Pos 0
#define GMAC_BCFR_BFRX_Msk (0xffffffffu << GMAC_BCFR_BFRX_Pos) /**< \brief (GMAC_BCFR) Broadcast Frames Received without Error */
/* -------- GMAC_MFR : (GMAC Offset: 0x160) Multicast Frames Received Register -------- */
#define GMAC_MFR_MFRX_Pos 0
#define GMAC_MFR_MFRX_Msk (0xffffffffu << GMAC_MFR_MFRX_Pos) /**< \brief (GMAC_MFR) Multicast Frames Received without Error */
/* -------- GMAC_PFR : (GMAC Offset: 0x164) Pause Frames Received Register -------- */
#define GMAC_PFR_PFRX_Pos 0
#define GMAC_PFR_PFRX_Msk (0xffffu << GMAC_PFR_PFRX_Pos) /**< \brief (GMAC_PFR) Pause Frames Received Register */
/* -------- GMAC_BFR64 : (GMAC Offset: 0x168) 64 Byte Frames Received Register -------- */
#define GMAC_BFR64_NFRX_Pos 0
#define GMAC_BFR64_NFRX_Msk (0xffffffffu << GMAC_BFR64_NFRX_Pos) /**< \brief (GMAC_BFR64) 64 Byte Frames Received without Error */
/* -------- GMAC_TBFR127 : (GMAC Offset: 0x16C) 65 to 127 Byte Frames Received Register -------- */
#define GMAC_TBFR127_NFRX_Pos 0
#define GMAC_TBFR127_NFRX_Msk (0xffffffffu << GMAC_TBFR127_NFRX_Pos) /**< \brief (GMAC_TBFR127) 65 to 127 Byte Frames Received without Error */
/* -------- GMAC_TBFR255 : (GMAC Offset: 0x170) 128 to 255 Byte Frames Received Register -------- */
#define GMAC_TBFR255_NFRX_Pos 0
#define GMAC_TBFR255_NFRX_Msk (0xffffffffu << GMAC_TBFR255_NFRX_Pos) /**< \brief (GMAC_TBFR255) 128 to 255 Byte Frames Received without Error */
/* -------- GMAC_TBFR511 : (GMAC Offset: 0x174) 256 to 511Byte Frames Received Register -------- */
#define GMAC_TBFR511_NFRX_Pos 0
#define GMAC_TBFR511_NFRX_Msk (0xffffffffu << GMAC_TBFR511_NFRX_Pos) /**< \brief (GMAC_TBFR511) 256 to 511 Byte Frames Received without Error */
/* -------- GMAC_TBFR1023 : (GMAC Offset: 0x178) 512 to 1023 Byte Frames Received Register -------- */
#define GMAC_TBFR1023_NFRX_Pos 0
#define GMAC_TBFR1023_NFRX_Msk (0xffffffffu << GMAC_TBFR1023_NFRX_Pos) /**< \brief (GMAC_TBFR1023) 512 to 1023 Byte Frames Received without Error */
/* -------- GMAC_TBFR1518 : (GMAC Offset: 0x17C) 1024 to 1518 Byte Frames Received Register -------- */
#define GMAC_TBFR1518_NFRX_Pos 0
#define GMAC_TBFR1518_NFRX_Msk (0xffffffffu << GMAC_TBFR1518_NFRX_Pos) /**< \brief (GMAC_TBFR1518) 1024 to 1518 Byte Frames Received without Error */
/* -------- GMAC_TMXBFR : (GMAC Offset: 0x180) 1519 to Maximum Byte Frames Received Register -------- */
#define GMAC_TMXBFR_NFRX_Pos 0
#define GMAC_TMXBFR_NFRX_Msk (0xffffffffu << GMAC_TMXBFR_NFRX_Pos) /**< \brief (GMAC_TMXBFR) 1519 to Maximum Byte Frames Received without Error */
/* -------- GMAC_UFR : (GMAC Offset: 0x184) Undersize Frames Received Register -------- */
#define GMAC_UFR_UFRX_Pos 0
#define GMAC_UFR_UFRX_Msk (0x3ffu << GMAC_UFR_UFRX_Pos) /**< \brief (GMAC_UFR) Undersize Frames Received */
/* -------- GMAC_OFR : (GMAC Offset: 0x188) Oversize Frames Received Register -------- */
#define GMAC_OFR_OFRX_Pos 0
#define GMAC_OFR_OFRX_Msk (0x3ffu << GMAC_OFR_OFRX_Pos) /**< \brief (GMAC_OFR) Oversized Frames Received */
/* -------- GMAC_JR : (GMAC Offset: 0x18C) Jabbers Received Register -------- */
#define GMAC_JR_JRX_Pos 0
#define GMAC_JR_JRX_Msk (0x3ffu << GMAC_JR_JRX_Pos) /**< \brief (GMAC_JR) Jabbers Received */
/* -------- GMAC_FCSE : (GMAC Offset: 0x190) Frame Check Sequence Errors Register -------- */
#define GMAC_FCSE_FCKR_Pos 0
#define GMAC_FCSE_FCKR_Msk (0x3ffu << GMAC_FCSE_FCKR_Pos) /**< \brief (GMAC_FCSE) Frame Check Sequence Errors */
/* -------- GMAC_LFFE : (GMAC Offset: 0x194) Length Field Frame Errors Register -------- */
#define GMAC_LFFE_LFER_Pos 0
#define GMAC_LFFE_LFER_Msk (0x3ffu << GMAC_LFFE_LFER_Pos) /**< \brief (GMAC_LFFE) Length Field Frame Errors */
/* -------- GMAC_RSE : (GMAC Offset: 0x198) Receive Symbol Errors Register -------- */
#define GMAC_RSE_RXSE_Pos 0
#define GMAC_RSE_RXSE_Msk (0x3ffu << GMAC_RSE_RXSE_Pos) /**< \brief (GMAC_RSE) Receive Symbol Errors */
/* -------- GMAC_AE : (GMAC Offset: 0x19C) Alignment Errors Register -------- */
#define GMAC_AE_AER_Pos 0
#define GMAC_AE_AER_Msk (0x3ffu << GMAC_AE_AER_Pos) /**< \brief (GMAC_AE) Alignment Errors */
/* -------- GMAC_RRE : (GMAC Offset: 0x1A0) Receive Resource Errors Register -------- */
#define GMAC_RRE_RXRER_Pos 0
#define GMAC_RRE_RXRER_Msk (0x3ffffu << GMAC_RRE_RXRER_Pos) /**< \brief (GMAC_RRE) Receive Resource Errors */
/* -------- GMAC_ROE : (GMAC Offset: 0x1A4) Receive Overrun Register -------- */
#define GMAC_ROE_RXOVR_Pos 0
#define GMAC_ROE_RXOVR_Msk (0x3ffu << GMAC_ROE_RXOVR_Pos) /**< \brief (GMAC_ROE) Receive Overruns */
/* -------- GMAC_IHCE : (GMAC Offset: 0x1A8) IP Header Checksum Errors Register -------- */
#define GMAC_IHCE_HCKER_Pos 0
#define GMAC_IHCE_HCKER_Msk (0xffu << GMAC_IHCE_HCKER_Pos) /**< \brief (GMAC_IHCE) IP Header Checksum Errors */
/* -------- GMAC_TCE : (GMAC Offset: 0x1AC) TCP Checksum Errors Register -------- */
#define GMAC_TCE_TCKER_Pos 0
#define GMAC_TCE_TCKER_Msk (0xffu << GMAC_TCE_TCKER_Pos) /**< \brief (GMAC_TCE) TCP Checksum Errors */
/* -------- GMAC_UCE : (GMAC Offset: 0x1B0) UDP Checksum Errors Register -------- */
#define GMAC_UCE_UCKER_Pos 0
#define GMAC_UCE_UCKER_Msk (0xffu << GMAC_UCE_UCKER_Pos) /**< \brief (GMAC_UCE) UDP Checksum Errors */
/* -------- GMAC_TISUBN : (GMAC Offset: 0x1BC) 1588 Timer Increment Sub-nanoseconds Register -------- */
#define GMAC_TISUBN_LSBTIR_Pos 0
#define GMAC_TISUBN_LSBTIR_Msk (0xffffu << GMAC_TISUBN_LSBTIR_Pos) /**< \brief (GMAC_TISUBN) Lower Significant Bits of Timer Increment Register */
#define GMAC_TISUBN_LSBTIR(value) ((GMAC_TISUBN_LSBTIR_Msk & ((value) << GMAC_TISUBN_LSBTIR_Pos)))
/* -------- GMAC_TSH : (GMAC Offset: 0x1C0) 1588 Timer Seconds [47:32] Register -------- */
#define GMAC_TSH_TCS_Pos 0
#define GMAC_TSH_TCS_Msk (0xffffu << GMAC_TSH_TCS_Pos) /**< \brief (GMAC_TSH) Timer Count in Seconds */
#define GMAC_TSH_TCS(value) ((GMAC_TSH_TCS_Msk & ((value) << GMAC_TSH_TCS_Pos)))
/* -------- GMAC_TSSSH : (GMAC Offset: 0x1C4) 1588 Timer Sync Strobe Seconds [47:32] Register -------- */
#define GMAC_TSSSH_VTS_Pos 0
#define GMAC_TSSSH_VTS_Msk (0xffffffffu << GMAC_TSSSH_VTS_Pos) /**< \brief (GMAC_TSSSH) Value of Timer Seconds Register Capture */
#define GMAC_TSSSH_VTS(value) ((GMAC_TSSSH_VTS_Msk & ((value) << GMAC_TSSSH_VTS_Pos)))
/* -------- GMAC_TSSSL : (GMAC Offset: 0x1C8) 1588 Timer Sync Strobe Seconds [31:0] Register -------- */
#define GMAC_TSSSL_VTS_Pos 0
#define GMAC_TSSSL_VTS_Msk (0xffffffffu << GMAC_TSSSL_VTS_Pos) /**< \brief (GMAC_TSSSL) Value of Timer Seconds Register Capture */
#define GMAC_TSSSL_VTS(value) ((GMAC_TSSSL_VTS_Msk & ((value) << GMAC_TSSSL_VTS_Pos)))
/* -------- GMAC_TSSN : (GMAC Offset: 0x1CC) 1588 Timer Sync Strobe Nanoseconds Register -------- */
#define GMAC_TSSN_VTN_Pos 0
#define GMAC_TSSN_VTN_Msk (0x3fffffffu << GMAC_TSSN_VTN_Pos) /**< \brief (GMAC_TSSN) Value Timer Nanoseconds Register Capture */
#define GMAC_TSSN_VTN(value) ((GMAC_TSSN_VTN_Msk & ((value) << GMAC_TSSN_VTN_Pos)))
/* -------- GMAC_TSL : (GMAC Offset: 0x1D0) 1588 Timer Seconds [31:0] Register -------- */
#define GMAC_TSL_TCS_Pos 0
#define GMAC_TSL_TCS_Msk (0xffffffffu << GMAC_TSL_TCS_Pos) /**< \brief (GMAC_TSL) Timer Count in Seconds */
#define GMAC_TSL_TCS(value) ((GMAC_TSL_TCS_Msk & ((value) << GMAC_TSL_TCS_Pos)))
/* -------- GMAC_TN : (GMAC Offset: 0x1D4) 1588 Timer Nanoseconds Register -------- */
#define GMAC_TN_TNS_Pos 0
#define GMAC_TN_TNS_Msk (0x3fffffffu << GMAC_TN_TNS_Pos) /**< \brief (GMAC_TN) Timer Count in Nanoseconds */
#define GMAC_TN_TNS(value) ((GMAC_TN_TNS_Msk & ((value) << GMAC_TN_TNS_Pos)))
/* -------- GMAC_TA : (GMAC Offset: 0x1D8) 1588 Timer Adjust Register -------- */
#define GMAC_TA_ITDT_Pos 0
#define GMAC_TA_ITDT_Msk (0x3fffffffu << GMAC_TA_ITDT_Pos) /**< \brief (GMAC_TA) Increment/Decrement */
#define GMAC_TA_ITDT(value) ((GMAC_TA_ITDT_Msk & ((value) << GMAC_TA_ITDT_Pos)))
#define GMAC_TA_ADJ (0x1u << 31) /**< \brief (GMAC_TA) Adjust 1588 Timer */
/* -------- GMAC_TI : (GMAC Offset: 0x1DC) 1588 Timer Increment Register -------- */
#define GMAC_TI_CNS_Pos 0
#define GMAC_TI_CNS_Msk (0xffu << GMAC_TI_CNS_Pos) /**< \brief (GMAC_TI) Count Nanoseconds */
#define GMAC_TI_CNS(value) ((GMAC_TI_CNS_Msk & ((value) << GMAC_TI_CNS_Pos)))
#define GMAC_TI_ACNS_Pos 8
#define GMAC_TI_ACNS_Msk (0xffu << GMAC_TI_ACNS_Pos) /**< \brief (GMAC_TI) Alternative Count Nanoseconds */
#define GMAC_TI_ACNS(value) ((GMAC_TI_ACNS_Msk & ((value) << GMAC_TI_ACNS_Pos)))
#define GMAC_TI_NIT_Pos 16
#define GMAC_TI_NIT_Msk (0xffu << GMAC_TI_NIT_Pos) /**< \brief (GMAC_TI) Number of Increments */
#define GMAC_TI_NIT(value) ((GMAC_TI_NIT_Msk & ((value) << GMAC_TI_NIT_Pos)))
/* -------- GMAC_EFTS : (GMAC Offset: 0x1E0) PTP Event Frame Transmitted Seconds -------- */
#define GMAC_EFTS_RUD_Pos 0
#define GMAC_EFTS_RUD_Msk (0xffffffffu << GMAC_EFTS_RUD_Pos) /**< \brief (GMAC_EFTS) Register Update */
/* -------- GMAC_EFTN : (GMAC Offset: 0x1E4) PTP Event Frame Transmitted Nanoseconds -------- */
#define GMAC_EFTN_RUD_Pos 0
#define GMAC_EFTN_RUD_Msk (0x3fffffffu << GMAC_EFTN_RUD_Pos) /**< \brief (GMAC_EFTN) Register Update */
/* -------- GMAC_EFRS : (GMAC Offset: 0x1E8) PTP Event Frame Received Seconds -------- */
#define GMAC_EFRS_RUD_Pos 0
#define GMAC_EFRS_RUD_Msk (0xffffffffu << GMAC_EFRS_RUD_Pos) /**< \brief (GMAC_EFRS) Register Update */
/* -------- GMAC_EFRN : (GMAC Offset: 0x1EC) PTP Event Frame Received Nanoseconds -------- */
#define GMAC_EFRN_RUD_Pos 0
#define GMAC_EFRN_RUD_Msk (0x3fffffffu << GMAC_EFRN_RUD_Pos) /**< \brief (GMAC_EFRN) Register Update */
/* -------- GMAC_PEFTS : (GMAC Offset: 0x1F0) PTP Peer Event Frame Transmitted Seconds -------- */
#define GMAC_PEFTS_RUD_Pos 0
#define GMAC_PEFTS_RUD_Msk (0xffffffffu << GMAC_PEFTS_RUD_Pos) /**< \brief (GMAC_PEFTS) Register Update */
/* -------- GMAC_PEFTN : (GMAC Offset: 0x1F4) PTP Peer Event Frame Transmitted Nanoseconds -------- */
#define GMAC_PEFTN_RUD_Pos 0
#define GMAC_PEFTN_RUD_Msk (0x3fffffffu << GMAC_PEFTN_RUD_Pos) /**< \brief (GMAC_PEFTN) Register Update */
/* -------- GMAC_PEFRS : (GMAC Offset: 0x1F8) PTP Peer Event Frame Received Seconds -------- */
#define GMAC_PEFRS_RUD_Pos 0
#define GMAC_PEFRS_RUD_Msk (0xffffffffu << GMAC_PEFRS_RUD_Pos) /**< \brief (GMAC_PEFRS) Register Update */
/* -------- GMAC_PEFRN : (GMAC Offset: 0x1FC) PTP Peer Event Frame Received Nanoseconds -------- */
#define GMAC_PEFRN_RUD_Pos 0
#define GMAC_PEFRN_RUD_Msk (0x3fffffffu << GMAC_PEFRN_RUD_Pos) /**< \brief (GMAC_PEFRN) Register Update */
/* -------- GMAC_ISRPQ[7] : (GMAC Offset: 0x400) Interrupt Status Register Priority Queue -------- */
#define GMAC_ISRPQ_RCOMP (0x1u << 1) /**< \brief (GMAC_ISRPQ[7]) Receive Complete */
#define GMAC_ISRPQ_RXUBR (0x1u << 2) /**< \brief (GMAC_ISRPQ[7]) RX Used Bit Read */
#define GMAC_ISRPQ_RLEX (0x1u << 5) /**< \brief (GMAC_ISRPQ[7]) Retry Limit Exceeded or Late Collision */
#define GMAC_ISRPQ_TFC (0x1u << 6) /**< \brief (GMAC_ISRPQ[7]) Transmit Frame Corruption Due to AHB Error */
#define GMAC_ISRPQ_TCOMP (0x1u << 7) /**< \brief (GMAC_ISRPQ[7]) Transmit Complete */
#define GMAC_ISRPQ_ROVR (0x1u << 10) /**< \brief (GMAC_ISRPQ[7]) Receive Overrun */
#define GMAC_ISRPQ_HRESP (0x1u << 11) /**< \brief (GMAC_ISRPQ[7]) HRESP Not OK */
/* -------- GMAC_TBQBAPQ[7] : (GMAC Offset: 0x440) Transmit Buffer Queue Base Address Priority Queue -------- */
#define GMAC_TBQBAPQ_TXBQBA_Pos 2
#define GMAC_TBQBAPQ_TXBQBA_Msk (0x3fu << GMAC_TBQBAPQ_TXBQBA_Pos) /**< \brief (GMAC_TBQBAPQ[7]) Transmit Buffer Queue Base Address */
#define GMAC_TBQBAPQ_TXBQBA(value) ((GMAC_TBQBAPQ_TXBQBA_Msk & ((value) << GMAC_TBQBAPQ_TXBQBA_Pos)))
/* -------- GMAC_RBQBAPQ[7] : (GMAC Offset: 0x480) Receive Buffer Queue Base Address Priority Queue -------- */
#define GMAC_RBQBAPQ_RXBQBA_Pos 2
#define GMAC_RBQBAPQ_RXBQBA_Msk (0x3fu << GMAC_RBQBAPQ_RXBQBA_Pos) /**< \brief (GMAC_RBQBAPQ[7]) Receive Buffer Queue Base Address */
#define GMAC_RBQBAPQ_RXBQBA(value) ((GMAC_RBQBAPQ_RXBQBA_Msk & ((value) << GMAC_RBQBAPQ_RXBQBA_Pos)))
/* -------- GMAC_RBSRPQ[7] : (GMAC Offset: 0x4A0) Receive Buffer Size Register Priority Queue -------- */
#define GMAC_RBSRPQ_RBS_Pos 0
#define GMAC_RBSRPQ_RBS_Msk (0xffffu << GMAC_RBSRPQ_RBS_Pos) /**< \brief (GMAC_RBSRPQ[7]) Receive Buffer Size */
#define GMAC_RBSRPQ_RBS(value) ((GMAC_RBSRPQ_RBS_Msk & ((value) << GMAC_RBSRPQ_RBS_Pos)))
/* -------- GMAC_ST1RPQ[16] : (GMAC Offset: 0x500) Screening Type 1 Register Priority Queue -------- */
#define GMAC_ST1RPQ_QNB_Pos 0
#define GMAC_ST1RPQ_QNB_Msk (0xfu << GMAC_ST1RPQ_QNB_Pos) /**< \brief (GMAC_ST1RPQ[16]) Queue Number (0->7) */
#define GMAC_ST1RPQ_QNB(value) ((GMAC_ST1RPQ_QNB_Msk & ((value) << GMAC_ST1RPQ_QNB_Pos)))
#define GMAC_ST1RPQ_DSTCM_Pos 4
#define GMAC_ST1RPQ_DSTCM_Msk (0xffu << GMAC_ST1RPQ_DSTCM_Pos) /**< \brief (GMAC_ST1RPQ[16]) Differentiated Services or Traffic Class Match */
#define GMAC_ST1RPQ_DSTCM(value) ((GMAC_ST1RPQ_DSTCM_Msk & ((value) << GMAC_ST1RPQ_DSTCM_Pos)))
#define GMAC_ST1RPQ_UDPM_Pos 12
#define GMAC_ST1RPQ_UDPM_Msk (0xffffu << GMAC_ST1RPQ_UDPM_Pos) /**< \brief (GMAC_ST1RPQ[16]) UDP Port Match */
#define GMAC_ST1RPQ_UDPM(value) ((GMAC_ST1RPQ_UDPM_Msk & ((value) << GMAC_ST1RPQ_UDPM_Pos)))
#define GMAC_ST1RPQ_DSTCE (0x1u << 28) /**< \brief (GMAC_ST1RPQ[16]) Differentiated Services or Traffic Class Match Enable */
#define GMAC_ST1RPQ_UDPE (0x1u << 29) /**< \brief (GMAC_ST1RPQ[16]) UDP Port Match Enable */
/* -------- GMAC_ST2RPQ[16] : (GMAC Offset: 0x540) Screening Type 2 Register Priority Queue -------- */
#define GMAC_ST2RPQ_QNB_Pos 0
#define GMAC_ST2RPQ_QNB_Msk (0xfu << GMAC_ST2RPQ_QNB_Pos) /**< \brief (GMAC_ST2RPQ[16]) Queue Number (0->7) */
#define GMAC_ST2RPQ_QNB(value) ((GMAC_ST2RPQ_QNB_Msk & ((value) << GMAC_ST2RPQ_QNB_Pos)))
#define GMAC_ST2RPQ_VLANP_Pos 4
#define GMAC_ST2RPQ_VLANP_Msk (0xfu << GMAC_ST2RPQ_VLANP_Pos) /**< \brief (GMAC_ST2RPQ[16]) VLAN Priority */
#define GMAC_ST2RPQ_VLANP(value) ((GMAC_ST2RPQ_VLANP_Msk & ((value) << GMAC_ST2RPQ_VLANP_Pos)))
#define GMAC_ST2RPQ_VLANE (0x1u << 8) /**< \brief (GMAC_ST2RPQ[16]) VLAN Enable */
/* -------- GMAC_IERPQ[7] : (GMAC Offset: 0x600) Interrupt Enable Register Priority Queue -------- */
#define GMAC_IERPQ_RCOMP (0x1u << 1) /**< \brief (GMAC_IERPQ[7]) Receive Complete */
#define GMAC_IERPQ_RXUBR (0x1u << 2) /**< \brief (GMAC_IERPQ[7]) RX Used Bit Read */
#define GMAC_IERPQ_RLEX (0x1u << 5) /**< \brief (GMAC_IERPQ[7]) Retry Limit Exceeded or Late Collision */
#define GMAC_IERPQ_TFC (0x1u << 6) /**< \brief (GMAC_IERPQ[7]) Transmit Frame Corruption Due to AHB Error */
#define GMAC_IERPQ_TCOMP (0x1u << 7) /**< \brief (GMAC_IERPQ[7]) Transmit Complete */
#define GMAC_IERPQ_ROVR (0x1u << 10) /**< \brief (GMAC_IERPQ[7]) Receive Overrun */
#define GMAC_IERPQ_HRESP (0x1u << 11) /**< \brief (GMAC_IERPQ[7]) HRESP Not OK */
/* -------- GMAC_IDRPQ[7] : (GMAC Offset: 0x620) Interrupt Disable Register Priority Queue -------- */
#define GMAC_IDRPQ_RCOMP (0x1u << 1) /**< \brief (GMAC_IDRPQ[7]) Receive Complete */
#define GMAC_IDRPQ_RXUBR (0x1u << 2) /**< \brief (GMAC_IDRPQ[7]) RX Used Bit Read */
#define GMAC_IDRPQ_RLEX (0x1u << 5) /**< \brief (GMAC_IDRPQ[7]) Retry Limit Exceeded or Late Collision */
#define GMAC_IDRPQ_TFC (0x1u << 6) /**< \brief (GMAC_IDRPQ[7]) Transmit Frame Corruption Due to AHB Error */
#define GMAC_IDRPQ_TCOMP (0x1u << 7) /**< \brief (GMAC_IDRPQ[7]) Transmit Complete */
#define GMAC_IDRPQ_ROVR (0x1u << 10) /**< \brief (GMAC_IDRPQ[7]) Receive Overrun */
#define GMAC_IDRPQ_HRESP (0x1u << 11) /**< \brief (GMAC_IDRPQ[7]) HRESP Not OK */
/* -------- GMAC_IMRPQ[7] : (GMAC Offset: 0x640) Interrupt Mask Register Priority Queue -------- */
#define GMAC_IMRPQ_RCOMP (0x1u << 1) /**< \brief (GMAC_IMRPQ[7]) Receive Complete */
#define GMAC_IMRPQ_RXUBR (0x1u << 2) /**< \brief (GMAC_IMRPQ[7]) RX Used Bit Read */
#define GMAC_IMRPQ_RLEX (0x1u << 5) /**< \brief (GMAC_IMRPQ[7]) Retry Limit Exceeded or Late Collision */
#define GMAC_IMRPQ_AHB (0x1u << 6) /**< \brief (GMAC_IMRPQ[7]) AHB Error */
#define GMAC_IMRPQ_TCOMP (0x1u << 7) /**< \brief (GMAC_IMRPQ[7]) Transmit Complete */
#define GMAC_IMRPQ_ROVR (0x1u << 10) /**< \brief (GMAC_IMRPQ[7]) Receive Overrun */
#define GMAC_IMRPQ_HRESP (0x1u << 11) /**< \brief (GMAC_IMRPQ[7]) HRESP Not OK */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR Inter-IC Sound Controller */
/* ============================================================================= */
/** \addtogroup SAMA5D2_I2SC Inter-IC Sound Controller */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief I2sc hardware registers */
typedef struct {
  __O  uint32_t I2SC_CR;      /**< \brief (I2sc Offset: 0x00) Control Register */
  __IO uint32_t I2SC_MR;      /**< \brief (I2sc Offset: 0x04) Mode Register */
  __I  uint32_t I2SC_SR;      /**< \brief (I2sc Offset: 0x08) Status Register */
  __O  uint32_t I2SC_SCR;     /**< \brief (I2sc Offset: 0x0C) Status Clear Register */
  __O  uint32_t I2SC_SSR;     /**< \brief (I2sc Offset: 0x10) Status Set Register */
  __O  uint32_t I2SC_IER;     /**< \brief (I2sc Offset: 0x14) Interrupt Enable Register */
  __O  uint32_t I2SC_IDR;     /**< \brief (I2sc Offset: 0x18) Interrupt Disable Register */
  __I  uint32_t I2SC_IMR;     /**< \brief (I2sc Offset: 0x1C) Interrupt Mask Register */
  __I  uint32_t I2SC_RHR;     /**< \brief (I2sc Offset: 0x20) Receiver Holding Register */
  __O  uint32_t I2SC_THR;     /**< \brief (I2sc Offset: 0x24) Transmitter Holding Register */
  __I  uint32_t I2SC_VERSION; /**< \brief (I2sc Offset: 0x28) Version Register */
} I2sc;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- I2SC_CR : (I2SC Offset: 0x00) Control Register -------- */
#define I2SC_CR_RXEN (0x1u << 0) /**< \brief (I2SC_CR) Receiver Enable */
#define I2SC_CR_RXDIS (0x1u << 1) /**< \brief (I2SC_CR) Receiver Disable */
#define I2SC_CR_CKEN (0x1u << 2) /**< \brief (I2SC_CR) Clocks Enable */
#define I2SC_CR_CKDIS (0x1u << 3) /**< \brief (I2SC_CR) Clocks Disable */
#define I2SC_CR_TXEN (0x1u << 4) /**< \brief (I2SC_CR) Transmitter Enable */
#define I2SC_CR_TXDIS (0x1u << 5) /**< \brief (I2SC_CR) Transmitter Disable */
#define I2SC_CR_SWRST (0x1u << 7) /**< \brief (I2SC_CR) Software Reset */
/* -------- I2SC_MR : (I2SC Offset: 0x04) Mode Register -------- */
#define I2SC_MR_MODE (0x1u << 0) /**< \brief (I2SC_MR) Inter-IC Sound Controller Mode */
#define   I2SC_MR_MODE_SLAVE (0x0u << 0) /**< \brief (I2SC_MR) I2SCK and i2SWS pin inputs used as bit clock and word select/frame synchronization. */
#define   I2SC_MR_MODE_MASTER (0x1u << 0) /**< \brief (I2SC_MR) Bit clock and word select/frame synchronization generated by I2SC from MCK and output to I2SCK and I2SWS pins. MCK is output as master clock on I2SMCK if IMCKMODE bit of I2SC_MR is set. */
#define I2SC_MR_DATALENGTH_Pos 2
#define I2SC_MR_DATALENGTH_Msk (0x7u << I2SC_MR_DATALENGTH_Pos) /**< \brief (I2SC_MR) Data Word Length */
#define   I2SC_MR_DATALENGTH_32_BITS (0x0u << 2) /**< \brief (I2SC_MR) Data length is set to 32 bits */
#define   I2SC_MR_DATALENGTH_24_BITS (0x1u << 2) /**< \brief (I2SC_MR) Data length is set to 24 bits */
#define   I2SC_MR_DATALENGTH_20_BITS (0x2u << 2) /**< \brief (I2SC_MR) Data length is set to 20 bits */
#define   I2SC_MR_DATALENGTH_18_BITS (0x3u << 2) /**< \brief (I2SC_MR) Data length is set to 18 bits */
#define   I2SC_MR_DATALENGTH_16_BITS (0x4u << 2) /**< \brief (I2SC_MR) Data length is set to 16 bits */
#define   I2SC_MR_DATALENGTH_16_BITS_COMPACT (0x5u << 2) /**< \brief (I2SC_MR) Data length is set to 16-bit compact stereo. Left sample in bits 15:0 and right sample in bits 31:16 of same word. */
#define   I2SC_MR_DATALENGTH_8_BITS (0x6u << 2) /**< \brief (I2SC_MR) Data length is set to 8 bits */
#define   I2SC_MR_DATALENGTH_8_BITS_COMPACT (0x7u << 2) /**< \brief (I2SC_MR) Data length is set to 8-bit compact stereo. Left sample in bits 7:0 and right sample in bits 15:8 of the same word. */
#define I2SC_MR_FORMAT_Pos 6
#define I2SC_MR_FORMAT_Msk (0x3u << I2SC_MR_FORMAT_Pos) /**< \brief (I2SC_MR) I2S or TDM Format */
#define   I2SC_MR_FORMAT_I2S (0x0u << 6) /**< \brief (I2SC_MR) I2S format, stereo with I2SWS low for left channel, and MSB of sample starting one I2SCK period after I2SWS edge */
#define   I2SC_MR_FORMAT_LJ (0x1u << 6) /**< \brief (I2SC_MR) Left-justified format, stereo with I2SWS high for left channel, and MSB of sample starting on I2SWS edge */
#define   I2SC_MR_FORMAT_TDM (0x2u << 6) /**< \brief (I2SC_MR) TDM format, with (NBCHAN + 1) channels, I2SWS high at beginning of first channel, and MSB of sample starting one ISCK period after I2SWS edge */
#define   I2SC_MR_FORMAT_TDMLJ (0x3u << 6) /**< \brief (I2SC_MR) TDM format, left-justified, with (NBCHAN + 1) channels, I2SWS high at beginning of first channel, and MSB of sample starting on I2SWS edge */
#define I2SC_MR_RXMONO (0x1u << 8) /**< \brief (I2SC_MR) Receive Mono */
#define I2SC_MR_RXDMA (0x1u << 9) /**< \brief (I2SC_MR) Single or Multiple DMA Controller Channels for Receiver */
#define I2SC_MR_RXLOOP (0x1u << 10) /**< \brief (I2SC_MR) Loop-back Test Mode */
#define I2SC_MR_TXMONO (0x1u << 12) /**< \brief (I2SC_MR) Transmit Mono */
#define I2SC_MR_TXDMA (0x1u << 13) /**< \brief (I2SC_MR) Single or Multiple DMA Controller Channels for Transmitter */
#define I2SC_MR_TXSAME (0x1u << 14) /**< \brief (I2SC_MR) Transmit Data when Underrun */
#define I2SC_MR_NBCHAN_Pos 16
#define I2SC_MR_NBCHAN_Msk (0x7u << I2SC_MR_NBCHAN_Pos) /**< \brief (I2SC_MR) Number of TDM Channels-1 */
#define I2SC_MR_NBCHAN(value) ((I2SC_MR_NBCHAN_Msk & ((value) << I2SC_MR_NBCHAN_Pos)))
#define I2SC_MR_TDMFS_Pos 22
#define I2SC_MR_TDMFS_Msk (0x3u << I2SC_MR_TDMFS_Pos) /**< \brief (I2SC_MR) TDM Frame Synchronization */
#define   I2SC_MR_TDMFS_SLOT (0x0u << 22) /**< \brief (I2SC_MR) I2SWS pulse is high for one time slot at beginning of frame */
#define   I2SC_MR_TDMFS_HALF (0x1u << 22) /**< \brief (I2SC_MR) I2SWS pulse is high for half the time slots at beginning of frame, i.e., half the IWS period */
#define   I2SC_MR_TDMFS_BIT (0x2u << 22) /**< \brief (I2SC_MR) I2SWS pulse is high for one bit period at beginning of frame, i.e., one ISCK period */
#define I2SC_MR_IMCKFS_Pos 24
#define I2SC_MR_IMCKFS_Msk (0x3fu << I2SC_MR_IMCKFS_Pos) /**< \brief (I2SC_MR) Master Clock to fs Ratio */
#define   I2SC_MR_IMCKFS_M2SF16_32_48_64 (0x0u << 24) /**< \brief (I2SC_MR) Sample frequency ratio set to 16 for two channels, set to 32 for 4 channels, set to 48 for 6 channels and set to 64 for 8 channels. */
#define   I2SC_MR_IMCKFS_M2SF32_64_96_128 (0x1u << 24) /**< \brief (I2SC_MR) Sample frequency ratio set to 32 for two channels, set to 64 for 4 channels, set to 96 for 6 channels and set to 128 for 8 channels. */
#define   I2SC_MR_IMCKFS_M2SF48_96_192 (0x2u << 24) /**< \brief (I2SC_MR) Sample frequency ratio set to 48 for two channels, set to 96 for 4 channels and set to 192 for 8 channels */
#define   I2SC_MR_IMCKFS_M2SF64_128_192_256 (0x3u << 24) /**< \brief (I2SC_MR) Sample frequency ratio set to 64 for two channels, set to 128 for 4 channels set to 192 for 6 channels and set to 256 for 8 channels. */
#define   I2SC_MR_IMCKFS_M2SF96_192_384 (0x5u << 24) /**< \brief (I2SC_MR) Sample frequency ratio set to 96 for two channels, set to 192 for 4 channels and set to 384 for 8 channels. */
#define   I2SC_MR_IMCKFS_M2SF128_256_384_512 (0x7u << 24) /**< \brief (I2SC_MR) Sample frequency ratio set to 128 for two channels, set to 256 for 4 channels, set to 384 for 6 channels and set to 512 for 8 channels. */
#define   I2SC_MR_IMCKFS_M2SF192_384_768 (0xBu << 24) /**< \brief (I2SC_MR) Sample frequency ratio set to 192 for two channels, set to 384 for 4 channels and set to 768 for 8 channels. */
#define   I2SC_MR_IMCKFS_M2SF256_512_768_1024 (0xFu << 24) /**< \brief (I2SC_MR) Sample frequency ratio set to 256 for two channels, set to 512 for 4 channels, set to 768 for 6 channels and set to 1024 for 8 channels. */
#define   I2SC_MR_IMCKFS_M2SF384_768 (0x17u << 24) /**< \brief (I2SC_MR) Sample frequency ratio set to 384 for two channels and set to 768 for 4 channels. */
#define   I2SC_MR_IMCKFS_M2SF512_1024 (0x1Fu << 24) /**< \brief (I2SC_MR) Sample frequency ratio set to 512 for two channels and set to 1024 for 4 channels. */
#define   I2SC_MR_IMCKFS_M2SF768 (0x2Fu << 24) /**< \brief (I2SC_MR) Sample frequency ratio set to 768. */
#define   I2SC_MR_IMCKFS_M2SF1024 (0x3Fu << 24) /**< \brief (I2SC_MR) Sample frequency ratio set to 1024. */
#define I2SC_MR_IMCKMODE (0x1u << 30) /**< \brief (I2SC_MR) Master Clock Mode */
#define I2SC_MR_IWS (0x1u << 31) /**< \brief (I2SC_MR) I2SWS TDM Slot Width */
/* -------- I2SC_SR : (I2SC Offset: 0x08) Status Register -------- */
#define I2SC_SR_RXEN (0x1u << 0) /**< \brief (I2SC_SR) Receiver Enabled */
#define I2SC_SR_RXRDY (0x1u << 1) /**< \brief (I2SC_SR) Receive Ready */
#define I2SC_SR_RXOR (0x1u << 2) /**< \brief (I2SC_SR) Receive Overrun */
#define I2SC_SR_TXEN (0x1u << 4) /**< \brief (I2SC_SR) Transmitter Enabled */
#define I2SC_SR_TXRDY (0x1u << 5) /**< \brief (I2SC_SR) Transmit Ready */
#define I2SC_SR_TXUR (0x1u << 6) /**< \brief (I2SC_SR) Transmit Underrun */
#define I2SC_SR_RXORCH_Pos 8
#define I2SC_SR_RXORCH_Msk (0xffu << I2SC_SR_RXORCH_Pos) /**< \brief (I2SC_SR)  */
#define I2SC_SR_TXURCH30_Pos 20
#define I2SC_SR_TXURCH30_Msk (0xfu << I2SC_SR_TXURCH30_Pos) /**< \brief (I2SC_SR)  */
#define I2SC_SR_TXURCH74_Pos 24
#define I2SC_SR_TXURCH74_Msk (0xfu << I2SC_SR_TXURCH74_Pos) /**< \brief (I2SC_SR)  */
/* -------- I2SC_SCR : (I2SC Offset: 0x0C) Status Clear Register -------- */
#define I2SC_SCR_RXOR (0x1u << 2) /**< \brief (I2SC_SCR) Receive Overrun Status Clear */
#define I2SC_SCR_TXUR (0x1u << 6) /**< \brief (I2SC_SCR) Transmit Underrun Status Clear */
#define I2SC_SCR_RXORCH_Pos 8
#define I2SC_SCR_RXORCH_Msk (0xffu << I2SC_SCR_RXORCH_Pos) /**< \brief (I2SC_SCR) Receive Overrun Per Channel Status Clear */
#define I2SC_SCR_RXORCH(value) ((I2SC_SCR_RXORCH_Msk & ((value) << I2SC_SCR_RXORCH_Pos)))
#define I2SC_SCR_TXURCH30_Pos 20
#define I2SC_SCR_TXURCH30_Msk (0xfu << I2SC_SCR_TXURCH30_Pos) /**< \brief (I2SC_SCR) Transmit Underrun Per Channel for Channel 30 Status Clear */
#define I2SC_SCR_TXURCH30(value) ((I2SC_SCR_TXURCH30_Msk & ((value) << I2SC_SCR_TXURCH30_Pos)))
#define I2SC_SCR_TXURCH74_Pos 24
#define I2SC_SCR_TXURCH74_Msk (0xfu << I2SC_SCR_TXURCH74_Pos) /**< \brief (I2SC_SCR) Transmit Underrun Per Channel for Channel 74 Status Clear */
#define I2SC_SCR_TXURCH74(value) ((I2SC_SCR_TXURCH74_Msk & ((value) << I2SC_SCR_TXURCH74_Pos)))
/* -------- I2SC_SSR : (I2SC Offset: 0x10) Status Set Register -------- */
#define I2SC_SSR_RXOR (0x1u << 2) /**< \brief (I2SC_SSR) Receive Overrun Status Set */
#define I2SC_SSR_TXUR (0x1u << 6) /**< \brief (I2SC_SSR) Transmit Underrun Status Set */
#define I2SC_SSR_RXORCH_Pos 8
#define I2SC_SSR_RXORCH_Msk (0xffu << I2SC_SSR_RXORCH_Pos) /**< \brief (I2SC_SSR) Receive Overrun Per Channel Status Set */
#define I2SC_SSR_RXORCH(value) ((I2SC_SSR_RXORCH_Msk & ((value) << I2SC_SSR_RXORCH_Pos)))
#define I2SC_SSR_TXURCH30_Pos 20
#define I2SC_SSR_TXURCH30_Msk (0xfu << I2SC_SSR_TXURCH30_Pos) /**< \brief (I2SC_SSR) Transmit Underrun Per Channel for Channel 30 Status Set */
#define I2SC_SSR_TXURCH30(value) ((I2SC_SSR_TXURCH30_Msk & ((value) << I2SC_SSR_TXURCH30_Pos)))
#define I2SC_SSR_TXURCH74_Pos 24
#define I2SC_SSR_TXURCH74_Msk (0xfu << I2SC_SSR_TXURCH74_Pos) /**< \brief (I2SC_SSR) Transmit Underrun Per Channel for Channel 74 Status Set */
#define I2SC_SSR_TXURCH74(value) ((I2SC_SSR_TXURCH74_Msk & ((value) << I2SC_SSR_TXURCH74_Pos)))
/* -------- I2SC_IER : (I2SC Offset: 0x14) Interrupt Enable Register -------- */
#define I2SC_IER_RXRDY (0x1u << 1) /**< \brief (I2SC_IER) Receiver Ready Interrupt Enable */
#define I2SC_IER_RXOR (0x1u << 2) /**< \brief (I2SC_IER) Receiver Overrun Interrupt Enable */
#define I2SC_IER_TXRDY (0x1u << 5) /**< \brief (I2SC_IER) Transmit Ready Interrupt Enable */
#define I2SC_IER_TXUR (0x1u << 6) /**< \brief (I2SC_IER) Transmit Underflow Interrupt Enable */
/* -------- I2SC_IDR : (I2SC Offset: 0x18) Interrupt Disable Register -------- */
#define I2SC_IDR_RXRDY (0x1u << 1) /**< \brief (I2SC_IDR) Receiver Ready Interrupt Disable */
#define I2SC_IDR_RXOR (0x1u << 2) /**< \brief (I2SC_IDR) Receiver Overrun Interrupt Disable */
#define I2SC_IDR_TXRDY (0x1u << 5) /**< \brief (I2SC_IDR) Transmit Ready Interrupt Disable */
#define I2SC_IDR_TXUR (0x1u << 6) /**< \brief (I2SC_IDR) Transmit Underflow Interrupt Disable */
/* -------- I2SC_IMR : (I2SC Offset: 0x1C) Interrupt Mask Register -------- */
#define I2SC_IMR_RXRDY (0x1u << 1) /**< \brief (I2SC_IMR) Receiver Ready Interrupt Disable */
#define I2SC_IMR_RXOR (0x1u << 2) /**< \brief (I2SC_IMR) Receiver Overrun Interrupt Disable */
#define I2SC_IMR_TXRDY (0x1u << 5) /**< \brief (I2SC_IMR) Transmit Ready Interrupt Disable */
#define I2SC_IMR_TXUR (0x1u << 6) /**< \brief (I2SC_IMR) Transmit Underflow Interrupt Disable */
/* -------- I2SC_RHR : (I2SC Offset: 0x20) Receiver Holding Register -------- */
#define I2SC_RHR_RHR_Pos 0
#define I2SC_RHR_RHR_Msk (0xffffffffu << I2SC_RHR_RHR_Pos) /**< \brief (I2SC_RHR) Receiver Holding Register */
/* -------- I2SC_THR : (I2SC Offset: 0x24) Transmitter Holding Register -------- */
#define I2SC_THR_THR_Pos 0
#define I2SC_THR_THR_Msk (0xffffffffu << I2SC_THR_THR_Pos) /**< \brief (I2SC_THR) Transmitter Holding Register */
#define I2SC_THR_THR(value) ((I2SC_THR_THR_Msk & ((value) << I2SC_THR_THR_Pos)))
/* -------- I2SC_VERSION : (I2SC Offset: 0x28) Version Register -------- */
#define I2SC_VERSION_VERSION_Pos 0
#define I2SC_VERSION_VERSION_Msk (0xfffu << I2SC_VERSION_VERSION_Pos) /**< \brief (I2SC_VERSION) Version of the Hardware Module */
#define I2SC_VERSION_MFN_Pos 16
#define I2SC_VERSION_MFN_Msk (0x7u << I2SC_VERSION_MFN_Pos) /**< \brief (I2SC_VERSION) Metal Fix Number */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR Integrity Check Monitor */
/* ============================================================================= */
/** \addtogroup SAMA5D2_ICM Integrity Check Monitor */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief Icm hardware registers */
typedef struct {
  __IO uint32_t ICM_CFG;       /**< \brief (Icm Offset: 0x00) Configuration Register */
  __O  uint32_t ICM_CTRL;      /**< \brief (Icm Offset: 0x04) Control Register */
  __O  uint32_t ICM_SR;        /**< \brief (Icm Offset: 0x08) Status Register */
  __I  uint32_t Reserved1[1];
  __O  uint32_t ICM_IER;       /**< \brief (Icm Offset: 0x10) Interrupt Enable Register */
  __O  uint32_t ICM_IDR;       /**< \brief (Icm Offset: 0x14) Interrupt Disable Register */
  __I  uint32_t ICM_IMR;       /**< \brief (Icm Offset: 0x18) Interrupt Mask Register */
  __I  uint32_t ICM_ISR;       /**< \brief (Icm Offset: 0x1C) Interrupt Status Register */
  __I  uint32_t ICM_UASR;      /**< \brief (Icm Offset: 0x20) Undefined Access Status Register */
  __I  uint32_t Reserved2[3];
  __IO uint32_t ICM_DSCR;      /**< \brief (Icm Offset: 0x30) Region Descriptor Area Start Address Register */
  __IO uint32_t ICM_HASH;      /**< \brief (Icm Offset: 0x34) Region Hash Area Start Address Register */
  __O  uint32_t ICM_UIHVAL[8]; /**< \brief (Icm Offset: 0x38) User Initial Hash Value 0 Register */
  __I  uint32_t Reserved3[37];
  __I  uint32_t ICM_ADDRSIZE;  /**< \brief (Icm Offset: 0xEC) Address Size Register */
  __I  uint32_t ICM_IPNAME[2]; /**< \brief (Icm Offset: 0xF0) IP Name 1 Register */
  __I  uint32_t ICM_FEATURES;  /**< \brief (Icm Offset: 0xF8) Feature Register */
  __I  uint32_t ICM_VERSION;   /**< \brief (Icm Offset: 0xFC) Version Register */
} Icm;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- ICM_CFG : (ICM Offset: 0x00) Configuration Register -------- */
#define ICM_CFG_WBDIS (0x1u << 0) /**< \brief (ICM_CFG) Write Back Disable */
#define ICM_CFG_EOMDIS (0x1u << 1) /**< \brief (ICM_CFG) End of Monitoring Disable */
#define ICM_CFG_SLBDIS (0x1u << 2) /**< \brief (ICM_CFG) Secondary List Branching Disable */
#define ICM_CFG_BBC_Pos 4
#define ICM_CFG_BBC_Msk (0xfu << ICM_CFG_BBC_Pos) /**< \brief (ICM_CFG) Bus Burden Control */
#define ICM_CFG_BBC(value) ((ICM_CFG_BBC_Msk & ((value) << ICM_CFG_BBC_Pos)))
#define ICM_CFG_ASCD (0x1u << 8) /**< \brief (ICM_CFG) Automatic Switch To Compare Digest */
#define ICM_CFG_DUALBUFF (0x1u << 9) /**< \brief (ICM_CFG) Dual Input Buffer */
#define ICM_CFG_UIHASH (0x1u << 12) /**< \brief (ICM_CFG) User Initial Hash Value */
#define ICM_CFG_UALGO_Pos 13
#define ICM_CFG_UALGO_Msk (0x7u << ICM_CFG_UALGO_Pos) /**< \brief (ICM_CFG) User SHA Algorithm */
#define   ICM_CFG_UALGO_SHA1 (0x0u << 13) /**< \brief (ICM_CFG) SHA1 algorithm processed */
#define   ICM_CFG_UALGO_SHA256 (0x1u << 13) /**< \brief (ICM_CFG) SHA256 algorithm processed */
#define   ICM_CFG_UALGO_SHA224 (0x4u << 13) /**< \brief (ICM_CFG) SHA224 algorithm processed */
#define ICM_CFG_HAPROT_Pos 16
#define ICM_CFG_HAPROT_Msk (0x3fu << ICM_CFG_HAPROT_Pos) /**< \brief (ICM_CFG) Region Hash Area Protection */
#define ICM_CFG_HAPROT(value) ((ICM_CFG_HAPROT_Msk & ((value) << ICM_CFG_HAPROT_Pos)))
#define ICM_CFG_DAPROT_Pos 24
#define ICM_CFG_DAPROT_Msk (0x3fu << ICM_CFG_DAPROT_Pos) /**< \brief (ICM_CFG) Region Descriptor Area Protection */
#define ICM_CFG_DAPROT(value) ((ICM_CFG_DAPROT_Msk & ((value) << ICM_CFG_DAPROT_Pos)))
/* -------- ICM_CTRL : (ICM Offset: 0x04) Control Register -------- */
#define ICM_CTRL_ENABLE (0x1u << 0) /**< \brief (ICM_CTRL) ICM Enable */
#define ICM_CTRL_DISABLE (0x1u << 1) /**< \brief (ICM_CTRL) ICM Disable Register */
#define ICM_CTRL_SWRST (0x1u << 2) /**< \brief (ICM_CTRL) Software Reset */
#define ICM_CTRL_REHASH_Pos 4
#define ICM_CTRL_REHASH_Msk (0xfu << ICM_CTRL_REHASH_Pos) /**< \brief (ICM_CTRL) Recompute Internal Hash */
#define ICM_CTRL_REHASH(value) ((ICM_CTRL_REHASH_Msk & ((value) << ICM_CTRL_REHASH_Pos)))
#define ICM_CTRL_RMDIS_Pos 8
#define ICM_CTRL_RMDIS_Msk (0xfu << ICM_CTRL_RMDIS_Pos) /**< \brief (ICM_CTRL) Region Monitoring Disable */
#define ICM_CTRL_RMDIS(value) ((ICM_CTRL_RMDIS_Msk & ((value) << ICM_CTRL_RMDIS_Pos)))
#define ICM_CTRL_RMEN_Pos 12
#define ICM_CTRL_RMEN_Msk (0xfu << ICM_CTRL_RMEN_Pos) /**< \brief (ICM_CTRL) Region Monitoring Enable */
#define ICM_CTRL_RMEN(value) ((ICM_CTRL_RMEN_Msk & ((value) << ICM_CTRL_RMEN_Pos)))
/* -------- ICM_SR : (ICM Offset: 0x08) Status Register -------- */
#define ICM_SR_ENABLE (0x1u << 0) /**< \brief (ICM_SR) ICM Controller Enable Register */
#define ICM_SR_RAWRMDIS_Pos 8
#define ICM_SR_RAWRMDIS_Msk (0xfu << ICM_SR_RAWRMDIS_Pos) /**< \brief (ICM_SR) RAW Region Monitoring Disabled Status */
#define ICM_SR_RAWRMDIS(value) ((ICM_SR_RAWRMDIS_Msk & ((value) << ICM_SR_RAWRMDIS_Pos)))
#define ICM_SR_RMDIS_Pos 12
#define ICM_SR_RMDIS_Msk (0xfu << ICM_SR_RMDIS_Pos) /**< \brief (ICM_SR) Region Monitoring Disabled Status */
#define ICM_SR_RMDIS(value) ((ICM_SR_RMDIS_Msk & ((value) << ICM_SR_RMDIS_Pos)))
/* -------- ICM_IER : (ICM Offset: 0x10) Interrupt Enable Register -------- */
#define ICM_IER_RHC_Pos 0
#define ICM_IER_RHC_Msk (0xfu << ICM_IER_RHC_Pos) /**< \brief (ICM_IER) Region Hash Completed Interrupt Enable */
#define ICM_IER_RHC(value) ((ICM_IER_RHC_Msk & ((value) << ICM_IER_RHC_Pos)))
#define ICM_IER_RDM_Pos 4
#define ICM_IER_RDM_Msk (0xfu << ICM_IER_RDM_Pos) /**< \brief (ICM_IER) Region Digest Mismatch Interrupt Enable */
#define ICM_IER_RDM(value) ((ICM_IER_RDM_Msk & ((value) << ICM_IER_RDM_Pos)))
#define ICM_IER_RBE_Pos 8
#define ICM_IER_RBE_Msk (0xfu << ICM_IER_RBE_Pos) /**< \brief (ICM_IER) Region Bus Error Interrupt Enable */
#define ICM_IER_RBE(value) ((ICM_IER_RBE_Msk & ((value) << ICM_IER_RBE_Pos)))
#define ICM_IER_RWC_Pos 12
#define ICM_IER_RWC_Msk (0xfu << ICM_IER_RWC_Pos) /**< \brief (ICM_IER) Region Wrap Condition detected Interrupt Enable */
#define ICM_IER_RWC(value) ((ICM_IER_RWC_Msk & ((value) << ICM_IER_RWC_Pos)))
#define ICM_IER_REC_Pos 16
#define ICM_IER_REC_Msk (0xfu << ICM_IER_REC_Pos) /**< \brief (ICM_IER) Region End bit Condition Detected Interrupt Enable */
#define ICM_IER_REC(value) ((ICM_IER_REC_Msk & ((value) << ICM_IER_REC_Pos)))
#define ICM_IER_RSU_Pos 20
#define ICM_IER_RSU_Msk (0xfu << ICM_IER_RSU_Pos) /**< \brief (ICM_IER) Region Status Updated Interrupt Disable */
#define ICM_IER_RSU(value) ((ICM_IER_RSU_Msk & ((value) << ICM_IER_RSU_Pos)))
#define ICM_IER_URAD (0x1u << 24) /**< \brief (ICM_IER) Undefined Register Access Detection Interrupt Enable */
/* -------- ICM_IDR : (ICM Offset: 0x14) Interrupt Disable Register -------- */
#define ICM_IDR_RHC_Pos 0
#define ICM_IDR_RHC_Msk (0xfu << ICM_IDR_RHC_Pos) /**< \brief (ICM_IDR) Region Hash Completed Interrupt Disable */
#define ICM_IDR_RHC(value) ((ICM_IDR_RHC_Msk & ((value) << ICM_IDR_RHC_Pos)))
#define ICM_IDR_RDM_Pos 4
#define ICM_IDR_RDM_Msk (0xfu << ICM_IDR_RDM_Pos) /**< \brief (ICM_IDR) Region Digest Mismatch Interrupt Disable */
#define ICM_IDR_RDM(value) ((ICM_IDR_RDM_Msk & ((value) << ICM_IDR_RDM_Pos)))
#define ICM_IDR_RBE_Pos 8
#define ICM_IDR_RBE_Msk (0xfu << ICM_IDR_RBE_Pos) /**< \brief (ICM_IDR) Region Bus Error Interrupt Disable */
#define ICM_IDR_RBE(value) ((ICM_IDR_RBE_Msk & ((value) << ICM_IDR_RBE_Pos)))
#define ICM_IDR_RWC_Pos 12
#define ICM_IDR_RWC_Msk (0xfu << ICM_IDR_RWC_Pos) /**< \brief (ICM_IDR) Region Wrap Condition Detected Interrupt Disable */
#define ICM_IDR_RWC(value) ((ICM_IDR_RWC_Msk & ((value) << ICM_IDR_RWC_Pos)))
#define ICM_IDR_REC_Pos 16
#define ICM_IDR_REC_Msk (0xfu << ICM_IDR_REC_Pos) /**< \brief (ICM_IDR) Region End bit Condition detected Interrupt Disable */
#define ICM_IDR_REC(value) ((ICM_IDR_REC_Msk & ((value) << ICM_IDR_REC_Pos)))
#define ICM_IDR_RSU_Pos 20
#define ICM_IDR_RSU_Msk (0xfu << ICM_IDR_RSU_Pos) /**< \brief (ICM_IDR) Region Status Updated Interrupt Disable */
#define ICM_IDR_RSU(value) ((ICM_IDR_RSU_Msk & ((value) << ICM_IDR_RSU_Pos)))
#define ICM_IDR_URAD (0x1u << 24) /**< \brief (ICM_IDR) Undefined Register Access Detection Interrupt Disable */
/* -------- ICM_IMR : (ICM Offset: 0x18) Interrupt Mask Register -------- */
#define ICM_IMR_RHC_Pos 0
#define ICM_IMR_RHC_Msk (0xfu << ICM_IMR_RHC_Pos) /**< \brief (ICM_IMR) Region Hash Completed Interrupt Mask */
#define ICM_IMR_RDM_Pos 4
#define ICM_IMR_RDM_Msk (0xfu << ICM_IMR_RDM_Pos) /**< \brief (ICM_IMR) Region Digest Mismatch Interrupt Mask */
#define ICM_IMR_RBE_Pos 8
#define ICM_IMR_RBE_Msk (0xfu << ICM_IMR_RBE_Pos) /**< \brief (ICM_IMR) Region Bus Error Interrupt Mask */
#define ICM_IMR_RWC_Pos 12
#define ICM_IMR_RWC_Msk (0xfu << ICM_IMR_RWC_Pos) /**< \brief (ICM_IMR) Region Wrap Condition Detected Interrupt Mask */
#define ICM_IMR_REC_Pos 16
#define ICM_IMR_REC_Msk (0xfu << ICM_IMR_REC_Pos) /**< \brief (ICM_IMR) Region End bit Condition Detected Interrupt Mask */
#define ICM_IMR_RSU_Pos 20
#define ICM_IMR_RSU_Msk (0xfu << ICM_IMR_RSU_Pos) /**< \brief (ICM_IMR) Region Status Updated Interrupt Mask */
#define ICM_IMR_URAD (0x1u << 24) /**< \brief (ICM_IMR) Undefined Register Access Detection Interrupt Mask */
/* -------- ICM_ISR : (ICM Offset: 0x1C) Interrupt Status Register -------- */
#define ICM_ISR_RHC_Pos 0
#define ICM_ISR_RHC_Msk (0xfu << ICM_ISR_RHC_Pos) /**< \brief (ICM_ISR) Region Hash Completed */
#define ICM_ISR_RDM_Pos 4
#define ICM_ISR_RDM_Msk (0xfu << ICM_ISR_RDM_Pos) /**< \brief (ICM_ISR) Region Digest Mismatch */
#define ICM_ISR_RBE_Pos 8
#define ICM_ISR_RBE_Msk (0xfu << ICM_ISR_RBE_Pos) /**< \brief (ICM_ISR) Region Bus Error */
#define ICM_ISR_RWC_Pos 12
#define ICM_ISR_RWC_Msk (0xfu << ICM_ISR_RWC_Pos) /**< \brief (ICM_ISR) Region Wrap Condition Detected */
#define ICM_ISR_REC_Pos 16
#define ICM_ISR_REC_Msk (0xfu << ICM_ISR_REC_Pos) /**< \brief (ICM_ISR) Region End bit Condition Detected */
#define ICM_ISR_RSU_Pos 20
#define ICM_ISR_RSU_Msk (0xfu << ICM_ISR_RSU_Pos) /**< \brief (ICM_ISR) Region Status Updated Detected */
#define ICM_ISR_URAD (0x1u << 24) /**< \brief (ICM_ISR) Undefined Register Access Detection Status */
/* -------- ICM_UASR : (ICM Offset: 0x20) Undefined Access Status Register -------- */
#define ICM_UASR_URAT_Pos 0
#define ICM_UASR_URAT_Msk (0x7u << ICM_UASR_URAT_Pos) /**< \brief (ICM_UASR) Undefined Register Access Trace */
#define   ICM_UASR_URAT_UNSPEC_STRUCT_MEMBER (0x0u << 0) /**< \brief (ICM_UASR) Unspecified structure member set to one detected when the descriptor is loaded. */
#define   ICM_UASR_URAT_ICM_CFG_MODIFIED (0x1u << 0) /**< \brief (ICM_UASR) ICM_CFG modified during active monitoring. */
#define   ICM_UASR_URAT_ICM_DSCR_MODIFIED (0x2u << 0) /**< \brief (ICM_UASR) ICM_DSCR modified during active monitoring. */
#define   ICM_UASR_URAT_ICM_HASH_MODIFIED (0x3u << 0) /**< \brief (ICM_UASR) ICM_HASH modified during active monitoring */
#define   ICM_UASR_URAT_READ_ACCESS (0x4u << 0) /**< \brief (ICM_UASR) Write-only register read access */
/* -------- ICM_DSCR : (ICM Offset: 0x30) Region Descriptor Area Start Address Register -------- */
#define ICM_DSCR_DASA_Pos 6
#define ICM_DSCR_DASA_Msk (0x3ffffffu << ICM_DSCR_DASA_Pos) /**< \brief (ICM_DSCR) Descriptor Area Start Address */
#define ICM_DSCR_DASA(value) ((ICM_DSCR_DASA_Msk & ((value) << ICM_DSCR_DASA_Pos)))
/* -------- ICM_HASH : (ICM Offset: 0x34) Region Hash Area Start Address Register -------- */
#define ICM_HASH_HASA_Pos 7
#define ICM_HASH_HASA_Msk (0x1ffffffu << ICM_HASH_HASA_Pos) /**< \brief (ICM_HASH) Hash Area Start Address */
#define ICM_HASH_HASA(value) ((ICM_HASH_HASA_Msk & ((value) << ICM_HASH_HASA_Pos)))
/* -------- ICM_UIHVAL[8] : (ICM Offset: 0x38) User Initial Hash Value 0 Register -------- */
#define ICM_UIHVAL_VAL_Pos 0
#define ICM_UIHVAL_VAL_Msk (0xffffffffu << ICM_UIHVAL_VAL_Pos) /**< \brief (ICM_UIHVAL[8]) Initial Hash Value */
#define ICM_UIHVAL_VAL(value) ((ICM_UIHVAL_VAL_Msk & ((value) << ICM_UIHVAL_VAL_Pos)))
/* -------- ICM_ADDRSIZE : (ICM Offset: 0xEC) Address Size Register -------- */
#define ICM_ADDRSIZE_ADDRSIZE_Pos 0
#define ICM_ADDRSIZE_ADDRSIZE_Msk (0xffffu << ICM_ADDRSIZE_ADDRSIZE_Pos) /**< \brief (ICM_ADDRSIZE) Peripheral Bus Address Area Size */
/* -------- ICM_IPNAME[2] : (ICM Offset: 0xF0) IP Name 1 Register -------- */
#define ICM_IPNAME_IPNAME_Pos 0
#define ICM_IPNAME_IPNAME_Msk (0xffffffffu << ICM_IPNAME_IPNAME_Pos) /**< \brief (ICM_IPNAME[2]) IP Name in ASCII Format */
/* -------- ICM_FEATURES : (ICM Offset: 0xF8) Feature Register -------- */
#define ICM_FEATURES_CFGALGO (0x1u << 0) /**< \brief (ICM_FEATURES) Configurable Algorithms */
#define ICM_FEATURES_RFU (0x1u << 1) /**< \brief (ICM_FEATURES) Reserved for Future Use */
#define ICM_FEATURES_CFGPP (0x1u << 2) /**< \brief (ICM_FEATURES) Configurable Processing Period */
#define ICM_FEATURES_HDPP (0x1u << 3) /**< \brief (ICM_FEATURES) Hardcoded Processing Period */
#define ICM_FEATURES_PDC (0x1u << 4) /**< \brief (ICM_FEATURES) Peripheral DMA Logic */
#define ICM_FEATURES_NAIS (0x1u << 5) /**< \brief (ICM_FEATURES) No Access to Intermediate State */
#define ICM_FEATURES_EF (0x1u << 6) /**< \brief (ICM_FEATURES) Embedded LFSR */
#define ICM_FEATURES_SI (0x1u << 7) /**< \brief (ICM_FEATURES) Scan Intrusion */
#define ICM_FEATURES_BTYP (0x1u << 8) /**< \brief (ICM_FEATURES) Bridge Type */
#define ICM_FEATURES_PDCOFF0C (0x1u << 9) /**< \brief (ICM_FEATURES) PDC Offset is 0x0C */
#define ICM_FEATURES_HSHA1 (0x1u << 16) /**< \brief (ICM_FEATURES) SHA1 Hardcoded Mode */
#define ICM_FEATURES_HSHA224 (0x1u << 17) /**< \brief (ICM_FEATURES) SHA224 Hardcoded Mode */
#define ICM_FEATURES_HSHA256 (0x1u << 18) /**< \brief (ICM_FEATURES) SHA256 Hardcoded Mode */
#define ICM_FEATURES_HSHA384 (0x1u << 19) /**< \brief (ICM_FEATURES) SHA384 Hardcoded Mode */
#define ICM_FEATURES_HSHA512 (0x1u << 20) /**< \brief (ICM_FEATURES) SHA512 Hardcoded Mode */
/* -------- ICM_VERSION : (ICM Offset: 0xFC) Version Register -------- */
#define ICM_VERSION_VERSION_Pos 0
#define ICM_VERSION_VERSION_Msk (0xfffu << ICM_VERSION_VERSION_Pos) /**< \brief (ICM_VERSION) Version of the Hardware Module */
#define ICM_VERSION_MFN_Pos 16
#define ICM_VERSION_MFN_Msk (0x7u << ICM_VERSION_MFN_Pos) /**< \brief (ICM_VERSION) Metal Fix Number */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR Intellectual Property Block */
/* ============================================================================= */
/** \addtogroup SAMA5D2_ISI Intellectual Property Block */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief Isi hardware registers */
typedef struct {
  __O  uint32_t HXISI_CTRLEN;         /**< \brief (Isi Offset: 0x00) Control Enable Register */
  __O  uint32_t HXISI_CTRLDIS;        /**< \brief (Isi Offset: 0x04) Control Disable Register */
  __I  uint32_t HXISI_CTRLSR;         /**< \brief (Isi Offset: 0x08) Control Status Register */
  __IO uint32_t HXISI_PFE_CFG0;       /**< \brief (Isi Offset: 0x0C) Parallel Front End Configuration 0 Register */
  __IO uint32_t HXISI_PFE_CFG1;       /**< \brief (Isi Offset: 0x10) Parallel Front End Configuration 1 Register */
  __IO uint32_t HXISI_PFE_CFG2;       /**< \brief (Isi Offset: 0x14) Parallel Front End Configuration 2 Register */
  __O  uint32_t HXISI_CLKEN;          /**< \brief (Isi Offset: 0x18) Clock Enable Register */
  __O  uint32_t HXISI_CLKDIS;         /**< \brief (Isi Offset: 0x1C) Clock Disable Register */
  __I  uint32_t HXISI_CLKSR;          /**< \brief (Isi Offset: 0x20) Clock Status Register */
  __IO uint32_t HXISI_CLKCFG;         /**< \brief (Isi Offset: 0x24) Clock Configuration Register */
  __O  uint32_t HXISI_INTEN;          /**< \brief (Isi Offset: 0x28) Interrupt Enable Register */
  __O  uint32_t HXISI_INTDIS;         /**< \brief (Isi Offset: 0x2C) Interrupt Disable Register */
  __I  uint32_t HXISI_INTMASK;        /**< \brief (Isi Offset: 0x30) Interrupt Mask Register */
  __I  uint32_t HXISI_INTSR;          /**< \brief (Isi Offset: 0x34) Interrupt Status Register */
  __I  uint32_t Reserved1[2];
  __IO uint32_t HXISI_DPC_CTRL;       /**< \brief (Isi Offset: 0x40) Defective Pixel Correction Control Register */
  __IO uint32_t HXISI_DPC_CFG;        /**< \brief (Isi Offset: 0x44) Defective Pixel Correction Configuration Register */
  __IO uint32_t HXISI_DPC_THRESHM;    /**< \brief (Isi Offset: 0x48) Defective Pixel Correction Threshold M Register */
  __IO uint32_t HXISI_DPC_THRESHC;    /**< \brief (Isi Offset: 0x4C) Defective Pixel Correction Threshold C Register */
  __IO uint32_t HXISI_DPC_THRESHA;    /**< \brief (Isi Offset: 0x50) Defective Pixel Correction Threshold A Register */
  __I  uint32_t HXISI_DPC_SR;         /**< \brief (Isi Offset: 0x54) Defective Pixel Correction Status Register */
  __IO uint32_t HXISI_WB_CTRL;        /**< \brief (Isi Offset: 0x58) White Balance Control Register */
  __IO uint32_t HXISI_WB_CFG;         /**< \brief (Isi Offset: 0x5C) White Balance Configuration Register */
  __IO uint32_t HXISI_WB_O_RGR;       /**< \brief (Isi Offset: 0x60) White Balance Offset for R, GR Register */
  __IO uint32_t HXISI_WB_O_BGB;       /**< \brief (Isi Offset: 0x64) White Balance Offset for B, GB Register */
  __IO uint32_t HXISI_WB_G_RGR;       /**< \brief (Isi Offset: 0x68) White Balance Gain for R, GR Register */
  __IO uint32_t HXISI_WB_G_BGB;       /**< \brief (Isi Offset: 0x6C) White Balance Gain for B, GB Register */
  __IO uint32_t HXISI_CFA_CTRL;       /**< \brief (Isi Offset: 0x70) Color Filter Array Control Register */
  __IO uint32_t HXISI_CFA_CFG;        /**< \brief (Isi Offset: 0x74) Color Filter Array Configuration Register */
  __IO uint32_t HXISI_CC_CTRL;        /**< \brief (Isi Offset: 0x78) Color Correction Control Register */
  __IO uint32_t HXISI_CC_RR_RG;       /**< \brief (Isi Offset: 0x7C) Color Correction RR RG Register */
  __IO uint32_t HXISI_CC_RB_OR;       /**< \brief (Isi Offset: 0x80) Color Correction RB OR Register */
  __IO uint32_t HXISI_CC_GR_GG;       /**< \brief (Isi Offset: 0x84) Color Correction GR GG Register */
  __IO uint32_t HXISI_CC_GB_OG;       /**< \brief (Isi Offset: 0x88) Color Correction GB OG Register */
  __IO uint32_t HXISI_CC_BR_BG;       /**< \brief (Isi Offset: 0x8C) Color Correction BR BG Register */
  __IO uint32_t HXISI_CC_BB_OB;       /**< \brief (Isi Offset: 0x90) Color Correction BB OB Register */
  __IO uint32_t HXISI_GAM_CTRL;       /**< \brief (Isi Offset: 0x94) Gamma Correction Control Register */
  __IO uint32_t HXISI_GAM_BENTRY[64]; /**< \brief (Isi Offset: 0x98) Gamma Correction Blue Entry */
  __IO uint32_t HXISI_GAM_GENTRY[64]; /**< \brief (Isi Offset: 0x198) Gamma Correction Green Entry */
  __IO uint32_t HXISI_GAM_RENTRY[64]; /**< \brief (Isi Offset: 0x298) Gamma Correction Red Entry */
  __IO uint32_t HXISI_CSC_CTRL;       /**< \brief (Isi Offset: 0x398) Color Space Conversion Control Register */
  __IO uint32_t HXISI_CSC_YR_YG;      /**< \brief (Isi Offset: 0x39C) Color Space Conversion YR, YG Register */
  __IO uint32_t HXISI_CSC_YB_OY;      /**< \brief (Isi Offset: 0x3A0) Color Space Conversion YB, OY Register */
  __IO uint32_t HXISI_CSC_CBR_CBG;    /**< \brief (Isi Offset: 0x3A4) Color Space Conversion CBR CBG Register */
  __IO uint32_t HXISI_CSC_CBB_OCB;    /**< \brief (Isi Offset: 0x3A8) Color Space Conversion CBB OCB Register */
  __IO uint32_t HXISI_CSC_CRR_CRG;    /**< \brief (Isi Offset: 0x3AC) Color Space Conversion CRR CRG Register */
  __IO uint32_t HXISI_CSC_CRB_OCR;    /**< \brief (Isi Offset: 0x3B0) Color Space Conversion CRB OCR Register */
  __IO uint32_t HXISI_CBC_CTRL;       /**< \brief (Isi Offset: 0x3B4) Contrast and Brightness Control Register */
  __IO uint32_t HXISI_CBC_CFG;        /**< \brief (Isi Offset: 0x3B8) Contrast and Brightness Configuration Register */
  __IO uint32_t HXISI_CBC_BRIGHT;     /**< \brief (Isi Offset: 0x3BC) Contrast and Brightness, Brightness Register */
  __IO uint32_t HXISI_CBC_CONTRAST;   /**< \brief (Isi Offset: 0x3C0) Contrast and Brightness, Contrast Register */
  __IO uint32_t HXISI_SUB422_CTRL;    /**< \brief (Isi Offset: 0x3C4) Subsampling 4:4:4 to 4:2:2 Control Register */
  __IO uint32_t HXISI_SUB422_CFG;     /**< \brief (Isi Offset: 0x3C8) Subsampling 4:4:4 to 4:2:2 Configuration Register */
  __IO uint32_t HXISI_SUB420_CTRL;    /**< \brief (Isi Offset: 0x3CC) Subsampling 4:2:2 to 4:2:0 Control Register */
  __IO uint32_t HXISI_RLP_CFG;        /**< \brief (Isi Offset: 0x3D0) Rounding, Limiting and Packing Config Register */
  __IO uint32_t HXISI_HIS_CTRL;       /**< \brief (Isi Offset: 0x3D4) Histogram Control Register */
  __IO uint32_t HXISI_HIS_CFG;        /**< \brief (Isi Offset: 0x3D8) Histogram Configuration Register */
  __I  uint32_t Reserved2[1];
  __IO uint32_t HXISI_DCFG;           /**< \brief (Isi Offset: 0x3E0) DMA Configuration Register */
  __IO uint32_t HXISI_DCTRL;          /**< \brief (Isi Offset: 0x3E4) DMA Control Register */
  __IO uint32_t HXISI_DNDA;           /**< \brief (Isi Offset: 0x3E8) DMA Descriptor Address Register */
  __IO uint32_t HXISI_DAD0;           /**< \brief (Isi Offset: 0x3EC) DMA Address 0 Register */
  __IO uint32_t HXISI_DST0;           /**< \brief (Isi Offset: 0x3F0) DMA Stride 0 Register */
  __IO uint32_t HXISI_DAD1;           /**< \brief (Isi Offset: 0x3F4) DMA Address 1 Register */
  __IO uint32_t HXISI_DST1;           /**< \brief (Isi Offset: 0x3F8) DMA Stride 1 Register */
  __IO uint32_t HXISI_DAD2;           /**< \brief (Isi Offset: 0x3FC) DMA Address 2 Register */
  __IO uint32_t HXISI_DST2;           /**< \brief (Isi Offset: 0x400) DMA Stride 2 Register */
  __I  uint32_t Reserved3[2];
  __I  uint32_t IPB_VERSION;          /**< \brief (Isi Offset: 0x40C) Version Register */
  __I  uint32_t HXISI_HIS_ENTRY[512]; /**< \brief (Isi Offset: 0x410) Histogram Entry */
} Isi;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- HXISI_CTRLEN : (ISI Offset: 0x00) Control Enable Register -------- */
#define HXISI_CTRLEN_CAPTURE (0x1u << 0) /**< \brief (HXISI_CTRLEN) Capture Input Stream Command */
#define HXISI_CTRLEN_UPPRO (0x1u << 1) /**< \brief (HXISI_CTRLEN) Update Profile */
#define HXISI_CTRLEN_HISREQ (0x1u << 2) /**< \brief (HXISI_CTRLEN) Histogram Request */
#define HXISI_CTRLEN_HISCLR (0x1u << 3) /**< \brief (HXISI_CTRLEN) Histogram Clear */
/* -------- HXISI_CTRLDIS : (ISI Offset: 0x04) Control Disable Register -------- */
#define HXISI_CTRLDIS_DISABLE (0x1u << 0) /**< \brief (HXISI_CTRLDIS) Capture Disable */
#define HXISI_CTRLDIS_SWRST (0x1u << 8) /**< \brief (HXISI_CTRLDIS) Software Reset */
/* -------- HXISI_CTRLSR : (ISI Offset: 0x08) Control Status Register -------- */
#define HXISI_CTRLSR_CAPTURE (0x1u << 0) /**< \brief (HXISI_CTRLSR) Capture pending */
#define HXISI_CTRLSR_UPPRO (0x1u << 1) /**< \brief (HXISI_CTRLSR) Profile Update Pending */
#define HXISI_CTRLSR_HISREQ (0x1u << 2) /**< \brief (HXISI_CTRLSR)  */
#define HXISI_CTRLSR_FIELD (0x1u << 4) /**< \brief (HXISI_CTRLSR) Field Status (only relevant when the video stream is interlaced) */
#define HXISI_CTRLSR_SIP (0x1u << 31) /**< \brief (HXISI_CTRLSR) Synchronization In Progress */
/* -------- HXISI_PFE_CFG0 : (ISI Offset: 0x0C) Parallel Front End Configuration 0 Register -------- */
#define HXISI_PFE_CFG0_HPOL (0x1u << 0) /**< \brief (HXISI_PFE_CFG0) Horizontal Synchronization Polarity */
#define HXISI_PFE_CFG0_VPOL (0x1u << 1) /**< \brief (HXISI_PFE_CFG0) Vertical Synchronization Polarity */
#define HXISI_PFE_CFG0_PPOL (0x1u << 2) /**< \brief (HXISI_PFE_CFG0) Pixel Clock Polarity */
#define HXISI_PFE_CFG0_FPOL (0x1u << 3) /**< \brief (HXISI_PFE_CFG0) Field Polarity */
#define HXISI_PFE_CFG0_MODE_Pos 4
#define HXISI_PFE_CFG0_MODE_Msk (0x7u << HXISI_PFE_CFG0_MODE_Pos) /**< \brief (HXISI_PFE_CFG0) Parallel Front End Mode */
#define   HXISI_PFE_CFG0_MODE_PROGRESSIVE (0x0u << 4) /**< \brief (HXISI_PFE_CFG0) Video source is progressive. */
#define   HXISI_PFE_CFG0_MODE_DF_TOP (0x1u << 4) /**< \brief (HXISI_PFE_CFG0) Video source is interlaced, two fields are captured starting with top field. */
#define   HXISI_PFE_CFG0_MODE_DF_BOTTOM (0x2u << 4) /**< \brief (HXISI_PFE_CFG0) Video source is interlaced, two fields are captured starting with bottoom field. */
#define   HXISI_PFE_CFG0_MODE_DF_IMMEDIATE (0x3u << 4) /**< \brief (HXISI_PFE_CFG0) Video source is interlaced, two fields are captured immediately. */
#define   HXISI_PFE_CFG0_MODE_SF_TOP (0x4u << 4) /**< \brief (HXISI_PFE_CFG0) Video source is interlaced, one field is captured starting with the top field. */
#define   HXISI_PFE_CFG0_MODE_SF_BOTTOM (0x5u << 4) /**< \brief (HXISI_PFE_CFG0) Video source is interlaced, one field is captured starting with the bottom field. */
#define   HXISI_PFE_CFG0_MODE_SF_IMMEDIATE (0x6u << 4) /**< \brief (HXISI_PFE_CFG0) Video source is interlaced, one field is captured starting immediately. */
#define HXISI_PFE_CFG0_CONT (0x1u << 7) /**< \brief (HXISI_PFE_CFG0) Continuous Acquisition */
#define HXISI_PFE_CFG0_GATED (0x1u << 8) /**< \brief (HXISI_PFE_CFG0) Gated input clock */
#define HXISI_PFE_CFG0_CCIR656 (0x1u << 9) /**< \brief (HXISI_PFE_CFG0) CCIR656 input mode */
#define HXISI_PFE_CFG0_CCIR_CRC (0x1u << 10) /**< \brief (HXISI_PFE_CFG0)  */
#define HXISI_PFE_CFG0_CCIR10_8N (0x1u << 11) /**< \brief (HXISI_PFE_CFG0) CCIR 10 bits or 8 bits */
#define HXISI_PFE_CFG0_COLEN (0x1u << 12) /**< \brief (HXISI_PFE_CFG0) Column Cropping Enable */
#define HXISI_PFE_CFG0_ROWEN (0x1u << 13) /**< \brief (HXISI_PFE_CFG0) ROW Cropping Enable */
#define HXISI_PFE_CFG0_SKIPCNT_Pos 16
#define HXISI_PFE_CFG0_SKIPCNT_Msk (0xffu << HXISI_PFE_CFG0_SKIPCNT_Pos) /**< \brief (HXISI_PFE_CFG0) Frame Skipping Counter */
#define HXISI_PFE_CFG0_SKIPCNT(value) ((HXISI_PFE_CFG0_SKIPCNT_Msk & ((value) << HXISI_PFE_CFG0_SKIPCNT_Pos)))
#define HXISI_PFE_CFG0_CCIR_REP (0x1u << 27) /**< \brief (HXISI_PFE_CFG0)  */
#define HXISI_PFE_CFG0_BPS_Pos 28
#define HXISI_PFE_CFG0_BPS_Msk (0x7u << HXISI_PFE_CFG0_BPS_Pos) /**< \brief (HXISI_PFE_CFG0) Bits Per Sample */
#define   HXISI_PFE_CFG0_BPS_TWELVE (0x0u << 28) /**< \brief (HXISI_PFE_CFG0) 12 bits input */
#define   HXISI_PFE_CFG0_BPS_ELEVEN (0x1u << 28) /**< \brief (HXISI_PFE_CFG0) 11 bits input */
#define   HXISI_PFE_CFG0_BPS_TEN (0x2u << 28) /**< \brief (HXISI_PFE_CFG0) 10 bits input */
#define   HXISI_PFE_CFG0_BPS_NINE (0x3u << 28) /**< \brief (HXISI_PFE_CFG0) 9 bits input */
#define   HXISI_PFE_CFG0_BPS_EIGHT (0x4u << 28) /**< \brief (HXISI_PFE_CFG0) 8 bits input */
#define HXISI_PFE_CFG0_REP (0x1u << 31) /**< \brief (HXISI_PFE_CFG0) Up Multiply with Replication */
/* -------- HXISI_PFE_CFG1 : (ISI Offset: 0x10) Parallel Front End Configuration 1 Register -------- */
#define HXISI_PFE_CFG1_COLMIN_Pos 0
#define HXISI_PFE_CFG1_COLMIN_Msk (0xffffu << HXISI_PFE_CFG1_COLMIN_Pos) /**< \brief (HXISI_PFE_CFG1) Column Minimun Limit */
#define HXISI_PFE_CFG1_COLMIN(value) ((HXISI_PFE_CFG1_COLMIN_Msk & ((value) << HXISI_PFE_CFG1_COLMIN_Pos)))
#define HXISI_PFE_CFG1_COLMAX_Pos 16
#define HXISI_PFE_CFG1_COLMAX_Msk (0xffffu << HXISI_PFE_CFG1_COLMAX_Pos) /**< \brief (HXISI_PFE_CFG1) Column Maximun Limit */
#define HXISI_PFE_CFG1_COLMAX(value) ((HXISI_PFE_CFG1_COLMAX_Msk & ((value) << HXISI_PFE_CFG1_COLMAX_Pos)))
/* -------- HXISI_PFE_CFG2 : (ISI Offset: 0x14) Parallel Front End Configuration 2 Register -------- */
#define HXISI_PFE_CFG2_ROWMIN_Pos 0
#define HXISI_PFE_CFG2_ROWMIN_Msk (0xffffu << HXISI_PFE_CFG2_ROWMIN_Pos) /**< \brief (HXISI_PFE_CFG2) ROW Minimal Limit */
#define HXISI_PFE_CFG2_ROWMIN(value) ((HXISI_PFE_CFG2_ROWMIN_Msk & ((value) << HXISI_PFE_CFG2_ROWMIN_Pos)))
#define HXISI_PFE_CFG2_ROWMAX_Pos 16
#define HXISI_PFE_CFG2_ROWMAX_Msk (0xffffu << HXISI_PFE_CFG2_ROWMAX_Pos) /**< \brief (HXISI_PFE_CFG2) ROW Maximal Limit */
#define HXISI_PFE_CFG2_ROWMAX(value) ((HXISI_PFE_CFG2_ROWMAX_Msk & ((value) << HXISI_PFE_CFG2_ROWMAX_Pos)))
/* -------- HXISI_CLKEN : (ISI Offset: 0x18) Clock Enable Register -------- */
#define HXISI_CLKEN_CCEN (0x1u << 0) /**< \brief (HXISI_CLKEN) Core Clock Enable */
#define HXISI_CLKEN_MCEN (0x1u << 1) /**< \brief (HXISI_CLKEN) Master Clock Enable */
/* -------- HXISI_CLKDIS : (ISI Offset: 0x1C) Clock Disable Register -------- */
#define HXISI_CLKDIS_CCDIS (0x1u << 0) /**< \brief (HXISI_CLKDIS) Core Clock Disable */
#define HXISI_CLKDIS_MCDIS (0x1u << 1) /**< \brief (HXISI_CLKDIS) Master Clock Disable */
#define HXISI_CLKDIS_CCSWRST (0x1u << 8) /**< \brief (HXISI_CLKDIS) Core Clock Software Reset */
#define HXISI_CLKDIS_MCSWRST (0x1u << 9) /**< \brief (HXISI_CLKDIS) Master Clock Software Reset */
/* -------- HXISI_CLKSR : (ISI Offset: 0x20) Clock Status Register -------- */
#define HXISI_CLKSR_CCEN (0x1u << 0) /**< \brief (HXISI_CLKSR) fgdfg */
#define HXISI_CLKSR_MCEN (0x1u << 1) /**< \brief (HXISI_CLKSR) zsfdgsdfg */
#define HXISI_CLKSR_SIP (0x1u << 31) /**< \brief (HXISI_CLKSR) Synchronization In Progress */
/* -------- HXISI_CLKCFG : (ISI Offset: 0x24) Clock Configuration Register -------- */
#define HXISI_CLKCFG_CCDIV_Pos 0
#define HXISI_CLKCFG_CCDIV_Msk (0xffu << HXISI_CLKCFG_CCDIV_Pos) /**< \brief (HXISI_CLKCFG) Core Clock Divider */
#define HXISI_CLKCFG_CCDIV(value) ((HXISI_CLKCFG_CCDIV_Msk & ((value) << HXISI_CLKCFG_CCDIV_Pos)))
#define HXISI_CLKCFG_CCSEL (0x1u << 8) /**< \brief (HXISI_CLKCFG) Core Clock Reference Clock Selection */
#define HXISI_CLKCFG_MCDIV_Pos 16
#define HXISI_CLKCFG_MCDIV_Msk (0xffu << HXISI_CLKCFG_MCDIV_Pos) /**< \brief (HXISI_CLKCFG) Master Clock Divider */
#define HXISI_CLKCFG_MCDIV(value) ((HXISI_CLKCFG_MCDIV_Msk & ((value) << HXISI_CLKCFG_MCDIV_Pos)))
#define HXISI_CLKCFG_MCSEL_Pos 24
#define HXISI_CLKCFG_MCSEL_Msk (0x3u << HXISI_CLKCFG_MCSEL_Pos) /**< \brief (HXISI_CLKCFG) Master Clock Reference Clock Selection */
#define HXISI_CLKCFG_MCSEL(value) ((HXISI_CLKCFG_MCSEL_Msk & ((value) << HXISI_CLKCFG_MCSEL_Pos)))
/* -------- HXISI_INTEN : (ISI Offset: 0x28) Interrupt Enable Register -------- */
#define HXISI_INTEN_VD (0x1u << 0) /**< \brief (HXISI_INTEN) Vertical Synchronization Detection Interrupt Enable */
#define HXISI_INTEN_HD (0x1u << 1) /**< \brief (HXISI_INTEN) Horizontal Synchronization Detection Interrupt Enable */
#define HXISI_INTEN_SWRST (0x1u << 4) /**< \brief (HXISI_INTEN) Software Reset Completed Interrupt Enable */
#define HXISI_INTEN_DIS (0x1u << 5) /**< \brief (HXISI_INTEN) Disable Completed Interrupt Enable */
#define HXISI_INTEN_DDONE (0x1u << 8) /**< \brief (HXISI_INTEN) DMA Done Interrupt Enable */
#define HXISI_INTEN_LDONE (0x1u << 9) /**< \brief (HXISI_INTEN) DMA List Done Interrupt Enable */
#define HXISI_INTEN_HISDONE (0x1u << 12) /**< \brief (HXISI_INTEN) Histogram Completed Interrupt Enable */
#define HXISI_INTEN_HISCLR (0x1u << 13) /**< \brief (HXISI_INTEN) Histogram Clear Interrupt Enable */
#define HXISI_INTEN_WERR (0x1u << 16) /**< \brief (HXISI_INTEN) Write Channel Error Interrupt Enable */
#define HXISI_INTEN_RERR (0x1u << 20) /**< \brief (HXISI_INTEN) Read Channel Error Interrupt Enable */
#define HXISI_INTEN_VFPOV (0x1u << 24) /**< \brief (HXISI_INTEN) Vertical Front Porch Overflow Interrupt Enable */
#define HXISI_INTEN_DAOV (0x1u << 25) /**< \brief (HXISI_INTEN) Data Overflow Interrupt Enable */
#define HXISI_INTEN_VDTO (0x1u << 26) /**< \brief (HXISI_INTEN) Vertical Synchronization Timeout Interrupt Enable */
#define HXISI_INTEN_HDTO (0x1u << 27) /**< \brief (HXISI_INTEN) Horizontal Synchronization Timeout Interrupt Enable */
#define HXISI_INTEN_CCIRERR (0x1u << 28) /**< \brief (HXISI_INTEN) CCIR Decoder Error Interrupt Enable */
/* -------- HXISI_INTDIS : (ISI Offset: 0x2C) Interrupt Disable Register -------- */
#define HXISI_INTDIS_VD (0x1u << 0) /**< \brief (HXISI_INTDIS) Vertical Synchronization Detection Interrupt Disable */
#define HXISI_INTDIS_HD (0x1u << 1) /**< \brief (HXISI_INTDIS) Horizontal Synchronization Detection Interrupt Disable */
#define HXISI_INTDIS_SWRST (0x1u << 4) /**< \brief (HXISI_INTDIS) Software Reset Completed Interrupt Disable */
#define HXISI_INTDIS_DIS (0x1u << 5) /**< \brief (HXISI_INTDIS) Disable Completed Interrupt Disable */
#define HXISI_INTDIS_DDONE (0x1u << 8) /**< \brief (HXISI_INTDIS) DMA Done Interrupt Disable */
#define HXISI_INTDIS_LDONE (0x1u << 9) /**< \brief (HXISI_INTDIS) DMA List Done Interrupt Disable */
#define HXISI_INTDIS_HISDONE (0x1u << 12) /**< \brief (HXISI_INTDIS) Histogram Completed Interrupt Disable */
#define HXISI_INTDIS_HISCLR (0x1u << 13) /**< \brief (HXISI_INTDIS) Histogram Clear Interrupt Disable */
#define HXISI_INTDIS_WERR (0x1u << 16) /**< \brief (HXISI_INTDIS) Write Channel Error Interrupt Disable */
#define HXISI_INTDIS_RERR (0x1u << 20) /**< \brief (HXISI_INTDIS) Read Channel Error Interrupt Disable */
#define HXISI_INTDIS_VFPOV (0x1u << 24) /**< \brief (HXISI_INTDIS) Vertical Front Porch Overflow Interrupt Disable */
#define HXISI_INTDIS_DAOV (0x1u << 25) /**< \brief (HXISI_INTDIS) Data Overflow Interrupt Disable */
#define HXISI_INTDIS_VDTO (0x1u << 26) /**< \brief (HXISI_INTDIS) Vertical Synchronization Timeout Interrupt Disable */
#define HXISI_INTDIS_HDTO (0x1u << 27) /**< \brief (HXISI_INTDIS) Horizontal Synchronization Timeout Interrupt Disable */
#define HXISI_INTDIS_CCIRERR (0x1u << 28) /**< \brief (HXISI_INTDIS) CCIR Decoder Error Interrupt Disable */
/* -------- HXISI_INTMASK : (ISI Offset: 0x30) Interrupt Mask Register -------- */
#define HXISI_INTMASK_VD (0x1u << 0) /**< \brief (HXISI_INTMASK) Vertical Synchronization Detection Interrupt Mask */
#define HXISI_INTMASK_HD (0x1u << 1) /**< \brief (HXISI_INTMASK) Horizontal Synchronization Detection Interrupt Mask */
#define HXISI_INTMASK_SWRST (0x1u << 4) /**< \brief (HXISI_INTMASK) Software Reset Completed Interrupt Mask */
#define HXISI_INTMASK_DIS (0x1u << 5) /**< \brief (HXISI_INTMASK) Disable Completed Interrupt Mask */
#define HXISI_INTMASK_DDONE (0x1u << 8) /**< \brief (HXISI_INTMASK) DMA Done Interrupt Mask */
#define HXISI_INTMASK_LDONE (0x1u << 9) /**< \brief (HXISI_INTMASK) DMA List Done Interrupt Mask */
#define HXISI_INTMASK_HISDONE (0x1u << 12) /**< \brief (HXISI_INTMASK) Histogram Completed Interrupt Mask */
#define HXISI_INTMASK_HISCLR (0x1u << 13) /**< \brief (HXISI_INTMASK) Histogram Clear Interrupt Mask */
#define HXISI_INTMASK_WERR (0x1u << 16) /**< \brief (HXISI_INTMASK) Write Channel Error Interrupt Mask */
#define HXISI_INTMASK_RERR (0x1u << 20) /**< \brief (HXISI_INTMASK) Read Channel Error Interrupt Mask */
#define HXISI_INTMASK_VFPOV (0x1u << 24) /**< \brief (HXISI_INTMASK) Vertical Front Porch Overflow Interrupt Mask */
#define HXISI_INTMASK_DAOV (0x1u << 25) /**< \brief (HXISI_INTMASK) Data Overflow Interrupt Mask */
#define HXISI_INTMASK_VDTO (0x1u << 26) /**< \brief (HXISI_INTMASK) Vertical Synchronization Timeout Interrupt Mask */
#define HXISI_INTMASK_HDTO (0x1u << 27) /**< \brief (HXISI_INTMASK) Horizontal Synchronization Timeout Interrupt Mask */
#define HXISI_INTMASK_CCIRERR (0x1u << 28) /**< \brief (HXISI_INTMASK) CCIR Decoder Error Interrupt Mask */
/* -------- HXISI_INTSR : (ISI Offset: 0x34) Interrupt Status Register -------- */
#define HXISI_INTSR_VD (0x1u << 0) /**< \brief (HXISI_INTSR) Vertical Synchronization Dectected Interrupt */
#define HXISI_INTSR_HD (0x1u << 1) /**< \brief (HXISI_INTSR) Horizontal Synchronization Detected Interrupt */
#define HXISI_INTSR_SWRST (0x1u << 4) /**< \brief (HXISI_INTSR) Software Reset Completed Interrupt */
#define HXISI_INTSR_DIS (0x1u << 5) /**< \brief (HXISI_INTSR) Disable Completed Interrupt */
#define HXISI_INTSR_DDONE (0x1u << 8) /**< \brief (HXISI_INTSR) DMA Done Interrupt */
#define HXISI_INTSR_LDONE (0x1u << 9) /**< \brief (HXISI_INTSR) DMA List Done Interrupt */
#define HXISI_INTSR_HISDONE (0x1u << 12) /**< \brief (HXISI_INTSR) Histogram Completed Interrupt */
#define HXISI_INTSR_HISCLR (0x1u << 13) /**< \brief (HXISI_INTSR) Histogram Clear Interrupt */
#define HXISI_INTSR_WERR (0x1u << 16) /**< \brief (HXISI_INTSR) Write Channel Error Interrupt */
#define HXISI_INTSR_WERRID_Pos 17
#define HXISI_INTSR_WERRID_Msk (0x3u << HXISI_INTSR_WERRID_Pos) /**< \brief (HXISI_INTSR) Write Channel Error Identifier */
#define   HXISI_INTSR_WERRID_CH0 (0x0u << 17) /**< \brief (HXISI_INTSR) An Error Occured for Channel 0 */
#define   HXISI_INTSR_WERRID_CH1 (0x1u << 17) /**< \brief (HXISI_INTSR) An Error Occured for Channel 1 */
#define   HXISI_INTSR_WERRID_CH2 (0x2u << 17) /**< \brief (HXISI_INTSR) An Error Occured for Channel 2 */
#define   HXISI_INTSR_WERRID_WB (0x3u << 17) /**< \brief (HXISI_INTSR) Write Back Channel Error */
#define HXISI_INTSR_RERR (0x1u << 20) /**< \brief (HXISI_INTSR) Read Channel Error Interrupt */
#define HXISI_INTSR_VFPOV (0x1u << 24) /**< \brief (HXISI_INTSR) Vertical Front Porch Overflow Interrupt */
#define HXISI_INTSR_DAOV (0x1u << 25) /**< \brief (HXISI_INTSR) Data Overflow Interrupt */
#define HXISI_INTSR_VDTO (0x1u << 26) /**< \brief (HXISI_INTSR) Vertical Synchronization Timeout Interrupt */
#define HXISI_INTSR_HDTO (0x1u << 27) /**< \brief (HXISI_INTSR) Horizontal Synchronization Timeout Interrupt */
#define HXISI_INTSR_CCIRERR (0x1u << 28) /**< \brief (HXISI_INTSR) CCIR Decoder Error Interrupt */
/* -------- HXISI_DPC_CTRL : (ISI Offset: 0x40) Defective Pixel Correction Control Register -------- */
#define HXISI_DPC_CTRL_ENABLE (0x1u << 0) /**< \brief (HXISI_DPC_CTRL) Defective Pixel Correction Enable */
/* -------- HXISI_DPC_CFG : (ISI Offset: 0x44) Defective Pixel Correction Configuration Register -------- */
#define HXISI_DPC_CFG_BAYCFG_Pos 0
#define HXISI_DPC_CFG_BAYCFG_Msk (0x3u << HXISI_DPC_CFG_BAYCFG_Pos) /**< \brief (HXISI_DPC_CFG) Color Filter Array Patern */
#define   HXISI_DPC_CFG_BAYCFG_GRGR (0x0u << 0) /**< \brief (HXISI_DPC_CFG) Starting Row configuration is G R G R (Red Row) */
#define   HXISI_DPC_CFG_BAYCFG_RGRG (0x1u << 0) /**< \brief (HXISI_DPC_CFG) Starting Row configuration is R G R G (Red Row */
#define   HXISI_DPC_CFG_BAYCFG_GBGB (0x2u << 0) /**< \brief (HXISI_DPC_CFG) Starting Row configuration is G B G B (Blue Row */
#define   HXISI_DPC_CFG_BAYCFG_BGBG (0x3u << 0) /**< \brief (HXISI_DPC_CFG) Starting Row configuration is B G B G (Blue Row) */
#define HXISI_DPC_CFG_EITPOL (0x1u << 4) /**< \brief (HXISI_DPC_CFG) Edge Interpolation */
#define HXISI_DPC_CFG_TM_ENABLE (0x1u << 12) /**< \brief (HXISI_DPC_CFG) Median Threshold Enable */
#define HXISI_DPC_CFG_TC_ENABLE (0x1u << 13) /**< \brief (HXISI_DPC_CFG) Closest Pixels Threshold Enable */
#define HXISI_DPC_CFG_TA_ENABLE (0x1u << 14) /**< \brief (HXISI_DPC_CFG) Average Threshold Enable */
#define HXISI_DPC_CFG_ND_MODE (0x1u << 16) /**< \brief (HXISI_DPC_CFG) Noise Detection Mode */
#define HXISI_DPC_CFG_RE_MODE (0x1u << 17) /**< \brief (HXISI_DPC_CFG) Replacement Algorithm */
/* -------- HXISI_DPC_THRESHM : (ISI Offset: 0x48) Defective Pixel Correction Threshold M Register -------- */
#define HXISI_DPC_THRESHM_THRESHM_Pos 0
#define HXISI_DPC_THRESHM_THRESHM_Msk (0xfffu << HXISI_DPC_THRESHM_THRESHM_Pos) /**< \brief (HXISI_DPC_THRESHM) Median Threshold */
#define HXISI_DPC_THRESHM_THRESHM(value) ((HXISI_DPC_THRESHM_THRESHM_Msk & ((value) << HXISI_DPC_THRESHM_THRESHM_Pos)))
/* -------- HXISI_DPC_THRESHC : (ISI Offset: 0x4C) Defective Pixel Correction Threshold C Register -------- */
#define HXISI_DPC_THRESHC_THRESHC_Pos 0
#define HXISI_DPC_THRESHC_THRESHC_Msk (0xfffu << HXISI_DPC_THRESHC_THRESHC_Pos) /**< \brief (HXISI_DPC_THRESHC) Closest Pixel Threshold */
#define HXISI_DPC_THRESHC_THRESHC(value) ((HXISI_DPC_THRESHC_THRESHC_Msk & ((value) << HXISI_DPC_THRESHC_THRESHC_Pos)))
/* -------- HXISI_DPC_THRESHA : (ISI Offset: 0x50) Defective Pixel Correction Threshold A Register -------- */
#define HXISI_DPC_THRESHA_THRESHA_Pos 0
#define HXISI_DPC_THRESHA_THRESHA_Msk (0xfffu << HXISI_DPC_THRESHA_THRESHA_Pos) /**< \brief (HXISI_DPC_THRESHA) Average Threshold */
#define HXISI_DPC_THRESHA_THRESHA(value) ((HXISI_DPC_THRESHA_THRESHA_Msk & ((value) << HXISI_DPC_THRESHA_THRESHA_Pos)))
/* -------- HXISI_DPC_SR : (ISI Offset: 0x54) Defective Pixel Correction Status Register -------- */
#define HXISI_DPC_SR_COUNTER_Pos 0
#define HXISI_DPC_SR_COUNTER_Msk (0xffffffu << HXISI_DPC_SR_COUNTER_Pos) /**< \brief (HXISI_DPC_SR) Defective Pixel Counter */
/* -------- HXISI_WB_CTRL : (ISI Offset: 0x58) White Balance Control Register -------- */
#define HXISI_WB_CTRL_ENABLE (0x1u << 0) /**< \brief (HXISI_WB_CTRL) White Balance Enable */
/* -------- HXISI_WB_CFG : (ISI Offset: 0x5C) White Balance Configuration Register -------- */
#define HXISI_WB_CFG_BAYCFG_Pos 0
#define HXISI_WB_CFG_BAYCFG_Msk (0x3u << HXISI_WB_CFG_BAYCFG_Pos) /**< \brief (HXISI_WB_CFG) White Balance Bayer Configuration (Pixel Color Pattern) */
#define   HXISI_WB_CFG_BAYCFG_GRGR (0x0u << 0) /**< \brief (HXISI_WB_CFG) Starting Row configuration is G R G R (Red Row) */
#define   HXISI_WB_CFG_BAYCFG_RGRG (0x1u << 0) /**< \brief (HXISI_WB_CFG) Starting Row configuration is R G R G (Red Row */
#define   HXISI_WB_CFG_BAYCFG_GBGB (0x2u << 0) /**< \brief (HXISI_WB_CFG) Starting Row configuration is G B G B (Blue Row */
#define   HXISI_WB_CFG_BAYCFG_BGBG (0x3u << 0) /**< \brief (HXISI_WB_CFG) Starting Row configuration is B G B G (Blue Row) */
/* -------- HXISI_WB_O_RGR : (ISI Offset: 0x60) White Balance Offset for R, GR Register -------- */
#define HXISI_WB_O_RGR_ROFST_Pos 0
#define HXISI_WB_O_RGR_ROFST_Msk (0xfffu << HXISI_WB_O_RGR_ROFST_Pos) /**< \brief (HXISI_WB_O_RGR) Offset Red component (signed 12 bits 1:11:0) */
#define HXISI_WB_O_RGR_ROFST(value) ((HXISI_WB_O_RGR_ROFST_Msk & ((value) << HXISI_WB_O_RGR_ROFST_Pos)))
#define HXISI_WB_O_RGR_GROFST_Pos 16
#define HXISI_WB_O_RGR_GROFST_Msk (0xfffu << HXISI_WB_O_RGR_GROFST_Pos) /**< \brief (HXISI_WB_O_RGR) Offset Green component for Red row (signed 12 bits 1:11:0) */
#define HXISI_WB_O_RGR_GROFST(value) ((HXISI_WB_O_RGR_GROFST_Msk & ((value) << HXISI_WB_O_RGR_GROFST_Pos)))
/* -------- HXISI_WB_O_BGB : (ISI Offset: 0x64) White Balance Offset for B, GB Register -------- */
#define HXISI_WB_O_BGB_BOFST_Pos 0
#define HXISI_WB_O_BGB_BOFST_Msk (0xfffu << HXISI_WB_O_BGB_BOFST_Pos) /**< \brief (HXISI_WB_O_BGB) Offset Blue component (signed 12 bits, 1:11:0) */
#define HXISI_WB_O_BGB_BOFST(value) ((HXISI_WB_O_BGB_BOFST_Msk & ((value) << HXISI_WB_O_BGB_BOFST_Pos)))
#define HXISI_WB_O_BGB_GBOFST_Pos 16
#define HXISI_WB_O_BGB_GBOFST_Msk (0xfffu << HXISI_WB_O_BGB_GBOFST_Pos) /**< \brief (HXISI_WB_O_BGB) Offset Green component for Blue row (signed 12 bits, 1:11:0) */
#define HXISI_WB_O_BGB_GBOFST(value) ((HXISI_WB_O_BGB_GBOFST_Msk & ((value) << HXISI_WB_O_BGB_GBOFST_Pos)))
/* -------- HXISI_WB_G_RGR : (ISI Offset: 0x68) White Balance Gain for R, GR Register -------- */
#define HXISI_WB_G_RGR_RGAIN_Pos 0
#define HXISI_WB_G_RGR_RGAIN_Msk (0x1fffu << HXISI_WB_G_RGR_RGAIN_Pos) /**< \brief (HXISI_WB_G_RGR) Red Component Gain (unsigned 13 bits, 0:4:9) */
#define HXISI_WB_G_RGR_RGAIN(value) ((HXISI_WB_G_RGR_RGAIN_Msk & ((value) << HXISI_WB_G_RGR_RGAIN_Pos)))
#define HXISI_WB_G_RGR_GRGAIN_Pos 16
#define HXISI_WB_G_RGR_GRGAIN_Msk (0x1fffu << HXISI_WB_G_RGR_GRGAIN_Pos) /**< \brief (HXISI_WB_G_RGR) Green Component (Red row) Gain (unsigned 13 bits, 0:4:9) */
#define HXISI_WB_G_RGR_GRGAIN(value) ((HXISI_WB_G_RGR_GRGAIN_Msk & ((value) << HXISI_WB_G_RGR_GRGAIN_Pos)))
/* -------- HXISI_WB_G_BGB : (ISI Offset: 0x6C) White Balance Gain for B, GB Register -------- */
#define HXISI_WB_G_BGB_BGAIN_Pos 0
#define HXISI_WB_G_BGB_BGAIN_Msk (0x1fffu << HXISI_WB_G_BGB_BGAIN_Pos) /**< \brief (HXISI_WB_G_BGB) Blue component Gain (unsigned 13 bits, 0:4:9) */
#define HXISI_WB_G_BGB_BGAIN(value) ((HXISI_WB_G_BGB_BGAIN_Msk & ((value) << HXISI_WB_G_BGB_BGAIN_Pos)))
#define HXISI_WB_G_BGB_GBGAIN_Pos 16
#define HXISI_WB_G_BGB_GBGAIN_Msk (0x1fffu << HXISI_WB_G_BGB_GBGAIN_Pos) /**< \brief (HXISI_WB_G_BGB) Green component (Blue row) Gain (unsigned 13 bits, 0:4:9) */
#define HXISI_WB_G_BGB_GBGAIN(value) ((HXISI_WB_G_BGB_GBGAIN_Msk & ((value) << HXISI_WB_G_BGB_GBGAIN_Pos)))
/* -------- HXISI_CFA_CTRL : (ISI Offset: 0x70) Color Filter Array Control Register -------- */
#define HXISI_CFA_CTRL_ENABLE (0x1u << 0) /**< \brief (HXISI_CFA_CTRL) Color Filter Array Interpolation Enable */
/* -------- HXISI_CFA_CFG : (ISI Offset: 0x74) Color Filter Array Configuration Register -------- */
#define HXISI_CFA_CFG_BAYCFG_Pos 0
#define HXISI_CFA_CFG_BAYCFG_Msk (0x3u << HXISI_CFA_CFG_BAYCFG_Pos) /**< \brief (HXISI_CFA_CFG) Color Filter Array Patern */
#define   HXISI_CFA_CFG_BAYCFG_GRGR (0x0u << 0) /**< \brief (HXISI_CFA_CFG) Starting Row configuration is G R G R (Red Row) */
#define   HXISI_CFA_CFG_BAYCFG_RGRG (0x1u << 0) /**< \brief (HXISI_CFA_CFG) Starting Row configuration is R G R G (Red Row */
#define   HXISI_CFA_CFG_BAYCFG_GBGB (0x2u << 0) /**< \brief (HXISI_CFA_CFG) Starting Row configuration is G B G B (Blue Row */
#define   HXISI_CFA_CFG_BAYCFG_BGBG (0x3u << 0) /**< \brief (HXISI_CFA_CFG) Starting Row configuration is B G B G (Blue Row) */
#define HXISI_CFA_CFG_EITPOL (0x1u << 4) /**< \brief (HXISI_CFA_CFG) Edge Interpolation */
/* -------- HXISI_CC_CTRL : (ISI Offset: 0x78) Color Correction Control Register -------- */
#define HXISI_CC_CTRL_ENABLE (0x1u << 0) /**< \brief (HXISI_CC_CTRL) Color Correction Enable */
/* -------- HXISI_CC_RR_RG : (ISI Offset: 0x7C) Color Correction RR RG Register -------- */
#define HXISI_CC_RR_RG_RRGAIN_Pos 0
#define HXISI_CC_RR_RG_RRGAIN_Msk (0xfffu << HXISI_CC_RR_RG_RRGAIN_Pos) /**< \brief (HXISI_CC_RR_RG) Red Gain for Red component (signed 12 bits, 1:3:8) */
#define HXISI_CC_RR_RG_RRGAIN(value) ((HXISI_CC_RR_RG_RRGAIN_Msk & ((value) << HXISI_CC_RR_RG_RRGAIN_Pos)))
#define HXISI_CC_RR_RG_RGGAIN_Pos 16
#define HXISI_CC_RR_RG_RGGAIN_Msk (0xfffu << HXISI_CC_RR_RG_RGGAIN_Pos) /**< \brief (HXISI_CC_RR_RG) Green Gain for Red component (signed 12 bits, 1:3:8) */
#define HXISI_CC_RR_RG_RGGAIN(value) ((HXISI_CC_RR_RG_RGGAIN_Msk & ((value) << HXISI_CC_RR_RG_RGGAIN_Pos)))
/* -------- HXISI_CC_RB_OR : (ISI Offset: 0x80) Color Correction RB OR Register -------- */
#define HXISI_CC_RB_OR_RBGAIN_Pos 0
#define HXISI_CC_RB_OR_RBGAIN_Msk (0xfffu << HXISI_CC_RB_OR_RBGAIN_Pos) /**< \brief (HXISI_CC_RB_OR) Blue Gain for Red component (signed 12 bits, 1:3:8) */
#define HXISI_CC_RB_OR_RBGAIN(value) ((HXISI_CC_RB_OR_RBGAIN_Msk & ((value) << HXISI_CC_RB_OR_RBGAIN_Pos)))
#define HXISI_CC_RB_OR_ROFST_Pos 16
#define HXISI_CC_RB_OR_ROFST_Msk (0x1fffu << HXISI_CC_RB_OR_ROFST_Pos) /**< \brief (HXISI_CC_RB_OR) Red component Offset (signed 13 bits, 1:12:0) */
#define HXISI_CC_RB_OR_ROFST(value) ((HXISI_CC_RB_OR_ROFST_Msk & ((value) << HXISI_CC_RB_OR_ROFST_Pos)))
/* -------- HXISI_CC_GR_GG : (ISI Offset: 0x84) Color Correction GR GG Register -------- */
#define HXISI_CC_GR_GG_GRGAIN_Pos 0
#define HXISI_CC_GR_GG_GRGAIN_Msk (0xfffu << HXISI_CC_GR_GG_GRGAIN_Pos) /**< \brief (HXISI_CC_GR_GG) Red Gain for Green component (signed 12 bits, 1:3:8) */
#define HXISI_CC_GR_GG_GRGAIN(value) ((HXISI_CC_GR_GG_GRGAIN_Msk & ((value) << HXISI_CC_GR_GG_GRGAIN_Pos)))
#define HXISI_CC_GR_GG_GGGAIN_Pos 16
#define HXISI_CC_GR_GG_GGGAIN_Msk (0xfffu << HXISI_CC_GR_GG_GGGAIN_Pos) /**< \brief (HXISI_CC_GR_GG) Green Gain for Green component (signed 12 bits, 1:3:8) */
#define HXISI_CC_GR_GG_GGGAIN(value) ((HXISI_CC_GR_GG_GGGAIN_Msk & ((value) << HXISI_CC_GR_GG_GGGAIN_Pos)))
/* -------- HXISI_CC_GB_OG : (ISI Offset: 0x88) Color Correction GB OG Register -------- */
#define HXISI_CC_GB_OG_GBGAIN_Pos 0
#define HXISI_CC_GB_OG_GBGAIN_Msk (0xfffu << HXISI_CC_GB_OG_GBGAIN_Pos) /**< \brief (HXISI_CC_GB_OG) Blue Gain for Green component (signed 12 bits, 1:3:8) */
#define HXISI_CC_GB_OG_GBGAIN(value) ((HXISI_CC_GB_OG_GBGAIN_Msk & ((value) << HXISI_CC_GB_OG_GBGAIN_Pos)))
#define HXISI_CC_GB_OG_ROFST_Pos 16
#define HXISI_CC_GB_OG_ROFST_Msk (0x1fffu << HXISI_CC_GB_OG_ROFST_Pos) /**< \brief (HXISI_CC_GB_OG) Green component Offset (signed 13 bits, 1:12:0) */
#define HXISI_CC_GB_OG_ROFST(value) ((HXISI_CC_GB_OG_ROFST_Msk & ((value) << HXISI_CC_GB_OG_ROFST_Pos)))
/* -------- HXISI_CC_BR_BG : (ISI Offset: 0x8C) Color Correction BR BG Register -------- */
#define HXISI_CC_BR_BG_BRGAIN_Pos 0
#define HXISI_CC_BR_BG_BRGAIN_Msk (0xfffu << HXISI_CC_BR_BG_BRGAIN_Pos) /**< \brief (HXISI_CC_BR_BG) Red Gain for Blue component (signed 12 bits, 1:3:8) */
#define HXISI_CC_BR_BG_BRGAIN(value) ((HXISI_CC_BR_BG_BRGAIN_Msk & ((value) << HXISI_CC_BR_BG_BRGAIN_Pos)))
#define HXISI_CC_BR_BG_BGGAIN_Pos 16
#define HXISI_CC_BR_BG_BGGAIN_Msk (0xfffu << HXISI_CC_BR_BG_BGGAIN_Pos) /**< \brief (HXISI_CC_BR_BG) Green Gain for Blue component (signed 12 bits, 1:3:8) */
#define HXISI_CC_BR_BG_BGGAIN(value) ((HXISI_CC_BR_BG_BGGAIN_Msk & ((value) << HXISI_CC_BR_BG_BGGAIN_Pos)))
/* -------- HXISI_CC_BB_OB : (ISI Offset: 0x90) Color Correction BB OB Register -------- */
#define HXISI_CC_BB_OB_BBGAIN_Pos 0
#define HXISI_CC_BB_OB_BBGAIN_Msk (0xfffu << HXISI_CC_BB_OB_BBGAIN_Pos) /**< \brief (HXISI_CC_BB_OB) Blue Gain for Blue component (signed 12 bits, 1:3:8) */
#define HXISI_CC_BB_OB_BBGAIN(value) ((HXISI_CC_BB_OB_BBGAIN_Msk & ((value) << HXISI_CC_BB_OB_BBGAIN_Pos)))
#define HXISI_CC_BB_OB_BOFST_Pos 16
#define HXISI_CC_BB_OB_BOFST_Msk (0x1fffu << HXISI_CC_BB_OB_BOFST_Pos) /**< \brief (HXISI_CC_BB_OB) Blue component Offset (signed 13 bits, 1:12:0) */
#define HXISI_CC_BB_OB_BOFST(value) ((HXISI_CC_BB_OB_BOFST_Msk & ((value) << HXISI_CC_BB_OB_BOFST_Pos)))
/* -------- HXISI_GAM_CTRL : (ISI Offset: 0x94) Gamma Correction Control Register -------- */
#define HXISI_GAM_CTRL_ENABLE (0x1u << 0) /**< \brief (HXISI_GAM_CTRL) Gamma Correction Enable */
#define HXISI_GAM_CTRL_BLUT (0x1u << 1) /**< \brief (HXISI_GAM_CTRL)  */
#define HXISI_GAM_CTRL_GLUT (0x1u << 2) /**< \brief (HXISI_GAM_CTRL)  */
#define HXISI_GAM_CTRL_RLUT (0x1u << 3) /**< \brief (HXISI_GAM_CTRL)  */
/* -------- HXISI_GAM_BENTRY[64] : (ISI Offset: 0x98) Gamma Correction Blue Entry -------- */
#define HXISI_GAM_BENTRY_BSLOPE_Pos 0
#define HXISI_GAM_BENTRY_BSLOPE_Msk (0x3ffu << HXISI_GAM_BENTRY_BSLOPE_Pos) /**< \brief (HXISI_GAM_BENTRY[64]) Blue Color Slope for Piecewise Interpolation (signed 10 bits 1:3:6) */
#define HXISI_GAM_BENTRY_BSLOPE(value) ((HXISI_GAM_BENTRY_BSLOPE_Msk & ((value) << HXISI_GAM_BENTRY_BSLOPE_Pos)))
#define HXISI_GAM_BENTRY_BCONSTANT_Pos 16
#define HXISI_GAM_BENTRY_BCONSTANT_Msk (0x3ffu << HXISI_GAM_BENTRY_BCONSTANT_Pos) /**< \brief (HXISI_GAM_BENTRY[64]) Blue Color Constant for Piecewise Interpolation (unsigned 10 bits 0:10:0) */
#define HXISI_GAM_BENTRY_BCONSTANT(value) ((HXISI_GAM_BENTRY_BCONSTANT_Msk & ((value) << HXISI_GAM_BENTRY_BCONSTANT_Pos)))
/* -------- HXISI_GAM_GENTRY[64] : (ISI Offset: 0x198) Gamma Correction Green Entry -------- */
#define HXISI_GAM_GENTRY_GSLOPE_Pos 0
#define HXISI_GAM_GENTRY_GSLOPE_Msk (0x3ffu << HXISI_GAM_GENTRY_GSLOPE_Pos) /**< \brief (HXISI_GAM_GENTRY[64]) Green Color Slope for Piecewise Interpolation (signed 10 bits 1:3:6) */
#define HXISI_GAM_GENTRY_GSLOPE(value) ((HXISI_GAM_GENTRY_GSLOPE_Msk & ((value) << HXISI_GAM_GENTRY_GSLOPE_Pos)))
#define HXISI_GAM_GENTRY_GCONSTANT_Pos 16
#define HXISI_GAM_GENTRY_GCONSTANT_Msk (0x3ffu << HXISI_GAM_GENTRY_GCONSTANT_Pos) /**< \brief (HXISI_GAM_GENTRY[64]) Green Color Constant for Piecewise Interpolation (unsigned 10 bits 0:10:0) */
#define HXISI_GAM_GENTRY_GCONSTANT(value) ((HXISI_GAM_GENTRY_GCONSTANT_Msk & ((value) << HXISI_GAM_GENTRY_GCONSTANT_Pos)))
/* -------- HXISI_GAM_RENTRY[64] : (ISI Offset: 0x298) Gamma Correction Red Entry -------- */
#define HXISI_GAM_RENTRY_RSLOPE_Pos 0
#define HXISI_GAM_RENTRY_RSLOPE_Msk (0x3ffu << HXISI_GAM_RENTRY_RSLOPE_Pos) /**< \brief (HXISI_GAM_RENTRY[64]) Red Color Slope for Piecewise Interpolation (signed 10 bits 1:3:6) */
#define HXISI_GAM_RENTRY_RSLOPE(value) ((HXISI_GAM_RENTRY_RSLOPE_Msk & ((value) << HXISI_GAM_RENTRY_RSLOPE_Pos)))
#define HXISI_GAM_RENTRY_RCONSTANT_Pos 16
#define HXISI_GAM_RENTRY_RCONSTANT_Msk (0x3ffu << HXISI_GAM_RENTRY_RCONSTANT_Pos) /**< \brief (HXISI_GAM_RENTRY[64]) Red Color Constant for Piecewise Interpolation (unsigned 10 bits 0:10:0) */
#define HXISI_GAM_RENTRY_RCONSTANT(value) ((HXISI_GAM_RENTRY_RCONSTANT_Msk & ((value) << HXISI_GAM_RENTRY_RCONSTANT_Pos)))
/* -------- HXISI_CSC_CTRL : (ISI Offset: 0x398) Color Space Conversion Control Register -------- */
#define HXISI_CSC_CTRL_ENABLE (0x1u << 0) /**< \brief (HXISI_CSC_CTRL) RGB to YCbCr Color Space Conversion Enable */
/* -------- HXISI_CSC_YR_YG : (ISI Offset: 0x39C) Color Space Conversion YR, YG Register -------- */
#define HXISI_CSC_YR_YG_YRGAIN_Pos 0
#define HXISI_CSC_YR_YG_YRGAIN_Msk (0xfffu << HXISI_CSC_YR_YG_YRGAIN_Pos) /**< \brief (HXISI_CSC_YR_YG) Reg Gain for Luminance (signed 12 bits 1:3:8) */
#define HXISI_CSC_YR_YG_YRGAIN(value) ((HXISI_CSC_YR_YG_YRGAIN_Msk & ((value) << HXISI_CSC_YR_YG_YRGAIN_Pos)))
#define HXISI_CSC_YR_YG_YGGAIN_Pos 16
#define HXISI_CSC_YR_YG_YGGAIN_Msk (0xfffu << HXISI_CSC_YR_YG_YGGAIN_Pos) /**< \brief (HXISI_CSC_YR_YG) Green Gain for Luminance (signed 12 bits 1:3:8) */
#define HXISI_CSC_YR_YG_YGGAIN(value) ((HXISI_CSC_YR_YG_YGGAIN_Msk & ((value) << HXISI_CSC_YR_YG_YGGAIN_Pos)))
/* -------- HXISI_CSC_YB_OY : (ISI Offset: 0x3A0) Color Space Conversion YB, OY Register -------- */
#define HXISI_CSC_YB_OY_YBGAIN_Pos 0
#define HXISI_CSC_YB_OY_YBGAIN_Msk (0xfffu << HXISI_CSC_YB_OY_YBGAIN_Pos) /**< \brief (HXISI_CSC_YB_OY) Blue Gain for Luminance component (12 bits signed 1:3:8) */
#define HXISI_CSC_YB_OY_YBGAIN(value) ((HXISI_CSC_YB_OY_YBGAIN_Msk & ((value) << HXISI_CSC_YB_OY_YBGAIN_Pos)))
#define HXISI_CSC_YB_OY_YOFST_Pos 16
#define HXISI_CSC_YB_OY_YOFST_Msk (0x7ffu << HXISI_CSC_YB_OY_YOFST_Pos) /**< \brief (HXISI_CSC_YB_OY) Luminance Offset (11 bits signed 1:10:0) */
#define HXISI_CSC_YB_OY_YOFST(value) ((HXISI_CSC_YB_OY_YOFST_Msk & ((value) << HXISI_CSC_YB_OY_YOFST_Pos)))
/* -------- HXISI_CSC_CBR_CBG : (ISI Offset: 0x3A4) Color Space Conversion CBR CBG Register -------- */
#define HXISI_CSC_CBR_CBG_CBRGAIN_Pos 0
#define HXISI_CSC_CBR_CBG_CBRGAIN_Msk (0xfffu << HXISI_CSC_CBR_CBG_CBRGAIN_Pos) /**< \brief (HXISI_CSC_CBR_CBG) Red Gain for Blue Chrominance (signed 12 bits, 1:3:8) */
#define HXISI_CSC_CBR_CBG_CBRGAIN(value) ((HXISI_CSC_CBR_CBG_CBRGAIN_Msk & ((value) << HXISI_CSC_CBR_CBG_CBRGAIN_Pos)))
#define HXISI_CSC_CBR_CBG_CBGGAIN_Pos 16
#define HXISI_CSC_CBR_CBG_CBGGAIN_Msk (0xfffu << HXISI_CSC_CBR_CBG_CBGGAIN_Pos) /**< \brief (HXISI_CSC_CBR_CBG) Green Gain for Blue Chrominance (signed 12 bits 1:3:8) */
#define HXISI_CSC_CBR_CBG_CBGGAIN(value) ((HXISI_CSC_CBR_CBG_CBGGAIN_Msk & ((value) << HXISI_CSC_CBR_CBG_CBGGAIN_Pos)))
/* -------- HXISI_CSC_CBB_OCB : (ISI Offset: 0x3A8) Color Space Conversion CBB OCB Register -------- */
#define HXISI_CSC_CBB_OCB_CBBGAIN_Pos 0
#define HXISI_CSC_CBB_OCB_CBBGAIN_Msk (0xfffu << HXISI_CSC_CBB_OCB_CBBGAIN_Pos) /**< \brief (HXISI_CSC_CBB_OCB) Blue Gain for Blue Chrominance (signed 12 bits 1:3:8) */
#define HXISI_CSC_CBB_OCB_CBBGAIN(value) ((HXISI_CSC_CBB_OCB_CBBGAIN_Msk & ((value) << HXISI_CSC_CBB_OCB_CBBGAIN_Pos)))
#define HXISI_CSC_CBB_OCB_CBOFST_Pos 16
#define HXISI_CSC_CBB_OCB_CBOFST_Msk (0x7ffu << HXISI_CSC_CBB_OCB_CBOFST_Pos) /**< \brief (HXISI_CSC_CBB_OCB) Blue Chrominance Offset (signed 11 bits 1:10:0) */
#define HXISI_CSC_CBB_OCB_CBOFST(value) ((HXISI_CSC_CBB_OCB_CBOFST_Msk & ((value) << HXISI_CSC_CBB_OCB_CBOFST_Pos)))
/* -------- HXISI_CSC_CRR_CRG : (ISI Offset: 0x3AC) Color Space Conversion CRR CRG Register -------- */
#define HXISI_CSC_CRR_CRG_CRRGAIN_Pos 0
#define HXISI_CSC_CRR_CRG_CRRGAIN_Msk (0xfffu << HXISI_CSC_CRR_CRG_CRRGAIN_Pos) /**< \brief (HXISI_CSC_CRR_CRG) Red Gain for Red Chrominance (signed 12 bits 1:3:8) */
#define HXISI_CSC_CRR_CRG_CRRGAIN(value) ((HXISI_CSC_CRR_CRG_CRRGAIN_Msk & ((value) << HXISI_CSC_CRR_CRG_CRRGAIN_Pos)))
#define HXISI_CSC_CRR_CRG_CRGGAIN_Pos 16
#define HXISI_CSC_CRR_CRG_CRGGAIN_Msk (0xfffu << HXISI_CSC_CRR_CRG_CRGGAIN_Pos) /**< \brief (HXISI_CSC_CRR_CRG) Green Gain for Red Chrominance (signed 12 bits 1:3:8) */
#define HXISI_CSC_CRR_CRG_CRGGAIN(value) ((HXISI_CSC_CRR_CRG_CRGGAIN_Msk & ((value) << HXISI_CSC_CRR_CRG_CRGGAIN_Pos)))
/* -------- HXISI_CSC_CRB_OCR : (ISI Offset: 0x3B0) Color Space Conversion CRB OCR Register -------- */
#define HXISI_CSC_CRB_OCR_CRBGAIN_Pos 0
#define HXISI_CSC_CRB_OCR_CRBGAIN_Msk (0xfffu << HXISI_CSC_CRB_OCR_CRBGAIN_Pos) /**< \brief (HXISI_CSC_CRB_OCR) Blue Gain for Red Chrominance (signed 12 bits 1:3:8) */
#define HXISI_CSC_CRB_OCR_CRBGAIN(value) ((HXISI_CSC_CRB_OCR_CRBGAIN_Msk & ((value) << HXISI_CSC_CRB_OCR_CRBGAIN_Pos)))
#define HXISI_CSC_CRB_OCR_CROFST_Pos 16
#define HXISI_CSC_CRB_OCR_CROFST_Msk (0x7ffu << HXISI_CSC_CRB_OCR_CROFST_Pos) /**< \brief (HXISI_CSC_CRB_OCR) Red Chrominance Offset (signed 11 bits 1:10:0) */
#define HXISI_CSC_CRB_OCR_CROFST(value) ((HXISI_CSC_CRB_OCR_CROFST_Msk & ((value) << HXISI_CSC_CRB_OCR_CROFST_Pos)))
/* -------- HXISI_CBC_CTRL : (ISI Offset: 0x3B4) Contrast and Brightness Control Register -------- */
#define HXISI_CBC_CTRL_ENABLE (0x1u << 0) /**< \brief (HXISI_CBC_CTRL) Contrast and Brightness Control Enable */
/* -------- HXISI_CBC_CFG : (ISI Offset: 0x3B8) Contrast and Brightness Configuration Register -------- */
#define HXISI_CBC_CFG_CCIR (0x1u << 0) /**< \brief (HXISI_CBC_CFG) CCIR656 stream enable */
#define HXISI_CBC_CFG_CCIRMODE_Pos 1
#define HXISI_CBC_CFG_CCIRMODE_Msk (0x3u << HXISI_CBC_CFG_CCIRMODE_Pos) /**< \brief (HXISI_CBC_CFG) CCIR656 byte ordering */
#define   HXISI_CBC_CFG_CCIRMODE_CBY (0x0u << 1) /**< \brief (HXISI_CBC_CFG) byte ordering Cb0, Y0, Cr0, Y1 */
#define   HXISI_CBC_CFG_CCIRMODE_CRY (0x1u << 1) /**< \brief (HXISI_CBC_CFG) byte ordering Cr0, Y0, Cb0, Y1 */
#define   HXISI_CBC_CFG_CCIRMODE_YCB (0x2u << 1) /**< \brief (HXISI_CBC_CFG) byte ordering Y0, Cb0, Y1, Cr0 */
#define   HXISI_CBC_CFG_CCIRMODE_YCR (0x3u << 1) /**< \brief (HXISI_CBC_CFG) byte ordering Y0, Cr0, Y1, Cb0 */
/* -------- HXISI_CBC_BRIGHT : (ISI Offset: 0x3BC) Contrast and Brightness, Brightness Register -------- */
#define HXISI_CBC_BRIGHT_BRIGHT_Pos 0
#define HXISI_CBC_BRIGHT_BRIGHT_Msk (0x1ffu << HXISI_CBC_BRIGHT_BRIGHT_Pos) /**< \brief (HXISI_CBC_BRIGHT) Brightness control (signed 11 bits 1:10:0) */
#define HXISI_CBC_BRIGHT_BRIGHT(value) ((HXISI_CBC_BRIGHT_BRIGHT_Msk & ((value) << HXISI_CBC_BRIGHT_BRIGHT_Pos)))
/* -------- HXISI_CBC_CONTRAST : (ISI Offset: 0x3C0) Contrast and Brightness, Contrast Register -------- */
#define HXISI_CBC_CONTRAST_CONTRAST_Pos 0
#define HXISI_CBC_CONTRAST_CONTRAST_Msk (0xfffu << HXISI_CBC_CONTRAST_CONTRAST_Pos) /**< \brief (HXISI_CBC_CONTRAST) Contrast (signed 12 bits 1:3:8) */
#define HXISI_CBC_CONTRAST_CONTRAST(value) ((HXISI_CBC_CONTRAST_CONTRAST_Msk & ((value) << HXISI_CBC_CONTRAST_CONTRAST_Pos)))
/* -------- HXISI_SUB422_CTRL : (ISI Offset: 0x3C4) Subsampling 4:4:4 to 4:2:2 Control Register -------- */
#define HXISI_SUB422_CTRL_ENABLE (0x1u << 0) /**< \brief (HXISI_SUB422_CTRL) 4:4:4 to 4:2:2 Chrominance Horizontal Subsampling Filter Enable */
/* -------- HXISI_SUB422_CFG : (ISI Offset: 0x3C8) Subsampling 4:4:4 to 4:2:2 Configuration Register -------- */
#define HXISI_SUB422_CFG_CCIR (0x1u << 0) /**< \brief (HXISI_SUB422_CFG) CCIR656 input stream */
#define HXISI_SUB422_CFG_CCIRMODE_Pos 1
#define HXISI_SUB422_CFG_CCIRMODE_Msk (0x3u << HXISI_SUB422_CFG_CCIRMODE_Pos) /**< \brief (HXISI_SUB422_CFG) CCIR656 byte ordering */
#define   HXISI_SUB422_CFG_CCIRMODE_CBY (0x0u << 1) /**< \brief (HXISI_SUB422_CFG) byte ordering Cb0, Y0, Cr0, Y1 */
#define   HXISI_SUB422_CFG_CCIRMODE_CRY (0x1u << 1) /**< \brief (HXISI_SUB422_CFG) byte ordering Cr0, Y0, Cb0, Y1 */
#define   HXISI_SUB422_CFG_CCIRMODE_YCB (0x2u << 1) /**< \brief (HXISI_SUB422_CFG) byte ordering Y0, Cb0, Y1, Cr0 */
#define   HXISI_SUB422_CFG_CCIRMODE_YCR (0x3u << 1) /**< \brief (HXISI_SUB422_CFG) byte ordering Y0, Cr0, Y1, Cb0 */
#define HXISI_SUB422_CFG_FILTER_Pos 4
#define HXISI_SUB422_CFG_FILTER_Msk (0x3u << HXISI_SUB422_CFG_FILTER_Pos) /**< \brief (HXISI_SUB422_CFG) low pass filter selection */
#define   HXISI_SUB422_CFG_FILTER_FILT0CO (0x0u << 4) /**< \brief (HXISI_SUB422_CFG) cosited */
#define   HXISI_SUB422_CFG_FILTER_FILT1CE (0x1u << 4) /**< \brief (HXISI_SUB422_CFG) centered */
#define   HXISI_SUB422_CFG_FILTER_FILT2CO (0x2u << 4) /**< \brief (HXISI_SUB422_CFG) cosited */
#define   HXISI_SUB422_CFG_FILTER_FILT3CE (0x3u << 4) /**< \brief (HXISI_SUB422_CFG) centered */
/* -------- HXISI_SUB420_CTRL : (ISI Offset: 0x3CC) Subsampling 4:2:2 to 4:2:0 Control Register -------- */
#define HXISI_SUB420_CTRL_ENABLE (0x1u << 0) /**< \brief (HXISI_SUB420_CTRL) 4:2:2 to 4:2:0 vertical subsampling filter Enable (center aligned) */
#define HXISI_SUB420_CTRL_FILTER (0x1u << 4) /**< \brief (HXISI_SUB420_CTRL) interlaced or progressive chromiance filter */
/* -------- HXISI_RLP_CFG : (ISI Offset: 0x3D0) Rounding, Limiting and Packing Config Register -------- */
#define HXISI_RLP_CFG_MODE_Pos 0
#define HXISI_RLP_CFG_MODE_Msk (0xfu << HXISI_RLP_CFG_MODE_Pos) /**< \brief (HXISI_RLP_CFG) Rounding, Limiting and Packing Mode */
#define   HXISI_RLP_CFG_MODE_DAT8 (0x0u << 0) /**< \brief (HXISI_RLP_CFG) 8 Bits Data */
#define   HXISI_RLP_CFG_MODE_DAT9 (0x1u << 0) /**< \brief (HXISI_RLP_CFG) 9 Bits Data */
#define   HXISI_RLP_CFG_MODE_DAT10 (0x2u << 0) /**< \brief (HXISI_RLP_CFG) 10 Bits Data */
#define   HXISI_RLP_CFG_MODE_DAT11 (0x3u << 0) /**< \brief (HXISI_RLP_CFG) 11 Bits Data */
#define   HXISI_RLP_CFG_MODE_DAT12 (0x4u << 0) /**< \brief (HXISI_RLP_CFG) 12 Bits Data */
#define   HXISI_RLP_CFG_MODE_DATY8 (0x5u << 0) /**< \brief (HXISI_RLP_CFG) 8 Bits Luminance Only */
#define   HXISI_RLP_CFG_MODE_DATY10 (0x6u << 0) /**< \brief (HXISI_RLP_CFG) 10 Bits Luminance Only */
#define   HXISI_RLP_CFG_MODE_ARGB444 (0x7u << 0) /**< \brief (HXISI_RLP_CFG) 12 bits RGB+4 bits Alpha (MSB) */
#define   HXISI_RLP_CFG_MODE_ARGB555 (0x8u << 0) /**< \brief (HXISI_RLP_CFG) 15 bits RGB+1 bit Alpha (MSB) */
#define   HXISI_RLP_CFG_MODE_RGB565 (0x9u << 0) /**< \brief (HXISI_RLP_CFG) 16 bits RGB */
#define   HXISI_RLP_CFG_MODE_ARGB32 (0xAu << 0) /**< \brief (HXISI_RLP_CFG) 24 bits RGB mode+8 bits Alpha */
#define   HXISI_RLP_CFG_MODE_YYCC (0xBu << 0) /**< \brief (HXISI_RLP_CFG) YCbCr Mode (Full Range) */
#define   HXISI_RLP_CFG_MODE_YYCC_LIMITED (0xCu << 0) /**< \brief (HXISI_RLP_CFG) YCbCr Limited Range Mode */
#define HXISI_RLP_CFG_ALPHA_Pos 8
#define HXISI_RLP_CFG_ALPHA_Msk (0xffu << HXISI_RLP_CFG_ALPHA_Pos) /**< \brief (HXISI_RLP_CFG) Alpha value for Alpha-enabled RGB Mode */
#define HXISI_RLP_CFG_ALPHA(value) ((HXISI_RLP_CFG_ALPHA_Msk & ((value) << HXISI_RLP_CFG_ALPHA_Pos)))
/* -------- HXISI_HIS_CTRL : (ISI Offset: 0x3D4) Histogram Control Register -------- */
#define HXISI_HIS_CTRL_ENABLE (0x1u << 0) /**< \brief (HXISI_HIS_CTRL) Histogram Sub Module Enable */
/* -------- HXISI_HIS_CFG : (ISI Offset: 0x3D8) Histogram Configuration Register -------- */
#define HXISI_HIS_CFG_MODE_Pos 0
#define HXISI_HIS_CFG_MODE_Msk (0x7u << HXISI_HIS_CFG_MODE_Pos) /**< \brief (HXISI_HIS_CFG) Histogram Operating Mode */
#define   HXISI_HIS_CFG_MODE_GR (0x0u << 0) /**< \brief (HXISI_HIS_CFG) Starting Row configuration is G R G R (Red Row) */
#define   HXISI_HIS_CFG_MODE_RG (0x1u << 0) /**< \brief (HXISI_HIS_CFG) Starting Row configuration is R G R G (Red Row) */
#define   HXISI_HIS_CFG_MODE_GB (0x2u << 0) /**< \brief (HXISI_HIS_CFG) Starting Row configuration is G B G B (Blue Row) */
#define   HXISI_HIS_CFG_MODE_BG (0x3u << 0) /**< \brief (HXISI_HIS_CFG) Starting Row configuration is B G B G (Blue Row) */
#define   HXISI_HIS_CFG_MODE_Y (0x4u << 0) /**< \brief (HXISI_HIS_CFG) Luminance Only mode */
#define   HXISI_HIS_CFG_MODE_RAW (0x5u << 0) /**< \brief (HXISI_HIS_CFG) RAW sampling */
#define   HXISI_HIS_CFG_MODE_YCCIR656 (0x6u << 0) /**< \brief (HXISI_HIS_CFG) Luminance Only With CCIR656 10bits or 8 bits mode */
#define HXISI_HIS_CFG_BAYSEL_Pos 4
#define HXISI_HIS_CFG_BAYSEL_Msk (0x3u << HXISI_HIS_CFG_BAYSEL_Pos) /**< \brief (HXISI_HIS_CFG) Bayer Color Component Selection */
#define   HXISI_HIS_CFG_BAYSEL_GRGR (0x0u << 4) /**< \brief (HXISI_HIS_CFG) Starting Row configuration is G R G R (Red Row) */
#define   HXISI_HIS_CFG_BAYSEL_RGRG (0x1u << 4) /**< \brief (HXISI_HIS_CFG) Starting Row configuration is R G R G (Red Row */
#define   HXISI_HIS_CFG_BAYSEL_GBGB (0x2u << 4) /**< \brief (HXISI_HIS_CFG) Starting Row configuration is G B G B (Blue Row */
#define   HXISI_HIS_CFG_BAYSEL_BGBG (0x3u << 4) /**< \brief (HXISI_HIS_CFG) Starting Row configuration is B G B G (Blue Row) */
/* -------- HXISI_DCFG : (ISI Offset: 0x3E0) DMA Configuration Register -------- */
#define HXISI_DCFG_IMODE_Pos 0
#define HXISI_DCFG_IMODE_Msk (0x7u << HXISI_DCFG_IMODE_Pos) /**< \brief (HXISI_DCFG) DMA Input Mode Selection */
#define   HXISI_DCFG_IMODE_PACKED8 (0x0u << 0) /**< \brief (HXISI_DCFG) 8 bits, Single Channel Packed */
#define   HXISI_DCFG_IMODE_PACKED16 (0x1u << 0) /**< \brief (HXISI_DCFG) 16 bits, Single Channel Packed */
#define   HXISI_DCFG_IMODE_PACKED32 (0x2u << 0) /**< \brief (HXISI_DCFG) 32 bits, Single Channel Packed */
#define   HXISI_DCFG_IMODE_YC422SP (0x3u << 0) /**< \brief (HXISI_DCFG) 32 bits, Dual Channel */
#define   HXISI_DCFG_IMODE_YC422P (0x4u << 0) /**< \brief (HXISI_DCFG) 32 bits, Triple Channel */
#define   HXISI_DCFG_IMODE_YC420SP (0x5u << 0) /**< \brief (HXISI_DCFG) 32 bits, Dual Channel */
#define   HXISI_DCFG_IMODE_YC420P (0x6u << 0) /**< \brief (HXISI_DCFG) 32 bits, Triple Channel */
#define HXISI_DCFG_MBSIZE_Pos 4
#define HXISI_DCFG_MBSIZE_Msk (0x3u << HXISI_DCFG_MBSIZE_Pos) /**< \brief (HXISI_DCFG) DMA Memory Burst Size */
#define   HXISI_DCFG_MBSIZE_SINGLE (0x0u << 4) /**< \brief (HXISI_DCFG) DMA single Access */
#define   HXISI_DCFG_MBSIZE_BEATS4 (0x1u << 4) /**< \brief (HXISI_DCFG) 4 beats burst access */
#define   HXISI_DCFG_MBSIZE_BEATS8 (0x2u << 4) /**< \brief (HXISI_DCFG) 8 beats burst access */
#define   HXISI_DCFG_MBSIZE_BEATS16 (0x3u << 4) /**< \brief (HXISI_DCFG) 16 beats burst access */
/* -------- HXISI_DCTRL : (ISI Offset: 0x3E4) DMA Control Register -------- */
#define HXISI_DCTRL_DE (0x1u << 0) /**< \brief (HXISI_DCTRL) Descriptor Enable */
#define HXISI_DCTRL_DVIEW_Pos 1
#define HXISI_DCTRL_DVIEW_Msk (0x3u << HXISI_DCTRL_DVIEW_Pos) /**< \brief (HXISI_DCTRL) Descriptor View */
#define   HXISI_DCTRL_DVIEW_PACKED (0x0u << 1) /**< \brief (HXISI_DCTRL) Address {0} Stride {0} are updated */
#define   HXISI_DCTRL_DVIEW_SEMIPLANAR (0x1u << 1) /**< \brief (HXISI_DCTRL) Address {0,1} Stride {0,1} are updated */
#define   HXISI_DCTRL_DVIEW_PLANAR (0x2u << 1) /**< \brief (HXISI_DCTRL) Address {0,1,2} Stride {0,1,2} are updated */
#define HXISI_DCTRL_IE (0x1u << 4) /**< \brief (HXISI_DCTRL) Interrupt Enable */
#define HXISI_DCTRL_WB (0x1u << 5) /**< \brief (HXISI_DCTRL) Write Back Operation Enable */
/* -------- HXISI_DNDA : (ISI Offset: 0x3E8) DMA Descriptor Address Register -------- */
#define HXISI_DNDA_NDA_Pos 2
#define HXISI_DNDA_NDA_Msk (0x3fffffffu << HXISI_DNDA_NDA_Pos) /**< \brief (HXISI_DNDA) Next Descriptor Address Register */
#define HXISI_DNDA_NDA(value) ((HXISI_DNDA_NDA_Msk & ((value) << HXISI_DNDA_NDA_Pos)))
/* -------- HXISI_DAD : (ISI Offset: N/A) DMA Address 0 Register -------- */
#define HXISI_DAD_AD0_Pos 0
#define HXISI_DAD_AD0_Msk (0xffffffffu << HXISI_DAD_AD0_Pos) /**< \brief (HXISI_DAD) Channel 0 Address */
#define HXISI_DAD_AD0(value) ((HXISI_DAD_AD0_Msk & ((value) << HXISI_DAD_AD0_Pos)))
/* -------- HXISI_DST : (ISI Offset: N/A) DMA Stride 0 Register -------- */
#define HXISI_DST_ST0_Pos 0
#define HXISI_DST_ST0_Msk (0xffffffffu << HXISI_DST_ST0_Pos) /**< \brief (HXISI_DST) Channel 0 Stride */
#define HXISI_DST_ST0(value) ((HXISI_DST_ST0_Msk & ((value) << HXISI_DST_ST0_Pos)))
/* -------- IPB_VERSION : (ISI Offset: 0x40C) Version Register -------- */
#define IPB_VERSION_VERSION_Pos 0
#define IPB_VERSION_VERSION_Msk (0xfffu << IPB_VERSION_VERSION_Pos) /**< \brief (IPB_VERSION)  */
#define IPB_VERSION_MFN_Pos 16
#define IPB_VERSION_MFN_Msk (0x7u << IPB_VERSION_MFN_Pos) /**< \brief (IPB_VERSION)  */
/* -------- HXISI_HIS_ENTRY[512] : (ISI Offset: 0x410) Histogram Entry -------- */
#define HXISI_HIS_ENTRY_COUNT_Pos 0
#define HXISI_HIS_ENTRY_COUNT_Msk (0xfffffu << HXISI_HIS_ENTRY_COUNT_Pos) /**< \brief (HXISI_HIS_ENTRY[512]) Entry Counter */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR L2 Cache Controller */
/* ============================================================================= */
/** \addtogroup SAMA5D2_L2CC L2 Cache Controller */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief L2cc hardware registers */
typedef struct {
  __I  uint32_t L2CC_IDR;        /**< \brief (L2cc Offset: 0x000) Cache ID Register */
  __I  uint32_t L2CC_TYPR;       /**< \brief (L2cc Offset: 0x004) Cache Type Register */
  __I  uint32_t Reserved1[62];
  __IO uint32_t L2CC_CR;         /**< \brief (L2cc Offset: 0x100) Control Register */
  __IO uint32_t L2CC_ACR;        /**< \brief (L2cc Offset: 0x104) Auxiliary Control Register */
  __IO uint32_t L2CC_TRCR;       /**< \brief (L2cc Offset: 0x108) Tag RAM Control Register */
  __IO uint32_t L2CC_DRCR;       /**< \brief (L2cc Offset: 0x10C) Data RAM Control Register */
  __I  uint32_t Reserved2[60];
  __IO uint32_t L2CC_ECR;        /**< \brief (L2cc Offset: 0x200) Event Counter Control Register */
  __IO uint32_t L2CC_ECFGR1;     /**< \brief (L2cc Offset: 0x204) Event Counter 1 Configuration Register */
  __IO uint32_t L2CC_ECFGR0;     /**< \brief (L2cc Offset: 0x208) Event Counter 0 Configuration Register */
  __IO uint32_t L2CC_EVR1;       /**< \brief (L2cc Offset: 0x20C) Event Counter 1 Value Register */
  __IO uint32_t L2CC_EVR0;       /**< \brief (L2cc Offset: 0x210) Event Counter 0 Value Register */
  __IO uint32_t L2CC_IMR;        /**< \brief (L2cc Offset: 0x214) Interrupt Mask Register */
  __I  uint32_t L2CC_MISR;       /**< \brief (L2cc Offset: 0x218) Masked Interrupt Status Register */
  __I  uint32_t L2CC_RISR;       /**< \brief (L2cc Offset: 0x21C) Raw Interrupt Status Register */
  __IO uint32_t L2CC_ICR;        /**< \brief (L2cc Offset: 0x220) Interrupt Clear Register */
  __I  uint32_t Reserved3[323];
  __IO uint32_t L2CC_CSR;        /**< \brief (L2cc Offset: 0x730) Cache Synchronization Register */
  __I  uint32_t Reserved4[15];
  __IO uint32_t L2CC_IPALR;      /**< \brief (L2cc Offset: 0x770) Invalidate Physical Address Line Register */
  __I  uint32_t Reserved5[2];
  __IO uint32_t L2CC_IWR;        /**< \brief (L2cc Offset: 0x77C) Invalidate Way Register */
  __I  uint32_t Reserved6[12];
  __IO uint32_t L2CC_CPALR;      /**< \brief (L2cc Offset: 0x7B0) Clean Physical Address Line Register */
  __I  uint32_t Reserved7[1];
  __IO uint32_t L2CC_CIR;        /**< \brief (L2cc Offset: 0x7B8) Clean Index Register */
  __IO uint32_t L2CC_CWR;        /**< \brief (L2cc Offset: 0x7BC) Clean Way Register */
  __I  uint32_t Reserved8[12];
  __IO uint32_t L2CC_CIPALR;     /**< \brief (L2cc Offset: 0x7F0) Clean Invalidate Physical Address Line Register */
  __I  uint32_t Reserved9[1];
  __IO uint32_t L2CC_CIIR;       /**< \brief (L2cc Offset: 0x7F8) Clean Invalidate Index Register */
  __IO uint32_t L2CC_CIWR;       /**< \brief (L2cc Offset: 0x7FC) Clean Invalidate Way Register */
  __I  uint32_t Reserved10[64];
  __IO uint32_t L2CC_DLKR;       /**< \brief (L2cc Offset: 0x900) Data Lockdown Register */
  __IO uint32_t L2CC_ILKR;       /**< \brief (L2cc Offset: 0x904) Instruction Lockdown Register */
  __I  uint32_t Reserved11[398];
  __IO uint32_t L2CC_DCR;        /**< \brief (L2cc Offset: 0xF40) Debug Control Register */
  __I  uint32_t Reserved12[7];
  __IO uint32_t L2CC_PCR;        /**< \brief (L2cc Offset: 0xF60) Prefetch Control Register */
  __I  uint32_t Reserved13[7];
  __IO uint32_t L2CC_POWCR;      /**< \brief (L2cc Offset: 0xF80) Power Control Register */
} L2cc;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- L2CC_IDR : (L2CC Offset: 0x000) Cache ID Register -------- */
#define L2CC_IDR_ID_Pos 0
#define L2CC_IDR_ID_Msk (0xffffffffu << L2CC_IDR_ID_Pos) /**< \brief (L2CC_IDR) Cache Controller ID */
/* -------- L2CC_TYPR : (L2CC Offset: 0x004) Cache Type Register -------- */
#define L2CC_TYPR_IL2ASS (0x1u << 6) /**< \brief (L2CC_TYPR) Instruction L2 Cache Associativity */
#define L2CC_TYPR_IL2WSIZE_Pos 8
#define L2CC_TYPR_IL2WSIZE_Msk (0x7u << L2CC_TYPR_IL2WSIZE_Pos) /**< \brief (L2CC_TYPR) Instruction L2 Cache Way Size */
#define L2CC_TYPR_DL2ASS (0x1u << 18) /**< \brief (L2CC_TYPR) Data L2 Cache Associativity */
#define L2CC_TYPR_DL2WSIZE_Pos 20
#define L2CC_TYPR_DL2WSIZE_Msk (0x7u << L2CC_TYPR_DL2WSIZE_Pos) /**< \brief (L2CC_TYPR) Data L2 Cache Way Size */
/* -------- L2CC_CR : (L2CC Offset: 0x100) Control Register -------- */
#define L2CC_CR_L2CEN (0x1u << 0) /**< \brief (L2CC_CR) L2 Cache Enable */
/* -------- L2CC_ACR : (L2CC Offset: 0x104) Auxiliary Control Register -------- */
#define L2CC_ACR_HPSO (0x1u << 10) /**< \brief (L2CC_ACR) High Priority for SO and Dev Reads Enable */
#define L2CC_ACR_SBDLE (0x1u << 11) /**< \brief (L2CC_ACR) Store Buffer Device Limitation Enable */
#define L2CC_ACR_EXCC (0x1u << 12) /**< \brief (L2CC_ACR) Exclusive Cache Configuration */
#define L2CC_ACR_SAIE (0x1u << 13) /**< \brief (L2CC_ACR) Shared Attribute Invalidate Enable */
#define L2CC_ACR_ASS (0x1u << 16) /**< \brief (L2CC_ACR) Associativity */
#define L2CC_ACR_WAYSIZE_Pos 17
#define L2CC_ACR_WAYSIZE_Msk (0x7u << L2CC_ACR_WAYSIZE_Pos) /**< \brief (L2CC_ACR) Way Size */
#define   L2CC_ACR_WAYSIZE_16KB_WAY (0x1u << 17) /**< \brief (L2CC_ACR) 16 Kbyte way set associative */
#define L2CC_ACR_EMBEN (0x1u << 20) /**< \brief (L2CC_ACR) Event Monitor Bus Enable */
#define L2CC_ACR_PEN (0x1u << 21) /**< \brief (L2CC_ACR) Parity Enable */
#define L2CC_ACR_SAOEN (0x1u << 22) /**< \brief (L2CC_ACR) Shared Attribute Override Enable */
#define L2CC_ACR_FWA_Pos 23
#define L2CC_ACR_FWA_Msk (0x3u << L2CC_ACR_FWA_Pos) /**< \brief (L2CC_ACR) Force Write Allocate */
#define L2CC_ACR_FWA(value) ((L2CC_ACR_FWA_Msk & ((value) << L2CC_ACR_FWA_Pos)))
#define L2CC_ACR_CRPOL (0x1u << 25) /**< \brief (L2CC_ACR) Cache Replacement Policy */
#define L2CC_ACR_NSLEN (0x1u << 26) /**< \brief (L2CC_ACR) Non-Secure Lockdown Enable */
#define L2CC_ACR_NSIAC (0x1u << 27) /**< \brief (L2CC_ACR) Non-Secure Interrupt Access Control */
#define L2CC_ACR_DPEN (0x1u << 28) /**< \brief (L2CC_ACR) Data Prefetch Enable */
#define L2CC_ACR_IPEN (0x1u << 29) /**< \brief (L2CC_ACR) Instruction Prefetch Enable */
/* -------- L2CC_TRCR : (L2CC Offset: 0x108) Tag RAM Control Register -------- */
#define L2CC_TRCR_TSETLAT_Pos 0
#define L2CC_TRCR_TSETLAT_Msk (0x7u << L2CC_TRCR_TSETLAT_Pos) /**< \brief (L2CC_TRCR) Setup Latency */
#define L2CC_TRCR_TSETLAT(value) ((L2CC_TRCR_TSETLAT_Msk & ((value) << L2CC_TRCR_TSETLAT_Pos)))
#define L2CC_TRCR_TRDLAT_Pos 4
#define L2CC_TRCR_TRDLAT_Msk (0x7u << L2CC_TRCR_TRDLAT_Pos) /**< \brief (L2CC_TRCR) Read Access Latency */
#define L2CC_TRCR_TRDLAT(value) ((L2CC_TRCR_TRDLAT_Msk & ((value) << L2CC_TRCR_TRDLAT_Pos)))
#define L2CC_TRCR_TWRLAT_Pos 8
#define L2CC_TRCR_TWRLAT_Msk (0x7u << L2CC_TRCR_TWRLAT_Pos) /**< \brief (L2CC_TRCR) Write Access Latency */
#define L2CC_TRCR_TWRLAT(value) ((L2CC_TRCR_TWRLAT_Msk & ((value) << L2CC_TRCR_TWRLAT_Pos)))
/* -------- L2CC_DRCR : (L2CC Offset: 0x10C) Data RAM Control Register -------- */
#define L2CC_DRCR_DSETLAT_Pos 0
#define L2CC_DRCR_DSETLAT_Msk (0x7u << L2CC_DRCR_DSETLAT_Pos) /**< \brief (L2CC_DRCR) Setup Latency */
#define L2CC_DRCR_DSETLAT(value) ((L2CC_DRCR_DSETLAT_Msk & ((value) << L2CC_DRCR_DSETLAT_Pos)))
#define L2CC_DRCR_DRDLAT_Pos 4
#define L2CC_DRCR_DRDLAT_Msk (0x7u << L2CC_DRCR_DRDLAT_Pos) /**< \brief (L2CC_DRCR) Read Access Latency */
#define L2CC_DRCR_DRDLAT(value) ((L2CC_DRCR_DRDLAT_Msk & ((value) << L2CC_DRCR_DRDLAT_Pos)))
#define L2CC_DRCR_DWRLAT_Pos 8
#define L2CC_DRCR_DWRLAT_Msk (0x7u << L2CC_DRCR_DWRLAT_Pos) /**< \brief (L2CC_DRCR) Write Access Latency */
#define L2CC_DRCR_DWRLAT(value) ((L2CC_DRCR_DWRLAT_Msk & ((value) << L2CC_DRCR_DWRLAT_Pos)))
/* -------- L2CC_ECR : (L2CC Offset: 0x200) Event Counter Control Register -------- */
#define L2CC_ECR_EVCEN (0x1u << 0) /**< \brief (L2CC_ECR) Event Counter Enable */
#define L2CC_ECR_EVC0RST (0x1u << 1) /**< \brief (L2CC_ECR) Event Counter 0 Reset */
#define L2CC_ECR_EVC1RST (0x1u << 2) /**< \brief (L2CC_ECR) Event Counter 1 Reset */
/* -------- L2CC_ECFGR1 : (L2CC Offset: 0x204) Event Counter 1 Configuration Register -------- */
#define L2CC_ECFGR1_EIGEN_Pos 0
#define L2CC_ECFGR1_EIGEN_Msk (0x3u << L2CC_ECFGR1_EIGEN_Pos) /**< \brief (L2CC_ECFGR1) Event Counter Interrupt Generation */
#define   L2CC_ECFGR1_EIGEN_INT_DIS (0x0u << 0) /**< \brief (L2CC_ECFGR1) Disables (default) */
#define   L2CC_ECFGR1_EIGEN_INT_EN_INCR (0x1u << 0) /**< \brief (L2CC_ECFGR1) Enables with Increment condition */
#define   L2CC_ECFGR1_EIGEN_INT_EN_OVER (0x2u << 0) /**< \brief (L2CC_ECFGR1) Enables with Overflow condition */
#define   L2CC_ECFGR1_EIGEN_INT_GEN_DIS (0x3u << 0) /**< \brief (L2CC_ECFGR1) Disables Interrupt generation */
#define L2CC_ECFGR1_ESRC_Pos 2
#define L2CC_ECFGR1_ESRC_Msk (0xfu << L2CC_ECFGR1_ESRC_Pos) /**< \brief (L2CC_ECFGR1) Event Counter Source */
#define   L2CC_ECFGR1_ESRC_CNT_DIS (0x0u << 2) /**< \brief (L2CC_ECFGR1) Counter Disabled */
#define   L2CC_ECFGR1_ESRC_SRC_CO (0x1u << 2) /**< \brief (L2CC_ECFGR1) Source is CO */
#define   L2CC_ECFGR1_ESRC_SRC_DRHIT (0x2u << 2) /**< \brief (L2CC_ECFGR1) Source is DRHIT */
#define   L2CC_ECFGR1_ESRC_SRC_DRREQ (0x3u << 2) /**< \brief (L2CC_ECFGR1) Source is DRREQ */
#define   L2CC_ECFGR1_ESRC_SRC_DWHIT (0x4u << 2) /**< \brief (L2CC_ECFGR1) Source is DWHIT */
#define   L2CC_ECFGR1_ESRC_SRC_DWREQ (0x5u << 2) /**< \brief (L2CC_ECFGR1) Source is DWREQ */
#define   L2CC_ECFGR1_ESRC_SRC_DWTREQ (0x6u << 2) /**< \brief (L2CC_ECFGR1) Source is DWTREQ */
#define   L2CC_ECFGR1_ESRC_SRC_IRHIT (0x7u << 2) /**< \brief (L2CC_ECFGR1) Source is IRHIT */
#define   L2CC_ECFGR1_ESRC_SRC_IRREQ (0x8u << 2) /**< \brief (L2CC_ECFGR1) Source is IRREQ */
#define   L2CC_ECFGR1_ESRC_SRC_WA (0x9u << 2) /**< \brief (L2CC_ECFGR1) Source is WA */
#define   L2CC_ECFGR1_ESRC_SRC_IPFALLOC (0xAu << 2) /**< \brief (L2CC_ECFGR1) Source is IPFALLOC */
#define   L2CC_ECFGR1_ESRC_SRC_EPFHIT (0xBu << 2) /**< \brief (L2CC_ECFGR1) Source is EPFHIT */
#define   L2CC_ECFGR1_ESRC_SRC_EPFALLOC (0xCu << 2) /**< \brief (L2CC_ECFGR1) Source is EPFALLOC */
#define   L2CC_ECFGR1_ESRC_SRC_SRRCVD (0xDu << 2) /**< \brief (L2CC_ECFGR1) Source is SRRCVD */
#define   L2CC_ECFGR1_ESRC_SRC_SRCONF (0xEu << 2) /**< \brief (L2CC_ECFGR1) Source is SRCONF */
#define   L2CC_ECFGR1_ESRC_SRC_EPFRCVD (0xFu << 2) /**< \brief (L2CC_ECFGR1) Source is EPFRCVD */
/* -------- L2CC_ECFGR0 : (L2CC Offset: 0x208) Event Counter 0 Configuration Register -------- */
#define L2CC_ECFGR0_EIGEN_Pos 0
#define L2CC_ECFGR0_EIGEN_Msk (0x3u << L2CC_ECFGR0_EIGEN_Pos) /**< \brief (L2CC_ECFGR0) Event Counter Interrupt Generation */
#define   L2CC_ECFGR0_EIGEN_INT_DIS (0x0u << 0) /**< \brief (L2CC_ECFGR0) Disables (default) */
#define   L2CC_ECFGR0_EIGEN_INT_EN_INCR (0x1u << 0) /**< \brief (L2CC_ECFGR0) Enables with Increment condition */
#define   L2CC_ECFGR0_EIGEN_INT_EN_OVER (0x2u << 0) /**< \brief (L2CC_ECFGR0) Enables with Overflow condition */
#define   L2CC_ECFGR0_EIGEN_INT_GEN_DIS (0x3u << 0) /**< \brief (L2CC_ECFGR0) Disables Interrupt generation */
#define L2CC_ECFGR0_ESRC_Pos 2
#define L2CC_ECFGR0_ESRC_Msk (0xfu << L2CC_ECFGR0_ESRC_Pos) /**< \brief (L2CC_ECFGR0) Event Counter Source */
#define   L2CC_ECFGR0_ESRC_CNT_DIS (0x0u << 2) /**< \brief (L2CC_ECFGR0) Counter Disabled */
#define   L2CC_ECFGR0_ESRC_SRC_CO (0x1u << 2) /**< \brief (L2CC_ECFGR0) Source is CO */
#define   L2CC_ECFGR0_ESRC_SRC_DRHIT (0x2u << 2) /**< \brief (L2CC_ECFGR0) Source is DRHIT */
#define   L2CC_ECFGR0_ESRC_SRC_DRREQ (0x3u << 2) /**< \brief (L2CC_ECFGR0) Source is DRREQ */
#define   L2CC_ECFGR0_ESRC_SRC_DWHIT (0x4u << 2) /**< \brief (L2CC_ECFGR0) Source is DWHIT */
#define   L2CC_ECFGR0_ESRC_SRC_DWREQ (0x5u << 2) /**< \brief (L2CC_ECFGR0) Source is DWREQ */
#define   L2CC_ECFGR0_ESRC_SRC_DWTREQ (0x6u << 2) /**< \brief (L2CC_ECFGR0) Source is DWTREQ */
#define   L2CC_ECFGR0_ESRC_SRC_IRHIT (0x7u << 2) /**< \brief (L2CC_ECFGR0) Source is IRHIT */
#define   L2CC_ECFGR0_ESRC_SRC_IRREQ (0x8u << 2) /**< \brief (L2CC_ECFGR0) Source is IRREQ */
#define   L2CC_ECFGR0_ESRC_SRC_WA (0x9u << 2) /**< \brief (L2CC_ECFGR0) Source is WA */
#define   L2CC_ECFGR0_ESRC_SRC_IPFALLOC (0xAu << 2) /**< \brief (L2CC_ECFGR0) Source is IPFALLOC */
#define   L2CC_ECFGR0_ESRC_SRC_EPFHIT (0xBu << 2) /**< \brief (L2CC_ECFGR0) Source is EPFHIT */
#define   L2CC_ECFGR0_ESRC_SRC_EPFALLOC (0xCu << 2) /**< \brief (L2CC_ECFGR0) Source is EPFALLOC */
#define   L2CC_ECFGR0_ESRC_SRC_SRRCVD (0xDu << 2) /**< \brief (L2CC_ECFGR0) Source is SRRCVD */
#define   L2CC_ECFGR0_ESRC_SRC_SRCONF (0xEu << 2) /**< \brief (L2CC_ECFGR0) Source is SRCONF */
#define   L2CC_ECFGR0_ESRC_SRC_EPFRCVD (0xFu << 2) /**< \brief (L2CC_ECFGR0) Source is EPFRCVD */
/* -------- L2CC_EVR1 : (L2CC Offset: 0x20C) Event Counter 1 Value Register -------- */
#define L2CC_EVR1_VALUE_Pos 0
#define L2CC_EVR1_VALUE_Msk (0xffffffffu << L2CC_EVR1_VALUE_Pos) /**< \brief (L2CC_EVR1) Event Counter Value */
#define L2CC_EVR1_VALUE(value) ((L2CC_EVR1_VALUE_Msk & ((value) << L2CC_EVR1_VALUE_Pos)))
/* -------- L2CC_EVR0 : (L2CC Offset: 0x210) Event Counter 0 Value Register -------- */
#define L2CC_EVR0_VALUE_Pos 0
#define L2CC_EVR0_VALUE_Msk (0xffffffffu << L2CC_EVR0_VALUE_Pos) /**< \brief (L2CC_EVR0) Event Counter Value */
#define L2CC_EVR0_VALUE(value) ((L2CC_EVR0_VALUE_Msk & ((value) << L2CC_EVR0_VALUE_Pos)))
/* -------- L2CC_IMR : (L2CC Offset: 0x214) Interrupt Mask Register -------- */
#define L2CC_IMR_ECNTR (0x1u << 0) /**< \brief (L2CC_IMR) Event Counter 1/0 Overflow Increment */
#define L2CC_IMR_PARRT (0x1u << 1) /**< \brief (L2CC_IMR) Parity Error on L2 Tag RAM, Read */
#define L2CC_IMR_PARRD (0x1u << 2) /**< \brief (L2CC_IMR) Parity Error on L2 Data RAM, Read */
#define L2CC_IMR_ERRWT (0x1u << 3) /**< \brief (L2CC_IMR) Error on L2 Tag RAM, Write */
#define L2CC_IMR_ERRWD (0x1u << 4) /**< \brief (L2CC_IMR) Error on L2 Data RAM, Write */
#define L2CC_IMR_ERRRT (0x1u << 5) /**< \brief (L2CC_IMR) Error on L2 Tag RAM, Read */
#define L2CC_IMR_ERRRD (0x1u << 6) /**< \brief (L2CC_IMR) Error on L2 Data RAM, Read */
#define L2CC_IMR_SLVERR (0x1u << 7) /**< \brief (L2CC_IMR) SLVERR from L3 Memory */
#define L2CC_IMR_DECERR (0x1u << 8) /**< \brief (L2CC_IMR) DECERR from L3 Memory */
/* -------- L2CC_MISR : (L2CC Offset: 0x218) Masked Interrupt Status Register -------- */
#define L2CC_MISR_ECNTR (0x1u << 0) /**< \brief (L2CC_MISR) Event Counter 1/0 Overflow Increment */
#define L2CC_MISR_PARRT (0x1u << 1) /**< \brief (L2CC_MISR) Parity Error on L2 Tag RAM, Read */
#define L2CC_MISR_PARRD (0x1u << 2) /**< \brief (L2CC_MISR) Parity Error on L2 Data RAM, Read */
#define L2CC_MISR_ERRWT (0x1u << 3) /**< \brief (L2CC_MISR) Error on L2 Tag RAM, Write */
#define L2CC_MISR_ERRWD (0x1u << 4) /**< \brief (L2CC_MISR) Error on L2 Data RAM, Write */
#define L2CC_MISR_ERRRT (0x1u << 5) /**< \brief (L2CC_MISR) Error on L2 Tag RAM, Read */
#define L2CC_MISR_ERRRD (0x1u << 6) /**< \brief (L2CC_MISR) Error on L2 Data RAM, Read */
#define L2CC_MISR_SLVERR (0x1u << 7) /**< \brief (L2CC_MISR) SLVERR from L3 memory */
#define L2CC_MISR_DECERR (0x1u << 8) /**< \brief (L2CC_MISR) DECERR from L3 memory */
/* -------- L2CC_RISR : (L2CC Offset: 0x21C) Raw Interrupt Status Register -------- */
#define L2CC_RISR_ECNTR (0x1u << 0) /**< \brief (L2CC_RISR) Event Counter 1/0 Overflow Increment */
#define L2CC_RISR_PARRT (0x1u << 1) /**< \brief (L2CC_RISR) Parity Error on L2 Tag RAM, Read */
#define L2CC_RISR_PARRD (0x1u << 2) /**< \brief (L2CC_RISR) Parity Error on L2 Data RAM, Read */
#define L2CC_RISR_ERRWT (0x1u << 3) /**< \brief (L2CC_RISR) Error on L2 Tag RAM, Write */
#define L2CC_RISR_ERRWD (0x1u << 4) /**< \brief (L2CC_RISR) Error on L2 Data RAM, Write */
#define L2CC_RISR_ERRRT (0x1u << 5) /**< \brief (L2CC_RISR) Error on L2 Tag RAM, Read */
#define L2CC_RISR_ERRRD (0x1u << 6) /**< \brief (L2CC_RISR) Error on L2 Data RAM, Read */
#define L2CC_RISR_SLVERR (0x1u << 7) /**< \brief (L2CC_RISR) SLVERR from L3 memory */
#define L2CC_RISR_DECERR (0x1u << 8) /**< \brief (L2CC_RISR) DECERR from L3 memory */
/* -------- L2CC_ICR : (L2CC Offset: 0x220) Interrupt Clear Register -------- */
#define L2CC_ICR_ECNTR (0x1u << 0) /**< \brief (L2CC_ICR) Event Counter 1/0 Overflow Increment */
#define L2CC_ICR_PARRT (0x1u << 1) /**< \brief (L2CC_ICR) Parity Error on L2 Tag RAM, Read */
#define L2CC_ICR_PARRD (0x1u << 2) /**< \brief (L2CC_ICR) Parity Error on L2 Data RAM, Read */
#define L2CC_ICR_ERRWT (0x1u << 3) /**< \brief (L2CC_ICR) Error on L2 Tag RAM, Write */
#define L2CC_ICR_ERRWD (0x1u << 4) /**< \brief (L2CC_ICR) Error on L2 Data RAM, Write */
#define L2CC_ICR_ERRRT (0x1u << 5) /**< \brief (L2CC_ICR) Error on L2 Tag RAM, Read */
#define L2CC_ICR_ERRRD (0x1u << 6) /**< \brief (L2CC_ICR) Error on L2 Data RAM, Read */
#define L2CC_ICR_SLVERR (0x1u << 7) /**< \brief (L2CC_ICR) SLVERR from L3 memory */
#define L2CC_ICR_DECERR (0x1u << 8) /**< \brief (L2CC_ICR) DECERR from L3 memory */
/* -------- L2CC_CSR : (L2CC Offset: 0x730) Cache Synchronization Register -------- */
#define L2CC_CSR_C (0x1u << 0) /**< \brief (L2CC_CSR) Cache Synchronization Status */
/* -------- L2CC_IPALR : (L2CC Offset: 0x770) Invalidate Physical Address Line Register -------- */
#define L2CC_IPALR_C (0x1u << 0) /**< \brief (L2CC_IPALR) Cache Synchronization Status */
#define L2CC_IPALR_IDX_Pos 5
#define L2CC_IPALR_IDX_Msk (0x1ffu << L2CC_IPALR_IDX_Pos) /**< \brief (L2CC_IPALR) Index Number */
#define L2CC_IPALR_IDX(value) ((L2CC_IPALR_IDX_Msk & ((value) << L2CC_IPALR_IDX_Pos)))
#define L2CC_IPALR_TAG_Pos 14
#define L2CC_IPALR_TAG_Msk (0x3ffffu << L2CC_IPALR_TAG_Pos) /**< \brief (L2CC_IPALR) Tag Number */
#define L2CC_IPALR_TAG(value) ((L2CC_IPALR_TAG_Msk & ((value) << L2CC_IPALR_TAG_Pos)))
/* -------- L2CC_IWR : (L2CC Offset: 0x77C) Invalidate Way Register -------- */
#define L2CC_IWR_WAY0 (0x1u << 0) /**< \brief (L2CC_IWR) Invalidate Way Number 0 */
#define L2CC_IWR_WAY1 (0x1u << 1) /**< \brief (L2CC_IWR) Invalidate Way Number 1 */
#define L2CC_IWR_WAY2 (0x1u << 2) /**< \brief (L2CC_IWR) Invalidate Way Number 2 */
#define L2CC_IWR_WAY3 (0x1u << 3) /**< \brief (L2CC_IWR) Invalidate Way Number 3 */
#define L2CC_IWR_WAY4 (0x1u << 4) /**< \brief (L2CC_IWR) Invalidate Way Number 4 */
#define L2CC_IWR_WAY5 (0x1u << 5) /**< \brief (L2CC_IWR) Invalidate Way Number 5 */
#define L2CC_IWR_WAY6 (0x1u << 6) /**< \brief (L2CC_IWR) Invalidate Way Number 6 */
#define L2CC_IWR_WAY7 (0x1u << 7) /**< \brief (L2CC_IWR) Invalidate Way Number 7 */
/* -------- L2CC_CPALR : (L2CC Offset: 0x7B0) Clean Physical Address Line Register -------- */
#define L2CC_CPALR_C (0x1u << 0) /**< \brief (L2CC_CPALR) Cache Synchronization Status */
#define L2CC_CPALR_IDX_Pos 5
#define L2CC_CPALR_IDX_Msk (0x1ffu << L2CC_CPALR_IDX_Pos) /**< \brief (L2CC_CPALR) Index number */
#define L2CC_CPALR_IDX(value) ((L2CC_CPALR_IDX_Msk & ((value) << L2CC_CPALR_IDX_Pos)))
#define L2CC_CPALR_TAG_Pos 14
#define L2CC_CPALR_TAG_Msk (0x3ffffu << L2CC_CPALR_TAG_Pos) /**< \brief (L2CC_CPALR) Tag number */
#define L2CC_CPALR_TAG(value) ((L2CC_CPALR_TAG_Msk & ((value) << L2CC_CPALR_TAG_Pos)))
/* -------- L2CC_CIR : (L2CC Offset: 0x7B8) Clean Index Register -------- */
#define L2CC_CIR_C (0x1u << 0) /**< \brief (L2CC_CIR) Cache Synchronization Status */
#define L2CC_CIR_IDX_Pos 5
#define L2CC_CIR_IDX_Msk (0x1ffu << L2CC_CIR_IDX_Pos) /**< \brief (L2CC_CIR) Index number */
#define L2CC_CIR_IDX(value) ((L2CC_CIR_IDX_Msk & ((value) << L2CC_CIR_IDX_Pos)))
#define L2CC_CIR_WAY_Pos 28
#define L2CC_CIR_WAY_Msk (0x7u << L2CC_CIR_WAY_Pos) /**< \brief (L2CC_CIR) Way number */
#define L2CC_CIR_WAY(value) ((L2CC_CIR_WAY_Msk & ((value) << L2CC_CIR_WAY_Pos)))
/* -------- L2CC_CWR : (L2CC Offset: 0x7BC) Clean Way Register -------- */
#define L2CC_CWR_WAY0 (0x1u << 0) /**< \brief (L2CC_CWR) Clean Way Number 0 */
#define L2CC_CWR_WAY1 (0x1u << 1) /**< \brief (L2CC_CWR) Clean Way Number 1 */
#define L2CC_CWR_WAY2 (0x1u << 2) /**< \brief (L2CC_CWR) Clean Way Number 2 */
#define L2CC_CWR_WAY3 (0x1u << 3) /**< \brief (L2CC_CWR) Clean Way Number 3 */
#define L2CC_CWR_WAY4 (0x1u << 4) /**< \brief (L2CC_CWR) Clean Way Number 4 */
#define L2CC_CWR_WAY5 (0x1u << 5) /**< \brief (L2CC_CWR) Clean Way Number 5 */
#define L2CC_CWR_WAY6 (0x1u << 6) /**< \brief (L2CC_CWR) Clean Way Number 6 */
#define L2CC_CWR_WAY7 (0x1u << 7) /**< \brief (L2CC_CWR) Clean Way Number 7 */
/* -------- L2CC_CIPALR : (L2CC Offset: 0x7F0) Clean Invalidate Physical Address Line Register -------- */
#define L2CC_CIPALR_C (0x1u << 0) /**< \brief (L2CC_CIPALR) Cache Synchronization Status */
#define L2CC_CIPALR_IDX_Pos 5
#define L2CC_CIPALR_IDX_Msk (0x1ffu << L2CC_CIPALR_IDX_Pos) /**< \brief (L2CC_CIPALR) Index Number */
#define L2CC_CIPALR_IDX(value) ((L2CC_CIPALR_IDX_Msk & ((value) << L2CC_CIPALR_IDX_Pos)))
#define L2CC_CIPALR_TAG_Pos 14
#define L2CC_CIPALR_TAG_Msk (0x3ffffu << L2CC_CIPALR_TAG_Pos) /**< \brief (L2CC_CIPALR) Tag Number */
#define L2CC_CIPALR_TAG(value) ((L2CC_CIPALR_TAG_Msk & ((value) << L2CC_CIPALR_TAG_Pos)))
/* -------- L2CC_CIIR : (L2CC Offset: 0x7F8) Clean Invalidate Index Register -------- */
#define L2CC_CIIR_C (0x1u << 0) /**< \brief (L2CC_CIIR) Cache Synchronization Status */
#define L2CC_CIIR_IDX_Pos 5
#define L2CC_CIIR_IDX_Msk (0x1ffu << L2CC_CIIR_IDX_Pos) /**< \brief (L2CC_CIIR) Index Number */
#define L2CC_CIIR_IDX(value) ((L2CC_CIIR_IDX_Msk & ((value) << L2CC_CIIR_IDX_Pos)))
#define L2CC_CIIR_WAY_Pos 28
#define L2CC_CIIR_WAY_Msk (0x7u << L2CC_CIIR_WAY_Pos) /**< \brief (L2CC_CIIR) Way Number */
#define L2CC_CIIR_WAY(value) ((L2CC_CIIR_WAY_Msk & ((value) << L2CC_CIIR_WAY_Pos)))
/* -------- L2CC_CIWR : (L2CC Offset: 0x7FC) Clean Invalidate Way Register -------- */
#define L2CC_CIWR_WAY0 (0x1u << 0) /**< \brief (L2CC_CIWR) Clean Invalidate Way Number 0 */
#define L2CC_CIWR_WAY1 (0x1u << 1) /**< \brief (L2CC_CIWR) Clean Invalidate Way Number 1 */
#define L2CC_CIWR_WAY2 (0x1u << 2) /**< \brief (L2CC_CIWR) Clean Invalidate Way Number 2 */
#define L2CC_CIWR_WAY3 (0x1u << 3) /**< \brief (L2CC_CIWR) Clean Invalidate Way Number 3 */
#define L2CC_CIWR_WAY4 (0x1u << 4) /**< \brief (L2CC_CIWR) Clean Invalidate Way Number 4 */
#define L2CC_CIWR_WAY5 (0x1u << 5) /**< \brief (L2CC_CIWR) Clean Invalidate Way Number 5 */
#define L2CC_CIWR_WAY6 (0x1u << 6) /**< \brief (L2CC_CIWR) Clean Invalidate Way Number 6 */
#define L2CC_CIWR_WAY7 (0x1u << 7) /**< \brief (L2CC_CIWR) Clean Invalidate Way Number 7 */
/* -------- L2CC_DLKR : (L2CC Offset: 0x900) Data Lockdown Register -------- */
#define L2CC_DLKR_DLK0 (0x1u << 0) /**< \brief (L2CC_DLKR) Data Lockdown in Way Number 0 */
#define L2CC_DLKR_DLK1 (0x1u << 1) /**< \brief (L2CC_DLKR) Data Lockdown in Way Number 1 */
#define L2CC_DLKR_DLK2 (0x1u << 2) /**< \brief (L2CC_DLKR) Data Lockdown in Way Number 2 */
#define L2CC_DLKR_DLK3 (0x1u << 3) /**< \brief (L2CC_DLKR) Data Lockdown in Way Number 3 */
#define L2CC_DLKR_DLK4 (0x1u << 4) /**< \brief (L2CC_DLKR) Data Lockdown in Way Number 4 */
#define L2CC_DLKR_DLK5 (0x1u << 5) /**< \brief (L2CC_DLKR) Data Lockdown in Way Number 5 */
#define L2CC_DLKR_DLK6 (0x1u << 6) /**< \brief (L2CC_DLKR) Data Lockdown in Way Number 6 */
#define L2CC_DLKR_DLK7 (0x1u << 7) /**< \brief (L2CC_DLKR) Data Lockdown in Way Number 7 */
/* -------- L2CC_ILKR : (L2CC Offset: 0x904) Instruction Lockdown Register -------- */
#define L2CC_ILKR_ILK0 (0x1u << 0) /**< \brief (L2CC_ILKR) Instruction Lockdown in Way Number 0 */
#define L2CC_ILKR_ILK1 (0x1u << 1) /**< \brief (L2CC_ILKR) Instruction Lockdown in Way Number 1 */
#define L2CC_ILKR_ILK2 (0x1u << 2) /**< \brief (L2CC_ILKR) Instruction Lockdown in Way Number 2 */
#define L2CC_ILKR_ILK3 (0x1u << 3) /**< \brief (L2CC_ILKR) Instruction Lockdown in Way Number 3 */
#define L2CC_ILKR_ILK4 (0x1u << 4) /**< \brief (L2CC_ILKR) Instruction Lockdown in Way Number 4 */
#define L2CC_ILKR_ILK5 (0x1u << 5) /**< \brief (L2CC_ILKR) Instruction Lockdown in Way Number 5 */
#define L2CC_ILKR_ILK6 (0x1u << 6) /**< \brief (L2CC_ILKR) Instruction Lockdown in Way Number 6 */
#define L2CC_ILKR_ILK7 (0x1u << 7) /**< \brief (L2CC_ILKR) Instruction Lockdown in Way Number 7 */
/* -------- L2CC_DCR : (L2CC Offset: 0xF40) Debug Control Register -------- */
#define L2CC_DCR_DCL (0x1u << 0) /**< \brief (L2CC_DCR) Disable Cache Linefill */
#define L2CC_DCR_DWB (0x1u << 1) /**< \brief (L2CC_DCR) Disable Write-back, Force Write-through */
#define L2CC_DCR_SPNIDEN (0x1u << 2) /**< \brief (L2CC_DCR) SPNIDEN Value */
/* -------- L2CC_PCR : (L2CC Offset: 0xF60) Prefetch Control Register -------- */
#define L2CC_PCR_OFFSET_Pos 0
#define L2CC_PCR_OFFSET_Msk (0x1fu << L2CC_PCR_OFFSET_Pos) /**< \brief (L2CC_PCR) Prefetch Offset */
#define L2CC_PCR_OFFSET(value) ((L2CC_PCR_OFFSET_Msk & ((value) << L2CC_PCR_OFFSET_Pos)))
#define L2CC_PCR_NSIDEN (0x1u << 21) /**< \brief (L2CC_PCR) Not Same ID on Exclusive Sequence Enable */
#define L2CC_PCR_IDLEN (0x1u << 23) /**< \brief (L2CC_PCR) INCR Double Linefill Enable */
#define L2CC_PCR_PDEN (0x1u << 24) /**< \brief (L2CC_PCR) Prefetch Drop Enable */
#define L2CC_PCR_DLFWRDIS (0x1u << 27) /**< \brief (L2CC_PCR) Double Linefill on WRAP Read Disable */
#define L2CC_PCR_DATPEN (0x1u << 28) /**< \brief (L2CC_PCR) Data Prefetch Enable */
#define L2CC_PCR_INSPEN (0x1u << 29) /**< \brief (L2CC_PCR) Instruction Prefetch Enable */
#define L2CC_PCR_DLEN (0x1u << 30) /**< \brief (L2CC_PCR) Double Linefill Enable */
/* -------- L2CC_POWCR : (L2CC Offset: 0xF80) Power Control Register -------- */
#define L2CC_POWCR_STBYEN (0x1u << 0) /**< \brief (L2CC_POWCR) Standby Mode Enable */
#define L2CC_POWCR_DCKGATEN (0x1u << 1) /**< \brief (L2CC_POWCR) Dynamic Clock Gating Enable */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR LCD Controller */
/* ============================================================================= */
/** \addtogroup SAMA5D2_LCDC LCD Controller */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief Lcdc hardware registers */
typedef struct {
  __IO uint32_t LCDC_LCDCFG0;       /**< \brief (Lcdc Offset: 0x00000000) LCD Controller Configuration Register 0 */
  __IO uint32_t LCDC_LCDCFG1;       /**< \brief (Lcdc Offset: 0x00000004) LCD Controller Configuration Register 1 */
  __IO uint32_t LCDC_LCDCFG2;       /**< \brief (Lcdc Offset: 0x00000008) LCD Controller Configuration Register 2 */
  __IO uint32_t LCDC_LCDCFG3;       /**< \brief (Lcdc Offset: 0x0000000C) LCD Controller Configuration Register 3 */
  __IO uint32_t LCDC_LCDCFG4;       /**< \brief (Lcdc Offset: 0x00000010) LCD Controller Configuration Register 4 */
  __IO uint32_t LCDC_LCDCFG5;       /**< \brief (Lcdc Offset: 0x00000014) LCD Controller Configuration Register 5 */
  __IO uint32_t LCDC_LCDCFG6;       /**< \brief (Lcdc Offset: 0x00000018) LCD Controller Configuration Register 6 */
  __I  uint32_t Reserved1[1];
  __O  uint32_t LCDC_LCDEN;         /**< \brief (Lcdc Offset: 0x00000020) LCD Controller Enable Register */
  __O  uint32_t LCDC_LCDDIS;        /**< \brief (Lcdc Offset: 0x00000024) LCD Controller Disable Register */
  __I  uint32_t LCDC_LCDSR;         /**< \brief (Lcdc Offset: 0x00000028) LCD Controller Status Register */
  __O  uint32_t LCDC_LCDIER;        /**< \brief (Lcdc Offset: 0x0000002C) LCD Controller Interrupt Enable Register */
  __O  uint32_t LCDC_LCDIDR;        /**< \brief (Lcdc Offset: 0x00000030) LCD Controller Interrupt Disable Register */
  __I  uint32_t LCDC_LCDIMR;        /**< \brief (Lcdc Offset: 0x00000034) LCD Controller Interrupt Mask Register */
  __I  uint32_t LCDC_LCDISR;        /**< \brief (Lcdc Offset: 0x00000038) LCD Controller Interrupt Status Register */
  __O  uint32_t LCDC_ATTR;          /**< \brief (Lcdc Offset: 0x0000003C) LCD Controller Attribute Register */
  __O  uint32_t LCDC_BASECHER;      /**< \brief (Lcdc Offset: 0x00000040) Base Layer Channel Enable Register */
  __O  uint32_t LCDC_BASECHDR;      /**< \brief (Lcdc Offset: 0x00000044) Base Layer Channel Disable Register */
  __I  uint32_t LCDC_BASECHSR;      /**< \brief (Lcdc Offset: 0x00000048) Base Layer Channel Status Register */
  __O  uint32_t LCDC_BASEIER;       /**< \brief (Lcdc Offset: 0x0000004C) Base Layer Interrupt Enable Register */
  __O  uint32_t LCDC_BASEIDR;       /**< \brief (Lcdc Offset: 0x00000050) Base Layer Interrupt Disabled Register */
  __I  uint32_t LCDC_BASEIMR;       /**< \brief (Lcdc Offset: 0x00000054) Base Layer Interrupt Mask Register */
  __I  uint32_t LCDC_BASEISR;       /**< \brief (Lcdc Offset: 0x00000058) Base Layer Interrupt Status Register */
  __IO uint32_t LCDC_BASEHEAD;      /**< \brief (Lcdc Offset: 0x0000005C) Base DMA Head Register */
  __IO uint32_t LCDC_BASEADDR;      /**< \brief (Lcdc Offset: 0x00000060) Base DMA Address Register */
  __IO uint32_t LCDC_BASECTRL;      /**< \brief (Lcdc Offset: 0x00000064) Base DMA Control Register */
  __IO uint32_t LCDC_BASENEXT;      /**< \brief (Lcdc Offset: 0x00000068) Base DMA Next Register */
  __IO uint32_t LCDC_BASECFG0;      /**< \brief (Lcdc Offset: 0x0000006C) Base Layer Configuration Register 0 */
  __IO uint32_t LCDC_BASECFG1;      /**< \brief (Lcdc Offset: 0x00000070) Base Layer Configuration Register 1 */
  __IO uint32_t LCDC_BASECFG2;      /**< \brief (Lcdc Offset: 0x00000074) Base Layer Configuration Register 2 */
  __IO uint32_t LCDC_BASECFG3;      /**< \brief (Lcdc Offset: 0x00000078) Base Layer Configuration Register 3 */
  __IO uint32_t LCDC_BASECFG4;      /**< \brief (Lcdc Offset: 0x0000007C) Base Layer Configuration Register 4 */
  __IO uint32_t LCDC_BASECFG5;      /**< \brief (Lcdc Offset: 0x00000080) Base Layer Configuration Register 5 */
  __IO uint32_t LCDC_BASECFG6;      /**< \brief (Lcdc Offset: 0x00000084) Base Layer Configuration Register 6 */
  __I  uint32_t Reserved2[46];
  __O  uint32_t LCDC_OVR1CHER;      /**< \brief (Lcdc Offset: 0x00000140) Overlay 1 Channel Enable Register */
  __O  uint32_t LCDC_OVR1CHDR;      /**< \brief (Lcdc Offset: 0x00000144) Overlay 1 Channel Disable Register */
  __I  uint32_t LCDC_OVR1CHSR;      /**< \brief (Lcdc Offset: 0x00000148) Overlay 1 Channel Status Register */
  __O  uint32_t LCDC_OVR1IER;       /**< \brief (Lcdc Offset: 0x0000014C) Overlay 1 Interrupt Enable Register */
  __O  uint32_t LCDC_OVR1IDR;       /**< \brief (Lcdc Offset: 0x00000150) Overlay 1 Interrupt Disable Register */
  __I  uint32_t LCDC_OVR1IMR;       /**< \brief (Lcdc Offset: 0x00000154) Overlay 1 Interrupt Mask Register */
  __I  uint32_t LCDC_OVR1ISR;       /**< \brief (Lcdc Offset: 0x00000158) Overlay 1 Interrupt Status Register */
  __IO uint32_t LCDC_OVR1HEAD;      /**< \brief (Lcdc Offset: 0x0000015C) Overlay 1 DMA Head Register */
  __IO uint32_t LCDC_OVR1ADDR;      /**< \brief (Lcdc Offset: 0x00000160) Overlay 1 DMA Address Register */
  __IO uint32_t LCDC_OVR1CTRL;      /**< \brief (Lcdc Offset: 0x00000164) Overlay 1 DMA Control Register */
  __IO uint32_t LCDC_OVR1NEXT;      /**< \brief (Lcdc Offset: 0x00000168) Overlay 1 DMA Next Register */
  __IO uint32_t LCDC_OVR1CFG0;      /**< \brief (Lcdc Offset: 0x0000016C) Overlay 1 Configuration Register 0 */
  __IO uint32_t LCDC_OVR1CFG1;      /**< \brief (Lcdc Offset: 0x00000170) Overlay 1 Configuration Register 1 */
  __IO uint32_t LCDC_OVR1CFG2;      /**< \brief (Lcdc Offset: 0x00000174) Overlay 1 Configuration Register 2 */
  __IO uint32_t LCDC_OVR1CFG3;      /**< \brief (Lcdc Offset: 0x00000178) Overlay 1 Configuration Register 3 */
  __IO uint32_t LCDC_OVR1CFG4;      /**< \brief (Lcdc Offset: 0x0000017C) Overlay 1 Configuration Register 4 */
  __IO uint32_t LCDC_OVR1CFG5;      /**< \brief (Lcdc Offset: 0x00000180) Overlay 1 Configuration Register 5 */
  __IO uint32_t LCDC_OVR1CFG6;      /**< \brief (Lcdc Offset: 0x00000184) Overlay 1 Configuration Register 6 */
  __IO uint32_t LCDC_OVR1CFG7;      /**< \brief (Lcdc Offset: 0x00000188) Overlay 1 Configuration Register 7 */
  __IO uint32_t LCDC_OVR1CFG8;      /**< \brief (Lcdc Offset: 0x0000018C) Overlay 1 Configuration Register 8 */
  __IO uint32_t LCDC_OVR1CFG9;      /**< \brief (Lcdc Offset: 0x00000190) Overlay 1 Configuration Register 9 */
  __I  uint32_t Reserved3[43];
  __O  uint32_t LCDC_OVR2CHER;      /**< \brief (Lcdc Offset: 0x00000240) Overlay 2 Channel Enable Register */
  __O  uint32_t LCDC_OVR2CHDR;      /**< \brief (Lcdc Offset: 0x00000244) Overlay 2 Channel Disable Register */
  __I  uint32_t LCDC_OVR2CHSR;      /**< \brief (Lcdc Offset: 0x00000248) Overlay 2 Channel Status Register */
  __O  uint32_t LCDC_OVR2IER;       /**< \brief (Lcdc Offset: 0x0000024C) Overlay 2 Interrupt Enable Register */
  __O  uint32_t LCDC_OVR2IDR;       /**< \brief (Lcdc Offset: 0x00000250) Overlay 2 Interrupt Disable Register */
  __I  uint32_t LCDC_OVR2IMR;       /**< \brief (Lcdc Offset: 0x00000254) Overlay 2 Interrupt Mask Register */
  __I  uint32_t LCDC_OVR2ISR;       /**< \brief (Lcdc Offset: 0x00000258) Overlay 2 Interrupt Status Register */
  __IO uint32_t LCDC_OVR2HEAD;      /**< \brief (Lcdc Offset: 0x0000025C) Overlay 2 DMA Head Register */
  __IO uint32_t LCDC_OVR2ADDR;      /**< \brief (Lcdc Offset: 0x00000260) Overlay 2 DMA Address Register */
  __IO uint32_t LCDC_OVR2CTRL;      /**< \brief (Lcdc Offset: 0x00000264) Overlay 2 DMA Control Register */
  __IO uint32_t LCDC_OVR2NEXT;      /**< \brief (Lcdc Offset: 0x00000268) Overlay 2 DMA Next Register */
  __IO uint32_t LCDC_OVR2CFG0;      /**< \brief (Lcdc Offset: 0x0000026C) Overlay 2 Configuration Register 0 */
  __IO uint32_t LCDC_OVR2CFG1;      /**< \brief (Lcdc Offset: 0x00000270) Overlay 2 Configuration Register 1 */
  __IO uint32_t LCDC_OVR2CFG2;      /**< \brief (Lcdc Offset: 0x00000274) Overlay 2 Configuration Register 2 */
  __IO uint32_t LCDC_OVR2CFG3;      /**< \brief (Lcdc Offset: 0x00000278) Overlay 2 Configuration Register 3 */
  __IO uint32_t LCDC_OVR2CFG4;      /**< \brief (Lcdc Offset: 0x0000027C) Overlay 2 Configuration Register 4 */
  __IO uint32_t LCDC_OVR2CFG5;      /**< \brief (Lcdc Offset: 0x00000280) Overlay 2 Configuration Register 5 */
  __IO uint32_t LCDC_OVR2CFG6;      /**< \brief (Lcdc Offset: 0x00000284) Overlay 2 Configuration Register 6 */
  __IO uint32_t LCDC_OVR2CFG7;      /**< \brief (Lcdc Offset: 0x00000288) Overlay 2 Configuration Register 7 */
  __IO uint32_t LCDC_OVR2CFG8;      /**< \brief (Lcdc Offset: 0x0000028C) Overlay 2 Configuration Register 8 */
  __IO uint32_t LCDC_OVR2CFG9;      /**< \brief (Lcdc Offset: 0x00000290) Overlay 2 Configuration Register 8 */
  __I  uint32_t Reserved4[43];
  __O  uint32_t LCDC_HEOCHER;       /**< \brief (Lcdc Offset: 0x00000340) High End Overlay Channel Enable Register */
  __O  uint32_t LCDC_HEOCHDR;       /**< \brief (Lcdc Offset: 0x00000344) High End Overlay Channel Disable Register */
  __I  uint32_t LCDC_HEOCHSR;       /**< \brief (Lcdc Offset: 0x00000348) High End Overlay Channel Status Register */
  __O  uint32_t LCDC_HEOIER;        /**< \brief (Lcdc Offset: 0x0000034C) High End Overlay Interrupt Enable Register */
  __O  uint32_t LCDC_HEOIDR;        /**< \brief (Lcdc Offset: 0x00000350) High End Overlay Interrupt Disable Register */
  __I  uint32_t LCDC_HEOIMR;        /**< \brief (Lcdc Offset: 0x00000354) High End Overlay Interrupt Mask Register */
  __I  uint32_t LCDC_HEOISR;        /**< \brief (Lcdc Offset: 0x00000358) High End Overlay Interrupt Status Register */
  __IO uint32_t LCDC_HEOHEAD;       /**< \brief (Lcdc Offset: 0x0000035C) High End Overlay DMA Head Register */
  __IO uint32_t LCDC_HEOADDR;       /**< \brief (Lcdc Offset: 0x00000360) High End Overlay DMA Address Register */
  __IO uint32_t LCDC_HEOCTRL;       /**< \brief (Lcdc Offset: 0x00000364) High End Overlay DMA Control Register */
  __IO uint32_t LCDC_HEONEXT;       /**< \brief (Lcdc Offset: 0x00000368) High End Overlay DMA Next Register */
  __IO uint32_t LCDC_HEOUHEAD;      /**< \brief (Lcdc Offset: 0x0000036C) High End Overlay U-UV DMA Head Register */
  __IO uint32_t LCDC_HEOUADDR;      /**< \brief (Lcdc Offset: 0x00000370) High End Overlay U-UV DMA Address Register */
  __IO uint32_t LCDC_HEOUCTRL;      /**< \brief (Lcdc Offset: 0x00000374) High End Overlay U-UV DMA Control Register */
  __IO uint32_t LCDC_HEOUNEXT;      /**< \brief (Lcdc Offset: 0x00000378) High End Overlay U-UV DMA Next Register */
  __IO uint32_t LCDC_HEOVHEAD;      /**< \brief (Lcdc Offset: 0x0000037C) High End Overlay V DMA Head Register */
  __IO uint32_t LCDC_HEOVADDR;      /**< \brief (Lcdc Offset: 0x00000380) High End Overlay V DMA Address Register */
  __IO uint32_t LCDC_HEOVCTRL;      /**< \brief (Lcdc Offset: 0x00000384) High End Overlay V DMA Control Register */
  __IO uint32_t LCDC_HEOVNEXT;      /**< \brief (Lcdc Offset: 0x00000388) High End Overlay V DMA Next Register */
  __IO uint32_t LCDC_HEOCFG0;       /**< \brief (Lcdc Offset: 0x0000038C) High End Overlay Configuration Register 0 */
  __IO uint32_t LCDC_HEOCFG1;       /**< \brief (Lcdc Offset: 0x00000390) High End Overlay Configuration Register 1 */
  __IO uint32_t LCDC_HEOCFG2;       /**< \brief (Lcdc Offset: 0x00000394) High End Overlay Configuration Register 2 */
  __IO uint32_t LCDC_HEOCFG3;       /**< \brief (Lcdc Offset: 0x00000398) High End Overlay Configuration Register 3 */
  __IO uint32_t LCDC_HEOCFG4;       /**< \brief (Lcdc Offset: 0x0000039C) High End Overlay Configuration Register 4 */
  __IO uint32_t LCDC_HEOCFG5;       /**< \brief (Lcdc Offset: 0x000003A0) High End Overlay Configuration Register 5 */
  __IO uint32_t LCDC_HEOCFG6;       /**< \brief (Lcdc Offset: 0x000003A4) High End Overlay Configuration Register 6 */
  __IO uint32_t LCDC_HEOCFG7;       /**< \brief (Lcdc Offset: 0x000003A8) High End Overlay Configuration Register 7 */
  __IO uint32_t LCDC_HEOCFG8;       /**< \brief (Lcdc Offset: 0x000003AC) High End Overlay Configuration Register 8 */
  __IO uint32_t LCDC_HEOCFG9;       /**< \brief (Lcdc Offset: 0x000003B0) High End Overlay Configuration Register 9 */
  __IO uint32_t LCDC_HEOCFG10;      /**< \brief (Lcdc Offset: 0x000003B4) High End Overlay Configuration Register 10 */
  __IO uint32_t LCDC_HEOCFG11;      /**< \brief (Lcdc Offset: 0x000003B8) High End Overlay Configuration Register 11 */
  __IO uint32_t LCDC_HEOCFG12;      /**< \brief (Lcdc Offset: 0x000003BC) High End Overlay Configuration Register 12 */
  __IO uint32_t LCDC_HEOCFG13;      /**< \brief (Lcdc Offset: 0x000003C0) High End Overlay Configuration Register 13 */
  __IO uint32_t LCDC_HEOCFG14;      /**< \brief (Lcdc Offset: 0x000003C4) High End Overlay Configuration Register 14 */
  __IO uint32_t LCDC_HEOCFG15;      /**< \brief (Lcdc Offset: 0x000003C8) High End Overlay Configuration Register 15 */
  __IO uint32_t LCDC_HEOCFG16;      /**< \brief (Lcdc Offset: 0x000003CC) High End Overlay Configuration Register 16 */
  __IO uint32_t LCDC_HEOCFG17;      /**< \brief (Lcdc Offset: 0x000003D0) High End Overlay Configuration Register 17 */
  __IO uint32_t LCDC_HEOCFG18;      /**< \brief (Lcdc Offset: 0x000003D4) High End Overlay Configuration Register 18 */
  __IO uint32_t LCDC_HEOCFG19;      /**< \brief (Lcdc Offset: 0x000003D8) High End Overlay Configuration Register 19 */
  __IO uint32_t LCDC_HEOCFG20;      /**< \brief (Lcdc Offset: 0x000003DC) High End Overlay Configuration Register 20 */
  __IO uint32_t LCDC_HEOCFG21;      /**< \brief (Lcdc Offset: 0x000003E0) High End Overlay Configuration Register 21 */
  __IO uint32_t LCDC_HEOCFG22;      /**< \brief (Lcdc Offset: 0x000003E4) High End Overlay Configuration Register 22 */
  __IO uint32_t LCDC_HEOCFG23;      /**< \brief (Lcdc Offset: 0x000003E8) High End Overlay Configuration Register 23 */
  __IO uint32_t LCDC_HEOCFG24;      /**< \brief (Lcdc Offset: 0x000003EC) High End Overlay Configuration Register 24 */
  __IO uint32_t LCDC_HEOCFG25;      /**< \brief (Lcdc Offset: 0x000003F0) High End Overlay Configuration Register 25 */
  __IO uint32_t LCDC_HEOCFG26;      /**< \brief (Lcdc Offset: 0x000003F4) High End Overlay Configuration Register 26 */
  __IO uint32_t LCDC_HEOCFG27;      /**< \brief (Lcdc Offset: 0x000003F8) High End Overlay Configuration Register 27 */
  __IO uint32_t LCDC_HEOCFG28;      /**< \brief (Lcdc Offset: 0x000003FC) High End Overlay Configuration Register 28 */
  __IO uint32_t LCDC_HEOCFG29;      /**< \brief (Lcdc Offset: 0x00000400) High End Overlay Configuration Register 29 */
  __IO uint32_t LCDC_HEOCFG30;      /**< \brief (Lcdc Offset: 0x00000404) High End Overlay Configuration Register 30 */
  __IO uint32_t LCDC_HEOCFG31;      /**< \brief (Lcdc Offset: 0x00000408) High End Overlay Configuration Register 31 */
  __IO uint32_t LCDC_HEOCFG32;      /**< \brief (Lcdc Offset: 0x0000040C) High End Overlay Configuration Register 32 */
  __IO uint32_t LCDC_HEOCFG33;      /**< \brief (Lcdc Offset: 0x00000410) High End Overlay Configuration Register 33 */
  __IO uint32_t LCDC_HEOCFG34;      /**< \brief (Lcdc Offset: 0x00000414) High End Overlay Configuration Register 34 */
  __IO uint32_t LCDC_HEOCFG35;      /**< \brief (Lcdc Offset: 0x00000418) High End Overlay Configuration Register 35 */
  __IO uint32_t LCDC_HEOCFG36;      /**< \brief (Lcdc Offset: 0x0000041C) High End Overlay Configuration Register 36 */
  __IO uint32_t LCDC_HEOCFG37;      /**< \brief (Lcdc Offset: 0x00000420) High End Overlay Configuration Register 37 */
  __IO uint32_t LCDC_HEOCFG38;      /**< \brief (Lcdc Offset: 0x00000424) High End Overlay Configuration Register 38 */
  __IO uint32_t LCDC_HEOCFG39;      /**< \brief (Lcdc Offset: 0x00000428) High End Overlay Configuration Register 39 */
  __IO uint32_t LCDC_HEOCFG40;      /**< \brief (Lcdc Offset: 0x0000042C) High End Overlay Configuration Register 40 */
  __IO uint32_t LCDC_HEOCFG41;      /**< \brief (Lcdc Offset: 0x00000430) High End Overlay Configuration Register 41 */
  __I  uint32_t Reserved5[67];
  __O  uint32_t LCDC_PPCHER;        /**< \brief (Lcdc Offset: 0x00000540) Post Processing Channel Enable Register */
  __O  uint32_t LCDC_PPCHDR;        /**< \brief (Lcdc Offset: 0x00000544) Post Processing Channel Disable Register */
  __I  uint32_t LCDC_PPCHSR;        /**< \brief (Lcdc Offset: 0x00000548) Post Processing Channel Status Register */
  __O  uint32_t LCDC_PPIER;         /**< \brief (Lcdc Offset: 0x0000054C) Post Processing Interrupt Enable Register */
  __O  uint32_t LCDC_PPIDR;         /**< \brief (Lcdc Offset: 0x00000550) Post Processing Interrupt Disable Register */
  __I  uint32_t LCDC_PPIMR;         /**< \brief (Lcdc Offset: 0x00000554) Post Processing Interrupt Mask Register */
  __I  uint32_t LCDC_PPISR;         /**< \brief (Lcdc Offset: 0x00000558) Post Processing Interrupt Status Register */
  __IO uint32_t LCDC_PPHEAD;        /**< \brief (Lcdc Offset: 0x0000055C) Post Processing Head Register */
  __IO uint32_t LCDC_PPADDR;        /**< \brief (Lcdc Offset: 0x00000560) Post Processing Address Register */
  __IO uint32_t LCDC_PPCTRL;        /**< \brief (Lcdc Offset: 0x00000564) Post Processing Control Register */
  __IO uint32_t LCDC_PPNEXT;        /**< \brief (Lcdc Offset: 0x00000568) Post Processing Next Register */
  __IO uint32_t LCDC_PPCFG0;        /**< \brief (Lcdc Offset: 0x0000056C) Post Processing Configuration Register 0 */
  __IO uint32_t LCDC_PPCFG1;        /**< \brief (Lcdc Offset: 0x00000570) Post Processing Configuration Register 1 */
  __IO uint32_t LCDC_PPCFG2;        /**< \brief (Lcdc Offset: 0x00000574) Post Processing Configuration Register 2 */
  __IO uint32_t LCDC_PPCFG3;        /**< \brief (Lcdc Offset: 0x00000578) Post Processing Configuration Register 3 */
  __IO uint32_t LCDC_PPCFG4;        /**< \brief (Lcdc Offset: 0x0000057C) Post Processing Configuration Register 4 */
  __IO uint32_t LCDC_PPCFG5;        /**< \brief (Lcdc Offset: 0x00000580) Post Processing Configuration Register 5 */
  __I  uint32_t Reserved6[31];
  __IO uint32_t LCDC_BASECLUT[256]; /**< \brief (Lcdc Offset: 0x00000600) Base CLUT Register */
  __IO uint32_t LCDC_OVR1CLUT[256]; /**< \brief (Lcdc Offset: 0x00000A00) Overlay 1 CLUT Register */
  __IO uint32_t LCDC_OVR2CLUT[256]; /**< \brief (Lcdc Offset: 0x00000E00) Overlay 2 CLUT Register */
  __IO uint32_t LCDC_HEOCLUT[256];  /**< \brief (Lcdc Offset: 0x00001200) High End Overlay CLUT Register */
  __I  uint32_t Reserved7[635];
  __I  uint32_t LCDC_ADDRSIZE;      /**< \brief (Lcdc Offset: 0x00001FEC) Address Size Register */
  __I  uint32_t LCDC_IPNAME[2];     /**< \brief (Lcdc Offset: 0x00001FF0) IP Name1 Register */
  __I  uint32_t LCDC_FEATURES;      /**< \brief (Lcdc Offset: 0x00001FF8) Features Register */
  __I  uint32_t LCDC_VERSION;       /**< \brief (Lcdc Offset: 0x00001FFC) Version Register */
} Lcdc;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- LCDC_LCDCFG0 : (LCDC Offset: 0x00000000) LCD Controller Configuration Register 0 -------- */
#define LCDC_LCDCFG0_CLKPOL (0x1u << 0) /**< \brief (LCDC_LCDCFG0) LCD Controller Clock Polarity */
#define LCDC_LCDCFG0_CLKSEL (0x1u << 2) /**< \brief (LCDC_LCDCFG0) LCD Controller Clock Source Selection */
#define LCDC_LCDCFG0_CLKPWMSEL (0x1u << 3) /**< \brief (LCDC_LCDCFG0) LCD Controller PWM Clock Source Selection */
#define LCDC_LCDCFG0_CGDISBASE (0x1u << 8) /**< \brief (LCDC_LCDCFG0) Clock Gating Disable Control for the Base Layer */
#define LCDC_LCDCFG0_CGDISOVR1 (0x1u << 9) /**< \brief (LCDC_LCDCFG0) Clock Gating Disable Control for the Overlay 1 Layer */
#define LCDC_LCDCFG0_CGDISOVR2 (0x1u << 10) /**< \brief (LCDC_LCDCFG0) Clock Gating Disable Control for the Overlay 2 Layer */
#define LCDC_LCDCFG0_CGDISHEO (0x1u << 11) /**< \brief (LCDC_LCDCFG0) Clock Gating Disable Control for the High End Overlay */
#define LCDC_LCDCFG0_CGDISPP (0x1u << 13) /**< \brief (LCDC_LCDCFG0) Clock Gating Disable Control for the Post Processing Layer */
#define LCDC_LCDCFG0_CLKDIV_Pos 16
#define LCDC_LCDCFG0_CLKDIV_Msk (0xffu << LCDC_LCDCFG0_CLKDIV_Pos) /**< \brief (LCDC_LCDCFG0) LCD Controller Clock Divider */
#define LCDC_LCDCFG0_CLKDIV(value) ((LCDC_LCDCFG0_CLKDIV_Msk & ((value) << LCDC_LCDCFG0_CLKDIV_Pos)))
/* -------- LCDC_LCDCFG1 : (LCDC Offset: 0x00000004) LCD Controller Configuration Register 1 -------- */
#define LCDC_LCDCFG1_HSPW_Pos 0
#define LCDC_LCDCFG1_HSPW_Msk (0xffu << LCDC_LCDCFG1_HSPW_Pos) /**< \brief (LCDC_LCDCFG1) Horizontal Synchronization Pulse Width */
#define LCDC_LCDCFG1_HSPW(value) ((LCDC_LCDCFG1_HSPW_Msk & ((value) << LCDC_LCDCFG1_HSPW_Pos)))
#define LCDC_LCDCFG1_VSPW_Pos 16
#define LCDC_LCDCFG1_VSPW_Msk (0xffu << LCDC_LCDCFG1_VSPW_Pos) /**< \brief (LCDC_LCDCFG1) Vertical Synchronization Pulse Width */
#define LCDC_LCDCFG1_VSPW(value) ((LCDC_LCDCFG1_VSPW_Msk & ((value) << LCDC_LCDCFG1_VSPW_Pos)))
/* -------- LCDC_LCDCFG2 : (LCDC Offset: 0x00000008) LCD Controller Configuration Register 2 -------- */
#define LCDC_LCDCFG2_VFPW_Pos 0
#define LCDC_LCDCFG2_VFPW_Msk (0xffu << LCDC_LCDCFG2_VFPW_Pos) /**< \brief (LCDC_LCDCFG2) Vertical Front Porch Width */
#define LCDC_LCDCFG2_VFPW(value) ((LCDC_LCDCFG2_VFPW_Msk & ((value) << LCDC_LCDCFG2_VFPW_Pos)))
#define LCDC_LCDCFG2_VBPW_Pos 16
#define LCDC_LCDCFG2_VBPW_Msk (0xffu << LCDC_LCDCFG2_VBPW_Pos) /**< \brief (LCDC_LCDCFG2) Vertical Back Porch Width */
#define LCDC_LCDCFG2_VBPW(value) ((LCDC_LCDCFG2_VBPW_Msk & ((value) << LCDC_LCDCFG2_VBPW_Pos)))
/* -------- LCDC_LCDCFG3 : (LCDC Offset: 0x0000000C) LCD Controller Configuration Register 3 -------- */
#define LCDC_LCDCFG3_HFPW_Pos 0
#define LCDC_LCDCFG3_HFPW_Msk (0x3ffu << LCDC_LCDCFG3_HFPW_Pos) /**< \brief (LCDC_LCDCFG3) Horizontal Front Porch Width */
#define LCDC_LCDCFG3_HFPW(value) ((LCDC_LCDCFG3_HFPW_Msk & ((value) << LCDC_LCDCFG3_HFPW_Pos)))
#define LCDC_LCDCFG3_HBPW_Pos 16
#define LCDC_LCDCFG3_HBPW_Msk (0x3ffu << LCDC_LCDCFG3_HBPW_Pos) /**< \brief (LCDC_LCDCFG3) Horizontal Back Porch Width */
#define LCDC_LCDCFG3_HBPW(value) ((LCDC_LCDCFG3_HBPW_Msk & ((value) << LCDC_LCDCFG3_HBPW_Pos)))
/* -------- LCDC_LCDCFG4 : (LCDC Offset: 0x00000010) LCD Controller Configuration Register 4 -------- */
#define LCDC_LCDCFG4_PPL_Pos 0
#define LCDC_LCDCFG4_PPL_Msk (0x7ffu << LCDC_LCDCFG4_PPL_Pos) /**< \brief (LCDC_LCDCFG4) Number of Pixels Per Line */
#define LCDC_LCDCFG4_PPL(value) ((LCDC_LCDCFG4_PPL_Msk & ((value) << LCDC_LCDCFG4_PPL_Pos)))
#define LCDC_LCDCFG4_RPF_Pos 16
#define LCDC_LCDCFG4_RPF_Msk (0x7ffu << LCDC_LCDCFG4_RPF_Pos) /**< \brief (LCDC_LCDCFG4) Number of Active Row Per Frame */
#define LCDC_LCDCFG4_RPF(value) ((LCDC_LCDCFG4_RPF_Msk & ((value) << LCDC_LCDCFG4_RPF_Pos)))
/* -------- LCDC_LCDCFG5 : (LCDC Offset: 0x00000014) LCD Controller Configuration Register 5 -------- */
#define LCDC_LCDCFG5_HSPOL (0x1u << 0) /**< \brief (LCDC_LCDCFG5) Horizontal Synchronization Pulse Polarity */
#define LCDC_LCDCFG5_VSPOL (0x1u << 1) /**< \brief (LCDC_LCDCFG5) Vertical Synchronization Pulse Polarity */
#define LCDC_LCDCFG5_VSPDLYS (0x1u << 2) /**< \brief (LCDC_LCDCFG5) Vertical Synchronization Pulse Start */
#define LCDC_LCDCFG5_VSPDLYE (0x1u << 3) /**< \brief (LCDC_LCDCFG5) Vertical Synchronization Pulse End */
#define LCDC_LCDCFG5_DISPPOL (0x1u << 4) /**< \brief (LCDC_LCDCFG5) Display Signal Polarity */
#define LCDC_LCDCFG5_DITHER (0x1u << 6) /**< \brief (LCDC_LCDCFG5) LCD Controller Dithering */
#define LCDC_LCDCFG5_DISPDLY (0x1u << 7) /**< \brief (LCDC_LCDCFG5) LCD Controller Display Power Signal Synchronization */
#define LCDC_LCDCFG5_MODE_Pos 8
#define LCDC_LCDCFG5_MODE_Msk (0x3u << LCDC_LCDCFG5_MODE_Pos) /**< \brief (LCDC_LCDCFG5) LCD Controller Output Mode */
#define   LCDC_LCDCFG5_MODE_OUTPUT_12BPP (0x0u << 8) /**< \brief (LCDC_LCDCFG5) LCD output mode is set to 12 bits per pixel */
#define   LCDC_LCDCFG5_MODE_OUTPUT_16BPP (0x1u << 8) /**< \brief (LCDC_LCDCFG5) LCD output mode is set to 16 bits per pixel */
#define   LCDC_LCDCFG5_MODE_OUTPUT_18BPP (0x2u << 8) /**< \brief (LCDC_LCDCFG5) LCD output mode is set to 18 bits per pixel */
#define   LCDC_LCDCFG5_MODE_OUTPUT_24BPP (0x3u << 8) /**< \brief (LCDC_LCDCFG5) LCD output mode is set to 24 bits per pixel */
#define LCDC_LCDCFG5_PP (0x1u << 10) /**< \brief (LCDC_LCDCFG5) Post Processing Enable */
#define LCDC_LCDCFG5_VSPSU (0x1u << 12) /**< \brief (LCDC_LCDCFG5) LCD Controller Vertical synchronization Pulse Setup Configuration */
#define LCDC_LCDCFG5_VSPHO (0x1u << 13) /**< \brief (LCDC_LCDCFG5) LCD Controller Vertical synchronization Pulse Hold Configuration */
#define LCDC_LCDCFG5_GUARDTIME_Pos 16
#define LCDC_LCDCFG5_GUARDTIME_Msk (0xffu << LCDC_LCDCFG5_GUARDTIME_Pos) /**< \brief (LCDC_LCDCFG5) LCD DISPLAY Guard Time */
#define LCDC_LCDCFG5_GUARDTIME(value) ((LCDC_LCDCFG5_GUARDTIME_Msk & ((value) << LCDC_LCDCFG5_GUARDTIME_Pos)))
/* -------- LCDC_LCDCFG6 : (LCDC Offset: 0x00000018) LCD Controller Configuration Register 6 -------- */
#define LCDC_LCDCFG6_PWMPS_Pos 0
#define LCDC_LCDCFG6_PWMPS_Msk (0x7u << LCDC_LCDCFG6_PWMPS_Pos) /**< \brief (LCDC_LCDCFG6) PWM Clock Prescaler */
#define   LCDC_LCDCFG6_PWMPS_DIV_1 (0x0u << 0) /**< \brief (LCDC_LCDCFG6) The counter advances at a rate of fCOUNTER = fPWM_SELECTED_CLOCK */
#define   LCDC_LCDCFG6_PWMPS_DIV_2 (0x1u << 0) /**< \brief (LCDC_LCDCFG6) The counter advances at a rate of fCOUNTER = fPWM_SELECTED_CLOCK/2 */
#define   LCDC_LCDCFG6_PWMPS_DIV_4 (0x2u << 0) /**< \brief (LCDC_LCDCFG6) The counter advances at a rate of fCOUNTER = fPWM_SELECTED_CLOCK/4 */
#define   LCDC_LCDCFG6_PWMPS_DIV_8 (0x3u << 0) /**< \brief (LCDC_LCDCFG6) The counter advances at a rate of fCOUNTER = fPWM_SELECTED_CLOCK/8 */
#define   LCDC_LCDCFG6_PWMPS_DIV_16 (0x4u << 0) /**< \brief (LCDC_LCDCFG6) The counter advances at a rate of fCOUNTER = fPWM_SELECTED_CLOCK/16 */
#define   LCDC_LCDCFG6_PWMPS_DIV_32 (0x5u << 0) /**< \brief (LCDC_LCDCFG6) The counter advances at a of rate fCOUNTER = fPWM_SELECTED_CLOCK/32 */
#define   LCDC_LCDCFG6_PWMPS_DIV_64 (0x6u << 0) /**< \brief (LCDC_LCDCFG6) The counter advances at a of rate fCOUNTER = fPWM_SELECTED_CLOCK/64 */
#define LCDC_LCDCFG6_PWMPOL (0x1u << 4) /**< \brief (LCDC_LCDCFG6) LCD Controller PWM Signal Polarity */
#define LCDC_LCDCFG6_PWMCVAL_Pos 8
#define LCDC_LCDCFG6_PWMCVAL_Msk (0xffu << LCDC_LCDCFG6_PWMCVAL_Pos) /**< \brief (LCDC_LCDCFG6) LCD Controller PWM Compare Value */
#define LCDC_LCDCFG6_PWMCVAL(value) ((LCDC_LCDCFG6_PWMCVAL_Msk & ((value) << LCDC_LCDCFG6_PWMCVAL_Pos)))
/* -------- LCDC_LCDEN : (LCDC Offset: 0x00000020) LCD Controller Enable Register -------- */
#define LCDC_LCDEN_CLKEN (0x1u << 0) /**< \brief (LCDC_LCDEN) LCD Controller Pixel Clock Enable */
#define LCDC_LCDEN_SYNCEN (0x1u << 1) /**< \brief (LCDC_LCDEN) LCD Controller Horizontal and Vertical Synchronization Enable */
#define LCDC_LCDEN_DISPEN (0x1u << 2) /**< \brief (LCDC_LCDEN) LCD Controller DISP Signal Enable */
#define LCDC_LCDEN_PWMEN (0x1u << 3) /**< \brief (LCDC_LCDEN) LCD Controller Pulse Width Modulation Enable */
/* -------- LCDC_LCDDIS : (LCDC Offset: 0x00000024) LCD Controller Disable Register -------- */
#define LCDC_LCDDIS_CLKDIS (0x1u << 0) /**< \brief (LCDC_LCDDIS) LCD Controller Pixel Clock Disable */
#define LCDC_LCDDIS_SYNCDIS (0x1u << 1) /**< \brief (LCDC_LCDDIS) LCD Controller Horizontal and Vertical Synchronization Disable */
#define LCDC_LCDDIS_DISPDIS (0x1u << 2) /**< \brief (LCDC_LCDDIS) LCD Controller DISP Signal Disable */
#define LCDC_LCDDIS_PWMDIS (0x1u << 3) /**< \brief (LCDC_LCDDIS) LCD Controller Pulse Width Modulation Disable */
#define LCDC_LCDDIS_CLKRST (0x1u << 8) /**< \brief (LCDC_LCDDIS) LCD Controller Clock Reset */
#define LCDC_LCDDIS_SYNCRST (0x1u << 9) /**< \brief (LCDC_LCDDIS) LCD Controller Horizontal and Vertical Synchronization Reset */
#define LCDC_LCDDIS_DISPRST (0x1u << 10) /**< \brief (LCDC_LCDDIS) LCD Controller DISP Signal Reset */
#define LCDC_LCDDIS_PWMRST (0x1u << 11) /**< \brief (LCDC_LCDDIS) LCD Controller PWM Reset */
/* -------- LCDC_LCDSR : (LCDC Offset: 0x00000028) LCD Controller Status Register -------- */
#define LCDC_LCDSR_CLKSTS (0x1u << 0) /**< \brief (LCDC_LCDSR) Clock Status */
#define LCDC_LCDSR_LCDSTS (0x1u << 1) /**< \brief (LCDC_LCDSR) LCD Controller Synchronization status */
#define LCDC_LCDSR_DISPSTS (0x1u << 2) /**< \brief (LCDC_LCDSR) LCD Controller DISP Signal Status */
#define LCDC_LCDSR_PWMSTS (0x1u << 3) /**< \brief (LCDC_LCDSR) LCD Controller PWM Signal Status */
#define LCDC_LCDSR_SIPSTS (0x1u << 4) /**< \brief (LCDC_LCDSR) Synchronization In Progress */
/* -------- LCDC_LCDIER : (LCDC Offset: 0x0000002C) LCD Controller Interrupt Enable Register -------- */
#define LCDC_LCDIER_SOFIE (0x1u << 0) /**< \brief (LCDC_LCDIER) Start of Frame Interrupt Enable Register */
#define LCDC_LCDIER_DISIE (0x1u << 1) /**< \brief (LCDC_LCDIER) LCD Disable Interrupt Enable Register */
#define LCDC_LCDIER_DISPIE (0x1u << 2) /**< \brief (LCDC_LCDIER) Power UP/Down Sequence Terminated Interrupt Enable Register */
#define LCDC_LCDIER_FIFOERRIE (0x1u << 4) /**< \brief (LCDC_LCDIER) Output FIFO Error Interrupt Enable Register */
#define LCDC_LCDIER_BASEIE (0x1u << 8) /**< \brief (LCDC_LCDIER) Base Layer Interrupt Enable Register */
#define LCDC_LCDIER_OVR1IE (0x1u << 9) /**< \brief (LCDC_LCDIER) Overlay 1 Interrupt Enable Register */
#define LCDC_LCDIER_OVR2IE (0x1u << 10) /**< \brief (LCDC_LCDIER) Overlay 2 Interrupt Enable Register */
#define LCDC_LCDIER_HEOIE (0x1u << 11) /**< \brief (LCDC_LCDIER) High End Overlay Interrupt Enable Register */
#define LCDC_LCDIER_PPIE (0x1u << 13) /**< \brief (LCDC_LCDIER) Post Processing Interrupt Enable Register */
/* -------- LCDC_LCDIDR : (LCDC Offset: 0x00000030) LCD Controller Interrupt Disable Register -------- */
#define LCDC_LCDIDR_SOFID (0x1u << 0) /**< \brief (LCDC_LCDIDR) Start of Frame Interrupt Disable Register */
#define LCDC_LCDIDR_DISID (0x1u << 1) /**< \brief (LCDC_LCDIDR) LCD Disable Interrupt Disable Register */
#define LCDC_LCDIDR_DISPID (0x1u << 2) /**< \brief (LCDC_LCDIDR) Power UP/Down Sequence Terminated Interrupt Disable Register */
#define LCDC_LCDIDR_FIFOERRID (0x1u << 4) /**< \brief (LCDC_LCDIDR) Output FIFO Error Interrupt Disable Register */
#define LCDC_LCDIDR_BASEID (0x1u << 8) /**< \brief (LCDC_LCDIDR) Base Layer Interrupt Disable Register */
#define LCDC_LCDIDR_OVR1ID (0x1u << 9) /**< \brief (LCDC_LCDIDR) Overlay 1 Interrupt Disable Register */
#define LCDC_LCDIDR_OVR2ID (0x1u << 10) /**< \brief (LCDC_LCDIDR) Overlay 2 Interrupt Disable Register */
#define LCDC_LCDIDR_HEOID (0x1u << 11) /**< \brief (LCDC_LCDIDR) High End Overlay Interrupt Disable Register */
#define LCDC_LCDIDR_PPID (0x1u << 13) /**< \brief (LCDC_LCDIDR) Post Processing Interrupt Disable Register */
/* -------- LCDC_LCDIMR : (LCDC Offset: 0x00000034) LCD Controller Interrupt Mask Register -------- */
#define LCDC_LCDIMR_SOFIM (0x1u << 0) /**< \brief (LCDC_LCDIMR) Start of Frame Interrupt Mask Register */
#define LCDC_LCDIMR_DISIM (0x1u << 1) /**< \brief (LCDC_LCDIMR) LCD Disable Interrupt Mask Register */
#define LCDC_LCDIMR_DISPIM (0x1u << 2) /**< \brief (LCDC_LCDIMR) Power UP/Down Sequence Terminated Interrupt Mask Register */
#define LCDC_LCDIMR_FIFOERRIM (0x1u << 4) /**< \brief (LCDC_LCDIMR) Output FIFO Error Interrupt Mask Register */
#define LCDC_LCDIMR_BASEIM (0x1u << 8) /**< \brief (LCDC_LCDIMR) Base Layer Interrupt Mask Register */
#define LCDC_LCDIMR_OVR1IM (0x1u << 9) /**< \brief (LCDC_LCDIMR) Overlay 1 Interrupt Mask Register */
#define LCDC_LCDIMR_OVR2IM (0x1u << 10) /**< \brief (LCDC_LCDIMR) Overlay 2 Interrupt Mask Register */
#define LCDC_LCDIMR_HEOIM (0x1u << 11) /**< \brief (LCDC_LCDIMR) High End Overlay Interrupt Mask Register */
#define LCDC_LCDIMR_PPIM (0x1u << 13) /**< \brief (LCDC_LCDIMR) Post Processing Interrupt Mask Register */
/* -------- LCDC_LCDISR : (LCDC Offset: 0x00000038) LCD Controller Interrupt Status Register -------- */
#define LCDC_LCDISR_SOF (0x1u << 0) /**< \brief (LCDC_LCDISR) Start of Frame Interrupt Status Register */
#define LCDC_LCDISR_DIS (0x1u << 1) /**< \brief (LCDC_LCDISR) LCD Disable Interrupt Status Register */
#define LCDC_LCDISR_DISP (0x1u << 2) /**< \brief (LCDC_LCDISR) Power-up/Power-down Sequence Terminated Interrupt Status Register */
#define LCDC_LCDISR_FIFOERR (0x1u << 4) /**< \brief (LCDC_LCDISR) Output FIFO Error */
#define LCDC_LCDISR_BASE (0x1u << 8) /**< \brief (LCDC_LCDISR) Base Layer Raw Interrupt Status Register */
#define LCDC_LCDISR_OVR1 (0x1u << 9) /**< \brief (LCDC_LCDISR) Overlay 1 Raw Interrupt Status Register */
#define LCDC_LCDISR_OVR2 (0x1u << 10) /**< \brief (LCDC_LCDISR) Overlay 2 Raw Interrupt Status Register */
#define LCDC_LCDISR_HEO (0x1u << 11) /**< \brief (LCDC_LCDISR) High End Overlay Raw Interrupt Status Register */
#define LCDC_LCDISR_PP (0x1u << 13) /**< \brief (LCDC_LCDISR) Post Processing Raw Interrupt Status Register */
/* -------- LCDC_ATTR : (LCDC Offset: 0x0000003C) LCD Controller Attribute Register -------- */
#define LCDC_ATTR_BASE (0x1u << 0) /**< \brief (LCDC_ATTR) Base Layer Update Attribute Register */
#define LCDC_ATTR_OVR1 (0x1u << 1) /**< \brief (LCDC_ATTR) Overlay 1 Update Attribute Register */
#define LCDC_ATTR_OVR2 (0x1u << 2) /**< \brief (LCDC_ATTR) Overlay 2 Update Attribute Register */
#define LCDC_ATTR_HEO (0x1u << 3) /**< \brief (LCDC_ATTR) High End Overlay Update Attribute Register */
#define LCDC_ATTR_PP (0x1u << 5) /**< \brief (LCDC_ATTR) Post-Processing Update Attribute Register */
#define LCDC_ATTR_BASEA2Q (0x1u << 8) /**< \brief (LCDC_ATTR) Base Layer Update Add To Queue */
#define LCDC_ATTR_OVR1A2Q (0x1u << 9) /**< \brief (LCDC_ATTR) Overlay 1 Update Add To Queue */
#define LCDC_ATTR_OVR2A2Q (0x1u << 10) /**< \brief (LCDC_ATTR) Overlay 2 Update Add to Queue */
#define LCDC_ATTR_HEOA2Q (0x1u << 11) /**< \brief (LCDC_ATTR) High End Overlay Update Add To Queue */
#define LCDC_ATTR_PPA2Q (0x1u << 13) /**< \brief (LCDC_ATTR) Post-Processing Update Add To Queue */
/* -------- LCDC_BASECHER : (LCDC Offset: 0x00000040) Base Layer Channel Enable Register -------- */
#define LCDC_BASECHER_CHEN (0x1u << 0) /**< \brief (LCDC_BASECHER) Channel Enable Register */
#define LCDC_BASECHER_UPDATEEN (0x1u << 1) /**< \brief (LCDC_BASECHER) Update Overlay Attributes Enable Register */
#define LCDC_BASECHER_A2QEN (0x1u << 2) /**< \brief (LCDC_BASECHER) Add To Queue Enable Register */
/* -------- LCDC_BASECHDR : (LCDC Offset: 0x00000044) Base Layer Channel Disable Register -------- */
#define LCDC_BASECHDR_CHDIS (0x1u << 0) /**< \brief (LCDC_BASECHDR) Channel Disable Register */
#define LCDC_BASECHDR_CHRST (0x1u << 8) /**< \brief (LCDC_BASECHDR) Channel Reset Register */
/* -------- LCDC_BASECHSR : (LCDC Offset: 0x00000048) Base Layer Channel Status Register -------- */
#define LCDC_BASECHSR_CHSR (0x1u << 0) /**< \brief (LCDC_BASECHSR) Channel Status Register */
#define LCDC_BASECHSR_UPDATESR (0x1u << 1) /**< \brief (LCDC_BASECHSR) Update Overlay Attributes In Progress Status Register */
#define LCDC_BASECHSR_A2QSR (0x1u << 2) /**< \brief (LCDC_BASECHSR) Add To Queue Status Register */
/* -------- LCDC_BASEIER : (LCDC Offset: 0x0000004C) Base Layer Interrupt Enable Register -------- */
#define LCDC_BASEIER_DMA (0x1u << 2) /**< \brief (LCDC_BASEIER) End of DMA Transfer Interrupt Enable Register */
#define LCDC_BASEIER_DSCR (0x1u << 3) /**< \brief (LCDC_BASEIER) Descriptor Loaded Interrupt Enable Register */
#define LCDC_BASEIER_ADD (0x1u << 4) /**< \brief (LCDC_BASEIER) Head Descriptor Loaded Interrupt Enable Register */
#define LCDC_BASEIER_DONE (0x1u << 5) /**< \brief (LCDC_BASEIER) End of List Interrupt Enable Register */
#define LCDC_BASEIER_OVR (0x1u << 6) /**< \brief (LCDC_BASEIER) Overflow Interrupt Enable Register */
/* -------- LCDC_BASEIDR : (LCDC Offset: 0x00000050) Base Layer Interrupt Disabled Register -------- */
#define LCDC_BASEIDR_DMA (0x1u << 2) /**< \brief (LCDC_BASEIDR) End of DMA Transfer Interrupt Disable Register */
#define LCDC_BASEIDR_DSCR (0x1u << 3) /**< \brief (LCDC_BASEIDR) Descriptor Loaded Interrupt Disable Register */
#define LCDC_BASEIDR_ADD (0x1u << 4) /**< \brief (LCDC_BASEIDR) Head Descriptor Loaded Interrupt Disable Register */
#define LCDC_BASEIDR_DONE (0x1u << 5) /**< \brief (LCDC_BASEIDR) End of List Interrupt Disable Register */
#define LCDC_BASEIDR_OVR (0x1u << 6) /**< \brief (LCDC_BASEIDR) Overflow Interrupt Disable Register */
/* -------- LCDC_BASEIMR : (LCDC Offset: 0x00000054) Base Layer Interrupt Mask Register -------- */
#define LCDC_BASEIMR_DMA (0x1u << 2) /**< \brief (LCDC_BASEIMR) End of DMA Transfer Interrupt Mask Register */
#define LCDC_BASEIMR_DSCR (0x1u << 3) /**< \brief (LCDC_BASEIMR) Descriptor Loaded Interrupt Mask Register */
#define LCDC_BASEIMR_ADD (0x1u << 4) /**< \brief (LCDC_BASEIMR) Head Descriptor Loaded Interrupt Mask Register */
#define LCDC_BASEIMR_DONE (0x1u << 5) /**< \brief (LCDC_BASEIMR) End of List Interrupt Mask Register */
#define LCDC_BASEIMR_OVR (0x1u << 6) /**< \brief (LCDC_BASEIMR) Overflow Interrupt Mask Register */
/* -------- LCDC_BASEISR : (LCDC Offset: 0x00000058) Base Layer Interrupt Status Register -------- */
#define LCDC_BASEISR_DMA (0x1u << 2) /**< \brief (LCDC_BASEISR) End of DMA Transfer */
#define LCDC_BASEISR_DSCR (0x1u << 3) /**< \brief (LCDC_BASEISR) DMA Descriptor Loaded */
#define LCDC_BASEISR_ADD (0x1u << 4) /**< \brief (LCDC_BASEISR) Head Descriptor Loaded */
#define LCDC_BASEISR_DONE (0x1u << 5) /**< \brief (LCDC_BASEISR) End of List Detected */
#define LCDC_BASEISR_OVR (0x1u << 6) /**< \brief (LCDC_BASEISR) Overflow Detected */
/* -------- LCDC_BASEHEAD : (LCDC Offset: 0x0000005C) Base DMA Head Register -------- */
#define LCDC_BASEHEAD_HEAD_Pos 2
#define LCDC_BASEHEAD_HEAD_Msk (0x3fffffffu << LCDC_BASEHEAD_HEAD_Pos) /**< \brief (LCDC_BASEHEAD) DMA Head Pointer */
#define LCDC_BASEHEAD_HEAD(value) ((LCDC_BASEHEAD_HEAD_Msk & ((value) << LCDC_BASEHEAD_HEAD_Pos)))
/* -------- LCDC_BASEADDR : (LCDC Offset: 0x00000060) Base DMA Address Register -------- */
#define LCDC_BASEADDR_ADDR_Pos 0
#define LCDC_BASEADDR_ADDR_Msk (0xffffffffu << LCDC_BASEADDR_ADDR_Pos) /**< \brief (LCDC_BASEADDR) DMA Transfer Start Address */
#define LCDC_BASEADDR_ADDR(value) ((LCDC_BASEADDR_ADDR_Msk & ((value) << LCDC_BASEADDR_ADDR_Pos)))
/* -------- LCDC_BASECTRL : (LCDC Offset: 0x00000064) Base DMA Control Register -------- */
#define LCDC_BASECTRL_DFETCH (0x1u << 0) /**< \brief (LCDC_BASECTRL) Transfer Descriptor Fetch Enable */
#define LCDC_BASECTRL_LFETCH (0x1u << 1) /**< \brief (LCDC_BASECTRL) Lookup Table Fetch Enable */
#define LCDC_BASECTRL_DMAIEN (0x1u << 2) /**< \brief (LCDC_BASECTRL) End of DMA Transfer Interrupt Enable */
#define LCDC_BASECTRL_DSCRIEN (0x1u << 3) /**< \brief (LCDC_BASECTRL) Descriptor Loaded Interrupt Enable */
#define LCDC_BASECTRL_ADDIEN (0x1u << 4) /**< \brief (LCDC_BASECTRL) Add Head Descriptor to Queue Interrupt Enable */
#define LCDC_BASECTRL_DONEIEN (0x1u << 5) /**< \brief (LCDC_BASECTRL) End of List Interrupt Enable */
/* -------- LCDC_BASENEXT : (LCDC Offset: 0x00000068) Base DMA Next Register -------- */
#define LCDC_BASENEXT_NEXT_Pos 0
#define LCDC_BASENEXT_NEXT_Msk (0xffffffffu << LCDC_BASENEXT_NEXT_Pos) /**< \brief (LCDC_BASENEXT) DMA Descriptor Next Address */
#define LCDC_BASENEXT_NEXT(value) ((LCDC_BASENEXT_NEXT_Msk & ((value) << LCDC_BASENEXT_NEXT_Pos)))
/* -------- LCDC_BASECFG0 : (LCDC Offset: 0x0000006C) Base Layer Configuration Register 0 -------- */
#define LCDC_BASECFG0_SIF (0x1u << 0) /**< \brief (LCDC_BASECFG0) Source Interface */
#define LCDC_BASECFG0_BLEN_Pos 4
#define LCDC_BASECFG0_BLEN_Msk (0x3u << LCDC_BASECFG0_BLEN_Pos) /**< \brief (LCDC_BASECFG0) AHB Burst Length */
#define   LCDC_BASECFG0_BLEN_AHB_SINGLE (0x0u << 4) /**< \brief (LCDC_BASECFG0) AHB Access is started as soon as there is enough space in the FIFO to store one data. SINGLE, INCR, INCR4, INCR8 and INCR16 bursts are used. INCR is used for a burst of 2 and 3 beats. */
#define   LCDC_BASECFG0_BLEN_AHB_INCR4 (0x1u << 4) /**< \brief (LCDC_BASECFG0) AHB Access is started as soon as there is enough space in the FIFO to store a total amount of 4 data. An AHB INCR4 Burst is used. SINGLE, INCR and INCR4 bursts are used. INCR is used for a burst of 2 and 3 beats. */
#define   LCDC_BASECFG0_BLEN_AHB_INCR8 (0x2u << 4) /**< \brief (LCDC_BASECFG0) AHB Access is started as soon as there is enough space in the FIFO to store a total amount of 8 data. An AHB INCR8 Burst is used. SINGLE, INCR, INCR4 and INCR8 bursts are used. INCR is used for a burst of 2 and 3 beats. */
#define   LCDC_BASECFG0_BLEN_AHB_INCR16 (0x3u << 4) /**< \brief (LCDC_BASECFG0) AHB Access is started as soon as there is enough space in the FIFO to store a total amount of 16 data. An AHB INCR16 Burst is used. SINGLE, INCR, INCR4, INCR8 and INCR16 bursts are used. INCR is used for a burst of 2 and 3 beats. */
#define LCDC_BASECFG0_DLBO (0x1u << 8) /**< \brief (LCDC_BASECFG0) Defined Length Burst Only For Channel Bus Transaction */
/* -------- LCDC_BASECFG1 : (LCDC Offset: 0x00000070) Base Layer Configuration Register 1 -------- */
#define LCDC_BASECFG1_CLUTEN (0x1u << 0) /**< \brief (LCDC_BASECFG1) Color Lookup Table Mode Enable */
#define LCDC_BASECFG1_RGBMODE_Pos 4
#define LCDC_BASECFG1_RGBMODE_Msk (0xfu << LCDC_BASECFG1_RGBMODE_Pos) /**< \brief (LCDC_BASECFG1) RGB Mode Input Selection */
#define   LCDC_BASECFG1_RGBMODE_12BPP_RGB_444 (0x0u << 4) /**< \brief (LCDC_BASECFG1) 12 bpp RGB 444 */
#define   LCDC_BASECFG1_RGBMODE_16BPP_ARGB_4444 (0x1u << 4) /**< \brief (LCDC_BASECFG1) 16 bpp ARGB 4444 */
#define   LCDC_BASECFG1_RGBMODE_16BPP_RGBA_4444 (0x2u << 4) /**< \brief (LCDC_BASECFG1) 16 bpp RGBA 4444 */
#define   LCDC_BASECFG1_RGBMODE_16BPP_RGB_565 (0x3u << 4) /**< \brief (LCDC_BASECFG1) 16 bpp RGB 565 */
#define   LCDC_BASECFG1_RGBMODE_16BPP_TRGB_1555 (0x4u << 4) /**< \brief (LCDC_BASECFG1) 16 bpp TRGB 1555 */
#define   LCDC_BASECFG1_RGBMODE_18BPP_RGB_666 (0x5u << 4) /**< \brief (LCDC_BASECFG1) 18 bpp RGB 666 */
#define   LCDC_BASECFG1_RGBMODE_18BPP_RGB_666PACKED (0x6u << 4) /**< \brief (LCDC_BASECFG1) 18 bpp RGB 666 PACKED */
#define   LCDC_BASECFG1_RGBMODE_19BPP_TRGB_1666 (0x7u << 4) /**< \brief (LCDC_BASECFG1) 19 bpp TRGB 1666 */
#define   LCDC_BASECFG1_RGBMODE_19BPP_TRGB_PACKED (0x8u << 4) /**< \brief (LCDC_BASECFG1) 19 bpp TRGB 1666 PACKED */
#define   LCDC_BASECFG1_RGBMODE_24BPP_RGB_888 (0x9u << 4) /**< \brief (LCDC_BASECFG1) 24 bpp RGB 888 */
#define   LCDC_BASECFG1_RGBMODE_24BPP_RGB_888_PACKED (0xAu << 4) /**< \brief (LCDC_BASECFG1) 24 bpp RGB 888 PACKED */
#define   LCDC_BASECFG1_RGBMODE_25BPP_TRGB_1888 (0xBu << 4) /**< \brief (LCDC_BASECFG1) 25 bpp TRGB 1888 */
#define   LCDC_BASECFG1_RGBMODE_32BPP_ARGB_8888 (0xCu << 4) /**< \brief (LCDC_BASECFG1) 32 bpp ARGB 8888 */
#define   LCDC_BASECFG1_RGBMODE_32BPP_RGBA_8888 (0xDu << 4) /**< \brief (LCDC_BASECFG1) 32 bpp RGBA 8888 */
#define LCDC_BASECFG1_CLUTMODE_Pos 8
#define LCDC_BASECFG1_CLUTMODE_Msk (0x3u << LCDC_BASECFG1_CLUTMODE_Pos) /**< \brief (LCDC_BASECFG1) Color Lookup Table Mode Input Selection */
#define   LCDC_BASECFG1_CLUTMODE_CLUT_1BPP (0x0u << 8) /**< \brief (LCDC_BASECFG1) Color lookup table mode set to 1 bit per pixel */
#define   LCDC_BASECFG1_CLUTMODE_CLUT_2BPP (0x1u << 8) /**< \brief (LCDC_BASECFG1) Color lookup table mode set to 2 bits per pixel */
#define   LCDC_BASECFG1_CLUTMODE_CLUT_4BPP (0x2u << 8) /**< \brief (LCDC_BASECFG1) Color lookup table mode set to 4 bits per pixel */
#define   LCDC_BASECFG1_CLUTMODE_CLUT_8BPP (0x3u << 8) /**< \brief (LCDC_BASECFG1) Color lookup table mode set to 8 bits per pixel */
/* -------- LCDC_BASECFG2 : (LCDC Offset: 0x00000074) Base Layer Configuration Register 2 -------- */
#define LCDC_BASECFG2_XSTRIDE_Pos 0
#define LCDC_BASECFG2_XSTRIDE_Msk (0xffffffffu << LCDC_BASECFG2_XSTRIDE_Pos) /**< \brief (LCDC_BASECFG2) Horizontal Stride */
#define LCDC_BASECFG2_XSTRIDE(value) ((LCDC_BASECFG2_XSTRIDE_Msk & ((value) << LCDC_BASECFG2_XSTRIDE_Pos)))
/* -------- LCDC_BASECFG3 : (LCDC Offset: 0x00000078) Base Layer Configuration Register 3 -------- */
#define LCDC_BASECFG3_BDEF_Pos 0
#define LCDC_BASECFG3_BDEF_Msk (0xffu << LCDC_BASECFG3_BDEF_Pos) /**< \brief (LCDC_BASECFG3) Blue Default */
#define LCDC_BASECFG3_BDEF(value) ((LCDC_BASECFG3_BDEF_Msk & ((value) << LCDC_BASECFG3_BDEF_Pos)))
#define LCDC_BASECFG3_GDEF_Pos 8
#define LCDC_BASECFG3_GDEF_Msk (0xffu << LCDC_BASECFG3_GDEF_Pos) /**< \brief (LCDC_BASECFG3) Green Default */
#define LCDC_BASECFG3_GDEF(value) ((LCDC_BASECFG3_GDEF_Msk & ((value) << LCDC_BASECFG3_GDEF_Pos)))
#define LCDC_BASECFG3_RDEF_Pos 16
#define LCDC_BASECFG3_RDEF_Msk (0xffu << LCDC_BASECFG3_RDEF_Pos) /**< \brief (LCDC_BASECFG3) Red Default */
#define LCDC_BASECFG3_RDEF(value) ((LCDC_BASECFG3_RDEF_Msk & ((value) << LCDC_BASECFG3_RDEF_Pos)))
/* -------- LCDC_BASECFG4 : (LCDC Offset: 0x0000007C) Base Layer Configuration Register 4 -------- */
#define LCDC_BASECFG4_DMA (0x1u << 8) /**< \brief (LCDC_BASECFG4) Use DMA Data Path */
#define LCDC_BASECFG4_REP (0x1u << 9) /**< \brief (LCDC_BASECFG4) Use Replication logic to expand RGB color to 24 bits */
#define LCDC_BASECFG4_DISCEN (0x1u << 11) /**< \brief (LCDC_BASECFG4) Discard Area Enable */
/* -------- LCDC_BASECFG5 : (LCDC Offset: 0x00000080) Base Layer Configuration Register 5 -------- */
#define LCDC_BASECFG5_DISCXPOS_Pos 0
#define LCDC_BASECFG5_DISCXPOS_Msk (0x7ffu << LCDC_BASECFG5_DISCXPOS_Pos) /**< \brief (LCDC_BASECFG5) Discard Area Horizontal Coordinate */
#define LCDC_BASECFG5_DISCXPOS(value) ((LCDC_BASECFG5_DISCXPOS_Msk & ((value) << LCDC_BASECFG5_DISCXPOS_Pos)))
#define LCDC_BASECFG5_DISCYPOS_Pos 16
#define LCDC_BASECFG5_DISCYPOS_Msk (0x7ffu << LCDC_BASECFG5_DISCYPOS_Pos) /**< \brief (LCDC_BASECFG5) Discard Area Vertical Coordinate */
#define LCDC_BASECFG5_DISCYPOS(value) ((LCDC_BASECFG5_DISCYPOS_Msk & ((value) << LCDC_BASECFG5_DISCYPOS_Pos)))
/* -------- LCDC_BASECFG6 : (LCDC Offset: 0x00000084) Base Layer Configuration Register 6 -------- */
#define LCDC_BASECFG6_DISCXSIZE_Pos 0
#define LCDC_BASECFG6_DISCXSIZE_Msk (0x7ffu << LCDC_BASECFG6_DISCXSIZE_Pos) /**< \brief (LCDC_BASECFG6) Discard Area Horizontal Size */
#define LCDC_BASECFG6_DISCXSIZE(value) ((LCDC_BASECFG6_DISCXSIZE_Msk & ((value) << LCDC_BASECFG6_DISCXSIZE_Pos)))
#define LCDC_BASECFG6_DISCYSIZE_Pos 16
#define LCDC_BASECFG6_DISCYSIZE_Msk (0x7ffu << LCDC_BASECFG6_DISCYSIZE_Pos) /**< \brief (LCDC_BASECFG6) Discard Area Vertical Size */
#define LCDC_BASECFG6_DISCYSIZE(value) ((LCDC_BASECFG6_DISCYSIZE_Msk & ((value) << LCDC_BASECFG6_DISCYSIZE_Pos)))
/* -------- LCDC_OVR1CHER : (LCDC Offset: 0x00000140) Overlay 1 Channel Enable Register -------- */
#define LCDC_OVR1CHER_CHEN (0x1u << 0) /**< \brief (LCDC_OVR1CHER) Channel Enable Register */
#define LCDC_OVR1CHER_UPDATEEN (0x1u << 1) /**< \brief (LCDC_OVR1CHER) Update Overlay Attributes Enable Register */
#define LCDC_OVR1CHER_A2QEN (0x1u << 2) /**< \brief (LCDC_OVR1CHER) Add To Queue Enable Register */
/* -------- LCDC_OVR1CHDR : (LCDC Offset: 0x00000144) Overlay 1 Channel Disable Register -------- */
#define LCDC_OVR1CHDR_CHDIS (0x1u << 0) /**< \brief (LCDC_OVR1CHDR) Channel Disable Register */
#define LCDC_OVR1CHDR_CHRST (0x1u << 8) /**< \brief (LCDC_OVR1CHDR) Channel Reset Register */
/* -------- LCDC_OVR1CHSR : (LCDC Offset: 0x00000148) Overlay 1 Channel Status Register -------- */
#define LCDC_OVR1CHSR_CHSR (0x1u << 0) /**< \brief (LCDC_OVR1CHSR) Channel Status Register */
#define LCDC_OVR1CHSR_UPDATESR (0x1u << 1) /**< \brief (LCDC_OVR1CHSR) Update Overlay Attributes In Progress Status Register */
#define LCDC_OVR1CHSR_A2QSR (0x1u << 2) /**< \brief (LCDC_OVR1CHSR) Add To Queue Status Register */
/* -------- LCDC_OVR1IER : (LCDC Offset: 0x0000014C) Overlay 1 Interrupt Enable Register -------- */
#define LCDC_OVR1IER_DMA (0x1u << 2) /**< \brief (LCDC_OVR1IER) End of DMA Transfer Interrupt Enable Register */
#define LCDC_OVR1IER_DSCR (0x1u << 3) /**< \brief (LCDC_OVR1IER) Descriptor Loaded Interrupt Enable Register */
#define LCDC_OVR1IER_ADD (0x1u << 4) /**< \brief (LCDC_OVR1IER) Head Descriptor Loaded Interrupt Enable Register */
#define LCDC_OVR1IER_DONE (0x1u << 5) /**< \brief (LCDC_OVR1IER) End of List Interrupt Enable Register */
#define LCDC_OVR1IER_OVR (0x1u << 6) /**< \brief (LCDC_OVR1IER) Overflow Interrupt Enable Register */
/* -------- LCDC_OVR1IDR : (LCDC Offset: 0x00000150) Overlay 1 Interrupt Disable Register -------- */
#define LCDC_OVR1IDR_DMA (0x1u << 2) /**< \brief (LCDC_OVR1IDR) End of DMA Transfer Interrupt Disable Register */
#define LCDC_OVR1IDR_DSCR (0x1u << 3) /**< \brief (LCDC_OVR1IDR) Descriptor Loaded Interrupt Disable Register */
#define LCDC_OVR1IDR_ADD (0x1u << 4) /**< \brief (LCDC_OVR1IDR) Head Descriptor Loaded Interrupt Disable Register */
#define LCDC_OVR1IDR_DONE (0x1u << 5) /**< \brief (LCDC_OVR1IDR) End of List Interrupt Disable Register */
#define LCDC_OVR1IDR_OVR (0x1u << 6) /**< \brief (LCDC_OVR1IDR) Overflow Interrupt Disable Register */
/* -------- LCDC_OVR1IMR : (LCDC Offset: 0x00000154) Overlay 1 Interrupt Mask Register -------- */
#define LCDC_OVR1IMR_DMA (0x1u << 2) /**< \brief (LCDC_OVR1IMR) End of DMA Transfer Interrupt Mask Register */
#define LCDC_OVR1IMR_DSCR (0x1u << 3) /**< \brief (LCDC_OVR1IMR) Descriptor Loaded Interrupt Mask Register */
#define LCDC_OVR1IMR_ADD (0x1u << 4) /**< \brief (LCDC_OVR1IMR) Head Descriptor Loaded Interrupt Mask Register */
#define LCDC_OVR1IMR_DONE (0x1u << 5) /**< \brief (LCDC_OVR1IMR) End of List Interrupt Mask Register */
#define LCDC_OVR1IMR_OVR (0x1u << 6) /**< \brief (LCDC_OVR1IMR) Overflow Interrupt Mask Register */
/* -------- LCDC_OVR1ISR : (LCDC Offset: 0x00000158) Overlay 1 Interrupt Status Register -------- */
#define LCDC_OVR1ISR_DMA (0x1u << 2) /**< \brief (LCDC_OVR1ISR) End of DMA Transfer */
#define LCDC_OVR1ISR_DSCR (0x1u << 3) /**< \brief (LCDC_OVR1ISR) DMA Descriptor Loaded */
#define LCDC_OVR1ISR_ADD (0x1u << 4) /**< \brief (LCDC_OVR1ISR) Head Descriptor Loaded */
#define LCDC_OVR1ISR_DONE (0x1u << 5) /**< \brief (LCDC_OVR1ISR) End of List Detected */
#define LCDC_OVR1ISR_OVR (0x1u << 6) /**< \brief (LCDC_OVR1ISR) Overflow Detected */
/* -------- LCDC_OVR1HEAD : (LCDC Offset: 0x0000015C) Overlay 1 DMA Head Register -------- */
#define LCDC_OVR1HEAD_HEAD_Pos 2
#define LCDC_OVR1HEAD_HEAD_Msk (0x3fffffffu << LCDC_OVR1HEAD_HEAD_Pos) /**< \brief (LCDC_OVR1HEAD) DMA Head Pointer */
#define LCDC_OVR1HEAD_HEAD(value) ((LCDC_OVR1HEAD_HEAD_Msk & ((value) << LCDC_OVR1HEAD_HEAD_Pos)))
/* -------- LCDC_OVR1ADDR : (LCDC Offset: 0x00000160) Overlay 1 DMA Address Register -------- */
#define LCDC_OVR1ADDR_ADDR_Pos 0
#define LCDC_OVR1ADDR_ADDR_Msk (0xffffffffu << LCDC_OVR1ADDR_ADDR_Pos) /**< \brief (LCDC_OVR1ADDR) DMA Transfer Overlay 1 Address */
#define LCDC_OVR1ADDR_ADDR(value) ((LCDC_OVR1ADDR_ADDR_Msk & ((value) << LCDC_OVR1ADDR_ADDR_Pos)))
/* -------- LCDC_OVR1CTRL : (LCDC Offset: 0x00000164) Overlay 1 DMA Control Register -------- */
#define LCDC_OVR1CTRL_DFETCH (0x1u << 0) /**< \brief (LCDC_OVR1CTRL) Transfer Descriptor Fetch Enable */
#define LCDC_OVR1CTRL_LFETCH (0x1u << 1) /**< \brief (LCDC_OVR1CTRL) Lookup Table Fetch Enable */
#define LCDC_OVR1CTRL_DMAIEN (0x1u << 2) /**< \brief (LCDC_OVR1CTRL) End of DMA Transfer Interrupt Enable */
#define LCDC_OVR1CTRL_DSCRIEN (0x1u << 3) /**< \brief (LCDC_OVR1CTRL) Descriptor Loaded Interrupt Enable */
#define LCDC_OVR1CTRL_ADDIEN (0x1u << 4) /**< \brief (LCDC_OVR1CTRL) Add Head Descriptor to Queue Interrupt Enable */
#define LCDC_OVR1CTRL_DONEIEN (0x1u << 5) /**< \brief (LCDC_OVR1CTRL) End of List Interrupt Enable */
/* -------- LCDC_OVR1NEXT : (LCDC Offset: 0x00000168) Overlay 1 DMA Next Register -------- */
#define LCDC_OVR1NEXT_NEXT_Pos 0
#define LCDC_OVR1NEXT_NEXT_Msk (0xffffffffu << LCDC_OVR1NEXT_NEXT_Pos) /**< \brief (LCDC_OVR1NEXT) DMA Descriptor Next Address */
#define LCDC_OVR1NEXT_NEXT(value) ((LCDC_OVR1NEXT_NEXT_Msk & ((value) << LCDC_OVR1NEXT_NEXT_Pos)))
/* -------- LCDC_OVR1CFG0 : (LCDC Offset: 0x0000016C) Overlay 1 Configuration Register 0 -------- */
#define LCDC_OVR1CFG0_SIF (0x1u << 0) /**< \brief (LCDC_OVR1CFG0) Source Interface */
#define LCDC_OVR1CFG0_BLEN_Pos 4
#define LCDC_OVR1CFG0_BLEN_Msk (0x3u << LCDC_OVR1CFG0_BLEN_Pos) /**< \brief (LCDC_OVR1CFG0) AHB Burst Length */
#define   LCDC_OVR1CFG0_BLEN_AHB_BLEN_SINGLE (0x0u << 4) /**< \brief (LCDC_OVR1CFG0) AHB Access is started as soon as there is enough space in the FIFO to store one data. SINGLE, INCR, INCR4, INCR8 and INCR16 bursts are used. INCR is used for a burst of 2 and 3 beats. */
#define   LCDC_OVR1CFG0_BLEN_AHB_BLEN_INCR4 (0x1u << 4) /**< \brief (LCDC_OVR1CFG0) AHB Access is started as soon as there is enough space in the FIFO to store a total amount of 4 data. An AHB INCR4 Burst is used. SINGLE, INCR and INCR4 bursts are used. INCR is used for a burst of 2 and 3 beats. */
#define   LCDC_OVR1CFG0_BLEN_AHB_BLEN_INCR8 (0x2u << 4) /**< \brief (LCDC_OVR1CFG0) AHB Access is started as soon as there is enough space in the FIFO to store a total amount of 8 data. An AHB INCR8 Burst is used. SINGLE, INCR, INCR4 and INCR8 bursts are used. INCR is used for a burst of 2 and 3 beats. */
#define   LCDC_OVR1CFG0_BLEN_AHB_BLEN_INCR16 (0x3u << 4) /**< \brief (LCDC_OVR1CFG0) AHB Access is started as soon as there is enough space in the FIFO to store a total amount of 16 data. An AHB INCR16 Burst is used. SINGLE, INCR, INCR4, INCR8 and INCR16 bursts are used. INCR is used for a burst of 2 and 3 beats. */
#define LCDC_OVR1CFG0_DLBO (0x1u << 8) /**< \brief (LCDC_OVR1CFG0) Defined Length Burst Only for Channel Bus Transaction. */
#define LCDC_OVR1CFG0_ROTDIS (0x1u << 12) /**< \brief (LCDC_OVR1CFG0) Hardware Rotation Optimization Disable */
#define LCDC_OVR1CFG0_LOCKDIS (0x1u << 13) /**< \brief (LCDC_OVR1CFG0) Hardware Rotation Lock Disable */
/* -------- LCDC_OVR1CFG1 : (LCDC Offset: 0x00000170) Overlay 1 Configuration Register 1 -------- */
#define LCDC_OVR1CFG1_CLUTEN (0x1u << 0) /**< \brief (LCDC_OVR1CFG1) Color Lookup Table Mode Enable */
#define LCDC_OVR1CFG1_RGBMODE_Pos 4
#define LCDC_OVR1CFG1_RGBMODE_Msk (0xfu << LCDC_OVR1CFG1_RGBMODE_Pos) /**< \brief (LCDC_OVR1CFG1) RGB Mode Input Selection */
#define   LCDC_OVR1CFG1_RGBMODE_12BPP_RGB_444 (0x0u << 4) /**< \brief (LCDC_OVR1CFG1) 12 bpp RGB 444 */
#define   LCDC_OVR1CFG1_RGBMODE_16BPP_ARGB_4444 (0x1u << 4) /**< \brief (LCDC_OVR1CFG1) 16 bpp ARGB 4444 */
#define   LCDC_OVR1CFG1_RGBMODE_16BPP_RGBA_4444 (0x2u << 4) /**< \brief (LCDC_OVR1CFG1) 16 bpp RGBA 4444 */
#define   LCDC_OVR1CFG1_RGBMODE_16BPP_RGB_565 (0x3u << 4) /**< \brief (LCDC_OVR1CFG1) 16 bpp RGB 565 */
#define   LCDC_OVR1CFG1_RGBMODE_16BPP_TRGB_1555 (0x4u << 4) /**< \brief (LCDC_OVR1CFG1) 16 bpp TRGB 1555 */
#define   LCDC_OVR1CFG1_RGBMODE_18BPP_RGB_666 (0x5u << 4) /**< \brief (LCDC_OVR1CFG1) 18 bpp RGB 666 */
#define   LCDC_OVR1CFG1_RGBMODE_18BPP_RGB_666PACKED (0x6u << 4) /**< \brief (LCDC_OVR1CFG1) 18 bpp RGB 666 PACKED */
#define   LCDC_OVR1CFG1_RGBMODE_19BPP_TRGB_1666 (0x7u << 4) /**< \brief (LCDC_OVR1CFG1) 19 bpp TRGB 1666 */
#define   LCDC_OVR1CFG1_RGBMODE_19BPP_TRGB_PACKED (0x8u << 4) /**< \brief (LCDC_OVR1CFG1) 19 bpp TRGB 1666 PACKED */
#define   LCDC_OVR1CFG1_RGBMODE_24BPP_RGB_888 (0x9u << 4) /**< \brief (LCDC_OVR1CFG1) 24 bpp RGB 888 */
#define   LCDC_OVR1CFG1_RGBMODE_24BPP_RGB_888_PACKED (0xAu << 4) /**< \brief (LCDC_OVR1CFG1) 24 bpp RGB 888 PACKED */
#define   LCDC_OVR1CFG1_RGBMODE_25BPP_TRGB_1888 (0xBu << 4) /**< \brief (LCDC_OVR1CFG1) 25 bpp TRGB 1888 */
#define   LCDC_OVR1CFG1_RGBMODE_32BPP_ARGB_8888 (0xCu << 4) /**< \brief (LCDC_OVR1CFG1) 32 bpp ARGB 8888 */
#define   LCDC_OVR1CFG1_RGBMODE_32BPP_RGBA_8888 (0xDu << 4) /**< \brief (LCDC_OVR1CFG1) 32 bpp RGBA 8888 */
#define LCDC_OVR1CFG1_CLUTMODE_Pos 8
#define LCDC_OVR1CFG1_CLUTMODE_Msk (0x3u << LCDC_OVR1CFG1_CLUTMODE_Pos) /**< \brief (LCDC_OVR1CFG1) Color Lookup Table Mode Input Selection */
#define   LCDC_OVR1CFG1_CLUTMODE_CLUT_1BPP (0x0u << 8) /**< \brief (LCDC_OVR1CFG1) Color lookup table mode set to 1 bit per pixel */
#define   LCDC_OVR1CFG1_CLUTMODE_CLUT_2BPP (0x1u << 8) /**< \brief (LCDC_OVR1CFG1) Color lookup table mode set to 2 bits per pixel */
#define   LCDC_OVR1CFG1_CLUTMODE_CLUT_4BPP (0x2u << 8) /**< \brief (LCDC_OVR1CFG1) Color lookup table mode set to 4 bits per pixel */
#define   LCDC_OVR1CFG1_CLUTMODE_CLUT_8BPP (0x3u << 8) /**< \brief (LCDC_OVR1CFG1) Color lookup table mode set to 8 bits per pixel */
/* -------- LCDC_OVR1CFG2 : (LCDC Offset: 0x00000174) Overlay 1 Configuration Register 2 -------- */
#define LCDC_OVR1CFG2_XPOS_Pos 0
#define LCDC_OVR1CFG2_XPOS_Msk (0x7ffu << LCDC_OVR1CFG2_XPOS_Pos) /**< \brief (LCDC_OVR1CFG2) Horizontal Window Position */
#define LCDC_OVR1CFG2_XPOS(value) ((LCDC_OVR1CFG2_XPOS_Msk & ((value) << LCDC_OVR1CFG2_XPOS_Pos)))
#define LCDC_OVR1CFG2_YPOS_Pos 16
#define LCDC_OVR1CFG2_YPOS_Msk (0x7ffu << LCDC_OVR1CFG2_YPOS_Pos) /**< \brief (LCDC_OVR1CFG2) Vertical Window Position */
#define LCDC_OVR1CFG2_YPOS(value) ((LCDC_OVR1CFG2_YPOS_Msk & ((value) << LCDC_OVR1CFG2_YPOS_Pos)))
/* -------- LCDC_OVR1CFG3 : (LCDC Offset: 0x00000178) Overlay 1 Configuration Register 3 -------- */
#define LCDC_OVR1CFG3_XSIZE_Pos 0
#define LCDC_OVR1CFG3_XSIZE_Msk (0x7ffu << LCDC_OVR1CFG3_XSIZE_Pos) /**< \brief (LCDC_OVR1CFG3) Horizontal Window Size */
#define LCDC_OVR1CFG3_XSIZE(value) ((LCDC_OVR1CFG3_XSIZE_Msk & ((value) << LCDC_OVR1CFG3_XSIZE_Pos)))
#define LCDC_OVR1CFG3_YSIZE_Pos 16
#define LCDC_OVR1CFG3_YSIZE_Msk (0x7ffu << LCDC_OVR1CFG3_YSIZE_Pos) /**< \brief (LCDC_OVR1CFG3) Vertical Window Size */
#define LCDC_OVR1CFG3_YSIZE(value) ((LCDC_OVR1CFG3_YSIZE_Msk & ((value) << LCDC_OVR1CFG3_YSIZE_Pos)))
/* -------- LCDC_OVR1CFG4 : (LCDC Offset: 0x0000017C) Overlay 1 Configuration Register 4 -------- */
#define LCDC_OVR1CFG4_XSTRIDE_Pos 0
#define LCDC_OVR1CFG4_XSTRIDE_Msk (0xffffffffu << LCDC_OVR1CFG4_XSTRIDE_Pos) /**< \brief (LCDC_OVR1CFG4) Horizontal Stride */
#define LCDC_OVR1CFG4_XSTRIDE(value) ((LCDC_OVR1CFG4_XSTRIDE_Msk & ((value) << LCDC_OVR1CFG4_XSTRIDE_Pos)))
/* -------- LCDC_OVR1CFG5 : (LCDC Offset: 0x00000180) Overlay 1 Configuration Register 5 -------- */
#define LCDC_OVR1CFG5_PSTRIDE_Pos 0
#define LCDC_OVR1CFG5_PSTRIDE_Msk (0xffffffffu << LCDC_OVR1CFG5_PSTRIDE_Pos) /**< \brief (LCDC_OVR1CFG5) Pixel Stride */
#define LCDC_OVR1CFG5_PSTRIDE(value) ((LCDC_OVR1CFG5_PSTRIDE_Msk & ((value) << LCDC_OVR1CFG5_PSTRIDE_Pos)))
/* -------- LCDC_OVR1CFG6 : (LCDC Offset: 0x00000184) Overlay 1 Configuration Register 6 -------- */
#define LCDC_OVR1CFG6_BDEF_Pos 0
#define LCDC_OVR1CFG6_BDEF_Msk (0xffu << LCDC_OVR1CFG6_BDEF_Pos) /**< \brief (LCDC_OVR1CFG6) Blue Default */
#define LCDC_OVR1CFG6_BDEF(value) ((LCDC_OVR1CFG6_BDEF_Msk & ((value) << LCDC_OVR1CFG6_BDEF_Pos)))
#define LCDC_OVR1CFG6_GDEF_Pos 8
#define LCDC_OVR1CFG6_GDEF_Msk (0xffu << LCDC_OVR1CFG6_GDEF_Pos) /**< \brief (LCDC_OVR1CFG6) Green Default */
#define LCDC_OVR1CFG6_GDEF(value) ((LCDC_OVR1CFG6_GDEF_Msk & ((value) << LCDC_OVR1CFG6_GDEF_Pos)))
#define LCDC_OVR1CFG6_RDEF_Pos 16
#define LCDC_OVR1CFG6_RDEF_Msk (0xffu << LCDC_OVR1CFG6_RDEF_Pos) /**< \brief (LCDC_OVR1CFG6) Red Default */
#define LCDC_OVR1CFG6_RDEF(value) ((LCDC_OVR1CFG6_RDEF_Msk & ((value) << LCDC_OVR1CFG6_RDEF_Pos)))
/* -------- LCDC_OVR1CFG7 : (LCDC Offset: 0x00000188) Overlay 1 Configuration Register 7 -------- */
#define LCDC_OVR1CFG7_BKEY_Pos 0
#define LCDC_OVR1CFG7_BKEY_Msk (0xffu << LCDC_OVR1CFG7_BKEY_Pos) /**< \brief (LCDC_OVR1CFG7) Blue Color Component Chroma Key */
#define LCDC_OVR1CFG7_BKEY(value) ((LCDC_OVR1CFG7_BKEY_Msk & ((value) << LCDC_OVR1CFG7_BKEY_Pos)))
#define LCDC_OVR1CFG7_GKEY_Pos 8
#define LCDC_OVR1CFG7_GKEY_Msk (0xffu << LCDC_OVR1CFG7_GKEY_Pos) /**< \brief (LCDC_OVR1CFG7) Green Color Component Chroma Key */
#define LCDC_OVR1CFG7_GKEY(value) ((LCDC_OVR1CFG7_GKEY_Msk & ((value) << LCDC_OVR1CFG7_GKEY_Pos)))
#define LCDC_OVR1CFG7_RKEY_Pos 16
#define LCDC_OVR1CFG7_RKEY_Msk (0xffu << LCDC_OVR1CFG7_RKEY_Pos) /**< \brief (LCDC_OVR1CFG7) Red Color Component Chroma Key */
#define LCDC_OVR1CFG7_RKEY(value) ((LCDC_OVR1CFG7_RKEY_Msk & ((value) << LCDC_OVR1CFG7_RKEY_Pos)))
/* -------- LCDC_OVR1CFG8 : (LCDC Offset: 0x0000018C) Overlay 1 Configuration Register 8 -------- */
#define LCDC_OVR1CFG8_BMASK_Pos 0
#define LCDC_OVR1CFG8_BMASK_Msk (0xffu << LCDC_OVR1CFG8_BMASK_Pos) /**< \brief (LCDC_OVR1CFG8) Blue Color Component Chroma Key Mask */
#define LCDC_OVR1CFG8_BMASK(value) ((LCDC_OVR1CFG8_BMASK_Msk & ((value) << LCDC_OVR1CFG8_BMASK_Pos)))
#define LCDC_OVR1CFG8_GMASK_Pos 8
#define LCDC_OVR1CFG8_GMASK_Msk (0xffu << LCDC_OVR1CFG8_GMASK_Pos) /**< \brief (LCDC_OVR1CFG8) Green Color Component Chroma Key Mask */
#define LCDC_OVR1CFG8_GMASK(value) ((LCDC_OVR1CFG8_GMASK_Msk & ((value) << LCDC_OVR1CFG8_GMASK_Pos)))
#define LCDC_OVR1CFG8_RMASK_Pos 16
#define LCDC_OVR1CFG8_RMASK_Msk (0xffu << LCDC_OVR1CFG8_RMASK_Pos) /**< \brief (LCDC_OVR1CFG8) Red Color Component Chroma Key Mask */
#define LCDC_OVR1CFG8_RMASK(value) ((LCDC_OVR1CFG8_RMASK_Msk & ((value) << LCDC_OVR1CFG8_RMASK_Pos)))
/* -------- LCDC_OVR1CFG9 : (LCDC Offset: 0x00000190) Overlay 1 Configuration Register 9 -------- */
#define LCDC_OVR1CFG9_CRKEY (0x1u << 0) /**< \brief (LCDC_OVR1CFG9) Blender Chroma Key Enable */
#define LCDC_OVR1CFG9_INV (0x1u << 1) /**< \brief (LCDC_OVR1CFG9) Blender Inverted Blender Output Enable */
#define LCDC_OVR1CFG9_ITER2BL (0x1u << 2) /**< \brief (LCDC_OVR1CFG9) Blender Iterated Color Enable */
#define LCDC_OVR1CFG9_ITER (0x1u << 3) /**< \brief (LCDC_OVR1CFG9) Blender Use Iterated Color */
#define LCDC_OVR1CFG9_REVALPHA (0x1u << 4) /**< \brief (LCDC_OVR1CFG9) Blender Reverse Alpha */
#define LCDC_OVR1CFG9_GAEN (0x1u << 5) /**< \brief (LCDC_OVR1CFG9) Blender Global Alpha Enable */
#define LCDC_OVR1CFG9_LAEN (0x1u << 6) /**< \brief (LCDC_OVR1CFG9) Blender Local Alpha Enable */
#define LCDC_OVR1CFG9_OVR (0x1u << 7) /**< \brief (LCDC_OVR1CFG9) Blender Overlay Layer Enable */
#define LCDC_OVR1CFG9_DMA (0x1u << 8) /**< \brief (LCDC_OVR1CFG9) Blender DMA Layer Enable */
#define LCDC_OVR1CFG9_REP (0x1u << 9) /**< \brief (LCDC_OVR1CFG9) Use Replication logic to expand RGB color to 24 bits */
#define LCDC_OVR1CFG9_DSTKEY (0x1u << 10) /**< \brief (LCDC_OVR1CFG9) Destination Chroma Keying */
#define LCDC_OVR1CFG9_GA_Pos 16
#define LCDC_OVR1CFG9_GA_Msk (0xffu << LCDC_OVR1CFG9_GA_Pos) /**< \brief (LCDC_OVR1CFG9) Blender Global Alpha */
#define LCDC_OVR1CFG9_GA(value) ((LCDC_OVR1CFG9_GA_Msk & ((value) << LCDC_OVR1CFG9_GA_Pos)))
/* -------- LCDC_OVR2CHER : (LCDC Offset: 0x00000240) Overlay 2 Channel Enable Register -------- */
#define LCDC_OVR2CHER_CHEN (0x1u << 0) /**< \brief (LCDC_OVR2CHER) Channel Enable Register */
#define LCDC_OVR2CHER_UPDATEEN (0x1u << 1) /**< \brief (LCDC_OVR2CHER) Update Overlay Attributes Enable Register */
#define LCDC_OVR2CHER_A2QEN (0x1u << 2) /**< \brief (LCDC_OVR2CHER) Add To Queue Enable Register */
/* -------- LCDC_OVR2CHDR : (LCDC Offset: 0x00000244) Overlay 2 Channel Disable Register -------- */
#define LCDC_OVR2CHDR_CHDIS (0x1u << 0) /**< \brief (LCDC_OVR2CHDR) Channel Disable Register */
#define LCDC_OVR2CHDR_CHRST (0x1u << 8) /**< \brief (LCDC_OVR2CHDR) Channel Reset Register */
/* -------- LCDC_OVR2CHSR : (LCDC Offset: 0x00000248) Overlay 2 Channel Status Register -------- */
#define LCDC_OVR2CHSR_CHSR (0x1u << 0) /**< \brief (LCDC_OVR2CHSR) Channel Status Register */
#define LCDC_OVR2CHSR_UPDATESR (0x1u << 1) /**< \brief (LCDC_OVR2CHSR) Update Overlay Attributes In Progress Status Register */
#define LCDC_OVR2CHSR_A2QSR (0x1u << 2) /**< \brief (LCDC_OVR2CHSR) Add To Queue Status Register */
/* -------- LCDC_OVR2IER : (LCDC Offset: 0x0000024C) Overlay 2 Interrupt Enable Register -------- */
#define LCDC_OVR2IER_DMA (0x1u << 2) /**< \brief (LCDC_OVR2IER) End of DMA Transfer Interrupt Enable Register */
#define LCDC_OVR2IER_DSCR (0x1u << 3) /**< \brief (LCDC_OVR2IER) Descriptor Loaded Interrupt Enable Register */
#define LCDC_OVR2IER_ADD (0x1u << 4) /**< \brief (LCDC_OVR2IER) Head Descriptor Loaded Interrupt Enable Register */
#define LCDC_OVR2IER_DONE (0x1u << 5) /**< \brief (LCDC_OVR2IER) End of List Interrupt Enable Register */
#define LCDC_OVR2IER_OVR (0x1u << 6) /**< \brief (LCDC_OVR2IER) Overflow Interrupt Enable Register */
/* -------- LCDC_OVR2IDR : (LCDC Offset: 0x00000250) Overlay 2 Interrupt Disable Register -------- */
#define LCDC_OVR2IDR_DMA (0x1u << 2) /**< \brief (LCDC_OVR2IDR) End of DMA Transfer Interrupt Disable Register */
#define LCDC_OVR2IDR_DSCR (0x1u << 3) /**< \brief (LCDC_OVR2IDR) Descriptor Loaded Interrupt Disable Register */
#define LCDC_OVR2IDR_ADD (0x1u << 4) /**< \brief (LCDC_OVR2IDR) Head Descriptor Loaded Interrupt Disable Register */
#define LCDC_OVR2IDR_DONE (0x1u << 5) /**< \brief (LCDC_OVR2IDR) End of List Interrupt Disable Register */
#define LCDC_OVR2IDR_OVR (0x1u << 6) /**< \brief (LCDC_OVR2IDR) Overflow Interrupt Disable Register */
/* -------- LCDC_OVR2IMR : (LCDC Offset: 0x00000254) Overlay 2 Interrupt Mask Register -------- */
#define LCDC_OVR2IMR_DMA (0x1u << 2) /**< \brief (LCDC_OVR2IMR) End of DMA Transfer Interrupt Mask Register */
#define LCDC_OVR2IMR_DSCR (0x1u << 3) /**< \brief (LCDC_OVR2IMR) Descriptor Loaded Interrupt Mask Register */
#define LCDC_OVR2IMR_ADD (0x1u << 4) /**< \brief (LCDC_OVR2IMR) Head Descriptor Loaded Interrupt Mask Register */
#define LCDC_OVR2IMR_DONE (0x1u << 5) /**< \brief (LCDC_OVR2IMR) End of List Interrupt Mask Register */
#define LCDC_OVR2IMR_OVR (0x1u << 6) /**< \brief (LCDC_OVR2IMR) Overflow Interrupt Mask Register */
/* -------- LCDC_OVR2ISR : (LCDC Offset: 0x00000258) Overlay 2 Interrupt Status Register -------- */
#define LCDC_OVR2ISR_DMA (0x1u << 2) /**< \brief (LCDC_OVR2ISR) End of DMA Transfer */
#define LCDC_OVR2ISR_DSCR (0x1u << 3) /**< \brief (LCDC_OVR2ISR) DMA Descriptor Loaded */
#define LCDC_OVR2ISR_ADD (0x1u << 4) /**< \brief (LCDC_OVR2ISR) Head Descriptor Loaded */
#define LCDC_OVR2ISR_DONE (0x1u << 5) /**< \brief (LCDC_OVR2ISR) End of List Detected */
#define LCDC_OVR2ISR_OVR (0x1u << 6) /**< \brief (LCDC_OVR2ISR) Overflow Detected */
/* -------- LCDC_OVR2HEAD : (LCDC Offset: 0x0000025C) Overlay 2 DMA Head Register -------- */
#define LCDC_OVR2HEAD_HEAD_Pos 2
#define LCDC_OVR2HEAD_HEAD_Msk (0x3fffffffu << LCDC_OVR2HEAD_HEAD_Pos) /**< \brief (LCDC_OVR2HEAD) DMA Head Pointer */
#define LCDC_OVR2HEAD_HEAD(value) ((LCDC_OVR2HEAD_HEAD_Msk & ((value) << LCDC_OVR2HEAD_HEAD_Pos)))
/* -------- LCDC_OVR2ADDR : (LCDC Offset: 0x00000260) Overlay 2 DMA Address Register -------- */
#define LCDC_OVR2ADDR_ADDR_Pos 0
#define LCDC_OVR2ADDR_ADDR_Msk (0xffffffffu << LCDC_OVR2ADDR_ADDR_Pos) /**< \brief (LCDC_OVR2ADDR) DMA Transfer Overlay 2 Address */
#define LCDC_OVR2ADDR_ADDR(value) ((LCDC_OVR2ADDR_ADDR_Msk & ((value) << LCDC_OVR2ADDR_ADDR_Pos)))
/* -------- LCDC_OVR2CTRL : (LCDC Offset: 0x00000264) Overlay 2 DMA Control Register -------- */
#define LCDC_OVR2CTRL_DFETCH (0x1u << 0) /**< \brief (LCDC_OVR2CTRL) Transfer Descriptor Fetch Enable */
#define LCDC_OVR2CTRL_LFETCH (0x1u << 1) /**< \brief (LCDC_OVR2CTRL) Lookup Table Fetch Enable */
#define LCDC_OVR2CTRL_DMAIEN (0x1u << 2) /**< \brief (LCDC_OVR2CTRL) End of DMA Transfer Interrupt Enable */
#define LCDC_OVR2CTRL_DSCRIEN (0x1u << 3) /**< \brief (LCDC_OVR2CTRL) Descriptor Loaded Interrupt Enable */
#define LCDC_OVR2CTRL_ADDIEN (0x1u << 4) /**< \brief (LCDC_OVR2CTRL) Add Head Descriptor to Queue Interrupt Enable */
#define LCDC_OVR2CTRL_DONEIEN (0x1u << 5) /**< \brief (LCDC_OVR2CTRL) End of List Interrupt Enable */
/* -------- LCDC_OVR2NEXT : (LCDC Offset: 0x00000268) Overlay 2 DMA Next Register -------- */
#define LCDC_OVR2NEXT_NEXT_Pos 0
#define LCDC_OVR2NEXT_NEXT_Msk (0xffffffffu << LCDC_OVR2NEXT_NEXT_Pos) /**< \brief (LCDC_OVR2NEXT) DMA Descriptor Next Address */
#define LCDC_OVR2NEXT_NEXT(value) ((LCDC_OVR2NEXT_NEXT_Msk & ((value) << LCDC_OVR2NEXT_NEXT_Pos)))
/* -------- LCDC_OVR2CFG0 : (LCDC Offset: 0x0000026C) Overlay 2 Configuration Register 0 -------- */
#define LCDC_OVR2CFG0_BLEN_Pos 4
#define LCDC_OVR2CFG0_BLEN_Msk (0x3u << LCDC_OVR2CFG0_BLEN_Pos) /**< \brief (LCDC_OVR2CFG0) AHB Burst Length */
#define   LCDC_OVR2CFG0_BLEN_AHB_SINGLE (0x0u << 4) /**< \brief (LCDC_OVR2CFG0) AHB Access is started as soon as there is enough space in the FIFO to store one data. SINGLE, INCR, INCR4, INCR8 and INCR16 bursts are used. INCR is used for a burst of 2 and 3 beats. */
#define   LCDC_OVR2CFG0_BLEN_AHB_INCR4 (0x1u << 4) /**< \brief (LCDC_OVR2CFG0) AHB Access is started as soon as there is enough space in the FIFO to store a total amount of 4 data. An AHB INCR4 Burst is used. SINGLE, INCR and INCR4 bursts are used. INCR is used for a burst of 2 and 3 beats. */
#define   LCDC_OVR2CFG0_BLEN_AHB_INCR8 (0x2u << 4) /**< \brief (LCDC_OVR2CFG0) AHB Access is started as soon as there is enough space in the FIFO to store a total amount of 8 data. An AHB INCR8 Burst is used. SINGLE, INCR, INCR4 and INCR8 bursts are used. INCR is used for a burst of 2 and 3 beats. */
#define   LCDC_OVR2CFG0_BLEN_AHB_INCR16 (0x3u << 4) /**< \brief (LCDC_OVR2CFG0) AHB Access is started as soon as there is enough space in the FIFO to store a total amount of 16 data. An AHB INCR16 Burst is used. SINGLE, INCR, INCR4, INCR8 and INCR16 bursts are used. INCR is used for a burst of 2 and 3 beats. */
#define LCDC_OVR2CFG0_DLBO (0x1u << 8) /**< \brief (LCDC_OVR2CFG0) Defined Length Burst Only For Channel Bus Transaction. */
#define LCDC_OVR2CFG0_ROTDIS (0x1u << 12) /**< \brief (LCDC_OVR2CFG0) Hardware Rotation Optimization Disable */
#define LCDC_OVR2CFG0_LOCKDIS (0x1u << 13) /**< \brief (LCDC_OVR2CFG0) Hardware Rotation Lock Disable */
/* -------- LCDC_OVR2CFG1 : (LCDC Offset: 0x00000270) Overlay 2 Configuration Register 1 -------- */
#define LCDC_OVR2CFG1_CLUTEN (0x1u << 0) /**< \brief (LCDC_OVR2CFG1) Color Lookup Table Mode Enable */
#define LCDC_OVR2CFG1_RGBMODE_Pos 4
#define LCDC_OVR2CFG1_RGBMODE_Msk (0xfu << LCDC_OVR2CFG1_RGBMODE_Pos) /**< \brief (LCDC_OVR2CFG1) RGB Mode Input Selection */
#define   LCDC_OVR2CFG1_RGBMODE_12BPP_RGB_444 (0x0u << 4) /**< \brief (LCDC_OVR2CFG1) 12 bpp RGB 444 */
#define   LCDC_OVR2CFG1_RGBMODE_16BPP_ARGB_4444 (0x1u << 4) /**< \brief (LCDC_OVR2CFG1) 16 bpp ARGB 4444 */
#define   LCDC_OVR2CFG1_RGBMODE_16BPP_RGBA_4444 (0x2u << 4) /**< \brief (LCDC_OVR2CFG1) 16 bpp RGBA 4444 */
#define   LCDC_OVR2CFG1_RGBMODE_16BPP_RGB_565 (0x3u << 4) /**< \brief (LCDC_OVR2CFG1) 16 bpp RGB 565 */
#define   LCDC_OVR2CFG1_RGBMODE_16BPP_TRGB_1555 (0x4u << 4) /**< \brief (LCDC_OVR2CFG1) 16 bpp TRGB 1555 */
#define   LCDC_OVR2CFG1_RGBMODE_18BPP_RGB_666 (0x5u << 4) /**< \brief (LCDC_OVR2CFG1) 18 bpp RGB 666 */
#define   LCDC_OVR2CFG1_RGBMODE_18BPP_RGB_666PACKED (0x6u << 4) /**< \brief (LCDC_OVR2CFG1) 18 bpp RGB 666 PACKED */
#define   LCDC_OVR2CFG1_RGBMODE_19BPP_TRGB_1666 (0x7u << 4) /**< \brief (LCDC_OVR2CFG1) 19 bpp TRGB 1666 */
#define   LCDC_OVR2CFG1_RGBMODE_19BPP_TRGB_PACKED (0x8u << 4) /**< \brief (LCDC_OVR2CFG1) 19 bpp TRGB 1666 PACKED */
#define   LCDC_OVR2CFG1_RGBMODE_24BPP_RGB_888 (0x9u << 4) /**< \brief (LCDC_OVR2CFG1) 24 bpp RGB 888 */
#define   LCDC_OVR2CFG1_RGBMODE_24BPP_RGB_888_PACKED (0xAu << 4) /**< \brief (LCDC_OVR2CFG1) 24 bpp RGB 888 PACKED */
#define   LCDC_OVR2CFG1_RGBMODE_25BPP_TRGB_1888 (0xBu << 4) /**< \brief (LCDC_OVR2CFG1) 25 bpp TRGB 1888 */
#define   LCDC_OVR2CFG1_RGBMODE_32BPP_ARGB_8888 (0xCu << 4) /**< \brief (LCDC_OVR2CFG1) 32 bpp ARGB 8888 */
#define   LCDC_OVR2CFG1_RGBMODE_32BPP_RGBA_8888 (0xDu << 4) /**< \brief (LCDC_OVR2CFG1) 32 bpp RGBA 8888 */
#define LCDC_OVR2CFG1_CLUTMODE_Pos 8
#define LCDC_OVR2CFG1_CLUTMODE_Msk (0x3u << LCDC_OVR2CFG1_CLUTMODE_Pos) /**< \brief (LCDC_OVR2CFG1) Color Lookup Table Mode Input Selection */
#define   LCDC_OVR2CFG1_CLUTMODE_CLUT_1BPP (0x0u << 8) /**< \brief (LCDC_OVR2CFG1) Color lookup table mode set to 1 bit per pixel */
#define   LCDC_OVR2CFG1_CLUTMODE_CLUT_2BPP (0x1u << 8) /**< \brief (LCDC_OVR2CFG1) Color lookup table mode set to 2 bits per pixel */
#define   LCDC_OVR2CFG1_CLUTMODE_CLUT_4BPP (0x2u << 8) /**< \brief (LCDC_OVR2CFG1) Color lookup table mode set to 4 bits per pixel */
#define   LCDC_OVR2CFG1_CLUTMODE_CLUT_8BPP (0x3u << 8) /**< \brief (LCDC_OVR2CFG1) Color lookup table mode set to 8 bits per pixel */
/* -------- LCDC_OVR2CFG2 : (LCDC Offset: 0x00000274) Overlay 2 Configuration Register 2 -------- */
#define LCDC_OVR2CFG2_XPOS_Pos 0
#define LCDC_OVR2CFG2_XPOS_Msk (0x7ffu << LCDC_OVR2CFG2_XPOS_Pos) /**< \brief (LCDC_OVR2CFG2) Horizontal Window Position */
#define LCDC_OVR2CFG2_XPOS(value) ((LCDC_OVR2CFG2_XPOS_Msk & ((value) << LCDC_OVR2CFG2_XPOS_Pos)))
#define LCDC_OVR2CFG2_YPOS_Pos 16
#define LCDC_OVR2CFG2_YPOS_Msk (0x7ffu << LCDC_OVR2CFG2_YPOS_Pos) /**< \brief (LCDC_OVR2CFG2) Vertical Window Position */
#define LCDC_OVR2CFG2_YPOS(value) ((LCDC_OVR2CFG2_YPOS_Msk & ((value) << LCDC_OVR2CFG2_YPOS_Pos)))
/* -------- LCDC_OVR2CFG3 : (LCDC Offset: 0x00000278) Overlay 2 Configuration Register 3 -------- */
#define LCDC_OVR2CFG3_XSIZE_Pos 0
#define LCDC_OVR2CFG3_XSIZE_Msk (0x7ffu << LCDC_OVR2CFG3_XSIZE_Pos) /**< \brief (LCDC_OVR2CFG3) Horizontal Window Size */
#define LCDC_OVR2CFG3_XSIZE(value) ((LCDC_OVR2CFG3_XSIZE_Msk & ((value) << LCDC_OVR2CFG3_XSIZE_Pos)))
#define LCDC_OVR2CFG3_YSIZE_Pos 16
#define LCDC_OVR2CFG3_YSIZE_Msk (0x7ffu << LCDC_OVR2CFG3_YSIZE_Pos) /**< \brief (LCDC_OVR2CFG3) Vertical Window Size */
#define LCDC_OVR2CFG3_YSIZE(value) ((LCDC_OVR2CFG3_YSIZE_Msk & ((value) << LCDC_OVR2CFG3_YSIZE_Pos)))
/* -------- LCDC_OVR2CFG4 : (LCDC Offset: 0x0000027C) Overlay 2 Configuration Register 4 -------- */
#define LCDC_OVR2CFG4_XSTRIDE_Pos 0
#define LCDC_OVR2CFG4_XSTRIDE_Msk (0xffffffffu << LCDC_OVR2CFG4_XSTRIDE_Pos) /**< \brief (LCDC_OVR2CFG4) Horizontal Stride */
#define LCDC_OVR2CFG4_XSTRIDE(value) ((LCDC_OVR2CFG4_XSTRIDE_Msk & ((value) << LCDC_OVR2CFG4_XSTRIDE_Pos)))
/* -------- LCDC_OVR2CFG5 : (LCDC Offset: 0x00000280) Overlay 2 Configuration Register 5 -------- */
#define LCDC_OVR2CFG5_PSTRIDE_Pos 0
#define LCDC_OVR2CFG5_PSTRIDE_Msk (0xffffffffu << LCDC_OVR2CFG5_PSTRIDE_Pos) /**< \brief (LCDC_OVR2CFG5) Pixel Stride */
#define LCDC_OVR2CFG5_PSTRIDE(value) ((LCDC_OVR2CFG5_PSTRIDE_Msk & ((value) << LCDC_OVR2CFG5_PSTRIDE_Pos)))
/* -------- LCDC_OVR2CFG6 : (LCDC Offset: 0x00000284) Overlay 2 Configuration Register 6 -------- */
#define LCDC_OVR2CFG6_BDEF_Pos 0
#define LCDC_OVR2CFG6_BDEF_Msk (0xffu << LCDC_OVR2CFG6_BDEF_Pos) /**< \brief (LCDC_OVR2CFG6) Blue Default */
#define LCDC_OVR2CFG6_BDEF(value) ((LCDC_OVR2CFG6_BDEF_Msk & ((value) << LCDC_OVR2CFG6_BDEF_Pos)))
#define LCDC_OVR2CFG6_GDEF_Pos 8
#define LCDC_OVR2CFG6_GDEF_Msk (0xffu << LCDC_OVR2CFG6_GDEF_Pos) /**< \brief (LCDC_OVR2CFG6) Green Default */
#define LCDC_OVR2CFG6_GDEF(value) ((LCDC_OVR2CFG6_GDEF_Msk & ((value) << LCDC_OVR2CFG6_GDEF_Pos)))
#define LCDC_OVR2CFG6_RDEF_Pos 16
#define LCDC_OVR2CFG6_RDEF_Msk (0xffu << LCDC_OVR2CFG6_RDEF_Pos) /**< \brief (LCDC_OVR2CFG6) Red Default */
#define LCDC_OVR2CFG6_RDEF(value) ((LCDC_OVR2CFG6_RDEF_Msk & ((value) << LCDC_OVR2CFG6_RDEF_Pos)))
/* -------- LCDC_OVR2CFG7 : (LCDC Offset: 0x00000288) Overlay 2 Configuration Register 7 -------- */
#define LCDC_OVR2CFG7_BKEY_Pos 0
#define LCDC_OVR2CFG7_BKEY_Msk (0xffu << LCDC_OVR2CFG7_BKEY_Pos) /**< \brief (LCDC_OVR2CFG7) Blue Color Component Chroma Key */
#define LCDC_OVR2CFG7_BKEY(value) ((LCDC_OVR2CFG7_BKEY_Msk & ((value) << LCDC_OVR2CFG7_BKEY_Pos)))
#define LCDC_OVR2CFG7_GKEY_Pos 8
#define LCDC_OVR2CFG7_GKEY_Msk (0xffu << LCDC_OVR2CFG7_GKEY_Pos) /**< \brief (LCDC_OVR2CFG7) Green Color Component Chroma Key */
#define LCDC_OVR2CFG7_GKEY(value) ((LCDC_OVR2CFG7_GKEY_Msk & ((value) << LCDC_OVR2CFG7_GKEY_Pos)))
#define LCDC_OVR2CFG7_RKEY_Pos 16
#define LCDC_OVR2CFG7_RKEY_Msk (0xffu << LCDC_OVR2CFG7_RKEY_Pos) /**< \brief (LCDC_OVR2CFG7) Red Color Component Chroma Key */
#define LCDC_OVR2CFG7_RKEY(value) ((LCDC_OVR2CFG7_RKEY_Msk & ((value) << LCDC_OVR2CFG7_RKEY_Pos)))
/* -------- LCDC_OVR2CFG8 : (LCDC Offset: 0x0000028C) Overlay 2 Configuration Register 8 -------- */
#define LCDC_OVR2CFG8_BMASK_Pos 0
#define LCDC_OVR2CFG8_BMASK_Msk (0xffu << LCDC_OVR2CFG8_BMASK_Pos) /**< \brief (LCDC_OVR2CFG8) Blue Color Component Chroma Key Mask */
#define LCDC_OVR2CFG8_BMASK(value) ((LCDC_OVR2CFG8_BMASK_Msk & ((value) << LCDC_OVR2CFG8_BMASK_Pos)))
#define LCDC_OVR2CFG8_GMASK_Pos 8
#define LCDC_OVR2CFG8_GMASK_Msk (0xffu << LCDC_OVR2CFG8_GMASK_Pos) /**< \brief (LCDC_OVR2CFG8) Green Color Component Chroma Key Mask */
#define LCDC_OVR2CFG8_GMASK(value) ((LCDC_OVR2CFG8_GMASK_Msk & ((value) << LCDC_OVR2CFG8_GMASK_Pos)))
#define LCDC_OVR2CFG8_RMASK_Pos 16
#define LCDC_OVR2CFG8_RMASK_Msk (0xffu << LCDC_OVR2CFG8_RMASK_Pos) /**< \brief (LCDC_OVR2CFG8) Red Color Component Chroma Key Mask */
#define LCDC_OVR2CFG8_RMASK(value) ((LCDC_OVR2CFG8_RMASK_Msk & ((value) << LCDC_OVR2CFG8_RMASK_Pos)))
/* -------- LCDC_OVR2CFG9 : (LCDC Offset: 0x00000290) Overlay 2 Configuration Register 8 -------- */
#define LCDC_OVR2CFG9_CRKEY (0x1u << 0) /**< \brief (LCDC_OVR2CFG9) Blender Chroma Key Enable */
#define LCDC_OVR2CFG9_INV (0x1u << 1) /**< \brief (LCDC_OVR2CFG9) Blender Inverted Blender Output Enable */
#define LCDC_OVR2CFG9_ITER2BL (0x1u << 2) /**< \brief (LCDC_OVR2CFG9) Blender Iterated Color Enable */
#define LCDC_OVR2CFG9_ITER (0x1u << 3) /**< \brief (LCDC_OVR2CFG9) Blender Use Iterated Color */
#define LCDC_OVR2CFG9_REVALPHA (0x1u << 4) /**< \brief (LCDC_OVR2CFG9) Blender Reverse Alpha */
#define LCDC_OVR2CFG9_GAEN (0x1u << 5) /**< \brief (LCDC_OVR2CFG9) Blender Global Alpha Enable */
#define LCDC_OVR2CFG9_LAEN (0x1u << 6) /**< \brief (LCDC_OVR2CFG9) Blender Local Alpha Enable */
#define LCDC_OVR2CFG9_OVR (0x1u << 7) /**< \brief (LCDC_OVR2CFG9) Blender Overlay Layer Enable */
#define LCDC_OVR2CFG9_DMA (0x1u << 8) /**< \brief (LCDC_OVR2CFG9) Blender DMA Layer Enable */
#define LCDC_OVR2CFG9_REP (0x1u << 9) /**< \brief (LCDC_OVR2CFG9) Use Replication logic to expand RGB color to 24 bits */
#define LCDC_OVR2CFG9_DSTKEY (0x1u << 10) /**< \brief (LCDC_OVR2CFG9) Destination Chroma Keying */
#define LCDC_OVR2CFG9_GA_Pos 16
#define LCDC_OVR2CFG9_GA_Msk (0xffu << LCDC_OVR2CFG9_GA_Pos) /**< \brief (LCDC_OVR2CFG9) Blender Global Alpha */
#define LCDC_OVR2CFG9_GA(value) ((LCDC_OVR2CFG9_GA_Msk & ((value) << LCDC_OVR2CFG9_GA_Pos)))
/* -------- LCDC_HEOCHER : (LCDC Offset: 0x00000340) High End Overlay Channel Enable Register -------- */
#define LCDC_HEOCHER_CHEN (0x1u << 0) /**< \brief (LCDC_HEOCHER) Channel Enable Register */
#define LCDC_HEOCHER_UPDATEEN (0x1u << 1) /**< \brief (LCDC_HEOCHER) Update Overlay Attributes Enable Register */
#define LCDC_HEOCHER_A2QEN (0x1u << 2) /**< \brief (LCDC_HEOCHER) Add To Queue Enable Register */
/* -------- LCDC_HEOCHDR : (LCDC Offset: 0x00000344) High End Overlay Channel Disable Register -------- */
#define LCDC_HEOCHDR_CHDIS (0x1u << 0) /**< \brief (LCDC_HEOCHDR) Channel Disable Register */
#define LCDC_HEOCHDR_CHRST (0x1u << 8) /**< \brief (LCDC_HEOCHDR) Channel Reset Register */
/* -------- LCDC_HEOCHSR : (LCDC Offset: 0x00000348) High End Overlay Channel Status Register -------- */
#define LCDC_HEOCHSR_CHSR (0x1u << 0) /**< \brief (LCDC_HEOCHSR) Channel Status Register */
#define LCDC_HEOCHSR_UPDATESR (0x1u << 1) /**< \brief (LCDC_HEOCHSR) Update Overlay Attributes In Progress Status Register */
#define LCDC_HEOCHSR_A2QSR (0x1u << 2) /**< \brief (LCDC_HEOCHSR) Add To Queue Status Register */
/* -------- LCDC_HEOIER : (LCDC Offset: 0x0000034C) High End Overlay Interrupt Enable Register -------- */
#define LCDC_HEOIER_DMA (0x1u << 2) /**< \brief (LCDC_HEOIER) End of DMA Transfer Interrupt Enable Register */
#define LCDC_HEOIER_DSCR (0x1u << 3) /**< \brief (LCDC_HEOIER) Descriptor Loaded Interrupt Enable Register */
#define LCDC_HEOIER_ADD (0x1u << 4) /**< \brief (LCDC_HEOIER) Head Descriptor Loaded Interrupt Enable Register */
#define LCDC_HEOIER_DONE (0x1u << 5) /**< \brief (LCDC_HEOIER) End of List Interrupt Enable Register */
#define LCDC_HEOIER_OVR (0x1u << 6) /**< \brief (LCDC_HEOIER) Overflow Interrupt Enable Register */
#define LCDC_HEOIER_UDMA (0x1u << 10) /**< \brief (LCDC_HEOIER) End of DMA Transfer for U or UV Chrominance Interrupt Enable Register */
#define LCDC_HEOIER_UDSCR (0x1u << 11) /**< \brief (LCDC_HEOIER) Descriptor Loaded for U or UV Chrominance Interrupt Enable Register */
#define LCDC_HEOIER_UADD (0x1u << 12) /**< \brief (LCDC_HEOIER) Head Descriptor Loaded for U or UV Chrominance Interrupt Enable Register */
#define LCDC_HEOIER_UDONE (0x1u << 13) /**< \brief (LCDC_HEOIER) End of List for U or UV Chrominance Interrupt Enable Register */
#define LCDC_HEOIER_UOVR (0x1u << 14) /**< \brief (LCDC_HEOIER) Overflow for U or UV Chrominance Interrupt Enable Register */
#define LCDC_HEOIER_VDMA (0x1u << 18) /**< \brief (LCDC_HEOIER) End of DMA for V Chrominance Transfer Interrupt Enable Register */
#define LCDC_HEOIER_VDSCR (0x1u << 19) /**< \brief (LCDC_HEOIER) Descriptor Loaded for V Chrominance Interrupt Enable Register */
#define LCDC_HEOIER_VADD (0x1u << 20) /**< \brief (LCDC_HEOIER) Head Descriptor Loaded for V Chrominance Interrupt Enable Register */
#define LCDC_HEOIER_VDONE (0x1u << 21) /**< \brief (LCDC_HEOIER) End of List for V Chrominance Interrupt Enable Register */
#define LCDC_HEOIER_VOVR (0x1u << 22) /**< \brief (LCDC_HEOIER) Overflow for V Chrominance Interrupt Enable Register */
/* -------- LCDC_HEOIDR : (LCDC Offset: 0x00000350) High End Overlay Interrupt Disable Register -------- */
#define LCDC_HEOIDR_DMA (0x1u << 2) /**< \brief (LCDC_HEOIDR) End of DMA Transfer Interrupt Disable Register */
#define LCDC_HEOIDR_DSCR (0x1u << 3) /**< \brief (LCDC_HEOIDR) Descriptor Loaded Interrupt Disable Register */
#define LCDC_HEOIDR_ADD (0x1u << 4) /**< \brief (LCDC_HEOIDR) Head Descriptor Loaded Interrupt Disable Register */
#define LCDC_HEOIDR_DONE (0x1u << 5) /**< \brief (LCDC_HEOIDR) End of List Interrupt Disable Register */
#define LCDC_HEOIDR_OVR (0x1u << 6) /**< \brief (LCDC_HEOIDR) Overflow Interrupt Disable Register */
#define LCDC_HEOIDR_UDMA (0x1u << 10) /**< \brief (LCDC_HEOIDR) End of DMA Transfer for U or UV Chrominance Component Interrupt Disable Register */
#define LCDC_HEOIDR_UDSCR (0x1u << 11) /**< \brief (LCDC_HEOIDR) Descriptor Loaded for U or UV Chrominance Component Interrupt Disable Register */
#define LCDC_HEOIDR_UADD (0x1u << 12) /**< \brief (LCDC_HEOIDR) Head Descriptor Loaded for U or UV Chrominance Component Interrupt Disable Register */
#define LCDC_HEOIDR_UDONE (0x1u << 13) /**< \brief (LCDC_HEOIDR) End of List Interrupt for U or UV Chrominance Component Disable Register */
#define LCDC_HEOIDR_UOVR (0x1u << 14) /**< \brief (LCDC_HEOIDR) Overflow Interrupt for U or UV Chrominance Component Disable Register */
#define LCDC_HEOIDR_VDMA (0x1u << 18) /**< \brief (LCDC_HEOIDR) End of DMA Transfer for V Chrominance Component Interrupt Disable Register */
#define LCDC_HEOIDR_VDSCR (0x1u << 19) /**< \brief (LCDC_HEOIDR) Descriptor Loaded for V Chrominance Component Interrupt Disable Register */
#define LCDC_HEOIDR_VADD (0x1u << 20) /**< \brief (LCDC_HEOIDR) Head Descriptor Loaded for V Chrominance Component Interrupt Disable Register */
#define LCDC_HEOIDR_VDONE (0x1u << 21) /**< \brief (LCDC_HEOIDR) End of List for V Chrominance Component Interrupt Disable Register */
#define LCDC_HEOIDR_VOVR (0x1u << 22) /**< \brief (LCDC_HEOIDR) Overflow for V Chrominance Component Interrupt Disable Register */
/* -------- LCDC_HEOIMR : (LCDC Offset: 0x00000354) High End Overlay Interrupt Mask Register -------- */
#define LCDC_HEOIMR_DMA (0x1u << 2) /**< \brief (LCDC_HEOIMR) End of DMA Transfer Interrupt Mask Register */
#define LCDC_HEOIMR_DSCR (0x1u << 3) /**< \brief (LCDC_HEOIMR) Descriptor Loaded Interrupt Mask Register */
#define LCDC_HEOIMR_ADD (0x1u << 4) /**< \brief (LCDC_HEOIMR) Head Descriptor Loaded Interrupt Mask Register */
#define LCDC_HEOIMR_DONE (0x1u << 5) /**< \brief (LCDC_HEOIMR) End of List Interrupt Mask Register */
#define LCDC_HEOIMR_OVR (0x1u << 6) /**< \brief (LCDC_HEOIMR) Overflow Interrupt Mask Register */
#define LCDC_HEOIMR_UDMA (0x1u << 10) /**< \brief (LCDC_HEOIMR) End of DMA Transfer for U or UV Chrominance Component Interrupt Mask Register */
#define LCDC_HEOIMR_UDSCR (0x1u << 11) /**< \brief (LCDC_HEOIMR) Descriptor Loaded for U or UV Chrominance Component Interrupt Mask Register */
#define LCDC_HEOIMR_UADD (0x1u << 12) /**< \brief (LCDC_HEOIMR) Head Descriptor Loaded for U or UV Chrominance Component Mask Register */
#define LCDC_HEOIMR_UDONE (0x1u << 13) /**< \brief (LCDC_HEOIMR) End of List for U or UV Chrominance Component Mask Register */
#define LCDC_HEOIMR_UOVR (0x1u << 14) /**< \brief (LCDC_HEOIMR) Overflow for U Chrominance Interrupt Mask Register */
#define LCDC_HEOIMR_VDMA (0x1u << 18) /**< \brief (LCDC_HEOIMR) End of DMA Transfer for V Chrominance Component Interrupt Mask Register */
#define LCDC_HEOIMR_VDSCR (0x1u << 19) /**< \brief (LCDC_HEOIMR) Descriptor Loaded for V Chrominance Component Interrupt Mask Register */
#define LCDC_HEOIMR_VADD (0x1u << 20) /**< \brief (LCDC_HEOIMR) Head Descriptor Loaded for V Chrominance Component Mask Register */
#define LCDC_HEOIMR_VDONE (0x1u << 21) /**< \brief (LCDC_HEOIMR) End of List for V Chrominance Component Mask Register */
#define LCDC_HEOIMR_VOVR (0x1u << 22) /**< \brief (LCDC_HEOIMR) Overflow for V Chrominance Interrupt Mask Register */
/* -------- LCDC_HEOISR : (LCDC Offset: 0x00000358) High End Overlay Interrupt Status Register -------- */
#define LCDC_HEOISR_DMA (0x1u << 2) /**< \brief (LCDC_HEOISR) End of DMA Transfer */
#define LCDC_HEOISR_DSCR (0x1u << 3) /**< \brief (LCDC_HEOISR) DMA Descriptor Loaded */
#define LCDC_HEOISR_ADD (0x1u << 4) /**< \brief (LCDC_HEOISR) Head Descriptor Loaded */
#define LCDC_HEOISR_DONE (0x1u << 5) /**< \brief (LCDC_HEOISR) End of List Detected */
#define LCDC_HEOISR_OVR (0x1u << 6) /**< \brief (LCDC_HEOISR) Overflow Detected */
#define LCDC_HEOISR_UDMA (0x1u << 10) /**< \brief (LCDC_HEOISR) End of DMA Transfer for U Component */
#define LCDC_HEOISR_UDSCR (0x1u << 11) /**< \brief (LCDC_HEOISR) DMA Descriptor Loaded for U Component */
#define LCDC_HEOISR_UADD (0x1u << 12) /**< \brief (LCDC_HEOISR) Head Descriptor Loaded for U Component */
#define LCDC_HEOISR_UDONE (0x1u << 13) /**< \brief (LCDC_HEOISR) End of List Detected for U Component */
#define LCDC_HEOISR_UOVR (0x1u << 14) /**< \brief (LCDC_HEOISR) Overflow Detected for U Component */
#define LCDC_HEOISR_VDMA (0x1u << 18) /**< \brief (LCDC_HEOISR) End of DMA Transfer for V Component */
#define LCDC_HEOISR_VDSCR (0x1u << 19) /**< \brief (LCDC_HEOISR) DMA Descriptor Loaded for V Component */
#define LCDC_HEOISR_VADD (0x1u << 20) /**< \brief (LCDC_HEOISR) Head Descriptor Loaded for V Component */
#define LCDC_HEOISR_VDONE (0x1u << 21) /**< \brief (LCDC_HEOISR) End of List Detected for V Component */
#define LCDC_HEOISR_VOVR (0x1u << 22) /**< \brief (LCDC_HEOISR) Overflow Detected for V Component */
/* -------- LCDC_HEOHEAD : (LCDC Offset: 0x0000035C) High End Overlay DMA Head Register -------- */
#define LCDC_HEOHEAD_HEAD_Pos 2
#define LCDC_HEOHEAD_HEAD_Msk (0x3fffffffu << LCDC_HEOHEAD_HEAD_Pos) /**< \brief (LCDC_HEOHEAD) DMA Head Pointer */
#define LCDC_HEOHEAD_HEAD(value) ((LCDC_HEOHEAD_HEAD_Msk & ((value) << LCDC_HEOHEAD_HEAD_Pos)))
/* -------- LCDC_HEOADDR : (LCDC Offset: 0x00000360) High End Overlay DMA Address Register -------- */
#define LCDC_HEOADDR_ADDR_Pos 0
#define LCDC_HEOADDR_ADDR_Msk (0xffffffffu << LCDC_HEOADDR_ADDR_Pos) /**< \brief (LCDC_HEOADDR) DMA Transfer start Address */
#define LCDC_HEOADDR_ADDR(value) ((LCDC_HEOADDR_ADDR_Msk & ((value) << LCDC_HEOADDR_ADDR_Pos)))
/* -------- LCDC_HEOCTRL : (LCDC Offset: 0x00000364) High End Overlay DMA Control Register -------- */
#define LCDC_HEOCTRL_DFETCH (0x1u << 0) /**< \brief (LCDC_HEOCTRL) Transfer Descriptor Fetch Enable */
#define LCDC_HEOCTRL_LFETCH (0x1u << 1) /**< \brief (LCDC_HEOCTRL) Lookup Table Fetch Enable */
#define LCDC_HEOCTRL_DMAIEN (0x1u << 2) /**< \brief (LCDC_HEOCTRL) End of DMA Transfer Interrupt Enable */
#define LCDC_HEOCTRL_DSCRIEN (0x1u << 3) /**< \brief (LCDC_HEOCTRL) Descriptor Loaded Interrupt Enable */
#define LCDC_HEOCTRL_ADDIEN (0x1u << 4) /**< \brief (LCDC_HEOCTRL) Add Head Descriptor to Queue Interrupt Enable */
#define LCDC_HEOCTRL_DONEIEN (0x1u << 5) /**< \brief (LCDC_HEOCTRL) End of List Interrupt Enable */
/* -------- LCDC_HEONEXT : (LCDC Offset: 0x00000368) High End Overlay DMA Next Register -------- */
#define LCDC_HEONEXT_NEXT_Pos 0
#define LCDC_HEONEXT_NEXT_Msk (0xffffffffu << LCDC_HEONEXT_NEXT_Pos) /**< \brief (LCDC_HEONEXT) DMA Descriptor Next Address */
#define LCDC_HEONEXT_NEXT(value) ((LCDC_HEONEXT_NEXT_Msk & ((value) << LCDC_HEONEXT_NEXT_Pos)))
/* -------- LCDC_HEOUHEAD : (LCDC Offset: 0x0000036C) High End Overlay U-UV DMA Head Register -------- */
#define LCDC_HEOUHEAD_UHEAD_Pos 0
#define LCDC_HEOUHEAD_UHEAD_Msk (0xffffffffu << LCDC_HEOUHEAD_UHEAD_Pos) /**< \brief (LCDC_HEOUHEAD) DMA Head Pointer */
#define LCDC_HEOUHEAD_UHEAD(value) ((LCDC_HEOUHEAD_UHEAD_Msk & ((value) << LCDC_HEOUHEAD_UHEAD_Pos)))
/* -------- LCDC_HEOUADDR : (LCDC Offset: 0x00000370) High End Overlay U-UV DMA Address Register -------- */
#define LCDC_HEOUADDR_UADDR_Pos 0
#define LCDC_HEOUADDR_UADDR_Msk (0xffffffffu << LCDC_HEOUADDR_UADDR_Pos) /**< \brief (LCDC_HEOUADDR) DMA Transfer Start Address for U or UV Chrominance */
#define LCDC_HEOUADDR_UADDR(value) ((LCDC_HEOUADDR_UADDR_Msk & ((value) << LCDC_HEOUADDR_UADDR_Pos)))
/* -------- LCDC_HEOUCTRL : (LCDC Offset: 0x00000374) High End Overlay U-UV DMA Control Register -------- */
#define LCDC_HEOUCTRL_UDFETCH (0x1u << 0) /**< \brief (LCDC_HEOUCTRL) Transfer Descriptor Fetch Enable */
#define LCDC_HEOUCTRL_UDMAIEN (0x1u << 2) /**< \brief (LCDC_HEOUCTRL) End of DMA Transfer Interrupt Enable */
#define LCDC_HEOUCTRL_UDSCRIEN (0x1u << 3) /**< \brief (LCDC_HEOUCTRL) Descriptor Loaded Interrupt Enable */
#define LCDC_HEOUCTRL_UADDIEN (0x1u << 4) /**< \brief (LCDC_HEOUCTRL) Add Head Descriptor to Queue Interrupt Enable */
#define LCDC_HEOUCTRL_UDONEIEN (0x1u << 5) /**< \brief (LCDC_HEOUCTRL) End of List Interrupt Enable */
/* -------- LCDC_HEOUNEXT : (LCDC Offset: 0x00000378) High End Overlay U-UV DMA Next Register -------- */
#define LCDC_HEOUNEXT_UNEXT_Pos 0
#define LCDC_HEOUNEXT_UNEXT_Msk (0xffffffffu << LCDC_HEOUNEXT_UNEXT_Pos) /**< \brief (LCDC_HEOUNEXT) DMA Descriptor Next Address */
#define LCDC_HEOUNEXT_UNEXT(value) ((LCDC_HEOUNEXT_UNEXT_Msk & ((value) << LCDC_HEOUNEXT_UNEXT_Pos)))
/* -------- LCDC_HEOVHEAD : (LCDC Offset: 0x0000037C) High End Overlay V DMA Head Register -------- */
#define LCDC_HEOVHEAD_VHEAD_Pos 0
#define LCDC_HEOVHEAD_VHEAD_Msk (0xffffffffu << LCDC_HEOVHEAD_VHEAD_Pos) /**< \brief (LCDC_HEOVHEAD) DMA Head Pointer */
#define LCDC_HEOVHEAD_VHEAD(value) ((LCDC_HEOVHEAD_VHEAD_Msk & ((value) << LCDC_HEOVHEAD_VHEAD_Pos)))
/* -------- LCDC_HEOVADDR : (LCDC Offset: 0x00000380) High End Overlay V DMA Address Register -------- */
#define LCDC_HEOVADDR_VADDR_Pos 0
#define LCDC_HEOVADDR_VADDR_Msk (0xffffffffu << LCDC_HEOVADDR_VADDR_Pos) /**< \brief (LCDC_HEOVADDR) DMA Transfer Start Address for V Chrominance */
#define LCDC_HEOVADDR_VADDR(value) ((LCDC_HEOVADDR_VADDR_Msk & ((value) << LCDC_HEOVADDR_VADDR_Pos)))
/* -------- LCDC_HEOVCTRL : (LCDC Offset: 0x00000384) High End Overlay V DMA Control Register -------- */
#define LCDC_HEOVCTRL_VDFETCH (0x1u << 0) /**< \brief (LCDC_HEOVCTRL) Transfer Descriptor Fetch Enable */
#define LCDC_HEOVCTRL_VDMAIEN (0x1u << 2) /**< \brief (LCDC_HEOVCTRL) End of DMA Transfer Interrupt Enable */
#define LCDC_HEOVCTRL_VDSCRIEN (0x1u << 3) /**< \brief (LCDC_HEOVCTRL) Descriptor Loaded Interrupt Enable */
#define LCDC_HEOVCTRL_VADDIEN (0x1u << 4) /**< \brief (LCDC_HEOVCTRL) Add Head Descriptor to Queue Interrupt Enable */
#define LCDC_HEOVCTRL_VDONEIEN (0x1u << 5) /**< \brief (LCDC_HEOVCTRL) End of List Interrupt Enable */
/* -------- LCDC_HEOVNEXT : (LCDC Offset: 0x00000388) High End Overlay V DMA Next Register -------- */
#define LCDC_HEOVNEXT_VNEXT_Pos 0
#define LCDC_HEOVNEXT_VNEXT_Msk (0xffffffffu << LCDC_HEOVNEXT_VNEXT_Pos) /**< \brief (LCDC_HEOVNEXT) DMA Descriptor Next Address */
#define LCDC_HEOVNEXT_VNEXT(value) ((LCDC_HEOVNEXT_VNEXT_Msk & ((value) << LCDC_HEOVNEXT_VNEXT_Pos)))
/* -------- LCDC_HEOCFG0 : (LCDC Offset: 0x0000038C) High End Overlay Configuration Register 0 -------- */
#define LCDC_HEOCFG0_SIF (0x1u << 0) /**< \brief (LCDC_HEOCFG0) Source Interface */
#define LCDC_HEOCFG0_BLEN_Pos 4
#define LCDC_HEOCFG0_BLEN_Msk (0x3u << LCDC_HEOCFG0_BLEN_Pos) /**< \brief (LCDC_HEOCFG0) AHB Burst Length */
#define   LCDC_HEOCFG0_BLEN_AHB_BLEN_SINGLE (0x0u << 4) /**< \brief (LCDC_HEOCFG0) AHB Access is started as soon as there is enough space in the FIFO to store one data. SINGLE, INCR, INCR4, INCR8 and INCR16 bursts are used. INCR is used for a burst of 2 and 3 beats. */
#define   LCDC_HEOCFG0_BLEN_AHB_BLEN_INCR4 (0x1u << 4) /**< \brief (LCDC_HEOCFG0) AHB Access is started as soon as there is enough space in the FIFO to store a total amount of 4 data. An AHB INCR4 Burst is used. SINGLE, INCR and INCR4 bursts are used. INCR is used for a burst of 2 and 3 beats. */
#define   LCDC_HEOCFG0_BLEN_AHB_BLEN_INCR8 (0x2u << 4) /**< \brief (LCDC_HEOCFG0) AHB Access is started as soon as there is enough space in the FIFO to store a total amount of 8 data. An AHB INCR8 Burst is used. SINGLE, INCR, INCR4 and INCR8 bursts are used. INCR is used for a burst of 2 and 3 beats. */
#define   LCDC_HEOCFG0_BLEN_AHB_BLEN_INCR16 (0x3u << 4) /**< \brief (LCDC_HEOCFG0) AHB Access is started as soon as there is enough space in the FIFO to store a total amount of 16 data. An AHB INCR16 Burst is used. SINGLE, INCR, INCR4, INCR8 and INCR16 bursts are used. INCR is used for a burst of 2 and 3 beats. */
#define LCDC_HEOCFG0_BLENUV_Pos 6
#define LCDC_HEOCFG0_BLENUV_Msk (0x3u << LCDC_HEOCFG0_BLENUV_Pos) /**< \brief (LCDC_HEOCFG0) AHB Burst Length for U-V channel */
#define   LCDC_HEOCFG0_BLENUV_AHB_SINGLE (0x0u << 6) /**< \brief (LCDC_HEOCFG0) AHB Access is started as soon as there is enough space in the FIFO to store one data. SINGLE, INCR, INCR4, INCR8 and INCR16 bursts are used. INCR is used for a burst of 2 and 3 beats. */
#define   LCDC_HEOCFG0_BLENUV_AHB_INCR4 (0x1u << 6) /**< \brief (LCDC_HEOCFG0) AHB Access is started as soon as there is enough space in the FIFO to store a total amount of 4 data. An AHB INCR4 Burst is used. SINGLE, INCR and INCR4 bursts are used. INCR is used for a burst of 2 and 3 beats. */
#define   LCDC_HEOCFG0_BLENUV_AHB_INCR8 (0x2u << 6) /**< \brief (LCDC_HEOCFG0) AHB Access is started as soon as there is enough space in the FIFO to store a total amount of 8 data. An AHB INCR8 Burst is used. SINGLE, INCR, INCR4 and INCR8 bursts are used. INCR is used for a burst of 2 and 3 beats. */
#define   LCDC_HEOCFG0_BLENUV_AHB_INCR16 (0x3u << 6) /**< \brief (LCDC_HEOCFG0) AHB Access is started as soon as there is enough space in the FIFO to store a total amount of 16 data. An AHB INCR16 Burst is used. SINGLE, INCR, INCR4, INCR8 and INCR16 bursts are used. INCR is used for a burst of 2 and 3 beats. */
#define LCDC_HEOCFG0_DLBO (0x1u << 8) /**< \brief (LCDC_HEOCFG0) Defined Length Burst Only For Channel Bus Transaction. */
#define LCDC_HEOCFG0_ROTDIS (0x1u << 12) /**< \brief (LCDC_HEOCFG0) Hardware Rotation Optimization Disable */
#define LCDC_HEOCFG0_LOCKDIS (0x1u << 13) /**< \brief (LCDC_HEOCFG0) Hardware Rotation Lock Disable */
/* -------- LCDC_HEOCFG1 : (LCDC Offset: 0x00000390) High End Overlay Configuration Register 1 -------- */
#define LCDC_HEOCFG1_CLUTEN (0x1u << 0) /**< \brief (LCDC_HEOCFG1) Color Lookup Table Mode Enable */
#define LCDC_HEOCFG1_YUVEN (0x1u << 1) /**< \brief (LCDC_HEOCFG1) YUV Color Space Enable */
#define LCDC_HEOCFG1_RGBMODE_Pos 4
#define LCDC_HEOCFG1_RGBMODE_Msk (0xfu << LCDC_HEOCFG1_RGBMODE_Pos) /**< \brief (LCDC_HEOCFG1) RGB Mode Input selection */
#define   LCDC_HEOCFG1_RGBMODE_12BPP_RGB_444 (0x0u << 4) /**< \brief (LCDC_HEOCFG1) 12 bpp RGB 444 */
#define   LCDC_HEOCFG1_RGBMODE_16BPP_ARGB_4444 (0x1u << 4) /**< \brief (LCDC_HEOCFG1) 16 bpp ARGB 4444 */
#define   LCDC_HEOCFG1_RGBMODE_16BPP_RGBA_4444 (0x2u << 4) /**< \brief (LCDC_HEOCFG1) 16 bpp RGBA 4444 */
#define   LCDC_HEOCFG1_RGBMODE_16BPP_RGB_565 (0x3u << 4) /**< \brief (LCDC_HEOCFG1) 16 bpp RGB 565 */
#define   LCDC_HEOCFG1_RGBMODE_16BPP_TRGB_1555 (0x4u << 4) /**< \brief (LCDC_HEOCFG1) 16 bpp TRGB 1555 */
#define   LCDC_HEOCFG1_RGBMODE_18BPP_RGB_666 (0x5u << 4) /**< \brief (LCDC_HEOCFG1) 18 bpp RGB 666 */
#define   LCDC_HEOCFG1_RGBMODE_18BPP_RGB_666PACKED (0x6u << 4) /**< \brief (LCDC_HEOCFG1) 18 bpp RGB 666 PACKED */
#define   LCDC_HEOCFG1_RGBMODE_19BPP_TRGB_1666 (0x7u << 4) /**< \brief (LCDC_HEOCFG1) 19 bpp TRGB 1666 */
#define   LCDC_HEOCFG1_RGBMODE_19BPP_TRGB_PACKED (0x8u << 4) /**< \brief (LCDC_HEOCFG1) 19 bpp TRGB 1666 PACKED */
#define   LCDC_HEOCFG1_RGBMODE_24BPP_RGB_888 (0x9u << 4) /**< \brief (LCDC_HEOCFG1) 24 bpp RGB 888 */
#define   LCDC_HEOCFG1_RGBMODE_24BPP_RGB_888_PACKED (0xAu << 4) /**< \brief (LCDC_HEOCFG1) 24 bpp RGB 888 PACKED */
#define   LCDC_HEOCFG1_RGBMODE_25BPP_TRGB_1888 (0xBu << 4) /**< \brief (LCDC_HEOCFG1) 25 bpp TRGB 1888 */
#define   LCDC_HEOCFG1_RGBMODE_32BPP_ARGB_8888 (0xCu << 4) /**< \brief (LCDC_HEOCFG1) 32 bpp ARGB 8888 */
#define   LCDC_HEOCFG1_RGBMODE_32BPP_RGBA_8888 (0xDu << 4) /**< \brief (LCDC_HEOCFG1) 32 bpp RGBA 8888 */
#define LCDC_HEOCFG1_CLUTMODE_Pos 8
#define LCDC_HEOCFG1_CLUTMODE_Msk (0x3u << LCDC_HEOCFG1_CLUTMODE_Pos) /**< \brief (LCDC_HEOCFG1) Color Lookup Table Mode Input Selection */
#define   LCDC_HEOCFG1_CLUTMODE_CLUT_1BPP (0x0u << 8) /**< \brief (LCDC_HEOCFG1) Color lookup table mode set to 1 bit per pixel */
#define   LCDC_HEOCFG1_CLUTMODE_CLUT_2BPP (0x1u << 8) /**< \brief (LCDC_HEOCFG1) Color lookup table mode set to 2 bits per pixel */
#define   LCDC_HEOCFG1_CLUTMODE_CLUT_4BPP (0x2u << 8) /**< \brief (LCDC_HEOCFG1) Color lookup table mode set to 4 bits per pixel */
#define   LCDC_HEOCFG1_CLUTMODE_CLUT_8BPP (0x3u << 8) /**< \brief (LCDC_HEOCFG1) Color lookup table mode set to 8 bits per pixel */
#define LCDC_HEOCFG1_YUVMODE_Pos 12
#define LCDC_HEOCFG1_YUVMODE_Msk (0xfu << LCDC_HEOCFG1_YUVMODE_Pos) /**< \brief (LCDC_HEOCFG1) YUV Mode Input Selection */
#define   LCDC_HEOCFG1_YUVMODE_32BPP_AYCBCR (0x0u << 12) /**< \brief (LCDC_HEOCFG1) 32 bpp AYCbCr 444 */
#define   LCDC_HEOCFG1_YUVMODE_16BPP_YCBCR_MODE0 (0x1u << 12) /**< \brief (LCDC_HEOCFG1) 16 bpp Cr(n)Y(n+1)Cb(n)Y(n) 422 */
#define   LCDC_HEOCFG1_YUVMODE_16BPP_YCBCR_MODE1 (0x2u << 12) /**< \brief (LCDC_HEOCFG1) 16 bpp Y(n+1)Cr(n)Y(n)Cb(n) 422 */
#define   LCDC_HEOCFG1_YUVMODE_16BPP_YCBCR_MODE2 (0x3u << 12) /**< \brief (LCDC_HEOCFG1) 16 bpp Cb(n)Y(+1)Cr(n)Y(n) 422 */
#define   LCDC_HEOCFG1_YUVMODE_16BPP_YCBCR_MODE3 (0x4u << 12) /**< \brief (LCDC_HEOCFG1) 16 bpp Y(n+1)Cb(n)Y(n)Cr(n) 422 */
#define   LCDC_HEOCFG1_YUVMODE_16BPP_YCBCR_SEMIPLANAR (0x5u << 12) /**< \brief (LCDC_HEOCFG1) 16 bpp Semiplanar 422 YCbCr */
#define   LCDC_HEOCFG1_YUVMODE_16BPP_YCBCR_PLANAR (0x6u << 12) /**< \brief (LCDC_HEOCFG1) 16 bpp Planar 422 YCbCr */
#define   LCDC_HEOCFG1_YUVMODE_12BPP_YCBCR_SEMIPLANAR (0x7u << 12) /**< \brief (LCDC_HEOCFG1) 12 bpp Semiplanar 420 YCbCr */
#define   LCDC_HEOCFG1_YUVMODE_12BPP_YCBCR_PLANAR (0x8u << 12) /**< \brief (LCDC_HEOCFG1) 12 bpp Planar 420 YCbCr */
#define LCDC_HEOCFG1_YUV422ROT (0x1u << 16) /**< \brief (LCDC_HEOCFG1) YUV 4:2:2 Rotation */
#define LCDC_HEOCFG1_YUV422SWP (0x1u << 17) /**< \brief (LCDC_HEOCFG1) YUV 4:2:2 Swap */
#define LCDC_HEOCFG1_DSCALEOPT (0x1u << 20) /**< \brief (LCDC_HEOCFG1) Down Scaling Bandwidth Optimization */
/* -------- LCDC_HEOCFG2 : (LCDC Offset: 0x00000394) High End Overlay Configuration Register 2 -------- */
#define LCDC_HEOCFG2_XPOS_Pos 0
#define LCDC_HEOCFG2_XPOS_Msk (0x7ffu << LCDC_HEOCFG2_XPOS_Pos) /**< \brief (LCDC_HEOCFG2) Horizontal Window Position */
#define LCDC_HEOCFG2_XPOS(value) ((LCDC_HEOCFG2_XPOS_Msk & ((value) << LCDC_HEOCFG2_XPOS_Pos)))
#define LCDC_HEOCFG2_YPOS_Pos 16
#define LCDC_HEOCFG2_YPOS_Msk (0x7ffu << LCDC_HEOCFG2_YPOS_Pos) /**< \brief (LCDC_HEOCFG2) Vertical Window Position */
#define LCDC_HEOCFG2_YPOS(value) ((LCDC_HEOCFG2_YPOS_Msk & ((value) << LCDC_HEOCFG2_YPOS_Pos)))
/* -------- LCDC_HEOCFG3 : (LCDC Offset: 0x00000398) High End Overlay Configuration Register 3 -------- */
#define LCDC_HEOCFG3_XSIZE_Pos 0
#define LCDC_HEOCFG3_XSIZE_Msk (0x7ffu << LCDC_HEOCFG3_XSIZE_Pos) /**< \brief (LCDC_HEOCFG3) Horizontal Window Size */
#define LCDC_HEOCFG3_XSIZE(value) ((LCDC_HEOCFG3_XSIZE_Msk & ((value) << LCDC_HEOCFG3_XSIZE_Pos)))
#define LCDC_HEOCFG3_YSIZE_Pos 16
#define LCDC_HEOCFG3_YSIZE_Msk (0x7ffu << LCDC_HEOCFG3_YSIZE_Pos) /**< \brief (LCDC_HEOCFG3) Vertical Window Size */
#define LCDC_HEOCFG3_YSIZE(value) ((LCDC_HEOCFG3_YSIZE_Msk & ((value) << LCDC_HEOCFG3_YSIZE_Pos)))
/* -------- LCDC_HEOCFG4 : (LCDC Offset: 0x0000039C) High End Overlay Configuration Register 4 -------- */
#define LCDC_HEOCFG4_XMEMSIZE_Pos 0
#define LCDC_HEOCFG4_XMEMSIZE_Msk (0x7ffu << LCDC_HEOCFG4_XMEMSIZE_Pos) /**< \brief (LCDC_HEOCFG4) Horizontal image Size in Memory */
#define LCDC_HEOCFG4_XMEMSIZE(value) ((LCDC_HEOCFG4_XMEMSIZE_Msk & ((value) << LCDC_HEOCFG4_XMEMSIZE_Pos)))
#define LCDC_HEOCFG4_YMEMSIZE_Pos 16
#define LCDC_HEOCFG4_YMEMSIZE_Msk (0x7ffu << LCDC_HEOCFG4_YMEMSIZE_Pos) /**< \brief (LCDC_HEOCFG4) Vertical image Size in Memory */
#define LCDC_HEOCFG4_YMEMSIZE(value) ((LCDC_HEOCFG4_YMEMSIZE_Msk & ((value) << LCDC_HEOCFG4_YMEMSIZE_Pos)))
/* -------- LCDC_HEOCFG5 : (LCDC Offset: 0x000003A0) High End Overlay Configuration Register 5 -------- */
#define LCDC_HEOCFG5_XSTRIDE_Pos 0
#define LCDC_HEOCFG5_XSTRIDE_Msk (0xffffffffu << LCDC_HEOCFG5_XSTRIDE_Pos) /**< \brief (LCDC_HEOCFG5) Horizontal Stride */
#define LCDC_HEOCFG5_XSTRIDE(value) ((LCDC_HEOCFG5_XSTRIDE_Msk & ((value) << LCDC_HEOCFG5_XSTRIDE_Pos)))
/* -------- LCDC_HEOCFG6 : (LCDC Offset: 0x000003A4) High End Overlay Configuration Register 6 -------- */
#define LCDC_HEOCFG6_PSTRIDE_Pos 0
#define LCDC_HEOCFG6_PSTRIDE_Msk (0xffffffffu << LCDC_HEOCFG6_PSTRIDE_Pos) /**< \brief (LCDC_HEOCFG6) Pixel Stride */
#define LCDC_HEOCFG6_PSTRIDE(value) ((LCDC_HEOCFG6_PSTRIDE_Msk & ((value) << LCDC_HEOCFG6_PSTRIDE_Pos)))
/* -------- LCDC_HEOCFG7 : (LCDC Offset: 0x000003A8) High End Overlay Configuration Register 7 -------- */
#define LCDC_HEOCFG7_UVXSTRIDE_Pos 0
#define LCDC_HEOCFG7_UVXSTRIDE_Msk (0xffffffffu << LCDC_HEOCFG7_UVXSTRIDE_Pos) /**< \brief (LCDC_HEOCFG7) UV Horizontal Stride */
#define LCDC_HEOCFG7_UVXSTRIDE(value) ((LCDC_HEOCFG7_UVXSTRIDE_Msk & ((value) << LCDC_HEOCFG7_UVXSTRIDE_Pos)))
/* -------- LCDC_HEOCFG8 : (LCDC Offset: 0x000003AC) High End Overlay Configuration Register 8 -------- */
#define LCDC_HEOCFG8_UVPSTRIDE_Pos 0
#define LCDC_HEOCFG8_UVPSTRIDE_Msk (0xffffffffu << LCDC_HEOCFG8_UVPSTRIDE_Pos) /**< \brief (LCDC_HEOCFG8) UV Pixel Stride */
#define LCDC_HEOCFG8_UVPSTRIDE(value) ((LCDC_HEOCFG8_UVPSTRIDE_Msk & ((value) << LCDC_HEOCFG8_UVPSTRIDE_Pos)))
/* -------- LCDC_HEOCFG9 : (LCDC Offset: 0x000003B0) High End Overlay Configuration Register 9 -------- */
#define LCDC_HEOCFG9_BDEF_Pos 0
#define LCDC_HEOCFG9_BDEF_Msk (0xffu << LCDC_HEOCFG9_BDEF_Pos) /**< \brief (LCDC_HEOCFG9) Blue Default */
#define LCDC_HEOCFG9_BDEF(value) ((LCDC_HEOCFG9_BDEF_Msk & ((value) << LCDC_HEOCFG9_BDEF_Pos)))
#define LCDC_HEOCFG9_GDEF_Pos 8
#define LCDC_HEOCFG9_GDEF_Msk (0xffu << LCDC_HEOCFG9_GDEF_Pos) /**< \brief (LCDC_HEOCFG9) Green Default */
#define LCDC_HEOCFG9_GDEF(value) ((LCDC_HEOCFG9_GDEF_Msk & ((value) << LCDC_HEOCFG9_GDEF_Pos)))
#define LCDC_HEOCFG9_RDEF_Pos 16
#define LCDC_HEOCFG9_RDEF_Msk (0xffu << LCDC_HEOCFG9_RDEF_Pos) /**< \brief (LCDC_HEOCFG9) Red Default */
#define LCDC_HEOCFG9_RDEF(value) ((LCDC_HEOCFG9_RDEF_Msk & ((value) << LCDC_HEOCFG9_RDEF_Pos)))
/* -------- LCDC_HEOCFG10 : (LCDC Offset: 0x000003B4) High End Overlay Configuration Register 10 -------- */
#define LCDC_HEOCFG10_BKEY_Pos 0
#define LCDC_HEOCFG10_BKEY_Msk (0xffu << LCDC_HEOCFG10_BKEY_Pos) /**< \brief (LCDC_HEOCFG10) Blue Color Component Chroma Key */
#define LCDC_HEOCFG10_BKEY(value) ((LCDC_HEOCFG10_BKEY_Msk & ((value) << LCDC_HEOCFG10_BKEY_Pos)))
#define LCDC_HEOCFG10_GKEY_Pos 8
#define LCDC_HEOCFG10_GKEY_Msk (0xffu << LCDC_HEOCFG10_GKEY_Pos) /**< \brief (LCDC_HEOCFG10) Green Color Component Chroma Key */
#define LCDC_HEOCFG10_GKEY(value) ((LCDC_HEOCFG10_GKEY_Msk & ((value) << LCDC_HEOCFG10_GKEY_Pos)))
#define LCDC_HEOCFG10_RKEY_Pos 16
#define LCDC_HEOCFG10_RKEY_Msk (0xffu << LCDC_HEOCFG10_RKEY_Pos) /**< \brief (LCDC_HEOCFG10) Red Color Component Chroma Key */
#define LCDC_HEOCFG10_RKEY(value) ((LCDC_HEOCFG10_RKEY_Msk & ((value) << LCDC_HEOCFG10_RKEY_Pos)))
/* -------- LCDC_HEOCFG11 : (LCDC Offset: 0x000003B8) High End Overlay Configuration Register 11 -------- */
#define LCDC_HEOCFG11_BMASK_Pos 0
#define LCDC_HEOCFG11_BMASK_Msk (0xffu << LCDC_HEOCFG11_BMASK_Pos) /**< \brief (LCDC_HEOCFG11) Blue Color Component Chroma Key Mask */
#define LCDC_HEOCFG11_BMASK(value) ((LCDC_HEOCFG11_BMASK_Msk & ((value) << LCDC_HEOCFG11_BMASK_Pos)))
#define LCDC_HEOCFG11_GMASK_Pos 8
#define LCDC_HEOCFG11_GMASK_Msk (0xffu << LCDC_HEOCFG11_GMASK_Pos) /**< \brief (LCDC_HEOCFG11) Green Color Component Chroma Key Mask */
#define LCDC_HEOCFG11_GMASK(value) ((LCDC_HEOCFG11_GMASK_Msk & ((value) << LCDC_HEOCFG11_GMASK_Pos)))
#define LCDC_HEOCFG11_RMASK_Pos 16
#define LCDC_HEOCFG11_RMASK_Msk (0xffu << LCDC_HEOCFG11_RMASK_Pos) /**< \brief (LCDC_HEOCFG11) Red Color Component Chroma Key Mask */
#define LCDC_HEOCFG11_RMASK(value) ((LCDC_HEOCFG11_RMASK_Msk & ((value) << LCDC_HEOCFG11_RMASK_Pos)))
/* -------- LCDC_HEOCFG12 : (LCDC Offset: 0x000003BC) High End Overlay Configuration Register 12 -------- */
#define LCDC_HEOCFG12_CRKEY (0x1u << 0) /**< \brief (LCDC_HEOCFG12) Blender Chroma Key Enable */
#define LCDC_HEOCFG12_INV (0x1u << 1) /**< \brief (LCDC_HEOCFG12) Blender Inverted Blender Output Enable */
#define LCDC_HEOCFG12_ITER2BL (0x1u << 2) /**< \brief (LCDC_HEOCFG12) Blender Iterated Color Enable */
#define LCDC_HEOCFG12_ITER (0x1u << 3) /**< \brief (LCDC_HEOCFG12) Blender Use Iterated Color */
#define LCDC_HEOCFG12_REVALPHA (0x1u << 4) /**< \brief (LCDC_HEOCFG12) Blender Reverse Alpha */
#define LCDC_HEOCFG12_GAEN (0x1u << 5) /**< \brief (LCDC_HEOCFG12) Blender Global Alpha Enable */
#define LCDC_HEOCFG12_LAEN (0x1u << 6) /**< \brief (LCDC_HEOCFG12) Blender Local Alpha Enable */
#define LCDC_HEOCFG12_OVR (0x1u << 7) /**< \brief (LCDC_HEOCFG12) Blender Overlay Layer Enable */
#define LCDC_HEOCFG12_DMA (0x1u << 8) /**< \brief (LCDC_HEOCFG12) Blender DMA Layer Enable */
#define LCDC_HEOCFG12_REP (0x1u << 9) /**< \brief (LCDC_HEOCFG12) Use Replication logic to expand RGB color to 24 bits */
#define LCDC_HEOCFG12_DSTKEY (0x1u << 10) /**< \brief (LCDC_HEOCFG12) Destination Chroma Keying */
#define LCDC_HEOCFG12_VIDPRI (0x1u << 12) /**< \brief (LCDC_HEOCFG12) Video Priority */
#define LCDC_HEOCFG12_GA_Pos 16
#define LCDC_HEOCFG12_GA_Msk (0xffu << LCDC_HEOCFG12_GA_Pos) /**< \brief (LCDC_HEOCFG12) Blender Global Alpha */
#define LCDC_HEOCFG12_GA(value) ((LCDC_HEOCFG12_GA_Msk & ((value) << LCDC_HEOCFG12_GA_Pos)))
/* -------- LCDC_HEOCFG13 : (LCDC Offset: 0x000003C0) High End Overlay Configuration Register 13 -------- */
#define LCDC_HEOCFG13_XFACTOR_Pos 0
#define LCDC_HEOCFG13_XFACTOR_Msk (0x3fffu << LCDC_HEOCFG13_XFACTOR_Pos) /**< \brief (LCDC_HEOCFG13) Horizontal Scaling Factor */
#define LCDC_HEOCFG13_XFACTOR(value) ((LCDC_HEOCFG13_XFACTOR_Msk & ((value) << LCDC_HEOCFG13_XFACTOR_Pos)))
#define LCDC_HEOCFG13_YFACTOR_Pos 16
#define LCDC_HEOCFG13_YFACTOR_Msk (0x3fffu << LCDC_HEOCFG13_YFACTOR_Pos) /**< \brief (LCDC_HEOCFG13) Vertical Scaling Factor */
#define LCDC_HEOCFG13_YFACTOR(value) ((LCDC_HEOCFG13_YFACTOR_Msk & ((value) << LCDC_HEOCFG13_YFACTOR_Pos)))
#define LCDC_HEOCFG13_SCALEN (0x1u << 31) /**< \brief (LCDC_HEOCFG13) Hardware Scaler Enable */
/* -------- LCDC_HEOCFG14 : (LCDC Offset: 0x000003C4) High End Overlay Configuration Register 14 -------- */
#define LCDC_HEOCFG14_CSCRY_Pos 0
#define LCDC_HEOCFG14_CSCRY_Msk (0x3ffu << LCDC_HEOCFG14_CSCRY_Pos) /**< \brief (LCDC_HEOCFG14) Color Space Conversion Y coefficient for Red Component 1:2:7 format */
#define LCDC_HEOCFG14_CSCRY(value) ((LCDC_HEOCFG14_CSCRY_Msk & ((value) << LCDC_HEOCFG14_CSCRY_Pos)))
#define LCDC_HEOCFG14_CSCRU_Pos 10
#define LCDC_HEOCFG14_CSCRU_Msk (0x3ffu << LCDC_HEOCFG14_CSCRU_Pos) /**< \brief (LCDC_HEOCFG14) Color Space Conversion U coefficient for Red Component 1:2:7 format */
#define LCDC_HEOCFG14_CSCRU(value) ((LCDC_HEOCFG14_CSCRU_Msk & ((value) << LCDC_HEOCFG14_CSCRU_Pos)))
#define LCDC_HEOCFG14_CSCRV_Pos 20
#define LCDC_HEOCFG14_CSCRV_Msk (0x3ffu << LCDC_HEOCFG14_CSCRV_Pos) /**< \brief (LCDC_HEOCFG14) Color Space Conversion V coefficient for Red Component 1:2:7 format */
#define LCDC_HEOCFG14_CSCRV(value) ((LCDC_HEOCFG14_CSCRV_Msk & ((value) << LCDC_HEOCFG14_CSCRV_Pos)))
#define LCDC_HEOCFG14_CSCYOFF (0x1u << 30) /**< \brief (LCDC_HEOCFG14) Color Space Conversion Offset */
/* -------- LCDC_HEOCFG15 : (LCDC Offset: 0x000003C8) High End Overlay Configuration Register 15 -------- */
#define LCDC_HEOCFG15_CSCGY_Pos 0
#define LCDC_HEOCFG15_CSCGY_Msk (0x3ffu << LCDC_HEOCFG15_CSCGY_Pos) /**< \brief (LCDC_HEOCFG15) Color Space Conversion Y coefficient for Green Component 1:2:7 format */
#define LCDC_HEOCFG15_CSCGY(value) ((LCDC_HEOCFG15_CSCGY_Msk & ((value) << LCDC_HEOCFG15_CSCGY_Pos)))
#define LCDC_HEOCFG15_CSCGU_Pos 10
#define LCDC_HEOCFG15_CSCGU_Msk (0x3ffu << LCDC_HEOCFG15_CSCGU_Pos) /**< \brief (LCDC_HEOCFG15) Color Space Conversion U coefficient for Green Component 1:2:7 format */
#define LCDC_HEOCFG15_CSCGU(value) ((LCDC_HEOCFG15_CSCGU_Msk & ((value) << LCDC_HEOCFG15_CSCGU_Pos)))
#define LCDC_HEOCFG15_CSCGV_Pos 20
#define LCDC_HEOCFG15_CSCGV_Msk (0x3ffu << LCDC_HEOCFG15_CSCGV_Pos) /**< \brief (LCDC_HEOCFG15) Color Space Conversion V coefficient for Green Component 1:2:7 format */
#define LCDC_HEOCFG15_CSCGV(value) ((LCDC_HEOCFG15_CSCGV_Msk & ((value) << LCDC_HEOCFG15_CSCGV_Pos)))
#define LCDC_HEOCFG15_CSCUOFF (0x1u << 30) /**< \brief (LCDC_HEOCFG15) Color Space Conversion Offset */
/* -------- LCDC_HEOCFG16 : (LCDC Offset: 0x000003CC) High End Overlay Configuration Register 16 -------- */
#define LCDC_HEOCFG16_CSCBY_Pos 0
#define LCDC_HEOCFG16_CSCBY_Msk (0x3ffu << LCDC_HEOCFG16_CSCBY_Pos) /**< \brief (LCDC_HEOCFG16) Color Space Conversion Y coefficient for Blue Component 1:2:7 format */
#define LCDC_HEOCFG16_CSCBY(value) ((LCDC_HEOCFG16_CSCBY_Msk & ((value) << LCDC_HEOCFG16_CSCBY_Pos)))
#define LCDC_HEOCFG16_CSCBU_Pos 10
#define LCDC_HEOCFG16_CSCBU_Msk (0x3ffu << LCDC_HEOCFG16_CSCBU_Pos) /**< \brief (LCDC_HEOCFG16) Color Space Conversion U coefficient for Blue Component 1:2:7 format */
#define LCDC_HEOCFG16_CSCBU(value) ((LCDC_HEOCFG16_CSCBU_Msk & ((value) << LCDC_HEOCFG16_CSCBU_Pos)))
#define LCDC_HEOCFG16_CSCBV_Pos 20
#define LCDC_HEOCFG16_CSCBV_Msk (0x3ffu << LCDC_HEOCFG16_CSCBV_Pos) /**< \brief (LCDC_HEOCFG16) Color Space Conversion V coefficient for Blue Component 1:2:7 format */
#define LCDC_HEOCFG16_CSCBV(value) ((LCDC_HEOCFG16_CSCBV_Msk & ((value) << LCDC_HEOCFG16_CSCBV_Pos)))
#define LCDC_HEOCFG16_CSCVOFF (0x1u << 30) /**< \brief (LCDC_HEOCFG16) Color Space Conversion Offset */
/* -------- LCDC_HEOCFG17 : (LCDC Offset: 0x000003D0) High End Overlay Configuration Register 17 -------- */
#define LCDC_HEOCFG17_XPHI0COEFF0_Pos 0
#define LCDC_HEOCFG17_XPHI0COEFF0_Msk (0xffu << LCDC_HEOCFG17_XPHI0COEFF0_Pos) /**< \brief (LCDC_HEOCFG17) Horizontal Coefficient for phase 0 tap 0 */
#define LCDC_HEOCFG17_XPHI0COEFF0(value) ((LCDC_HEOCFG17_XPHI0COEFF0_Msk & ((value) << LCDC_HEOCFG17_XPHI0COEFF0_Pos)))
#define LCDC_HEOCFG17_XPHI0COEFF1_Pos 8
#define LCDC_HEOCFG17_XPHI0COEFF1_Msk (0xffu << LCDC_HEOCFG17_XPHI0COEFF1_Pos) /**< \brief (LCDC_HEOCFG17) Horizontal Coefficient for phase 0 tap 1 */
#define LCDC_HEOCFG17_XPHI0COEFF1(value) ((LCDC_HEOCFG17_XPHI0COEFF1_Msk & ((value) << LCDC_HEOCFG17_XPHI0COEFF1_Pos)))
#define LCDC_HEOCFG17_XPHI0COEFF2_Pos 16
#define LCDC_HEOCFG17_XPHI0COEFF2_Msk (0xffu << LCDC_HEOCFG17_XPHI0COEFF2_Pos) /**< \brief (LCDC_HEOCFG17) Horizontal Coefficient for phase 0 tap 2 */
#define LCDC_HEOCFG17_XPHI0COEFF2(value) ((LCDC_HEOCFG17_XPHI0COEFF2_Msk & ((value) << LCDC_HEOCFG17_XPHI0COEFF2_Pos)))
#define LCDC_HEOCFG17_XPHI0COEFF3_Pos 24
#define LCDC_HEOCFG17_XPHI0COEFF3_Msk (0xffu << LCDC_HEOCFG17_XPHI0COEFF3_Pos) /**< \brief (LCDC_HEOCFG17) Horizontal Coefficient for phase 0 tap 3 */
#define LCDC_HEOCFG17_XPHI0COEFF3(value) ((LCDC_HEOCFG17_XPHI0COEFF3_Msk & ((value) << LCDC_HEOCFG17_XPHI0COEFF3_Pos)))
/* -------- LCDC_HEOCFG18 : (LCDC Offset: 0x000003D4) High End Overlay Configuration Register 18 -------- */
#define LCDC_HEOCFG18_XPHI0COEFF4_Pos 0
#define LCDC_HEOCFG18_XPHI0COEFF4_Msk (0xffu << LCDC_HEOCFG18_XPHI0COEFF4_Pos) /**< \brief (LCDC_HEOCFG18) Horizontal Coefficient for phase 0 tap 4 */
#define LCDC_HEOCFG18_XPHI0COEFF4(value) ((LCDC_HEOCFG18_XPHI0COEFF4_Msk & ((value) << LCDC_HEOCFG18_XPHI0COEFF4_Pos)))
/* -------- LCDC_HEOCFG19 : (LCDC Offset: 0x000003D8) High End Overlay Configuration Register 19 -------- */
#define LCDC_HEOCFG19_XPHI1COEFF0_Pos 0
#define LCDC_HEOCFG19_XPHI1COEFF0_Msk (0xffu << LCDC_HEOCFG19_XPHI1COEFF0_Pos) /**< \brief (LCDC_HEOCFG19) Horizontal Coefficient for phase 1 tap 0 */
#define LCDC_HEOCFG19_XPHI1COEFF0(value) ((LCDC_HEOCFG19_XPHI1COEFF0_Msk & ((value) << LCDC_HEOCFG19_XPHI1COEFF0_Pos)))
#define LCDC_HEOCFG19_XPHI1COEFF1_Pos 8
#define LCDC_HEOCFG19_XPHI1COEFF1_Msk (0xffu << LCDC_HEOCFG19_XPHI1COEFF1_Pos) /**< \brief (LCDC_HEOCFG19) Horizontal Coefficient for phase 1 tap 1 */
#define LCDC_HEOCFG19_XPHI1COEFF1(value) ((LCDC_HEOCFG19_XPHI1COEFF1_Msk & ((value) << LCDC_HEOCFG19_XPHI1COEFF1_Pos)))
#define LCDC_HEOCFG19_XPHI1COEFF2_Pos 16
#define LCDC_HEOCFG19_XPHI1COEFF2_Msk (0xffu << LCDC_HEOCFG19_XPHI1COEFF2_Pos) /**< \brief (LCDC_HEOCFG19) Horizontal Coefficient for phase 1 tap 2 */
#define LCDC_HEOCFG19_XPHI1COEFF2(value) ((LCDC_HEOCFG19_XPHI1COEFF2_Msk & ((value) << LCDC_HEOCFG19_XPHI1COEFF2_Pos)))
#define LCDC_HEOCFG19_XPHI1COEFF3_Pos 24
#define LCDC_HEOCFG19_XPHI1COEFF3_Msk (0xffu << LCDC_HEOCFG19_XPHI1COEFF3_Pos) /**< \brief (LCDC_HEOCFG19) Horizontal Coefficient for phase 1 tap 3 */
#define LCDC_HEOCFG19_XPHI1COEFF3(value) ((LCDC_HEOCFG19_XPHI1COEFF3_Msk & ((value) << LCDC_HEOCFG19_XPHI1COEFF3_Pos)))
/* -------- LCDC_HEOCFG20 : (LCDC Offset: 0x000003DC) High End Overlay Configuration Register 20 -------- */
#define LCDC_HEOCFG20_XPHI1COEFF4_Pos 0
#define LCDC_HEOCFG20_XPHI1COEFF4_Msk (0xffu << LCDC_HEOCFG20_XPHI1COEFF4_Pos) /**< \brief (LCDC_HEOCFG20) Horizontal Coefficient for phase 1 tap 4 */
#define LCDC_HEOCFG20_XPHI1COEFF4(value) ((LCDC_HEOCFG20_XPHI1COEFF4_Msk & ((value) << LCDC_HEOCFG20_XPHI1COEFF4_Pos)))
/* -------- LCDC_HEOCFG21 : (LCDC Offset: 0x000003E0) High End Overlay Configuration Register 21 -------- */
#define LCDC_HEOCFG21_XPHI2COEFF0_Pos 0
#define LCDC_HEOCFG21_XPHI2COEFF0_Msk (0xffu << LCDC_HEOCFG21_XPHI2COEFF0_Pos) /**< \brief (LCDC_HEOCFG21) Horizontal Coefficient for phase 2 tap 0 */
#define LCDC_HEOCFG21_XPHI2COEFF0(value) ((LCDC_HEOCFG21_XPHI2COEFF0_Msk & ((value) << LCDC_HEOCFG21_XPHI2COEFF0_Pos)))
#define LCDC_HEOCFG21_XPHI2COEFF1_Pos 8
#define LCDC_HEOCFG21_XPHI2COEFF1_Msk (0xffu << LCDC_HEOCFG21_XPHI2COEFF1_Pos) /**< \brief (LCDC_HEOCFG21) Horizontal Coefficient for phase 2 tap 1 */
#define LCDC_HEOCFG21_XPHI2COEFF1(value) ((LCDC_HEOCFG21_XPHI2COEFF1_Msk & ((value) << LCDC_HEOCFG21_XPHI2COEFF1_Pos)))
#define LCDC_HEOCFG21_XPHI2COEFF2_Pos 16
#define LCDC_HEOCFG21_XPHI2COEFF2_Msk (0xffu << LCDC_HEOCFG21_XPHI2COEFF2_Pos) /**< \brief (LCDC_HEOCFG21) Horizontal Coefficient for phase 2 tap 2 */
#define LCDC_HEOCFG21_XPHI2COEFF2(value) ((LCDC_HEOCFG21_XPHI2COEFF2_Msk & ((value) << LCDC_HEOCFG21_XPHI2COEFF2_Pos)))
#define LCDC_HEOCFG21_XPHI2COEFF3_Pos 24
#define LCDC_HEOCFG21_XPHI2COEFF3_Msk (0xffu << LCDC_HEOCFG21_XPHI2COEFF3_Pos) /**< \brief (LCDC_HEOCFG21) Horizontal Coefficient for phase 2 tap 3 */
#define LCDC_HEOCFG21_XPHI2COEFF3(value) ((LCDC_HEOCFG21_XPHI2COEFF3_Msk & ((value) << LCDC_HEOCFG21_XPHI2COEFF3_Pos)))
/* -------- LCDC_HEOCFG22 : (LCDC Offset: 0x000003E4) High End Overlay Configuration Register 22 -------- */
#define LCDC_HEOCFG22_XPHI2COEFF4_Pos 0
#define LCDC_HEOCFG22_XPHI2COEFF4_Msk (0xffu << LCDC_HEOCFG22_XPHI2COEFF4_Pos) /**< \brief (LCDC_HEOCFG22) Horizontal Coefficient for phase 2 tap 4 */
#define LCDC_HEOCFG22_XPHI2COEFF4(value) ((LCDC_HEOCFG22_XPHI2COEFF4_Msk & ((value) << LCDC_HEOCFG22_XPHI2COEFF4_Pos)))
/* -------- LCDC_HEOCFG23 : (LCDC Offset: 0x000003E8) High End Overlay Configuration Register 23 -------- */
#define LCDC_HEOCFG23_XPHI3COEFF0_Pos 0
#define LCDC_HEOCFG23_XPHI3COEFF0_Msk (0xffu << LCDC_HEOCFG23_XPHI3COEFF0_Pos) /**< \brief (LCDC_HEOCFG23) Horizontal Coefficient for phase 3 tap 0 */
#define LCDC_HEOCFG23_XPHI3COEFF0(value) ((LCDC_HEOCFG23_XPHI3COEFF0_Msk & ((value) << LCDC_HEOCFG23_XPHI3COEFF0_Pos)))
#define LCDC_HEOCFG23_XPHI3COEFF1_Pos 8
#define LCDC_HEOCFG23_XPHI3COEFF1_Msk (0xffu << LCDC_HEOCFG23_XPHI3COEFF1_Pos) /**< \brief (LCDC_HEOCFG23) Horizontal Coefficient for phase 3 tap 1 */
#define LCDC_HEOCFG23_XPHI3COEFF1(value) ((LCDC_HEOCFG23_XPHI3COEFF1_Msk & ((value) << LCDC_HEOCFG23_XPHI3COEFF1_Pos)))
#define LCDC_HEOCFG23_XPHI3COEFF2_Pos 16
#define LCDC_HEOCFG23_XPHI3COEFF2_Msk (0xffu << LCDC_HEOCFG23_XPHI3COEFF2_Pos) /**< \brief (LCDC_HEOCFG23) Horizontal Coefficient for phase 3 tap 2 */
#define LCDC_HEOCFG23_XPHI3COEFF2(value) ((LCDC_HEOCFG23_XPHI3COEFF2_Msk & ((value) << LCDC_HEOCFG23_XPHI3COEFF2_Pos)))
#define LCDC_HEOCFG23_XPHI3COEFF3_Pos 24
#define LCDC_HEOCFG23_XPHI3COEFF3_Msk (0xffu << LCDC_HEOCFG23_XPHI3COEFF3_Pos) /**< \brief (LCDC_HEOCFG23) Horizontal Coefficient for phase 3 tap 3 */
#define LCDC_HEOCFG23_XPHI3COEFF3(value) ((LCDC_HEOCFG23_XPHI3COEFF3_Msk & ((value) << LCDC_HEOCFG23_XPHI3COEFF3_Pos)))
/* -------- LCDC_HEOCFG24 : (LCDC Offset: 0x000003EC) High End Overlay Configuration Register 24 -------- */
#define LCDC_HEOCFG24_XPHI3COEFF4_Pos 0
#define LCDC_HEOCFG24_XPHI3COEFF4_Msk (0xffu << LCDC_HEOCFG24_XPHI3COEFF4_Pos) /**< \brief (LCDC_HEOCFG24) Horizontal Coefficient for phase 3 tap 4 */
#define LCDC_HEOCFG24_XPHI3COEFF4(value) ((LCDC_HEOCFG24_XPHI3COEFF4_Msk & ((value) << LCDC_HEOCFG24_XPHI3COEFF4_Pos)))
/* -------- LCDC_HEOCFG25 : (LCDC Offset: 0x000003F0) High End Overlay Configuration Register 25 -------- */
#define LCDC_HEOCFG25_XPHI4COEFF0_Pos 0
#define LCDC_HEOCFG25_XPHI4COEFF0_Msk (0xffu << LCDC_HEOCFG25_XPHI4COEFF0_Pos) /**< \brief (LCDC_HEOCFG25) Horizontal Coefficient for phase 4 tap 0 */
#define LCDC_HEOCFG25_XPHI4COEFF0(value) ((LCDC_HEOCFG25_XPHI4COEFF0_Msk & ((value) << LCDC_HEOCFG25_XPHI4COEFF0_Pos)))
#define LCDC_HEOCFG25_XPHI4COEFF1_Pos 8
#define LCDC_HEOCFG25_XPHI4COEFF1_Msk (0xffu << LCDC_HEOCFG25_XPHI4COEFF1_Pos) /**< \brief (LCDC_HEOCFG25) Horizontal Coefficient for phase 4 tap 1 */
#define LCDC_HEOCFG25_XPHI4COEFF1(value) ((LCDC_HEOCFG25_XPHI4COEFF1_Msk & ((value) << LCDC_HEOCFG25_XPHI4COEFF1_Pos)))
#define LCDC_HEOCFG25_XPHI4COEFF2_Pos 16
#define LCDC_HEOCFG25_XPHI4COEFF2_Msk (0xffu << LCDC_HEOCFG25_XPHI4COEFF2_Pos) /**< \brief (LCDC_HEOCFG25) Horizontal Coefficient for phase 4 tap 2 */
#define LCDC_HEOCFG25_XPHI4COEFF2(value) ((LCDC_HEOCFG25_XPHI4COEFF2_Msk & ((value) << LCDC_HEOCFG25_XPHI4COEFF2_Pos)))
#define LCDC_HEOCFG25_XPHI4COEFF3_Pos 24
#define LCDC_HEOCFG25_XPHI4COEFF3_Msk (0xffu << LCDC_HEOCFG25_XPHI4COEFF3_Pos) /**< \brief (LCDC_HEOCFG25) Horizontal Coefficient for phase 4 tap 3 */
#define LCDC_HEOCFG25_XPHI4COEFF3(value) ((LCDC_HEOCFG25_XPHI4COEFF3_Msk & ((value) << LCDC_HEOCFG25_XPHI4COEFF3_Pos)))
/* -------- LCDC_HEOCFG26 : (LCDC Offset: 0x000003F4) High End Overlay Configuration Register 26 -------- */
#define LCDC_HEOCFG26_XPHI4COEFF4_Pos 0
#define LCDC_HEOCFG26_XPHI4COEFF4_Msk (0xffu << LCDC_HEOCFG26_XPHI4COEFF4_Pos) /**< \brief (LCDC_HEOCFG26) Horizontal Coefficient for phase 4 tap 4 */
#define LCDC_HEOCFG26_XPHI4COEFF4(value) ((LCDC_HEOCFG26_XPHI4COEFF4_Msk & ((value) << LCDC_HEOCFG26_XPHI4COEFF4_Pos)))
/* -------- LCDC_HEOCFG27 : (LCDC Offset: 0x000003F8) High End Overlay Configuration Register 27 -------- */
#define LCDC_HEOCFG27_XPHI5COEFF0_Pos 0
#define LCDC_HEOCFG27_XPHI5COEFF0_Msk (0xffu << LCDC_HEOCFG27_XPHI5COEFF0_Pos) /**< \brief (LCDC_HEOCFG27) Horizontal Coefficient for phase 5 tap 0 */
#define LCDC_HEOCFG27_XPHI5COEFF0(value) ((LCDC_HEOCFG27_XPHI5COEFF0_Msk & ((value) << LCDC_HEOCFG27_XPHI5COEFF0_Pos)))
#define LCDC_HEOCFG27_XPHI5COEFF1_Pos 8
#define LCDC_HEOCFG27_XPHI5COEFF1_Msk (0xffu << LCDC_HEOCFG27_XPHI5COEFF1_Pos) /**< \brief (LCDC_HEOCFG27) Horizontal Coefficient for phase 5 tap 1 */
#define LCDC_HEOCFG27_XPHI5COEFF1(value) ((LCDC_HEOCFG27_XPHI5COEFF1_Msk & ((value) << LCDC_HEOCFG27_XPHI5COEFF1_Pos)))
#define LCDC_HEOCFG27_XPHI5COEFF2_Pos 16
#define LCDC_HEOCFG27_XPHI5COEFF2_Msk (0xffu << LCDC_HEOCFG27_XPHI5COEFF2_Pos) /**< \brief (LCDC_HEOCFG27) Horizontal Coefficient for phase 5 tap 2 */
#define LCDC_HEOCFG27_XPHI5COEFF2(value) ((LCDC_HEOCFG27_XPHI5COEFF2_Msk & ((value) << LCDC_HEOCFG27_XPHI5COEFF2_Pos)))
#define LCDC_HEOCFG27_XPHI5COEFF3_Pos 24
#define LCDC_HEOCFG27_XPHI5COEFF3_Msk (0xffu << LCDC_HEOCFG27_XPHI5COEFF3_Pos) /**< \brief (LCDC_HEOCFG27) Horizontal Coefficient for phase 5 tap 3 */
#define LCDC_HEOCFG27_XPHI5COEFF3(value) ((LCDC_HEOCFG27_XPHI5COEFF3_Msk & ((value) << LCDC_HEOCFG27_XPHI5COEFF3_Pos)))
/* -------- LCDC_HEOCFG28 : (LCDC Offset: 0x000003FC) High End Overlay Configuration Register 28 -------- */
#define LCDC_HEOCFG28_XPHI5COEFF4_Pos 0
#define LCDC_HEOCFG28_XPHI5COEFF4_Msk (0xffu << LCDC_HEOCFG28_XPHI5COEFF4_Pos) /**< \brief (LCDC_HEOCFG28) Horizontal Coefficient for phase 5 tap 4 */
#define LCDC_HEOCFG28_XPHI5COEFF4(value) ((LCDC_HEOCFG28_XPHI5COEFF4_Msk & ((value) << LCDC_HEOCFG28_XPHI5COEFF4_Pos)))
/* -------- LCDC_HEOCFG29 : (LCDC Offset: 0x00000400) High End Overlay Configuration Register 29 -------- */
#define LCDC_HEOCFG29_XPHI6COEFF0_Pos 0
#define LCDC_HEOCFG29_XPHI6COEFF0_Msk (0xffu << LCDC_HEOCFG29_XPHI6COEFF0_Pos) /**< \brief (LCDC_HEOCFG29) Horizontal Coefficient for phase 6 tap 0 */
#define LCDC_HEOCFG29_XPHI6COEFF0(value) ((LCDC_HEOCFG29_XPHI6COEFF0_Msk & ((value) << LCDC_HEOCFG29_XPHI6COEFF0_Pos)))
#define LCDC_HEOCFG29_XPHI6COEFF1_Pos 8
#define LCDC_HEOCFG29_XPHI6COEFF1_Msk (0xffu << LCDC_HEOCFG29_XPHI6COEFF1_Pos) /**< \brief (LCDC_HEOCFG29) Horizontal Coefficient for phase 6 tap 1 */
#define LCDC_HEOCFG29_XPHI6COEFF1(value) ((LCDC_HEOCFG29_XPHI6COEFF1_Msk & ((value) << LCDC_HEOCFG29_XPHI6COEFF1_Pos)))
#define LCDC_HEOCFG29_XPHI6COEFF2_Pos 16
#define LCDC_HEOCFG29_XPHI6COEFF2_Msk (0xffu << LCDC_HEOCFG29_XPHI6COEFF2_Pos) /**< \brief (LCDC_HEOCFG29) Horizontal Coefficient for phase 6 tap 2 */
#define LCDC_HEOCFG29_XPHI6COEFF2(value) ((LCDC_HEOCFG29_XPHI6COEFF2_Msk & ((value) << LCDC_HEOCFG29_XPHI6COEFF2_Pos)))
#define LCDC_HEOCFG29_XPHI6COEFF3_Pos 24
#define LCDC_HEOCFG29_XPHI6COEFF3_Msk (0xffu << LCDC_HEOCFG29_XPHI6COEFF3_Pos) /**< \brief (LCDC_HEOCFG29) Horizontal Coefficient for phase 6 tap 3 */
#define LCDC_HEOCFG29_XPHI6COEFF3(value) ((LCDC_HEOCFG29_XPHI6COEFF3_Msk & ((value) << LCDC_HEOCFG29_XPHI6COEFF3_Pos)))
/* -------- LCDC_HEOCFG30 : (LCDC Offset: 0x00000404) High End Overlay Configuration Register 30 -------- */
#define LCDC_HEOCFG30_XPHI6COEFF4_Pos 0
#define LCDC_HEOCFG30_XPHI6COEFF4_Msk (0xffu << LCDC_HEOCFG30_XPHI6COEFF4_Pos) /**< \brief (LCDC_HEOCFG30) Horizontal Coefficient for phase 6 tap 4 */
#define LCDC_HEOCFG30_XPHI6COEFF4(value) ((LCDC_HEOCFG30_XPHI6COEFF4_Msk & ((value) << LCDC_HEOCFG30_XPHI6COEFF4_Pos)))
/* -------- LCDC_HEOCFG31 : (LCDC Offset: 0x00000408) High End Overlay Configuration Register 31 -------- */
#define LCDC_HEOCFG31_XPHI7COEFF0_Pos 0
#define LCDC_HEOCFG31_XPHI7COEFF0_Msk (0xffu << LCDC_HEOCFG31_XPHI7COEFF0_Pos) /**< \brief (LCDC_HEOCFG31) Horizontal Coefficient for phase 7 tap 0 */
#define LCDC_HEOCFG31_XPHI7COEFF0(value) ((LCDC_HEOCFG31_XPHI7COEFF0_Msk & ((value) << LCDC_HEOCFG31_XPHI7COEFF0_Pos)))
#define LCDC_HEOCFG31_XPHI7COEFF1_Pos 8
#define LCDC_HEOCFG31_XPHI7COEFF1_Msk (0xffu << LCDC_HEOCFG31_XPHI7COEFF1_Pos) /**< \brief (LCDC_HEOCFG31) Horizontal Coefficient for phase 7 tap 1 */
#define LCDC_HEOCFG31_XPHI7COEFF1(value) ((LCDC_HEOCFG31_XPHI7COEFF1_Msk & ((value) << LCDC_HEOCFG31_XPHI7COEFF1_Pos)))
#define LCDC_HEOCFG31_XPHI7COEFF2_Pos 16
#define LCDC_HEOCFG31_XPHI7COEFF2_Msk (0xffu << LCDC_HEOCFG31_XPHI7COEFF2_Pos) /**< \brief (LCDC_HEOCFG31) Horizontal Coefficient for phase 7 tap 2 */
#define LCDC_HEOCFG31_XPHI7COEFF2(value) ((LCDC_HEOCFG31_XPHI7COEFF2_Msk & ((value) << LCDC_HEOCFG31_XPHI7COEFF2_Pos)))
#define LCDC_HEOCFG31_XPHI7COEFF3_Pos 24
#define LCDC_HEOCFG31_XPHI7COEFF3_Msk (0xffu << LCDC_HEOCFG31_XPHI7COEFF3_Pos) /**< \brief (LCDC_HEOCFG31) Horizontal Coefficient for phase 7 tap 3 */
#define LCDC_HEOCFG31_XPHI7COEFF3(value) ((LCDC_HEOCFG31_XPHI7COEFF3_Msk & ((value) << LCDC_HEOCFG31_XPHI7COEFF3_Pos)))
/* -------- LCDC_HEOCFG32 : (LCDC Offset: 0x0000040C) High End Overlay Configuration Register 32 -------- */
#define LCDC_HEOCFG32_XPHI7COEFF4_Pos 0
#define LCDC_HEOCFG32_XPHI7COEFF4_Msk (0xffu << LCDC_HEOCFG32_XPHI7COEFF4_Pos) /**< \brief (LCDC_HEOCFG32) Horizontal Coefficient for phase 7 tap 4 */
#define LCDC_HEOCFG32_XPHI7COEFF4(value) ((LCDC_HEOCFG32_XPHI7COEFF4_Msk & ((value) << LCDC_HEOCFG32_XPHI7COEFF4_Pos)))
/* -------- LCDC_HEOCFG33 : (LCDC Offset: 0x00000410) High End Overlay Configuration Register 33 -------- */
#define LCDC_HEOCFG33_YPHI0COEFF0_Pos 0
#define LCDC_HEOCFG33_YPHI0COEFF0_Msk (0xffu << LCDC_HEOCFG33_YPHI0COEFF0_Pos) /**< \brief (LCDC_HEOCFG33) Vertical Coefficient for phase 0 tap 0 */
#define LCDC_HEOCFG33_YPHI0COEFF0(value) ((LCDC_HEOCFG33_YPHI0COEFF0_Msk & ((value) << LCDC_HEOCFG33_YPHI0COEFF0_Pos)))
#define LCDC_HEOCFG33_YPHI0COEFF1_Pos 8
#define LCDC_HEOCFG33_YPHI0COEFF1_Msk (0xffu << LCDC_HEOCFG33_YPHI0COEFF1_Pos) /**< \brief (LCDC_HEOCFG33) Vertical Coefficient for phase 0 tap 1 */
#define LCDC_HEOCFG33_YPHI0COEFF1(value) ((LCDC_HEOCFG33_YPHI0COEFF1_Msk & ((value) << LCDC_HEOCFG33_YPHI0COEFF1_Pos)))
#define LCDC_HEOCFG33_YPHI0COEFF2_Pos 16
#define LCDC_HEOCFG33_YPHI0COEFF2_Msk (0xffu << LCDC_HEOCFG33_YPHI0COEFF2_Pos) /**< \brief (LCDC_HEOCFG33) Vertical Coefficient for phase 0 tap 2 */
#define LCDC_HEOCFG33_YPHI0COEFF2(value) ((LCDC_HEOCFG33_YPHI0COEFF2_Msk & ((value) << LCDC_HEOCFG33_YPHI0COEFF2_Pos)))
/* -------- LCDC_HEOCFG34 : (LCDC Offset: 0x00000414) High End Overlay Configuration Register 34 -------- */
#define LCDC_HEOCFG34_YPHI1COEFF0_Pos 0
#define LCDC_HEOCFG34_YPHI1COEFF0_Msk (0xffu << LCDC_HEOCFG34_YPHI1COEFF0_Pos) /**< \brief (LCDC_HEOCFG34) Vertical Coefficient for phase 1 tap 0 */
#define LCDC_HEOCFG34_YPHI1COEFF0(value) ((LCDC_HEOCFG34_YPHI1COEFF0_Msk & ((value) << LCDC_HEOCFG34_YPHI1COEFF0_Pos)))
#define LCDC_HEOCFG34_YPHI1COEFF1_Pos 8
#define LCDC_HEOCFG34_YPHI1COEFF1_Msk (0xffu << LCDC_HEOCFG34_YPHI1COEFF1_Pos) /**< \brief (LCDC_HEOCFG34) Vertical Coefficient for phase 1 tap 1 */
#define LCDC_HEOCFG34_YPHI1COEFF1(value) ((LCDC_HEOCFG34_YPHI1COEFF1_Msk & ((value) << LCDC_HEOCFG34_YPHI1COEFF1_Pos)))
#define LCDC_HEOCFG34_YPHI1COEFF2_Pos 16
#define LCDC_HEOCFG34_YPHI1COEFF2_Msk (0xffu << LCDC_HEOCFG34_YPHI1COEFF2_Pos) /**< \brief (LCDC_HEOCFG34) Vertical Coefficient for phase 1 tap 2 */
#define LCDC_HEOCFG34_YPHI1COEFF2(value) ((LCDC_HEOCFG34_YPHI1COEFF2_Msk & ((value) << LCDC_HEOCFG34_YPHI1COEFF2_Pos)))
/* -------- LCDC_HEOCFG35 : (LCDC Offset: 0x00000418) High End Overlay Configuration Register 35 -------- */
#define LCDC_HEOCFG35_YPHI2COEFF0_Pos 0
#define LCDC_HEOCFG35_YPHI2COEFF0_Msk (0xffu << LCDC_HEOCFG35_YPHI2COEFF0_Pos) /**< \brief (LCDC_HEOCFG35) Vertical Coefficient for phase 2 tap 0 */
#define LCDC_HEOCFG35_YPHI2COEFF0(value) ((LCDC_HEOCFG35_YPHI2COEFF0_Msk & ((value) << LCDC_HEOCFG35_YPHI2COEFF0_Pos)))
#define LCDC_HEOCFG35_YPHI2COEFF1_Pos 8
#define LCDC_HEOCFG35_YPHI2COEFF1_Msk (0xffu << LCDC_HEOCFG35_YPHI2COEFF1_Pos) /**< \brief (LCDC_HEOCFG35) Vertical Coefficient for phase 2 tap 1 */
#define LCDC_HEOCFG35_YPHI2COEFF1(value) ((LCDC_HEOCFG35_YPHI2COEFF1_Msk & ((value) << LCDC_HEOCFG35_YPHI2COEFF1_Pos)))
#define LCDC_HEOCFG35_YPHI2COEFF2_Pos 16
#define LCDC_HEOCFG35_YPHI2COEFF2_Msk (0xffu << LCDC_HEOCFG35_YPHI2COEFF2_Pos) /**< \brief (LCDC_HEOCFG35) Vertical Coefficient for phase 2 tap 2 */
#define LCDC_HEOCFG35_YPHI2COEFF2(value) ((LCDC_HEOCFG35_YPHI2COEFF2_Msk & ((value) << LCDC_HEOCFG35_YPHI2COEFF2_Pos)))
/* -------- LCDC_HEOCFG36 : (LCDC Offset: 0x0000041C) High End Overlay Configuration Register 36 -------- */
#define LCDC_HEOCFG36_YPHI3COEFF0_Pos 0
#define LCDC_HEOCFG36_YPHI3COEFF0_Msk (0xffu << LCDC_HEOCFG36_YPHI3COEFF0_Pos) /**< \brief (LCDC_HEOCFG36) Vertical Coefficient for phase 3 tap 0 */
#define LCDC_HEOCFG36_YPHI3COEFF0(value) ((LCDC_HEOCFG36_YPHI3COEFF0_Msk & ((value) << LCDC_HEOCFG36_YPHI3COEFF0_Pos)))
#define LCDC_HEOCFG36_YPHI3COEFF1_Pos 8
#define LCDC_HEOCFG36_YPHI3COEFF1_Msk (0xffu << LCDC_HEOCFG36_YPHI3COEFF1_Pos) /**< \brief (LCDC_HEOCFG36) Vertical Coefficient for phase 3 tap 1 */
#define LCDC_HEOCFG36_YPHI3COEFF1(value) ((LCDC_HEOCFG36_YPHI3COEFF1_Msk & ((value) << LCDC_HEOCFG36_YPHI3COEFF1_Pos)))
#define LCDC_HEOCFG36_YPHI3COEFF2_Pos 16
#define LCDC_HEOCFG36_YPHI3COEFF2_Msk (0xffu << LCDC_HEOCFG36_YPHI3COEFF2_Pos) /**< \brief (LCDC_HEOCFG36) Vertical Coefficient for phase 3 tap 2 */
#define LCDC_HEOCFG36_YPHI3COEFF2(value) ((LCDC_HEOCFG36_YPHI3COEFF2_Msk & ((value) << LCDC_HEOCFG36_YPHI3COEFF2_Pos)))
/* -------- LCDC_HEOCFG37 : (LCDC Offset: 0x00000420) High End Overlay Configuration Register 37 -------- */
#define LCDC_HEOCFG37_YPHI4COEFF0_Pos 0
#define LCDC_HEOCFG37_YPHI4COEFF0_Msk (0xffu << LCDC_HEOCFG37_YPHI4COEFF0_Pos) /**< \brief (LCDC_HEOCFG37) Vertical Coefficient for phase 4 tap 0 */
#define LCDC_HEOCFG37_YPHI4COEFF0(value) ((LCDC_HEOCFG37_YPHI4COEFF0_Msk & ((value) << LCDC_HEOCFG37_YPHI4COEFF0_Pos)))
#define LCDC_HEOCFG37_YPHI4COEFF1_Pos 8
#define LCDC_HEOCFG37_YPHI4COEFF1_Msk (0xffu << LCDC_HEOCFG37_YPHI4COEFF1_Pos) /**< \brief (LCDC_HEOCFG37) Vertical Coefficient for phase 4 tap 1 */
#define LCDC_HEOCFG37_YPHI4COEFF1(value) ((LCDC_HEOCFG37_YPHI4COEFF1_Msk & ((value) << LCDC_HEOCFG37_YPHI4COEFF1_Pos)))
#define LCDC_HEOCFG37_YPHI4COEFF2_Pos 16
#define LCDC_HEOCFG37_YPHI4COEFF2_Msk (0xffu << LCDC_HEOCFG37_YPHI4COEFF2_Pos) /**< \brief (LCDC_HEOCFG37) Vertical Coefficient for phase 4 tap 2 */
#define LCDC_HEOCFG37_YPHI4COEFF2(value) ((LCDC_HEOCFG37_YPHI4COEFF2_Msk & ((value) << LCDC_HEOCFG37_YPHI4COEFF2_Pos)))
/* -------- LCDC_HEOCFG38 : (LCDC Offset: 0x00000424) High End Overlay Configuration Register 38 -------- */
#define LCDC_HEOCFG38_YPHI5COEFF0_Pos 0
#define LCDC_HEOCFG38_YPHI5COEFF0_Msk (0xffu << LCDC_HEOCFG38_YPHI5COEFF0_Pos) /**< \brief (LCDC_HEOCFG38) Vertical Coefficient for phase 5 tap 0 */
#define LCDC_HEOCFG38_YPHI5COEFF0(value) ((LCDC_HEOCFG38_YPHI5COEFF0_Msk & ((value) << LCDC_HEOCFG38_YPHI5COEFF0_Pos)))
#define LCDC_HEOCFG38_YPHI5COEFF1_Pos 8
#define LCDC_HEOCFG38_YPHI5COEFF1_Msk (0xffu << LCDC_HEOCFG38_YPHI5COEFF1_Pos) /**< \brief (LCDC_HEOCFG38) Vertical Coefficient for phase 5 tap 1 */
#define LCDC_HEOCFG38_YPHI5COEFF1(value) ((LCDC_HEOCFG38_YPHI5COEFF1_Msk & ((value) << LCDC_HEOCFG38_YPHI5COEFF1_Pos)))
#define LCDC_HEOCFG38_YPHI5COEFF2_Pos 16
#define LCDC_HEOCFG38_YPHI5COEFF2_Msk (0xffu << LCDC_HEOCFG38_YPHI5COEFF2_Pos) /**< \brief (LCDC_HEOCFG38) Vertical Coefficient for phase 5 tap 2 */
#define LCDC_HEOCFG38_YPHI5COEFF2(value) ((LCDC_HEOCFG38_YPHI5COEFF2_Msk & ((value) << LCDC_HEOCFG38_YPHI5COEFF2_Pos)))
/* -------- LCDC_HEOCFG39 : (LCDC Offset: 0x00000428) High End Overlay Configuration Register 39 -------- */
#define LCDC_HEOCFG39_YPHI6COEFF0_Pos 0
#define LCDC_HEOCFG39_YPHI6COEFF0_Msk (0xffu << LCDC_HEOCFG39_YPHI6COEFF0_Pos) /**< \brief (LCDC_HEOCFG39) Vertical Coefficient for phase 6 tap 0 */
#define LCDC_HEOCFG39_YPHI6COEFF0(value) ((LCDC_HEOCFG39_YPHI6COEFF0_Msk & ((value) << LCDC_HEOCFG39_YPHI6COEFF0_Pos)))
#define LCDC_HEOCFG39_YPHI6COEFF1_Pos 8
#define LCDC_HEOCFG39_YPHI6COEFF1_Msk (0xffu << LCDC_HEOCFG39_YPHI6COEFF1_Pos) /**< \brief (LCDC_HEOCFG39) Vertical Coefficient for phase 6 tap 1 */
#define LCDC_HEOCFG39_YPHI6COEFF1(value) ((LCDC_HEOCFG39_YPHI6COEFF1_Msk & ((value) << LCDC_HEOCFG39_YPHI6COEFF1_Pos)))
#define LCDC_HEOCFG39_YPHI6COEFF2_Pos 16
#define LCDC_HEOCFG39_YPHI6COEFF2_Msk (0xffu << LCDC_HEOCFG39_YPHI6COEFF2_Pos) /**< \brief (LCDC_HEOCFG39) Vertical Coefficient for phase 6 tap 2 */
#define LCDC_HEOCFG39_YPHI6COEFF2(value) ((LCDC_HEOCFG39_YPHI6COEFF2_Msk & ((value) << LCDC_HEOCFG39_YPHI6COEFF2_Pos)))
/* -------- LCDC_HEOCFG40 : (LCDC Offset: 0x0000042C) High End Overlay Configuration Register 40 -------- */
#define LCDC_HEOCFG40_YPHI7COEFF0_Pos 0
#define LCDC_HEOCFG40_YPHI7COEFF0_Msk (0xffu << LCDC_HEOCFG40_YPHI7COEFF0_Pos) /**< \brief (LCDC_HEOCFG40) Vertical Coefficient for phase 7 tap 0 */
#define LCDC_HEOCFG40_YPHI7COEFF0(value) ((LCDC_HEOCFG40_YPHI7COEFF0_Msk & ((value) << LCDC_HEOCFG40_YPHI7COEFF0_Pos)))
#define LCDC_HEOCFG40_YPHI7COEFF1_Pos 8
#define LCDC_HEOCFG40_YPHI7COEFF1_Msk (0xffu << LCDC_HEOCFG40_YPHI7COEFF1_Pos) /**< \brief (LCDC_HEOCFG40) Vertical Coefficient for phase 7 tap 1 */
#define LCDC_HEOCFG40_YPHI7COEFF1(value) ((LCDC_HEOCFG40_YPHI7COEFF1_Msk & ((value) << LCDC_HEOCFG40_YPHI7COEFF1_Pos)))
#define LCDC_HEOCFG40_YPHI7COEFF2_Pos 16
#define LCDC_HEOCFG40_YPHI7COEFF2_Msk (0xffu << LCDC_HEOCFG40_YPHI7COEFF2_Pos) /**< \brief (LCDC_HEOCFG40) Vertical Coefficient for phase 7 tap 2 */
#define LCDC_HEOCFG40_YPHI7COEFF2(value) ((LCDC_HEOCFG40_YPHI7COEFF2_Msk & ((value) << LCDC_HEOCFG40_YPHI7COEFF2_Pos)))
/* -------- LCDC_HEOCFG41 : (LCDC Offset: 0x00000430) High End Overlay Configuration Register 41 -------- */
#define LCDC_HEOCFG41_XPHIDEF_Pos 0
#define LCDC_HEOCFG41_XPHIDEF_Msk (0x7u << LCDC_HEOCFG41_XPHIDEF_Pos) /**< \brief (LCDC_HEOCFG41) Horizontal Filter Phase Offset */
#define LCDC_HEOCFG41_XPHIDEF(value) ((LCDC_HEOCFG41_XPHIDEF_Msk & ((value) << LCDC_HEOCFG41_XPHIDEF_Pos)))
#define LCDC_HEOCFG41_YPHIDEF_Pos 16
#define LCDC_HEOCFG41_YPHIDEF_Msk (0x7u << LCDC_HEOCFG41_YPHIDEF_Pos) /**< \brief (LCDC_HEOCFG41) Vertical Filter Phase Offset */
#define LCDC_HEOCFG41_YPHIDEF(value) ((LCDC_HEOCFG41_YPHIDEF_Msk & ((value) << LCDC_HEOCFG41_YPHIDEF_Pos)))
/* -------- LCDC_PPCHER : (LCDC Offset: 0x00000540) Post Processing Channel Enable Register -------- */
#define LCDC_PPCHER_CHEN (0x1u << 0) /**< \brief (LCDC_PPCHER) Channel Enable Register */
#define LCDC_PPCHER_UPDATEEN (0x1u << 1) /**< \brief (LCDC_PPCHER) Update Overlay Attributes Enable Register */
#define LCDC_PPCHER_A2QEN (0x1u << 2) /**< \brief (LCDC_PPCHER) Add To Queue Enable Register */
/* -------- LCDC_PPCHDR : (LCDC Offset: 0x00000544) Post Processing Channel Disable Register -------- */
#define LCDC_PPCHDR_CHDIS (0x1u << 0) /**< \brief (LCDC_PPCHDR) Channel Disable Register */
#define LCDC_PPCHDR_CHRST (0x1u << 8) /**< \brief (LCDC_PPCHDR) Channel Reset Register */
/* -------- LCDC_PPCHSR : (LCDC Offset: 0x00000548) Post Processing Channel Status Register -------- */
#define LCDC_PPCHSR_CHSR (0x1u << 0) /**< \brief (LCDC_PPCHSR) Channel Status Register */
#define LCDC_PPCHSR_UPDATESR (0x1u << 1) /**< \brief (LCDC_PPCHSR) Update Overlay Attributes In Progress Status Register */
#define LCDC_PPCHSR_A2QSR (0x1u << 2) /**< \brief (LCDC_PPCHSR) Add To Queue Status Register */
/* -------- LCDC_PPIER : (LCDC Offset: 0x0000054C) Post Processing Interrupt Enable Register -------- */
#define LCDC_PPIER_DMA (0x1u << 2) /**< \brief (LCDC_PPIER) End of DMA Transfer Interrupt Enable Register */
#define LCDC_PPIER_DSCR (0x1u << 3) /**< \brief (LCDC_PPIER) Descriptor Loaded Interrupt Enable Register */
#define LCDC_PPIER_ADD (0x1u << 4) /**< \brief (LCDC_PPIER) Head Descriptor Loaded Interrupt Enable Register */
#define LCDC_PPIER_DONE (0x1u << 5) /**< \brief (LCDC_PPIER) End of List Interrupt Enable Register */
/* -------- LCDC_PPIDR : (LCDC Offset: 0x00000550) Post Processing Interrupt Disable Register -------- */
#define LCDC_PPIDR_DMA (0x1u << 2) /**< \brief (LCDC_PPIDR) End of DMA Transfer Interrupt Disable Register */
#define LCDC_PPIDR_DSCR (0x1u << 3) /**< \brief (LCDC_PPIDR) Descriptor Loaded Interrupt Disable Register */
#define LCDC_PPIDR_ADD (0x1u << 4) /**< \brief (LCDC_PPIDR) Head Descriptor Loaded Interrupt Disable Register */
#define LCDC_PPIDR_DONE (0x1u << 5) /**< \brief (LCDC_PPIDR) End of List Interrupt Disable Register */
/* -------- LCDC_PPIMR : (LCDC Offset: 0x00000554) Post Processing Interrupt Mask Register -------- */
#define LCDC_PPIMR_DMA (0x1u << 2) /**< \brief (LCDC_PPIMR) End of DMA Transfer Interrupt Mask Register */
#define LCDC_PPIMR_DSCR (0x1u << 3) /**< \brief (LCDC_PPIMR) Descriptor Loaded Interrupt Mask Register */
#define LCDC_PPIMR_ADD (0x1u << 4) /**< \brief (LCDC_PPIMR) Head Descriptor Loaded Interrupt Mask Register */
#define LCDC_PPIMR_DONE (0x1u << 5) /**< \brief (LCDC_PPIMR) End of List Interrupt Mask Register */
/* -------- LCDC_PPISR : (LCDC Offset: 0x00000558) Post Processing Interrupt Status Register -------- */
#define LCDC_PPISR_DMA (0x1u << 2) /**< \brief (LCDC_PPISR) End of DMA Transfer */
#define LCDC_PPISR_DSCR (0x1u << 3) /**< \brief (LCDC_PPISR) DMA Descriptor Loaded */
#define LCDC_PPISR_ADD (0x1u << 4) /**< \brief (LCDC_PPISR) Head Descriptor Loaded */
#define LCDC_PPISR_DONE (0x1u << 5) /**< \brief (LCDC_PPISR) End of List Detected */
/* -------- LCDC_PPHEAD : (LCDC Offset: 0x0000055C) Post Processing Head Register -------- */
#define LCDC_PPHEAD_HEAD_Pos 2
#define LCDC_PPHEAD_HEAD_Msk (0x3fffffffu << LCDC_PPHEAD_HEAD_Pos) /**< \brief (LCDC_PPHEAD) DMA Head Pointer */
#define LCDC_PPHEAD_HEAD(value) ((LCDC_PPHEAD_HEAD_Msk & ((value) << LCDC_PPHEAD_HEAD_Pos)))
/* -------- LCDC_PPADDR : (LCDC Offset: 0x00000560) Post Processing Address Register -------- */
#define LCDC_PPADDR_ADDR_Pos 0
#define LCDC_PPADDR_ADDR_Msk (0xffffffffu << LCDC_PPADDR_ADDR_Pos) /**< \brief (LCDC_PPADDR) DMA Transfer start address */
#define LCDC_PPADDR_ADDR(value) ((LCDC_PPADDR_ADDR_Msk & ((value) << LCDC_PPADDR_ADDR_Pos)))
/* -------- LCDC_PPCTRL : (LCDC Offset: 0x00000564) Post Processing Control Register -------- */
#define LCDC_PPCTRL_DFETCH (0x1u << 0) /**< \brief (LCDC_PPCTRL) Transfer Descriptor Fetch Enable */
#define LCDC_PPCTRL_DMAIEN (0x1u << 2) /**< \brief (LCDC_PPCTRL) End of DMA Transfer Interrupt Enable */
#define LCDC_PPCTRL_DSCRIEN (0x1u << 3) /**< \brief (LCDC_PPCTRL) Descriptor Loaded Interrupt Enable */
#define LCDC_PPCTRL_ADDIEN (0x1u << 4) /**< \brief (LCDC_PPCTRL) Add Head Descriptor to Queue Interrupt Enable */
#define LCDC_PPCTRL_DONEIEN (0x1u << 5) /**< \brief (LCDC_PPCTRL) End of List Interrupt Enable */
/* -------- LCDC_PPNEXT : (LCDC Offset: 0x00000568) Post Processing Next Register -------- */
#define LCDC_PPNEXT_NEXT_Pos 0
#define LCDC_PPNEXT_NEXT_Msk (0xffffffffu << LCDC_PPNEXT_NEXT_Pos) /**< \brief (LCDC_PPNEXT) DMA Descriptor Next Address */
#define LCDC_PPNEXT_NEXT(value) ((LCDC_PPNEXT_NEXT_Msk & ((value) << LCDC_PPNEXT_NEXT_Pos)))
/* -------- LCDC_PPCFG0 : (LCDC Offset: 0x0000056C) Post Processing Configuration Register 0 -------- */
#define LCDC_PPCFG0_SIF (0x1u << 0) /**< \brief (LCDC_PPCFG0) Source Interface */
#define LCDC_PPCFG0_BLEN_Pos 4
#define LCDC_PPCFG0_BLEN_Msk (0x3u << LCDC_PPCFG0_BLEN_Pos) /**< \brief (LCDC_PPCFG0) AHB Burst Length */
#define   LCDC_PPCFG0_BLEN_AHB_BLEN_SINGLE (0x0u << 4) /**< \brief (LCDC_PPCFG0) AHB Access is started as soon as there is enough space in the FIFO to store one data. SINGLE, INCR, INCR4, INCR8 and INCR16 bursts are used. INCR is used for a burst of 2 and 3 beats. */
#define   LCDC_PPCFG0_BLEN_AHB_BLEN_INCR4 (0x1u << 4) /**< \brief (LCDC_PPCFG0) AHB Access is started as soon as there is enough space in the FIFO to store a total amount of 4 data. An AHB INCR4 Burst is used. SINGLE, INCR and INCR4 bursts are used. INCR is used for a burst of 2 and 3 beats. */
#define   LCDC_PPCFG0_BLEN_AHB_BLEN_INCR8 (0x2u << 4) /**< \brief (LCDC_PPCFG0) AHB Access is started as soon as there is enough space in the FIFO to store a total amount of 8 data. An AHB INCR8 Burst is used. SINGLE, INCR, INCR4 and INCR8 bursts are used. INCR is used for a burst of 2 and 3 beats. */
#define   LCDC_PPCFG0_BLEN_AHB_BLEN_INCR16 (0x3u << 4) /**< \brief (LCDC_PPCFG0) AHB Access is started as soon as there is enough space in the FIFO to store a total amount of 16 data. An AHB INCR16 Burst is used. SINGLE, INCR, INCR4, INCR8 and INCR16 bursts are used. INCR is used for a burst of 2 and 3 beats. */
#define LCDC_PPCFG0_DLBO (0x1u << 8) /**< \brief (LCDC_PPCFG0) Defined Length Burst Only For Channel Bus Transaction. */
/* -------- LCDC_PPCFG1 : (LCDC Offset: 0x00000570) Post Processing Configuration Register 1 -------- */
#define LCDC_PPCFG1_PPMODE_Pos 0
#define LCDC_PPCFG1_PPMODE_Msk (0x7u << LCDC_PPCFG1_PPMODE_Pos) /**< \brief (LCDC_PPCFG1) Post Processing Output Format selection */
#define   LCDC_PPCFG1_PPMODE_PPMODE_RGB_16BPP (0x0u << 0) /**< \brief (LCDC_PPCFG1) RGB 16 bpp */
#define   LCDC_PPCFG1_PPMODE_PPMODE_RGB_24BPP_PACKED (0x1u << 0) /**< \brief (LCDC_PPCFG1) RGB 24 bpp PACKED */
#define   LCDC_PPCFG1_PPMODE_PPMODE_RGB_24BPP_UNPACKED (0x2u << 0) /**< \brief (LCDC_PPCFG1) RGB 24 bpp UNPACKED */
#define   LCDC_PPCFG1_PPMODE_PPMODE_YCBCR_422_MODE0 (0x3u << 0) /**< \brief (LCDC_PPCFG1) YCbCr 422 16 bpp (Mode 0) */
#define   LCDC_PPCFG1_PPMODE_PPMODE_YCBCR_422_MODE1 (0x4u << 0) /**< \brief (LCDC_PPCFG1) YCbCr 422 16 bpp (Mode 1) */
#define   LCDC_PPCFG1_PPMODE_PPMODE_YCBCR_422_MODE2 (0x5u << 0) /**< \brief (LCDC_PPCFG1) YCbCr 422 16 bpp (Mode 2) */
#define   LCDC_PPCFG1_PPMODE_PPMODE_YCBCR_422_MODE3 (0x6u << 0) /**< \brief (LCDC_PPCFG1) YCbCr 422 16 bpp (Mode 3) */
#define LCDC_PPCFG1_ITUBT601 (0x1u << 4) /**< \brief (LCDC_PPCFG1) Color Space Conversion Luminance */
/* -------- LCDC_PPCFG2 : (LCDC Offset: 0x00000574) Post Processing Configuration Register 2 -------- */
#define LCDC_PPCFG2_XSTRIDE_Pos 0
#define LCDC_PPCFG2_XSTRIDE_Msk (0xffffffffu << LCDC_PPCFG2_XSTRIDE_Pos) /**< \brief (LCDC_PPCFG2) Horizontal Stride */
#define LCDC_PPCFG2_XSTRIDE(value) ((LCDC_PPCFG2_XSTRIDE_Msk & ((value) << LCDC_PPCFG2_XSTRIDE_Pos)))
/* -------- LCDC_PPCFG3 : (LCDC Offset: 0x00000578) Post Processing Configuration Register 3 -------- */
#define LCDC_PPCFG3_CSCYR_Pos 0
#define LCDC_PPCFG3_CSCYR_Msk (0x3ffu << LCDC_PPCFG3_CSCYR_Pos) /**< \brief (LCDC_PPCFG3) Color Space Conversion R coefficient for Luminance component, signed format, step set to 1/1024 */
#define LCDC_PPCFG3_CSCYR(value) ((LCDC_PPCFG3_CSCYR_Msk & ((value) << LCDC_PPCFG3_CSCYR_Pos)))
#define LCDC_PPCFG3_CSCYG_Pos 10
#define LCDC_PPCFG3_CSCYG_Msk (0x3ffu << LCDC_PPCFG3_CSCYG_Pos) /**< \brief (LCDC_PPCFG3) Color Space Conversion G coefficient for Luminance component, signed format, step set to 1/512 */
#define LCDC_PPCFG3_CSCYG(value) ((LCDC_PPCFG3_CSCYG_Msk & ((value) << LCDC_PPCFG3_CSCYG_Pos)))
#define LCDC_PPCFG3_CSCYB_Pos 20
#define LCDC_PPCFG3_CSCYB_Msk (0x3ffu << LCDC_PPCFG3_CSCYB_Pos) /**< \brief (LCDC_PPCFG3) Color Space Conversion B coefficient for Luminance component, signed format, step set to 1/1024 */
#define LCDC_PPCFG3_CSCYB(value) ((LCDC_PPCFG3_CSCYB_Msk & ((value) << LCDC_PPCFG3_CSCYB_Pos)))
#define LCDC_PPCFG3_CSCYOFF (0x1u << 30) /**< \brief (LCDC_PPCFG3) Color Space Conversion Luminance Offset */
/* -------- LCDC_PPCFG4 : (LCDC Offset: 0x0000057C) Post Processing Configuration Register 4 -------- */
#define LCDC_PPCFG4_CSCUR_Pos 0
#define LCDC_PPCFG4_CSCUR_Msk (0x3ffu << LCDC_PPCFG4_CSCUR_Pos) /**< \brief (LCDC_PPCFG4) Color Space Conversion R coefficient for Chrominance B component, signed format. (step 1/1024) */
#define LCDC_PPCFG4_CSCUR(value) ((LCDC_PPCFG4_CSCUR_Msk & ((value) << LCDC_PPCFG4_CSCUR_Pos)))
#define LCDC_PPCFG4_CSCUG_Pos 10
#define LCDC_PPCFG4_CSCUG_Msk (0x3ffu << LCDC_PPCFG4_CSCUG_Pos) /**< \brief (LCDC_PPCFG4) Color Space Conversion G coefficient for Chrominance B component, signed format. (step 1/512) */
#define LCDC_PPCFG4_CSCUG(value) ((LCDC_PPCFG4_CSCUG_Msk & ((value) << LCDC_PPCFG4_CSCUG_Pos)))
#define LCDC_PPCFG4_CSCUB_Pos 20
#define LCDC_PPCFG4_CSCUB_Msk (0x3ffu << LCDC_PPCFG4_CSCUB_Pos) /**< \brief (LCDC_PPCFG4) Color Space Conversion B coefficient for Chrominance B component, signed format. (step 1/512) */
#define LCDC_PPCFG4_CSCUB(value) ((LCDC_PPCFG4_CSCUB_Msk & ((value) << LCDC_PPCFG4_CSCUB_Pos)))
#define LCDC_PPCFG4_CSCUOFF (0x1u << 30) /**< \brief (LCDC_PPCFG4) Color Space Conversion Chrominance B Offset */
/* -------- LCDC_PPCFG5 : (LCDC Offset: 0x00000580) Post Processing Configuration Register 5 -------- */
#define LCDC_PPCFG5_CSCVR_Pos 0
#define LCDC_PPCFG5_CSCVR_Msk (0x3ffu << LCDC_PPCFG5_CSCVR_Pos) /**< \brief (LCDC_PPCFG5) Color Space Conversion R coefficient for Chrominance R component, signed format. (step 1/1024) */
#define LCDC_PPCFG5_CSCVR(value) ((LCDC_PPCFG5_CSCVR_Msk & ((value) << LCDC_PPCFG5_CSCVR_Pos)))
#define LCDC_PPCFG5_CSCVG_Pos 10
#define LCDC_PPCFG5_CSCVG_Msk (0x3ffu << LCDC_PPCFG5_CSCVG_Pos) /**< \brief (LCDC_PPCFG5) Color Space Conversion G coefficient for Chrominance R component, signed format. (step 1/512) */
#define LCDC_PPCFG5_CSCVG(value) ((LCDC_PPCFG5_CSCVG_Msk & ((value) << LCDC_PPCFG5_CSCVG_Pos)))
#define LCDC_PPCFG5_CSCVB_Pos 20
#define LCDC_PPCFG5_CSCVB_Msk (0x3ffu << LCDC_PPCFG5_CSCVB_Pos) /**< \brief (LCDC_PPCFG5) Color Space Conversion B coefficient for Chrominance R component, signed format. (step 1/1024) */
#define LCDC_PPCFG5_CSCVB(value) ((LCDC_PPCFG5_CSCVB_Msk & ((value) << LCDC_PPCFG5_CSCVB_Pos)))
#define LCDC_PPCFG5_CSCVOFF (0x1u << 30) /**< \brief (LCDC_PPCFG5) Color Space Conversion Chrominance R Offset */
/* -------- LCDC_BASECLUT[256] : (LCDC Offset: 0x00000600) Base CLUT Register -------- */
#define LCDC_BASECLUT_BCLUT_Pos 0
#define LCDC_BASECLUT_BCLUT_Msk (0xffu << LCDC_BASECLUT_BCLUT_Pos) /**< \brief (LCDC_BASECLUT[256]) Blue Color entry */
#define LCDC_BASECLUT_BCLUT(value) ((LCDC_BASECLUT_BCLUT_Msk & ((value) << LCDC_BASECLUT_BCLUT_Pos)))
#define LCDC_BASECLUT_GCLUT_Pos 8
#define LCDC_BASECLUT_GCLUT_Msk (0xffu << LCDC_BASECLUT_GCLUT_Pos) /**< \brief (LCDC_BASECLUT[256]) Green Color entry */
#define LCDC_BASECLUT_GCLUT(value) ((LCDC_BASECLUT_GCLUT_Msk & ((value) << LCDC_BASECLUT_GCLUT_Pos)))
#define LCDC_BASECLUT_RCLUT_Pos 16
#define LCDC_BASECLUT_RCLUT_Msk (0xffu << LCDC_BASECLUT_RCLUT_Pos) /**< \brief (LCDC_BASECLUT[256]) Red Color entry */
#define LCDC_BASECLUT_RCLUT(value) ((LCDC_BASECLUT_RCLUT_Msk & ((value) << LCDC_BASECLUT_RCLUT_Pos)))
/* -------- LCDC_OVR1CLUT[256] : (LCDC Offset: 0x00000A00) Overlay 1 CLUT Register -------- */
#define LCDC_OVR1CLUT_BCLUT_Pos 0
#define LCDC_OVR1CLUT_BCLUT_Msk (0xffu << LCDC_OVR1CLUT_BCLUT_Pos) /**< \brief (LCDC_OVR1CLUT[256]) Blue Color entry */
#define LCDC_OVR1CLUT_BCLUT(value) ((LCDC_OVR1CLUT_BCLUT_Msk & ((value) << LCDC_OVR1CLUT_BCLUT_Pos)))
#define LCDC_OVR1CLUT_GCLUT_Pos 8
#define LCDC_OVR1CLUT_GCLUT_Msk (0xffu << LCDC_OVR1CLUT_GCLUT_Pos) /**< \brief (LCDC_OVR1CLUT[256]) Green Color entry */
#define LCDC_OVR1CLUT_GCLUT(value) ((LCDC_OVR1CLUT_GCLUT_Msk & ((value) << LCDC_OVR1CLUT_GCLUT_Pos)))
#define LCDC_OVR1CLUT_RCLUT_Pos 16
#define LCDC_OVR1CLUT_RCLUT_Msk (0xffu << LCDC_OVR1CLUT_RCLUT_Pos) /**< \brief (LCDC_OVR1CLUT[256]) Red Color entry */
#define LCDC_OVR1CLUT_RCLUT(value) ((LCDC_OVR1CLUT_RCLUT_Msk & ((value) << LCDC_OVR1CLUT_RCLUT_Pos)))
#define LCDC_OVR1CLUT_ACLUT_Pos 24
#define LCDC_OVR1CLUT_ACLUT_Msk (0xffu << LCDC_OVR1CLUT_ACLUT_Pos) /**< \brief (LCDC_OVR1CLUT[256]) Alpha Color entry */
#define LCDC_OVR1CLUT_ACLUT(value) ((LCDC_OVR1CLUT_ACLUT_Msk & ((value) << LCDC_OVR1CLUT_ACLUT_Pos)))
/* -------- LCDC_OVR2CLUT[256] : (LCDC Offset: 0x00000E00) Overlay 2 CLUT Register -------- */
#define LCDC_OVR2CLUT_BCLUT_Pos 0
#define LCDC_OVR2CLUT_BCLUT_Msk (0xffu << LCDC_OVR2CLUT_BCLUT_Pos) /**< \brief (LCDC_OVR2CLUT[256]) Blue Color entry */
#define LCDC_OVR2CLUT_BCLUT(value) ((LCDC_OVR2CLUT_BCLUT_Msk & ((value) << LCDC_OVR2CLUT_BCLUT_Pos)))
#define LCDC_OVR2CLUT_GCLUT_Pos 8
#define LCDC_OVR2CLUT_GCLUT_Msk (0xffu << LCDC_OVR2CLUT_GCLUT_Pos) /**< \brief (LCDC_OVR2CLUT[256]) Green Color entry */
#define LCDC_OVR2CLUT_GCLUT(value) ((LCDC_OVR2CLUT_GCLUT_Msk & ((value) << LCDC_OVR2CLUT_GCLUT_Pos)))
#define LCDC_OVR2CLUT_RCLUT_Pos 16
#define LCDC_OVR2CLUT_RCLUT_Msk (0xffu << LCDC_OVR2CLUT_RCLUT_Pos) /**< \brief (LCDC_OVR2CLUT[256]) Red Color entry */
#define LCDC_OVR2CLUT_RCLUT(value) ((LCDC_OVR2CLUT_RCLUT_Msk & ((value) << LCDC_OVR2CLUT_RCLUT_Pos)))
#define LCDC_OVR2CLUT_ACLUT_Pos 24
#define LCDC_OVR2CLUT_ACLUT_Msk (0xffu << LCDC_OVR2CLUT_ACLUT_Pos) /**< \brief (LCDC_OVR2CLUT[256]) Alpha Color entry */
#define LCDC_OVR2CLUT_ACLUT(value) ((LCDC_OVR2CLUT_ACLUT_Msk & ((value) << LCDC_OVR2CLUT_ACLUT_Pos)))
/* -------- LCDC_HEOCLUT[256] : (LCDC Offset: 0x00001200) High End Overlay CLUT Register -------- */
#define LCDC_HEOCLUT_BCLUT_Pos 0
#define LCDC_HEOCLUT_BCLUT_Msk (0xffu << LCDC_HEOCLUT_BCLUT_Pos) /**< \brief (LCDC_HEOCLUT[256]) Blue Color entry */
#define LCDC_HEOCLUT_BCLUT(value) ((LCDC_HEOCLUT_BCLUT_Msk & ((value) << LCDC_HEOCLUT_BCLUT_Pos)))
#define LCDC_HEOCLUT_GCLUT_Pos 8
#define LCDC_HEOCLUT_GCLUT_Msk (0xffu << LCDC_HEOCLUT_GCLUT_Pos) /**< \brief (LCDC_HEOCLUT[256]) Green Color entry */
#define LCDC_HEOCLUT_GCLUT(value) ((LCDC_HEOCLUT_GCLUT_Msk & ((value) << LCDC_HEOCLUT_GCLUT_Pos)))
#define LCDC_HEOCLUT_RCLUT_Pos 16
#define LCDC_HEOCLUT_RCLUT_Msk (0xffu << LCDC_HEOCLUT_RCLUT_Pos) /**< \brief (LCDC_HEOCLUT[256]) Red Color entry */
#define LCDC_HEOCLUT_RCLUT(value) ((LCDC_HEOCLUT_RCLUT_Msk & ((value) << LCDC_HEOCLUT_RCLUT_Pos)))
#define LCDC_HEOCLUT_ACLUT_Pos 24
#define LCDC_HEOCLUT_ACLUT_Msk (0xffu << LCDC_HEOCLUT_ACLUT_Pos) /**< \brief (LCDC_HEOCLUT[256]) Alpha Color entry */
#define LCDC_HEOCLUT_ACLUT(value) ((LCDC_HEOCLUT_ACLUT_Msk & ((value) << LCDC_HEOCLUT_ACLUT_Pos)))
/* -------- LCDC_ADDRSIZE : (LCDC Offset: 0x00001FEC) Address Size Register -------- */
#define LCDC_ADDRSIZE_ADDRSIZE_Pos 0
#define LCDC_ADDRSIZE_ADDRSIZE_Msk (0xffffu << LCDC_ADDRSIZE_ADDRSIZE_Pos) /**< \brief (LCDC_ADDRSIZE) APB Address Size */
/* -------- LCDC_IPNAME[2] : (LCDC Offset: 0x00001FF0) IP Name1 Register -------- */
#define LCDC_IPNAME_IPNAME_Pos 0
#define LCDC_IPNAME_IPNAME_Msk (0xffffffffu << LCDC_IPNAME_IPNAME_Pos) /**< \brief (LCDC_IPNAME[2]) IP Name */
/* -------- LCDC_VERSION : (LCDC Offset: 0x00001FFC) Version Register -------- */
#define LCDC_VERSION_VERSION_Pos 0
#define LCDC_VERSION_VERSION_Msk (0xfffu << LCDC_VERSION_VERSION_Pos) /**< \brief (LCDC_VERSION) Version of the Hardware Module */
#define LCDC_VERSION_MFN_Pos 16
#define LCDC_VERSION_MFN_Msk (0x7u << LCDC_VERSION_MFN_Pos) /**< \brief (LCDC_VERSION) Metal Fix Number */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR AHB Bus Matrix */
/* ============================================================================= */
/** \addtogroup SAMA5D2_MATRIX AHB Bus Matrix */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief MatrixPr hardware registers */
typedef struct {
  __IO uint32_t MATRIX_PRAS; /**< \brief (MatrixPr Offset: 0x0) Priority Register A for Slave 0 */
  __IO uint32_t MATRIX_PRBS; /**< \brief (MatrixPr Offset: 0x4) Priority Register B for Slave 0 */
} MatrixPr;
/** \brief Matrix hardware registers */
#define MATRIXPR_NUMBER 16
typedef struct {
  __IO uint32_t MATRIX_MCFG[16];            /**< \brief (Matrix Offset: 0x0000) Master Configuration Register */
  __IO uint32_t MATRIX_SCFG[16];            /**< \brief (Matrix Offset: 0x0040) Slave Configuration Register */
       MatrixPr MATRIX_PR[MATRIXPR_NUMBER]; /**< \brief (Matrix Offset: 0x0080) 0 .. 15 */
  __IO uint32_t MATRIX_MRCR;                /**< \brief (Matrix Offset: 0x0100) Master Remap Control Register */
  __I  uint32_t Reserved1[3];
  __IO uint32_t MATRIX_SFR[16];             /**< \brief (Matrix Offset: 0x0110) Special Function Register */
  __O  uint32_t MATRIX_MEIER;               /**< \brief (Matrix Offset: 0x0150) Master Error Interrupt Enable Register */
  __O  uint32_t MATRIX_MEIDR;               /**< \brief (Matrix Offset: 0x0154) Master Error Interrupt Disable Register */
  __I  uint32_t MATRIX_MEIMR;               /**< \brief (Matrix Offset: 0x0158) Master Error Interrupt Mask Register */
  __I  uint32_t MATRIX_MESR;                /**< \brief (Matrix Offset: 0x015C) Master Error Status Register */
  __I  uint32_t MATRIX_MEAR[16];            /**< \brief (Matrix Offset: 0x0160) Master 0 Error Address Register */
  __I  uint32_t Reserved2[17];
  __IO uint32_t MATRIX_WPMR;                /**< \brief (Matrix Offset: 0x01E4) Write Protect Mode Register */
  __I  uint32_t MATRIX_WPSR;                /**< \brief (Matrix Offset: 0x01E8) Write Protect Status Register */
  __I  uint32_t Reserved3[4];
  __I  uint32_t MATRIX_VERSION;             /**< \brief (Matrix Offset: 0x01FC) Version Register */
  __IO uint32_t MATRIX_SSR[16];             /**< \brief (Matrix Offset: 0x0200) Security Slave 0 Register */
  __IO uint32_t MATRIX_SASSR[16];           /**< \brief (Matrix Offset: 0x0240) Security Areas Split Slave 0 Register */
  __IO uint32_t MATRIX_SRTSR[16];           /**< \brief (Matrix Offset: 0x0280) Security Region Top Slave 0 Register */
  __IO uint32_t MATRIX_SPSELR[3];           /**< \brief (Matrix Offset: 0x02C0) Security Peripheral Select 1 Register */
} Matrix;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- MATRIX_MCFG[16] : (MATRIX Offset: 0x0000) Master Configuration Register -------- */
#define MATRIX_MCFG_ULBT_Pos 0
#define MATRIX_MCFG_ULBT_Msk (0x7u << MATRIX_MCFG_ULBT_Pos) /**< \brief (MATRIX_MCFG[16]) Undefined Length Burst Type */
#define   MATRIX_MCFG_ULBT_UNLIMITED (0x0u << 0) /**< \brief (MATRIX_MCFG[16]) Unlimited Length Burst-No predicted end of burst is generated, therefore INCR bursts coming from this master can only be broken if the Slave Slot Cycle Limit is reached. If the Slot Cycle Limit is not reached, the burst is normally completed by the master, at the latest, on the next AHB 1 Kbyte address boundary, allowing up to 256-beat word bursts or 128-beat double-word bursts.This value should not be used in the very particular case of a master capable of performing back-to-back undefined length bursts on a single slave, since this could indefinitely freeze the slave arbitration and thus prevent another master from accessing this slave. */
#define   MATRIX_MCFG_ULBT_SINGLE (0x1u << 0) /**< \brief (MATRIX_MCFG[16]) Single Access-The undefined length burst is treated as a succession of single accesses, allowing re-arbitration at each beat of the INCR burst or bursts sequence. */
#define   MATRIX_MCFG_ULBT_4_BEAT (0x2u << 0) /**< \brief (MATRIX_MCFG[16]) 4-beat Burst-The undefined length burst or bursts sequence is split into 4-beat bursts or less, allowing re-arbitration every 4 beats. */
#define   MATRIX_MCFG_ULBT_8_BEAT (0x3u << 0) /**< \brief (MATRIX_MCFG[16]) 8-beat Burst-The undefined length burst or bursts sequence is split into 8-beat bursts or less, allowing re-arbitration every 8 beats. */
#define   MATRIX_MCFG_ULBT_16_BEAT (0x4u << 0) /**< \brief (MATRIX_MCFG[16]) 16-beat Burst-The undefined length burst or bursts sequence is split into 16-beat bursts or less, allowing re-arbitration every 16 beats. */
#define   MATRIX_MCFG_ULBT_32_BEAT (0x5u << 0) /**< \brief (MATRIX_MCFG[16]) 32-beat Burst-The undefined length burst or bursts sequence is split into 32-beat bursts or less, allowing re-arbitration every 32 beats. */
#define   MATRIX_MCFG_ULBT_64_BEAT (0x6u << 0) /**< \brief (MATRIX_MCFG[16]) 64-beat Burst-The undefined length burst or bursts sequence is split into 64-beat bursts or less, allowing re-arbitration every 64 beats. */
#define   MATRIX_MCFG_ULBT_128_BEAT (0x7u << 0) /**< \brief (MATRIX_MCFG[16]) 128-beat Burst-The undefined length burst or bursts sequence is split into 128-beat bursts or less, allowing re-arbitration every 128 beats.Unless duly needed, the ULBT should be left at its default 0 value for power saving. */
/* -------- MATRIX_SCFG[16] : (MATRIX Offset: 0x0040) Slave Configuration Register -------- */
#define MATRIX_SCFG_SLOT_CYCLE_Pos 0
#define MATRIX_SCFG_SLOT_CYCLE_Msk (0x1ffu << MATRIX_SCFG_SLOT_CYCLE_Pos) /**< \brief (MATRIX_SCFG[16]) Maximum Bus Grant Duration for Masters */
#define MATRIX_SCFG_SLOT_CYCLE(value) ((MATRIX_SCFG_SLOT_CYCLE_Msk & ((value) << MATRIX_SCFG_SLOT_CYCLE_Pos)))
#define MATRIX_SCFG_DEFMSTR_TYPE_Pos 16
#define MATRIX_SCFG_DEFMSTR_TYPE_Msk (0x3u << MATRIX_SCFG_DEFMSTR_TYPE_Pos) /**< \brief (MATRIX_SCFG[16]) Default Master Type */
#define   MATRIX_SCFG_DEFMSTR_TYPE_NONE (0x0u << 16) /**< \brief (MATRIX_SCFG[16]) No Default Master-At the end of the current slave access, if no other master request is pending, the slave is disconnected from all masters.This results in a one clock cycle latency for the first access of a burst transfer or for a single access. */
#define   MATRIX_SCFG_DEFMSTR_TYPE_LAST (0x1u << 16) /**< \brief (MATRIX_SCFG[16]) Last Default Master-At the end of the current slave access, if no other master request is pending, the slave stays connected to the last master having accessed it.This results in not having one clock cycle latency when the last master tries to access the slave again. */
#define   MATRIX_SCFG_DEFMSTR_TYPE_FIXED (0x2u << 16) /**< \brief (MATRIX_SCFG[16]) Fixed Default Master-At the end of the current slave access, if no other master request is pending, the slave connects to the fixed master the number that has been written in the FIXED_DEFMSTR field.This results in not having one clock cycle latency when the fixed master tries to access the slave again. */
#define MATRIX_SCFG_FIXED_DEFMSTR_Pos 18
#define MATRIX_SCFG_FIXED_DEFMSTR_Msk (0xfu << MATRIX_SCFG_FIXED_DEFMSTR_Pos) /**< \brief (MATRIX_SCFG[16]) Fixed Default Master */
#define MATRIX_SCFG_FIXED_DEFMSTR(value) ((MATRIX_SCFG_FIXED_DEFMSTR_Msk & ((value) << MATRIX_SCFG_FIXED_DEFMSTR_Pos)))
/* -------- MATRIX_PRAS : (MATRIX Offset: N/A) Priority Register A for Slave 0 -------- */
#define MATRIX_PRAS_M0PR_Pos 0
#define MATRIX_PRAS_M0PR_Msk (0x3u << MATRIX_PRAS_M0PR_Pos) /**< \brief (MATRIX_PRAS) Master 0 Priority */
#define MATRIX_PRAS_M0PR(value) ((MATRIX_PRAS_M0PR_Msk & ((value) << MATRIX_PRAS_M0PR_Pos)))
#define MATRIX_PRAS_LQOSEN0 (0x1u << 2) /**< \brief (MATRIX_PRAS) Latency Quality of Service Enable for Master 0 */
#define MATRIX_PRAS_M1PR_Pos 4
#define MATRIX_PRAS_M1PR_Msk (0x3u << MATRIX_PRAS_M1PR_Pos) /**< \brief (MATRIX_PRAS) Master 1 Priority */
#define MATRIX_PRAS_M1PR(value) ((MATRIX_PRAS_M1PR_Msk & ((value) << MATRIX_PRAS_M1PR_Pos)))
#define MATRIX_PRAS_LQOSEN1 (0x1u << 6) /**< \brief (MATRIX_PRAS) Latency Quality of Service Enable for Master 1 */
#define MATRIX_PRAS_M2PR_Pos 8
#define MATRIX_PRAS_M2PR_Msk (0x3u << MATRIX_PRAS_M2PR_Pos) /**< \brief (MATRIX_PRAS) Master 2 Priority */
#define MATRIX_PRAS_M2PR(value) ((MATRIX_PRAS_M2PR_Msk & ((value) << MATRIX_PRAS_M2PR_Pos)))
#define MATRIX_PRAS_LQOSEN2 (0x1u << 10) /**< \brief (MATRIX_PRAS) Latency Quality of Service Enable for Master 2 */
#define MATRIX_PRAS_M3PR_Pos 12
#define MATRIX_PRAS_M3PR_Msk (0x3u << MATRIX_PRAS_M3PR_Pos) /**< \brief (MATRIX_PRAS) Master 3 Priority */
#define MATRIX_PRAS_M3PR(value) ((MATRIX_PRAS_M3PR_Msk & ((value) << MATRIX_PRAS_M3PR_Pos)))
#define MATRIX_PRAS_LQOSEN3 (0x1u << 14) /**< \brief (MATRIX_PRAS) Latency Quality of Service Enable for Master 3 */
#define MATRIX_PRAS_M4PR_Pos 16
#define MATRIX_PRAS_M4PR_Msk (0x3u << MATRIX_PRAS_M4PR_Pos) /**< \brief (MATRIX_PRAS) Master 4 Priority */
#define MATRIX_PRAS_M4PR(value) ((MATRIX_PRAS_M4PR_Msk & ((value) << MATRIX_PRAS_M4PR_Pos)))
#define MATRIX_PRAS_LQOSEN4 (0x1u << 18) /**< \brief (MATRIX_PRAS) Latency Quality of Service Enable for Master 4 */
#define MATRIX_PRAS_M5PR_Pos 20
#define MATRIX_PRAS_M5PR_Msk (0x3u << MATRIX_PRAS_M5PR_Pos) /**< \brief (MATRIX_PRAS) Master 5 Priority */
#define MATRIX_PRAS_M5PR(value) ((MATRIX_PRAS_M5PR_Msk & ((value) << MATRIX_PRAS_M5PR_Pos)))
#define MATRIX_PRAS_LQOSEN5 (0x1u << 22) /**< \brief (MATRIX_PRAS) Latency Quality of Service Enable for Master 5 */
#define MATRIX_PRAS_M6PR_Pos 24
#define MATRIX_PRAS_M6PR_Msk (0x3u << MATRIX_PRAS_M6PR_Pos) /**< \brief (MATRIX_PRAS) Master 6 Priority */
#define MATRIX_PRAS_M6PR(value) ((MATRIX_PRAS_M6PR_Msk & ((value) << MATRIX_PRAS_M6PR_Pos)))
#define MATRIX_PRAS_LQOSEN6 (0x1u << 26) /**< \brief (MATRIX_PRAS) Latency Quality of Service Enable for Master 6 */
#define MATRIX_PRAS_M7PR_Pos 28
#define MATRIX_PRAS_M7PR_Msk (0x3u << MATRIX_PRAS_M7PR_Pos) /**< \brief (MATRIX_PRAS) Master 7 Priority */
#define MATRIX_PRAS_M7PR(value) ((MATRIX_PRAS_M7PR_Msk & ((value) << MATRIX_PRAS_M7PR_Pos)))
#define MATRIX_PRAS_LQOSEN7 (0x1u << 30) /**< \brief (MATRIX_PRAS) Latency Quality of Service Enable for Master 7 */
/* -------- MATRIX_PRBS : (MATRIX Offset: N/A) Priority Register B for Slave 0 -------- */
#define MATRIX_PRBS_M8PR_Pos 0
#define MATRIX_PRBS_M8PR_Msk (0x3u << MATRIX_PRBS_M8PR_Pos) /**< \brief (MATRIX_PRBS) Master 8 Priority */
#define MATRIX_PRBS_M8PR(value) ((MATRIX_PRBS_M8PR_Msk & ((value) << MATRIX_PRBS_M8PR_Pos)))
#define MATRIX_PRBS_LQOSEN8 (0x1u << 2) /**< \brief (MATRIX_PRBS) Latency Quality of Service Enable for Master 8 */
#define MATRIX_PRBS_M9PR_Pos 4
#define MATRIX_PRBS_M9PR_Msk (0x3u << MATRIX_PRBS_M9PR_Pos) /**< \brief (MATRIX_PRBS) Master 9 Priority */
#define MATRIX_PRBS_M9PR(value) ((MATRIX_PRBS_M9PR_Msk & ((value) << MATRIX_PRBS_M9PR_Pos)))
#define MATRIX_PRBS_LQOSEN9 (0x1u << 6) /**< \brief (MATRIX_PRBS) Latency Quality of Service Enable for Master 9 */
#define MATRIX_PRBS_M10PR_Pos 8
#define MATRIX_PRBS_M10PR_Msk (0x3u << MATRIX_PRBS_M10PR_Pos) /**< \brief (MATRIX_PRBS) Master 10 Priority */
#define MATRIX_PRBS_M10PR(value) ((MATRIX_PRBS_M10PR_Msk & ((value) << MATRIX_PRBS_M10PR_Pos)))
#define MATRIX_PRBS_LQOSEN10 (0x1u << 10) /**< \brief (MATRIX_PRBS) Latency Quality of Service Enable for Master 10 */
#define MATRIX_PRBS_M11PR_Pos 12
#define MATRIX_PRBS_M11PR_Msk (0x3u << MATRIX_PRBS_M11PR_Pos) /**< \brief (MATRIX_PRBS) Master 11 Priority */
#define MATRIX_PRBS_M11PR(value) ((MATRIX_PRBS_M11PR_Msk & ((value) << MATRIX_PRBS_M11PR_Pos)))
#define MATRIX_PRBS_LQOSEN11 (0x1u << 14) /**< \brief (MATRIX_PRBS) Latency Quality of Service Enable for Master 11 */
#define MATRIX_PRBS_M12PR_Pos 16
#define MATRIX_PRBS_M12PR_Msk (0x3u << MATRIX_PRBS_M12PR_Pos) /**< \brief (MATRIX_PRBS) Master 12 Priority */
#define MATRIX_PRBS_M12PR(value) ((MATRIX_PRBS_M12PR_Msk & ((value) << MATRIX_PRBS_M12PR_Pos)))
#define MATRIX_PRBS_LQOSEN12 (0x1u << 18) /**< \brief (MATRIX_PRBS) Latency Quality of Service Enable for Master 12 */
#define MATRIX_PRBS_M13PR_Pos 20
#define MATRIX_PRBS_M13PR_Msk (0x3u << MATRIX_PRBS_M13PR_Pos) /**< \brief (MATRIX_PRBS) Master 13 Priority */
#define MATRIX_PRBS_M13PR(value) ((MATRIX_PRBS_M13PR_Msk & ((value) << MATRIX_PRBS_M13PR_Pos)))
#define MATRIX_PRBS_LQOSEN13 (0x1u << 22) /**< \brief (MATRIX_PRBS) Latency Quality of Service Enable for Master 13 */
#define MATRIX_PRBS_M14PR_Pos 24
#define MATRIX_PRBS_M14PR_Msk (0x3u << MATRIX_PRBS_M14PR_Pos) /**< \brief (MATRIX_PRBS) Master 14 Priority */
#define MATRIX_PRBS_M14PR(value) ((MATRIX_PRBS_M14PR_Msk & ((value) << MATRIX_PRBS_M14PR_Pos)))
#define MATRIX_PRBS_LQOSEN14 (0x1u << 26) /**< \brief (MATRIX_PRBS) Latency Quality of Service Enable for Master 14 */
#define MATRIX_PRBS_M15PR_Pos 28
#define MATRIX_PRBS_M15PR_Msk (0x3u << MATRIX_PRBS_M15PR_Pos) /**< \brief (MATRIX_PRBS) Master 15 Priority */
#define MATRIX_PRBS_M15PR(value) ((MATRIX_PRBS_M15PR_Msk & ((value) << MATRIX_PRBS_M15PR_Pos)))
#define MATRIX_PRBS_LQOSEN15 (0x1u << 30) /**< \brief (MATRIX_PRBS) Latency Quality of Service Enable for Master 15 */
/* -------- MATRIX_MRCR : (MATRIX Offset: 0x0100) Master Remap Control Register -------- */
#define MATRIX_MRCR_RCB0 (0x1u << 0) /**< \brief (MATRIX_MRCR) Remap Command Bit for Master 0 */
#define MATRIX_MRCR_RCB1 (0x1u << 1) /**< \brief (MATRIX_MRCR) Remap Command Bit for Master 1 */
#define MATRIX_MRCR_RCB2 (0x1u << 2) /**< \brief (MATRIX_MRCR) Remap Command Bit for Master 2 */
#define MATRIX_MRCR_RCB3 (0x1u << 3) /**< \brief (MATRIX_MRCR) Remap Command Bit for Master 3 */
#define MATRIX_MRCR_RCB4 (0x1u << 4) /**< \brief (MATRIX_MRCR) Remap Command Bit for Master 4 */
#define MATRIX_MRCR_RCB5 (0x1u << 5) /**< \brief (MATRIX_MRCR) Remap Command Bit for Master 5 */
#define MATRIX_MRCR_RCB6 (0x1u << 6) /**< \brief (MATRIX_MRCR) Remap Command Bit for Master 6 */
#define MATRIX_MRCR_RCB7 (0x1u << 7) /**< \brief (MATRIX_MRCR) Remap Command Bit for Master 7 */
#define MATRIX_MRCR_RCB8 (0x1u << 8) /**< \brief (MATRIX_MRCR) Remap Command Bit for Master 8 */
#define MATRIX_MRCR_RCB9 (0x1u << 9) /**< \brief (MATRIX_MRCR) Remap Command Bit for Master 9 */
#define MATRIX_MRCR_RCB10 (0x1u << 10) /**< \brief (MATRIX_MRCR) Remap Command Bit for Master 10 */
#define MATRIX_MRCR_RCB11 (0x1u << 11) /**< \brief (MATRIX_MRCR) Remap Command Bit for Master 11 */
#define MATRIX_MRCR_RCB12 (0x1u << 12) /**< \brief (MATRIX_MRCR) Remap Command Bit for Master 12 */
#define MATRIX_MRCR_RCB13 (0x1u << 13) /**< \brief (MATRIX_MRCR) Remap Command Bit for Master 13 */
#define MATRIX_MRCR_RCB14 (0x1u << 14) /**< \brief (MATRIX_MRCR) Remap Command Bit for Master 14 */
#define MATRIX_MRCR_RCB15 (0x1u << 15) /**< \brief (MATRIX_MRCR) Remap Command Bit for Master 15 */
/* -------- MATRIX_SFR[16] : (MATRIX Offset: 0x0110) Special Function Register -------- */
#define MATRIX_SFR_SFR_Pos 0
#define MATRIX_SFR_SFR_Msk (0xffffffffu << MATRIX_SFR_SFR_Pos) /**< \brief (MATRIX_SFR[16]) Special Function Register Fields */
#define MATRIX_SFR_SFR(value) ((MATRIX_SFR_SFR_Msk & ((value) << MATRIX_SFR_SFR_Pos)))
/* -------- MATRIX_MEIER : (MATRIX Offset: 0x0150) Master Error Interrupt Enable Register -------- */
#define MATRIX_MEIER_MERR0 (0x1u << 0) /**< \brief (MATRIX_MEIER) Master 0 Access Error */
#define MATRIX_MEIER_MERR1 (0x1u << 1) /**< \brief (MATRIX_MEIER) Master 1 Access Error */
#define MATRIX_MEIER_MERR2 (0x1u << 2) /**< \brief (MATRIX_MEIER) Master 2 Access Error */
#define MATRIX_MEIER_MERR3 (0x1u << 3) /**< \brief (MATRIX_MEIER) Master 3 Access Error */
#define MATRIX_MEIER_MERR4 (0x1u << 4) /**< \brief (MATRIX_MEIER) Master 4 Access Error */
#define MATRIX_MEIER_MERR5 (0x1u << 5) /**< \brief (MATRIX_MEIER) Master 5 Access Error */
#define MATRIX_MEIER_MERR6 (0x1u << 6) /**< \brief (MATRIX_MEIER) Master 6 Access Error */
#define MATRIX_MEIER_MERR7 (0x1u << 7) /**< \brief (MATRIX_MEIER) Master 7 Access Error */
#define MATRIX_MEIER_MERR8 (0x1u << 8) /**< \brief (MATRIX_MEIER) Master 8 Access Error */
#define MATRIX_MEIER_MERR9 (0x1u << 9) /**< \brief (MATRIX_MEIER) Master 9 Access Error */
#define MATRIX_MEIER_MERR10 (0x1u << 10) /**< \brief (MATRIX_MEIER) Master 10 Access Error */
#define MATRIX_MEIER_MERR11 (0x1u << 11) /**< \brief (MATRIX_MEIER) Master 11 Access Error */
#define MATRIX_MEIER_MERR12 (0x1u << 12) /**< \brief (MATRIX_MEIER) Master 12 Access Error */
#define MATRIX_MEIER_MERR13 (0x1u << 13) /**< \brief (MATRIX_MEIER) Master 13 Access Error */
#define MATRIX_MEIER_MERR14 (0x1u << 14) /**< \brief (MATRIX_MEIER) Master 14 Access Error */
#define MATRIX_MEIER_MERR15 (0x1u << 15) /**< \brief (MATRIX_MEIER) Master 15 Access Error */
/* -------- MATRIX_MEIDR : (MATRIX Offset: 0x0154) Master Error Interrupt Disable Register -------- */
#define MATRIX_MEIDR_MERR0 (0x1u << 0) /**< \brief (MATRIX_MEIDR) Master 0 Access Error */
#define MATRIX_MEIDR_MERR1 (0x1u << 1) /**< \brief (MATRIX_MEIDR) Master 1 Access Error */
#define MATRIX_MEIDR_MERR2 (0x1u << 2) /**< \brief (MATRIX_MEIDR) Master 2 Access Error */
#define MATRIX_MEIDR_MERR3 (0x1u << 3) /**< \brief (MATRIX_MEIDR) Master 3 Access Error */
#define MATRIX_MEIDR_MERR4 (0x1u << 4) /**< \brief (MATRIX_MEIDR) Master 4 Access Error */
#define MATRIX_MEIDR_MERR5 (0x1u << 5) /**< \brief (MATRIX_MEIDR) Master 5 Access Error */
#define MATRIX_MEIDR_MERR6 (0x1u << 6) /**< \brief (MATRIX_MEIDR) Master 6 Access Error */
#define MATRIX_MEIDR_MERR7 (0x1u << 7) /**< \brief (MATRIX_MEIDR) Master 7 Access Error */
#define MATRIX_MEIDR_MERR8 (0x1u << 8) /**< \brief (MATRIX_MEIDR) Master 8 Access Error */
#define MATRIX_MEIDR_MERR9 (0x1u << 9) /**< \brief (MATRIX_MEIDR) Master 9 Access Error */
#define MATRIX_MEIDR_MERR10 (0x1u << 10) /**< \brief (MATRIX_MEIDR) Master 10 Access Error */
#define MATRIX_MEIDR_MERR11 (0x1u << 11) /**< \brief (MATRIX_MEIDR) Master 11 Access Error */
#define MATRIX_MEIDR_MERR12 (0x1u << 12) /**< \brief (MATRIX_MEIDR) Master 12 Access Error */
#define MATRIX_MEIDR_MERR13 (0x1u << 13) /**< \brief (MATRIX_MEIDR) Master 13 Access Error */
#define MATRIX_MEIDR_MERR14 (0x1u << 14) /**< \brief (MATRIX_MEIDR) Master 14 Access Error */
#define MATRIX_MEIDR_MERR15 (0x1u << 15) /**< \brief (MATRIX_MEIDR) Master 15 Access Error */
/* -------- MATRIX_MEIMR : (MATRIX Offset: 0x0158) Master Error Interrupt Mask Register -------- */
#define MATRIX_MEIMR_MERR0 (0x1u << 0) /**< \brief (MATRIX_MEIMR) Master 0 Access Error */
#define MATRIX_MEIMR_MERR1 (0x1u << 1) /**< \brief (MATRIX_MEIMR) Master 1 Access Error */
#define MATRIX_MEIMR_MERR2 (0x1u << 2) /**< \brief (MATRIX_MEIMR) Master 2 Access Error */
#define MATRIX_MEIMR_MERR3 (0x1u << 3) /**< \brief (MATRIX_MEIMR) Master 3 Access Error */
#define MATRIX_MEIMR_MERR4 (0x1u << 4) /**< \brief (MATRIX_MEIMR) Master 4 Access Error */
#define MATRIX_MEIMR_MERR5 (0x1u << 5) /**< \brief (MATRIX_MEIMR) Master 5 Access Error */
#define MATRIX_MEIMR_MERR6 (0x1u << 6) /**< \brief (MATRIX_MEIMR) Master 6 Access Error */
#define MATRIX_MEIMR_MERR7 (0x1u << 7) /**< \brief (MATRIX_MEIMR) Master 7 Access Error */
#define MATRIX_MEIMR_MERR8 (0x1u << 8) /**< \brief (MATRIX_MEIMR) Master 8 Access Error */
#define MATRIX_MEIMR_MERR9 (0x1u << 9) /**< \brief (MATRIX_MEIMR) Master 9 Access Error */
#define MATRIX_MEIMR_MERR10 (0x1u << 10) /**< \brief (MATRIX_MEIMR) Master 10 Access Error */
#define MATRIX_MEIMR_MERR11 (0x1u << 11) /**< \brief (MATRIX_MEIMR) Master 11 Access Error */
#define MATRIX_MEIMR_MERR12 (0x1u << 12) /**< \brief (MATRIX_MEIMR) Master 12 Access Error */
#define MATRIX_MEIMR_MERR13 (0x1u << 13) /**< \brief (MATRIX_MEIMR) Master 13 Access Error */
#define MATRIX_MEIMR_MERR14 (0x1u << 14) /**< \brief (MATRIX_MEIMR) Master 14 Access Error */
#define MATRIX_MEIMR_MERR15 (0x1u << 15) /**< \brief (MATRIX_MEIMR) Master 15 Access Error */
/* -------- MATRIX_MESR : (MATRIX Offset: 0x015C) Master Error Status Register -------- */
#define MATRIX_MESR_MERR0 (0x1u << 0) /**< \brief (MATRIX_MESR) Master 0 Access Error */
#define MATRIX_MESR_MERR1 (0x1u << 1) /**< \brief (MATRIX_MESR) Master 1 Access Error */
#define MATRIX_MESR_MERR2 (0x1u << 2) /**< \brief (MATRIX_MESR) Master 2 Access Error */
#define MATRIX_MESR_MERR3 (0x1u << 3) /**< \brief (MATRIX_MESR) Master 3 Access Error */
#define MATRIX_MESR_MERR4 (0x1u << 4) /**< \brief (MATRIX_MESR) Master 4 Access Error */
#define MATRIX_MESR_MERR5 (0x1u << 5) /**< \brief (MATRIX_MESR) Master 5 Access Error */
#define MATRIX_MESR_MERR6 (0x1u << 6) /**< \brief (MATRIX_MESR) Master 6 Access Error */
#define MATRIX_MESR_MERR7 (0x1u << 7) /**< \brief (MATRIX_MESR) Master 7 Access Error */
#define MATRIX_MESR_MERR8 (0x1u << 8) /**< \brief (MATRIX_MESR) Master 8 Access Error */
#define MATRIX_MESR_MERR9 (0x1u << 9) /**< \brief (MATRIX_MESR) Master 9 Access Error */
#define MATRIX_MESR_MERR10 (0x1u << 10) /**< \brief (MATRIX_MESR) Master 10 Access Error */
#define MATRIX_MESR_MERR11 (0x1u << 11) /**< \brief (MATRIX_MESR) Master 11 Access Error */
#define MATRIX_MESR_MERR12 (0x1u << 12) /**< \brief (MATRIX_MESR) Master 12 Access Error */
#define MATRIX_MESR_MERR13 (0x1u << 13) /**< \brief (MATRIX_MESR) Master 13 Access Error */
#define MATRIX_MESR_MERR14 (0x1u << 14) /**< \brief (MATRIX_MESR) Master 14 Access Error */
#define MATRIX_MESR_MERR15 (0x1u << 15) /**< \brief (MATRIX_MESR) Master 15 Access Error */
/* -------- MATRIX_MEAR[16] : (MATRIX Offset: 0x0160) Master 0 Error Address Register -------- */
#define MATRIX_MEAR_ERRADD_Pos 0
#define MATRIX_MEAR_ERRADD_Msk (0xffffffffu << MATRIX_MEAR_ERRADD_Pos) /**< \brief (MATRIX_MEAR[16]) Master Error Address */
/* -------- MATRIX_WPMR : (MATRIX Offset: 0x01E4) Write Protect Mode Register -------- */
#define MATRIX_WPMR_WPEN (0x1u << 0) /**< \brief (MATRIX_WPMR) Write Protection Enable */
#define MATRIX_WPMR_WPKEY_Pos 8
#define MATRIX_WPMR_WPKEY_Msk (0xffffffu << MATRIX_WPMR_WPKEY_Pos) /**< \brief (MATRIX_WPMR) Write Protection Key */
#define   MATRIX_WPMR_WPKEY_PASSWD (0x4D4154u << 8) /**< \brief (MATRIX_WPMR) Writing any other value in this field aborts the write operation of the WPEN bit.  Always reads as 0. */
/* -------- MATRIX_WPSR : (MATRIX Offset: 0x01E8) Write Protect Status Register -------- */
#define MATRIX_WPSR_WPVS (0x1u << 0) /**< \brief (MATRIX_WPSR) Write Protection Violation Status */
#define MATRIX_WPSR_WPVSRC_Pos 8
#define MATRIX_WPSR_WPVSRC_Msk (0xffffu << MATRIX_WPSR_WPVSRC_Pos) /**< \brief (MATRIX_WPSR) Write Protection Violation Source */
/* -------- MATRIX_VERSION : (MATRIX Offset: 0x01FC) Version Register -------- */
#define MATRIX_VERSION_VERSION_Pos 0
#define MATRIX_VERSION_VERSION_Msk (0xfffu << MATRIX_VERSION_VERSION_Pos) /**< \brief (MATRIX_VERSION) Matrix Version */
#define MATRIX_VERSION_MFN_Pos 16
#define MATRIX_VERSION_MFN_Msk (0x7u << MATRIX_VERSION_MFN_Pos) /**< \brief (MATRIX_VERSION) Metal Fix Number */
/* -------- MATRIX_SSR[16] : (MATRIX Offset: 0x0200) Security Slave 0 Register -------- */
#define MATRIX_SSR_LANSECH0 (0x1u << 0) /**< \brief (MATRIX_SSR[16]) Low Area Not Secured in HSELx Security Region */
#define MATRIX_SSR_LANSECH1 (0x1u << 1) /**< \brief (MATRIX_SSR[16]) Low Area Not Secured in HSELx Security Region */
#define MATRIX_SSR_LANSECH2 (0x1u << 2) /**< \brief (MATRIX_SSR[16]) Low Area Not Secured in HSELx Security Region */
#define MATRIX_SSR_LANSECH3 (0x1u << 3) /**< \brief (MATRIX_SSR[16]) Low Area Not Secured in HSELx Security Region */
#define MATRIX_SSR_LANSECH4 (0x1u << 4) /**< \brief (MATRIX_SSR[16]) Low Area Not Secured in HSELx Security Region */
#define MATRIX_SSR_LANSECH5 (0x1u << 5) /**< \brief (MATRIX_SSR[16]) Low Area Not Secured in HSELx Security Region */
#define MATRIX_SSR_LANSECH6 (0x1u << 6) /**< \brief (MATRIX_SSR[16]) Low Area Not Secured in HSELx Security Region */
#define MATRIX_SSR_LANSECH7 (0x1u << 7) /**< \brief (MATRIX_SSR[16]) Low Area Not Secured in HSELx Security Region */
#define MATRIX_SSR_RDNSECH0 (0x1u << 8) /**< \brief (MATRIX_SSR[16]) Read Not Secured for HSELx Security Region */
#define MATRIX_SSR_RDNSECH1 (0x1u << 9) /**< \brief (MATRIX_SSR[16]) Read Not Secured for HSELx Security Region */
#define MATRIX_SSR_RDNSECH2 (0x1u << 10) /**< \brief (MATRIX_SSR[16]) Read Not Secured for HSELx Security Region */
#define MATRIX_SSR_RDNSECH3 (0x1u << 11) /**< \brief (MATRIX_SSR[16]) Read Not Secured for HSELx Security Region */
#define MATRIX_SSR_RDNSECH4 (0x1u << 12) /**< \brief (MATRIX_SSR[16]) Read Not Secured for HSELx Security Region */
#define MATRIX_SSR_RDNSECH5 (0x1u << 13) /**< \brief (MATRIX_SSR[16]) Read Not Secured for HSELx Security Region */
#define MATRIX_SSR_RDNSECH6 (0x1u << 14) /**< \brief (MATRIX_SSR[16]) Read Not Secured for HSELx Security Region */
#define MATRIX_SSR_RDNSECH7 (0x1u << 15) /**< \brief (MATRIX_SSR[16]) Read Not Secured for HSELx Security Region */
#define MATRIX_SSR_WRNSECH0 (0x1u << 16) /**< \brief (MATRIX_SSR[16]) Write Not Secured for HSELx Security Region */
#define MATRIX_SSR_WRNSECH1 (0x1u << 17) /**< \brief (MATRIX_SSR[16]) Write Not Secured for HSELx Security Region */
#define MATRIX_SSR_WRNSECH2 (0x1u << 18) /**< \brief (MATRIX_SSR[16]) Write Not Secured for HSELx Security Region */
#define MATRIX_SSR_WRNSECH3 (0x1u << 19) /**< \brief (MATRIX_SSR[16]) Write Not Secured for HSELx Security Region */
#define MATRIX_SSR_WRNSECH4 (0x1u << 20) /**< \brief (MATRIX_SSR[16]) Write Not Secured for HSELx Security Region */
#define MATRIX_SSR_WRNSECH5 (0x1u << 21) /**< \brief (MATRIX_SSR[16]) Write Not Secured for HSELx Security Region */
#define MATRIX_SSR_WRNSECH6 (0x1u << 22) /**< \brief (MATRIX_SSR[16]) Write Not Secured for HSELx Security Region */
#define MATRIX_SSR_WRNSECH7 (0x1u << 23) /**< \brief (MATRIX_SSR[16]) Write Not Secured for HSELx Security Region */
/* -------- MATRIX_SASSR[16] : (MATRIX Offset: 0x0240) Security Areas Split Slave 0 Register -------- */
#define MATRIX_SASSR_SASPLIT0_Pos 0
#define MATRIX_SASSR_SASPLIT0_Msk (0xfu << MATRIX_SASSR_SASPLIT0_Pos) /**< \brief (MATRIX_SASSR[16]) Security Areas Split for HSELx Security Region */
#define MATRIX_SASSR_SASPLIT0(value) ((MATRIX_SASSR_SASPLIT0_Msk & ((value) << MATRIX_SASSR_SASPLIT0_Pos)))
#define MATRIX_SASSR_SASPLIT1_Pos 4
#define MATRIX_SASSR_SASPLIT1_Msk (0xfu << MATRIX_SASSR_SASPLIT1_Pos) /**< \brief (MATRIX_SASSR[16]) Security Areas Split for HSELx Security Region */
#define MATRIX_SASSR_SASPLIT1(value) ((MATRIX_SASSR_SASPLIT1_Msk & ((value) << MATRIX_SASSR_SASPLIT1_Pos)))
#define MATRIX_SASSR_SASPLIT2_Pos 8
#define MATRIX_SASSR_SASPLIT2_Msk (0xfu << MATRIX_SASSR_SASPLIT2_Pos) /**< \brief (MATRIX_SASSR[16]) Security Areas Split for HSELx Security Region */
#define MATRIX_SASSR_SASPLIT2(value) ((MATRIX_SASSR_SASPLIT2_Msk & ((value) << MATRIX_SASSR_SASPLIT2_Pos)))
#define MATRIX_SASSR_SASPLIT3_Pos 12
#define MATRIX_SASSR_SASPLIT3_Msk (0xfu << MATRIX_SASSR_SASPLIT3_Pos) /**< \brief (MATRIX_SASSR[16]) Security Areas Split for HSELx Security Region */
#define MATRIX_SASSR_SASPLIT3(value) ((MATRIX_SASSR_SASPLIT3_Msk & ((value) << MATRIX_SASSR_SASPLIT3_Pos)))
#define MATRIX_SASSR_SASPLIT4_Pos 16
#define MATRIX_SASSR_SASPLIT4_Msk (0xfu << MATRIX_SASSR_SASPLIT4_Pos) /**< \brief (MATRIX_SASSR[16]) Security Areas Split for HSELx Security Region */
#define MATRIX_SASSR_SASPLIT4(value) ((MATRIX_SASSR_SASPLIT4_Msk & ((value) << MATRIX_SASSR_SASPLIT4_Pos)))
#define MATRIX_SASSR_SASPLIT5_Pos 20
#define MATRIX_SASSR_SASPLIT5_Msk (0xfu << MATRIX_SASSR_SASPLIT5_Pos) /**< \brief (MATRIX_SASSR[16]) Security Areas Split for HSELx Security Region */
#define MATRIX_SASSR_SASPLIT5(value) ((MATRIX_SASSR_SASPLIT5_Msk & ((value) << MATRIX_SASSR_SASPLIT5_Pos)))
#define MATRIX_SASSR_SASPLIT6_Pos 24
#define MATRIX_SASSR_SASPLIT6_Msk (0xfu << MATRIX_SASSR_SASPLIT6_Pos) /**< \brief (MATRIX_SASSR[16]) Security Areas Split for HSELx Security Region */
#define MATRIX_SASSR_SASPLIT6(value) ((MATRIX_SASSR_SASPLIT6_Msk & ((value) << MATRIX_SASSR_SASPLIT6_Pos)))
#define MATRIX_SASSR_SASPLIT7_Pos 28
#define MATRIX_SASSR_SASPLIT7_Msk (0xfu << MATRIX_SASSR_SASPLIT7_Pos) /**< \brief (MATRIX_SASSR[16]) Security Areas Split for HSELx Security Region */
#define MATRIX_SASSR_SASPLIT7(value) ((MATRIX_SASSR_SASPLIT7_Msk & ((value) << MATRIX_SASSR_SASPLIT7_Pos)))
/* -------- MATRIX_SRTSR[16] : (MATRIX Offset: 0x0280) Security Region Top Slave 0 Register -------- */
#define MATRIX_SRTSR_SRTOP0_Pos 0
#define MATRIX_SRTSR_SRTOP0_Msk (0xfu << MATRIX_SRTSR_SRTOP0_Pos) /**< \brief (MATRIX_SRTSR[16]) HSELx Security Region Top */
#define MATRIX_SRTSR_SRTOP0(value) ((MATRIX_SRTSR_SRTOP0_Msk & ((value) << MATRIX_SRTSR_SRTOP0_Pos)))
#define MATRIX_SRTSR_SRTOP1_Pos 4
#define MATRIX_SRTSR_SRTOP1_Msk (0xfu << MATRIX_SRTSR_SRTOP1_Pos) /**< \brief (MATRIX_SRTSR[16]) HSELx Security Region Top */
#define MATRIX_SRTSR_SRTOP1(value) ((MATRIX_SRTSR_SRTOP1_Msk & ((value) << MATRIX_SRTSR_SRTOP1_Pos)))
#define MATRIX_SRTSR_SRTOP2_Pos 8
#define MATRIX_SRTSR_SRTOP2_Msk (0xfu << MATRIX_SRTSR_SRTOP2_Pos) /**< \brief (MATRIX_SRTSR[16]) HSELx Security Region Top */
#define MATRIX_SRTSR_SRTOP2(value) ((MATRIX_SRTSR_SRTOP2_Msk & ((value) << MATRIX_SRTSR_SRTOP2_Pos)))
#define MATRIX_SRTSR_SRTOP3_Pos 12
#define MATRIX_SRTSR_SRTOP3_Msk (0xfu << MATRIX_SRTSR_SRTOP3_Pos) /**< \brief (MATRIX_SRTSR[16]) HSELx Security Region Top */
#define MATRIX_SRTSR_SRTOP3(value) ((MATRIX_SRTSR_SRTOP3_Msk & ((value) << MATRIX_SRTSR_SRTOP3_Pos)))
#define MATRIX_SRTSR_SRTOP4_Pos 16
#define MATRIX_SRTSR_SRTOP4_Msk (0xfu << MATRIX_SRTSR_SRTOP4_Pos) /**< \brief (MATRIX_SRTSR[16]) HSELx Security Region Top */
#define MATRIX_SRTSR_SRTOP4(value) ((MATRIX_SRTSR_SRTOP4_Msk & ((value) << MATRIX_SRTSR_SRTOP4_Pos)))
#define MATRIX_SRTSR_SRTOP5_Pos 20
#define MATRIX_SRTSR_SRTOP5_Msk (0xfu << MATRIX_SRTSR_SRTOP5_Pos) /**< \brief (MATRIX_SRTSR[16]) HSELx Security Region Top */
#define MATRIX_SRTSR_SRTOP5(value) ((MATRIX_SRTSR_SRTOP5_Msk & ((value) << MATRIX_SRTSR_SRTOP5_Pos)))
#define MATRIX_SRTSR_SRTOP6_Pos 24
#define MATRIX_SRTSR_SRTOP6_Msk (0xfu << MATRIX_SRTSR_SRTOP6_Pos) /**< \brief (MATRIX_SRTSR[16]) HSELx Security Region Top */
#define MATRIX_SRTSR_SRTOP6(value) ((MATRIX_SRTSR_SRTOP6_Msk & ((value) << MATRIX_SRTSR_SRTOP6_Pos)))
#define MATRIX_SRTSR_SRTOP7_Pos 28
#define MATRIX_SRTSR_SRTOP7_Msk (0xfu << MATRIX_SRTSR_SRTOP7_Pos) /**< \brief (MATRIX_SRTSR[16]) HSELx Security Region Top */
#define MATRIX_SRTSR_SRTOP7(value) ((MATRIX_SRTSR_SRTOP7_Msk & ((value) << MATRIX_SRTSR_SRTOP7_Pos)))
/* -------- MATRIX_SPSELR[3] : (MATRIX Offset: 0x02C0) Security Peripheral Select 1 Register -------- */
#define MATRIX_SPSELR_NSECP0 (0x1u << 0) /**< \brief (MATRIX_SPSELR[3]) Not Secured Peripheral */
#define MATRIX_SPSELR_NSECP1 (0x1u << 1) /**< \brief (MATRIX_SPSELR[3]) Not Secured Peripheral */
#define MATRIX_SPSELR_NSECP2 (0x1u << 2) /**< \brief (MATRIX_SPSELR[3]) Not Secured Peripheral */
#define MATRIX_SPSELR_NSECP3 (0x1u << 3) /**< \brief (MATRIX_SPSELR[3]) Not Secured Peripheral */
#define MATRIX_SPSELR_NSECP4 (0x1u << 4) /**< \brief (MATRIX_SPSELR[3]) Not Secured Peripheral */
#define MATRIX_SPSELR_NSECP5 (0x1u << 5) /**< \brief (MATRIX_SPSELR[3]) Not Secured Peripheral */
#define MATRIX_SPSELR_NSECP6 (0x1u << 6) /**< \brief (MATRIX_SPSELR[3]) Not Secured Peripheral */
#define MATRIX_SPSELR_NSECP7 (0x1u << 7) /**< \brief (MATRIX_SPSELR[3]) Not Secured Peripheral */
#define MATRIX_SPSELR_NSECP8 (0x1u << 8) /**< \brief (MATRIX_SPSELR[3]) Not Secured Peripheral */
#define MATRIX_SPSELR_NSECP9 (0x1u << 9) /**< \brief (MATRIX_SPSELR[3]) Not Secured Peripheral */
#define MATRIX_SPSELR_NSECP10 (0x1u << 10) /**< \brief (MATRIX_SPSELR[3]) Not Secured Peripheral */
#define MATRIX_SPSELR_NSECP11 (0x1u << 11) /**< \brief (MATRIX_SPSELR[3]) Not Secured Peripheral */
#define MATRIX_SPSELR_NSECP12 (0x1u << 12) /**< \brief (MATRIX_SPSELR[3]) Not Secured Peripheral */
#define MATRIX_SPSELR_NSECP13 (0x1u << 13) /**< \brief (MATRIX_SPSELR[3]) Not Secured Peripheral */
#define MATRIX_SPSELR_NSECP14 (0x1u << 14) /**< \brief (MATRIX_SPSELR[3]) Not Secured Peripheral */
#define MATRIX_SPSELR_NSECP15 (0x1u << 15) /**< \brief (MATRIX_SPSELR[3]) Not Secured Peripheral */
#define MATRIX_SPSELR_NSECP16 (0x1u << 16) /**< \brief (MATRIX_SPSELR[3]) Not Secured Peripheral */
#define MATRIX_SPSELR_NSECP17 (0x1u << 17) /**< \brief (MATRIX_SPSELR[3]) Not Secured Peripheral */
#define MATRIX_SPSELR_NSECP18 (0x1u << 18) /**< \brief (MATRIX_SPSELR[3]) Not Secured Peripheral */
#define MATRIX_SPSELR_NSECP19 (0x1u << 19) /**< \brief (MATRIX_SPSELR[3]) Not Secured Peripheral */
#define MATRIX_SPSELR_NSECP20 (0x1u << 20) /**< \brief (MATRIX_SPSELR[3]) Not Secured Peripheral */
#define MATRIX_SPSELR_NSECP21 (0x1u << 21) /**< \brief (MATRIX_SPSELR[3]) Not Secured Peripheral */
#define MATRIX_SPSELR_NSECP22 (0x1u << 22) /**< \brief (MATRIX_SPSELR[3]) Not Secured Peripheral */
#define MATRIX_SPSELR_NSECP23 (0x1u << 23) /**< \brief (MATRIX_SPSELR[3]) Not Secured Peripheral */
#define MATRIX_SPSELR_NSECP24 (0x1u << 24) /**< \brief (MATRIX_SPSELR[3]) Not Secured Peripheral */
#define MATRIX_SPSELR_NSECP25 (0x1u << 25) /**< \brief (MATRIX_SPSELR[3]) Not Secured Peripheral */
#define MATRIX_SPSELR_NSECP26 (0x1u << 26) /**< \brief (MATRIX_SPSELR[3]) Not Secured Peripheral */
#define MATRIX_SPSELR_NSECP27 (0x1u << 27) /**< \brief (MATRIX_SPSELR[3]) Not Secured Peripheral */
#define MATRIX_SPSELR_NSECP28 (0x1u << 28) /**< \brief (MATRIX_SPSELR[3]) Not Secured Peripheral */
#define MATRIX_SPSELR_NSECP29 (0x1u << 29) /**< \brief (MATRIX_SPSELR[3]) Not Secured Peripheral */
#define MATRIX_SPSELR_NSECP30 (0x1u << 30) /**< \brief (MATRIX_SPSELR[3]) Not Secured Peripheral */
#define MATRIX_SPSELR_NSECP31 (0x1u << 31) /**< \brief (MATRIX_SPSELR[3]) Not Secured Peripheral */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR AHB Multi-port DDR-SDRAM Controller */
/* ============================================================================= */
/** \addtogroup SAMA5D2_MPDDRC AHB Multi-port DDR-SDRAM Controller */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief Mpddrc hardware registers */
typedef struct {
  __IO uint32_t MPDDRC_MR;              /**< \brief (Mpddrc Offset: 0x00) MPDDRC Mode Register */
  __IO uint32_t MPDDRC_RTR;             /**< \brief (Mpddrc Offset: 0x04) MPDDRC Refresh Timer Register */
  __IO uint32_t MPDDRC_CR;              /**< \brief (Mpddrc Offset: 0x08) MPDDRC Configuration Register */
  __IO uint32_t MPDDRC_TPR0;            /**< \brief (Mpddrc Offset: 0x0C) MPDDRC Timing Parameter 0 Register */
  __IO uint32_t MPDDRC_TPR1;            /**< \brief (Mpddrc Offset: 0x10) MPDDRC Timing Parameter 1 Register */
  __IO uint32_t MPDDRC_TPR2;            /**< \brief (Mpddrc Offset: 0x14) MPDDRC Timing Parameter 2 Register */
  __I  uint32_t Reserved1[1];
  __IO uint32_t MPDDRC_LPR;             /**< \brief (Mpddrc Offset: 0x1C) MPDDRC Low-power Register */
  __IO uint32_t MPDDRC_MD;              /**< \brief (Mpddrc Offset: 0x20) MPDDRC Memory Device Register */
  __IO uint32_t MPDDRC_HS;              /**< \brief (Mpddrc Offset: 0x24) MPDDRC High Speed Register */
  __IO uint32_t MPDDRC_LPDDR23_LPR;     /**< \brief (Mpddrc Offset: 0x28) MPDDRC LPDDR2-LPDDR3 Low-power Register */
  __IO uint32_t MPDDRC_LPDDR23_CAL_MR4; /**< \brief (Mpddrc Offset: 0x2C) MPDDRC LPDDR2-LPDDR3 Calibration and MR4 Register */
  __IO uint32_t MPDDRC_LPDDR23_TIM_CAL; /**< \brief (Mpddrc Offset: 0x30) MPDDRC LPDDR2-LPDDR3 Timing Calibration Register */
  __IO uint32_t MPDDRC_IO_CALIBR;       /**< \brief (Mpddrc Offset: 0x34) MPDDRC IO Calibration */
  __IO uint32_t MPDDRC_OCMS;            /**< \brief (Mpddrc Offset: 0x38) MPDDRC OCMS Register */
  __O  uint32_t MPDDRC_OCMS_KEY1;       /**< \brief (Mpddrc Offset: 0x3C) MPDDRC OCMS KEY1 Register */
  __O  uint32_t MPDDRC_OCMS_KEY2;       /**< \brief (Mpddrc Offset: 0x40) MPDDRC OCMS KEY2 Register */
  __IO uint32_t MPDDRC_CONF_ARBITER;    /**< \brief (Mpddrc Offset: 0x44) MPDDRC Configuration Arbiter Register */
  __IO uint32_t MPDDRC_TIMEOUT;         /**< \brief (Mpddrc Offset: 0x48) MPDDRC Time-out Port 0/1/2/3 Register */
  __IO uint32_t MPDDRC_REQ_PORT_0123;   /**< \brief (Mpddrc Offset: 0x4C) MPDDRC Request Port 0/1/2/3 Register */
  __IO uint32_t MPDDRC_REQ_PORT_4567;   /**< \brief (Mpddrc Offset: 0x50) MPDDRC Request Port 4/5/6/7 Register */
  __I  uint32_t MPDDRC_BDW_PORT_0123;   /**< \brief (Mpddrc Offset: 0x54) MPDDRC Bandwidth Port 0/1/2/3 Register */
  __I  uint32_t MPDDRC_BDW_PORT_4567;   /**< \brief (Mpddrc Offset: 0x58) MPDDRC Bandwidth Port 4/5/6/7 Register */
  __IO uint32_t MPDDRC_RD_DATA_PATH;    /**< \brief (Mpddrc Offset: 0x5C) MPDDRC Read Datapath Register */
  __IO uint32_t MPDDRC_MON_CONFIG;      /**< \brief (Mpddrc Offset: 0x60) MPDDRC Monitor configuration */
  __IO uint32_t MPDDRC_MON_ADDR_0;      /**< \brief (Mpddrc Offset: 0x64) MPDDRC Monitor Address High/Low port 0 */
  __IO uint32_t MPDDRC_MON_ADDR_1;      /**< \brief (Mpddrc Offset: 0x68) MPDDRC Monitor Address High/Low port 1 */
  __IO uint32_t MPDDRC_MON_ADDR_2;      /**< \brief (Mpddrc Offset: 0x6C) MPDDRC Monitor Address High/Low port 2 */
  __IO uint32_t MPDDRC_MON_ADDR_3;      /**< \brief (Mpddrc Offset: 0x70) MPDDRC Monitor Address High/Low port 3 */
  __IO uint32_t MPDDRC_MON_ADDR_4;      /**< \brief (Mpddrc Offset: 0x74) MPDDRC Monitor Address High/Low port 4 */
  __IO uint32_t MPDDRC_MON_ADDR_5;      /**< \brief (Mpddrc Offset: 0x78) MPDDRC Monitor Address High/Low port 5 */
  __IO uint32_t MPDDRC_MON_ADDR_6;      /**< \brief (Mpddrc Offset: 0x7C) MPDDRC Monitor Address High/Low port 6 */
  __IO uint32_t MPDDRC_MON_ADDR_7;      /**< \brief (Mpddrc Offset: 0x80) MPDDRC Monitor Address High/Low port 7 */
  __I  uint32_t MPDDRC_MON_INFO_0;      /**< \brief (Mpddrc Offset: 0x84) MPDDRC Monitor Information port 0 */
  __I  uint32_t MPDDRC_MON_INFO_1;      /**< \brief (Mpddrc Offset: 0x88) MPDDRC Monitor Information port 1 */
  __I  uint32_t MPDDRC_MON_INFO_2;      /**< \brief (Mpddrc Offset: 0x8C) MPDDRC Monitor Information port 2 */
  __I  uint32_t MPDDRC_MON_INFO_3;      /**< \brief (Mpddrc Offset: 0x90) MPDDRC Monitor Information port 3 */
  __I  uint32_t MPDDRC_MON_INFO_4;      /**< \brief (Mpddrc Offset: 0x94) MPDDRC Monitor Information port 4 */
  __I  uint32_t MPDDRC_MON_INFO_5;      /**< \brief (Mpddrc Offset: 0x98) MPDDRC Monitor Information port 5 */
  __I  uint32_t MPDDRC_MON_INFO_6;      /**< \brief (Mpddrc Offset: 0x9C) MPDDRC Monitor Information port 6 */
  __I  uint32_t MPDDRC_MON_INFO_7;      /**< \brief (Mpddrc Offset: 0xA0) MPDDRC Monitor Information port 7 */
  __I  uint32_t Reserved2[16];
  __IO uint32_t MPDDRC_WPMR;            /**< \brief (Mpddrc Offset: 0xE4) MPDDRC Write Protection Mode Register */
  __I  uint32_t MPDDRC_WPSR;            /**< \brief (Mpddrc Offset: 0xE8) MPDDRC Write Protection Status Register */
  __I  uint32_t MPDDRC_ADDRSIZE;        /**< \brief (Mpddrc Offset: 0xEC) MPDDRC Address Size Register */
  __I  uint32_t MPDDRC_IPNAME[2];       /**< \brief (Mpddrc Offset: 0xF0) MPDDRC IP Name 1 Register */
  __I  uint32_t MPDDRC_FEATURES;        /**< \brief (Mpddrc Offset: 0xF8) MPDDRC Features Register */
  __I  uint32_t MPDDRC_VERSION;         /**< \brief (Mpddrc Offset: 0xFC) MPDDRC Version Register */
  __IO uint32_t MPDDRC_DLL_OS;          /**< \brief (Mpddrc Offset: 0x100) MPDDRC DLL Offset Selection Register */
  __IO uint32_t MPDDRC_DLL_MAO;         /**< \brief (Mpddrc Offset: 0x104) MPDDRC DLL MASTER Offset Register */
  __IO uint32_t MPDDRC_DLL_SO0;         /**< \brief (Mpddrc Offset: 0x108) MPDDRC DLL SLAVE Offset 0 Register */
  __IO uint32_t MPDDRC_DLL_SO1;         /**< \brief (Mpddrc Offset: 0x10C) MPDDRC DLL SLAVE Offset 1 Register */
  __IO uint32_t MPDDRC_DLL_WRO;         /**< \brief (Mpddrc Offset: 0x110) MPDDRC DLL CLKWR Offset Register */
  __IO uint32_t MPDDRC_DLL_ADO;         /**< \brief (Mpddrc Offset: 0x114) MPDDRC DLL CLKAD Offset Register */
  __I  uint32_t MPDDRC_DLL_SM[4];       /**< \brief (Mpddrc Offset: 0x118) MPDDRC DLL Status MASTER0 Register */
  __I  uint32_t MPDDRC_DLL_SSL[8];      /**< \brief (Mpddrc Offset: 0x128) MPDDRC DLL Status SLAVE0 Register */
  __I  uint32_t MPDDRC_DLL_SWR[4];      /**< \brief (Mpddrc Offset: 0x148) MPDDRC DLL Status CLKWR0 Register */
  __I  uint32_t MPDDRC_DLL_SAD;         /**< \brief (Mpddrc Offset: 0x158) MPDDRC DLL Status CLKAD Register */
  __I  uint32_t Reserved3[29];
  __O  uint32_t MPDDRC_DLL_BC;          /**< \brief (Mpddrc Offset: 0x1D0) MPDDRC DLL BIST Control Register */
  __I  uint32_t MPDDRC_DLL_BS;          /**< \brief (Mpddrc Offset: 0x1D4) MPDDRC DLL BIST Status Register */
  __I  uint32_t Reserved4[9];
  __I  uint32_t MPDDRC_DLL_REVISION;    /**< \brief (Mpddrc Offset: 0x1FC) MPDDRC DLL Revision Register */
} Mpddrc;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- MPDDRC_MR : (MPDDRC Offset: 0x00) MPDDRC Mode Register -------- */
#define MPDDRC_MR_MODE_Pos 0
#define MPDDRC_MR_MODE_Msk (0x7u << MPDDRC_MR_MODE_Pos) /**< \brief (MPDDRC_MR) MPDDRC Command Mode */
#define   MPDDRC_MR_MODE_NORMAL_CMD (0x0u << 0) /**< \brief (MPDDRC_MR) Normal Mode. Any access to the MPDDRC is decoded normally. To activate this mode, the command must be followed by a write to the DDR-SDRAM. */
#define   MPDDRC_MR_MODE_NOP_CMD (0x1u << 0) /**< \brief (MPDDRC_MR) The MPDDRC issues a NOP command when the DDR-SDRAM device is accessed regardless of the cycle. To activate this mode, the command must be followed by a write to the DDR-SDRAM. */
#define   MPDDRC_MR_MODE_PRCGALL_CMD (0x2u << 0) /**< \brief (MPDDRC_MR) The MPDDRC issues the All Banks Precharge command when the DDR-SDRAM device is accessed regardless of the cycle. To activate this mode, the command must be followed by a write to the SDRAM. */
#define   MPDDRC_MR_MODE_LMR_CMD (0x3u << 0) /**< \brief (MPDDRC_MR) The MPDDRC issues a Load Mode Register command when the DDR-SDRAM device is accessed regardless of the cycle. To activate this mode, the command must be followed by a write to the DDR-SDRAM. */
#define   MPDDRC_MR_MODE_RFSH_CMD (0x4u << 0) /**< \brief (MPDDRC_MR) The MPDDRC issues an Auto-Refresh command when the DDR-SDRAM device is accessed regardless of the cycle. Previously, an All Banks Precharge command must be issued. To activate this mode, the command must be followed by a write to the DDR-SDRAM. */
#define   MPDDRC_MR_MODE_EXT_LMR_CMD (0x5u << 0) /**< \brief (MPDDRC_MR) The MPDDRC issues an Extended Load Mode Register command when the SDRAM device is accessed regardless of the cycle. To activate this mode, the command must be followed by a write to the DDR-SDRAM. The write in the DDR-SDRAM must be done in the appropriate bank. */
#define   MPDDRC_MR_MODE_DEEP_CALIB_MD (0x6u << 0) /**< \brief (MPDDRC_MR) Deep power mode: Access to deep power-down modeCalibration command:t o calibrate RTT and RON values for the process voltagetemperature (PVT) ( DDR3-SDRAM device) */
#define   MPDDRC_MR_MODE_LPDDR2_LPDDR3_CMD (0x7u << 0) /**< \brief (MPDDRC_MR) The MPDDRC issues an LPDDR2/LPDDR3 Mode Register command when the device is accessed regardless of the cycle. To activate this mode, the Mode Register command must be followed by a write to the low-power DDR2-SDRAM or to the low-power DDR3-SDRAM . */
#define MPDDRC_MR_DAI (0x1u << 4) /**< \brief (MPDDRC_MR) Device Auto-Initialization Status */
#define   MPDDRC_MR_DAI_DAI_COMPLETE (0x0u << 4) /**< \brief (MPDDRC_MR) DAI complete */
#define   MPDDRC_MR_DAI_DAI_IN_PROGESSS (0x1u << 4) /**< \brief (MPDDRC_MR) DAI still in progress */
#define MPDDRC_MR_MRS_Pos 8
#define MPDDRC_MR_MRS_Msk (0xffu << MPDDRC_MR_MRS_Pos) /**< \brief (MPDDRC_MR) Mode Register Select LPDDR2/LPDDR3 */
#define MPDDRC_MR_MRS(value) ((MPDDRC_MR_MRS_Msk & ((value) << MPDDRC_MR_MRS_Pos)))
/* -------- MPDDRC_RTR : (MPDDRC Offset: 0x04) MPDDRC Refresh Timer Register -------- */
#define MPDDRC_RTR_COUNT_Pos 0
#define MPDDRC_RTR_COUNT_Msk (0xfffu << MPDDRC_RTR_COUNT_Pos) /**< \brief (MPDDRC_RTR) MPDDRC Refresh Timer Count */
#define MPDDRC_RTR_COUNT(value) ((MPDDRC_RTR_COUNT_Msk & ((value) << MPDDRC_RTR_COUNT_Pos)))
#define MPDDRC_RTR_ADJ_REF (0x1u << 16) /**< \brief (MPDDRC_RTR) Adjust Refresh Rate */
#define MPDDRC_RTR_REF_PB (0x1u << 17) /**< \brief (MPDDRC_RTR) Refresh Per Bank */
#define MPDDRC_RTR_MR4_VALUE_Pos 20
#define MPDDRC_RTR_MR4_VALUE_Msk (0x7u << MPDDRC_RTR_MR4_VALUE_Pos) /**< \brief (MPDDRC_RTR) Content of MR4 Register */
#define MPDDRC_RTR_MR4_VALUE(value) ((MPDDRC_RTR_MR4_VALUE_Msk & ((value) << MPDDRC_RTR_MR4_VALUE_Pos)))
/* -------- MPDDRC_CR : (MPDDRC Offset: 0x08) MPDDRC Configuration Register -------- */
#define MPDDRC_CR_NC_Pos 0
#define MPDDRC_CR_NC_Msk (0x3u << MPDDRC_CR_NC_Pos) /**< \brief (MPDDRC_CR) Number of Column Bits */
#define   MPDDRC_CR_NC_9_COL_BITS (0x0u << 0) /**< \brief (MPDDRC_CR) 9 bits to define the column number, up to 512 columns */
#define   MPDDRC_CR_NC_10_COL_BITS (0x1u << 0) /**< \brief (MPDDRC_CR) 10 bits to define the column number, up to 1024 columns */
#define   MPDDRC_CR_NC_11_COL_BITS (0x2u << 0) /**< \brief (MPDDRC_CR) 11 bits to define the column number, up to 2048 columns */
#define   MPDDRC_CR_NC_12_COL_BITS (0x3u << 0) /**< \brief (MPDDRC_CR) 12 bits to define the column number, up to 4096 columns */
#define MPDDRC_CR_NR_Pos 2
#define MPDDRC_CR_NR_Msk (0x3u << MPDDRC_CR_NR_Pos) /**< \brief (MPDDRC_CR) Number of Row Bits */
#define   MPDDRC_CR_NR_11_ROW_BITS (0x0u << 2) /**< \brief (MPDDRC_CR) 11 bits to define the row number, up to 2048 rows */
#define   MPDDRC_CR_NR_12_ROW_BITS (0x1u << 2) /**< \brief (MPDDRC_CR) 12 bits to define the row number, up to 4096 rows */
#define   MPDDRC_CR_NR_13_ROW_BITS (0x2u << 2) /**< \brief (MPDDRC_CR) 13 bits to define the row number, up to 8192 rows */
#define   MPDDRC_CR_NR_14_ROW_BITS (0x3u << 2) /**< \brief (MPDDRC_CR) 14 bits to define the row number, up to 16384 rows */
#define MPDDRC_CR_CAS_Pos 4
#define MPDDRC_CR_CAS_Msk (0x7u << MPDDRC_CR_CAS_Pos) /**< \brief (MPDDRC_CR) CAS Latency */
#define   MPDDRC_CR_CAS_DDR_CAS2 (0x2u << 4) /**< \brief (MPDDRC_CR) LPDDR1 CAS Latency 2 */
#define   MPDDRC_CR_CAS_DDR_CAS3 (0x3u << 4) /**< \brief (MPDDRC_CR) LPDDR3/DDR2/LPDDR2/LPDDR1 CAS Latency 3 */
#define   MPDDRC_CR_CAS_DDR_CAS4 (0x4u << 4) /**< \brief (MPDDRC_CR) DDR2/LPDDR2 CAS Latency 4 */
#define   MPDDRC_CR_CAS_DDR_CAS5 (0x5u << 4) /**< \brief (MPDDRC_CR) DDR2/LPDDR2 CAS Latency 5 */
#define   MPDDRC_CR_CAS_DDR_CAS6 (0x6u << 4) /**< \brief (MPDDRC_CR) DDR2 CAS Latency 6 */
#define MPDDRC_CR_DLL (0x1u << 7) /**< \brief (MPDDRC_CR) Reset DLL */
#define   MPDDRC_CR_DLL_RESET_DISABLED (0x0u << 7) /**< \brief (MPDDRC_CR) Disable DLL reset */
#define   MPDDRC_CR_DLL_RESET_ENABLED (0x1u << 7) /**< \brief (MPDDRC_CR) Enable DLL reset */
#define MPDDRC_CR_DIC_DS (0x1u << 8) /**< \brief (MPDDRC_CR) Output Driver Impedance Control (Drive Strength) */
#define   MPDDRC_CR_DIC_DS_DDR2_NORMALSTRENGTH_DDR3_RZQ6 (0x0u << 8) /**< \brief (MPDDRC_CR) Normal driver strength (DDR2)- RZQ/6 (40 [NOM], DDR3 ) */
#define   MPDDRC_CR_DIC_DS_DDR2_WEAKSTRENGTH_DDR3_RZQ7 (0x1u << 8) /**< \brief (MPDDRC_CR) Weak driver strength (DDR2) - RZQ/7 (34 [NOM],DDR3) */
#define MPDDRC_CR_DIS_DLL (0x1u << 9) /**< \brief (MPDDRC_CR) DISABLE DLL */
#define MPDDRC_CR_ZQ_Pos 10
#define MPDDRC_CR_ZQ_Msk (0x3u << MPDDRC_CR_ZQ_Pos) /**< \brief (MPDDRC_CR) ZQ Calibration */
#define   MPDDRC_CR_ZQ_INIT (0x0u << 10) /**< \brief (MPDDRC_CR) Calibration command after initialization */
#define   MPDDRC_CR_ZQ_LONG (0x1u << 10) /**< \brief (MPDDRC_CR) Long calibration */
#define   MPDDRC_CR_ZQ_SHORT (0x2u << 10) /**< \brief (MPDDRC_CR) Short calibration */
#define   MPDDRC_CR_ZQ_RESET (0x3u << 10) /**< \brief (MPDDRC_CR) ZQ Reset */
#define MPDDRC_CR_OCD_Pos 12
#define MPDDRC_CR_OCD_Msk (0x7u << MPDDRC_CR_OCD_Pos) /**< \brief (MPDDRC_CR) Off-chip Driver */
#define   MPDDRC_CR_OCD_DDR2_EXITCALIB (0x0u << 12) /**< \brief (MPDDRC_CR) Exit from OCD calibration mode and maintain settings */
#define   MPDDRC_CR_OCD_DDR2_DEFAULT_CALIB (0x7u << 12) /**< \brief (MPDDRC_CR) OCD calibration default */
#define MPDDRC_CR_DQMS (0x1u << 16) /**< \brief (MPDDRC_CR) Mask Data is Shared */
#define   MPDDRC_CR_DQMS_NOT_SHARED (0x0u << 16) /**< \brief (MPDDRC_CR) DQM is not shared with another controller */
#define   MPDDRC_CR_DQMS_SHARED (0x1u << 16) /**< \brief (MPDDRC_CR) DQM is shared with another controller */
#define MPDDRC_CR_ENRDM (0x1u << 17) /**< \brief (MPDDRC_CR) Enable Read Measure */
#define   MPDDRC_CR_ENRDM_OFF (0x0u << 17) /**< \brief (MPDDRC_CR) DQS/DDR_DATA phase error correction is disabled */
#define   MPDDRC_CR_ENRDM_ON (0x1u << 17) /**< \brief (MPDDRC_CR) DQS/DDR_DATA phase error correction is enabled */
#define MPDDRC_CR_LC_LPDDR1 (0x1u << 19) /**< \brief (MPDDRC_CR) Low-cost Low-power DDR1 */
#define   MPDDRC_CR_LC_LPDDR1_NOT_2_BANKS (0x0u << 19) /**< \brief (MPDDRC_CR) Any type of memory devices except of low cost, low density Low Power DDR1. */
#define   MPDDRC_CR_LC_LPDDR1_2_BANKS_LPDDR1 (0x1u << 19) /**< \brief (MPDDRC_CR) Low-cost and low-density low-power DDR1. These devices have a density of 32 Mbits and are organized as two internal banks. To use this feature, the user has to define the type of memory and the data bus width (see "MPDDRC Memory Device Register" on page 62).The 16-bit memory device is organized as 2 banks, 9 columns and 11 rows. */
#define MPDDRC_CR_NB (0x1u << 20) /**< \brief (MPDDRC_CR) Number of Banks */
#define   MPDDRC_CR_NB_4_BANKS (0x0u << 20) /**< \brief (MPDDRC_CR) 4 banks memory devices */
#define   MPDDRC_CR_NB_8_BANKS (0x1u << 20) /**< \brief (MPDDRC_CR) 8 banks. Only possible when using the DDR2-SDRAM and low-power DDR2-SDRAM and DDR3-SDRAM and low-power DDR3-SDRAM devices. */
#define MPDDRC_CR_NDQS (0x1u << 21) /**< \brief (MPDDRC_CR) Not DQS */
#define   MPDDRC_CR_NDQS_ENABLED (0x0u << 21) /**< \brief (MPDDRC_CR) Not DQS is enabled */
#define   MPDDRC_CR_NDQS_DISABLED (0x1u << 21) /**< \brief (MPDDRC_CR) Not DQS is disabled */
#define MPDDRC_CR_DECOD (0x1u << 22) /**< \brief (MPDDRC_CR) Type of Decoding */
#define   MPDDRC_CR_DECOD_SEQUENTIAL (0x0u << 22) /**< \brief (MPDDRC_CR) Method for address mapping where banks alternate at each last DDR-SDRAM page of the current bank. */
#define   MPDDRC_CR_DECOD_INTERLEAVED (0x1u << 22) /**< \brief (MPDDRC_CR) Method for address mapping where banks alternate at each SDRAM end page of the current bank. */
#define MPDDRC_CR_UNAL (0x1u << 23) /**< \brief (MPDDRC_CR) Support Unaligned Access */
#define   MPDDRC_CR_UNAL_UNSUPPORTED (0x0u << 23) /**< \brief (MPDDRC_CR) Unaligned access is not supported. */
#define   MPDDRC_CR_UNAL_SUPPORTED (0x1u << 23) /**< \brief (MPDDRC_CR) Unaligned access is supported. */
/* -------- MPDDRC_TPR0 : (MPDDRC Offset: 0x0C) MPDDRC Timing Parameter 0 Register -------- */
#define MPDDRC_TPR0_TRAS_Pos 0
#define MPDDRC_TPR0_TRAS_Msk (0xfu << MPDDRC_TPR0_TRAS_Pos) /**< \brief (MPDDRC_TPR0) Active to Precharge Delay */
#define MPDDRC_TPR0_TRAS(value) ((MPDDRC_TPR0_TRAS_Msk & ((value) << MPDDRC_TPR0_TRAS_Pos)))
#define MPDDRC_TPR0_TRCD_Pos 4
#define MPDDRC_TPR0_TRCD_Msk (0xfu << MPDDRC_TPR0_TRCD_Pos) /**< \brief (MPDDRC_TPR0) Row to Column Delay */
#define MPDDRC_TPR0_TRCD(value) ((MPDDRC_TPR0_TRCD_Msk & ((value) << MPDDRC_TPR0_TRCD_Pos)))
#define MPDDRC_TPR0_TWR_Pos 8
#define MPDDRC_TPR0_TWR_Msk (0xfu << MPDDRC_TPR0_TWR_Pos) /**< \brief (MPDDRC_TPR0) Write Recovery Delay */
#define MPDDRC_TPR0_TWR(value) ((MPDDRC_TPR0_TWR_Msk & ((value) << MPDDRC_TPR0_TWR_Pos)))
#define MPDDRC_TPR0_TRC_Pos 12
#define MPDDRC_TPR0_TRC_Msk (0xfu << MPDDRC_TPR0_TRC_Pos) /**< \brief (MPDDRC_TPR0) Row Cycle Delay */
#define MPDDRC_TPR0_TRC(value) ((MPDDRC_TPR0_TRC_Msk & ((value) << MPDDRC_TPR0_TRC_Pos)))
#define MPDDRC_TPR0_TRP_Pos 16
#define MPDDRC_TPR0_TRP_Msk (0xfu << MPDDRC_TPR0_TRP_Pos) /**< \brief (MPDDRC_TPR0) Row Precharge Delay */
#define MPDDRC_TPR0_TRP(value) ((MPDDRC_TPR0_TRP_Msk & ((value) << MPDDRC_TPR0_TRP_Pos)))
#define MPDDRC_TPR0_TRRD_Pos 20
#define MPDDRC_TPR0_TRRD_Msk (0xfu << MPDDRC_TPR0_TRRD_Pos) /**< \brief (MPDDRC_TPR0) Active BankA to Active BankB */
#define MPDDRC_TPR0_TRRD(value) ((MPDDRC_TPR0_TRRD_Msk & ((value) << MPDDRC_TPR0_TRRD_Pos)))
#define MPDDRC_TPR0_TWTR_Pos 24
#define MPDDRC_TPR0_TWTR_Msk (0x7u << MPDDRC_TPR0_TWTR_Pos) /**< \brief (MPDDRC_TPR0) Internal Write to Read Delay */
#define MPDDRC_TPR0_TWTR(value) ((MPDDRC_TPR0_TWTR_Msk & ((value) << MPDDRC_TPR0_TWTR_Pos)))
#define MPDDRC_TPR0_RDC_WRRD (0x1u << 27) /**< \brief (MPDDRC_TPR0) Reduce Write to Read Delay */
#define MPDDRC_TPR0_TMRD_Pos 28
#define MPDDRC_TPR0_TMRD_Msk (0xfu << MPDDRC_TPR0_TMRD_Pos) /**< \brief (MPDDRC_TPR0) Load Mode Register Command to Activate or Refresh Command */
#define MPDDRC_TPR0_TMRD(value) ((MPDDRC_TPR0_TMRD_Msk & ((value) << MPDDRC_TPR0_TMRD_Pos)))
/* -------- MPDDRC_TPR1 : (MPDDRC Offset: 0x10) MPDDRC Timing Parameter 1 Register -------- */
#define MPDDRC_TPR1_TRFC_Pos 0
#define MPDDRC_TPR1_TRFC_Msk (0x7fu << MPDDRC_TPR1_TRFC_Pos) /**< \brief (MPDDRC_TPR1) Row Cycle Delay */
#define MPDDRC_TPR1_TRFC(value) ((MPDDRC_TPR1_TRFC_Msk & ((value) << MPDDRC_TPR1_TRFC_Pos)))
#define MPDDRC_TPR1_TXSNR_Pos 8
#define MPDDRC_TPR1_TXSNR_Msk (0xffu << MPDDRC_TPR1_TXSNR_Pos) /**< \brief (MPDDRC_TPR1) Exit Self-refresh Delay to Non Read Command */
#define MPDDRC_TPR1_TXSNR(value) ((MPDDRC_TPR1_TXSNR_Msk & ((value) << MPDDRC_TPR1_TXSNR_Pos)))
#define MPDDRC_TPR1_TXSRD_Pos 16
#define MPDDRC_TPR1_TXSRD_Msk (0xffu << MPDDRC_TPR1_TXSRD_Pos) /**< \brief (MPDDRC_TPR1) Exit Self-refresh Delay to Read Command */
#define MPDDRC_TPR1_TXSRD(value) ((MPDDRC_TPR1_TXSRD_Msk & ((value) << MPDDRC_TPR1_TXSRD_Pos)))
#define MPDDRC_TPR1_TXP_Pos 24
#define MPDDRC_TPR1_TXP_Msk (0xfu << MPDDRC_TPR1_TXP_Pos) /**< \brief (MPDDRC_TPR1) Exit Power-down Delay to First Command */
#define MPDDRC_TPR1_TXP(value) ((MPDDRC_TPR1_TXP_Msk & ((value) << MPDDRC_TPR1_TXP_Pos)))
/* -------- MPDDRC_TPR2 : (MPDDRC Offset: 0x14) MPDDRC Timing Parameter 2 Register -------- */
#define MPDDRC_TPR2_TXARD_Pos 0
#define MPDDRC_TPR2_TXARD_Msk (0xfu << MPDDRC_TPR2_TXARD_Pos) /**< \brief (MPDDRC_TPR2) Exit Active Power Down Delay to Read Command in Mode "Fast Exit" */
#define MPDDRC_TPR2_TXARD(value) ((MPDDRC_TPR2_TXARD_Msk & ((value) << MPDDRC_TPR2_TXARD_Pos)))
#define MPDDRC_TPR2_TXARDS_Pos 4
#define MPDDRC_TPR2_TXARDS_Msk (0xfu << MPDDRC_TPR2_TXARDS_Pos) /**< \brief (MPDDRC_TPR2) Exit Active Power Down Delay to Read Command in Mode "Slow Exit" */
#define MPDDRC_TPR2_TXARDS(value) ((MPDDRC_TPR2_TXARDS_Msk & ((value) << MPDDRC_TPR2_TXARDS_Pos)))
#define MPDDRC_TPR2_TRPA_Pos 8
#define MPDDRC_TPR2_TRPA_Msk (0xfu << MPDDRC_TPR2_TRPA_Pos) /**< \brief (MPDDRC_TPR2) Row Precharge All Delay */
#define MPDDRC_TPR2_TRPA(value) ((MPDDRC_TPR2_TRPA_Msk & ((value) << MPDDRC_TPR2_TRPA_Pos)))
#define MPDDRC_TPR2_TRTP_Pos 12
#define MPDDRC_TPR2_TRTP_Msk (0x7u << MPDDRC_TPR2_TRTP_Pos) /**< \brief (MPDDRC_TPR2) Read to Precharge */
#define MPDDRC_TPR2_TRTP(value) ((MPDDRC_TPR2_TRTP_Msk & ((value) << MPDDRC_TPR2_TRTP_Pos)))
#define MPDDRC_TPR2_TFAW_Pos 16
#define MPDDRC_TPR2_TFAW_Msk (0xfu << MPDDRC_TPR2_TFAW_Pos) /**< \brief (MPDDRC_TPR2) Four Active Windows */
#define MPDDRC_TPR2_TFAW(value) ((MPDDRC_TPR2_TFAW_Msk & ((value) << MPDDRC_TPR2_TFAW_Pos)))
/* -------- MPDDRC_LPR : (MPDDRC Offset: 0x1C) MPDDRC Low-power Register -------- */
#define MPDDRC_LPR_LPCB_Pos 0
#define MPDDRC_LPR_LPCB_Msk (0x3u << MPDDRC_LPR_LPCB_Pos) /**< \brief (MPDDRC_LPR) Low-power Command Bit */
#define   MPDDRC_LPR_LPCB_NOLOWPOWER (0x0u << 0) /**< \brief (MPDDRC_LPR) Low-power feature is inhibited. No power-down, self-refresh and deep-power modes are issued to the DDR-SDRAM device. */
#define   MPDDRC_LPR_LPCB_SELFREFRESH (0x1u << 0) /**< \brief (MPDDRC_LPR) The MPDDRC issues a self-refresh command to the DDR-SDRAM device, the clock(s) is/are deactivated and the CKE signal is set low. The DDR-SDRAM device leaves the self-refresh mode when accessed and reenters it after the access. */
#define   MPDDRC_LPR_LPCB_POWERDOWN (0x2u << 0) /**< \brief (MPDDRC_LPR) The MPDDRC issues a Power-down command to the DDR-SDRAM device after each access, the CKE signal is set low. The DDR-SDRAM device leaves the power-down mode when accessed and reenters it after the access. */
#define   MPDDRC_LPR_LPCB_DEEPPOWERDOWN (0x3u << 0) /**< \brief (MPDDRC_LPR) The MPDDRC issues a Deep Power-down command to the low-power DDR-SDRAM device. */
#define MPDDRC_LPR_CLK_FR (0x1u << 2) /**< \brief (MPDDRC_LPR) Clock Frozen Command Bit */
#define   MPDDRC_LPR_CLK_FR_DISABLED (0x0u << 2) /**< \brief (MPDDRC_LPR) Clock(s) is/are not frozen */
#define   MPDDRC_LPR_CLK_FR_ENABLED (0x1u << 2) /**< \brief (MPDDRC_LPR) Clock(s) is/are frozen. */
#define MPDDRC_LPR_LPDDR2_LPDDR3_PWOFF (0x1u << 3) /**< \brief (MPDDRC_LPR) LPDDR2 - LPDDR3 Power Off Bit */
#define   MPDDRC_LPR_LPDDR2_LPDDR3_PWOFF_DISABLED (0x0u << 3) /**< \brief (MPDDRC_LPR) No power off sequence applied to LPDDR2/LPDDR3. */
#define   MPDDRC_LPR_LPDDR2_LPDDR3_PWOFF_ENABLED (0x1u << 3) /**< \brief (MPDDRC_LPR) A power off sequence is applied to the LPDDR2/LPDDR3 device. CKE is forced low. */
#define MPDDRC_LPR_PASR_Pos 4
#define MPDDRC_LPR_PASR_Msk (0x7u << MPDDRC_LPR_PASR_Pos) /**< \brief (MPDDRC_LPR) Partial Array Self-refresh */
#define MPDDRC_LPR_PASR(value) ((MPDDRC_LPR_PASR_Msk & ((value) << MPDDRC_LPR_PASR_Pos)))
#define MPDDRC_LPR_DS_Pos 8
#define MPDDRC_LPR_DS_Msk (0x7u << MPDDRC_LPR_DS_Pos) /**< \brief (MPDDRC_LPR) Drive Strength */
#define MPDDRC_LPR_DS(value) ((MPDDRC_LPR_DS_Msk & ((value) << MPDDRC_LPR_DS_Pos)))
#define MPDDRC_LPR_TIMEOUT_Pos 12
#define MPDDRC_LPR_TIMEOUT_Msk (0x3u << MPDDRC_LPR_TIMEOUT_Pos) /**< \brief (MPDDRC_LPR) Time Between Last Transfer and Low Power Mode */
#define   MPDDRC_LPR_TIMEOUT_NONE (0x0u << 12) /**< \brief (MPDDRC_LPR) SDRAM low-power mode is activated immediately after the end of the last transfer. */
#define   MPDDRC_LPR_TIMEOUT_DELAY_64_CLK (0x1u << 12) /**< \brief (MPDDRC_LPR) SDRAM low-power mode is activated 64 clock cycles after the end of the last transfer. */
#define   MPDDRC_LPR_TIMEOUT_DELAY_128_CLK (0x2u << 12) /**< \brief (MPDDRC_LPR) SDRAM low-power mode is activated 128 clock cycles after the end of the last transfer. */
#define MPDDRC_LPR_APDE (0x1u << 16) /**< \brief (MPDDRC_LPR) Active Power Down Exit Time */
#define   MPDDRC_LPR_APDE_DDR2_FAST_EXIT (0x0u << 16) /**< \brief (MPDDRC_LPR) Fast Exit from Power Down. DDR2-SDRAM and DDR3-SDRAMdevices only. */
#define   MPDDRC_LPR_APDE_DDR2_SLOW_EXIT (0x1u << 16) /**< \brief (MPDDRC_LPR) Slow Exit from Power Down. DDR2-SDRAM and DDR3-SDRAM devices only. */
#define MPDDRC_LPR_UPD_MR_Pos 20
#define MPDDRC_LPR_UPD_MR_Msk (0x3u << MPDDRC_LPR_UPD_MR_Pos) /**< \brief (MPDDRC_LPR) Update Load Mode Register and Extended Mode Register */
#define   MPDDRC_LPR_UPD_MR_NO_UPDATE (0x0u << 20) /**< \brief (MPDDRC_LPR) Update of Load Mode and Extended Mode registers is disabled. */
#define   MPDDRC_LPR_UPD_MR_UPDATE_SHAREDBUS (0x1u << 20) /**< \brief (MPDDRC_LPR) MPDDRC shares an external bus. Automatic update is done during a refresh command and a pending read or write access in the SDRAM device. */
#define   MPDDRC_LPR_UPD_MR_UPDATE_NOSHAREDBUS (0x2u << 20) /**< \brief (MPDDRC_LPR) MPDDRC does not share an external bus. Automatic update is done before entering in self-refresh mode. */
#define MPDDRC_LPR_CHG_FRQ (0x1u << 24) /**< \brief (MPDDRC_LPR) Change Clock Frequency During Self -Refresh Mode */
#define MPDDRC_LPR_SELF_DONE (0x1u << 25) /**< \brief (MPDDRC_LPR) Self-refesh is done, */
/* -------- MPDDRC_MD : (MPDDRC Offset: 0x20) MPDDRC Memory Device Register -------- */
#define MPDDRC_MD_MD_Pos 0
#define MPDDRC_MD_MD_Msk (0x7u << MPDDRC_MD_MD_Pos) /**< \brief (MPDDRC_MD) Memory Device */
#define   MPDDRC_MD_MD_LPDDR_SDRAM (0x3u << 0) /**< \brief (MPDDRC_MD) Low-power DDR1-SDRAM */
#define   MPDDRC_MD_MD_DDR3_SDRAM (0x4u << 0) /**< \brief (MPDDRC_MD) DDR3-SDRAM */
#define   MPDDRC_MD_MD_LPDDR3_SDRAM (0x5u << 0) /**< \brief (MPDDRC_MD) Low-power DDR3-SDRAM */
#define   MPDDRC_MD_MD_DDR2_SDRAM (0x6u << 0) /**< \brief (MPDDRC_MD) DDR2-SDRAM */
#define   MPDDRC_MD_MD_LPDDR2_SDRAM (0x7u << 0) /**< \brief (MPDDRC_MD) Low-power DDR2-SDRAM */
#define MPDDRC_MD_DBW (0x1u << 4) /**< \brief (MPDDRC_MD) Data Bus Width */
#define   MPDDRC_MD_DBW_DBW_32_BITS (0x0u << 4) /**< \brief (MPDDRC_MD) Data bus width is 32 bits */
#define   MPDDRC_MD_DBW_DBW_16_BITS (0x1u << 4) /**< \brief (MPDDRC_MD) Data bus width is 16 bits. */
#define MPDDRC_MD_WL (0x1u << 5) /**< \brief (MPDDRC_MD) Write Latency */
#define   MPDDRC_MD_WL_WL_SETA (0x0u << 5) /**< \brief (MPDDRC_MD) Write Latency Set A */
#define   MPDDRC_MD_WL_WL_SETB (0x1u << 5) /**< \brief (MPDDRC_MD) Write Latency Set B */
#define MPDDRC_MD_RL3 (0x1u << 6) /**< \brief (MPDDRC_MD) Read Latency 3 Option Support */
#define   MPDDRC_MD_RL3_RL3_SUPPORT (0x0u << 6) /**< \brief (MPDDRC_MD) Read latency of 3 is supported */
#define   MPDDRC_MD_RL3_RL3_NOT_SUPPORTED (0x1u << 6) /**< \brief (MPDDRC_MD) Read latency 0f 3 is not supported */
#define MPDDRC_MD_MANU_ID_Pos 8
#define MPDDRC_MD_MANU_ID_Msk (0xffu << MPDDRC_MD_MANU_ID_Pos) /**< \brief (MPDDRC_MD) Manufacturer Identification */
#define MPDDRC_MD_MANU_ID(value) ((MPDDRC_MD_MANU_ID_Msk & ((value) << MPDDRC_MD_MANU_ID_Pos)))
#define MPDDRC_MD_REV_ID_Pos 16
#define MPDDRC_MD_REV_ID_Msk (0xffu << MPDDRC_MD_REV_ID_Pos) /**< \brief (MPDDRC_MD) revision identification */
#define MPDDRC_MD_REV_ID(value) ((MPDDRC_MD_REV_ID_Msk & ((value) << MPDDRC_MD_REV_ID_Pos)))
#define MPDDRC_MD_TYPE_Pos 24
#define MPDDRC_MD_TYPE_Msk (0x3u << MPDDRC_MD_TYPE_Pos) /**< \brief (MPDDRC_MD) DRAM architecture */
#define   MPDDRC_MD_TYPE_S4_SDRAM (0x0u << 24) /**< \brief (MPDDRC_MD) 4n prefetch architecture */
#define   MPDDRC_MD_TYPE_S2_SDRAM (0x1u << 24) /**< \brief (MPDDRC_MD) 2n prefetch architecture */
#define   MPDDRC_MD_TYPE_NVM (0x2u << 24) /**< \brief (MPDDRC_MD) Non Volatile device */
#define   MPDDRC_MD_TYPE_S8_SDRAM (0x3u << 24) /**< \brief (MPDDRC_MD) 8n prefetch architecture */
#define MPDDRC_MD_DENSITY_Pos 26
#define MPDDRC_MD_DENSITY_Msk (0xfu << MPDDRC_MD_DENSITY_Pos) /**< \brief (MPDDRC_MD) density of the memory */
#define   MPDDRC_MD_DENSITY_DENSITY_64MBITS (0x0u << 26) /**< \brief (MPDDRC_MD) the device density is 64 Mbits */
#define   MPDDRC_MD_DENSITY_DENSITY_128MBITS (0x1u << 26) /**< \brief (MPDDRC_MD) the device density is 128 Mbits */
#define   MPDDRC_MD_DENSITY_DENSITY_256MBITS (0x2u << 26) /**< \brief (MPDDRC_MD) the device density is 256 Mbits */
#define   MPDDRC_MD_DENSITY_DENSITY_512MBITS (0x3u << 26) /**< \brief (MPDDRC_MD) the device density is 512 Mbits */
#define   MPDDRC_MD_DENSITY_DENSITY_1GBITS (0x4u << 26) /**< \brief (MPDDRC_MD) the device density is 1Gbits */
#define   MPDDRC_MD_DENSITY_DENSITY_2GBITS (0x5u << 26) /**< \brief (MPDDRC_MD) the device density is 2 Gbits */
#define   MPDDRC_MD_DENSITY_DENSITY_4GBITS (0x6u << 26) /**< \brief (MPDDRC_MD) the device density is 4 Gbits */
#define   MPDDRC_MD_DENSITY_DENSITY_8GBITS (0x7u << 26) /**< \brief (MPDDRC_MD) the device density is 8 Gbits */
#define   MPDDRC_MD_DENSITY_DENSITY_16GBITS (0x8u << 26) /**< \brief (MPDDRC_MD) the device density is 16 Gbits */
#define   MPDDRC_MD_DENSITY_DENSITY_32GBITS (0x9u << 26) /**< \brief (MPDDRC_MD) the device density is 32 Gbits */
#define MPDDRC_MD_IO_WIDTH_Pos 30
#define MPDDRC_MD_IO_WIDTH_Msk (0x3u << MPDDRC_MD_IO_WIDTH_Pos) /**< \brief (MPDDRC_MD) width of the memory */
#define   MPDDRC_MD_IO_WIDTH_WIDTH_32 (0x0u << 30) /**< \brief (MPDDRC_MD) Data bus width is 32 bits */
#define   MPDDRC_MD_IO_WIDTH_WIDTH_16 (0x1u << 30) /**< \brief (MPDDRC_MD) Data bus width is 16bits */
#define   MPDDRC_MD_IO_WIDTH_WIDTH_8 (0x2u << 30) /**< \brief (MPDDRC_MD) Data bus width is 8 bits */
#define   MPDDRC_MD_IO_WIDTH_NOT_USED (0x3u << 30) /**< \brief (MPDDRC_MD)   */
/* -------- MPDDRC_HS : (MPDDRC Offset: 0x24) MPDDRC High Speed Register -------- */
#define MPDDRC_HS_DIS_ANTICIP_READ (0x1u << 2) /**< \brief (MPDDRC_HS) Disable Anticip Read Access */
#define MPDDRC_HS_EN_CALIB (0x1u << 5) /**< \brief (MPDDRC_HS) Enable of the Calibration */
#define   MPDDRC_HS_EN_CALIB_DISABLE_CALIBRATION (0x0u << 5) /**< \brief (MPDDRC_HS) Calibration is disabled. */
#define   MPDDRC_HS_EN_CALIB_ENABLE_CALIBRATION (0x1u << 5) /**< \brief (MPDDRC_HS) Calibration is enabled. */
/* -------- MPDDRC_LPDDR23_LPR : (MPDDRC Offset: 0x28) MPDDRC LPDDR2-LPDDR3 Low-power Register -------- */
#define MPDDRC_LPDDR23_LPR_BK_MASK_PASR_Pos 0
#define MPDDRC_LPDDR23_LPR_BK_MASK_PASR_Msk (0xffu << MPDDRC_LPDDR23_LPR_BK_MASK_PASR_Pos) /**< \brief (MPDDRC_LPDDR23_LPR) Bank Mask Bit/PASR */
#define MPDDRC_LPDDR23_LPR_BK_MASK_PASR(value) ((MPDDRC_LPDDR23_LPR_BK_MASK_PASR_Msk & ((value) << MPDDRC_LPDDR23_LPR_BK_MASK_PASR_Pos)))
#define MPDDRC_LPDDR23_LPR_SEG_MASK_Pos 8
#define MPDDRC_LPDDR23_LPR_SEG_MASK_Msk (0xffffu << MPDDRC_LPDDR23_LPR_SEG_MASK_Pos) /**< \brief (MPDDRC_LPDDR23_LPR) Segment Mask Bit */
#define MPDDRC_LPDDR23_LPR_SEG_MASK(value) ((MPDDRC_LPDDR23_LPR_SEG_MASK_Msk & ((value) << MPDDRC_LPDDR23_LPR_SEG_MASK_Pos)))
#define MPDDRC_LPDDR23_LPR_DS_Pos 24
#define MPDDRC_LPDDR23_LPR_DS_Msk (0xfu << MPDDRC_LPDDR23_LPR_DS_Pos) /**< \brief (MPDDRC_LPDDR23_LPR) Drive Strength */
#define MPDDRC_LPDDR23_LPR_DS(value) ((MPDDRC_LPDDR23_LPR_DS_Msk & ((value) << MPDDRC_LPDDR23_LPR_DS_Pos)))
#define MPDDRC_LPDDR23_LPR_SR_Pos 28
#define MPDDRC_LPDDR23_LPR_SR_Msk (0xfu << MPDDRC_LPDDR23_LPR_SR_Pos) /**< \brief (MPDDRC_LPDDR23_LPR) Slew Rate */
#define MPDDRC_LPDDR23_LPR_SR(value) ((MPDDRC_LPDDR23_LPR_SR_Msk & ((value) << MPDDRC_LPDDR23_LPR_SR_Pos)))
/* -------- MPDDRC_LPDDR23_CAL_MR4 : (MPDDRC Offset: 0x2C) MPDDRC LPDDR2-LPDDR3 Calibration and MR4 Register -------- */
#define MPDDRC_LPDDR23_CAL_MR4_COUNT_CAL_Pos 0
#define MPDDRC_LPDDR23_CAL_MR4_COUNT_CAL_Msk (0xffffu << MPDDRC_LPDDR23_CAL_MR4_COUNT_CAL_Pos) /**< \brief (MPDDRC_LPDDR23_CAL_MR4) LPDDR2 Calibration Timer Count */
#define MPDDRC_LPDDR23_CAL_MR4_COUNT_CAL(value) ((MPDDRC_LPDDR23_CAL_MR4_COUNT_CAL_Msk & ((value) << MPDDRC_LPDDR23_CAL_MR4_COUNT_CAL_Pos)))
#define MPDDRC_LPDDR23_CAL_MR4_MR4_READ_Pos 16
#define MPDDRC_LPDDR23_CAL_MR4_MR4_READ_Msk (0xffffu << MPDDRC_LPDDR23_CAL_MR4_MR4_READ_Pos) /**< \brief (MPDDRC_LPDDR23_CAL_MR4) Mode Register 4 Read Interval */
#define MPDDRC_LPDDR23_CAL_MR4_MR4_READ(value) ((MPDDRC_LPDDR23_CAL_MR4_MR4_READ_Msk & ((value) << MPDDRC_LPDDR23_CAL_MR4_MR4_READ_Pos)))
/* -------- MPDDRC_LPDDR23_TIM_CAL : (MPDDRC Offset: 0x30) MPDDRC LPDDR2-LPDDR3 Timing Calibration Register -------- */
#define MPDDRC_LPDDR23_TIM_CAL_ZQCS_Pos 0
#define MPDDRC_LPDDR23_TIM_CAL_ZQCS_Msk (0xffu << MPDDRC_LPDDR23_TIM_CAL_ZQCS_Pos) /**< \brief (MPDDRC_LPDDR23_TIM_CAL) ZQ Calibration Short */
#define MPDDRC_LPDDR23_TIM_CAL_ZQCS(value) ((MPDDRC_LPDDR23_TIM_CAL_ZQCS_Msk & ((value) << MPDDRC_LPDDR23_TIM_CAL_ZQCS_Pos)))
#define MPDDRC_LPDDR23_TIM_CAL_RZQI_Pos 16
#define MPDDRC_LPDDR23_TIM_CAL_RZQI_Msk (0x3u << MPDDRC_LPDDR23_TIM_CAL_RZQI_Pos) /**< \brief (MPDDRC_LPDDR23_TIM_CAL) Built-in self test for RZQ information */
#define MPDDRC_LPDDR23_TIM_CAL_RZQI(value) ((MPDDRC_LPDDR23_TIM_CAL_RZQI_Msk & ((value) << MPDDRC_LPDDR23_TIM_CAL_RZQI_Pos)))
/* -------- MPDDRC_IO_CALIBR : (MPDDRC Offset: 0x34) MPDDRC IO Calibration -------- */
#define MPDDRC_IO_CALIBR_RDIV_Pos 0
#define MPDDRC_IO_CALIBR_RDIV_Msk (0x7u << MPDDRC_IO_CALIBR_RDIV_Pos) /**< \brief (MPDDRC_IO_CALIBR) Resistor Divider, Output Driver Impedance */
#define   MPDDRC_IO_CALIBR_RDIV_RZQ_34 (0x1u << 0) /**< \brief (MPDDRC_IO_CALIBR) LPDDR2 RZQ = 34.3 ohms, DDR2/LPDDR1: Not applicable */
#define   MPDDRC_IO_CALIBR_RDIV_RZQ_40_RZQ_33_3 (0x2u << 0) /**< \brief (MPDDRC_IO_CALIBR) LPDDR2:RZQ = 40 ohms, DDR2/LPDDR1: RZQ = 33.3 ohms */
#define   MPDDRC_IO_CALIBR_RDIV_RZQ_48_RZQ_40 (0x3u << 0) /**< \brief (MPDDRC_IO_CALIBR) LPDDR2:RZQ = 48 ohms, DDR2/LPDDR1: RZQ = 40 ohms */
#define   MPDDRC_IO_CALIBR_RDIV_RZQ_60_RZQ_50 (0x4u << 0) /**< \brief (MPDDRC_IO_CALIBR) LPDDR2:RZQ = 60 ohms, DDR2/LPDDR1: RZQ = 50 ohms */
#define   MPDDRC_IO_CALIBR_RDIV_RZQ_80_RZQ_66_7 (0x6u << 0) /**< \brief (MPDDRC_IO_CALIBR) LPDDR2: RZQ = 80 ohms, DDR2/LPDDR1: RZQ = 66.7 ohms */
#define   MPDDRC_IO_CALIBR_RDIV_RZQ_120_RZQ_100 (0x7u << 0) /**< \brief (MPDDRC_IO_CALIBR) LPDDR2:RZQ = 120 ohms, DDR2/LPDDR1: RZQ = 100 ohms */
#define MPDDRC_IO_CALIBR_EN_CALIB (0x1u << 4) /**< \brief (MPDDRC_IO_CALIBR) Enable of the Calibration */
#define   MPDDRC_IO_CALIBR_EN_CALIB_DISABLE_CALIBRATION (0x0u << 4) /**< \brief (MPDDRC_IO_CALIBR) Calibration is disabled. */
#define   MPDDRC_IO_CALIBR_EN_CALIB_ENABLE_CALIBRATION (0x1u << 4) /**< \brief (MPDDRC_IO_CALIBR) Calibration is enabled. */
#define MPDDRC_IO_CALIBR_TZQIO_Pos 8
#define MPDDRC_IO_CALIBR_TZQIO_Msk (0x7u << MPDDRC_IO_CALIBR_TZQIO_Pos) /**< \brief (MPDDRC_IO_CALIBR) IO Calibration */
#define MPDDRC_IO_CALIBR_TZQIO(value) ((MPDDRC_IO_CALIBR_TZQIO_Msk & ((value) << MPDDRC_IO_CALIBR_TZQIO_Pos)))
#define MPDDRC_IO_CALIBR_CALCODEP_Pos 16
#define MPDDRC_IO_CALIBR_CALCODEP_Msk (0xfu << MPDDRC_IO_CALIBR_CALCODEP_Pos) /**< \brief (MPDDRC_IO_CALIBR) Number of Transistor P */
#define MPDDRC_IO_CALIBR_CALCODEP(value) ((MPDDRC_IO_CALIBR_CALCODEP_Msk & ((value) << MPDDRC_IO_CALIBR_CALCODEP_Pos)))
#define MPDDRC_IO_CALIBR_CALCODEN_Pos 20
#define MPDDRC_IO_CALIBR_CALCODEN_Msk (0xfu << MPDDRC_IO_CALIBR_CALCODEN_Pos) /**< \brief (MPDDRC_IO_CALIBR) Number of Transistor N */
#define MPDDRC_IO_CALIBR_CALCODEN(value) ((MPDDRC_IO_CALIBR_CALCODEN_Msk & ((value) << MPDDRC_IO_CALIBR_CALCODEN_Pos)))
/* -------- MPDDRC_OCMS : (MPDDRC Offset: 0x38) MPDDRC OCMS Register -------- */
#define MPDDRC_OCMS_SCR_EN (0x1u << 0) /**< \brief (MPDDRC_OCMS) Scrambling Enable */
/* -------- MPDDRC_OCMS_KEY1 : (MPDDRC Offset: 0x3C) MPDDRC OCMS KEY1 Register -------- */
#define MPDDRC_OCMS_KEY1_KEY1_Pos 0
#define MPDDRC_OCMS_KEY1_KEY1_Msk (0xffffffffu << MPDDRC_OCMS_KEY1_KEY1_Pos) /**< \brief (MPDDRC_OCMS_KEY1) Off-chip Memory Scrambling (OCMS) Key Part 1 */
#define MPDDRC_OCMS_KEY1_KEY1(value) ((MPDDRC_OCMS_KEY1_KEY1_Msk & ((value) << MPDDRC_OCMS_KEY1_KEY1_Pos)))
/* -------- MPDDRC_OCMS_KEY2 : (MPDDRC Offset: 0x40) MPDDRC OCMS KEY2 Register -------- */
#define MPDDRC_OCMS_KEY2_KEY2_Pos 0
#define MPDDRC_OCMS_KEY2_KEY2_Msk (0xffffffffu << MPDDRC_OCMS_KEY2_KEY2_Pos) /**< \brief (MPDDRC_OCMS_KEY2) Off-chip Memory Scrambling (OCMS) Key Part 2 */
#define MPDDRC_OCMS_KEY2_KEY2(value) ((MPDDRC_OCMS_KEY2_KEY2_Msk & ((value) << MPDDRC_OCMS_KEY2_KEY2_Pos)))
/* -------- MPDDRC_CONF_ARBITER : (MPDDRC Offset: 0x44) MPDDRC Configuration Arbiter Register -------- */
#define MPDDRC_CONF_ARBITER_ARB_Pos 0
#define MPDDRC_CONF_ARBITER_ARB_Msk (0x3u << MPDDRC_CONF_ARBITER_ARB_Pos) /**< \brief (MPDDRC_CONF_ARBITER) Type of Arbitration */
#define   MPDDRC_CONF_ARBITER_ARB_ROUND (0x0u << 0) /**< \brief (MPDDRC_CONF_ARBITER) Round Robin */
#define   MPDDRC_CONF_ARBITER_ARB_NB_REQUEST (0x1u << 0) /**< \brief (MPDDRC_CONF_ARBITER) Request Policy */
#define   MPDDRC_CONF_ARBITER_ARB_BANDWIDTH (0x2u << 0) /**< \brief (MPDDRC_CONF_ARBITER) Bandwidth Policy */
#define MPDDRC_CONF_ARBITER_BDW_MAX_CUR (0x1u << 3) /**< \brief (MPDDRC_CONF_ARBITER) Bandwidth Max or Current */
#define MPDDRC_CONF_ARBITER_RQ_WD_P0 (0x1u << 8) /**< \brief (MPDDRC_CONF_ARBITER) Request or Word from Port X */
#define MPDDRC_CONF_ARBITER_RQ_WD_P1 (0x1u << 9) /**< \brief (MPDDRC_CONF_ARBITER) Request or Word from Port X */
#define MPDDRC_CONF_ARBITER_RQ_WD_P2 (0x1u << 10) /**< \brief (MPDDRC_CONF_ARBITER) Request or Word from Port X */
#define MPDDRC_CONF_ARBITER_RQ_WD_P3 (0x1u << 11) /**< \brief (MPDDRC_CONF_ARBITER) Request or Word from Port X */
#define MPDDRC_CONF_ARBITER_RQ_WD_P4 (0x1u << 12) /**< \brief (MPDDRC_CONF_ARBITER) Request or Word from Port X */
#define MPDDRC_CONF_ARBITER_RQ_WD_P5 (0x1u << 13) /**< \brief (MPDDRC_CONF_ARBITER) Request or Word from Port X */
#define MPDDRC_CONF_ARBITER_RQ_WD_P6 (0x1u << 14) /**< \brief (MPDDRC_CONF_ARBITER) Request or Word from Port X */
#define MPDDRC_CONF_ARBITER_RQ_WD_P7 (0x1u << 15) /**< \brief (MPDDRC_CONF_ARBITER) Request or Word from Port X */
#define MPDDRC_CONF_ARBITER_MA_PR_P0 (0x1u << 16) /**< \brief (MPDDRC_CONF_ARBITER) Master or Software Provide Information */
#define MPDDRC_CONF_ARBITER_MA_PR_P1 (0x1u << 17) /**< \brief (MPDDRC_CONF_ARBITER) Master or Software Provide Information */
#define MPDDRC_CONF_ARBITER_MA_PR_P2 (0x1u << 18) /**< \brief (MPDDRC_CONF_ARBITER) Master or Software Provide Information */
#define MPDDRC_CONF_ARBITER_MA_PR_P3 (0x1u << 19) /**< \brief (MPDDRC_CONF_ARBITER) Master or Software Provide Information */
#define MPDDRC_CONF_ARBITER_MA_PR_P4 (0x1u << 20) /**< \brief (MPDDRC_CONF_ARBITER) Master or Software Provide Information */
#define MPDDRC_CONF_ARBITER_MA_PR_P5 (0x1u << 21) /**< \brief (MPDDRC_CONF_ARBITER) Master or Software Provide Information */
#define MPDDRC_CONF_ARBITER_MA_PR_P6 (0x1u << 22) /**< \brief (MPDDRC_CONF_ARBITER) Master or Software Provide Information */
#define MPDDRC_CONF_ARBITER_MA_PR_P7 (0x1u << 23) /**< \brief (MPDDRC_CONF_ARBITER) Master or Software Provide Information */
#define MPDDRC_CONF_ARBITER_BDW_BURST_P0 (0x1u << 24) /**< \brief (MPDDRC_CONF_ARBITER) Bandwidth is Reached or Bandwidth and Current Burst Access is Ended on port X */
#define MPDDRC_CONF_ARBITER_BDW_BURST_P1 (0x1u << 25) /**< \brief (MPDDRC_CONF_ARBITER) Bandwidth is Reached or Bandwidth and Current Burst Access is Ended on port X */
#define MPDDRC_CONF_ARBITER_BDW_BURST_P2 (0x1u << 26) /**< \brief (MPDDRC_CONF_ARBITER) Bandwidth is Reached or Bandwidth and Current Burst Access is Ended on port X */
#define MPDDRC_CONF_ARBITER_BDW_BURST_P3 (0x1u << 27) /**< \brief (MPDDRC_CONF_ARBITER) Bandwidth is Reached or Bandwidth and Current Burst Access is Ended on port X */
#define MPDDRC_CONF_ARBITER_BDW_BURST_P4 (0x1u << 28) /**< \brief (MPDDRC_CONF_ARBITER) Bandwidth is Reached or Bandwidth and Current Burst Access is Ended on port X */
#define MPDDRC_CONF_ARBITER_BDW_BURST_P5 (0x1u << 29) /**< \brief (MPDDRC_CONF_ARBITER) Bandwidth is Reached or Bandwidth and Current Burst Access is Ended on port X */
#define MPDDRC_CONF_ARBITER_BDW_BURST_P6 (0x1u << 30) /**< \brief (MPDDRC_CONF_ARBITER) Bandwidth is Reached or Bandwidth and Current Burst Access is Ended on port X */
#define MPDDRC_CONF_ARBITER_BDW_BURST_P7 (0x1u << 31) /**< \brief (MPDDRC_CONF_ARBITER) Bandwidth is Reached or Bandwidth and Current Burst Access is Ended on port X */
/* -------- MPDDRC_TIMEOUT : (MPDDRC Offset: 0x48) MPDDRC Time-out Port 0/1/2/3 Register -------- */
#define MPDDRC_TIMEOUT_TIMEOUT_P0_Pos 0
#define MPDDRC_TIMEOUT_TIMEOUT_P0_Msk (0xfu << MPDDRC_TIMEOUT_TIMEOUT_P0_Pos) /**< \brief (MPDDRC_TIMEOUT) Time-out for Ports 0, 1, 2, 3, 4, 5, 6 and 7 */
#define MPDDRC_TIMEOUT_TIMEOUT_P0(value) ((MPDDRC_TIMEOUT_TIMEOUT_P0_Msk & ((value) << MPDDRC_TIMEOUT_TIMEOUT_P0_Pos)))
#define MPDDRC_TIMEOUT_TIMEOUT_P1_Pos 4
#define MPDDRC_TIMEOUT_TIMEOUT_P1_Msk (0xfu << MPDDRC_TIMEOUT_TIMEOUT_P1_Pos) /**< \brief (MPDDRC_TIMEOUT) Time-out for Ports 0, 1, 2, 3, 4, 5, 6 and 7 */
#define MPDDRC_TIMEOUT_TIMEOUT_P1(value) ((MPDDRC_TIMEOUT_TIMEOUT_P1_Msk & ((value) << MPDDRC_TIMEOUT_TIMEOUT_P1_Pos)))
#define MPDDRC_TIMEOUT_TIMEOUT_P2_Pos 8
#define MPDDRC_TIMEOUT_TIMEOUT_P2_Msk (0xfu << MPDDRC_TIMEOUT_TIMEOUT_P2_Pos) /**< \brief (MPDDRC_TIMEOUT) Time-out for Ports 0, 1, 2, 3, 4, 5, 6 and 7 */
#define MPDDRC_TIMEOUT_TIMEOUT_P2(value) ((MPDDRC_TIMEOUT_TIMEOUT_P2_Msk & ((value) << MPDDRC_TIMEOUT_TIMEOUT_P2_Pos)))
#define MPDDRC_TIMEOUT_TIMEOUT_P3_Pos 12
#define MPDDRC_TIMEOUT_TIMEOUT_P3_Msk (0xfu << MPDDRC_TIMEOUT_TIMEOUT_P3_Pos) /**< \brief (MPDDRC_TIMEOUT) Time-out for Ports 0, 1, 2, 3, 4, 5, 6 and 7 */
#define MPDDRC_TIMEOUT_TIMEOUT_P3(value) ((MPDDRC_TIMEOUT_TIMEOUT_P3_Msk & ((value) << MPDDRC_TIMEOUT_TIMEOUT_P3_Pos)))
#define MPDDRC_TIMEOUT_TIMEOUT_P4_Pos 16
#define MPDDRC_TIMEOUT_TIMEOUT_P4_Msk (0xfu << MPDDRC_TIMEOUT_TIMEOUT_P4_Pos) /**< \brief (MPDDRC_TIMEOUT) Time-out for Ports 0, 1, 2, 3, 4, 5, 6 and 7 */
#define MPDDRC_TIMEOUT_TIMEOUT_P4(value) ((MPDDRC_TIMEOUT_TIMEOUT_P4_Msk & ((value) << MPDDRC_TIMEOUT_TIMEOUT_P4_Pos)))
#define MPDDRC_TIMEOUT_TIMEOUT_P5_Pos 20
#define MPDDRC_TIMEOUT_TIMEOUT_P5_Msk (0xfu << MPDDRC_TIMEOUT_TIMEOUT_P5_Pos) /**< \brief (MPDDRC_TIMEOUT) Time-out for Ports 0, 1, 2, 3, 4, 5, 6 and 7 */
#define MPDDRC_TIMEOUT_TIMEOUT_P5(value) ((MPDDRC_TIMEOUT_TIMEOUT_P5_Msk & ((value) << MPDDRC_TIMEOUT_TIMEOUT_P5_Pos)))
#define MPDDRC_TIMEOUT_TIMEOUT_P6_Pos 24
#define MPDDRC_TIMEOUT_TIMEOUT_P6_Msk (0xfu << MPDDRC_TIMEOUT_TIMEOUT_P6_Pos) /**< \brief (MPDDRC_TIMEOUT) Time-out for Ports 0, 1, 2, 3, 4, 5, 6 and 7 */
#define MPDDRC_TIMEOUT_TIMEOUT_P6(value) ((MPDDRC_TIMEOUT_TIMEOUT_P6_Msk & ((value) << MPDDRC_TIMEOUT_TIMEOUT_P6_Pos)))
#define MPDDRC_TIMEOUT_TIMEOUT_P7_Pos 28
#define MPDDRC_TIMEOUT_TIMEOUT_P7_Msk (0xfu << MPDDRC_TIMEOUT_TIMEOUT_P7_Pos) /**< \brief (MPDDRC_TIMEOUT) Time-out for Ports 0, 1, 2, 3, 4, 5, 6 and 7 */
#define MPDDRC_TIMEOUT_TIMEOUT_P7(value) ((MPDDRC_TIMEOUT_TIMEOUT_P7_Msk & ((value) << MPDDRC_TIMEOUT_TIMEOUT_P7_Pos)))
/* -------- MPDDRC_REQ_PORT_0123 : (MPDDRC Offset: 0x4C) MPDDRC Request Port 0/1/2/3 Register -------- */
#define MPDDRC_REQ_PORT_0123_NRQ_NWD_BDW_P0_Pos 0
#define MPDDRC_REQ_PORT_0123_NRQ_NWD_BDW_P0_Msk (0xffu << MPDDRC_REQ_PORT_0123_NRQ_NWD_BDW_P0_Pos) /**< \brief (MPDDRC_REQ_PORT_0123) Number of Requests, Number of Words or Bandwidth Allocation from Port 0-1-2-3 */
#define MPDDRC_REQ_PORT_0123_NRQ_NWD_BDW_P0(value) ((MPDDRC_REQ_PORT_0123_NRQ_NWD_BDW_P0_Msk & ((value) << MPDDRC_REQ_PORT_0123_NRQ_NWD_BDW_P0_Pos)))
#define MPDDRC_REQ_PORT_0123_NRQ_NWD_BDW_P1_Pos 8
#define MPDDRC_REQ_PORT_0123_NRQ_NWD_BDW_P1_Msk (0xffu << MPDDRC_REQ_PORT_0123_NRQ_NWD_BDW_P1_Pos) /**< \brief (MPDDRC_REQ_PORT_0123) Number of Requests, Number of Words or Bandwidth Allocation from Port 0-1-2-3 */
#define MPDDRC_REQ_PORT_0123_NRQ_NWD_BDW_P1(value) ((MPDDRC_REQ_PORT_0123_NRQ_NWD_BDW_P1_Msk & ((value) << MPDDRC_REQ_PORT_0123_NRQ_NWD_BDW_P1_Pos)))
#define MPDDRC_REQ_PORT_0123_NRQ_NWD_BDW_P2_Pos 16
#define MPDDRC_REQ_PORT_0123_NRQ_NWD_BDW_P2_Msk (0xffu << MPDDRC_REQ_PORT_0123_NRQ_NWD_BDW_P2_Pos) /**< \brief (MPDDRC_REQ_PORT_0123) Number of Requests, Number of Words or Bandwidth Allocation from Port 0-1-2-3 */
#define MPDDRC_REQ_PORT_0123_NRQ_NWD_BDW_P2(value) ((MPDDRC_REQ_PORT_0123_NRQ_NWD_BDW_P2_Msk & ((value) << MPDDRC_REQ_PORT_0123_NRQ_NWD_BDW_P2_Pos)))
#define MPDDRC_REQ_PORT_0123_NRQ_NWD_BDW_P3_Pos 24
#define MPDDRC_REQ_PORT_0123_NRQ_NWD_BDW_P3_Msk (0xffu << MPDDRC_REQ_PORT_0123_NRQ_NWD_BDW_P3_Pos) /**< \brief (MPDDRC_REQ_PORT_0123) Number of Requests, Number of Words or Bandwidth Allocation from Port 0-1-2-3 */
#define MPDDRC_REQ_PORT_0123_NRQ_NWD_BDW_P3(value) ((MPDDRC_REQ_PORT_0123_NRQ_NWD_BDW_P3_Msk & ((value) << MPDDRC_REQ_PORT_0123_NRQ_NWD_BDW_P3_Pos)))
/* -------- MPDDRC_REQ_PORT_4567 : (MPDDRC Offset: 0x50) MPDDRC Request Port 4/5/6/7 Register -------- */
#define MPDDRC_REQ_PORT_4567_NRQ_NWD_BDW_P4_Pos 0
#define MPDDRC_REQ_PORT_4567_NRQ_NWD_BDW_P4_Msk (0xffu << MPDDRC_REQ_PORT_4567_NRQ_NWD_BDW_P4_Pos) /**< \brief (MPDDRC_REQ_PORT_4567) Number of Requests, Number of Words or Bandwidth allocation from port 4-5-6-7 */
#define MPDDRC_REQ_PORT_4567_NRQ_NWD_BDW_P4(value) ((MPDDRC_REQ_PORT_4567_NRQ_NWD_BDW_P4_Msk & ((value) << MPDDRC_REQ_PORT_4567_NRQ_NWD_BDW_P4_Pos)))
#define MPDDRC_REQ_PORT_4567_NRQ_NWD_BDW_P5_Pos 8
#define MPDDRC_REQ_PORT_4567_NRQ_NWD_BDW_P5_Msk (0xffu << MPDDRC_REQ_PORT_4567_NRQ_NWD_BDW_P5_Pos) /**< \brief (MPDDRC_REQ_PORT_4567) Number of Requests, Number of Words or Bandwidth allocation from port 4-5-6-7 */
#define MPDDRC_REQ_PORT_4567_NRQ_NWD_BDW_P5(value) ((MPDDRC_REQ_PORT_4567_NRQ_NWD_BDW_P5_Msk & ((value) << MPDDRC_REQ_PORT_4567_NRQ_NWD_BDW_P5_Pos)))
#define MPDDRC_REQ_PORT_4567_NRQ_NWD_BDW_P6_Pos 16
#define MPDDRC_REQ_PORT_4567_NRQ_NWD_BDW_P6_Msk (0xffu << MPDDRC_REQ_PORT_4567_NRQ_NWD_BDW_P6_Pos) /**< \brief (MPDDRC_REQ_PORT_4567) Number of Requests, Number of Words or Bandwidth allocation from port 4-5-6-7 */
#define MPDDRC_REQ_PORT_4567_NRQ_NWD_BDW_P6(value) ((MPDDRC_REQ_PORT_4567_NRQ_NWD_BDW_P6_Msk & ((value) << MPDDRC_REQ_PORT_4567_NRQ_NWD_BDW_P6_Pos)))
#define MPDDRC_REQ_PORT_4567_NRQ_NWD_BDW_P7_Pos 24
#define MPDDRC_REQ_PORT_4567_NRQ_NWD_BDW_P7_Msk (0xffu << MPDDRC_REQ_PORT_4567_NRQ_NWD_BDW_P7_Pos) /**< \brief (MPDDRC_REQ_PORT_4567) Number of Requests, Number of Words or Bandwidth allocation from port 4-5-6-7 */
#define MPDDRC_REQ_PORT_4567_NRQ_NWD_BDW_P7(value) ((MPDDRC_REQ_PORT_4567_NRQ_NWD_BDW_P7_Msk & ((value) << MPDDRC_REQ_PORT_4567_NRQ_NWD_BDW_P7_Pos)))
/* -------- MPDDRC_BDW_PORT_0123 : (MPDDRC Offset: 0x54) MPDDRC Bandwidth Port 0/1/2/3 Register -------- */
#define MPDDRC_BDW_PORT_0123_BDW_P0_Pos 0
#define MPDDRC_BDW_PORT_0123_BDW_P0_Msk (0x7fu << MPDDRC_BDW_PORT_0123_BDW_P0_Pos) /**< \brief (MPDDRC_BDW_PORT_0123) Current/Maximum Bandwidth from Port 0-1-2-3 */
#define MPDDRC_BDW_PORT_0123_BDW_P1_Pos 8
#define MPDDRC_BDW_PORT_0123_BDW_P1_Msk (0x7fu << MPDDRC_BDW_PORT_0123_BDW_P1_Pos) /**< \brief (MPDDRC_BDW_PORT_0123) Current/Maximum Bandwidth from Port 0-1-2-3 */
#define MPDDRC_BDW_PORT_0123_BDW_P2_Pos 16
#define MPDDRC_BDW_PORT_0123_BDW_P2_Msk (0x7fu << MPDDRC_BDW_PORT_0123_BDW_P2_Pos) /**< \brief (MPDDRC_BDW_PORT_0123) Current/Maximum Bandwidth from Port 0-1-2-3 */
#define MPDDRC_BDW_PORT_0123_BDW_P3_Pos 24
#define MPDDRC_BDW_PORT_0123_BDW_P3_Msk (0x7fu << MPDDRC_BDW_PORT_0123_BDW_P3_Pos) /**< \brief (MPDDRC_BDW_PORT_0123) Current/Maximum Bandwidth from Port 0-1-2-3 */
/* -------- MPDDRC_BDW_PORT_4567 : (MPDDRC Offset: 0x58) MPDDRC Bandwidth Port 4/5/6/7 Register -------- */
#define MPDDRC_BDW_PORT_4567_BDW_P4_Pos 0
#define MPDDRC_BDW_PORT_4567_BDW_P4_Msk (0x7fu << MPDDRC_BDW_PORT_4567_BDW_P4_Pos) /**< \brief (MPDDRC_BDW_PORT_4567) Current/Maximum Bandwidth from Port 4-5-6-7 */
#define MPDDRC_BDW_PORT_4567_BDW_P5_Pos 8
#define MPDDRC_BDW_PORT_4567_BDW_P5_Msk (0x7fu << MPDDRC_BDW_PORT_4567_BDW_P5_Pos) /**< \brief (MPDDRC_BDW_PORT_4567) Current/Maximum Bandwidth from Port 4-5-6-7 */
#define MPDDRC_BDW_PORT_4567_BDW_P6_Pos 16
#define MPDDRC_BDW_PORT_4567_BDW_P6_Msk (0x7fu << MPDDRC_BDW_PORT_4567_BDW_P6_Pos) /**< \brief (MPDDRC_BDW_PORT_4567) Current/Maximum Bandwidth from Port 4-5-6-7 */
#define MPDDRC_BDW_PORT_4567_BDW_P7_Pos 24
#define MPDDRC_BDW_PORT_4567_BDW_P7_Msk (0x7fu << MPDDRC_BDW_PORT_4567_BDW_P7_Pos) /**< \brief (MPDDRC_BDW_PORT_4567) Current/Maximum Bandwidth from Port 4-5-6-7 */
/* -------- MPDDRC_RD_DATA_PATH : (MPDDRC Offset: 0x5C) MPDDRC Read Datapath Register -------- */
#define MPDDRC_RD_DATA_PATH_SHIFT_SAMPLING_Pos 0
#define MPDDRC_RD_DATA_PATH_SHIFT_SAMPLING_Msk (0x3u << MPDDRC_RD_DATA_PATH_SHIFT_SAMPLING_Pos) /**< \brief (MPDDRC_RD_DATA_PATH) Shift Sampling Point of Data */
#define   MPDDRC_RD_DATA_PATH_SHIFT_SAMPLING_NO_SHIFT (0x0u << 0) /**< \brief (MPDDRC_RD_DATA_PATH) Initial sampling point. */
#define   MPDDRC_RD_DATA_PATH_SHIFT_SAMPLING_SHIFT_ONE_CYCLE (0x1u << 0) /**< \brief (MPDDRC_RD_DATA_PATH) Sampling point is shifted by one cycle. */
#define   MPDDRC_RD_DATA_PATH_SHIFT_SAMPLING_SHIFT_TWO_CYCLES (0x2u << 0) /**< \brief (MPDDRC_RD_DATA_PATH) Sampling point is shifted by two cycles. */
#define   MPDDRC_RD_DATA_PATH_SHIFT_SAMPLING_SHIFT_THREE_CYCLES (0x3u << 0) /**< \brief (MPDDRC_RD_DATA_PATH) Sampling point is shifted by three cycles, unique for LPDDR2 , DDR3 and LPDDR3.Not applicable for the DDR2 and LPDDR1devices. */
/* -------- MPDDRC_MON_CONFIG : (MPDDRC Offset: 0x60) MPDDRC Monitor configuration -------- */
#define MPDDRC_MON_CONFIG_EN_MONI (0x1u << 0) /**< \brief (MPDDRC_MON_CONFIG) Enable monitor */
#define MPDDRC_MON_CONFIG_SOFT_RESET (0x1u << 1) /**< \brief (MPDDRC_MON_CONFIG) Soft Reset */
#define MPDDRC_MON_CONFIG_RUN (0x1u << 4) /**< \brief (MPDDRC_MON_CONFIG) Control monitor */
#define MPDDRC_MON_CONFIG_READ_WRITE_Pos 8
#define MPDDRC_MON_CONFIG_READ_WRITE_Msk (0x3u << MPDDRC_MON_CONFIG_READ_WRITE_Pos) /**< \brief (MPDDRC_MON_CONFIG) Read Write access */
#define   MPDDRC_MON_CONFIG_READ_WRITE_TRIG_RD_WR (0x0u << 8) /**< \brief (MPDDRC_MON_CONFIG) Read and write accesses are triggered */
#define   MPDDRC_MON_CONFIG_READ_WRITE_TRIG_WR (0x1u << 8) /**< \brief (MPDDRC_MON_CONFIG) Only Write accesses are triggered */
#define   MPDDRC_MON_CONFIG_READ_WRITE_TRIG_RD (0x2u << 8) /**< \brief (MPDDRC_MON_CONFIG) Only Read accesses are triggered */
#define MPDDRC_MON_CONFIG_REFR_CALIB (0x1u << 10) /**< \brief (MPDDRC_MON_CONFIG) Refresh Calibration */
#define MPDDRC_MON_CONFIG_VIEW_INFO_Pos 11
#define MPDDRC_MON_CONFIG_VIEW_INFO_Msk (0x3u << MPDDRC_MON_CONFIG_VIEW_INFO_Pos) /**< \brief (MPDDRC_MON_CONFIG) View information */
#define   MPDDRC_MON_CONFIG_VIEW_INFO_INFO_MAX (0x0u << 11) /**< \brief (MPDDRC_MON_CONFIG) Information concerning the transfer which waits the longer */
#define   MPDDRC_MON_CONFIG_VIEW_INFO_INFO_NB_TRANSFER (0x1u << 11) /**< \brief (MPDDRC_MON_CONFIG) Number of transfer on the port */
#define   MPDDRC_MON_CONFIG_VIEW_INFO_INFO_TOTAL_LATENCY (0x2u << 11) /**< \brief (MPDDRC_MON_CONFIG) Tolal latency on the port */
/* -------- MPDDRC_MON_ADDR_0 : (MPDDRC Offset: 0x64) MPDDRC Monitor Address High/Low port 0 -------- */
#define MPDDRC_MON_ADDR_0_ADDR_LOW_PORT0_Pos 0
#define MPDDRC_MON_ADDR_0_ADDR_LOW_PORT0_Msk (0xffffu << MPDDRC_MON_ADDR_0_ADDR_LOW_PORT0_Pos) /**< \brief (MPDDRC_MON_ADDR_0) Address low on port x [x =0..7] */
#define MPDDRC_MON_ADDR_0_ADDR_LOW_PORT0(value) ((MPDDRC_MON_ADDR_0_ADDR_LOW_PORT0_Msk & ((value) << MPDDRC_MON_ADDR_0_ADDR_LOW_PORT0_Pos)))
#define MPDDRC_MON_ADDR_0_ADDR_HIGH_PORT0_Pos 16
#define MPDDRC_MON_ADDR_0_ADDR_HIGH_PORT0_Msk (0xffffu << MPDDRC_MON_ADDR_0_ADDR_HIGH_PORT0_Pos) /**< \brief (MPDDRC_MON_ADDR_0) Address high on port x [x =0..7] */
#define MPDDRC_MON_ADDR_0_ADDR_HIGH_PORT0(value) ((MPDDRC_MON_ADDR_0_ADDR_HIGH_PORT0_Msk & ((value) << MPDDRC_MON_ADDR_0_ADDR_HIGH_PORT0_Pos)))
/* -------- MPDDRC_MON_ADDR_1 : (MPDDRC Offset: 0x68) MPDDRC Monitor Address High/Low port 1 -------- */
#define MPDDRC_MON_ADDR_1_ADDR_LOW_PORT1_Pos 0
#define MPDDRC_MON_ADDR_1_ADDR_LOW_PORT1_Msk (0xffffu << MPDDRC_MON_ADDR_1_ADDR_LOW_PORT1_Pos) /**< \brief (MPDDRC_MON_ADDR_1) Address low on port x [x =0..7] */
#define MPDDRC_MON_ADDR_1_ADDR_LOW_PORT1(value) ((MPDDRC_MON_ADDR_1_ADDR_LOW_PORT1_Msk & ((value) << MPDDRC_MON_ADDR_1_ADDR_LOW_PORT1_Pos)))
#define MPDDRC_MON_ADDR_1_ADDR_HIGH_PORT1_Pos 16
#define MPDDRC_MON_ADDR_1_ADDR_HIGH_PORT1_Msk (0xffffu << MPDDRC_MON_ADDR_1_ADDR_HIGH_PORT1_Pos) /**< \brief (MPDDRC_MON_ADDR_1) Address high on port x [x =0..7] */
#define MPDDRC_MON_ADDR_1_ADDR_HIGH_PORT1(value) ((MPDDRC_MON_ADDR_1_ADDR_HIGH_PORT1_Msk & ((value) << MPDDRC_MON_ADDR_1_ADDR_HIGH_PORT1_Pos)))
/* -------- MPDDRC_MON_ADDR_2 : (MPDDRC Offset: 0x6C) MPDDRC Monitor Address High/Low port 2 -------- */
#define MPDDRC_MON_ADDR_2_ADDR_LOW_PORT2_Pos 0
#define MPDDRC_MON_ADDR_2_ADDR_LOW_PORT2_Msk (0xffffu << MPDDRC_MON_ADDR_2_ADDR_LOW_PORT2_Pos) /**< \brief (MPDDRC_MON_ADDR_2) Address low on port x [x =0..7] */
#define MPDDRC_MON_ADDR_2_ADDR_LOW_PORT2(value) ((MPDDRC_MON_ADDR_2_ADDR_LOW_PORT2_Msk & ((value) << MPDDRC_MON_ADDR_2_ADDR_LOW_PORT2_Pos)))
#define MPDDRC_MON_ADDR_2_ADDR_HIGH_PORT2_Pos 16
#define MPDDRC_MON_ADDR_2_ADDR_HIGH_PORT2_Msk (0xffffu << MPDDRC_MON_ADDR_2_ADDR_HIGH_PORT2_Pos) /**< \brief (MPDDRC_MON_ADDR_2) Address high on port x [x =0..7] */
#define MPDDRC_MON_ADDR_2_ADDR_HIGH_PORT2(value) ((MPDDRC_MON_ADDR_2_ADDR_HIGH_PORT2_Msk & ((value) << MPDDRC_MON_ADDR_2_ADDR_HIGH_PORT2_Pos)))
/* -------- MPDDRC_MON_ADDR_3 : (MPDDRC Offset: 0x70) MPDDRC Monitor Address High/Low port 3 -------- */
#define MPDDRC_MON_ADDR_3_ADDR_LOW_PORT3_Pos 0
#define MPDDRC_MON_ADDR_3_ADDR_LOW_PORT3_Msk (0xffffu << MPDDRC_MON_ADDR_3_ADDR_LOW_PORT3_Pos) /**< \brief (MPDDRC_MON_ADDR_3) Address low on port x [x =0..7] */
#define MPDDRC_MON_ADDR_3_ADDR_LOW_PORT3(value) ((MPDDRC_MON_ADDR_3_ADDR_LOW_PORT3_Msk & ((value) << MPDDRC_MON_ADDR_3_ADDR_LOW_PORT3_Pos)))
#define MPDDRC_MON_ADDR_3_ADDR_HIGH_PORT3_Pos 16
#define MPDDRC_MON_ADDR_3_ADDR_HIGH_PORT3_Msk (0xffffu << MPDDRC_MON_ADDR_3_ADDR_HIGH_PORT3_Pos) /**< \brief (MPDDRC_MON_ADDR_3) Address high on port x [x =0..7] */
#define MPDDRC_MON_ADDR_3_ADDR_HIGH_PORT3(value) ((MPDDRC_MON_ADDR_3_ADDR_HIGH_PORT3_Msk & ((value) << MPDDRC_MON_ADDR_3_ADDR_HIGH_PORT3_Pos)))
/* -------- MPDDRC_MON_ADDR_4 : (MPDDRC Offset: 0x74) MPDDRC Monitor Address High/Low port 4 -------- */
#define MPDDRC_MON_ADDR_4_ADDR_LOW_PORT4_Pos 0
#define MPDDRC_MON_ADDR_4_ADDR_LOW_PORT4_Msk (0xffffu << MPDDRC_MON_ADDR_4_ADDR_LOW_PORT4_Pos) /**< \brief (MPDDRC_MON_ADDR_4) Address low on port x [x =0..7] */
#define MPDDRC_MON_ADDR_4_ADDR_LOW_PORT4(value) ((MPDDRC_MON_ADDR_4_ADDR_LOW_PORT4_Msk & ((value) << MPDDRC_MON_ADDR_4_ADDR_LOW_PORT4_Pos)))
#define MPDDRC_MON_ADDR_4_ADDR_HIGH_PORT4_Pos 16
#define MPDDRC_MON_ADDR_4_ADDR_HIGH_PORT4_Msk (0xffffu << MPDDRC_MON_ADDR_4_ADDR_HIGH_PORT4_Pos) /**< \brief (MPDDRC_MON_ADDR_4) Address high on port x [x =0..7] */
#define MPDDRC_MON_ADDR_4_ADDR_HIGH_PORT4(value) ((MPDDRC_MON_ADDR_4_ADDR_HIGH_PORT4_Msk & ((value) << MPDDRC_MON_ADDR_4_ADDR_HIGH_PORT4_Pos)))
/* -------- MPDDRC_MON_ADDR_5 : (MPDDRC Offset: 0x78) MPDDRC Monitor Address High/Low port 5 -------- */
#define MPDDRC_MON_ADDR_5_ADDR_LOW_PORT5_Pos 0
#define MPDDRC_MON_ADDR_5_ADDR_LOW_PORT5_Msk (0xffffu << MPDDRC_MON_ADDR_5_ADDR_LOW_PORT5_Pos) /**< \brief (MPDDRC_MON_ADDR_5) Address low on port x [x =0..7] */
#define MPDDRC_MON_ADDR_5_ADDR_LOW_PORT5(value) ((MPDDRC_MON_ADDR_5_ADDR_LOW_PORT5_Msk & ((value) << MPDDRC_MON_ADDR_5_ADDR_LOW_PORT5_Pos)))
#define MPDDRC_MON_ADDR_5_ADDR_HIGH_PORT5_Pos 16
#define MPDDRC_MON_ADDR_5_ADDR_HIGH_PORT5_Msk (0xffffu << MPDDRC_MON_ADDR_5_ADDR_HIGH_PORT5_Pos) /**< \brief (MPDDRC_MON_ADDR_5) Address high on port x [x =0..7] */
#define MPDDRC_MON_ADDR_5_ADDR_HIGH_PORT5(value) ((MPDDRC_MON_ADDR_5_ADDR_HIGH_PORT5_Msk & ((value) << MPDDRC_MON_ADDR_5_ADDR_HIGH_PORT5_Pos)))
/* -------- MPDDRC_MON_ADDR_6 : (MPDDRC Offset: 0x7C) MPDDRC Monitor Address High/Low port 6 -------- */
#define MPDDRC_MON_ADDR_6_ADDR_LOW_PORT6_Pos 0
#define MPDDRC_MON_ADDR_6_ADDR_LOW_PORT6_Msk (0xffffu << MPDDRC_MON_ADDR_6_ADDR_LOW_PORT6_Pos) /**< \brief (MPDDRC_MON_ADDR_6) Address low on port x [x =0..7] */
#define MPDDRC_MON_ADDR_6_ADDR_LOW_PORT6(value) ((MPDDRC_MON_ADDR_6_ADDR_LOW_PORT6_Msk & ((value) << MPDDRC_MON_ADDR_6_ADDR_LOW_PORT6_Pos)))
#define MPDDRC_MON_ADDR_6_ADDR_HIGH_PORT6_Pos 16
#define MPDDRC_MON_ADDR_6_ADDR_HIGH_PORT6_Msk (0xffffu << MPDDRC_MON_ADDR_6_ADDR_HIGH_PORT6_Pos) /**< \brief (MPDDRC_MON_ADDR_6) Address high on port x [x =0..7] */
#define MPDDRC_MON_ADDR_6_ADDR_HIGH_PORT6(value) ((MPDDRC_MON_ADDR_6_ADDR_HIGH_PORT6_Msk & ((value) << MPDDRC_MON_ADDR_6_ADDR_HIGH_PORT6_Pos)))
/* -------- MPDDRC_MON_ADDR_7 : (MPDDRC Offset: 0x80) MPDDRC Monitor Address High/Low port 7 -------- */
#define MPDDRC_MON_ADDR_7_ADDR_LOW_PORT7_Pos 0
#define MPDDRC_MON_ADDR_7_ADDR_LOW_PORT7_Msk (0xffffu << MPDDRC_MON_ADDR_7_ADDR_LOW_PORT7_Pos) /**< \brief (MPDDRC_MON_ADDR_7) Address low on port x [x =0..7] */
#define MPDDRC_MON_ADDR_7_ADDR_LOW_PORT7(value) ((MPDDRC_MON_ADDR_7_ADDR_LOW_PORT7_Msk & ((value) << MPDDRC_MON_ADDR_7_ADDR_LOW_PORT7_Pos)))
#define MPDDRC_MON_ADDR_7_ADDR_HIGH_PORT7_Pos 16
#define MPDDRC_MON_ADDR_7_ADDR_HIGH_PORT7_Msk (0xffffu << MPDDRC_MON_ADDR_7_ADDR_HIGH_PORT7_Pos) /**< \brief (MPDDRC_MON_ADDR_7) Address high on port x [x =0..7] */
#define MPDDRC_MON_ADDR_7_ADDR_HIGH_PORT7(value) ((MPDDRC_MON_ADDR_7_ADDR_HIGH_PORT7_Msk & ((value) << MPDDRC_MON_ADDR_7_ADDR_HIGH_PORT7_Pos)))
/* -------- MPDDRC_MON_INFO_0 : (MPDDRC Offset: 0x84) MPDDRC Monitor Information port 0 -------- */
#define MPDDRC_MON_INFO_0_MAX_PORT0_WAITING_Pos 0
#define MPDDRC_MON_INFO_0_MAX_PORT0_WAITING_Msk (0xffffu << MPDDRC_MON_INFO_0_MAX_PORT0_WAITING_Pos) /**< \brief (MPDDRC_MON_INFO_0) Address high on port x [x =0..7] */
#define MPDDRC_MON_INFO_0_BURST_Pos 16
#define MPDDRC_MON_INFO_0_BURST_Msk (0x7u << MPDDRC_MON_INFO_0_BURST_Pos) /**< \brief (MPDDRC_MON_INFO_0) Type of burst on port x [x =0..7] */
#define   MPDDRC_MON_INFO_0_BURST_SINGLE (0x0u << 16) /**< \brief (MPDDRC_MON_INFO_0) Single transfer */
#define   MPDDRC_MON_INFO_0_BURST_INCR (0x1u << 16) /**< \brief (MPDDRC_MON_INFO_0) Incrementing burst of unspecified length */
#define   MPDDRC_MON_INFO_0_BURST_WRAP4 (0x2u << 16) /**< \brief (MPDDRC_MON_INFO_0) 4 beat wrapping burst */
#define   MPDDRC_MON_INFO_0_BURST_INCR4 (0x3u << 16) /**< \brief (MPDDRC_MON_INFO_0) 4 beat incrementing burst */
#define   MPDDRC_MON_INFO_0_BURST_WRAP8 (0x4u << 16) /**< \brief (MPDDRC_MON_INFO_0) 8 beat wrapping burst */
#define   MPDDRC_MON_INFO_0_BURST_INCR8 (0x5u << 16) /**< \brief (MPDDRC_MON_INFO_0) 8 beat incrementing burst */
#define   MPDDRC_MON_INFO_0_BURST_WRAP16 (0x6u << 16) /**< \brief (MPDDRC_MON_INFO_0) 16 beat wrapping burst */
#define   MPDDRC_MON_INFO_0_BURST_INCR16 (0x7u << 16) /**< \brief (MPDDRC_MON_INFO_0) 16 beat incrementing burst */
#define MPDDRC_MON_INFO_0_SIZE_Pos 20
#define MPDDRC_MON_INFO_0_SIZE_Msk (0x7u << MPDDRC_MON_INFO_0_SIZE_Pos) /**< \brief (MPDDRC_MON_INFO_0) Transfer size on port x [x =0..7] */
#define   MPDDRC_MON_INFO_0_SIZE_8BITS (0x0u << 20) /**< \brief (MPDDRC_MON_INFO_0) BYTE transfer */
#define   MPDDRC_MON_INFO_0_SIZE_16BITS (0x1u << 20) /**< \brief (MPDDRC_MON_INFO_0) Halfword transfer */
#define   MPDDRC_MON_INFO_0_SIZE_32BITS (0x2u << 20) /**< \brief (MPDDRC_MON_INFO_0) Word transfer */
#define   MPDDRC_MON_INFO_0_SIZE_64BITS (0x3u << 20) /**< \brief (MPDDRC_MON_INFO_0) Dword transfer */
#define MPDDRC_MON_INFO_0_READ_WRITE (0x1u << 24) /**< \brief (MPDDRC_MON_INFO_0) Read or Write access on port x [x =0..7] */
/* -------- MPDDRC_MON_INFO_1 : (MPDDRC Offset: 0x88) MPDDRC Monitor Information port 1 -------- */
#define MPDDRC_MON_INFO_1_MAX_PORT1_WAITING_Pos 0
#define MPDDRC_MON_INFO_1_MAX_PORT1_WAITING_Msk (0xffffu << MPDDRC_MON_INFO_1_MAX_PORT1_WAITING_Pos) /**< \brief (MPDDRC_MON_INFO_1) Address high on port x [x =0..7] */
#define MPDDRC_MON_INFO_1_BURST_Pos 16
#define MPDDRC_MON_INFO_1_BURST_Msk (0x7u << MPDDRC_MON_INFO_1_BURST_Pos) /**< \brief (MPDDRC_MON_INFO_1) Type of burst on port x [x =0..7] */
#define   MPDDRC_MON_INFO_1_BURST_SINGLE (0x0u << 16) /**< \brief (MPDDRC_MON_INFO_1) Single transfer */
#define   MPDDRC_MON_INFO_1_BURST_INCR (0x1u << 16) /**< \brief (MPDDRC_MON_INFO_1) Incrementing burst of unspecified length */
#define   MPDDRC_MON_INFO_1_BURST_WRAP4 (0x2u << 16) /**< \brief (MPDDRC_MON_INFO_1) 4 beat wrapping burst */
#define   MPDDRC_MON_INFO_1_BURST_INCR4 (0x3u << 16) /**< \brief (MPDDRC_MON_INFO_1) 4 beat incrementing burst */
#define   MPDDRC_MON_INFO_1_BURST_WRAP8 (0x4u << 16) /**< \brief (MPDDRC_MON_INFO_1) 8 beat wrapping burst */
#define   MPDDRC_MON_INFO_1_BURST_INCR8 (0x5u << 16) /**< \brief (MPDDRC_MON_INFO_1) 8 beat incrementing burst */
#define   MPDDRC_MON_INFO_1_BURST_WRAP16 (0x6u << 16) /**< \brief (MPDDRC_MON_INFO_1) 16 beat wrapping burst */
#define   MPDDRC_MON_INFO_1_BURST_INCR16 (0x7u << 16) /**< \brief (MPDDRC_MON_INFO_1) 16 beat incrementing burst */
#define MPDDRC_MON_INFO_1_SIZE_Pos 20
#define MPDDRC_MON_INFO_1_SIZE_Msk (0x7u << MPDDRC_MON_INFO_1_SIZE_Pos) /**< \brief (MPDDRC_MON_INFO_1) Transfer size on port x [x =0..7] */
#define   MPDDRC_MON_INFO_1_SIZE_8BITS (0x0u << 20) /**< \brief (MPDDRC_MON_INFO_1) BYTE transfer */
#define   MPDDRC_MON_INFO_1_SIZE_16BITS (0x1u << 20) /**< \brief (MPDDRC_MON_INFO_1) Halfword transfer */
#define   MPDDRC_MON_INFO_1_SIZE_32BITS (0x2u << 20) /**< \brief (MPDDRC_MON_INFO_1) Word transfer */
#define   MPDDRC_MON_INFO_1_SIZE_64BITS (0x3u << 20) /**< \brief (MPDDRC_MON_INFO_1) Dword transfer */
#define MPDDRC_MON_INFO_1_READ_WRITE (0x1u << 24) /**< \brief (MPDDRC_MON_INFO_1) Read or Write access on port x [x =0..7] */
/* -------- MPDDRC_MON_INFO_2 : (MPDDRC Offset: 0x8C) MPDDRC Monitor Information port 2 -------- */
#define MPDDRC_MON_INFO_2_MAX_PORT2_WAITING_Pos 0
#define MPDDRC_MON_INFO_2_MAX_PORT2_WAITING_Msk (0xffffu << MPDDRC_MON_INFO_2_MAX_PORT2_WAITING_Pos) /**< \brief (MPDDRC_MON_INFO_2) Address high on port x [x =0..7] */
#define MPDDRC_MON_INFO_2_BURST_Pos 16
#define MPDDRC_MON_INFO_2_BURST_Msk (0x7u << MPDDRC_MON_INFO_2_BURST_Pos) /**< \brief (MPDDRC_MON_INFO_2) Type of burst on port x [x =0..7] */
#define   MPDDRC_MON_INFO_2_BURST_SINGLE (0x0u << 16) /**< \brief (MPDDRC_MON_INFO_2) Single transfer */
#define   MPDDRC_MON_INFO_2_BURST_INCR (0x1u << 16) /**< \brief (MPDDRC_MON_INFO_2) Incrementing burst of unspecified length */
#define   MPDDRC_MON_INFO_2_BURST_WRAP4 (0x2u << 16) /**< \brief (MPDDRC_MON_INFO_2) 4 beat wrapping burst */
#define   MPDDRC_MON_INFO_2_BURST_INCR4 (0x3u << 16) /**< \brief (MPDDRC_MON_INFO_2) 4 beat incrementing burst */
#define   MPDDRC_MON_INFO_2_BURST_WRAP8 (0x4u << 16) /**< \brief (MPDDRC_MON_INFO_2) 8 beat wrapping burst */
#define   MPDDRC_MON_INFO_2_BURST_INCR8 (0x5u << 16) /**< \brief (MPDDRC_MON_INFO_2) 8 beat incrementing burst */
#define   MPDDRC_MON_INFO_2_BURST_WRAP16 (0x6u << 16) /**< \brief (MPDDRC_MON_INFO_2) 16 beat wrapping burst */
#define   MPDDRC_MON_INFO_2_BURST_INCR16 (0x7u << 16) /**< \brief (MPDDRC_MON_INFO_2) 16 beat incrementing burst */
#define MPDDRC_MON_INFO_2_SIZE_Pos 20
#define MPDDRC_MON_INFO_2_SIZE_Msk (0x7u << MPDDRC_MON_INFO_2_SIZE_Pos) /**< \brief (MPDDRC_MON_INFO_2) Transfer size on port x [x =0..7] */
#define   MPDDRC_MON_INFO_2_SIZE_8BITS (0x0u << 20) /**< \brief (MPDDRC_MON_INFO_2) BYTE transfer */
#define   MPDDRC_MON_INFO_2_SIZE_16BITS (0x1u << 20) /**< \brief (MPDDRC_MON_INFO_2) Halfword transfer */
#define   MPDDRC_MON_INFO_2_SIZE_32BITS (0x2u << 20) /**< \brief (MPDDRC_MON_INFO_2) Word transfer */
#define   MPDDRC_MON_INFO_2_SIZE_64BITS (0x3u << 20) /**< \brief (MPDDRC_MON_INFO_2) Dword transfer */
#define MPDDRC_MON_INFO_2_READ_WRITE (0x1u << 24) /**< \brief (MPDDRC_MON_INFO_2) Read or Write access on port x [x =0..7] */
/* -------- MPDDRC_MON_INFO_3 : (MPDDRC Offset: 0x90) MPDDRC Monitor Information port 3 -------- */
#define MPDDRC_MON_INFO_3_MAX_PORT3_WAITING_Pos 0
#define MPDDRC_MON_INFO_3_MAX_PORT3_WAITING_Msk (0xffffu << MPDDRC_MON_INFO_3_MAX_PORT3_WAITING_Pos) /**< \brief (MPDDRC_MON_INFO_3) Address high on port x [x =0..7] */
#define MPDDRC_MON_INFO_3_BURST_Pos 16
#define MPDDRC_MON_INFO_3_BURST_Msk (0x7u << MPDDRC_MON_INFO_3_BURST_Pos) /**< \brief (MPDDRC_MON_INFO_3) Type of burst on port x [x =0..7] */
#define   MPDDRC_MON_INFO_3_BURST_SINGLE (0x0u << 16) /**< \brief (MPDDRC_MON_INFO_3) Single transfer */
#define   MPDDRC_MON_INFO_3_BURST_INCR (0x1u << 16) /**< \brief (MPDDRC_MON_INFO_3) Incrementing burst of unspecified length */
#define   MPDDRC_MON_INFO_3_BURST_WRAP4 (0x2u << 16) /**< \brief (MPDDRC_MON_INFO_3) 4 beat wrapping burst */
#define   MPDDRC_MON_INFO_3_BURST_INCR4 (0x3u << 16) /**< \brief (MPDDRC_MON_INFO_3) 4 beat incrementing burst */
#define   MPDDRC_MON_INFO_3_BURST_WRAP8 (0x4u << 16) /**< \brief (MPDDRC_MON_INFO_3) 8 beat wrapping burst */
#define   MPDDRC_MON_INFO_3_BURST_INCR8 (0x5u << 16) /**< \brief (MPDDRC_MON_INFO_3) 8 beat incrementing burst */
#define   MPDDRC_MON_INFO_3_BURST_WRAP16 (0x6u << 16) /**< \brief (MPDDRC_MON_INFO_3) 16 beat wrapping burst */
#define   MPDDRC_MON_INFO_3_BURST_INCR16 (0x7u << 16) /**< \brief (MPDDRC_MON_INFO_3) 16 beat incrementing burst */
#define MPDDRC_MON_INFO_3_SIZE_Pos 20
#define MPDDRC_MON_INFO_3_SIZE_Msk (0x7u << MPDDRC_MON_INFO_3_SIZE_Pos) /**< \brief (MPDDRC_MON_INFO_3) Transfer size on port x [x =0..7] */
#define   MPDDRC_MON_INFO_3_SIZE_8BITS (0x0u << 20) /**< \brief (MPDDRC_MON_INFO_3) BYTE transfer */
#define   MPDDRC_MON_INFO_3_SIZE_16BITS (0x1u << 20) /**< \brief (MPDDRC_MON_INFO_3) Halfword transfer */
#define   MPDDRC_MON_INFO_3_SIZE_32BITS (0x2u << 20) /**< \brief (MPDDRC_MON_INFO_3) Word transfer */
#define   MPDDRC_MON_INFO_3_SIZE_64BITS (0x3u << 20) /**< \brief (MPDDRC_MON_INFO_3) Dword transfer */
#define MPDDRC_MON_INFO_3_READ_WRITE (0x1u << 24) /**< \brief (MPDDRC_MON_INFO_3) Read or Write access on port x [x =0..7] */
/* -------- MPDDRC_MON_INFO_4 : (MPDDRC Offset: 0x94) MPDDRC Monitor Information port 4 -------- */
#define MPDDRC_MON_INFO_4_MAX_PORT4_WAITING_Pos 0
#define MPDDRC_MON_INFO_4_MAX_PORT4_WAITING_Msk (0xffffu << MPDDRC_MON_INFO_4_MAX_PORT4_WAITING_Pos) /**< \brief (MPDDRC_MON_INFO_4) Address high on port x [x =0..7] */
#define MPDDRC_MON_INFO_4_BURST_Pos 16
#define MPDDRC_MON_INFO_4_BURST_Msk (0x7u << MPDDRC_MON_INFO_4_BURST_Pos) /**< \brief (MPDDRC_MON_INFO_4) Type of burst on port x [x =0..7] */
#define   MPDDRC_MON_INFO_4_BURST_SINGLE (0x0u << 16) /**< \brief (MPDDRC_MON_INFO_4) Single transfer */
#define   MPDDRC_MON_INFO_4_BURST_INCR (0x1u << 16) /**< \brief (MPDDRC_MON_INFO_4) Incrementing burst of unspecified length */
#define   MPDDRC_MON_INFO_4_BURST_WRAP4 (0x2u << 16) /**< \brief (MPDDRC_MON_INFO_4) 4 beat wrapping burst */
#define   MPDDRC_MON_INFO_4_BURST_INCR4 (0x3u << 16) /**< \brief (MPDDRC_MON_INFO_4) 4 beat incrementing burst */
#define   MPDDRC_MON_INFO_4_BURST_WRAP8 (0x4u << 16) /**< \brief (MPDDRC_MON_INFO_4) 8 beat wrapping burst */
#define   MPDDRC_MON_INFO_4_BURST_INCR8 (0x5u << 16) /**< \brief (MPDDRC_MON_INFO_4) 8 beat incrementing burst */
#define   MPDDRC_MON_INFO_4_BURST_WRAP16 (0x6u << 16) /**< \brief (MPDDRC_MON_INFO_4) 16 beat wrapping burst */
#define   MPDDRC_MON_INFO_4_BURST_INCR16 (0x7u << 16) /**< \brief (MPDDRC_MON_INFO_4) 16 beat incrementing burst */
#define MPDDRC_MON_INFO_4_SIZE_Pos 20
#define MPDDRC_MON_INFO_4_SIZE_Msk (0x7u << MPDDRC_MON_INFO_4_SIZE_Pos) /**< \brief (MPDDRC_MON_INFO_4) Transfer size on port x [x =0..7] */
#define   MPDDRC_MON_INFO_4_SIZE_8BITS (0x0u << 20) /**< \brief (MPDDRC_MON_INFO_4) BYTE transfer */
#define   MPDDRC_MON_INFO_4_SIZE_16BITS (0x1u << 20) /**< \brief (MPDDRC_MON_INFO_4) Halfword transfer */
#define   MPDDRC_MON_INFO_4_SIZE_32BITS (0x2u << 20) /**< \brief (MPDDRC_MON_INFO_4) Word transfer */
#define   MPDDRC_MON_INFO_4_SIZE_64BITS (0x3u << 20) /**< \brief (MPDDRC_MON_INFO_4) Dword transfer */
#define MPDDRC_MON_INFO_4_READ_WRITE (0x1u << 24) /**< \brief (MPDDRC_MON_INFO_4) Read or Write access on port x [x =0..7] */
/* -------- MPDDRC_MON_INFO_5 : (MPDDRC Offset: 0x98) MPDDRC Monitor Information port 5 -------- */
#define MPDDRC_MON_INFO_5_MAX_PORT5_WAITING_Pos 0
#define MPDDRC_MON_INFO_5_MAX_PORT5_WAITING_Msk (0xffffu << MPDDRC_MON_INFO_5_MAX_PORT5_WAITING_Pos) /**< \brief (MPDDRC_MON_INFO_5) Address high on port x [x =0..7] */
#define MPDDRC_MON_INFO_5_BURST_Pos 16
#define MPDDRC_MON_INFO_5_BURST_Msk (0x7u << MPDDRC_MON_INFO_5_BURST_Pos) /**< \brief (MPDDRC_MON_INFO_5) Type of burst on port x [x =0..7] */
#define   MPDDRC_MON_INFO_5_BURST_SINGLE (0x0u << 16) /**< \brief (MPDDRC_MON_INFO_5) Single transfer */
#define   MPDDRC_MON_INFO_5_BURST_INCR (0x1u << 16) /**< \brief (MPDDRC_MON_INFO_5) Incrementing burst of unspecified length */
#define   MPDDRC_MON_INFO_5_BURST_WRAP4 (0x2u << 16) /**< \brief (MPDDRC_MON_INFO_5) 4 beat wrapping burst */
#define   MPDDRC_MON_INFO_5_BURST_INCR4 (0x3u << 16) /**< \brief (MPDDRC_MON_INFO_5) 4 beat incrementing burst */
#define   MPDDRC_MON_INFO_5_BURST_WRAP8 (0x4u << 16) /**< \brief (MPDDRC_MON_INFO_5) 8 beat wrapping burst */
#define   MPDDRC_MON_INFO_5_BURST_INCR8 (0x5u << 16) /**< \brief (MPDDRC_MON_INFO_5) 8 beat incrementing burst */
#define   MPDDRC_MON_INFO_5_BURST_WRAP16 (0x6u << 16) /**< \brief (MPDDRC_MON_INFO_5) 16 beat wrapping burst */
#define   MPDDRC_MON_INFO_5_BURST_INCR16 (0x7u << 16) /**< \brief (MPDDRC_MON_INFO_5) 16 beat incrementing burst */
#define MPDDRC_MON_INFO_5_SIZE_Pos 20
#define MPDDRC_MON_INFO_5_SIZE_Msk (0x7u << MPDDRC_MON_INFO_5_SIZE_Pos) /**< \brief (MPDDRC_MON_INFO_5) Transfer size on port x [x =0..7] */
#define   MPDDRC_MON_INFO_5_SIZE_8BITS (0x0u << 20) /**< \brief (MPDDRC_MON_INFO_5) BYTE transfer */
#define   MPDDRC_MON_INFO_5_SIZE_16BITS (0x1u << 20) /**< \brief (MPDDRC_MON_INFO_5) Halfword transfer */
#define   MPDDRC_MON_INFO_5_SIZE_32BITS (0x2u << 20) /**< \brief (MPDDRC_MON_INFO_5) Word transfer */
#define   MPDDRC_MON_INFO_5_SIZE_64BITS (0x3u << 20) /**< \brief (MPDDRC_MON_INFO_5) Dword transfer */
#define MPDDRC_MON_INFO_5_READ_WRITE (0x1u << 24) /**< \brief (MPDDRC_MON_INFO_5) Read or Write access on port x [x =0..7] */
/* -------- MPDDRC_MON_INFO_6 : (MPDDRC Offset: 0x9C) MPDDRC Monitor Information port 6 -------- */
#define MPDDRC_MON_INFO_6_MAX_PORT6_WAITING_Pos 0
#define MPDDRC_MON_INFO_6_MAX_PORT6_WAITING_Msk (0xffffu << MPDDRC_MON_INFO_6_MAX_PORT6_WAITING_Pos) /**< \brief (MPDDRC_MON_INFO_6) Address high on port x [x =0..7] */
#define MPDDRC_MON_INFO_6_BURST_Pos 16
#define MPDDRC_MON_INFO_6_BURST_Msk (0x7u << MPDDRC_MON_INFO_6_BURST_Pos) /**< \brief (MPDDRC_MON_INFO_6) Type of burst on port x [x =0..7] */
#define   MPDDRC_MON_INFO_6_BURST_SINGLE (0x0u << 16) /**< \brief (MPDDRC_MON_INFO_6) Single transfer */
#define   MPDDRC_MON_INFO_6_BURST_INCR (0x1u << 16) /**< \brief (MPDDRC_MON_INFO_6) Incrementing burst of unspecified length */
#define   MPDDRC_MON_INFO_6_BURST_WRAP4 (0x2u << 16) /**< \brief (MPDDRC_MON_INFO_6) 4 beat wrapping burst */
#define   MPDDRC_MON_INFO_6_BURST_INCR4 (0x3u << 16) /**< \brief (MPDDRC_MON_INFO_6) 4 beat incrementing burst */
#define   MPDDRC_MON_INFO_6_BURST_WRAP8 (0x4u << 16) /**< \brief (MPDDRC_MON_INFO_6) 8 beat wrapping burst */
#define   MPDDRC_MON_INFO_6_BURST_INCR8 (0x5u << 16) /**< \brief (MPDDRC_MON_INFO_6) 8 beat incrementing burst */
#define   MPDDRC_MON_INFO_6_BURST_WRAP16 (0x6u << 16) /**< \brief (MPDDRC_MON_INFO_6) 16 beat wrapping burst */
#define   MPDDRC_MON_INFO_6_BURST_INCR16 (0x7u << 16) /**< \brief (MPDDRC_MON_INFO_6) 16 beat incrementing burst */
#define MPDDRC_MON_INFO_6_SIZE_Pos 20
#define MPDDRC_MON_INFO_6_SIZE_Msk (0x7u << MPDDRC_MON_INFO_6_SIZE_Pos) /**< \brief (MPDDRC_MON_INFO_6) Transfer size on port x [x =0..7] */
#define   MPDDRC_MON_INFO_6_SIZE_8BITS (0x0u << 20) /**< \brief (MPDDRC_MON_INFO_6) BYTE transfer */
#define   MPDDRC_MON_INFO_6_SIZE_16BITS (0x1u << 20) /**< \brief (MPDDRC_MON_INFO_6) Halfword transfer */
#define   MPDDRC_MON_INFO_6_SIZE_32BITS (0x2u << 20) /**< \brief (MPDDRC_MON_INFO_6) Word transfer */
#define   MPDDRC_MON_INFO_6_SIZE_64BITS (0x3u << 20) /**< \brief (MPDDRC_MON_INFO_6) Dword transfer */
#define MPDDRC_MON_INFO_6_READ_WRITE (0x1u << 24) /**< \brief (MPDDRC_MON_INFO_6) Read or Write access on port x [x =0..7] */
/* -------- MPDDRC_MON_INFO_7 : (MPDDRC Offset: 0xA0) MPDDRC Monitor Information port 7 -------- */
#define MPDDRC_MON_INFO_7_MAX_PORT7_WAITING_Pos 0
#define MPDDRC_MON_INFO_7_MAX_PORT7_WAITING_Msk (0xffffu << MPDDRC_MON_INFO_7_MAX_PORT7_WAITING_Pos) /**< \brief (MPDDRC_MON_INFO_7) Address high on port x [x =0..7] */
#define MPDDRC_MON_INFO_7_BURST_Pos 16
#define MPDDRC_MON_INFO_7_BURST_Msk (0x7u << MPDDRC_MON_INFO_7_BURST_Pos) /**< \brief (MPDDRC_MON_INFO_7) Type of burst on port x [x =0..7] */
#define   MPDDRC_MON_INFO_7_BURST_SINGLE (0x0u << 16) /**< \brief (MPDDRC_MON_INFO_7) Single transfer */
#define   MPDDRC_MON_INFO_7_BURST_INCR (0x1u << 16) /**< \brief (MPDDRC_MON_INFO_7) Incrementing burst of unspecified length */
#define   MPDDRC_MON_INFO_7_BURST_WRAP4 (0x2u << 16) /**< \brief (MPDDRC_MON_INFO_7) 4 beat wrapping burst */
#define   MPDDRC_MON_INFO_7_BURST_INCR4 (0x3u << 16) /**< \brief (MPDDRC_MON_INFO_7) 4 beat incrementing burst */
#define   MPDDRC_MON_INFO_7_BURST_WRAP8 (0x4u << 16) /**< \brief (MPDDRC_MON_INFO_7) 8 beat wrapping burst */
#define   MPDDRC_MON_INFO_7_BURST_INCR8 (0x5u << 16) /**< \brief (MPDDRC_MON_INFO_7) 8 beat incrementing burst */
#define   MPDDRC_MON_INFO_7_BURST_WRAP16 (0x6u << 16) /**< \brief (MPDDRC_MON_INFO_7) 16 beat wrapping burst */
#define   MPDDRC_MON_INFO_7_BURST_INCR16 (0x7u << 16) /**< \brief (MPDDRC_MON_INFO_7) 16 beat incrementing burst */
#define MPDDRC_MON_INFO_7_SIZE_Pos 20
#define MPDDRC_MON_INFO_7_SIZE_Msk (0x7u << MPDDRC_MON_INFO_7_SIZE_Pos) /**< \brief (MPDDRC_MON_INFO_7) Transfer size on port x [x =0..7] */
#define   MPDDRC_MON_INFO_7_SIZE_8BITS (0x0u << 20) /**< \brief (MPDDRC_MON_INFO_7) BYTE transfer */
#define   MPDDRC_MON_INFO_7_SIZE_16BITS (0x1u << 20) /**< \brief (MPDDRC_MON_INFO_7) Halfword transfer */
#define   MPDDRC_MON_INFO_7_SIZE_32BITS (0x2u << 20) /**< \brief (MPDDRC_MON_INFO_7) Word transfer */
#define   MPDDRC_MON_INFO_7_SIZE_64BITS (0x3u << 20) /**< \brief (MPDDRC_MON_INFO_7) Dword transfer */
#define MPDDRC_MON_INFO_7_READ_WRITE (0x1u << 24) /**< \brief (MPDDRC_MON_INFO_7) Read or Write access on port x [x =0..7] */
/* -------- MPDDRC_WPMR : (MPDDRC Offset: 0xE4) MPDDRC Write Protection Mode Register -------- */
#define MPDDRC_WPMR_WPEN (0x1u << 0) /**< \brief (MPDDRC_WPMR) Write Protection Enable */
#define MPDDRC_WPMR_WPKEY_Pos 8
#define MPDDRC_WPMR_WPKEY_Msk (0xffffffu << MPDDRC_WPMR_WPKEY_Pos) /**< \brief (MPDDRC_WPMR) Write Protection Key */
#define   MPDDRC_WPMR_WPKEY_PASSWD (0x444452u << 8) /**< \brief (MPDDRC_WPMR) Writing any other value in this field aborts the write operation of the WPEN bit.Always reads as 0. */
/* -------- MPDDRC_WPSR : (MPDDRC Offset: 0xE8) MPDDRC Write Protection Status Register -------- */
#define MPDDRC_WPSR_WPVS (0x1u << 0) /**< \brief (MPDDRC_WPSR) Write Protection Enable */
#define MPDDRC_WPSR_WPVSRC_Pos 8
#define MPDDRC_WPSR_WPVSRC_Msk (0xffffu << MPDDRC_WPSR_WPVSRC_Pos) /**< \brief (MPDDRC_WPSR) Write Protection Violation Source */
/* -------- MPDDRC_ADDRSIZE : (MPDDRC Offset: 0xEC) MPDDRC Address Size Register -------- */
#define MPDDRC_ADDRSIZE_ADDRSIZE_Pos 0
#define MPDDRC_ADDRSIZE_ADDRSIZE_Msk (0xffffu << MPDDRC_ADDRSIZE_ADDRSIZE_Pos) /**< \brief (MPDDRC_ADDRSIZE) Peripheral Bus Address Area Size */
/* -------- MPDDRC_IPNAME[2] : (MPDDRC Offset: 0xF0) MPDDRC IP Name 1 Register -------- */
#define MPDDRC_IPNAME_IPNAME_Pos 0
#define MPDDRC_IPNAME_IPNAME_Msk (0xffffffffu << MPDDRC_IPNAME_IPNAME_Pos) /**< \brief (MPDDRC_IPNAME[2]) IP Name in ASCII Format */
/* -------- MPDDRC_VERSION : (MPDDRC Offset: 0xFC) MPDDRC Version Register -------- */
#define MPDDRC_VERSION_VERSION_Pos 0
#define MPDDRC_VERSION_VERSION_Msk (0xffffu << MPDDRC_VERSION_VERSION_Pos) /**< \brief (MPDDRC_VERSION) Version of the Hardware Module */
#define MPDDRC_VERSION_MFN_Pos 16
#define MPDDRC_VERSION_MFN_Msk (0xfu << MPDDRC_VERSION_MFN_Pos) /**< \brief (MPDDRC_VERSION) Metal Fix Number */
/* -------- MPDDRC_DLL_OS : (MPDDRC Offset: 0x100) MPDDRC DLL Offset Selection Register -------- */
#define MPDDRC_DLL_OS_SELOFF (0x1u << 0) /**< \brief (MPDDRC_DLL_OS) Offset Selection */
/* -------- MPDDRC_DLL_MAO : (MPDDRC Offset: 0x104) MPDDRC DLL MASTER Offset Register -------- */
#define MPDDRC_DLL_MAO_MAOFF_Pos 0
#define MPDDRC_DLL_MAO_MAOFF_Msk (0xffu << MPDDRC_DLL_MAO_MAOFF_Pos) /**< \brief (MPDDRC_DLL_MAO) Master Delay Line Offset */
#define MPDDRC_DLL_MAO_MAOFF(value) ((MPDDRC_DLL_MAO_MAOFF_Msk & ((value) << MPDDRC_DLL_MAO_MAOFF_Pos)))
/* -------- MPDDRC_DLL_SO0 : (MPDDRC Offset: 0x108) MPDDRC DLL SLAVE Offset 0 Register -------- */
#define MPDDRC_DLL_SO0_S0OFF_Pos 0
#define MPDDRC_DLL_SO0_S0OFF_Msk (0xffu << MPDDRC_DLL_SO0_S0OFF_Pos) /**< \brief (MPDDRC_DLL_SO0) SLAVEx Delay Line Offset */
#define MPDDRC_DLL_SO0_S0OFF(value) ((MPDDRC_DLL_SO0_S0OFF_Msk & ((value) << MPDDRC_DLL_SO0_S0OFF_Pos)))
#define MPDDRC_DLL_SO0_S1OFF_Pos 8
#define MPDDRC_DLL_SO0_S1OFF_Msk (0xffu << MPDDRC_DLL_SO0_S1OFF_Pos) /**< \brief (MPDDRC_DLL_SO0) SLAVEx Delay Line Offset */
#define MPDDRC_DLL_SO0_S1OFF(value) ((MPDDRC_DLL_SO0_S1OFF_Msk & ((value) << MPDDRC_DLL_SO0_S1OFF_Pos)))
#define MPDDRC_DLL_SO0_S2OFF_Pos 16
#define MPDDRC_DLL_SO0_S2OFF_Msk (0xffu << MPDDRC_DLL_SO0_S2OFF_Pos) /**< \brief (MPDDRC_DLL_SO0) SLAVEx Delay Line Offset */
#define MPDDRC_DLL_SO0_S2OFF(value) ((MPDDRC_DLL_SO0_S2OFF_Msk & ((value) << MPDDRC_DLL_SO0_S2OFF_Pos)))
#define MPDDRC_DLL_SO0_S3OFF_Pos 24
#define MPDDRC_DLL_SO0_S3OFF_Msk (0xffu << MPDDRC_DLL_SO0_S3OFF_Pos) /**< \brief (MPDDRC_DLL_SO0) SLAVEx Delay Line Offset */
#define MPDDRC_DLL_SO0_S3OFF(value) ((MPDDRC_DLL_SO0_S3OFF_Msk & ((value) << MPDDRC_DLL_SO0_S3OFF_Pos)))
/* -------- MPDDRC_DLL_SO1 : (MPDDRC Offset: 0x10C) MPDDRC DLL SLAVE Offset 1 Register -------- */
#define MPDDRC_DLL_SO1_S4OFF_Pos 0
#define MPDDRC_DLL_SO1_S4OFF_Msk (0xffu << MPDDRC_DLL_SO1_S4OFF_Pos) /**< \brief (MPDDRC_DLL_SO1) SLAVEx Delay Line Offset */
#define MPDDRC_DLL_SO1_S4OFF(value) ((MPDDRC_DLL_SO1_S4OFF_Msk & ((value) << MPDDRC_DLL_SO1_S4OFF_Pos)))
#define MPDDRC_DLL_SO1_S5OFF_Pos 8
#define MPDDRC_DLL_SO1_S5OFF_Msk (0xffu << MPDDRC_DLL_SO1_S5OFF_Pos) /**< \brief (MPDDRC_DLL_SO1) SLAVEx Delay Line Offset */
#define MPDDRC_DLL_SO1_S5OFF(value) ((MPDDRC_DLL_SO1_S5OFF_Msk & ((value) << MPDDRC_DLL_SO1_S5OFF_Pos)))
#define MPDDRC_DLL_SO1_S6OFF_Pos 16
#define MPDDRC_DLL_SO1_S6OFF_Msk (0xffu << MPDDRC_DLL_SO1_S6OFF_Pos) /**< \brief (MPDDRC_DLL_SO1) SLAVEx Delay Line Offset */
#define MPDDRC_DLL_SO1_S6OFF(value) ((MPDDRC_DLL_SO1_S6OFF_Msk & ((value) << MPDDRC_DLL_SO1_S6OFF_Pos)))
#define MPDDRC_DLL_SO1_S7OFF_Pos 24
#define MPDDRC_DLL_SO1_S7OFF_Msk (0xffu << MPDDRC_DLL_SO1_S7OFF_Pos) /**< \brief (MPDDRC_DLL_SO1) SLAVEx Delay Line Offset */
#define MPDDRC_DLL_SO1_S7OFF(value) ((MPDDRC_DLL_SO1_S7OFF_Msk & ((value) << MPDDRC_DLL_SO1_S7OFF_Pos)))
/* -------- MPDDRC_DLL_WRO : (MPDDRC Offset: 0x110) MPDDRC DLL CLKWR Offset Register -------- */
#define MPDDRC_DLL_WRO_WR0OFF_Pos 0
#define MPDDRC_DLL_WRO_WR0OFF_Msk (0xffu << MPDDRC_DLL_WRO_WR0OFF_Pos) /**< \brief (MPDDRC_DLL_WRO) CLKWRx Delay Line Offset */
#define MPDDRC_DLL_WRO_WR0OFF(value) ((MPDDRC_DLL_WRO_WR0OFF_Msk & ((value) << MPDDRC_DLL_WRO_WR0OFF_Pos)))
#define MPDDRC_DLL_WRO_WR1OFF_Pos 8
#define MPDDRC_DLL_WRO_WR1OFF_Msk (0xffu << MPDDRC_DLL_WRO_WR1OFF_Pos) /**< \brief (MPDDRC_DLL_WRO) CLKWRx Delay Line Offset */
#define MPDDRC_DLL_WRO_WR1OFF(value) ((MPDDRC_DLL_WRO_WR1OFF_Msk & ((value) << MPDDRC_DLL_WRO_WR1OFF_Pos)))
#define MPDDRC_DLL_WRO_WR2OFF_Pos 16
#define MPDDRC_DLL_WRO_WR2OFF_Msk (0xffu << MPDDRC_DLL_WRO_WR2OFF_Pos) /**< \brief (MPDDRC_DLL_WRO) CLKWRx Delay Line Offset */
#define MPDDRC_DLL_WRO_WR2OFF(value) ((MPDDRC_DLL_WRO_WR2OFF_Msk & ((value) << MPDDRC_DLL_WRO_WR2OFF_Pos)))
#define MPDDRC_DLL_WRO_WR3OFF_Pos 24
#define MPDDRC_DLL_WRO_WR3OFF_Msk (0xffu << MPDDRC_DLL_WRO_WR3OFF_Pos) /**< \brief (MPDDRC_DLL_WRO) CLKWRx Delay Line Offset */
#define MPDDRC_DLL_WRO_WR3OFF(value) ((MPDDRC_DLL_WRO_WR3OFF_Msk & ((value) << MPDDRC_DLL_WRO_WR3OFF_Pos)))
/* -------- MPDDRC_DLL_ADO : (MPDDRC Offset: 0x114) MPDDRC DLL CLKAD Offset Register -------- */
#define MPDDRC_DLL_ADO_ADOFF_Pos 0
#define MPDDRC_DLL_ADO_ADOFF_Msk (0xffu << MPDDRC_DLL_ADO_ADOFF_Pos) /**< \brief (MPDDRC_DLL_ADO) CLKAD Delay Line Offset */
#define MPDDRC_DLL_ADO_ADOFF(value) ((MPDDRC_DLL_ADO_ADOFF_Msk & ((value) << MPDDRC_DLL_ADO_ADOFF_Pos)))
/* -------- MPDDRC_DLL_SM[4] : (MPDDRC Offset: 0x118) MPDDRC DLL Status MASTER0 Register -------- */
#define MPDDRC_DLL_SM_MDINC (0x1u << 0) /**< \brief (MPDDRC_DLL_SM[4]) MASTERx Delay Increment */
#define MPDDRC_DLL_SM_MDDEC (0x1u << 1) /**< \brief (MPDDRC_DLL_SM[4]) MASTERx Delay Decrement */
#define MPDDRC_DLL_SM_MDOVF (0x1u << 2) /**< \brief (MPDDRC_DLL_SM[4]) MASTERx Delay Overflow Flag */
#define MPDDRC_DLL_SM_MDLVAL_Pos 8
#define MPDDRC_DLL_SM_MDLVAL_Msk (0xffu << MPDDRC_DLL_SM_MDLVAL_Pos) /**< \brief (MPDDRC_DLL_SM[4]) MASTERx Delay Lock Value */
#define MPDDRC_DLL_SM_MDCNT_Pos 20
#define MPDDRC_DLL_SM_MDCNT_Msk (0xffu << MPDDRC_DLL_SM_MDCNT_Pos) /**< \brief (MPDDRC_DLL_SM[4]) MASTERx Delay Counter Value */
/* -------- MPDDRC_DLL_SSL[8] : (MPDDRC Offset: 0x128) MPDDRC DLL Status SLAVE0 Register -------- */
#define MPDDRC_DLL_SSL_SDCOVF (0x1u << 0) /**< \brief (MPDDRC_DLL_SSL[8]) SLAVEx Delay Correction Overflow Flag */
#define MPDDRC_DLL_SSL_SDCUDF (0x1u << 1) /**< \brief (MPDDRC_DLL_SSL[8]) SLAVEx Delay Correction Underflow Flag */
#define MPDDRC_DLL_SSL_SDERF (0x1u << 2) /**< \brief (MPDDRC_DLL_SSL[8]) SLAVEx Delay Correction Error Flag */
#define MPDDRC_DLL_SSL_SDCNT_Pos 8
#define MPDDRC_DLL_SSL_SDCNT_Msk (0xffu << MPDDRC_DLL_SSL_SDCNT_Pos) /**< \brief (MPDDRC_DLL_SSL[8]) SLAVEx Delay Counter Value */
#define MPDDRC_DLL_SSL_SDCVAL_Pos 20
#define MPDDRC_DLL_SSL_SDCVAL_Msk (0xffu << MPDDRC_DLL_SSL_SDCVAL_Pos) /**< \brief (MPDDRC_DLL_SSL[8]) SLAVEx Delay Correction Value */
/* -------- MPDDRC_DLL_SWR[4] : (MPDDRC Offset: 0x148) MPDDRC DLL Status CLKWR0 Register -------- */
#define MPDDRC_DLL_SWR_WRDCNT_Pos 0
#define MPDDRC_DLL_SWR_WRDCNT_Msk (0xffu << MPDDRC_DLL_SWR_WRDCNT_Pos) /**< \brief (MPDDRC_DLL_SWR[4]) CLKWRx Delay Counter Value */
/* -------- MPDDRC_DLL_SAD : (MPDDRC Offset: 0x158) MPDDRC DLL Status CLKAD Register -------- */
#define MPDDRC_DLL_SAD_ADDCNT_Pos 0
#define MPDDRC_DLL_SAD_ADDCNT_Msk (0xffu << MPDDRC_DLL_SAD_ADDCNT_Pos) /**< \brief (MPDDRC_DLL_SAD) CLKAD Delay Counter Value */
/* -------- MPDDRC_DLL_BC : (MPDDRC Offset: 0x1D0) MPDDRC DLL BIST Control Register -------- */
#define MPDDRC_DLL_BC_BISTEN (0x1u << 0) /**< \brief (MPDDRC_DLL_BC) BIST Mode Enable */
/* -------- MPDDRC_DLL_BS : (MPDDRC Offset: 0x1D4) MPDDRC DLL BIST Status Register -------- */
#define MPDDRC_DLL_BS_BISTS (0x1u << 0) /**< \brief (MPDDRC_DLL_BS) BIST Mode Status */
/* -------- MPDDRC_DLL_REVISION : (MPDDRC Offset: 0x1FC) MPDDRC DLL Revision Register -------- */
#define MPDDRC_DLL_REVISION_VERSION_Pos 0
#define MPDDRC_DLL_REVISION_VERSION_Msk (0xfffu << MPDDRC_DLL_REVISION_VERSION_Pos) /**< \brief (MPDDRC_DLL_REVISION) Version of the Hardware Module */
#define MPDDRC_DLL_REVISION_MFN_Pos 16
#define MPDDRC_DLL_REVISION_MFN_Msk (0x7u << MPDDRC_DLL_REVISION_MFN_Pos) /**< \brief (MPDDRC_DLL_REVISION) Metal Fix Number */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR Pulse Density Modulation Interface Controller */
/* ============================================================================= */
/** \addtogroup SAMA5D2_PDMIC Pulse Density Modulation Interface Controller */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief Pdmic hardware registers */
typedef struct {
  __IO uint32_t PDMIC_CR;      /**< \brief (Pdmic Offset: 0x00) Control Register */
  __IO uint32_t PDMIC_MR;      /**< \brief (Pdmic Offset: 0x04) Mode Register */
  __I  uint32_t Reserved1[3];
  __I  uint32_t PDMIC_CDR;     /**< \brief (Pdmic Offset: 0x14) Converted Data Register */
  __O  uint32_t PDMIC_IER;     /**< \brief (Pdmic Offset: 0x18) Interrupt Enable Register */
  __O  uint32_t PDMIC_IDR;     /**< \brief (Pdmic Offset: 0x1C) Interrupt Disable Register */
  __I  uint32_t PDMIC_IMR;     /**< \brief (Pdmic Offset: 0x20) Interrupt Mask Register */
  __I  uint32_t PDMIC_ISR;     /**< \brief (Pdmic Offset: 0x24) Interrupt Status Register */
  __I  uint32_t Reserved2[12];
  __IO uint32_t PDMIC_DSPR0;   /**< \brief (Pdmic Offset: 0x58) DSP Configuration Register 0 */
  __IO uint32_t PDMIC_DSPR1;   /**< \brief (Pdmic Offset: 0x5C) DSP Configuration Register 1 */
  __I  uint32_t Reserved3[33];
  __IO uint32_t PDMIC_WPMR;    /**< \brief (Pdmic Offset: 0xE4) Write Protection Mode Register */
  __I  uint32_t PDMIC_WPSR;    /**< \brief (Pdmic Offset: 0xE8) Write Protection Status Register */
  __I  uint32_t Reserved4[4];
  __I  uint32_t PDMIC_VERSION; /**< \brief (Pdmic Offset: 0xFC) Version Register */
} Pdmic;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- PDMIC_CR : (PDMIC Offset: 0x00) Control Register -------- */
#define PDMIC_CR_SWRST (0x1u << 0) /**< \brief (PDMIC_CR) Software Reset */
#define PDMIC_CR_ENPDM (0x1u << 4) /**< \brief (PDMIC_CR) Enable PDM */
/* -------- PDMIC_MR : (PDMIC Offset: 0x04) Mode Register -------- */
#define PDMIC_MR_PRESCAL_Pos 8
#define PDMIC_MR_PRESCAL_Msk (0x7fu << PDMIC_MR_PRESCAL_Pos) /**< \brief (PDMIC_MR) Prescaler Rate Selection */
#define PDMIC_MR_PRESCAL(value) ((PDMIC_MR_PRESCAL_Msk & ((value) << PDMIC_MR_PRESCAL_Pos)))
/* -------- PDMIC_CDR : (PDMIC Offset: 0x14) Converted Data Register -------- */
#define PDMIC_CDR_DATA_Pos 0
#define PDMIC_CDR_DATA_Msk (0xffffffffu << PDMIC_CDR_DATA_Pos) /**< \brief (PDMIC_CDR) Data Converted */
/* -------- PDMIC_IER : (PDMIC Offset: 0x18) Interrupt Enable Register -------- */
#define PDMIC_IER_DRDY (0x1u << 24) /**< \brief (PDMIC_IER) Data Ready Interrupt Enable */
#define PDMIC_IER_OVRE (0x1u << 25) /**< \brief (PDMIC_IER) Overrun Error Interrupt Enable */
#define PDMIC_IER_ENDRX (0x1u << 27) /**< \brief (PDMIC_IER) End of Receive Buffer Interrupt Enable */
#define PDMIC_IER_RXBUFF (0x1u << 28) /**< \brief (PDMIC_IER) Receive Buffer Full Interrupt Enable */
/* -------- PDMIC_IDR : (PDMIC Offset: 0x1C) Interrupt Disable Register -------- */
#define PDMIC_IDR_DRDY (0x1u << 24) /**< \brief (PDMIC_IDR) Data Ready Interrupt Disable */
#define PDMIC_IDR_OVRE (0x1u << 25) /**< \brief (PDMIC_IDR) General Overrun Error Interrupt Disable */
#define PDMIC_IDR_ENDRX (0x1u << 27) /**< \brief (PDMIC_IDR) End of Receive Buffer Interrupt Disable */
#define PDMIC_IDR_RXBUFF (0x1u << 28) /**< \brief (PDMIC_IDR) Receive Buffer Full Interrupt Disable */
/* -------- PDMIC_IMR : (PDMIC Offset: 0x20) Interrupt Mask Register -------- */
#define PDMIC_IMR_DRDY (0x1u << 24) /**< \brief (PDMIC_IMR) Data Ready Interrupt Mask */
#define PDMIC_IMR_OVRE (0x1u << 25) /**< \brief (PDMIC_IMR) General Overrun Error Interrupt Mask */
#define PDMIC_IMR_ENDRX (0x1u << 27) /**< \brief (PDMIC_IMR) End of Receive Buffer Interrupt Mask */
#define PDMIC_IMR_RXBUFF (0x1u << 28) /**< \brief (PDMIC_IMR) Receive Buffer Full Interrupt Mask */
/* -------- PDMIC_ISR : (PDMIC Offset: 0x24) Interrupt Status Register -------- */
#define PDMIC_ISR_FIFOCNT_Pos 16
#define PDMIC_ISR_FIFOCNT_Msk (0xffu << PDMIC_ISR_FIFOCNT_Pos) /**< \brief (PDMIC_ISR) FIFO Count */
#define PDMIC_ISR_DRDY (0x1u << 24) /**< \brief (PDMIC_ISR) Data Ready */
#define PDMIC_ISR_OVRE (0x1u << 25) /**< \brief (PDMIC_ISR) Overrun Error */
#define PDMIC_ISR_ENDRX (0x1u << 27) /**< \brief (PDMIC_ISR) End of RX Buffer */
#define PDMIC_ISR_RXBUFF (0x1u << 28) /**< \brief (PDMIC_ISR) RX Buffer Full */
/* -------- PDMIC_DSPR0 : (PDMIC Offset: 0x58) DSP Configuration Register 0 -------- */
#define PDMIC_DSPR0_HPFBYP (0x1u << 1) /**< \brief (PDMIC_DSPR0) High-Pass Filter Bypass */
#define PDMIC_DSPR0_SINBYP (0x1u << 2) /**< \brief (PDMIC_DSPR0) SINCC Filter Bypass */
#define PDMIC_DSPR0_SIZE (0x1u << 3) /**< \brief (PDMIC_DSPR0) Data Size */
#define PDMIC_DSPR0_OSR_Pos 4
#define PDMIC_DSPR0_OSR_Msk (0x7u << PDMIC_DSPR0_OSR_Pos) /**< \brief (PDMIC_DSPR0) Oversampling Ratio */
#define   PDMIC_DSPR0_OSR_128 (0x0u << 4) /**< \brief (PDMIC_DSPR0) Oversampling ratio is 128 */
#define   PDMIC_DSPR0_OSR_64 (0x1u << 4) /**< \brief (PDMIC_DSPR0) Oversampling ratio is 64 */
#define PDMIC_DSPR0_SCALE_Pos 8
#define PDMIC_DSPR0_SCALE_Msk (0xfu << PDMIC_DSPR0_SCALE_Pos) /**< \brief (PDMIC_DSPR0) Data Scale */
#define PDMIC_DSPR0_SCALE(value) ((PDMIC_DSPR0_SCALE_Msk & ((value) << PDMIC_DSPR0_SCALE_Pos)))
#define PDMIC_DSPR0_SHIFT_Pos 12
#define PDMIC_DSPR0_SHIFT_Msk (0xfu << PDMIC_DSPR0_SHIFT_Pos) /**< \brief (PDMIC_DSPR0) Data Shift */
#define PDMIC_DSPR0_SHIFT(value) ((PDMIC_DSPR0_SHIFT_Msk & ((value) << PDMIC_DSPR0_SHIFT_Pos)))
/* -------- PDMIC_DSPR1 : (PDMIC Offset: 0x5C) DSP Configuration Register 1 -------- */
#define PDMIC_DSPR1_DGAIN_Pos 0
#define PDMIC_DSPR1_DGAIN_Msk (0x7fffu << PDMIC_DSPR1_DGAIN_Pos) /**< \brief (PDMIC_DSPR1) Gain Correction */
#define PDMIC_DSPR1_DGAIN(value) ((PDMIC_DSPR1_DGAIN_Msk & ((value) << PDMIC_DSPR1_DGAIN_Pos)))
#define PDMIC_DSPR1_OFFSET_Pos 16
#define PDMIC_DSPR1_OFFSET_Msk (0xffffu << PDMIC_DSPR1_OFFSET_Pos) /**< \brief (PDMIC_DSPR1) Offset Correction */
#define PDMIC_DSPR1_OFFSET(value) ((PDMIC_DSPR1_OFFSET_Msk & ((value) << PDMIC_DSPR1_OFFSET_Pos)))
/* -------- PDMIC_WPMR : (PDMIC Offset: 0xE4) Write Protection Mode Register -------- */
#define PDMIC_WPMR_WPEN (0x1u << 0) /**< \brief (PDMIC_WPMR) Write Protection Enable */
#define PDMIC_WPMR_WPKEY_Pos 8
#define PDMIC_WPMR_WPKEY_Msk (0xffffffu << PDMIC_WPMR_WPKEY_Pos) /**< \brief (PDMIC_WPMR) Write Protect Key */
#define   PDMIC_WPMR_WPKEY_PASSWD (0x414443u << 8) /**< \brief (PDMIC_WPMR) Writing any other value in this field aborts the write operation of the WPEN bit.Always reads as 0. */
/* -------- PDMIC_WPSR : (PDMIC Offset: 0xE8) Write Protection Status Register -------- */
#define PDMIC_WPSR_WPVS (0x1u << 0) /**< \brief (PDMIC_WPSR) Write Protection Violation Status */
#define PDMIC_WPSR_WPVSRC_Pos 8
#define PDMIC_WPSR_WPVSRC_Msk (0xffffu << PDMIC_WPSR_WPVSRC_Pos) /**< \brief (PDMIC_WPSR) Write Protection Violation Source */
/* -------- PDMIC_VERSION : (PDMIC Offset: 0xFC) Version Register -------- */
#define PDMIC_VERSION_VERSION_Pos 0
#define PDMIC_VERSION_VERSION_Msk (0xfffu << PDMIC_VERSION_VERSION_Pos) /**< \brief (PDMIC_VERSION) Version of the Hardware Module */
#define PDMIC_VERSION_MFN_Pos 16
#define PDMIC_VERSION_MFN_Msk (0x7u << PDMIC_VERSION_MFN_Pos) /**< \brief (PDMIC_VERSION) Metal Fix Number */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR Parallel Input/Output Controller */
/* ============================================================================= */
/** \addtogroup SAMA5D2_PIO Parallel Input/Output Controller */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief PioIo_group hardware registers */
typedef struct {
  __IO uint32_t PIO_MSKR;     /**< \brief (PioIo_group Offset: 0x0) PIO Mask Register */
  __IO uint32_t PIO_CFGR;     /**< \brief (PioIo_group Offset: 0x4) PIO Configuration Register */
  __I  uint32_t PIO_PDSR;     /**< \brief (PioIo_group Offset: 0x8) PIO Pin Data Status Register */
  __I  uint32_t PIO_LOCKSR;   /**< \brief (PioIo_group Offset: 0xC) PIO Lock Status Register */
  __O  uint32_t PIO_SODR;     /**< \brief (PioIo_group Offset: 0x10) PIO Set Output Data Register */
  __O  uint32_t PIO_CODR;     /**< \brief (PioIo_group Offset: 0x14) PIO Clear Output Data Register */
  __IO uint32_t PIO_ODSR;     /**< \brief (PioIo_group Offset: 0x18) PIO Output Data Status Register */
  __I  uint32_t Reserved1[1];
  __O  uint32_t PIO_IER;      /**< \brief (PioIo_group Offset: 0x20) PIO Interrupt Enable Register */
  __O  uint32_t PIO_IDR;      /**< \brief (PioIo_group Offset: 0x24) PIO Interrupt Disable Register */
  __I  uint32_t PIO_IMR;      /**< \brief (PioIo_group Offset: 0x28) PIO Interrupt Mask Register */
  __I  uint32_t PIO_ISR;      /**< \brief (PioIo_group Offset: 0x2C) PIO Interrupt Status Register */
  __I  uint32_t Reserved2[3];
  __O  uint32_t PIO_IOFR;     /**< \brief (PioIo_group Offset: 0x3C) PIO I/O Freeze Register */
} PioIo_group;
/** \brief PioPio_ hardware registers */
typedef struct {
  __IO uint32_t S_PIO_MSKR;   /**< \brief (PioPio_ Offset: 0x0) Secure PIO Mask Register */
  __IO uint32_t S_PIO_CFGR;   /**< \brief (PioPio_ Offset: 0x4) Secure PIO Configuration Register */
  __I  uint32_t S_PIO_PDSR;   /**< \brief (PioPio_ Offset: 0x8) Secure PIO Pin Data Status Register */
  __I  uint32_t S_PIO_LOCKSR; /**< \brief (PioPio_ Offset: 0xC) Secure PIO Lock Status Register */
  __O  uint32_t S_PIO_SODR;   /**< \brief (PioPio_ Offset: 0x10) Secure PIO Set Output Data Register */
  __O  uint32_t S_PIO_CODR;   /**< \brief (PioPio_ Offset: 0x14) Secure PIO Clear Output Data Register */
  __IO uint32_t S_PIO_ODSR;   /**< \brief (PioPio_ Offset: 0x18) Secure PIO Output Data Status Register */
  __I  uint32_t Reserved3[1];
  __O  uint32_t S_PIO_IER;    /**< \brief (PioPio_ Offset: 0x20) Secure PIO Interrupt Enable Register */
  __O  uint32_t S_PIO_IDR;    /**< \brief (PioPio_ Offset: 0x24) Secure PIO Interrupt Disable Register */
  __I  uint32_t S_PIO_IMR;    /**< \brief (PioPio_ Offset: 0x28) Secure PIO Interrupt Mask Register */
  __I  uint32_t S_PIO_ISR;    /**< \brief (PioPio_ Offset: 0x2C) Secure PIO Interrupt Status Register */
  __O  uint32_t S_PIO_SIONR;  /**< \brief (PioPio_ Offset: 0x30) Secure PIO Set I/O Non-Secure Register */
  __O  uint32_t S_PIO_SIOSR;  /**< \brief (PioPio_ Offset: 0x34) Secure PIO Set I/O Secure Register */
  __I  uint32_t S_PIO_IOSSR;  /**< \brief (PioPio_ Offset: 0x38) Secure PIO I/O Security Status Register */
  __O  uint32_t S_PIO_IOFR;   /**< \brief (PioPio_ Offset: 0x3C) Secure PIO I/O Freeze Register */
} PioPio_;
/** \brief Pio hardware registers */
#define PIOIO_GROUP_NUMBER 4
#define PIOPIO__NUMBER 4
typedef struct {
       PioIo_group PIO_IO_GROUP[PIOIO_GROUP_NUMBER]; /**< \brief (Pio Offset: 0x0) io_group = 0 .. 3 */
  __I  uint32_t    Reserved1[308];
  __IO uint32_t    PIO_TPFR;                         /**< \brief (Pio Offset: 0x5D0) PIO Tamper Freeze Register */
  __I  uint32_t    Reserved2[3];
  __IO uint32_t    PIO_WPMR;                         /**< \brief (Pio Offset: 0x5E0) PIO Write Protection Mode Register */
  __I  uint32_t    PIO_WPSR;                         /**< \brief (Pio Offset: 0x5E4) PIO Write Protection Status Register */
  __I  uint32_t    Reserved3[5];
  __I  uint32_t    PIO_VERSION;                      /**< \brief (Pio Offset: 0x5FC) Version Register */
  __I  uint32_t    Reserved4[640];
       PioPio_     PIO_PIO_[PIOPIO__NUMBER];         /**< \brief (Pio Offset: 0x1000) io_group = 0 .. 3 */
  __I  uint32_t    Reserved5[192];
  __IO uint32_t    S_PIO_DELAYR[4];                  /**< \brief (Pio Offset: 0x1400) Secure PIO I/O Delay Register (delay_reg = 0) */
  __I  uint32_t    Reserved6[60];
  __IO uint32_t    S_PIO_SCDR;                       /**< \brief (Pio Offset: 0x1500) Secure PIO Slow Clock Divider Debouncing Register */
  __I  uint32_t    Reserved7[51];
  __IO uint32_t    S_PIO_TPFR;                       /**< \brief (Pio Offset: 0x15D0) Secure PIO Tamper Freeze Register */
  __IO uint32_t    PIO_DLFR;                         /**< \brief (Pio Offset: 0x15D4) Secure PIO Delay Freeze Register */
  __I  uint32_t    Reserved8[2];
  __IO uint32_t    S_PIO_WPMR;                       /**< \brief (Pio Offset: 0x15E0) Secure PIO Write Protection Mode Register */
  __I  uint32_t    S_PIO_WPSR;                       /**< \brief (Pio Offset: 0x15E4) Secure PIO Write Protection Status Register */
} Pio;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- PIO_MSKR : (PIO Offset: N/A) PIO Mask Register -------- */
#define PIO_MSKR_MSK0 (0x1u << 0) /**< \brief (PIO_MSKR) PIO Line 0 Mask */
#define   PIO_MSKR_MSK0_DISABLED (0x0u << 0) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   PIO_MSKR_MSK0_ENABLED (0x1u << 0) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR updates the corresponding I/O line configuration. */
#define PIO_MSKR_MSK1 (0x1u << 1) /**< \brief (PIO_MSKR) PIO Line 1 Mask */
#define   PIO_MSKR_MSK1_DISABLED (0x0u << 1) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   PIO_MSKR_MSK1_ENABLED (0x1u << 1) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR updates the corresponding I/O line configuration. */
#define PIO_MSKR_MSK2 (0x1u << 2) /**< \brief (PIO_MSKR) PIO Line 2 Mask */
#define   PIO_MSKR_MSK2_DISABLED (0x0u << 2) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   PIO_MSKR_MSK2_ENABLED (0x1u << 2) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR updates the corresponding I/O line configuration. */
#define PIO_MSKR_MSK3 (0x1u << 3) /**< \brief (PIO_MSKR) PIO Line 3 Mask */
#define   PIO_MSKR_MSK3_DISABLED (0x0u << 3) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   PIO_MSKR_MSK3_ENABLED (0x1u << 3) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR updates the corresponding I/O line configuration. */
#define PIO_MSKR_MSK4 (0x1u << 4) /**< \brief (PIO_MSKR) PIO Line 4 Mask */
#define   PIO_MSKR_MSK4_DISABLED (0x0u << 4) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   PIO_MSKR_MSK4_ENABLED (0x1u << 4) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR updates the corresponding I/O line configuration. */
#define PIO_MSKR_MSK5 (0x1u << 5) /**< \brief (PIO_MSKR) PIO Line 5 Mask */
#define   PIO_MSKR_MSK5_DISABLED (0x0u << 5) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   PIO_MSKR_MSK5_ENABLED (0x1u << 5) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR updates the corresponding I/O line configuration. */
#define PIO_MSKR_MSK6 (0x1u << 6) /**< \brief (PIO_MSKR) PIO Line 6 Mask */
#define   PIO_MSKR_MSK6_DISABLED (0x0u << 6) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   PIO_MSKR_MSK6_ENABLED (0x1u << 6) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR updates the corresponding I/O line configuration. */
#define PIO_MSKR_MSK7 (0x1u << 7) /**< \brief (PIO_MSKR) PIO Line 7 Mask */
#define   PIO_MSKR_MSK7_DISABLED (0x0u << 7) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   PIO_MSKR_MSK7_ENABLED (0x1u << 7) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR updates the corresponding I/O line configuration. */
#define PIO_MSKR_MSK8 (0x1u << 8) /**< \brief (PIO_MSKR) PIO Line 8 Mask */
#define   PIO_MSKR_MSK8_DISABLED (0x0u << 8) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   PIO_MSKR_MSK8_ENABLED (0x1u << 8) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR updates the corresponding I/O line configuration. */
#define PIO_MSKR_MSK9 (0x1u << 9) /**< \brief (PIO_MSKR) PIO Line 9 Mask */
#define   PIO_MSKR_MSK9_DISABLED (0x0u << 9) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   PIO_MSKR_MSK9_ENABLED (0x1u << 9) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR updates the corresponding I/O line configuration. */
#define PIO_MSKR_MSK10 (0x1u << 10) /**< \brief (PIO_MSKR) PIO Line 10 Mask */
#define   PIO_MSKR_MSK10_DISABLED (0x0u << 10) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   PIO_MSKR_MSK10_ENABLED (0x1u << 10) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR updates the corresponding I/O line configuration. */
#define PIO_MSKR_MSK11 (0x1u << 11) /**< \brief (PIO_MSKR) PIO Line 11 Mask */
#define   PIO_MSKR_MSK11_DISABLED (0x0u << 11) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   PIO_MSKR_MSK11_ENABLED (0x1u << 11) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR updates the corresponding I/O line configuration. */
#define PIO_MSKR_MSK12 (0x1u << 12) /**< \brief (PIO_MSKR) PIO Line 12 Mask */
#define   PIO_MSKR_MSK12_DISABLED (0x0u << 12) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   PIO_MSKR_MSK12_ENABLED (0x1u << 12) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR updates the corresponding I/O line configuration. */
#define PIO_MSKR_MSK13 (0x1u << 13) /**< \brief (PIO_MSKR) PIO Line 13 Mask */
#define   PIO_MSKR_MSK13_DISABLED (0x0u << 13) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   PIO_MSKR_MSK13_ENABLED (0x1u << 13) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR updates the corresponding I/O line configuration. */
#define PIO_MSKR_MSK14 (0x1u << 14) /**< \brief (PIO_MSKR) PIO Line 14 Mask */
#define   PIO_MSKR_MSK14_DISABLED (0x0u << 14) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   PIO_MSKR_MSK14_ENABLED (0x1u << 14) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR updates the corresponding I/O line configuration. */
#define PIO_MSKR_MSK15 (0x1u << 15) /**< \brief (PIO_MSKR) PIO Line 15 Mask */
#define   PIO_MSKR_MSK15_DISABLED (0x0u << 15) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   PIO_MSKR_MSK15_ENABLED (0x1u << 15) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR updates the corresponding I/O line configuration. */
#define PIO_MSKR_MSK16 (0x1u << 16) /**< \brief (PIO_MSKR) PIO Line 16 Mask */
#define   PIO_MSKR_MSK16_DISABLED (0x0u << 16) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   PIO_MSKR_MSK16_ENABLED (0x1u << 16) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR updates the corresponding I/O line configuration. */
#define PIO_MSKR_MSK17 (0x1u << 17) /**< \brief (PIO_MSKR) PIO Line 17 Mask */
#define   PIO_MSKR_MSK17_DISABLED (0x0u << 17) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   PIO_MSKR_MSK17_ENABLED (0x1u << 17) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR updates the corresponding I/O line configuration. */
#define PIO_MSKR_MSK18 (0x1u << 18) /**< \brief (PIO_MSKR) PIO Line 18 Mask */
#define   PIO_MSKR_MSK18_DISABLED (0x0u << 18) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   PIO_MSKR_MSK18_ENABLED (0x1u << 18) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR updates the corresponding I/O line configuration. */
#define PIO_MSKR_MSK19 (0x1u << 19) /**< \brief (PIO_MSKR) PIO Line 19 Mask */
#define   PIO_MSKR_MSK19_DISABLED (0x0u << 19) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   PIO_MSKR_MSK19_ENABLED (0x1u << 19) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR updates the corresponding I/O line configuration. */
#define PIO_MSKR_MSK20 (0x1u << 20) /**< \brief (PIO_MSKR) PIO Line 20 Mask */
#define   PIO_MSKR_MSK20_DISABLED (0x0u << 20) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   PIO_MSKR_MSK20_ENABLED (0x1u << 20) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR updates the corresponding I/O line configuration. */
#define PIO_MSKR_MSK21 (0x1u << 21) /**< \brief (PIO_MSKR) PIO Line 21 Mask */
#define   PIO_MSKR_MSK21_DISABLED (0x0u << 21) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   PIO_MSKR_MSK21_ENABLED (0x1u << 21) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR updates the corresponding I/O line configuration. */
#define PIO_MSKR_MSK22 (0x1u << 22) /**< \brief (PIO_MSKR) PIO Line 22 Mask */
#define   PIO_MSKR_MSK22_DISABLED (0x0u << 22) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   PIO_MSKR_MSK22_ENABLED (0x1u << 22) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR updates the corresponding I/O line configuration. */
#define PIO_MSKR_MSK23 (0x1u << 23) /**< \brief (PIO_MSKR) PIO Line 23 Mask */
#define   PIO_MSKR_MSK23_DISABLED (0x0u << 23) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   PIO_MSKR_MSK23_ENABLED (0x1u << 23) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR updates the corresponding I/O line configuration. */
#define PIO_MSKR_MSK24 (0x1u << 24) /**< \brief (PIO_MSKR) PIO Line 24 Mask */
#define   PIO_MSKR_MSK24_DISABLED (0x0u << 24) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   PIO_MSKR_MSK24_ENABLED (0x1u << 24) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR updates the corresponding I/O line configuration. */
#define PIO_MSKR_MSK25 (0x1u << 25) /**< \brief (PIO_MSKR) PIO Line 25 Mask */
#define   PIO_MSKR_MSK25_DISABLED (0x0u << 25) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   PIO_MSKR_MSK25_ENABLED (0x1u << 25) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR updates the corresponding I/O line configuration. */
#define PIO_MSKR_MSK26 (0x1u << 26) /**< \brief (PIO_MSKR) PIO Line 26 Mask */
#define   PIO_MSKR_MSK26_DISABLED (0x0u << 26) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   PIO_MSKR_MSK26_ENABLED (0x1u << 26) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR updates the corresponding I/O line configuration. */
#define PIO_MSKR_MSK27 (0x1u << 27) /**< \brief (PIO_MSKR) PIO Line 27 Mask */
#define   PIO_MSKR_MSK27_DISABLED (0x0u << 27) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   PIO_MSKR_MSK27_ENABLED (0x1u << 27) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR updates the corresponding I/O line configuration. */
#define PIO_MSKR_MSK28 (0x1u << 28) /**< \brief (PIO_MSKR) PIO Line 28 Mask */
#define   PIO_MSKR_MSK28_DISABLED (0x0u << 28) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   PIO_MSKR_MSK28_ENABLED (0x1u << 28) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR updates the corresponding I/O line configuration. */
#define PIO_MSKR_MSK29 (0x1u << 29) /**< \brief (PIO_MSKR) PIO Line 29 Mask */
#define   PIO_MSKR_MSK29_DISABLED (0x0u << 29) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   PIO_MSKR_MSK29_ENABLED (0x1u << 29) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR updates the corresponding I/O line configuration. */
#define PIO_MSKR_MSK30 (0x1u << 30) /**< \brief (PIO_MSKR) PIO Line 30 Mask */
#define   PIO_MSKR_MSK30_DISABLED (0x0u << 30) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   PIO_MSKR_MSK30_ENABLED (0x1u << 30) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR updates the corresponding I/O line configuration. */
#define PIO_MSKR_MSK31 (0x1u << 31) /**< \brief (PIO_MSKR) PIO Line 31 Mask */
#define   PIO_MSKR_MSK31_DISABLED (0x0u << 31) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   PIO_MSKR_MSK31_ENABLED (0x1u << 31) /**< \brief (PIO_MSKR) Writing the PIO_CFGR, PIO_ODSR or PIO_IOFR updates the corresponding I/O line configuration. */
/* -------- PIO_CFGR : (PIO Offset: N/A) PIO Configuration Register -------- */
#define PIO_CFGR_FUNC_Pos 0
#define PIO_CFGR_FUNC_Msk (0x7u << PIO_CFGR_FUNC_Pos) /**< \brief (PIO_CFGR) I/O Line Function */
#define   PIO_CFGR_FUNC_GPIO (0x0u << 0) /**< \brief (PIO_CFGR) Select the PIO mode for the selected I/O lines. */
#define   PIO_CFGR_FUNC_PERIPH_A (0x1u << 0) /**< \brief (PIO_CFGR) Select the peripheral A for the selected I/O lines. */
#define   PIO_CFGR_FUNC_PERIPH_B (0x2u << 0) /**< \brief (PIO_CFGR) Select the peripheral B for the selected I/O lines. */
#define   PIO_CFGR_FUNC_PERIPH_C (0x3u << 0) /**< \brief (PIO_CFGR) Select the peripheral C for the selected I/O lines. */
#define   PIO_CFGR_FUNC_PERIPH_D (0x4u << 0) /**< \brief (PIO_CFGR) Select the peripheral D for the selected I/O lines. */
#define   PIO_CFGR_FUNC_PERIPH_E (0x5u << 0) /**< \brief (PIO_CFGR) Select the peripheral E for the selected I/O lines. */
#define   PIO_CFGR_FUNC_PERIPH_F (0x6u << 0) /**< \brief (PIO_CFGR) Select the peripheral F for the selected I/O lines. */
#define   PIO_CFGR_FUNC_PERIPH_G (0x7u << 0) /**< \brief (PIO_CFGR) Select the peripheral G for the selected I/O lines. */
#define PIO_CFGR_DIR (0x1u << 8) /**< \brief (PIO_CFGR) Direction */
#define   PIO_CFGR_DIR_INPUT (0x0u << 8) /**< \brief (PIO_CFGR) The selected I/O lines are pure inputs. */
#define   PIO_CFGR_DIR_OUTPUT (0x1u << 8) /**< \brief (PIO_CFGR) The selected I/O lines are enabled in output. */
#define PIO_CFGR_PUEN (0x1u << 9) /**< \brief (PIO_CFGR) Pull-Up Enable */
#define   PIO_CFGR_PUEN_DISABLED (0x0u << 9) /**< \brief (PIO_CFGR) Pull-Up is disabled for the selected I/O lines. */
#define   PIO_CFGR_PUEN_ENABLED (0x1u << 9) /**< \brief (PIO_CFGR) Pull-Up is enabled for the selected I/O lines. */
#define PIO_CFGR_PDEN (0x1u << 10) /**< \brief (PIO_CFGR) Pull-Down Enable */
#define   PIO_CFGR_PDEN_DISABLED (0x0u << 10) /**< \brief (PIO_CFGR) Pull-Down is disabled for the selected I/O lines. */
#define   PIO_CFGR_PDEN_ENABLED (0x1u << 10) /**< \brief (PIO_CFGR) Pull-Down is enabled for the selected I/O lines only if PUEN is 0. */
#define PIO_CFGR_IFEN (0x1u << 12) /**< \brief (PIO_CFGR) Input Filter Enable */
#define   PIO_CFGR_IFEN_DISABLED (0x0u << 12) /**< \brief (PIO_CFGR) The input filter is disabled for the selected I/O lines. */
#define   PIO_CFGR_IFEN_ENABLED (0x1u << 12) /**< \brief (PIO_CFGR) The input filter is enabled for the selected I/O lines. */
#define PIO_CFGR_IFSCEN (0x1u << 13) /**< \brief (PIO_CFGR) Input Filter Slow Clock Enable */
#define PIO_CFGR_OPD (0x1u << 14) /**< \brief (PIO_CFGR) Open-Drain */
#define   PIO_CFGR_OPD_DISABLED (0x0u << 14) /**< \brief (PIO_CFGR) The open-drain is disabled for the selected I/O lines. I/O lines are driven at high- and low-level. */
#define   PIO_CFGR_OPD_ENABLED (0x1u << 14) /**< \brief (PIO_CFGR) The open-drain is enabled for the selected I/O lines. I/O lines are driven at low-level only. */
#define PIO_CFGR_SCHMITT (0x1u << 15) /**< \brief (PIO_CFGR) Schmitt Trigger */
#define   PIO_CFGR_SCHMITT_ENABLED (0x0u << 15) /**< \brief (PIO_CFGR) Schmitt trigger is enabled for the selected I/O lines. */
#define   PIO_CFGR_SCHMITT_DISABLED (0x1u << 15) /**< \brief (PIO_CFGR) Schmitt trigger is disabled for the selected I/O lines. */
#define PIO_CFGR_DRVSTR_Pos 16
#define PIO_CFGR_DRVSTR_Msk (0x3u << PIO_CFGR_DRVSTR_Pos) /**< \brief (PIO_CFGR) Drive Strength */
#define   PIO_CFGR_DRVSTR_HI (0x0u << 16) /**< \brief (PIO_CFGR) High drive */
#define   PIO_CFGR_DRVSTR_ME (0x1u << 16) /**< \brief (PIO_CFGR) Medium drive */
#define   PIO_CFGR_DRVSTR_LO (0x2u << 16) /**< \brief (PIO_CFGR) Low drive */
#define PIO_CFGR_EVTSEL_Pos 24
#define PIO_CFGR_EVTSEL_Msk (0x7u << PIO_CFGR_EVTSEL_Pos) /**< \brief (PIO_CFGR) Event Selection */
#define   PIO_CFGR_EVTSEL_FALLING (0x0u << 24) /**< \brief (PIO_CFGR) Event detection on input falling edge . */
#define   PIO_CFGR_EVTSEL_RISING (0x1u << 24) /**< \brief (PIO_CFGR) Event detection on input rising edge. */
#define   PIO_CFGR_EVTSEL_BOTH (0x2u << 24) /**< \brief (PIO_CFGR) Event detection on input both edge. */
#define   PIO_CFGR_EVTSEL_LOW (0x3u << 24) /**< \brief (PIO_CFGR) Event detection on low level input. */
#define   PIO_CFGR_EVTSEL_HIGH (0x4u << 24) /**< \brief (PIO_CFGR) Event detection on high level input. */
#define PIO_CFGR_PCFS (0x1u << 29) /**< \brief (PIO_CFGR) Physical Configuration Freezed Status */
#define   PIO_CFGR_PCFS_NOT_FREEZED (0x0u << 29) /**< \brief (PIO_CFGR) The fileds are not freezed and can be written for this I/O line. */
#define   PIO_CFGR_PCFS_FREEZE (0x1u << 29) /**< \brief (PIO_CFGR) The fields are freeze and can not be written for this I/O line. Only an hardware reset can release thess fields. */
#define PIO_CFGR_ICFS (0x1u << 30) /**< \brief (PIO_CFGR) Interrupt Configuration Freezed Status */
#define   PIO_CFGR_ICFS_NOT_FREEZED (0x0u << 30) /**< \brief (PIO_CFGR) The fileds are not freezed and can be written for this I/O line. */
#define   PIO_CFGR_ICFS_FREEZE (0x1u << 30) /**< \brief (PIO_CFGR) The fields are freeze and can not be written for this I/O line. Only an hardware reset can release thess fields. */
#define PIO_CFGR_TAMPEN (0x1u << 31) /**< \brief (PIO_CFGR) Tamper Enable */
#define   PIO_CFGR_TAMPEN_NO_FREEZE (0x0u << 31) /**< \brief (PIO_CFGR) No effect on the selected I/O lines. */
#define   PIO_CFGR_TAMPEN_FREEZE (0x1u << 31) /**< \brief (PIO_CFGR) The selected I/O lines are automatically set in GPIO input with pull-up in case of a tamper event detection. */
/* -------- PIO_PDSR : (PIO Offset: N/A) PIO Pin Data Status Register -------- */
#define PIO_PDSR_P0 (0x1u << 0) /**< \brief (PIO_PDSR) Input Data Status */
#define PIO_PDSR_P1 (0x1u << 1) /**< \brief (PIO_PDSR) Input Data Status */
#define PIO_PDSR_P2 (0x1u << 2) /**< \brief (PIO_PDSR) Input Data Status */
#define PIO_PDSR_P3 (0x1u << 3) /**< \brief (PIO_PDSR) Input Data Status */
#define PIO_PDSR_P4 (0x1u << 4) /**< \brief (PIO_PDSR) Input Data Status */
#define PIO_PDSR_P5 (0x1u << 5) /**< \brief (PIO_PDSR) Input Data Status */
#define PIO_PDSR_P6 (0x1u << 6) /**< \brief (PIO_PDSR) Input Data Status */
#define PIO_PDSR_P7 (0x1u << 7) /**< \brief (PIO_PDSR) Input Data Status */
#define PIO_PDSR_P8 (0x1u << 8) /**< \brief (PIO_PDSR) Input Data Status */
#define PIO_PDSR_P9 (0x1u << 9) /**< \brief (PIO_PDSR) Input Data Status */
#define PIO_PDSR_P10 (0x1u << 10) /**< \brief (PIO_PDSR) Input Data Status */
#define PIO_PDSR_P11 (0x1u << 11) /**< \brief (PIO_PDSR) Input Data Status */
#define PIO_PDSR_P12 (0x1u << 12) /**< \brief (PIO_PDSR) Input Data Status */
#define PIO_PDSR_P13 (0x1u << 13) /**< \brief (PIO_PDSR) Input Data Status */
#define PIO_PDSR_P14 (0x1u << 14) /**< \brief (PIO_PDSR) Input Data Status */
#define PIO_PDSR_P15 (0x1u << 15) /**< \brief (PIO_PDSR) Input Data Status */
#define PIO_PDSR_P16 (0x1u << 16) /**< \brief (PIO_PDSR) Input Data Status */
#define PIO_PDSR_P17 (0x1u << 17) /**< \brief (PIO_PDSR) Input Data Status */
#define PIO_PDSR_P18 (0x1u << 18) /**< \brief (PIO_PDSR) Input Data Status */
#define PIO_PDSR_P19 (0x1u << 19) /**< \brief (PIO_PDSR) Input Data Status */
#define PIO_PDSR_P20 (0x1u << 20) /**< \brief (PIO_PDSR) Input Data Status */
#define PIO_PDSR_P21 (0x1u << 21) /**< \brief (PIO_PDSR) Input Data Status */
#define PIO_PDSR_P22 (0x1u << 22) /**< \brief (PIO_PDSR) Input Data Status */
#define PIO_PDSR_P23 (0x1u << 23) /**< \brief (PIO_PDSR) Input Data Status */
#define PIO_PDSR_P24 (0x1u << 24) /**< \brief (PIO_PDSR) Input Data Status */
#define PIO_PDSR_P25 (0x1u << 25) /**< \brief (PIO_PDSR) Input Data Status */
#define PIO_PDSR_P26 (0x1u << 26) /**< \brief (PIO_PDSR) Input Data Status */
#define PIO_PDSR_P27 (0x1u << 27) /**< \brief (PIO_PDSR) Input Data Status */
#define PIO_PDSR_P28 (0x1u << 28) /**< \brief (PIO_PDSR) Input Data Status */
#define PIO_PDSR_P29 (0x1u << 29) /**< \brief (PIO_PDSR) Input Data Status */
#define PIO_PDSR_P30 (0x1u << 30) /**< \brief (PIO_PDSR) Input Data Status */
#define PIO_PDSR_P31 (0x1u << 31) /**< \brief (PIO_PDSR) Input Data Status */
/* -------- PIO_LOCKSR : (PIO Offset: N/A) PIO Lock Status Register -------- */
#define PIO_LOCKSR_P0 (0x1u << 0) /**< \brief (PIO_LOCKSR) Lock Status */
#define PIO_LOCKSR_P1 (0x1u << 1) /**< \brief (PIO_LOCKSR) Lock Status */
#define PIO_LOCKSR_P2 (0x1u << 2) /**< \brief (PIO_LOCKSR) Lock Status */
#define PIO_LOCKSR_P3 (0x1u << 3) /**< \brief (PIO_LOCKSR) Lock Status */
#define PIO_LOCKSR_P4 (0x1u << 4) /**< \brief (PIO_LOCKSR) Lock Status */
#define PIO_LOCKSR_P5 (0x1u << 5) /**< \brief (PIO_LOCKSR) Lock Status */
#define PIO_LOCKSR_P6 (0x1u << 6) /**< \brief (PIO_LOCKSR) Lock Status */
#define PIO_LOCKSR_P7 (0x1u << 7) /**< \brief (PIO_LOCKSR) Lock Status */
#define PIO_LOCKSR_P8 (0x1u << 8) /**< \brief (PIO_LOCKSR) Lock Status */
#define PIO_LOCKSR_P9 (0x1u << 9) /**< \brief (PIO_LOCKSR) Lock Status */
#define PIO_LOCKSR_P10 (0x1u << 10) /**< \brief (PIO_LOCKSR) Lock Status */
#define PIO_LOCKSR_P11 (0x1u << 11) /**< \brief (PIO_LOCKSR) Lock Status */
#define PIO_LOCKSR_P12 (0x1u << 12) /**< \brief (PIO_LOCKSR) Lock Status */
#define PIO_LOCKSR_P13 (0x1u << 13) /**< \brief (PIO_LOCKSR) Lock Status */
#define PIO_LOCKSR_P14 (0x1u << 14) /**< \brief (PIO_LOCKSR) Lock Status */
#define PIO_LOCKSR_P15 (0x1u << 15) /**< \brief (PIO_LOCKSR) Lock Status */
#define PIO_LOCKSR_P16 (0x1u << 16) /**< \brief (PIO_LOCKSR) Lock Status */
#define PIO_LOCKSR_P17 (0x1u << 17) /**< \brief (PIO_LOCKSR) Lock Status */
#define PIO_LOCKSR_P18 (0x1u << 18) /**< \brief (PIO_LOCKSR) Lock Status */
#define PIO_LOCKSR_P19 (0x1u << 19) /**< \brief (PIO_LOCKSR) Lock Status */
#define PIO_LOCKSR_P20 (0x1u << 20) /**< \brief (PIO_LOCKSR) Lock Status */
#define PIO_LOCKSR_P21 (0x1u << 21) /**< \brief (PIO_LOCKSR) Lock Status */
#define PIO_LOCKSR_P22 (0x1u << 22) /**< \brief (PIO_LOCKSR) Lock Status */
#define PIO_LOCKSR_P23 (0x1u << 23) /**< \brief (PIO_LOCKSR) Lock Status */
#define PIO_LOCKSR_P24 (0x1u << 24) /**< \brief (PIO_LOCKSR) Lock Status */
#define PIO_LOCKSR_P25 (0x1u << 25) /**< \brief (PIO_LOCKSR) Lock Status */
#define PIO_LOCKSR_P26 (0x1u << 26) /**< \brief (PIO_LOCKSR) Lock Status */
#define PIO_LOCKSR_P27 (0x1u << 27) /**< \brief (PIO_LOCKSR) Lock Status */
#define PIO_LOCKSR_P28 (0x1u << 28) /**< \brief (PIO_LOCKSR) Lock Status */
#define PIO_LOCKSR_P29 (0x1u << 29) /**< \brief (PIO_LOCKSR) Lock Status */
#define PIO_LOCKSR_P30 (0x1u << 30) /**< \brief (PIO_LOCKSR) Lock Status */
#define PIO_LOCKSR_P31 (0x1u << 31) /**< \brief (PIO_LOCKSR) Lock Status */
/* -------- PIO_SODR : (PIO Offset: N/A) PIO Set Output Data Register -------- */
#define PIO_SODR_P0 (0x1u << 0) /**< \brief (PIO_SODR) Set Output Data */
#define PIO_SODR_P1 (0x1u << 1) /**< \brief (PIO_SODR) Set Output Data */
#define PIO_SODR_P2 (0x1u << 2) /**< \brief (PIO_SODR) Set Output Data */
#define PIO_SODR_P3 (0x1u << 3) /**< \brief (PIO_SODR) Set Output Data */
#define PIO_SODR_P4 (0x1u << 4) /**< \brief (PIO_SODR) Set Output Data */
#define PIO_SODR_P5 (0x1u << 5) /**< \brief (PIO_SODR) Set Output Data */
#define PIO_SODR_P6 (0x1u << 6) /**< \brief (PIO_SODR) Set Output Data */
#define PIO_SODR_P7 (0x1u << 7) /**< \brief (PIO_SODR) Set Output Data */
#define PIO_SODR_P8 (0x1u << 8) /**< \brief (PIO_SODR) Set Output Data */
#define PIO_SODR_P9 (0x1u << 9) /**< \brief (PIO_SODR) Set Output Data */
#define PIO_SODR_P10 (0x1u << 10) /**< \brief (PIO_SODR) Set Output Data */
#define PIO_SODR_P11 (0x1u << 11) /**< \brief (PIO_SODR) Set Output Data */
#define PIO_SODR_P12 (0x1u << 12) /**< \brief (PIO_SODR) Set Output Data */
#define PIO_SODR_P13 (0x1u << 13) /**< \brief (PIO_SODR) Set Output Data */
#define PIO_SODR_P14 (0x1u << 14) /**< \brief (PIO_SODR) Set Output Data */
#define PIO_SODR_P15 (0x1u << 15) /**< \brief (PIO_SODR) Set Output Data */
#define PIO_SODR_P16 (0x1u << 16) /**< \brief (PIO_SODR) Set Output Data */
#define PIO_SODR_P17 (0x1u << 17) /**< \brief (PIO_SODR) Set Output Data */
#define PIO_SODR_P18 (0x1u << 18) /**< \brief (PIO_SODR) Set Output Data */
#define PIO_SODR_P19 (0x1u << 19) /**< \brief (PIO_SODR) Set Output Data */
#define PIO_SODR_P20 (0x1u << 20) /**< \brief (PIO_SODR) Set Output Data */
#define PIO_SODR_P21 (0x1u << 21) /**< \brief (PIO_SODR) Set Output Data */
#define PIO_SODR_P22 (0x1u << 22) /**< \brief (PIO_SODR) Set Output Data */
#define PIO_SODR_P23 (0x1u << 23) /**< \brief (PIO_SODR) Set Output Data */
#define PIO_SODR_P24 (0x1u << 24) /**< \brief (PIO_SODR) Set Output Data */
#define PIO_SODR_P25 (0x1u << 25) /**< \brief (PIO_SODR) Set Output Data */
#define PIO_SODR_P26 (0x1u << 26) /**< \brief (PIO_SODR) Set Output Data */
#define PIO_SODR_P27 (0x1u << 27) /**< \brief (PIO_SODR) Set Output Data */
#define PIO_SODR_P28 (0x1u << 28) /**< \brief (PIO_SODR) Set Output Data */
#define PIO_SODR_P29 (0x1u << 29) /**< \brief (PIO_SODR) Set Output Data */
#define PIO_SODR_P30 (0x1u << 30) /**< \brief (PIO_SODR) Set Output Data */
#define PIO_SODR_P31 (0x1u << 31) /**< \brief (PIO_SODR) Set Output Data */
/* -------- PIO_CODR : (PIO Offset: N/A) PIO Clear Output Data Register -------- */
#define PIO_CODR_P0 (0x1u << 0) /**< \brief (PIO_CODR) Clear Output Data */
#define PIO_CODR_P1 (0x1u << 1) /**< \brief (PIO_CODR) Clear Output Data */
#define PIO_CODR_P2 (0x1u << 2) /**< \brief (PIO_CODR) Clear Output Data */
#define PIO_CODR_P3 (0x1u << 3) /**< \brief (PIO_CODR) Clear Output Data */
#define PIO_CODR_P4 (0x1u << 4) /**< \brief (PIO_CODR) Clear Output Data */
#define PIO_CODR_P5 (0x1u << 5) /**< \brief (PIO_CODR) Clear Output Data */
#define PIO_CODR_P6 (0x1u << 6) /**< \brief (PIO_CODR) Clear Output Data */
#define PIO_CODR_P7 (0x1u << 7) /**< \brief (PIO_CODR) Clear Output Data */
#define PIO_CODR_P8 (0x1u << 8) /**< \brief (PIO_CODR) Clear Output Data */
#define PIO_CODR_P9 (0x1u << 9) /**< \brief (PIO_CODR) Clear Output Data */
#define PIO_CODR_P10 (0x1u << 10) /**< \brief (PIO_CODR) Clear Output Data */
#define PIO_CODR_P11 (0x1u << 11) /**< \brief (PIO_CODR) Clear Output Data */
#define PIO_CODR_P12 (0x1u << 12) /**< \brief (PIO_CODR) Clear Output Data */
#define PIO_CODR_P13 (0x1u << 13) /**< \brief (PIO_CODR) Clear Output Data */
#define PIO_CODR_P14 (0x1u << 14) /**< \brief (PIO_CODR) Clear Output Data */
#define PIO_CODR_P15 (0x1u << 15) /**< \brief (PIO_CODR) Clear Output Data */
#define PIO_CODR_P16 (0x1u << 16) /**< \brief (PIO_CODR) Clear Output Data */
#define PIO_CODR_P17 (0x1u << 17) /**< \brief (PIO_CODR) Clear Output Data */
#define PIO_CODR_P18 (0x1u << 18) /**< \brief (PIO_CODR) Clear Output Data */
#define PIO_CODR_P19 (0x1u << 19) /**< \brief (PIO_CODR) Clear Output Data */
#define PIO_CODR_P20 (0x1u << 20) /**< \brief (PIO_CODR) Clear Output Data */
#define PIO_CODR_P21 (0x1u << 21) /**< \brief (PIO_CODR) Clear Output Data */
#define PIO_CODR_P22 (0x1u << 22) /**< \brief (PIO_CODR) Clear Output Data */
#define PIO_CODR_P23 (0x1u << 23) /**< \brief (PIO_CODR) Clear Output Data */
#define PIO_CODR_P24 (0x1u << 24) /**< \brief (PIO_CODR) Clear Output Data */
#define PIO_CODR_P25 (0x1u << 25) /**< \brief (PIO_CODR) Clear Output Data */
#define PIO_CODR_P26 (0x1u << 26) /**< \brief (PIO_CODR) Clear Output Data */
#define PIO_CODR_P27 (0x1u << 27) /**< \brief (PIO_CODR) Clear Output Data */
#define PIO_CODR_P28 (0x1u << 28) /**< \brief (PIO_CODR) Clear Output Data */
#define PIO_CODR_P29 (0x1u << 29) /**< \brief (PIO_CODR) Clear Output Data */
#define PIO_CODR_P30 (0x1u << 30) /**< \brief (PIO_CODR) Clear Output Data */
#define PIO_CODR_P31 (0x1u << 31) /**< \brief (PIO_CODR) Clear Output Data */
/* -------- PIO_ODSR : (PIO Offset: N/A) PIO Output Data Status Register -------- */
#define PIO_ODSR_P0 (0x1u << 0) /**< \brief (PIO_ODSR) Output Data Status */
#define PIO_ODSR_P1 (0x1u << 1) /**< \brief (PIO_ODSR) Output Data Status */
#define PIO_ODSR_P2 (0x1u << 2) /**< \brief (PIO_ODSR) Output Data Status */
#define PIO_ODSR_P3 (0x1u << 3) /**< \brief (PIO_ODSR) Output Data Status */
#define PIO_ODSR_P4 (0x1u << 4) /**< \brief (PIO_ODSR) Output Data Status */
#define PIO_ODSR_P5 (0x1u << 5) /**< \brief (PIO_ODSR) Output Data Status */
#define PIO_ODSR_P6 (0x1u << 6) /**< \brief (PIO_ODSR) Output Data Status */
#define PIO_ODSR_P7 (0x1u << 7) /**< \brief (PIO_ODSR) Output Data Status */
#define PIO_ODSR_P8 (0x1u << 8) /**< \brief (PIO_ODSR) Output Data Status */
#define PIO_ODSR_P9 (0x1u << 9) /**< \brief (PIO_ODSR) Output Data Status */
#define PIO_ODSR_P10 (0x1u << 10) /**< \brief (PIO_ODSR) Output Data Status */
#define PIO_ODSR_P11 (0x1u << 11) /**< \brief (PIO_ODSR) Output Data Status */
#define PIO_ODSR_P12 (0x1u << 12) /**< \brief (PIO_ODSR) Output Data Status */
#define PIO_ODSR_P13 (0x1u << 13) /**< \brief (PIO_ODSR) Output Data Status */
#define PIO_ODSR_P14 (0x1u << 14) /**< \brief (PIO_ODSR) Output Data Status */
#define PIO_ODSR_P15 (0x1u << 15) /**< \brief (PIO_ODSR) Output Data Status */
#define PIO_ODSR_P16 (0x1u << 16) /**< \brief (PIO_ODSR) Output Data Status */
#define PIO_ODSR_P17 (0x1u << 17) /**< \brief (PIO_ODSR) Output Data Status */
#define PIO_ODSR_P18 (0x1u << 18) /**< \brief (PIO_ODSR) Output Data Status */
#define PIO_ODSR_P19 (0x1u << 19) /**< \brief (PIO_ODSR) Output Data Status */
#define PIO_ODSR_P20 (0x1u << 20) /**< \brief (PIO_ODSR) Output Data Status */
#define PIO_ODSR_P21 (0x1u << 21) /**< \brief (PIO_ODSR) Output Data Status */
#define PIO_ODSR_P22 (0x1u << 22) /**< \brief (PIO_ODSR) Output Data Status */
#define PIO_ODSR_P23 (0x1u << 23) /**< \brief (PIO_ODSR) Output Data Status */
#define PIO_ODSR_P24 (0x1u << 24) /**< \brief (PIO_ODSR) Output Data Status */
#define PIO_ODSR_P25 (0x1u << 25) /**< \brief (PIO_ODSR) Output Data Status */
#define PIO_ODSR_P26 (0x1u << 26) /**< \brief (PIO_ODSR) Output Data Status */
#define PIO_ODSR_P27 (0x1u << 27) /**< \brief (PIO_ODSR) Output Data Status */
#define PIO_ODSR_P28 (0x1u << 28) /**< \brief (PIO_ODSR) Output Data Status */
#define PIO_ODSR_P29 (0x1u << 29) /**< \brief (PIO_ODSR) Output Data Status */
#define PIO_ODSR_P30 (0x1u << 30) /**< \brief (PIO_ODSR) Output Data Status */
#define PIO_ODSR_P31 (0x1u << 31) /**< \brief (PIO_ODSR) Output Data Status */
/* -------- PIO_IER : (PIO Offset: N/A) PIO Interrupt Enable Register -------- */
#define PIO_IER_P0 (0x1u << 0) /**< \brief (PIO_IER) Input Change Interrupt Enable */
#define PIO_IER_P1 (0x1u << 1) /**< \brief (PIO_IER) Input Change Interrupt Enable */
#define PIO_IER_P2 (0x1u << 2) /**< \brief (PIO_IER) Input Change Interrupt Enable */
#define PIO_IER_P3 (0x1u << 3) /**< \brief (PIO_IER) Input Change Interrupt Enable */
#define PIO_IER_P4 (0x1u << 4) /**< \brief (PIO_IER) Input Change Interrupt Enable */
#define PIO_IER_P5 (0x1u << 5) /**< \brief (PIO_IER) Input Change Interrupt Enable */
#define PIO_IER_P6 (0x1u << 6) /**< \brief (PIO_IER) Input Change Interrupt Enable */
#define PIO_IER_P7 (0x1u << 7) /**< \brief (PIO_IER) Input Change Interrupt Enable */
#define PIO_IER_P8 (0x1u << 8) /**< \brief (PIO_IER) Input Change Interrupt Enable */
#define PIO_IER_P9 (0x1u << 9) /**< \brief (PIO_IER) Input Change Interrupt Enable */
#define PIO_IER_P10 (0x1u << 10) /**< \brief (PIO_IER) Input Change Interrupt Enable */
#define PIO_IER_P11 (0x1u << 11) /**< \brief (PIO_IER) Input Change Interrupt Enable */
#define PIO_IER_P12 (0x1u << 12) /**< \brief (PIO_IER) Input Change Interrupt Enable */
#define PIO_IER_P13 (0x1u << 13) /**< \brief (PIO_IER) Input Change Interrupt Enable */
#define PIO_IER_P14 (0x1u << 14) /**< \brief (PIO_IER) Input Change Interrupt Enable */
#define PIO_IER_P15 (0x1u << 15) /**< \brief (PIO_IER) Input Change Interrupt Enable */
#define PIO_IER_P16 (0x1u << 16) /**< \brief (PIO_IER) Input Change Interrupt Enable */
#define PIO_IER_P17 (0x1u << 17) /**< \brief (PIO_IER) Input Change Interrupt Enable */
#define PIO_IER_P18 (0x1u << 18) /**< \brief (PIO_IER) Input Change Interrupt Enable */
#define PIO_IER_P19 (0x1u << 19) /**< \brief (PIO_IER) Input Change Interrupt Enable */
#define PIO_IER_P20 (0x1u << 20) /**< \brief (PIO_IER) Input Change Interrupt Enable */
#define PIO_IER_P21 (0x1u << 21) /**< \brief (PIO_IER) Input Change Interrupt Enable */
#define PIO_IER_P22 (0x1u << 22) /**< \brief (PIO_IER) Input Change Interrupt Enable */
#define PIO_IER_P23 (0x1u << 23) /**< \brief (PIO_IER) Input Change Interrupt Enable */
#define PIO_IER_P24 (0x1u << 24) /**< \brief (PIO_IER) Input Change Interrupt Enable */
#define PIO_IER_P25 (0x1u << 25) /**< \brief (PIO_IER) Input Change Interrupt Enable */
#define PIO_IER_P26 (0x1u << 26) /**< \brief (PIO_IER) Input Change Interrupt Enable */
#define PIO_IER_P27 (0x1u << 27) /**< \brief (PIO_IER) Input Change Interrupt Enable */
#define PIO_IER_P28 (0x1u << 28) /**< \brief (PIO_IER) Input Change Interrupt Enable */
#define PIO_IER_P29 (0x1u << 29) /**< \brief (PIO_IER) Input Change Interrupt Enable */
#define PIO_IER_P30 (0x1u << 30) /**< \brief (PIO_IER) Input Change Interrupt Enable */
#define PIO_IER_P31 (0x1u << 31) /**< \brief (PIO_IER) Input Change Interrupt Enable */
/* -------- PIO_IDR : (PIO Offset: N/A) PIO Interrupt Disable Register -------- */
#define PIO_IDR_P0 (0x1u << 0) /**< \brief (PIO_IDR) Input Change Interrupt Disable */
#define PIO_IDR_P1 (0x1u << 1) /**< \brief (PIO_IDR) Input Change Interrupt Disable */
#define PIO_IDR_P2 (0x1u << 2) /**< \brief (PIO_IDR) Input Change Interrupt Disable */
#define PIO_IDR_P3 (0x1u << 3) /**< \brief (PIO_IDR) Input Change Interrupt Disable */
#define PIO_IDR_P4 (0x1u << 4) /**< \brief (PIO_IDR) Input Change Interrupt Disable */
#define PIO_IDR_P5 (0x1u << 5) /**< \brief (PIO_IDR) Input Change Interrupt Disable */
#define PIO_IDR_P6 (0x1u << 6) /**< \brief (PIO_IDR) Input Change Interrupt Disable */
#define PIO_IDR_P7 (0x1u << 7) /**< \brief (PIO_IDR) Input Change Interrupt Disable */
#define PIO_IDR_P8 (0x1u << 8) /**< \brief (PIO_IDR) Input Change Interrupt Disable */
#define PIO_IDR_P9 (0x1u << 9) /**< \brief (PIO_IDR) Input Change Interrupt Disable */
#define PIO_IDR_P10 (0x1u << 10) /**< \brief (PIO_IDR) Input Change Interrupt Disable */
#define PIO_IDR_P11 (0x1u << 11) /**< \brief (PIO_IDR) Input Change Interrupt Disable */
#define PIO_IDR_P12 (0x1u << 12) /**< \brief (PIO_IDR) Input Change Interrupt Disable */
#define PIO_IDR_P13 (0x1u << 13) /**< \brief (PIO_IDR) Input Change Interrupt Disable */
#define PIO_IDR_P14 (0x1u << 14) /**< \brief (PIO_IDR) Input Change Interrupt Disable */
#define PIO_IDR_P15 (0x1u << 15) /**< \brief (PIO_IDR) Input Change Interrupt Disable */
#define PIO_IDR_P16 (0x1u << 16) /**< \brief (PIO_IDR) Input Change Interrupt Disable */
#define PIO_IDR_P17 (0x1u << 17) /**< \brief (PIO_IDR) Input Change Interrupt Disable */
#define PIO_IDR_P18 (0x1u << 18) /**< \brief (PIO_IDR) Input Change Interrupt Disable */
#define PIO_IDR_P19 (0x1u << 19) /**< \brief (PIO_IDR) Input Change Interrupt Disable */
#define PIO_IDR_P20 (0x1u << 20) /**< \brief (PIO_IDR) Input Change Interrupt Disable */
#define PIO_IDR_P21 (0x1u << 21) /**< \brief (PIO_IDR) Input Change Interrupt Disable */
#define PIO_IDR_P22 (0x1u << 22) /**< \brief (PIO_IDR) Input Change Interrupt Disable */
#define PIO_IDR_P23 (0x1u << 23) /**< \brief (PIO_IDR) Input Change Interrupt Disable */
#define PIO_IDR_P24 (0x1u << 24) /**< \brief (PIO_IDR) Input Change Interrupt Disable */
#define PIO_IDR_P25 (0x1u << 25) /**< \brief (PIO_IDR) Input Change Interrupt Disable */
#define PIO_IDR_P26 (0x1u << 26) /**< \brief (PIO_IDR) Input Change Interrupt Disable */
#define PIO_IDR_P27 (0x1u << 27) /**< \brief (PIO_IDR) Input Change Interrupt Disable */
#define PIO_IDR_P28 (0x1u << 28) /**< \brief (PIO_IDR) Input Change Interrupt Disable */
#define PIO_IDR_P29 (0x1u << 29) /**< \brief (PIO_IDR) Input Change Interrupt Disable */
#define PIO_IDR_P30 (0x1u << 30) /**< \brief (PIO_IDR) Input Change Interrupt Disable */
#define PIO_IDR_P31 (0x1u << 31) /**< \brief (PIO_IDR) Input Change Interrupt Disable */
/* -------- PIO_IMR : (PIO Offset: N/A) PIO Interrupt Mask Register -------- */
#define PIO_IMR_P0 (0x1u << 0) /**< \brief (PIO_IMR) Input Change Interrupt Mask */
#define PIO_IMR_P1 (0x1u << 1) /**< \brief (PIO_IMR) Input Change Interrupt Mask */
#define PIO_IMR_P2 (0x1u << 2) /**< \brief (PIO_IMR) Input Change Interrupt Mask */
#define PIO_IMR_P3 (0x1u << 3) /**< \brief (PIO_IMR) Input Change Interrupt Mask */
#define PIO_IMR_P4 (0x1u << 4) /**< \brief (PIO_IMR) Input Change Interrupt Mask */
#define PIO_IMR_P5 (0x1u << 5) /**< \brief (PIO_IMR) Input Change Interrupt Mask */
#define PIO_IMR_P6 (0x1u << 6) /**< \brief (PIO_IMR) Input Change Interrupt Mask */
#define PIO_IMR_P7 (0x1u << 7) /**< \brief (PIO_IMR) Input Change Interrupt Mask */
#define PIO_IMR_P8 (0x1u << 8) /**< \brief (PIO_IMR) Input Change Interrupt Mask */
#define PIO_IMR_P9 (0x1u << 9) /**< \brief (PIO_IMR) Input Change Interrupt Mask */
#define PIO_IMR_P10 (0x1u << 10) /**< \brief (PIO_IMR) Input Change Interrupt Mask */
#define PIO_IMR_P11 (0x1u << 11) /**< \brief (PIO_IMR) Input Change Interrupt Mask */
#define PIO_IMR_P12 (0x1u << 12) /**< \brief (PIO_IMR) Input Change Interrupt Mask */
#define PIO_IMR_P13 (0x1u << 13) /**< \brief (PIO_IMR) Input Change Interrupt Mask */
#define PIO_IMR_P14 (0x1u << 14) /**< \brief (PIO_IMR) Input Change Interrupt Mask */
#define PIO_IMR_P15 (0x1u << 15) /**< \brief (PIO_IMR) Input Change Interrupt Mask */
#define PIO_IMR_P16 (0x1u << 16) /**< \brief (PIO_IMR) Input Change Interrupt Mask */
#define PIO_IMR_P17 (0x1u << 17) /**< \brief (PIO_IMR) Input Change Interrupt Mask */
#define PIO_IMR_P18 (0x1u << 18) /**< \brief (PIO_IMR) Input Change Interrupt Mask */
#define PIO_IMR_P19 (0x1u << 19) /**< \brief (PIO_IMR) Input Change Interrupt Mask */
#define PIO_IMR_P20 (0x1u << 20) /**< \brief (PIO_IMR) Input Change Interrupt Mask */
#define PIO_IMR_P21 (0x1u << 21) /**< \brief (PIO_IMR) Input Change Interrupt Mask */
#define PIO_IMR_P22 (0x1u << 22) /**< \brief (PIO_IMR) Input Change Interrupt Mask */
#define PIO_IMR_P23 (0x1u << 23) /**< \brief (PIO_IMR) Input Change Interrupt Mask */
#define PIO_IMR_P24 (0x1u << 24) /**< \brief (PIO_IMR) Input Change Interrupt Mask */
#define PIO_IMR_P25 (0x1u << 25) /**< \brief (PIO_IMR) Input Change Interrupt Mask */
#define PIO_IMR_P26 (0x1u << 26) /**< \brief (PIO_IMR) Input Change Interrupt Mask */
#define PIO_IMR_P27 (0x1u << 27) /**< \brief (PIO_IMR) Input Change Interrupt Mask */
#define PIO_IMR_P28 (0x1u << 28) /**< \brief (PIO_IMR) Input Change Interrupt Mask */
#define PIO_IMR_P29 (0x1u << 29) /**< \brief (PIO_IMR) Input Change Interrupt Mask */
#define PIO_IMR_P30 (0x1u << 30) /**< \brief (PIO_IMR) Input Change Interrupt Mask */
#define PIO_IMR_P31 (0x1u << 31) /**< \brief (PIO_IMR) Input Change Interrupt Mask */
/* -------- PIO_ISR : (PIO Offset: N/A) PIO Interrupt Status Register -------- */
#define PIO_ISR_P0 (0x1u << 0) /**< \brief (PIO_ISR) Input Change Interrupt Status */
#define PIO_ISR_P1 (0x1u << 1) /**< \brief (PIO_ISR) Input Change Interrupt Status */
#define PIO_ISR_P2 (0x1u << 2) /**< \brief (PIO_ISR) Input Change Interrupt Status */
#define PIO_ISR_P3 (0x1u << 3) /**< \brief (PIO_ISR) Input Change Interrupt Status */
#define PIO_ISR_P4 (0x1u << 4) /**< \brief (PIO_ISR) Input Change Interrupt Status */
#define PIO_ISR_P5 (0x1u << 5) /**< \brief (PIO_ISR) Input Change Interrupt Status */
#define PIO_ISR_P6 (0x1u << 6) /**< \brief (PIO_ISR) Input Change Interrupt Status */
#define PIO_ISR_P7 (0x1u << 7) /**< \brief (PIO_ISR) Input Change Interrupt Status */
#define PIO_ISR_P8 (0x1u << 8) /**< \brief (PIO_ISR) Input Change Interrupt Status */
#define PIO_ISR_P9 (0x1u << 9) /**< \brief (PIO_ISR) Input Change Interrupt Status */
#define PIO_ISR_P10 (0x1u << 10) /**< \brief (PIO_ISR) Input Change Interrupt Status */
#define PIO_ISR_P11 (0x1u << 11) /**< \brief (PIO_ISR) Input Change Interrupt Status */
#define PIO_ISR_P12 (0x1u << 12) /**< \brief (PIO_ISR) Input Change Interrupt Status */
#define PIO_ISR_P13 (0x1u << 13) /**< \brief (PIO_ISR) Input Change Interrupt Status */
#define PIO_ISR_P14 (0x1u << 14) /**< \brief (PIO_ISR) Input Change Interrupt Status */
#define PIO_ISR_P15 (0x1u << 15) /**< \brief (PIO_ISR) Input Change Interrupt Status */
#define PIO_ISR_P16 (0x1u << 16) /**< \brief (PIO_ISR) Input Change Interrupt Status */
#define PIO_ISR_P17 (0x1u << 17) /**< \brief (PIO_ISR) Input Change Interrupt Status */
#define PIO_ISR_P18 (0x1u << 18) /**< \brief (PIO_ISR) Input Change Interrupt Status */
#define PIO_ISR_P19 (0x1u << 19) /**< \brief (PIO_ISR) Input Change Interrupt Status */
#define PIO_ISR_P20 (0x1u << 20) /**< \brief (PIO_ISR) Input Change Interrupt Status */
#define PIO_ISR_P21 (0x1u << 21) /**< \brief (PIO_ISR) Input Change Interrupt Status */
#define PIO_ISR_P22 (0x1u << 22) /**< \brief (PIO_ISR) Input Change Interrupt Status */
#define PIO_ISR_P23 (0x1u << 23) /**< \brief (PIO_ISR) Input Change Interrupt Status */
#define PIO_ISR_P24 (0x1u << 24) /**< \brief (PIO_ISR) Input Change Interrupt Status */
#define PIO_ISR_P25 (0x1u << 25) /**< \brief (PIO_ISR) Input Change Interrupt Status */
#define PIO_ISR_P26 (0x1u << 26) /**< \brief (PIO_ISR) Input Change Interrupt Status */
#define PIO_ISR_P27 (0x1u << 27) /**< \brief (PIO_ISR) Input Change Interrupt Status */
#define PIO_ISR_P28 (0x1u << 28) /**< \brief (PIO_ISR) Input Change Interrupt Status */
#define PIO_ISR_P29 (0x1u << 29) /**< \brief (PIO_ISR) Input Change Interrupt Status */
#define PIO_ISR_P30 (0x1u << 30) /**< \brief (PIO_ISR) Input Change Interrupt Status */
#define PIO_ISR_P31 (0x1u << 31) /**< \brief (PIO_ISR) Input Change Interrupt Status */
/* -------- PIO_IOFR : (PIO Offset: N/A) PIO I/O Freeze Register -------- */
#define PIO_IOFR_FPHY (0x1u << 0) /**< \brief (PIO_IOFR) Freeze Physical configuration */
#define PIO_IOFR_FINT (0x1u << 1) /**< \brief (PIO_IOFR) Freeze Interrupt configuration */
#define PIO_IOFR_FRZKEY_Pos 8
#define PIO_IOFR_FRZKEY_Msk (0xffffffu << PIO_IOFR_FRZKEY_Pos) /**< \brief (PIO_IOFR) Freeze Key. */
#define PIO_IOFR_FRZKEY(value) ((PIO_IOFR_FRZKEY_Msk & ((value) << PIO_IOFR_FRZKEY_Pos)))
/* -------- PIO_TPFR : (PIO Offset: 0x5D0) PIO Tamper Freeze Register -------- */
#define PIO_TPFR_TAMPFRZ (0x1u << 0) /**< \brief (PIO_TPFR) Freeze on Tamper event */
#define PIO_TPFR_FRZKEY_Pos 8
#define PIO_TPFR_FRZKEY_Msk (0xffffffu << PIO_TPFR_FRZKEY_Pos) /**< \brief (PIO_TPFR) Freeze Key. */
#define PIO_TPFR_FRZKEY(value) ((PIO_TPFR_FRZKEY_Msk & ((value) << PIO_TPFR_FRZKEY_Pos)))
/* -------- PIO_WPMR : (PIO Offset: 0x5E0) PIO Write Protection Mode Register -------- */
#define PIO_WPMR_WPEN (0x1u << 0) /**< \brief (PIO_WPMR) Write Protection Enable */
#define PIO_WPMR_WPKEY_Pos 8
#define PIO_WPMR_WPKEY_Msk (0xffffffu << PIO_WPMR_WPKEY_Pos) /**< \brief (PIO_WPMR) Write Protection Key. */
#define   PIO_WPMR_WPKEY_PASSWD (0x50494Fu << 8) /**< \brief (PIO_WPMR) Writing any other value in this field aborts the write operation of the WPEN bit. Always reads as 0. */
/* -------- PIO_WPSR : (PIO Offset: 0x5E4) PIO Write Protection Status Register -------- */
#define PIO_WPSR_WPVS (0x1u << 0) /**< \brief (PIO_WPSR) Write Protection Violation Status */
#define PIO_WPSR_WPVSRC_Pos 8
#define PIO_WPSR_WPVSRC_Msk (0xffffu << PIO_WPSR_WPVSRC_Pos) /**< \brief (PIO_WPSR) Write Protection Violation Source */
/* -------- PIO_VERSION : (PIO Offset: 0x5FC) Version Register -------- */
#define PIO_VERSION_VERSION_Pos 0
#define PIO_VERSION_VERSION_Msk (0xfffu << PIO_VERSION_VERSION_Pos) /**< \brief (PIO_VERSION) Hardware Module Version */
#define PIO_VERSION_MFN_Pos 16
#define PIO_VERSION_MFN_Msk (0x7u << PIO_VERSION_MFN_Pos) /**< \brief (PIO_VERSION) Metal Fix Number */
/* -------- S_PIO_MSKR : (PIO Offset: N/A) Secure PIO Mask Register -------- */
#define S_PIO_MSKR_MSK0 (0x1u << 0) /**< \brief (S_PIO_MSKR) PIO Line 0 Mask */
#define   S_PIO_MSKR_MSK0_DISABLED (0x0u << 0) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or S_PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   S_PIO_MSKR_MSK0_ENABLED (0x1u << 0) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or s_PIO_IOFR updates the corresponding I/O line configuration. */
#define S_PIO_MSKR_MSK1 (0x1u << 1) /**< \brief (S_PIO_MSKR) PIO Line 1 Mask */
#define   S_PIO_MSKR_MSK1_DISABLED (0x0u << 1) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or S_PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   S_PIO_MSKR_MSK1_ENABLED (0x1u << 1) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or s_PIO_IOFR updates the corresponding I/O line configuration. */
#define S_PIO_MSKR_MSK2 (0x1u << 2) /**< \brief (S_PIO_MSKR) PIO Line 2 Mask */
#define   S_PIO_MSKR_MSK2_DISABLED (0x0u << 2) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or S_PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   S_PIO_MSKR_MSK2_ENABLED (0x1u << 2) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or s_PIO_IOFR updates the corresponding I/O line configuration. */
#define S_PIO_MSKR_MSK3 (0x1u << 3) /**< \brief (S_PIO_MSKR) PIO Line 3 Mask */
#define   S_PIO_MSKR_MSK3_DISABLED (0x0u << 3) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or S_PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   S_PIO_MSKR_MSK3_ENABLED (0x1u << 3) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or s_PIO_IOFR updates the corresponding I/O line configuration. */
#define S_PIO_MSKR_MSK4 (0x1u << 4) /**< \brief (S_PIO_MSKR) PIO Line 4 Mask */
#define   S_PIO_MSKR_MSK4_DISABLED (0x0u << 4) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or S_PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   S_PIO_MSKR_MSK4_ENABLED (0x1u << 4) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or s_PIO_IOFR updates the corresponding I/O line configuration. */
#define S_PIO_MSKR_MSK5 (0x1u << 5) /**< \brief (S_PIO_MSKR) PIO Line 5 Mask */
#define   S_PIO_MSKR_MSK5_DISABLED (0x0u << 5) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or S_PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   S_PIO_MSKR_MSK5_ENABLED (0x1u << 5) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or s_PIO_IOFR updates the corresponding I/O line configuration. */
#define S_PIO_MSKR_MSK6 (0x1u << 6) /**< \brief (S_PIO_MSKR) PIO Line 6 Mask */
#define   S_PIO_MSKR_MSK6_DISABLED (0x0u << 6) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or S_PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   S_PIO_MSKR_MSK6_ENABLED (0x1u << 6) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or s_PIO_IOFR updates the corresponding I/O line configuration. */
#define S_PIO_MSKR_MSK7 (0x1u << 7) /**< \brief (S_PIO_MSKR) PIO Line 7 Mask */
#define   S_PIO_MSKR_MSK7_DISABLED (0x0u << 7) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or S_PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   S_PIO_MSKR_MSK7_ENABLED (0x1u << 7) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or s_PIO_IOFR updates the corresponding I/O line configuration. */
#define S_PIO_MSKR_MSK8 (0x1u << 8) /**< \brief (S_PIO_MSKR) PIO Line 8 Mask */
#define   S_PIO_MSKR_MSK8_DISABLED (0x0u << 8) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or S_PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   S_PIO_MSKR_MSK8_ENABLED (0x1u << 8) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or s_PIO_IOFR updates the corresponding I/O line configuration. */
#define S_PIO_MSKR_MSK9 (0x1u << 9) /**< \brief (S_PIO_MSKR) PIO Line 9 Mask */
#define   S_PIO_MSKR_MSK9_DISABLED (0x0u << 9) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or S_PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   S_PIO_MSKR_MSK9_ENABLED (0x1u << 9) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or s_PIO_IOFR updates the corresponding I/O line configuration. */
#define S_PIO_MSKR_MSK10 (0x1u << 10) /**< \brief (S_PIO_MSKR) PIO Line 10 Mask */
#define   S_PIO_MSKR_MSK10_DISABLED (0x0u << 10) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or S_PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   S_PIO_MSKR_MSK10_ENABLED (0x1u << 10) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or s_PIO_IOFR updates the corresponding I/O line configuration. */
#define S_PIO_MSKR_MSK11 (0x1u << 11) /**< \brief (S_PIO_MSKR) PIO Line 11 Mask */
#define   S_PIO_MSKR_MSK11_DISABLED (0x0u << 11) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or S_PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   S_PIO_MSKR_MSK11_ENABLED (0x1u << 11) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or s_PIO_IOFR updates the corresponding I/O line configuration. */
#define S_PIO_MSKR_MSK12 (0x1u << 12) /**< \brief (S_PIO_MSKR) PIO Line 12 Mask */
#define   S_PIO_MSKR_MSK12_DISABLED (0x0u << 12) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or S_PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   S_PIO_MSKR_MSK12_ENABLED (0x1u << 12) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or s_PIO_IOFR updates the corresponding I/O line configuration. */
#define S_PIO_MSKR_MSK13 (0x1u << 13) /**< \brief (S_PIO_MSKR) PIO Line 13 Mask */
#define   S_PIO_MSKR_MSK13_DISABLED (0x0u << 13) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or S_PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   S_PIO_MSKR_MSK13_ENABLED (0x1u << 13) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or s_PIO_IOFR updates the corresponding I/O line configuration. */
#define S_PIO_MSKR_MSK14 (0x1u << 14) /**< \brief (S_PIO_MSKR) PIO Line 14 Mask */
#define   S_PIO_MSKR_MSK14_DISABLED (0x0u << 14) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or S_PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   S_PIO_MSKR_MSK14_ENABLED (0x1u << 14) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or s_PIO_IOFR updates the corresponding I/O line configuration. */
#define S_PIO_MSKR_MSK15 (0x1u << 15) /**< \brief (S_PIO_MSKR) PIO Line 15 Mask */
#define   S_PIO_MSKR_MSK15_DISABLED (0x0u << 15) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or S_PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   S_PIO_MSKR_MSK15_ENABLED (0x1u << 15) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or s_PIO_IOFR updates the corresponding I/O line configuration. */
#define S_PIO_MSKR_MSK16 (0x1u << 16) /**< \brief (S_PIO_MSKR) PIO Line 16 Mask */
#define   S_PIO_MSKR_MSK16_DISABLED (0x0u << 16) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or S_PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   S_PIO_MSKR_MSK16_ENABLED (0x1u << 16) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or s_PIO_IOFR updates the corresponding I/O line configuration. */
#define S_PIO_MSKR_MSK17 (0x1u << 17) /**< \brief (S_PIO_MSKR) PIO Line 17 Mask */
#define   S_PIO_MSKR_MSK17_DISABLED (0x0u << 17) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or S_PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   S_PIO_MSKR_MSK17_ENABLED (0x1u << 17) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or s_PIO_IOFR updates the corresponding I/O line configuration. */
#define S_PIO_MSKR_MSK18 (0x1u << 18) /**< \brief (S_PIO_MSKR) PIO Line 18 Mask */
#define   S_PIO_MSKR_MSK18_DISABLED (0x0u << 18) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or S_PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   S_PIO_MSKR_MSK18_ENABLED (0x1u << 18) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or s_PIO_IOFR updates the corresponding I/O line configuration. */
#define S_PIO_MSKR_MSK19 (0x1u << 19) /**< \brief (S_PIO_MSKR) PIO Line 19 Mask */
#define   S_PIO_MSKR_MSK19_DISABLED (0x0u << 19) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or S_PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   S_PIO_MSKR_MSK19_ENABLED (0x1u << 19) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or s_PIO_IOFR updates the corresponding I/O line configuration. */
#define S_PIO_MSKR_MSK20 (0x1u << 20) /**< \brief (S_PIO_MSKR) PIO Line 20 Mask */
#define   S_PIO_MSKR_MSK20_DISABLED (0x0u << 20) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or S_PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   S_PIO_MSKR_MSK20_ENABLED (0x1u << 20) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or s_PIO_IOFR updates the corresponding I/O line configuration. */
#define S_PIO_MSKR_MSK21 (0x1u << 21) /**< \brief (S_PIO_MSKR) PIO Line 21 Mask */
#define   S_PIO_MSKR_MSK21_DISABLED (0x0u << 21) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or S_PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   S_PIO_MSKR_MSK21_ENABLED (0x1u << 21) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or s_PIO_IOFR updates the corresponding I/O line configuration. */
#define S_PIO_MSKR_MSK22 (0x1u << 22) /**< \brief (S_PIO_MSKR) PIO Line 22 Mask */
#define   S_PIO_MSKR_MSK22_DISABLED (0x0u << 22) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or S_PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   S_PIO_MSKR_MSK22_ENABLED (0x1u << 22) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or s_PIO_IOFR updates the corresponding I/O line configuration. */
#define S_PIO_MSKR_MSK23 (0x1u << 23) /**< \brief (S_PIO_MSKR) PIO Line 23 Mask */
#define   S_PIO_MSKR_MSK23_DISABLED (0x0u << 23) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or S_PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   S_PIO_MSKR_MSK23_ENABLED (0x1u << 23) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or s_PIO_IOFR updates the corresponding I/O line configuration. */
#define S_PIO_MSKR_MSK24 (0x1u << 24) /**< \brief (S_PIO_MSKR) PIO Line 24 Mask */
#define   S_PIO_MSKR_MSK24_DISABLED (0x0u << 24) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or S_PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   S_PIO_MSKR_MSK24_ENABLED (0x1u << 24) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or s_PIO_IOFR updates the corresponding I/O line configuration. */
#define S_PIO_MSKR_MSK25 (0x1u << 25) /**< \brief (S_PIO_MSKR) PIO Line 25 Mask */
#define   S_PIO_MSKR_MSK25_DISABLED (0x0u << 25) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or S_PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   S_PIO_MSKR_MSK25_ENABLED (0x1u << 25) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or s_PIO_IOFR updates the corresponding I/O line configuration. */
#define S_PIO_MSKR_MSK26 (0x1u << 26) /**< \brief (S_PIO_MSKR) PIO Line 26 Mask */
#define   S_PIO_MSKR_MSK26_DISABLED (0x0u << 26) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or S_PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   S_PIO_MSKR_MSK26_ENABLED (0x1u << 26) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or s_PIO_IOFR updates the corresponding I/O line configuration. */
#define S_PIO_MSKR_MSK27 (0x1u << 27) /**< \brief (S_PIO_MSKR) PIO Line 27 Mask */
#define   S_PIO_MSKR_MSK27_DISABLED (0x0u << 27) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or S_PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   S_PIO_MSKR_MSK27_ENABLED (0x1u << 27) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or s_PIO_IOFR updates the corresponding I/O line configuration. */
#define S_PIO_MSKR_MSK28 (0x1u << 28) /**< \brief (S_PIO_MSKR) PIO Line 28 Mask */
#define   S_PIO_MSKR_MSK28_DISABLED (0x0u << 28) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or S_PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   S_PIO_MSKR_MSK28_ENABLED (0x1u << 28) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or s_PIO_IOFR updates the corresponding I/O line configuration. */
#define S_PIO_MSKR_MSK29 (0x1u << 29) /**< \brief (S_PIO_MSKR) PIO Line 29 Mask */
#define   S_PIO_MSKR_MSK29_DISABLED (0x0u << 29) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or S_PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   S_PIO_MSKR_MSK29_ENABLED (0x1u << 29) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or s_PIO_IOFR updates the corresponding I/O line configuration. */
#define S_PIO_MSKR_MSK30 (0x1u << 30) /**< \brief (S_PIO_MSKR) PIO Line 30 Mask */
#define   S_PIO_MSKR_MSK30_DISABLED (0x0u << 30) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or S_PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   S_PIO_MSKR_MSK30_ENABLED (0x1u << 30) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or s_PIO_IOFR updates the corresponding I/O line configuration. */
#define S_PIO_MSKR_MSK31 (0x1u << 31) /**< \brief (S_PIO_MSKR) PIO Line 31 Mask */
#define   S_PIO_MSKR_MSK31_DISABLED (0x0u << 31) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or S_PIO_IOFR does not affect the corresponding I/O line configuration. */
#define   S_PIO_MSKR_MSK31_ENABLED (0x1u << 31) /**< \brief (S_PIO_MSKR) Writing the S_PIO_CFGR, S_PIO_ODSR or s_PIO_IOFR updates the corresponding I/O line configuration. */
/* -------- S_PIO_CFGR : (PIO Offset: N/A) Secure PIO Configuration Register -------- */
#define S_PIO_CFGR_FUNC_Pos 0
#define S_PIO_CFGR_FUNC_Msk (0x7u << S_PIO_CFGR_FUNC_Pos) /**< \brief (S_PIO_CFGR) I/O Line Function */
#define   S_PIO_CFGR_FUNC_GPIO (0x0u << 0) /**< \brief (S_PIO_CFGR) Select the PIO mode for the selected I/O lines. */
#define   S_PIO_CFGR_FUNC_PERIPH_A (0x1u << 0) /**< \brief (S_PIO_CFGR) Select the peripheral A for the selected I/O lines. */
#define   S_PIO_CFGR_FUNC_PERIPH_B (0x2u << 0) /**< \brief (S_PIO_CFGR) Select the peripheral B for the selected I/O lines. */
#define   S_PIO_CFGR_FUNC_PERIPH_C (0x3u << 0) /**< \brief (S_PIO_CFGR) Select the peripheral Cfor the selected I/O lines. */
#define   S_PIO_CFGR_FUNC_PERIPH_D (0x4u << 0) /**< \brief (S_PIO_CFGR) Select the peripheral D for the selected I/O lines. */
#define   S_PIO_CFGR_FUNC_PERIPH_E (0x5u << 0) /**< \brief (S_PIO_CFGR) Select the peripheral E for the selected I/O lines. */
#define   S_PIO_CFGR_FUNC_PERIPH_F (0x6u << 0) /**< \brief (S_PIO_CFGR) Select the peripheral F for the selected I/O lines. */
#define   S_PIO_CFGR_FUNC_PERIPH_G (0x7u << 0) /**< \brief (S_PIO_CFGR) Select the peripheral G for the selected I/O lines. */
#define S_PIO_CFGR_DIR (0x1u << 8) /**< \brief (S_PIO_CFGR) Direction */
#define   S_PIO_CFGR_DIR_INPUT (0x0u << 8) /**< \brief (S_PIO_CFGR) The selected I/O lines are pure inputs. */
#define   S_PIO_CFGR_DIR_OUTPUT (0x1u << 8) /**< \brief (S_PIO_CFGR) The selected I/O lines are enabled in output. */
#define S_PIO_CFGR_PUEN (0x1u << 9) /**< \brief (S_PIO_CFGR) Pull-Up Enable */
#define   S_PIO_CFGR_PUEN_DISABLED (0x0u << 9) /**< \brief (S_PIO_CFGR) Pull-Up is disabled for the selected I/O lines. */
#define   S_PIO_CFGR_PUEN_ENABLED (0x1u << 9) /**< \brief (S_PIO_CFGR) Pull-Up is enabled for the selected I/O lines. */
#define S_PIO_CFGR_PDEN (0x1u << 10) /**< \brief (S_PIO_CFGR) Pull-Down Enable */
#define   S_PIO_CFGR_PDEN_DISABLED (0x0u << 10) /**< \brief (S_PIO_CFGR) Pull-Down is disabled for the selected I/O lines. */
#define   S_PIO_CFGR_PDEN_ENABLED (0x1u << 10) /**< \brief (S_PIO_CFGR) Pull-Down is enabled for the selected I/O lines only if PUEN is 0. */
#define S_PIO_CFGR_IFEN (0x1u << 12) /**< \brief (S_PIO_CFGR) Input Filter Enable */
#define   S_PIO_CFGR_IFEN_DISABLED (0x0u << 12) /**< \brief (S_PIO_CFGR) The input filter is disabled for the selected I/O lines. */
#define   S_PIO_CFGR_IFEN_ENABLED (0x1u << 12) /**< \brief (S_PIO_CFGR) The input filter is enabled for the selected I/O lines. */
#define S_PIO_CFGR_IFSCEN (0x1u << 13) /**< \brief (S_PIO_CFGR) Input Filter Slow Clock Enable */
#define S_PIO_CFGR_OPD (0x1u << 14) /**< \brief (S_PIO_CFGR) Open-Drain */
#define   S_PIO_CFGR_OPD_DISABLED (0x0u << 14) /**< \brief (S_PIO_CFGR) The open-drain is disabled for the selected I/O lines. I/O lines are driven at high- and low-level. */
#define   S_PIO_CFGR_OPD_ENABLED (0x1u << 14) /**< \brief (S_PIO_CFGR) The open-drain is enabled for the selected I/O lines. I/O lines are driven at low-level only. */
#define S_PIO_CFGR_SCHMITT (0x1u << 15) /**< \brief (S_PIO_CFGR) Schmitt Trigger */
#define   S_PIO_CFGR_SCHMITT_ENABLED (0x0u << 15) /**< \brief (S_PIO_CFGR) Schmitt trigger is enabled for the selected I/O lines. */
#define   S_PIO_CFGR_SCHMITT_DISABLED (0x1u << 15) /**< \brief (S_PIO_CFGR) Schmitt trigger is disabled for the selected I/O lines. */
#define S_PIO_CFGR_DRVSTR_Pos 16
#define S_PIO_CFGR_DRVSTR_Msk (0x3u << S_PIO_CFGR_DRVSTR_Pos) /**< \brief (S_PIO_CFGR)  */
#define S_PIO_CFGR_DRVSTR(value) ((S_PIO_CFGR_DRVSTR_Msk & ((value) << S_PIO_CFGR_DRVSTR_Pos)))
#define S_PIO_CFGR_EVTSEL_Pos 24
#define S_PIO_CFGR_EVTSEL_Msk (0x7u << S_PIO_CFGR_EVTSEL_Pos) /**< \brief (S_PIO_CFGR) Event Selection */
#define   S_PIO_CFGR_EVTSEL_FALLING (0x0u << 24) /**< \brief (S_PIO_CFGR) Event detection on input falling edge . */
#define   S_PIO_CFGR_EVTSEL_RISING (0x1u << 24) /**< \brief (S_PIO_CFGR) Event detection on input rising edge. */
#define   S_PIO_CFGR_EVTSEL_BOTH (0x2u << 24) /**< \brief (S_PIO_CFGR) Event detection on input both edge. */
#define   S_PIO_CFGR_EVTSEL_LOW (0x3u << 24) /**< \brief (S_PIO_CFGR) Event detection on low level input. */
#define   S_PIO_CFGR_EVTSEL_HIGH (0x4u << 24) /**< \brief (S_PIO_CFGR) Event detection on high level input. */
#define S_PIO_CFGR_PCFS (0x1u << 29) /**< \brief (S_PIO_CFGR) Physical Configuration Freezed Status */
#define   S_PIO_CFGR_PCFS_NOT_FREEZED (0x0u << 29) /**< \brief (S_PIO_CFGR) The fileds are not freezed and can be written for this I/O line. */
#define   S_PIO_CFGR_PCFS_FREEZE (0x1u << 29) /**< \brief (S_PIO_CFGR) The fields are freeze and can not be written for this I/O line. Only an hardware reset can release thess fields. */
#define S_PIO_CFGR_ICFS (0x1u << 30) /**< \brief (S_PIO_CFGR) Interrupt Configuration Freezed Status */
#define   S_PIO_CFGR_ICFS_NOT_FREEZED (0x0u << 30) /**< \brief (S_PIO_CFGR) The fileds are not freezed and can be written for this I/O line. */
#define   S_PIO_CFGR_ICFS_FREEZE (0x1u << 30) /**< \brief (S_PIO_CFGR) The fields are freeze and can not be written for this I/O line. Only an hardware reset can release thess fields. */
#define S_PIO_CFGR_TAMPEN (0x1u << 31) /**< \brief (S_PIO_CFGR) Tamper Enable */
#define   S_PIO_CFGR_TAMPEN_NO_FREEZE (0x0u << 31) /**< \brief (S_PIO_CFGR) No effect on the selected I/O lines. */
#define   S_PIO_CFGR_TAMPEN_FREEZE (0x1u << 31) /**< \brief (S_PIO_CFGR) The selected I/O lines are automatically set in GPIO input with pull-up in case of a tamper event detection. */
/* -------- S_PIO_PDSR : (PIO Offset: N/A) Secure PIO Pin Data Status Register -------- */
#define S_PIO_PDSR_P0 (0x1u << 0) /**< \brief (S_PIO_PDSR) Input Data Status */
#define S_PIO_PDSR_P1 (0x1u << 1) /**< \brief (S_PIO_PDSR) Input Data Status */
#define S_PIO_PDSR_P2 (0x1u << 2) /**< \brief (S_PIO_PDSR) Input Data Status */
#define S_PIO_PDSR_P3 (0x1u << 3) /**< \brief (S_PIO_PDSR) Input Data Status */
#define S_PIO_PDSR_P4 (0x1u << 4) /**< \brief (S_PIO_PDSR) Input Data Status */
#define S_PIO_PDSR_P5 (0x1u << 5) /**< \brief (S_PIO_PDSR) Input Data Status */
#define S_PIO_PDSR_P6 (0x1u << 6) /**< \brief (S_PIO_PDSR) Input Data Status */
#define S_PIO_PDSR_P7 (0x1u << 7) /**< \brief (S_PIO_PDSR) Input Data Status */
#define S_PIO_PDSR_P8 (0x1u << 8) /**< \brief (S_PIO_PDSR) Input Data Status */
#define S_PIO_PDSR_P9 (0x1u << 9) /**< \brief (S_PIO_PDSR) Input Data Status */
#define S_PIO_PDSR_P10 (0x1u << 10) /**< \brief (S_PIO_PDSR) Input Data Status */
#define S_PIO_PDSR_P11 (0x1u << 11) /**< \brief (S_PIO_PDSR) Input Data Status */
#define S_PIO_PDSR_P12 (0x1u << 12) /**< \brief (S_PIO_PDSR) Input Data Status */
#define S_PIO_PDSR_P13 (0x1u << 13) /**< \brief (S_PIO_PDSR) Input Data Status */
#define S_PIO_PDSR_P14 (0x1u << 14) /**< \brief (S_PIO_PDSR) Input Data Status */
#define S_PIO_PDSR_P15 (0x1u << 15) /**< \brief (S_PIO_PDSR) Input Data Status */
#define S_PIO_PDSR_P16 (0x1u << 16) /**< \brief (S_PIO_PDSR) Input Data Status */
#define S_PIO_PDSR_P17 (0x1u << 17) /**< \brief (S_PIO_PDSR) Input Data Status */
#define S_PIO_PDSR_P18 (0x1u << 18) /**< \brief (S_PIO_PDSR) Input Data Status */
#define S_PIO_PDSR_P19 (0x1u << 19) /**< \brief (S_PIO_PDSR) Input Data Status */
#define S_PIO_PDSR_P20 (0x1u << 20) /**< \brief (S_PIO_PDSR) Input Data Status */
#define S_PIO_PDSR_P21 (0x1u << 21) /**< \brief (S_PIO_PDSR) Input Data Status */
#define S_PIO_PDSR_P22 (0x1u << 22) /**< \brief (S_PIO_PDSR) Input Data Status */
#define S_PIO_PDSR_P23 (0x1u << 23) /**< \brief (S_PIO_PDSR) Input Data Status */
#define S_PIO_PDSR_P24 (0x1u << 24) /**< \brief (S_PIO_PDSR) Input Data Status */
#define S_PIO_PDSR_P25 (0x1u << 25) /**< \brief (S_PIO_PDSR) Input Data Status */
#define S_PIO_PDSR_P26 (0x1u << 26) /**< \brief (S_PIO_PDSR) Input Data Status */
#define S_PIO_PDSR_P27 (0x1u << 27) /**< \brief (S_PIO_PDSR) Input Data Status */
#define S_PIO_PDSR_P28 (0x1u << 28) /**< \brief (S_PIO_PDSR) Input Data Status */
#define S_PIO_PDSR_P29 (0x1u << 29) /**< \brief (S_PIO_PDSR) Input Data Status */
#define S_PIO_PDSR_P30 (0x1u << 30) /**< \brief (S_PIO_PDSR) Input Data Status */
#define S_PIO_PDSR_P31 (0x1u << 31) /**< \brief (S_PIO_PDSR) Input Data Status */
/* -------- S_PIO_SODR : (PIO Offset: N/A) Secure PIO Set Output Data Register -------- */
#define S_PIO_SODR_P0 (0x1u << 0) /**< \brief (S_PIO_SODR) Set Output Data */
#define S_PIO_SODR_P1 (0x1u << 1) /**< \brief (S_PIO_SODR) Set Output Data */
#define S_PIO_SODR_P2 (0x1u << 2) /**< \brief (S_PIO_SODR) Set Output Data */
#define S_PIO_SODR_P3 (0x1u << 3) /**< \brief (S_PIO_SODR) Set Output Data */
#define S_PIO_SODR_P4 (0x1u << 4) /**< \brief (S_PIO_SODR) Set Output Data */
#define S_PIO_SODR_P5 (0x1u << 5) /**< \brief (S_PIO_SODR) Set Output Data */
#define S_PIO_SODR_P6 (0x1u << 6) /**< \brief (S_PIO_SODR) Set Output Data */
#define S_PIO_SODR_P7 (0x1u << 7) /**< \brief (S_PIO_SODR) Set Output Data */
#define S_PIO_SODR_P8 (0x1u << 8) /**< \brief (S_PIO_SODR) Set Output Data */
#define S_PIO_SODR_P9 (0x1u << 9) /**< \brief (S_PIO_SODR) Set Output Data */
#define S_PIO_SODR_P10 (0x1u << 10) /**< \brief (S_PIO_SODR) Set Output Data */
#define S_PIO_SODR_P11 (0x1u << 11) /**< \brief (S_PIO_SODR) Set Output Data */
#define S_PIO_SODR_P12 (0x1u << 12) /**< \brief (S_PIO_SODR) Set Output Data */
#define S_PIO_SODR_P13 (0x1u << 13) /**< \brief (S_PIO_SODR) Set Output Data */
#define S_PIO_SODR_P14 (0x1u << 14) /**< \brief (S_PIO_SODR) Set Output Data */
#define S_PIO_SODR_P15 (0x1u << 15) /**< \brief (S_PIO_SODR) Set Output Data */
#define S_PIO_SODR_P16 (0x1u << 16) /**< \brief (S_PIO_SODR) Set Output Data */
#define S_PIO_SODR_P17 (0x1u << 17) /**< \brief (S_PIO_SODR) Set Output Data */
#define S_PIO_SODR_P18 (0x1u << 18) /**< \brief (S_PIO_SODR) Set Output Data */
#define S_PIO_SODR_P19 (0x1u << 19) /**< \brief (S_PIO_SODR) Set Output Data */
#define S_PIO_SODR_P20 (0x1u << 20) /**< \brief (S_PIO_SODR) Set Output Data */
#define S_PIO_SODR_P21 (0x1u << 21) /**< \brief (S_PIO_SODR) Set Output Data */
#define S_PIO_SODR_P22 (0x1u << 22) /**< \brief (S_PIO_SODR) Set Output Data */
#define S_PIO_SODR_P23 (0x1u << 23) /**< \brief (S_PIO_SODR) Set Output Data */
#define S_PIO_SODR_P24 (0x1u << 24) /**< \brief (S_PIO_SODR) Set Output Data */
#define S_PIO_SODR_P25 (0x1u << 25) /**< \brief (S_PIO_SODR) Set Output Data */
#define S_PIO_SODR_P26 (0x1u << 26) /**< \brief (S_PIO_SODR) Set Output Data */
#define S_PIO_SODR_P27 (0x1u << 27) /**< \brief (S_PIO_SODR) Set Output Data */
#define S_PIO_SODR_P28 (0x1u << 28) /**< \brief (S_PIO_SODR) Set Output Data */
#define S_PIO_SODR_P29 (0x1u << 29) /**< \brief (S_PIO_SODR) Set Output Data */
#define S_PIO_SODR_P30 (0x1u << 30) /**< \brief (S_PIO_SODR) Set Output Data */
#define S_PIO_SODR_P31 (0x1u << 31) /**< \brief (S_PIO_SODR) Set Output Data */
/* -------- S_PIO_CODR : (PIO Offset: N/A) Secure PIO Clear Output Data Register -------- */
#define S_PIO_CODR_P0 (0x1u << 0) /**< \brief (S_PIO_CODR) Clear Output Data */
#define S_PIO_CODR_P1 (0x1u << 1) /**< \brief (S_PIO_CODR) Clear Output Data */
#define S_PIO_CODR_P2 (0x1u << 2) /**< \brief (S_PIO_CODR) Clear Output Data */
#define S_PIO_CODR_P3 (0x1u << 3) /**< \brief (S_PIO_CODR) Clear Output Data */
#define S_PIO_CODR_P4 (0x1u << 4) /**< \brief (S_PIO_CODR) Clear Output Data */
#define S_PIO_CODR_P5 (0x1u << 5) /**< \brief (S_PIO_CODR) Clear Output Data */
#define S_PIO_CODR_P6 (0x1u << 6) /**< \brief (S_PIO_CODR) Clear Output Data */
#define S_PIO_CODR_P7 (0x1u << 7) /**< \brief (S_PIO_CODR) Clear Output Data */
#define S_PIO_CODR_P8 (0x1u << 8) /**< \brief (S_PIO_CODR) Clear Output Data */
#define S_PIO_CODR_P9 (0x1u << 9) /**< \brief (S_PIO_CODR) Clear Output Data */
#define S_PIO_CODR_P10 (0x1u << 10) /**< \brief (S_PIO_CODR) Clear Output Data */
#define S_PIO_CODR_P11 (0x1u << 11) /**< \brief (S_PIO_CODR) Clear Output Data */
#define S_PIO_CODR_P12 (0x1u << 12) /**< \brief (S_PIO_CODR) Clear Output Data */
#define S_PIO_CODR_P13 (0x1u << 13) /**< \brief (S_PIO_CODR) Clear Output Data */
#define S_PIO_CODR_P14 (0x1u << 14) /**< \brief (S_PIO_CODR) Clear Output Data */
#define S_PIO_CODR_P15 (0x1u << 15) /**< \brief (S_PIO_CODR) Clear Output Data */
#define S_PIO_CODR_P16 (0x1u << 16) /**< \brief (S_PIO_CODR) Clear Output Data */
#define S_PIO_CODR_P17 (0x1u << 17) /**< \brief (S_PIO_CODR) Clear Output Data */
#define S_PIO_CODR_P18 (0x1u << 18) /**< \brief (S_PIO_CODR) Clear Output Data */
#define S_PIO_CODR_P19 (0x1u << 19) /**< \brief (S_PIO_CODR) Clear Output Data */
#define S_PIO_CODR_P20 (0x1u << 20) /**< \brief (S_PIO_CODR) Clear Output Data */
#define S_PIO_CODR_P21 (0x1u << 21) /**< \brief (S_PIO_CODR) Clear Output Data */
#define S_PIO_CODR_P22 (0x1u << 22) /**< \brief (S_PIO_CODR) Clear Output Data */
#define S_PIO_CODR_P23 (0x1u << 23) /**< \brief (S_PIO_CODR) Clear Output Data */
#define S_PIO_CODR_P24 (0x1u << 24) /**< \brief (S_PIO_CODR) Clear Output Data */
#define S_PIO_CODR_P25 (0x1u << 25) /**< \brief (S_PIO_CODR) Clear Output Data */
#define S_PIO_CODR_P26 (0x1u << 26) /**< \brief (S_PIO_CODR) Clear Output Data */
#define S_PIO_CODR_P27 (0x1u << 27) /**< \brief (S_PIO_CODR) Clear Output Data */
#define S_PIO_CODR_P28 (0x1u << 28) /**< \brief (S_PIO_CODR) Clear Output Data */
#define S_PIO_CODR_P29 (0x1u << 29) /**< \brief (S_PIO_CODR) Clear Output Data */
#define S_PIO_CODR_P30 (0x1u << 30) /**< \brief (S_PIO_CODR) Clear Output Data */
#define S_PIO_CODR_P31 (0x1u << 31) /**< \brief (S_PIO_CODR) Clear Output Data */
/* -------- S_PIO_ODSR : (PIO Offset: N/A) Secure PIO Output Data Status Register -------- */
#define S_PIO_ODSR_P0 (0x1u << 0) /**< \brief (S_PIO_ODSR) Output Data Status */
#define S_PIO_ODSR_P1 (0x1u << 1) /**< \brief (S_PIO_ODSR) Output Data Status */
#define S_PIO_ODSR_P2 (0x1u << 2) /**< \brief (S_PIO_ODSR) Output Data Status */
#define S_PIO_ODSR_P3 (0x1u << 3) /**< \brief (S_PIO_ODSR) Output Data Status */
#define S_PIO_ODSR_P4 (0x1u << 4) /**< \brief (S_PIO_ODSR) Output Data Status */
#define S_PIO_ODSR_P5 (0x1u << 5) /**< \brief (S_PIO_ODSR) Output Data Status */
#define S_PIO_ODSR_P6 (0x1u << 6) /**< \brief (S_PIO_ODSR) Output Data Status */
#define S_PIO_ODSR_P7 (0x1u << 7) /**< \brief (S_PIO_ODSR) Output Data Status */
#define S_PIO_ODSR_P8 (0x1u << 8) /**< \brief (S_PIO_ODSR) Output Data Status */
#define S_PIO_ODSR_P9 (0x1u << 9) /**< \brief (S_PIO_ODSR) Output Data Status */
#define S_PIO_ODSR_P10 (0x1u << 10) /**< \brief (S_PIO_ODSR) Output Data Status */
#define S_PIO_ODSR_P11 (0x1u << 11) /**< \brief (S_PIO_ODSR) Output Data Status */
#define S_PIO_ODSR_P12 (0x1u << 12) /**< \brief (S_PIO_ODSR) Output Data Status */
#define S_PIO_ODSR_P13 (0x1u << 13) /**< \brief (S_PIO_ODSR) Output Data Status */
#define S_PIO_ODSR_P14 (0x1u << 14) /**< \brief (S_PIO_ODSR) Output Data Status */
#define S_PIO_ODSR_P15 (0x1u << 15) /**< \brief (S_PIO_ODSR) Output Data Status */
#define S_PIO_ODSR_P16 (0x1u << 16) /**< \brief (S_PIO_ODSR) Output Data Status */
#define S_PIO_ODSR_P17 (0x1u << 17) /**< \brief (S_PIO_ODSR) Output Data Status */
#define S_PIO_ODSR_P18 (0x1u << 18) /**< \brief (S_PIO_ODSR) Output Data Status */
#define S_PIO_ODSR_P19 (0x1u << 19) /**< \brief (S_PIO_ODSR) Output Data Status */
#define S_PIO_ODSR_P20 (0x1u << 20) /**< \brief (S_PIO_ODSR) Output Data Status */
#define S_PIO_ODSR_P21 (0x1u << 21) /**< \brief (S_PIO_ODSR) Output Data Status */
#define S_PIO_ODSR_P22 (0x1u << 22) /**< \brief (S_PIO_ODSR) Output Data Status */
#define S_PIO_ODSR_P23 (0x1u << 23) /**< \brief (S_PIO_ODSR) Output Data Status */
#define S_PIO_ODSR_P24 (0x1u << 24) /**< \brief (S_PIO_ODSR) Output Data Status */
#define S_PIO_ODSR_P25 (0x1u << 25) /**< \brief (S_PIO_ODSR) Output Data Status */
#define S_PIO_ODSR_P26 (0x1u << 26) /**< \brief (S_PIO_ODSR) Output Data Status */
#define S_PIO_ODSR_P27 (0x1u << 27) /**< \brief (S_PIO_ODSR) Output Data Status */
#define S_PIO_ODSR_P28 (0x1u << 28) /**< \brief (S_PIO_ODSR) Output Data Status */
#define S_PIO_ODSR_P29 (0x1u << 29) /**< \brief (S_PIO_ODSR) Output Data Status */
#define S_PIO_ODSR_P30 (0x1u << 30) /**< \brief (S_PIO_ODSR) Output Data Status */
#define S_PIO_ODSR_P31 (0x1u << 31) /**< \brief (S_PIO_ODSR) Output Data Status */
/* -------- S_PIO_IER : (PIO Offset: N/A) Secure PIO Interrupt Enable Register -------- */
#define S_PIO_IER_P0 (0x1u << 0) /**< \brief (S_PIO_IER) Input Change Interrupt Enable */
#define S_PIO_IER_P1 (0x1u << 1) /**< \brief (S_PIO_IER) Input Change Interrupt Enable */
#define S_PIO_IER_P2 (0x1u << 2) /**< \brief (S_PIO_IER) Input Change Interrupt Enable */
#define S_PIO_IER_P3 (0x1u << 3) /**< \brief (S_PIO_IER) Input Change Interrupt Enable */
#define S_PIO_IER_P4 (0x1u << 4) /**< \brief (S_PIO_IER) Input Change Interrupt Enable */
#define S_PIO_IER_P5 (0x1u << 5) /**< \brief (S_PIO_IER) Input Change Interrupt Enable */
#define S_PIO_IER_P6 (0x1u << 6) /**< \brief (S_PIO_IER) Input Change Interrupt Enable */
#define S_PIO_IER_P7 (0x1u << 7) /**< \brief (S_PIO_IER) Input Change Interrupt Enable */
#define S_PIO_IER_P8 (0x1u << 8) /**< \brief (S_PIO_IER) Input Change Interrupt Enable */
#define S_PIO_IER_P9 (0x1u << 9) /**< \brief (S_PIO_IER) Input Change Interrupt Enable */
#define S_PIO_IER_P10 (0x1u << 10) /**< \brief (S_PIO_IER) Input Change Interrupt Enable */
#define S_PIO_IER_P11 (0x1u << 11) /**< \brief (S_PIO_IER) Input Change Interrupt Enable */
#define S_PIO_IER_P12 (0x1u << 12) /**< \brief (S_PIO_IER) Input Change Interrupt Enable */
#define S_PIO_IER_P13 (0x1u << 13) /**< \brief (S_PIO_IER) Input Change Interrupt Enable */
#define S_PIO_IER_P14 (0x1u << 14) /**< \brief (S_PIO_IER) Input Change Interrupt Enable */
#define S_PIO_IER_P15 (0x1u << 15) /**< \brief (S_PIO_IER) Input Change Interrupt Enable */
#define S_PIO_IER_P16 (0x1u << 16) /**< \brief (S_PIO_IER) Input Change Interrupt Enable */
#define S_PIO_IER_P17 (0x1u << 17) /**< \brief (S_PIO_IER) Input Change Interrupt Enable */
#define S_PIO_IER_P18 (0x1u << 18) /**< \brief (S_PIO_IER) Input Change Interrupt Enable */
#define S_PIO_IER_P19 (0x1u << 19) /**< \brief (S_PIO_IER) Input Change Interrupt Enable */
#define S_PIO_IER_P20 (0x1u << 20) /**< \brief (S_PIO_IER) Input Change Interrupt Enable */
#define S_PIO_IER_P21 (0x1u << 21) /**< \brief (S_PIO_IER) Input Change Interrupt Enable */
#define S_PIO_IER_P22 (0x1u << 22) /**< \brief (S_PIO_IER) Input Change Interrupt Enable */
#define S_PIO_IER_P23 (0x1u << 23) /**< \brief (S_PIO_IER) Input Change Interrupt Enable */
#define S_PIO_IER_P24 (0x1u << 24) /**< \brief (S_PIO_IER) Input Change Interrupt Enable */
#define S_PIO_IER_P25 (0x1u << 25) /**< \brief (S_PIO_IER) Input Change Interrupt Enable */
#define S_PIO_IER_P26 (0x1u << 26) /**< \brief (S_PIO_IER) Input Change Interrupt Enable */
#define S_PIO_IER_P27 (0x1u << 27) /**< \brief (S_PIO_IER) Input Change Interrupt Enable */
#define S_PIO_IER_P28 (0x1u << 28) /**< \brief (S_PIO_IER) Input Change Interrupt Enable */
#define S_PIO_IER_P29 (0x1u << 29) /**< \brief (S_PIO_IER) Input Change Interrupt Enable */
#define S_PIO_IER_P30 (0x1u << 30) /**< \brief (S_PIO_IER) Input Change Interrupt Enable */
#define S_PIO_IER_P31 (0x1u << 31) /**< \brief (S_PIO_IER) Input Change Interrupt Enable */
/* -------- S_PIO_IDR : (PIO Offset: N/A) Secure PIO Interrupt Disable Register -------- */
#define S_PIO_IDR_P0 (0x1u << 0) /**< \brief (S_PIO_IDR) Input Change Interrupt Disable */
#define S_PIO_IDR_P1 (0x1u << 1) /**< \brief (S_PIO_IDR) Input Change Interrupt Disable */
#define S_PIO_IDR_P2 (0x1u << 2) /**< \brief (S_PIO_IDR) Input Change Interrupt Disable */
#define S_PIO_IDR_P3 (0x1u << 3) /**< \brief (S_PIO_IDR) Input Change Interrupt Disable */
#define S_PIO_IDR_P4 (0x1u << 4) /**< \brief (S_PIO_IDR) Input Change Interrupt Disable */
#define S_PIO_IDR_P5 (0x1u << 5) /**< \brief (S_PIO_IDR) Input Change Interrupt Disable */
#define S_PIO_IDR_P6 (0x1u << 6) /**< \brief (S_PIO_IDR) Input Change Interrupt Disable */
#define S_PIO_IDR_P7 (0x1u << 7) /**< \brief (S_PIO_IDR) Input Change Interrupt Disable */
#define S_PIO_IDR_P8 (0x1u << 8) /**< \brief (S_PIO_IDR) Input Change Interrupt Disable */
#define S_PIO_IDR_P9 (0x1u << 9) /**< \brief (S_PIO_IDR) Input Change Interrupt Disable */
#define S_PIO_IDR_P10 (0x1u << 10) /**< \brief (S_PIO_IDR) Input Change Interrupt Disable */
#define S_PIO_IDR_P11 (0x1u << 11) /**< \brief (S_PIO_IDR) Input Change Interrupt Disable */
#define S_PIO_IDR_P12 (0x1u << 12) /**< \brief (S_PIO_IDR) Input Change Interrupt Disable */
#define S_PIO_IDR_P13 (0x1u << 13) /**< \brief (S_PIO_IDR) Input Change Interrupt Disable */
#define S_PIO_IDR_P14 (0x1u << 14) /**< \brief (S_PIO_IDR) Input Change Interrupt Disable */
#define S_PIO_IDR_P15 (0x1u << 15) /**< \brief (S_PIO_IDR) Input Change Interrupt Disable */
#define S_PIO_IDR_P16 (0x1u << 16) /**< \brief (S_PIO_IDR) Input Change Interrupt Disable */
#define S_PIO_IDR_P17 (0x1u << 17) /**< \brief (S_PIO_IDR) Input Change Interrupt Disable */
#define S_PIO_IDR_P18 (0x1u << 18) /**< \brief (S_PIO_IDR) Input Change Interrupt Disable */
#define S_PIO_IDR_P19 (0x1u << 19) /**< \brief (S_PIO_IDR) Input Change Interrupt Disable */
#define S_PIO_IDR_P20 (0x1u << 20) /**< \brief (S_PIO_IDR) Input Change Interrupt Disable */
#define S_PIO_IDR_P21 (0x1u << 21) /**< \brief (S_PIO_IDR) Input Change Interrupt Disable */
#define S_PIO_IDR_P22 (0x1u << 22) /**< \brief (S_PIO_IDR) Input Change Interrupt Disable */
#define S_PIO_IDR_P23 (0x1u << 23) /**< \brief (S_PIO_IDR) Input Change Interrupt Disable */
#define S_PIO_IDR_P24 (0x1u << 24) /**< \brief (S_PIO_IDR) Input Change Interrupt Disable */
#define S_PIO_IDR_P25 (0x1u << 25) /**< \brief (S_PIO_IDR) Input Change Interrupt Disable */
#define S_PIO_IDR_P26 (0x1u << 26) /**< \brief (S_PIO_IDR) Input Change Interrupt Disable */
#define S_PIO_IDR_P27 (0x1u << 27) /**< \brief (S_PIO_IDR) Input Change Interrupt Disable */
#define S_PIO_IDR_P28 (0x1u << 28) /**< \brief (S_PIO_IDR) Input Change Interrupt Disable */
#define S_PIO_IDR_P29 (0x1u << 29) /**< \brief (S_PIO_IDR) Input Change Interrupt Disable */
#define S_PIO_IDR_P30 (0x1u << 30) /**< \brief (S_PIO_IDR) Input Change Interrupt Disable */
#define S_PIO_IDR_P31 (0x1u << 31) /**< \brief (S_PIO_IDR) Input Change Interrupt Disable */
/* -------- S_PIO_IMR : (PIO Offset: N/A) Secure PIO Interrupt Mask Register -------- */
#define S_PIO_IMR_P0 (0x1u << 0) /**< \brief (S_PIO_IMR) Input Change Interrupt Mask */
#define S_PIO_IMR_P1 (0x1u << 1) /**< \brief (S_PIO_IMR) Input Change Interrupt Mask */
#define S_PIO_IMR_P2 (0x1u << 2) /**< \brief (S_PIO_IMR) Input Change Interrupt Mask */
#define S_PIO_IMR_P3 (0x1u << 3) /**< \brief (S_PIO_IMR) Input Change Interrupt Mask */
#define S_PIO_IMR_P4 (0x1u << 4) /**< \brief (S_PIO_IMR) Input Change Interrupt Mask */
#define S_PIO_IMR_P5 (0x1u << 5) /**< \brief (S_PIO_IMR) Input Change Interrupt Mask */
#define S_PIO_IMR_P6 (0x1u << 6) /**< \brief (S_PIO_IMR) Input Change Interrupt Mask */
#define S_PIO_IMR_P7 (0x1u << 7) /**< \brief (S_PIO_IMR) Input Change Interrupt Mask */
#define S_PIO_IMR_P8 (0x1u << 8) /**< \brief (S_PIO_IMR) Input Change Interrupt Mask */
#define S_PIO_IMR_P9 (0x1u << 9) /**< \brief (S_PIO_IMR) Input Change Interrupt Mask */
#define S_PIO_IMR_P10 (0x1u << 10) /**< \brief (S_PIO_IMR) Input Change Interrupt Mask */
#define S_PIO_IMR_P11 (0x1u << 11) /**< \brief (S_PIO_IMR) Input Change Interrupt Mask */
#define S_PIO_IMR_P12 (0x1u << 12) /**< \brief (S_PIO_IMR) Input Change Interrupt Mask */
#define S_PIO_IMR_P13 (0x1u << 13) /**< \brief (S_PIO_IMR) Input Change Interrupt Mask */
#define S_PIO_IMR_P14 (0x1u << 14) /**< \brief (S_PIO_IMR) Input Change Interrupt Mask */
#define S_PIO_IMR_P15 (0x1u << 15) /**< \brief (S_PIO_IMR) Input Change Interrupt Mask */
#define S_PIO_IMR_P16 (0x1u << 16) /**< \brief (S_PIO_IMR) Input Change Interrupt Mask */
#define S_PIO_IMR_P17 (0x1u << 17) /**< \brief (S_PIO_IMR) Input Change Interrupt Mask */
#define S_PIO_IMR_P18 (0x1u << 18) /**< \brief (S_PIO_IMR) Input Change Interrupt Mask */
#define S_PIO_IMR_P19 (0x1u << 19) /**< \brief (S_PIO_IMR) Input Change Interrupt Mask */
#define S_PIO_IMR_P20 (0x1u << 20) /**< \brief (S_PIO_IMR) Input Change Interrupt Mask */
#define S_PIO_IMR_P21 (0x1u << 21) /**< \brief (S_PIO_IMR) Input Change Interrupt Mask */
#define S_PIO_IMR_P22 (0x1u << 22) /**< \brief (S_PIO_IMR) Input Change Interrupt Mask */
#define S_PIO_IMR_P23 (0x1u << 23) /**< \brief (S_PIO_IMR) Input Change Interrupt Mask */
#define S_PIO_IMR_P24 (0x1u << 24) /**< \brief (S_PIO_IMR) Input Change Interrupt Mask */
#define S_PIO_IMR_P25 (0x1u << 25) /**< \brief (S_PIO_IMR) Input Change Interrupt Mask */
#define S_PIO_IMR_P26 (0x1u << 26) /**< \brief (S_PIO_IMR) Input Change Interrupt Mask */
#define S_PIO_IMR_P27 (0x1u << 27) /**< \brief (S_PIO_IMR) Input Change Interrupt Mask */
#define S_PIO_IMR_P28 (0x1u << 28) /**< \brief (S_PIO_IMR) Input Change Interrupt Mask */
#define S_PIO_IMR_P29 (0x1u << 29) /**< \brief (S_PIO_IMR) Input Change Interrupt Mask */
#define S_PIO_IMR_P30 (0x1u << 30) /**< \brief (S_PIO_IMR) Input Change Interrupt Mask */
#define S_PIO_IMR_P31 (0x1u << 31) /**< \brief (S_PIO_IMR) Input Change Interrupt Mask */
/* -------- S_PIO_ISR : (PIO Offset: N/A) Secure PIO Interrupt Status Register -------- */
#define S_PIO_ISR_P0 (0x1u << 0) /**< \brief (S_PIO_ISR) Input Change Interrupt Status */
#define S_PIO_ISR_P1 (0x1u << 1) /**< \brief (S_PIO_ISR) Input Change Interrupt Status */
#define S_PIO_ISR_P2 (0x1u << 2) /**< \brief (S_PIO_ISR) Input Change Interrupt Status */
#define S_PIO_ISR_P3 (0x1u << 3) /**< \brief (S_PIO_ISR) Input Change Interrupt Status */
#define S_PIO_ISR_P4 (0x1u << 4) /**< \brief (S_PIO_ISR) Input Change Interrupt Status */
#define S_PIO_ISR_P5 (0x1u << 5) /**< \brief (S_PIO_ISR) Input Change Interrupt Status */
#define S_PIO_ISR_P6 (0x1u << 6) /**< \brief (S_PIO_ISR) Input Change Interrupt Status */
#define S_PIO_ISR_P7 (0x1u << 7) /**< \brief (S_PIO_ISR) Input Change Interrupt Status */
#define S_PIO_ISR_P8 (0x1u << 8) /**< \brief (S_PIO_ISR) Input Change Interrupt Status */
#define S_PIO_ISR_P9 (0x1u << 9) /**< \brief (S_PIO_ISR) Input Change Interrupt Status */
#define S_PIO_ISR_P10 (0x1u << 10) /**< \brief (S_PIO_ISR) Input Change Interrupt Status */
#define S_PIO_ISR_P11 (0x1u << 11) /**< \brief (S_PIO_ISR) Input Change Interrupt Status */
#define S_PIO_ISR_P12 (0x1u << 12) /**< \brief (S_PIO_ISR) Input Change Interrupt Status */
#define S_PIO_ISR_P13 (0x1u << 13) /**< \brief (S_PIO_ISR) Input Change Interrupt Status */
#define S_PIO_ISR_P14 (0x1u << 14) /**< \brief (S_PIO_ISR) Input Change Interrupt Status */
#define S_PIO_ISR_P15 (0x1u << 15) /**< \brief (S_PIO_ISR) Input Change Interrupt Status */
#define S_PIO_ISR_P16 (0x1u << 16) /**< \brief (S_PIO_ISR) Input Change Interrupt Status */
#define S_PIO_ISR_P17 (0x1u << 17) /**< \brief (S_PIO_ISR) Input Change Interrupt Status */
#define S_PIO_ISR_P18 (0x1u << 18) /**< \brief (S_PIO_ISR) Input Change Interrupt Status */
#define S_PIO_ISR_P19 (0x1u << 19) /**< \brief (S_PIO_ISR) Input Change Interrupt Status */
#define S_PIO_ISR_P20 (0x1u << 20) /**< \brief (S_PIO_ISR) Input Change Interrupt Status */
#define S_PIO_ISR_P21 (0x1u << 21) /**< \brief (S_PIO_ISR) Input Change Interrupt Status */
#define S_PIO_ISR_P22 (0x1u << 22) /**< \brief (S_PIO_ISR) Input Change Interrupt Status */
#define S_PIO_ISR_P23 (0x1u << 23) /**< \brief (S_PIO_ISR) Input Change Interrupt Status */
#define S_PIO_ISR_P24 (0x1u << 24) /**< \brief (S_PIO_ISR) Input Change Interrupt Status */
#define S_PIO_ISR_P25 (0x1u << 25) /**< \brief (S_PIO_ISR) Input Change Interrupt Status */
#define S_PIO_ISR_P26 (0x1u << 26) /**< \brief (S_PIO_ISR) Input Change Interrupt Status */
#define S_PIO_ISR_P27 (0x1u << 27) /**< \brief (S_PIO_ISR) Input Change Interrupt Status */
#define S_PIO_ISR_P28 (0x1u << 28) /**< \brief (S_PIO_ISR) Input Change Interrupt Status */
#define S_PIO_ISR_P29 (0x1u << 29) /**< \brief (S_PIO_ISR) Input Change Interrupt Status */
#define S_PIO_ISR_P30 (0x1u << 30) /**< \brief (S_PIO_ISR) Input Change Interrupt Status */
#define S_PIO_ISR_P31 (0x1u << 31) /**< \brief (S_PIO_ISR) Input Change Interrupt Status */
/* -------- S_PIO_SIONR : (PIO Offset: N/A) Secure PIO Set I/O Non-Secure Register -------- */
#define S_PIO_SIONR_P0 (0x1u << 0) /**< \brief (S_PIO_SIONR) Set I/O Non-Secure */
#define S_PIO_SIONR_P1 (0x1u << 1) /**< \brief (S_PIO_SIONR) Set I/O Non-Secure */
#define S_PIO_SIONR_P2 (0x1u << 2) /**< \brief (S_PIO_SIONR) Set I/O Non-Secure */
#define S_PIO_SIONR_P3 (0x1u << 3) /**< \brief (S_PIO_SIONR) Set I/O Non-Secure */
#define S_PIO_SIONR_P4 (0x1u << 4) /**< \brief (S_PIO_SIONR) Set I/O Non-Secure */
#define S_PIO_SIONR_P5 (0x1u << 5) /**< \brief (S_PIO_SIONR) Set I/O Non-Secure */
#define S_PIO_SIONR_P6 (0x1u << 6) /**< \brief (S_PIO_SIONR) Set I/O Non-Secure */
#define S_PIO_SIONR_P7 (0x1u << 7) /**< \brief (S_PIO_SIONR) Set I/O Non-Secure */
#define S_PIO_SIONR_P8 (0x1u << 8) /**< \brief (S_PIO_SIONR) Set I/O Non-Secure */
#define S_PIO_SIONR_P9 (0x1u << 9) /**< \brief (S_PIO_SIONR) Set I/O Non-Secure */
#define S_PIO_SIONR_P10 (0x1u << 10) /**< \brief (S_PIO_SIONR) Set I/O Non-Secure */
#define S_PIO_SIONR_P11 (0x1u << 11) /**< \brief (S_PIO_SIONR) Set I/O Non-Secure */
#define S_PIO_SIONR_P12 (0x1u << 12) /**< \brief (S_PIO_SIONR) Set I/O Non-Secure */
#define S_PIO_SIONR_P13 (0x1u << 13) /**< \brief (S_PIO_SIONR) Set I/O Non-Secure */
#define S_PIO_SIONR_P14 (0x1u << 14) /**< \brief (S_PIO_SIONR) Set I/O Non-Secure */
#define S_PIO_SIONR_P15 (0x1u << 15) /**< \brief (S_PIO_SIONR) Set I/O Non-Secure */
#define S_PIO_SIONR_P16 (0x1u << 16) /**< \brief (S_PIO_SIONR) Set I/O Non-Secure */
#define S_PIO_SIONR_P17 (0x1u << 17) /**< \brief (S_PIO_SIONR) Set I/O Non-Secure */
#define S_PIO_SIONR_P18 (0x1u << 18) /**< \brief (S_PIO_SIONR) Set I/O Non-Secure */
#define S_PIO_SIONR_P19 (0x1u << 19) /**< \brief (S_PIO_SIONR) Set I/O Non-Secure */
#define S_PIO_SIONR_P20 (0x1u << 20) /**< \brief (S_PIO_SIONR) Set I/O Non-Secure */
#define S_PIO_SIONR_P21 (0x1u << 21) /**< \brief (S_PIO_SIONR) Set I/O Non-Secure */
#define S_PIO_SIONR_P22 (0x1u << 22) /**< \brief (S_PIO_SIONR) Set I/O Non-Secure */
#define S_PIO_SIONR_P23 (0x1u << 23) /**< \brief (S_PIO_SIONR) Set I/O Non-Secure */
#define S_PIO_SIONR_P24 (0x1u << 24) /**< \brief (S_PIO_SIONR) Set I/O Non-Secure */
#define S_PIO_SIONR_P25 (0x1u << 25) /**< \brief (S_PIO_SIONR) Set I/O Non-Secure */
#define S_PIO_SIONR_P26 (0x1u << 26) /**< \brief (S_PIO_SIONR) Set I/O Non-Secure */
#define S_PIO_SIONR_P27 (0x1u << 27) /**< \brief (S_PIO_SIONR) Set I/O Non-Secure */
#define S_PIO_SIONR_P28 (0x1u << 28) /**< \brief (S_PIO_SIONR) Set I/O Non-Secure */
#define S_PIO_SIONR_P29 (0x1u << 29) /**< \brief (S_PIO_SIONR) Set I/O Non-Secure */
#define S_PIO_SIONR_P30 (0x1u << 30) /**< \brief (S_PIO_SIONR) Set I/O Non-Secure */
#define S_PIO_SIONR_P31 (0x1u << 31) /**< \brief (S_PIO_SIONR) Set I/O Non-Secure */
/* -------- S_PIO_SIOSR : (PIO Offset: N/A) Secure PIO Set I/O Secure Register -------- */
#define S_PIO_SIOSR_P0 (0x1u << 0) /**< \brief (S_PIO_SIOSR) Set I/O Secure */
#define S_PIO_SIOSR_P1 (0x1u << 1) /**< \brief (S_PIO_SIOSR) Set I/O Secure */
#define S_PIO_SIOSR_P2 (0x1u << 2) /**< \brief (S_PIO_SIOSR) Set I/O Secure */
#define S_PIO_SIOSR_P3 (0x1u << 3) /**< \brief (S_PIO_SIOSR) Set I/O Secure */
#define S_PIO_SIOSR_P4 (0x1u << 4) /**< \brief (S_PIO_SIOSR) Set I/O Secure */
#define S_PIO_SIOSR_P5 (0x1u << 5) /**< \brief (S_PIO_SIOSR) Set I/O Secure */
#define S_PIO_SIOSR_P6 (0x1u << 6) /**< \brief (S_PIO_SIOSR) Set I/O Secure */
#define S_PIO_SIOSR_P7 (0x1u << 7) /**< \brief (S_PIO_SIOSR) Set I/O Secure */
#define S_PIO_SIOSR_P8 (0x1u << 8) /**< \brief (S_PIO_SIOSR) Set I/O Secure */
#define S_PIO_SIOSR_P9 (0x1u << 9) /**< \brief (S_PIO_SIOSR) Set I/O Secure */
#define S_PIO_SIOSR_P10 (0x1u << 10) /**< \brief (S_PIO_SIOSR) Set I/O Secure */
#define S_PIO_SIOSR_P11 (0x1u << 11) /**< \brief (S_PIO_SIOSR) Set I/O Secure */
#define S_PIO_SIOSR_P12 (0x1u << 12) /**< \brief (S_PIO_SIOSR) Set I/O Secure */
#define S_PIO_SIOSR_P13 (0x1u << 13) /**< \brief (S_PIO_SIOSR) Set I/O Secure */
#define S_PIO_SIOSR_P14 (0x1u << 14) /**< \brief (S_PIO_SIOSR) Set I/O Secure */
#define S_PIO_SIOSR_P15 (0x1u << 15) /**< \brief (S_PIO_SIOSR) Set I/O Secure */
#define S_PIO_SIOSR_P16 (0x1u << 16) /**< \brief (S_PIO_SIOSR) Set I/O Secure */
#define S_PIO_SIOSR_P17 (0x1u << 17) /**< \brief (S_PIO_SIOSR) Set I/O Secure */
#define S_PIO_SIOSR_P18 (0x1u << 18) /**< \brief (S_PIO_SIOSR) Set I/O Secure */
#define S_PIO_SIOSR_P19 (0x1u << 19) /**< \brief (S_PIO_SIOSR) Set I/O Secure */
#define S_PIO_SIOSR_P20 (0x1u << 20) /**< \brief (S_PIO_SIOSR) Set I/O Secure */
#define S_PIO_SIOSR_P21 (0x1u << 21) /**< \brief (S_PIO_SIOSR) Set I/O Secure */
#define S_PIO_SIOSR_P22 (0x1u << 22) /**< \brief (S_PIO_SIOSR) Set I/O Secure */
#define S_PIO_SIOSR_P23 (0x1u << 23) /**< \brief (S_PIO_SIOSR) Set I/O Secure */
#define S_PIO_SIOSR_P24 (0x1u << 24) /**< \brief (S_PIO_SIOSR) Set I/O Secure */
#define S_PIO_SIOSR_P25 (0x1u << 25) /**< \brief (S_PIO_SIOSR) Set I/O Secure */
#define S_PIO_SIOSR_P26 (0x1u << 26) /**< \brief (S_PIO_SIOSR) Set I/O Secure */
#define S_PIO_SIOSR_P27 (0x1u << 27) /**< \brief (S_PIO_SIOSR) Set I/O Secure */
#define S_PIO_SIOSR_P28 (0x1u << 28) /**< \brief (S_PIO_SIOSR) Set I/O Secure */
#define S_PIO_SIOSR_P29 (0x1u << 29) /**< \brief (S_PIO_SIOSR) Set I/O Secure */
#define S_PIO_SIOSR_P30 (0x1u << 30) /**< \brief (S_PIO_SIOSR) Set I/O Secure */
#define S_PIO_SIOSR_P31 (0x1u << 31) /**< \brief (S_PIO_SIOSR) Set I/O Secure */
/* -------- S_PIO_IOSSR : (PIO Offset: N/A) Secure PIO I/O Security Status Register -------- */
#define S_PIO_IOSSR_P0 (0x1u << 0) /**< \brief (S_PIO_IOSSR) I/O Secutity Status */
#define   S_PIO_IOSSR_P0_SECURE (0x0u << 0) /**< \brief (S_PIO_IOSSR) The I/O line of the I/O group x is in Secure mode */
#define   S_PIO_IOSSR_P0_NON_SECURE (0x1u << 0) /**< \brief (S_PIO_IOSSR) Set the I/O line of the I/O group x in Non-Secure mode. */
#define S_PIO_IOSSR_P1 (0x1u << 1) /**< \brief (S_PIO_IOSSR) I/O Secutity Status */
#define   S_PIO_IOSSR_P1_SECURE (0x0u << 1) /**< \brief (S_PIO_IOSSR) The I/O line of the I/O group x is in Secure mode */
#define   S_PIO_IOSSR_P1_NON_SECURE (0x1u << 1) /**< \brief (S_PIO_IOSSR) Set the I/O line of the I/O group x in Non-Secure mode. */
#define S_PIO_IOSSR_P2 (0x1u << 2) /**< \brief (S_PIO_IOSSR) I/O Secutity Status */
#define   S_PIO_IOSSR_P2_SECURE (0x0u << 2) /**< \brief (S_PIO_IOSSR) The I/O line of the I/O group x is in Secure mode */
#define   S_PIO_IOSSR_P2_NON_SECURE (0x1u << 2) /**< \brief (S_PIO_IOSSR) Set the I/O line of the I/O group x in Non-Secure mode. */
#define S_PIO_IOSSR_P3 (0x1u << 3) /**< \brief (S_PIO_IOSSR) I/O Secutity Status */
#define   S_PIO_IOSSR_P3_SECURE (0x0u << 3) /**< \brief (S_PIO_IOSSR) The I/O line of the I/O group x is in Secure mode */
#define   S_PIO_IOSSR_P3_NON_SECURE (0x1u << 3) /**< \brief (S_PIO_IOSSR) Set the I/O line of the I/O group x in Non-Secure mode. */
#define S_PIO_IOSSR_P4 (0x1u << 4) /**< \brief (S_PIO_IOSSR) I/O Secutity Status */
#define   S_PIO_IOSSR_P4_SECURE (0x0u << 4) /**< \brief (S_PIO_IOSSR) The I/O line of the I/O group x is in Secure mode */
#define   S_PIO_IOSSR_P4_NON_SECURE (0x1u << 4) /**< \brief (S_PIO_IOSSR) Set the I/O line of the I/O group x in Non-Secure mode. */
#define S_PIO_IOSSR_P5 (0x1u << 5) /**< \brief (S_PIO_IOSSR) I/O Secutity Status */
#define   S_PIO_IOSSR_P5_SECURE (0x0u << 5) /**< \brief (S_PIO_IOSSR) The I/O line of the I/O group x is in Secure mode */
#define   S_PIO_IOSSR_P5_NON_SECURE (0x1u << 5) /**< \brief (S_PIO_IOSSR) Set the I/O line of the I/O group x in Non-Secure mode. */
#define S_PIO_IOSSR_P6 (0x1u << 6) /**< \brief (S_PIO_IOSSR) I/O Secutity Status */
#define   S_PIO_IOSSR_P6_SECURE (0x0u << 6) /**< \brief (S_PIO_IOSSR) The I/O line of the I/O group x is in Secure mode */
#define   S_PIO_IOSSR_P6_NON_SECURE (0x1u << 6) /**< \brief (S_PIO_IOSSR) Set the I/O line of the I/O group x in Non-Secure mode. */
#define S_PIO_IOSSR_P7 (0x1u << 7) /**< \brief (S_PIO_IOSSR) I/O Secutity Status */
#define   S_PIO_IOSSR_P7_SECURE (0x0u << 7) /**< \brief (S_PIO_IOSSR) The I/O line of the I/O group x is in Secure mode */
#define   S_PIO_IOSSR_P7_NON_SECURE (0x1u << 7) /**< \brief (S_PIO_IOSSR) Set the I/O line of the I/O group x in Non-Secure mode. */
#define S_PIO_IOSSR_P8 (0x1u << 8) /**< \brief (S_PIO_IOSSR) I/O Secutity Status */
#define   S_PIO_IOSSR_P8_SECURE (0x0u << 8) /**< \brief (S_PIO_IOSSR) The I/O line of the I/O group x is in Secure mode */
#define   S_PIO_IOSSR_P8_NON_SECURE (0x1u << 8) /**< \brief (S_PIO_IOSSR) Set the I/O line of the I/O group x in Non-Secure mode. */
#define S_PIO_IOSSR_P9 (0x1u << 9) /**< \brief (S_PIO_IOSSR) I/O Secutity Status */
#define   S_PIO_IOSSR_P9_SECURE (0x0u << 9) /**< \brief (S_PIO_IOSSR) The I/O line of the I/O group x is in Secure mode */
#define   S_PIO_IOSSR_P9_NON_SECURE (0x1u << 9) /**< \brief (S_PIO_IOSSR) Set the I/O line of the I/O group x in Non-Secure mode. */
#define S_PIO_IOSSR_P10 (0x1u << 10) /**< \brief (S_PIO_IOSSR) I/O Secutity Status */
#define   S_PIO_IOSSR_P10_SECURE (0x0u << 10) /**< \brief (S_PIO_IOSSR) The I/O line of the I/O group x is in Secure mode */
#define   S_PIO_IOSSR_P10_NON_SECURE (0x1u << 10) /**< \brief (S_PIO_IOSSR) Set the I/O line of the I/O group x in Non-Secure mode. */
#define S_PIO_IOSSR_P11 (0x1u << 11) /**< \brief (S_PIO_IOSSR) I/O Secutity Status */
#define   S_PIO_IOSSR_P11_SECURE (0x0u << 11) /**< \brief (S_PIO_IOSSR) The I/O line of the I/O group x is in Secure mode */
#define   S_PIO_IOSSR_P11_NON_SECURE (0x1u << 11) /**< \brief (S_PIO_IOSSR) Set the I/O line of the I/O group x in Non-Secure mode. */
#define S_PIO_IOSSR_P12 (0x1u << 12) /**< \brief (S_PIO_IOSSR) I/O Secutity Status */
#define   S_PIO_IOSSR_P12_SECURE (0x0u << 12) /**< \brief (S_PIO_IOSSR) The I/O line of the I/O group x is in Secure mode */
#define   S_PIO_IOSSR_P12_NON_SECURE (0x1u << 12) /**< \brief (S_PIO_IOSSR) Set the I/O line of the I/O group x in Non-Secure mode. */
#define S_PIO_IOSSR_P13 (0x1u << 13) /**< \brief (S_PIO_IOSSR) I/O Secutity Status */
#define   S_PIO_IOSSR_P13_SECURE (0x0u << 13) /**< \brief (S_PIO_IOSSR) The I/O line of the I/O group x is in Secure mode */
#define   S_PIO_IOSSR_P13_NON_SECURE (0x1u << 13) /**< \brief (S_PIO_IOSSR) Set the I/O line of the I/O group x in Non-Secure mode. */
#define S_PIO_IOSSR_P14 (0x1u << 14) /**< \brief (S_PIO_IOSSR) I/O Secutity Status */
#define   S_PIO_IOSSR_P14_SECURE (0x0u << 14) /**< \brief (S_PIO_IOSSR) The I/O line of the I/O group x is in Secure mode */
#define   S_PIO_IOSSR_P14_NON_SECURE (0x1u << 14) /**< \brief (S_PIO_IOSSR) Set the I/O line of the I/O group x in Non-Secure mode. */
#define S_PIO_IOSSR_P15 (0x1u << 15) /**< \brief (S_PIO_IOSSR) I/O Secutity Status */
#define   S_PIO_IOSSR_P15_SECURE (0x0u << 15) /**< \brief (S_PIO_IOSSR) The I/O line of the I/O group x is in Secure mode */
#define   S_PIO_IOSSR_P15_NON_SECURE (0x1u << 15) /**< \brief (S_PIO_IOSSR) Set the I/O line of the I/O group x in Non-Secure mode. */
#define S_PIO_IOSSR_P16 (0x1u << 16) /**< \brief (S_PIO_IOSSR) I/O Secutity Status */
#define   S_PIO_IOSSR_P16_SECURE (0x0u << 16) /**< \brief (S_PIO_IOSSR) The I/O line of the I/O group x is in Secure mode */
#define   S_PIO_IOSSR_P16_NON_SECURE (0x1u << 16) /**< \brief (S_PIO_IOSSR) Set the I/O line of the I/O group x in Non-Secure mode. */
#define S_PIO_IOSSR_P17 (0x1u << 17) /**< \brief (S_PIO_IOSSR) I/O Secutity Status */
#define   S_PIO_IOSSR_P17_SECURE (0x0u << 17) /**< \brief (S_PIO_IOSSR) The I/O line of the I/O group x is in Secure mode */
#define   S_PIO_IOSSR_P17_NON_SECURE (0x1u << 17) /**< \brief (S_PIO_IOSSR) Set the I/O line of the I/O group x in Non-Secure mode. */
#define S_PIO_IOSSR_P18 (0x1u << 18) /**< \brief (S_PIO_IOSSR) I/O Secutity Status */
#define   S_PIO_IOSSR_P18_SECURE (0x0u << 18) /**< \brief (S_PIO_IOSSR) The I/O line of the I/O group x is in Secure mode */
#define   S_PIO_IOSSR_P18_NON_SECURE (0x1u << 18) /**< \brief (S_PIO_IOSSR) Set the I/O line of the I/O group x in Non-Secure mode. */
#define S_PIO_IOSSR_P19 (0x1u << 19) /**< \brief (S_PIO_IOSSR) I/O Secutity Status */
#define   S_PIO_IOSSR_P19_SECURE (0x0u << 19) /**< \brief (S_PIO_IOSSR) The I/O line of the I/O group x is in Secure mode */
#define   S_PIO_IOSSR_P19_NON_SECURE (0x1u << 19) /**< \brief (S_PIO_IOSSR) Set the I/O line of the I/O group x in Non-Secure mode. */
#define S_PIO_IOSSR_P20 (0x1u << 20) /**< \brief (S_PIO_IOSSR) I/O Secutity Status */
#define   S_PIO_IOSSR_P20_SECURE (0x0u << 20) /**< \brief (S_PIO_IOSSR) The I/O line of the I/O group x is in Secure mode */
#define   S_PIO_IOSSR_P20_NON_SECURE (0x1u << 20) /**< \brief (S_PIO_IOSSR) Set the I/O line of the I/O group x in Non-Secure mode. */
#define S_PIO_IOSSR_P21 (0x1u << 21) /**< \brief (S_PIO_IOSSR) I/O Secutity Status */
#define   S_PIO_IOSSR_P21_SECURE (0x0u << 21) /**< \brief (S_PIO_IOSSR) The I/O line of the I/O group x is in Secure mode */
#define   S_PIO_IOSSR_P21_NON_SECURE (0x1u << 21) /**< \brief (S_PIO_IOSSR) Set the I/O line of the I/O group x in Non-Secure mode. */
#define S_PIO_IOSSR_P22 (0x1u << 22) /**< \brief (S_PIO_IOSSR) I/O Secutity Status */
#define   S_PIO_IOSSR_P22_SECURE (0x0u << 22) /**< \brief (S_PIO_IOSSR) The I/O line of the I/O group x is in Secure mode */
#define   S_PIO_IOSSR_P22_NON_SECURE (0x1u << 22) /**< \brief (S_PIO_IOSSR) Set the I/O line of the I/O group x in Non-Secure mode. */
#define S_PIO_IOSSR_P23 (0x1u << 23) /**< \brief (S_PIO_IOSSR) I/O Secutity Status */
#define   S_PIO_IOSSR_P23_SECURE (0x0u << 23) /**< \brief (S_PIO_IOSSR) The I/O line of the I/O group x is in Secure mode */
#define   S_PIO_IOSSR_P23_NON_SECURE (0x1u << 23) /**< \brief (S_PIO_IOSSR) Set the I/O line of the I/O group x in Non-Secure mode. */
#define S_PIO_IOSSR_P24 (0x1u << 24) /**< \brief (S_PIO_IOSSR) I/O Secutity Status */
#define   S_PIO_IOSSR_P24_SECURE (0x0u << 24) /**< \brief (S_PIO_IOSSR) The I/O line of the I/O group x is in Secure mode */
#define   S_PIO_IOSSR_P24_NON_SECURE (0x1u << 24) /**< \brief (S_PIO_IOSSR) Set the I/O line of the I/O group x in Non-Secure mode. */
#define S_PIO_IOSSR_P25 (0x1u << 25) /**< \brief (S_PIO_IOSSR) I/O Secutity Status */
#define   S_PIO_IOSSR_P25_SECURE (0x0u << 25) /**< \brief (S_PIO_IOSSR) The I/O line of the I/O group x is in Secure mode */
#define   S_PIO_IOSSR_P25_NON_SECURE (0x1u << 25) /**< \brief (S_PIO_IOSSR) Set the I/O line of the I/O group x in Non-Secure mode. */
#define S_PIO_IOSSR_P26 (0x1u << 26) /**< \brief (S_PIO_IOSSR) I/O Secutity Status */
#define   S_PIO_IOSSR_P26_SECURE (0x0u << 26) /**< \brief (S_PIO_IOSSR) The I/O line of the I/O group x is in Secure mode */
#define   S_PIO_IOSSR_P26_NON_SECURE (0x1u << 26) /**< \brief (S_PIO_IOSSR) Set the I/O line of the I/O group x in Non-Secure mode. */
#define S_PIO_IOSSR_P27 (0x1u << 27) /**< \brief (S_PIO_IOSSR) I/O Secutity Status */
#define   S_PIO_IOSSR_P27_SECURE (0x0u << 27) /**< \brief (S_PIO_IOSSR) The I/O line of the I/O group x is in Secure mode */
#define   S_PIO_IOSSR_P27_NON_SECURE (0x1u << 27) /**< \brief (S_PIO_IOSSR) Set the I/O line of the I/O group x in Non-Secure mode. */
#define S_PIO_IOSSR_P28 (0x1u << 28) /**< \brief (S_PIO_IOSSR) I/O Secutity Status */
#define   S_PIO_IOSSR_P28_SECURE (0x0u << 28) /**< \brief (S_PIO_IOSSR) The I/O line of the I/O group x is in Secure mode */
#define   S_PIO_IOSSR_P28_NON_SECURE (0x1u << 28) /**< \brief (S_PIO_IOSSR) Set the I/O line of the I/O group x in Non-Secure mode. */
#define S_PIO_IOSSR_P29 (0x1u << 29) /**< \brief (S_PIO_IOSSR) I/O Secutity Status */
#define   S_PIO_IOSSR_P29_SECURE (0x0u << 29) /**< \brief (S_PIO_IOSSR) The I/O line of the I/O group x is in Secure mode */
#define   S_PIO_IOSSR_P29_NON_SECURE (0x1u << 29) /**< \brief (S_PIO_IOSSR) Set the I/O line of the I/O group x in Non-Secure mode. */
#define S_PIO_IOSSR_P30 (0x1u << 30) /**< \brief (S_PIO_IOSSR) I/O Secutity Status */
#define   S_PIO_IOSSR_P30_SECURE (0x0u << 30) /**< \brief (S_PIO_IOSSR) The I/O line of the I/O group x is in Secure mode */
#define   S_PIO_IOSSR_P30_NON_SECURE (0x1u << 30) /**< \brief (S_PIO_IOSSR) Set the I/O line of the I/O group x in Non-Secure mode. */
#define S_PIO_IOSSR_P31 (0x1u << 31) /**< \brief (S_PIO_IOSSR) I/O Secutity Status */
#define   S_PIO_IOSSR_P31_SECURE (0x0u << 31) /**< \brief (S_PIO_IOSSR) The I/O line of the I/O group x is in Secure mode */
#define   S_PIO_IOSSR_P31_NON_SECURE (0x1u << 31) /**< \brief (S_PIO_IOSSR) Set the I/O line of the I/O group x in Non-Secure mode. */
/* -------- S_PIO_IOFR : (PIO Offset: N/A) Secure PIO I/O Freeze Register -------- */
#define S_PIO_IOFR_FPHY (0x1u << 0) /**< \brief (S_PIO_IOFR) Freeze Physical configuration */
#define S_PIO_IOFR_FINT (0x1u << 1) /**< \brief (S_PIO_IOFR) Freeze Interrupt configuration */
#define S_PIO_IOFR_FRZKEY_Pos 8
#define S_PIO_IOFR_FRZKEY_Msk (0xffffffu << S_PIO_IOFR_FRZKEY_Pos) /**< \brief (S_PIO_IOFR) Freeze Key. */
#define   S_PIO_IOFR_FRZKEY_PASSWD (0x494F46u << 8) /**< \brief (S_PIO_IOFR) Writing any other value in this field aborts the write operation of the WPEN bit. */
/* -------- S_PIO_SCDR : (PIO Offset: 0x1500) Secure PIO Slow Clock Divider Debouncing Register -------- */
#define S_PIO_SCDR_DIV_Pos 0
#define S_PIO_SCDR_DIV_Msk (0x3fffu << S_PIO_SCDR_DIV_Pos) /**< \brief (S_PIO_SCDR) Slow Clock Divider Selection for Debouncing */
#define S_PIO_SCDR_DIV(value) ((S_PIO_SCDR_DIV_Msk & ((value) << S_PIO_SCDR_DIV_Pos)))
/* -------- S_PIO_TPFR : (PIO Offset: 0x15D0) Secure PIO Tamper Freeze Register -------- */
#define S_PIO_TPFR_TAMPFRZ (0x1u << 0) /**< \brief (S_PIO_TPFR) Freeze on Tamper event */
#define S_PIO_TPFR_FRZKEY_Pos 8
#define S_PIO_TPFR_FRZKEY_Msk (0xffffffu << S_PIO_TPFR_FRZKEY_Pos) /**< \brief (S_PIO_TPFR) Freeze Key. */
#define   S_PIO_TPFR_FRZKEY_PASSWD (0x545046u << 8) /**< \brief (S_PIO_TPFR) Writing any other value in this field aborts the write operation of the TAMPFRZ bit. */
/* -------- S_PIO_WPMR : (PIO Offset: 0x15E0) Secure PIO Write Protection Mode Register -------- */
#define S_PIO_WPMR_WPEN (0x1u << 0) /**< \brief (S_PIO_WPMR) Write Protection Enable */
#define S_PIO_WPMR_WPKEY_Pos 8
#define S_PIO_WPMR_WPKEY_Msk (0xffffffu << S_PIO_WPMR_WPKEY_Pos) /**< \brief (S_PIO_WPMR) Write Protection Key. */
#define   S_PIO_WPMR_WPKEY_PASSWD (0x50494Fu << 8) /**< \brief (S_PIO_WPMR) Writing any other value in this field aborts the write operation of the WPEN bit. Always reads as 0. */
/* -------- S_PIO_WPSR : (PIO Offset: 0x15E4) Secure PIO Write Protection Status Register -------- */
#define S_PIO_WPSR_WPVS (0x1u << 0) /**< \brief (S_PIO_WPSR) Write Protection Violation Status */
#define S_PIO_WPSR_WPVSRC_Pos 8
#define S_PIO_WPSR_WPVSRC_Msk (0xffffu << S_PIO_WPSR_WPVSRC_Pos) /**< \brief (S_PIO_WPSR) Write Protection Violation Source */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR Periodic Interval Timer */
/* ============================================================================= */
/** \addtogroup SAMA5D2_PIT Periodic Interval Timer */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief Pit hardware registers */
typedef struct {
  __IO uint32_t PIT_MR;   /**< \brief (Pit Offset: 0x00) Mode Register */
  __I  uint32_t PIT_SR;   /**< \brief (Pit Offset: 0x04) Status Register */
  __I  uint32_t PIT_PIVR; /**< \brief (Pit Offset: 0x08) Periodic Interval Value Register */
  __I  uint32_t PIT_PIIR; /**< \brief (Pit Offset: 0x0C) Periodic Interval Image Register */
} Pit;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- PIT_MR : (PIT Offset: 0x00) Mode Register -------- */
#define PIT_MR_PIV_Pos 0
#define PIT_MR_PIV_Msk (0xfffffu << PIT_MR_PIV_Pos) /**< \brief (PIT_MR) Periodic Interval Value */
#define PIT_MR_PIV(value) ((PIT_MR_PIV_Msk & ((value) << PIT_MR_PIV_Pos)))
#define PIT_MR_PITEN (0x1u << 24) /**< \brief (PIT_MR) Period Interval Timer Enabled */
#define PIT_MR_PITIEN (0x1u << 25) /**< \brief (PIT_MR) Periodic Interval Timer Interrupt Enable */
/* -------- PIT_SR : (PIT Offset: 0x04) Status Register -------- */
#define PIT_SR_PITS (0x1u << 0) /**< \brief (PIT_SR) Periodic Interval Timer Status */
/* -------- PIT_PIVR : (PIT Offset: 0x08) Periodic Interval Value Register -------- */
#define PIT_PIVR_CPIV_Pos 0
#define PIT_PIVR_CPIV_Msk (0xfffffu << PIT_PIVR_CPIV_Pos) /**< \brief (PIT_PIVR) Current Periodic Interval Value */
#define PIT_PIVR_PICNT_Pos 20
#define PIT_PIVR_PICNT_Msk (0xfffu << PIT_PIVR_PICNT_Pos) /**< \brief (PIT_PIVR) Periodic Interval Counter */
/* -------- PIT_PIIR : (PIT Offset: 0x0C) Periodic Interval Image Register -------- */
#define PIT_PIIR_CPIV_Pos 0
#define PIT_PIIR_CPIV_Msk (0xfffffu << PIT_PIIR_CPIV_Pos) /**< \brief (PIT_PIIR) Current Periodic Interval Value */
#define PIT_PIIR_PICNT_Pos 20
#define PIT_PIIR_PICNT_Msk (0xfffu << PIT_PIIR_PICNT_Pos) /**< \brief (PIT_PIIR) Periodic Interval Counter */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR Power Management Controller */
/* ============================================================================= */
/** \addtogroup SAMA5D2_PMC Power Management Controller */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief Pmc hardware registers */
typedef struct {
  __O  uint32_t PMC_SCER;       /**< \brief (Pmc Offset: 0x0000) System Clock Enable Register */
  __O  uint32_t PMC_SCDR;       /**< \brief (Pmc Offset: 0x0004) System Clock Disable Register */
  __I  uint32_t PMC_SCSR;       /**< \brief (Pmc Offset: 0x0008) System Clock Status Register */
  __I  uint32_t Reserved1[4];
  __IO uint32_t CKGR_UCKR;      /**< \brief (Pmc Offset: 0x001C) UTMI Clock Register */
  __IO uint32_t CKGR_MOR;       /**< \brief (Pmc Offset: 0x0020) Main Oscillator Register */
  __IO uint32_t CKGR_MCFR;      /**< \brief (Pmc Offset: 0x0024) Main Clock Frequency Register */
  __IO uint32_t CKGR_PLLAR;     /**< \brief (Pmc Offset: 0x0028) PLLA Register */
  __I  uint32_t Reserved2[1];
  __IO uint32_t PMC_MCKR;       /**< \brief (Pmc Offset: 0x0030) Master Clock Register */
  __I  uint32_t Reserved3[1];
  __IO uint32_t PMC_USB;        /**< \brief (Pmc Offset: 0x0038) USB Clock Register */
  __IO uint32_t PMC_SMD;        /**< \brief (Pmc Offset: 0x003C) Soft Modem Clock Register */
  __IO uint32_t PMC_PCK[3];     /**< \brief (Pmc Offset: 0x0040) Programmable Clock 0 Register */
  __I  uint32_t Reserved4[5];
  __O  uint32_t PMC_IER;        /**< \brief (Pmc Offset: 0x0060) Interrupt Enable Register */
  __O  uint32_t PMC_IDR;        /**< \brief (Pmc Offset: 0x0064) Interrupt Disable Register */
  __I  uint32_t PMC_SR;         /**< \brief (Pmc Offset: 0x0068) Status Register */
  __I  uint32_t PMC_IMR;        /**< \brief (Pmc Offset: 0x006C) Interrupt Mask Register */
  __IO uint32_t PMC_FSMR;       /**< \brief (Pmc Offset: 0x0070) PMC Fast Startup Mode Register */
  __IO uint32_t PMC_FSPR;       /**< \brief (Pmc Offset: 0x0074) PMC Fast Startup Polarity Register */
  __O  uint32_t PMC_FOCR;       /**< \brief (Pmc Offset: 0x0078) Fault Output Clear Register */
  __I  uint32_t Reserved5[1];
  __IO uint32_t PMC_PLLICPR;    /**< \brief (Pmc Offset: 0x0080) PLL Charge Pump Current Register */
  __I  uint32_t Reserved6[24];
  __IO uint32_t PMC_WPMR;       /**< \brief (Pmc Offset: 0x00E4) Write ProtectIon Mode Register */
  __I  uint32_t PMC_WPSR;       /**< \brief (Pmc Offset: 0x00E8) Write Protection Status Register */
  __I  uint32_t PMC_ADDRSIZE;   /**< \brief (Pmc Offset: 0x00EC) Address Size Register */
  __I  uint32_t PMC_IPNAME[2];  /**< \brief (Pmc Offset: 0x00F0) IP Name1 Register */
  __I  uint32_t PMC_FEATURES;   /**< \brief (Pmc Offset: 0x00F8) Features Register */
  __I  uint32_t PMC_VERSION;    /**< \brief (Pmc Offset: 0x00FC) Version Register */
  __I  uint32_t Reserved7[3];
  __IO uint32_t PMC_PCR;        /**< \brief (Pmc Offset: 0x010C) Peripheral Control Register */
  __IO uint32_t PMC_OCR;        /**< \brief (Pmc Offset: 0x0110) Oscillator Calibration Register */
  __I  uint32_t Reserved8[12];
  __I  uint32_t PMC_SLPWK_AIPR; /**< \brief (Pmc Offset: 0x0144) SleepWalking Activity In Progress Register */
  __IO uint32_t PMC_SLPWKCR;    /**< \brief (Pmc Offset: 0x0148) SleepWalking Control Register */
  __IO uint32_t PMC_AUDIO_PLL0; /**< \brief (Pmc Offset: 0x014C) Audio PLL Register 0 */
  __IO uint32_t PMC_AUDIO_PLL1; /**< \brief (Pmc Offset: 0x0150) Audio PLL Register 1 */
} Pmc;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- PMC_SCER : (PMC Offset: 0x0000) System Clock Enable Register -------- */
#define PMC_SCER_DDRCK (0x1u << 2) /**< \brief (PMC_SCER) DDR Clock Enable */
#define PMC_SCER_LCDCK (0x1u << 3) /**< \brief (PMC_SCER) LCD2x Clock Enable */
#define PMC_SCER_SMDCK (0x1u << 4) /**< \brief (PMC_SCER) SMD Clock Enable */
#define PMC_SCER_UHP (0x1u << 6) /**< \brief (PMC_SCER) USB Host OHCI Clocks Enable */
#define PMC_SCER_UDP (0x1u << 7) /**< \brief (PMC_SCER) USB Device Clock Enable */
#define PMC_SCER_PCK0 (0x1u << 8) /**< \brief (PMC_SCER) Programmable Clock 0 Output Enable */
#define PMC_SCER_PCK1 (0x1u << 9) /**< \brief (PMC_SCER) Programmable Clock 1 Output Enable */
#define PMC_SCER_PCK2 (0x1u << 10) /**< \brief (PMC_SCER) Programmable Clock 2 Output Enable */
#define PMC_SCER_ISICK (0x1u << 18) /**< \brief (PMC_SCER) ISI Clock Enable */
/* -------- PMC_SCDR : (PMC Offset: 0x0004) System Clock Disable Register -------- */
#define PMC_SCDR_PCK (0x1u << 0) /**< \brief (PMC_SCDR) Processor Clock Disable */
#define PMC_SCDR_DDRCK (0x1u << 2) /**< \brief (PMC_SCDR) DDR Clock Disable */
#define PMC_SCDR_LCDCK (0x1u << 3) /**< \brief (PMC_SCDR) LCD2x Clock Disable */
#define PMC_SCDR_SMDCK (0x1u << 4) /**< \brief (PMC_SCDR) SMD Clock Disable */
#define PMC_SCDR_UHP (0x1u << 6) /**< \brief (PMC_SCDR) USB Host OHCI Clock Disable */
#define PMC_SCDR_UDP (0x1u << 7) /**< \brief (PMC_SCDR) USB Device Clock Enable */
#define PMC_SCDR_PCK0 (0x1u << 8) /**< \brief (PMC_SCDR) Programmable Clock 0 Output Disable */
#define PMC_SCDR_PCK1 (0x1u << 9) /**< \brief (PMC_SCDR) Programmable Clock 1 Output Disable */
#define PMC_SCDR_PCK2 (0x1u << 10) /**< \brief (PMC_SCDR) Programmable Clock 2 Output Disable */
#define PMC_SCDR_ISICK (0x1u << 18) /**< \brief (PMC_SCDR) ISI Clock Disable */
/* -------- PMC_SCSR : (PMC Offset: 0x0008) System Clock Status Register -------- */
#define PMC_SCSR_PCK (0x1u << 0) /**< \brief (PMC_SCSR) Processor Clock Status */
#define PMC_SCSR_DDRCK (0x1u << 2) /**< \brief (PMC_SCSR) DDR Clock Status */
#define PMC_SCSR_LCDCK (0x1u << 3) /**< \brief (PMC_SCSR) LCD2x Clock Status */
#define PMC_SCSR_SMDCK (0x1u << 4) /**< \brief (PMC_SCSR) SMD Clock Status */
#define PMC_SCSR_UHP (0x1u << 6) /**< \brief (PMC_SCSR) USB Host Port Clock Status */
#define PMC_SCSR_UDP (0x1u << 7) /**< \brief (PMC_SCSR) USB Device Port Clock Status */
#define PMC_SCSR_PCK0 (0x1u << 8) /**< \brief (PMC_SCSR) Programmable Clock 0 Output Status */
#define PMC_SCSR_PCK1 (0x1u << 9) /**< \brief (PMC_SCSR) Programmable Clock 1 Output Status */
#define PMC_SCSR_PCK2 (0x1u << 10) /**< \brief (PMC_SCSR) Programmable Clock 2 Output Status */
#define PMC_SCSR_ISICK (0x1u << 18) /**< \brief (PMC_SCSR) ISI Clock Status */
/* -------- CKGR_UCKR : (PMC Offset: 0x001C) UTMI Clock Register -------- */
#define CKGR_UCKR_UPLLEN (0x1u << 16) /**< \brief (CKGR_UCKR) UTMI PLL Enable */
#define CKGR_UCKR_UPLLCOUNT_Pos 20
#define CKGR_UCKR_UPLLCOUNT_Msk (0xfu << CKGR_UCKR_UPLLCOUNT_Pos) /**< \brief (CKGR_UCKR) UTMI PLL Start-up Time */
#define CKGR_UCKR_UPLLCOUNT(value) ((CKGR_UCKR_UPLLCOUNT_Msk & ((value) << CKGR_UCKR_UPLLCOUNT_Pos)))
#define CKGR_UCKR_BIASEN (0x1u << 24) /**< \brief (CKGR_UCKR) UTMI BIAS Enable */
#define CKGR_UCKR_BIASCOUNT_Pos 28
#define CKGR_UCKR_BIASCOUNT_Msk (0xfu << CKGR_UCKR_BIASCOUNT_Pos) /**< \brief (CKGR_UCKR) UTMI BIAS Start-up Time */
#define CKGR_UCKR_BIASCOUNT(value) ((CKGR_UCKR_BIASCOUNT_Msk & ((value) << CKGR_UCKR_BIASCOUNT_Pos)))
/* -------- CKGR_MOR : (PMC Offset: 0x0020) Main Oscillator Register -------- */
#define CKGR_MOR_MOSCXTEN (0x1u << 0) /**< \brief (CKGR_MOR) Main Crystal Oscillator Enable */
#define CKGR_MOR_MOSCXTBY (0x1u << 1) /**< \brief (CKGR_MOR) Main Crystal Oscillator Bypass */
#define CKGR_MOR_MOSCRCEN (0x1u << 3) /**< \brief (CKGR_MOR) Main On-Chip RC Oscillator Enable */
#define CKGR_MOR_MOSCXTST_Pos 8
#define CKGR_MOR_MOSCXTST_Msk (0xffu << CKGR_MOR_MOSCXTST_Pos) /**< \brief (CKGR_MOR) Main Crystal Oscillator Startup Time */
#define CKGR_MOR_MOSCXTST(value) ((CKGR_MOR_MOSCXTST_Msk & ((value) << CKGR_MOR_MOSCXTST_Pos)))
#define CKGR_MOR_KEY_Pos 16
#define CKGR_MOR_KEY_Msk (0xffu << CKGR_MOR_KEY_Pos) /**< \brief (CKGR_MOR) Password */
#define   CKGR_MOR_KEY_PASSWD (0x37u << 16) /**< \brief (CKGR_MOR) Writing any other value in this field aborts the write operation. */
#define CKGR_MOR_MOSCSEL (0x1u << 24) /**< \brief (CKGR_MOR) Main Oscillator Selection */
#define CKGR_MOR_CFDEN (0x1u << 25) /**< \brief (CKGR_MOR) Clock Failure Detector Enable */
/* -------- CKGR_MCFR : (PMC Offset: 0x0024) Main Clock Frequency Register -------- */
#define CKGR_MCFR_MAINF_Pos 0
#define CKGR_MCFR_MAINF_Msk (0xffffu << CKGR_MCFR_MAINF_Pos) /**< \brief (CKGR_MCFR) Main Clock Frequency */
#define CKGR_MCFR_MAINF(value) ((CKGR_MCFR_MAINF_Msk & ((value) << CKGR_MCFR_MAINF_Pos)))
#define CKGR_MCFR_MAINFRDY (0x1u << 16) /**< \brief (CKGR_MCFR) Main Clock Frequency Measure Ready */
#define CKGR_MCFR_RCMEAS (0x1u << 20) /**< \brief (CKGR_MCFR) RC Oscillator Frequency Measure (write-only) */
/* -------- CKGR_PLLAR : (PMC Offset: 0x0028) PLLA Register -------- */
#define CKGR_PLLAR_DIVA_Pos 0
#define CKGR_PLLAR_DIVA_Msk (0xffu << CKGR_PLLAR_DIVA_Pos) /**< \brief (CKGR_PLLAR) Divider A */
#define   CKGR_PLLAR_DIVA_0 (0x0u << 0) /**< \brief (CKGR_PLLAR) Divider output is 0 */
#define   CKGR_PLLAR_DIVA_BYPASS (0x1u << 0) /**< \brief (CKGR_PLLAR) Divider is bypassed */
#define CKGR_PLLAR_PLLACOUNT_Pos 8
#define CKGR_PLLAR_PLLACOUNT_Msk (0x3fu << CKGR_PLLAR_PLLACOUNT_Pos) /**< \brief (CKGR_PLLAR) PLLA Counter */
#define CKGR_PLLAR_PLLACOUNT(value) ((CKGR_PLLAR_PLLACOUNT_Msk & ((value) << CKGR_PLLAR_PLLACOUNT_Pos)))
#define CKGR_PLLAR_OUTA_Pos 14
#define CKGR_PLLAR_OUTA_Msk (0xfu << CKGR_PLLAR_OUTA_Pos) /**< \brief (CKGR_PLLAR) PLLA Clock Frequency Range */
#define CKGR_PLLAR_OUTA(value) ((CKGR_PLLAR_OUTA_Msk & ((value) << CKGR_PLLAR_OUTA_Pos)))
#define CKGR_PLLAR_MULA_Pos 18
#define CKGR_PLLAR_MULA_Msk (0x7fu << CKGR_PLLAR_MULA_Pos) /**< \brief (CKGR_PLLAR) PLLA Multiplier */
#define CKGR_PLLAR_MULA(value) ((CKGR_PLLAR_MULA_Msk & ((value) << CKGR_PLLAR_MULA_Pos)))
#define CKGR_PLLAR_ONE (0x1u << 29) /**< \brief (CKGR_PLLAR) Must Be Set to 1 */
/* -------- PMC_MCKR : (PMC Offset: 0x0030) Master Clock Register -------- */
#define PMC_MCKR_CSS_Pos 0
#define PMC_MCKR_CSS_Msk (0x3u << PMC_MCKR_CSS_Pos) /**< \brief (PMC_MCKR) Master/Processor Clock Source Selection */
#define   PMC_MCKR_CSS_SLOW_CLK (0x0u << 0) /**< \brief (PMC_MCKR) Slow Clock is selected */
#define   PMC_MCKR_CSS_MAIN_CLK (0x1u << 0) /**< \brief (PMC_MCKR) Main Clock is selected */
#define   PMC_MCKR_CSS_PLLA_CLK (0x2u << 0) /**< \brief (PMC_MCKR) PLLACK is selected */
#define   PMC_MCKR_CSS_UPLL_CLK (0x3u << 0) /**< \brief (PMC_MCKR) UPLL Clock is selected */
#define PMC_MCKR_PRES_Pos 4
#define PMC_MCKR_PRES_Msk (0x7u << PMC_MCKR_PRES_Pos) /**< \brief (PMC_MCKR) Master/Processor Clock Prescaler */
#define   PMC_MCKR_PRES_CLOCK (0x0u << 4) /**< \brief (PMC_MCKR) Selected clock */
#define   PMC_MCKR_PRES_CLOCK_DIV2 (0x1u << 4) /**< \brief (PMC_MCKR) Selected clock divided by 2 */
#define   PMC_MCKR_PRES_CLOCK_DIV4 (0x2u << 4) /**< \brief (PMC_MCKR) Selected clock divided by 4 */
#define   PMC_MCKR_PRES_CLOCK_DIV8 (0x3u << 4) /**< \brief (PMC_MCKR) Selected clock divided by 8 */
#define   PMC_MCKR_PRES_CLOCK_DIV16 (0x4u << 4) /**< \brief (PMC_MCKR) Selected clock divided by 16 */
#define   PMC_MCKR_PRES_CLOCK_DIV32 (0x5u << 4) /**< \brief (PMC_MCKR) Selected clock divided by 32 */
#define   PMC_MCKR_PRES_CLOCK_DIV64 (0x6u << 4) /**< \brief (PMC_MCKR) Selected clock divided by 64 */
#define PMC_MCKR_MDIV_Pos 8
#define PMC_MCKR_MDIV_Msk (0x3u << PMC_MCKR_MDIV_Pos) /**< \brief (PMC_MCKR) Master Clock Division */
#define   PMC_MCKR_MDIV_EQ_PCK (0x0u << 8) /**< \brief (PMC_MCKR) Master Clock is Prescaler Output Clock divided by 1. WARNING: SysClk DDR and DDRCK are not available. */
#define   PMC_MCKR_MDIV_PCK_DIV2 (0x1u << 8) /**< \brief (PMC_MCKR) Master Clock is Prescaler Output Clock divided by 2. SysClk DDR is equal to 2 x MCK. DDRCK is equal to MCK. */
#define   PMC_MCKR_MDIV_PCK_DIV4 (0x2u << 8) /**< \brief (PMC_MCKR) Master Clock is Prescaler Output Clock divided by 4. SysClk DDR is equal to 2 x MCK. DDRCK is equal to MCK. */
#define   PMC_MCKR_MDIV_PCK_DIV3 (0x3u << 8) /**< \brief (PMC_MCKR) Master Clock is Prescaler Output Clock divided by 3. SysClk DDR is equal to 2 x MCK. DDRCK is equal to MCK. */
#define PMC_MCKR_PLLADIV2 (0x1u << 12) /**< \brief (PMC_MCKR) PLLA Divisor by 2 */
#define PMC_MCKR_H32MXDIV (0x1u << 24)
/* -------- PMC_USB : (PMC Offset: 0x0038) USB Clock Register -------- */
#define PMC_USB_USBS (0x1u << 0) /**< \brief (PMC_USB) USB OHCI Input Clock Selection */
#define PMC_USB_USBDIV_Pos 8
#define PMC_USB_USBDIV_Msk (0xfu << PMC_USB_USBDIV_Pos) /**< \brief (PMC_USB) Divider for USB OHCI Clock */
#define PMC_USB_USBDIV(value) ((PMC_USB_USBDIV_Msk & ((value) << PMC_USB_USBDIV_Pos)))
/* -------- PMC_SMD : (PMC Offset: 0x003C) Soft Modem Clock Register -------- */
#define PMC_SMD_SMDS (0x1u << 0) /**< \brief (PMC_SMD) SMD Input Clock Selection */
#define PMC_SMD_SMDDIV_Pos 8
#define PMC_SMD_SMDDIV_Msk (0x1fu << PMC_SMD_SMDDIV_Pos) /**< \brief (PMC_SMD) Divider for SMD Clock */
#define PMC_SMD_SMDDIV(value) ((PMC_SMD_SMDDIV_Msk & ((value) << PMC_SMD_SMDDIV_Pos)))
/* -------- PMC_PCK[3] : (PMC Offset: 0x0040) Programmable Clock 0 Register -------- */
#define PMC_PCK_CSS_Pos 0
#define PMC_PCK_CSS_Msk (0x7u << PMC_PCK_CSS_Pos) /**< \brief (PMC_PCK[3]) Master Clock Source Selection */
#define   PMC_PCK_CSS_SLOW_CLK (0x0u << 0) /**< \brief (PMC_PCK[3]) Slow Clock is selected */
#define   PMC_PCK_CSS_MAIN_CLK (0x1u << 0) /**< \brief (PMC_PCK[3]) Main Clock is selected */
#define   PMC_PCK_CSS_PLLA_CLK (0x2u << 0) /**< \brief (PMC_PCK[3]) PLLACK is selected */
#define   PMC_PCK_CSS_UPLL_CLK (0x3u << 0) /**< \brief (PMC_PCK[3]) UPLL Clock is selected */
#define   PMC_PCK_CSS_MCK_CLK (0x4u << 0) /**< \brief (PMC_PCK[3]) Master Clock is selected */
#define   PMC_PCK_CSS_AUDIO_CLK (0x5u << 0) /**< \brief (PMC_PCK[3]) Audio PLL clock is selected */
#define PMC_PCK_PRES_Pos 4
#define PMC_PCK_PRES_Msk (0xffu << PMC_PCK_PRES_Pos) /**< \brief (PMC_PCK[3]) Programmable Clock Prescaler */
#define PMC_PCK_PRES(value) ((PMC_PCK_PRES_Msk & ((value) << PMC_PCK_PRES_Pos)))
/* -------- PMC_IER : (PMC Offset: 0x0060) Interrupt Enable Register -------- */
#define PMC_IER_MOSCXTS (0x1u << 0) /**< \brief (PMC_IER) Main Crystal Oscillator Status Interrupt Enable */
#define PMC_IER_LOCKA (0x1u << 1) /**< \brief (PMC_IER) PLLA Lock Interrupt Enable */
#define PMC_IER_MCKRDY (0x1u << 3) /**< \brief (PMC_IER) Master Clock Ready Interrupt Enable */
#define PMC_IER_LOCKU (0x1u << 6) /**< \brief (PMC_IER) UTMI PLL Lock Interrupt Enable */
#define PMC_IER_PCKRDY0 (0x1u << 8) /**< \brief (PMC_IER) Programmable Clock Ready 0 Interrupt Enable */
#define PMC_IER_PCKRDY1 (0x1u << 9) /**< \brief (PMC_IER) Programmable Clock Ready 1 Interrupt Enable */
#define PMC_IER_PCKRDY2 (0x1u << 10) /**< \brief (PMC_IER) Programmable Clock Ready 2 Interrupt Enable */
#define PMC_IER_MOSCSELS (0x1u << 16) /**< \brief (PMC_IER) Main Oscillator Selection Status Interrupt Enable */
#define PMC_IER_CFDEV (0x1u << 18) /**< \brief (PMC_IER) Clock Failure Detector Event Interrupt Enable */
/* -------- PMC_IDR : (PMC Offset: 0x0064) Interrupt Disable Register -------- */
#define PMC_IDR_MOSCXTS (0x1u << 0) /**< \brief (PMC_IDR) Main Crystal Oscillator Status Interrupt Disable */
#define PMC_IDR_LOCKA (0x1u << 1) /**< \brief (PMC_IDR) PLLA Lock Interrupt Disable */
#define PMC_IDR_MCKRDY (0x1u << 3) /**< \brief (PMC_IDR) Master Clock Ready Interrupt Disable */
#define PMC_IDR_LOCKU (0x1u << 6) /**< \brief (PMC_IDR) UTMI PLL Lock Interrupt Enable */
#define PMC_IDR_PCKRDY0 (0x1u << 8) /**< \brief (PMC_IDR) Programmable Clock Ready 0 Interrupt Disable */
#define PMC_IDR_PCKRDY1 (0x1u << 9) /**< \brief (PMC_IDR) Programmable Clock Ready 1 Interrupt Disable */
#define PMC_IDR_PCKRDY2 (0x1u << 10) /**< \brief (PMC_IDR) Programmable Clock Ready 2 Interrupt Disable */
#define PMC_IDR_MOSCSELS (0x1u << 16) /**< \brief (PMC_IDR) Main Oscillator Selection Status Interrupt Disable */
#define PMC_IDR_CFDEV (0x1u << 18) /**< \brief (PMC_IDR) Clock Failure Detector Event Interrupt Disable */
/* -------- PMC_SR : (PMC Offset: 0x0068) Status Register -------- */
#define PMC_SR_MOSCXTS (0x1u << 0) /**< \brief (PMC_SR) Main XTAL Oscillator Status */
#define PMC_SR_LOCKA (0x1u << 1) /**< \brief (PMC_SR) PLLA Lock Status */
#define PMC_SR_MCKRDY (0x1u << 3) /**< \brief (PMC_SR) Master Clock Status */
#define PMC_SR_LOCKU (0x1u << 6) /**< \brief (PMC_SR) UPLL Clock Status */
#define PMC_SR_OSCSELS (0x1u << 7) /**< \brief (PMC_SR) Slow Clock Oscillator Selection */
#define PMC_SR_PCKRDY0 (0x1u << 8) /**< \brief (PMC_SR) Programmable Clock Ready Status */
#define PMC_SR_PCKRDY1 (0x1u << 9) /**< \brief (PMC_SR) Programmable Clock Ready Status */
#define PMC_SR_PCKRDY2 (0x1u << 10) /**< \brief (PMC_SR) Programmable Clock Ready Status */
#define PMC_SR_MOSCSELS (0x1u << 16) /**< \brief (PMC_SR) Main Oscillator Selection Status */
#define PMC_SR_CFDEV (0x1u << 18) /**< \brief (PMC_SR) Clock Failure Detector Event */
#define PMC_SR_CFDS (0x1u << 19) /**< \brief (PMC_SR) Clock Failure Detector Status */
#define PMC_SR_FOS (0x1u << 20) /**< \brief (PMC_SR) Clock Failure Detector Fault Output Status */
#define PMC_SR_GCKRDY (0x1u << 24) /**< \brief (PMC_SR) Generated Clocks Status */
/* -------- PMC_IMR : (PMC Offset: 0x006C) Interrupt Mask Register -------- */
#define PMC_IMR_MOSCXTS (0x1u << 0) /**< \brief (PMC_IMR) Main Crystal Oscillator Status Interrupt Mask */
#define PMC_IMR_LOCKA (0x1u << 1) /**< \brief (PMC_IMR) PLLA Lock Interrupt Mask */
#define PMC_IMR_MCKRDY (0x1u << 3) /**< \brief (PMC_IMR) Master Clock Ready Interrupt Mask */
#define PMC_IMR_PCKRDY0 (0x1u << 8) /**< \brief (PMC_IMR) Programmable Clock Ready 0 Interrupt Mask */
#define PMC_IMR_PCKRDY1 (0x1u << 9) /**< \brief (PMC_IMR) Programmable Clock Ready 1 Interrupt Mask */
#define PMC_IMR_PCKRDY2 (0x1u << 10) /**< \brief (PMC_IMR) Programmable Clock Ready 2 Interrupt Mask */
#define PMC_IMR_MOSCSELS (0x1u << 16) /**< \brief (PMC_IMR) Main Oscillator Selection Status Interrupt Mask */
#define PMC_IMR_CFDEV (0x1u << 18) /**< \brief (PMC_IMR) Clock Failure Detector Event Interrupt Mask */
/* -------- PMC_FSMR : (PMC Offset: 0x0070) PMC Fast Startup Mode Register -------- */
#define PMC_FSMR_FSTT0 (0x1u << 0) /**< \brief (PMC_FSMR) Fast Startup Input Enable 0 */
#define PMC_FSMR_FSTT1 (0x1u << 1) /**< \brief (PMC_FSMR) Fast Startup Input Enable 1 */
#define PMC_FSMR_FSTT2 (0x1u << 2) /**< \brief (PMC_FSMR) Fast Startup Input Enable 2 */
#define PMC_FSMR_FSTT3 (0x1u << 3) /**< \brief (PMC_FSMR) Fast Startup Input Enable 3 */
#define PMC_FSMR_FSTT4 (0x1u << 4) /**< \brief (PMC_FSMR) Fast Startup Input Enable 4 */
#define PMC_FSMR_FSTT5 (0x1u << 5) /**< \brief (PMC_FSMR) Fast Startup Input Enable 5 */
#define PMC_FSMR_FSTT6 (0x1u << 6) /**< \brief (PMC_FSMR) Fast Startup Input Enable 6 */
#define PMC_FSMR_FSTT7 (0x1u << 7) /**< \brief (PMC_FSMR) Fast Startup Input Enable 7 */
#define PMC_FSMR_FSTT8 (0x1u << 8) /**< \brief (PMC_FSMR) Fast Startup Input Enable 8 */
#define PMC_FSMR_FSTT9 (0x1u << 9) /**< \brief (PMC_FSMR) Fast Startup Input Enable 9 */
#define PMC_FSMR_FSTT10 (0x1u << 10) /**< \brief (PMC_FSMR) Fast Startup Input Enable 10 */
#define PMC_FSMR_FSTT11 (0x1u << 11) /**< \brief (PMC_FSMR) Fast Startup Input Enable 11 */
#define PMC_FSMR_FSTT12 (0x1u << 12) /**< \brief (PMC_FSMR) Fast Startup Input Enable 12 */
#define PMC_FSMR_FSTT13 (0x1u << 13) /**< \brief (PMC_FSMR) Fast Startup Input Enable 13 */
#define PMC_FSMR_FSTT14 (0x1u << 14) /**< \brief (PMC_FSMR) Fast Startup Input Enable 14 */
#define PMC_FSMR_FSTT15 (0x1u << 15) /**< \brief (PMC_FSMR) Fast Startup Input Enable 15 */
#define PMC_FSMR_RTTAL (0x1u << 16) /**< \brief (PMC_FSMR) RTT Alarm Enable */
#define PMC_FSMR_RTCAL (0x1u << 17) /**< \brief (PMC_FSMR) RTC Alarm Enable */
#define PMC_FSMR_USBAL (0x1u << 18) /**< \brief (PMC_FSMR) USB Alarm Enable */
#define PMC_FSMR_LPM (0x1u << 20) /**< \brief (PMC_FSMR) Low-power Mode */
#define PMC_FSMR_RXLPAL (0x1u << 24) /**< \brief (PMC_FSMR) Lower-power Receiver Alarm */
#define PMC_FSMR_ACCAL (0x1u << 25) /**< \brief (PMC_FSMR) Analog Comparator Controller Alarm */
/* -------- PMC_FSPR : (PMC Offset: 0x0074) PMC Fast Startup Polarity Register -------- */
#define PMC_FSPR_FSTP0 (0x1u << 0) /**< \brief (PMC_FSPR) Fast Startup Input Polarityx */
#define PMC_FSPR_FSTP1 (0x1u << 1) /**< \brief (PMC_FSPR) Fast Startup Input Polarityx */
#define PMC_FSPR_FSTP2 (0x1u << 2) /**< \brief (PMC_FSPR) Fast Startup Input Polarityx */
#define PMC_FSPR_FSTP3 (0x1u << 3) /**< \brief (PMC_FSPR) Fast Startup Input Polarityx */
#define PMC_FSPR_FSTP4 (0x1u << 4) /**< \brief (PMC_FSPR) Fast Startup Input Polarityx */
#define PMC_FSPR_FSTP5 (0x1u << 5) /**< \brief (PMC_FSPR) Fast Startup Input Polarityx */
#define PMC_FSPR_FSTP6 (0x1u << 6) /**< \brief (PMC_FSPR) Fast Startup Input Polarityx */
#define PMC_FSPR_FSTP7 (0x1u << 7) /**< \brief (PMC_FSPR) Fast Startup Input Polarityx */
#define PMC_FSPR_FSTP8 (0x1u << 8) /**< \brief (PMC_FSPR) Fast Startup Input Polarityx */
#define PMC_FSPR_FSTP9 (0x1u << 9) /**< \brief (PMC_FSPR) Fast Startup Input Polarityx */
#define PMC_FSPR_FSTP10 (0x1u << 10) /**< \brief (PMC_FSPR) Fast Startup Input Polarityx */
#define PMC_FSPR_FSTP11 (0x1u << 11) /**< \brief (PMC_FSPR) Fast Startup Input Polarityx */
#define PMC_FSPR_FSTP12 (0x1u << 12) /**< \brief (PMC_FSPR) Fast Startup Input Polarityx */
#define PMC_FSPR_FSTP13 (0x1u << 13) /**< \brief (PMC_FSPR) Fast Startup Input Polarityx */
#define PMC_FSPR_FSTP14 (0x1u << 14) /**< \brief (PMC_FSPR) Fast Startup Input Polarityx */
#define PMC_FSPR_FSTP15 (0x1u << 15) /**< \brief (PMC_FSPR) Fast Startup Input Polarityx */
/* -------- PMC_FOCR : (PMC Offset: 0x0078) Fault Output Clear Register -------- */
#define PMC_FOCR_FOCLR (0x1u << 0) /**< \brief (PMC_FOCR) Fault Output Clear */
/* -------- PMC_PLLICPR : (PMC Offset: 0x0080) PLL Charge Pump Current Register -------- */
#define PMC_PLLICPR_ICP_PLLA_Pos 0
#define PMC_PLLICPR_ICP_PLLA_Msk (0x3u << PMC_PLLICPR_ICP_PLLA_Pos) /**< \brief (PMC_PLLICPR) Must Be Written to Zero */
#define PMC_PLLICPR_ICP_PLLA(value) ((PMC_PLLICPR_ICP_PLLA_Msk & ((value) << PMC_PLLICPR_ICP_PLLA_Pos)))
#define PMC_PLLICPR_IPLL_PLLA_Pos 8
#define PMC_PLLICPR_IPLL_PLLA_Msk (0x7u << PMC_PLLICPR_IPLL_PLLA_Pos) /**< \brief (PMC_PLLICPR) Engineering Configuration PLLA */
#define PMC_PLLICPR_IPLL_PLLA(value) ((PMC_PLLICPR_IPLL_PLLA_Msk & ((value) << PMC_PLLICPR_IPLL_PLLA_Pos)))
#define PMC_PLLICPR_ICP_PLLU_Pos 16
#define PMC_PLLICPR_ICP_PLLU_Msk (0x3u << PMC_PLLICPR_ICP_PLLU_Pos) /**< \brief (PMC_PLLICPR) Charge Pump Current PLL UTMI */
#define PMC_PLLICPR_ICP_PLLU(value) ((PMC_PLLICPR_ICP_PLLU_Msk & ((value) << PMC_PLLICPR_ICP_PLLU_Pos)))
#define PMC_PLLICPR_IVCO_PLLU_Pos 24
#define PMC_PLLICPR_IVCO_PLLU_Msk (0x3u << PMC_PLLICPR_IVCO_PLLU_Pos) /**< \brief (PMC_PLLICPR) Voltage Control Output Current PLL UTMI */
#define PMC_PLLICPR_IVCO_PLLU(value) ((PMC_PLLICPR_IVCO_PLLU_Msk & ((value) << PMC_PLLICPR_IVCO_PLLU_Pos)))
/* -------- PMC_WPMR : (PMC Offset: 0x00E4) Write ProtectIon Mode Register -------- */
#define PMC_WPMR_WPEN (0x1u << 0) /**< \brief (PMC_WPMR) Write Protection Enable */
#define PMC_WPMR_WPKEY_Pos 8
#define PMC_WPMR_WPKEY_Msk (0xffffffu << PMC_WPMR_WPKEY_Pos) /**< \brief (PMC_WPMR) Write Protection Key */
#define   PMC_WPMR_WPKEY_PASSWD (0x504D43u << 8) /**< \brief (PMC_WPMR) Writing any other value in this field aborts the write operation of the WPEN bit.Always reads as 0. */
/* -------- PMC_WPSR : (PMC Offset: 0x00E8) Write Protection Status Register -------- */
#define PMC_WPSR_WPVS (0x1u << 0) /**< \brief (PMC_WPSR) Write Protection Violation Status */
#define PMC_WPSR_WPVSRC_Pos 8
#define PMC_WPSR_WPVSRC_Msk (0xffffu << PMC_WPSR_WPVSRC_Pos) /**< \brief (PMC_WPSR) Write Protection Violation Source */
/* -------- PMC_ADDRSIZE : (PMC Offset: 0x00EC) Address Size Register -------- */
#define PMC_ADDRSIZE_ADDRSIZE_Pos 0
#define PMC_ADDRSIZE_ADDRSIZE_Msk (0xffffu << PMC_ADDRSIZE_ADDRSIZE_Pos) /**< \brief (PMC_ADDRSIZE) Peripheral Bus Address Area Size */
/* -------- PMC_IPNAME[2] : (PMC Offset: 0x00F0) IP Name1 Register -------- */
#define PMC_IPNAME_IPNAME_Pos 0
#define PMC_IPNAME_IPNAME_Msk (0xffffffffu << PMC_IPNAME_IPNAME_Pos) /**< \brief (PMC_IPNAME[2]) IP Name in ASCII Format */
/* -------- PMC_VERSION : (PMC Offset: 0x00FC) Version Register -------- */
#define PMC_VERSION_VERSION_Pos 0
#define PMC_VERSION_VERSION_Msk (0xfffu << PMC_VERSION_VERSION_Pos) /**< \brief (PMC_VERSION) Version of the Hardware Module */
#define PMC_VERSION_MFN_Pos 16
#define PMC_VERSION_MFN_Msk (0x7u << PMC_VERSION_MFN_Pos) /**< \brief (PMC_VERSION) Metal Fix Number */
/* -------- PMC_PCR : (PMC Offset: 0x010C) Peripheral Control Register -------- */
#define PMC_PCR_PID_Pos 0
#define PMC_PCR_PID_Msk (0x7fu << PMC_PCR_PID_Pos) /**< \brief (PMC_PCR) Peripheral ID */
#define PMC_PCR_PID(value) ((PMC_PCR_PID_Msk & ((value) << PMC_PCR_PID_Pos)))
#define PMC_PCR_GCKCSS_Pos 8
#define PMC_PCR_GCKCSS_Msk (0x7u << PMC_PCR_GCKCSS_Pos) /**< \brief (PMC_PCR) GCK Clock Source Selection */
#define   PMC_PCR_GCKCSS_SLOW_CLK (0x0u << 8) /**< \brief (PMC_PCR) Slow Clock is selected */
#define   PMC_PCR_GCKCSS_MAIN_CLK (0x1u << 8) /**< \brief (PMC_PCR) Main Clock is selected */
#define   PMC_PCR_GCKCSS_PLLA_CLK (0x2u << 8) /**< \brief (PMC_PCR) PLLACK is selected */
#define   PMC_PCR_GCKCSS_UPLL_CLK (0x3u << 8) /**< \brief (PMC_PCR) UPLL Clock is selected */
#define   PMC_PCR_GCKCSS_MCK_CLK (0x4u << 8) /**< \brief (PMC_PCR) Master Clock is selected */
#define   PMC_PCR_GCKCSS_AUDIO_CLK (0x5u << 8) /**< \brief (PMC_PCR) Audio PLL clock is selected */
#define PMC_PCR_CMD (0x1u << 12) /**< \brief (PMC_PCR) Command */
#define PMC_PCR_DIV_Pos 16
#define PMC_PCR_DIV_Msk (0x3u << PMC_PCR_DIV_Pos) /**< \brief (PMC_PCR) Divisor Value */
#define   PMC_PCR_DIV_PERIPH_DIV_MCK (0x0u << 16) /**< \brief (PMC_PCR) Peripheral clock is MCK */
#define   PMC_PCR_DIV_PERIPH_DIV2_MCK (0x1u << 16) /**< \brief (PMC_PCR) Peripheral clock is MCK/2 */
#define   PMC_PCR_DIV_PERIPH_DIV4_MCK (0x2u << 16) /**< \brief (PMC_PCR) Peripheral clock is MCK/4 */
#define   PMC_PCR_DIV_PERIPH_DIV8_MCK (0x3u << 16) /**< \brief (PMC_PCR) Peripheral clock is MCK/8 */
#define PMC_PCR_GCKDIV_Pos 20
#define PMC_PCR_GCKDIV_Msk (0xffu << PMC_PCR_GCKDIV_Pos) /**< \brief (PMC_PCR) Generated Clock Division Ratio */
#define PMC_PCR_GCKDIV(value) ((PMC_PCR_GCKDIV_Msk & ((value) << PMC_PCR_GCKDIV_Pos)))
#define PMC_PCR_EN (0x1u << 28) /**< \brief (PMC_PCR) Enable */
#define PMC_PCR_GCKEN (0x1u << 29) /**< \brief (PMC_PCR) GCK Enable */
/* -------- PMC_OCR : (PMC Offset: 0x0110) Oscillator Calibration Register -------- */
#define PMC_OCR_CAL_Pos 0
#define PMC_OCR_CAL_Msk (0x7fu << PMC_OCR_CAL_Pos) /**< \brief (PMC_OCR) 12 MHz RC Oscillator Calibration Bits */
#define PMC_OCR_CAL(value) ((PMC_OCR_CAL_Msk & ((value) << PMC_OCR_CAL_Pos)))
#define PMC_OCR_SEL (0x1u << 7) /**< \brief (PMC_OCR) Selection of RC Oscillator Calibration Bits */
/* -------- PMC_SLPWK_AIPR : (PMC Offset: 0x0144) SleepWalking Activity In Progress Register -------- */
#define PMC_SLPWK_AIPR_AIP (0x1u << 0) /**< \brief (PMC_SLPWK_AIPR) Activity In Progress */
/* -------- PMC_SLPWKCR : (PMC Offset: 0x0148) SleepWalking Control Register -------- */
#define PMC_SLPWKCR_PID_Pos 0
#define PMC_SLPWKCR_PID_Msk (0x7fu << PMC_SLPWKCR_PID_Pos) /**< \brief (PMC_SLPWKCR) Peripheral ID */
#define PMC_SLPWKCR_PID(value) ((PMC_SLPWKCR_PID_Msk & ((value) << PMC_SLPWKCR_PID_Pos)))
#define PMC_SLPWKCR_CMD (0x1u << 12) /**< \brief (PMC_SLPWKCR) Command */
#define PMC_SLPWKCR_ASR (0x1u << 16) /**< \brief (PMC_SLPWKCR) Activity Status Register */
#define PMC_SLPWKCR_SLPWKSR (0x1u << 28) /**< \brief (PMC_SLPWKCR) SleepWalking Status Register */
/* -------- PMC_AUDIO_PLL0 : (PMC Offset: 0x014C) Audio PLL Register 0 -------- */
#define PMC_AUDIO_PLL0_PLLEN (0x1u << 0) /**< \brief (PMC_AUDIO_PLL0) PLL Enable */
#define PMC_AUDIO_PLL0_PADEN (0x1u << 1) /**< \brief (PMC_AUDIO_PLL0) Pad Clock Enable */
#define PMC_AUDIO_PLL0_PMCEN (0x1u << 2) /**< \brief (PMC_AUDIO_PLL0) PMC Clock Enable */
#define PMC_AUDIO_PLL0_RESETN (0x1u << 3) /**< \brief (PMC_AUDIO_PLL0) Audio PLL Reset */
#define PMC_AUDIO_PLL0_ND_Pos 8
#define PMC_AUDIO_PLL0_ND_Msk (0x7fu << PMC_AUDIO_PLL0_ND_Pos) /**< \brief (PMC_AUDIO_PLL0) Loop Divider Ratio */
#define PMC_AUDIO_PLL0_ND(value) ((PMC_AUDIO_PLL0_ND_Msk & ((value) << PMC_AUDIO_PLL0_ND_Pos)))
#define PMC_AUDIO_PLL0_QDPMC_Pos 16
#define PMC_AUDIO_PLL0_QDPMC_Msk (0x7fu << PMC_AUDIO_PLL0_QDPMC_Pos) /**< \brief (PMC_AUDIO_PLL0) Output Divider Ratio for PMC Clock */
#define PMC_AUDIO_PLL0_QDPMC(value) ((PMC_AUDIO_PLL0_QDPMC_Msk & ((value) << PMC_AUDIO_PLL0_QDPMC_Pos)))
/* -------- PMC_AUDIO_PLL1 : (PMC Offset: 0x0150) Audio PLL Register 1 -------- */
#define PMC_AUDIO_PLL1_FRACR_Pos 0
#define PMC_AUDIO_PLL1_FRACR_Msk (0x3fffffu << PMC_AUDIO_PLL1_FRACR_Pos) /**< \brief (PMC_AUDIO_PLL1) Fractional Loop Divider Setting */
#define PMC_AUDIO_PLL1_FRACR(value) ((PMC_AUDIO_PLL1_FRACR_Msk & ((value) << PMC_AUDIO_PLL1_FRACR_Pos)))
#define PMC_AUDIO_PLL1_QDAUDIO_Pos 24
#define PMC_AUDIO_PLL1_QDAUDIO_Msk (0x7fu << PMC_AUDIO_PLL1_QDAUDIO_Pos) /**< \brief (PMC_AUDIO_PLL1) Output Divider Ratio for Pad Clock */
#define PMC_AUDIO_PLL1_QDAUDIO(value) ((PMC_AUDIO_PLL1_QDAUDIO_Msk & ((value) << PMC_AUDIO_PLL1_QDAUDIO_Pos)))

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR Pulse Width Modulation Controller */
/* ============================================================================= */
/** \addtogroup SAMA5D2_PWM Pulse Width Modulation Controller */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief PwmCh_num hardware registers */
typedef struct {
  __IO uint32_t PWM_CMR;     /**< \brief (PwmCh_num Offset: 0x0) PWM Channel Mode Register */
  __IO uint32_t PWM_CDTY;    /**< \brief (PwmCh_num Offset: 0x4) PWM Channel Duty Cycle Register */
  __O  uint32_t PWM_CDTYUPD; /**< \brief (PwmCh_num Offset: 0x8) PWM Channel Duty Cycle Update Register */
  __IO uint32_t PWM_CPRD;    /**< \brief (PwmCh_num Offset: 0xC) PWM Channel Period Register */
  __O  uint32_t PWM_CPRDUPD; /**< \brief (PwmCh_num Offset: 0x10) PWM Channel Period Update Register */
  __I  uint32_t PWM_CCNT;    /**< \brief (PwmCh_num Offset: 0x14) PWM Channel Counter Register */
  __IO uint32_t PWM_DT;      /**< \brief (PwmCh_num Offset: 0x18) PWM Channel Dead Time Register */
  __O  uint32_t PWM_DTUPD;   /**< \brief (PwmCh_num Offset: 0x1C) PWM Channel Dead Time Update Register */
} PwmCh_num;
/** \brief PwmCmp hardware registers */
typedef struct {
  __IO uint32_t PWM_CMPV;    /**< \brief (PwmCmp Offset: 0x0) PWM Comparison 0 Value Register */
  __O  uint32_t PWM_CMPVUPD; /**< \brief (PwmCmp Offset: 0x4) PWM Comparison 0 Value Update Register */
  __IO uint32_t PWM_CMPM;    /**< \brief (PwmCmp Offset: 0x8) PWM Comparison 0 Mode Register */
  __O  uint32_t PWM_CMPMUPD; /**< \brief (PwmCmp Offset: 0xC) PWM Comparison 0 Mode Update Register */
} PwmCmp;
/** \brief Pwm hardware registers */
#define PWMCMP_NUMBER 8
#define PWMCH_NUM_NUMBER 4
typedef struct {
  __IO uint32_t  PWM_CLK;                      /**< \brief (Pwm Offset: 0x00) PWM Clock Register */
  __O  uint32_t  PWM_ENA;                      /**< \brief (Pwm Offset: 0x04) PWM Enable Register */
  __O  uint32_t  PWM_DIS;                      /**< \brief (Pwm Offset: 0x08) PWM Disable Register */
  __I  uint32_t  PWM_SR;                       /**< \brief (Pwm Offset: 0x0C) PWM Status Register */
  __O  uint32_t  PWM_IER1;                     /**< \brief (Pwm Offset: 0x10) PWM Interrupt Enable Register 1 */
  __O  uint32_t  PWM_IDR1;                     /**< \brief (Pwm Offset: 0x14) PWM Interrupt Disable Register 1 */
  __I  uint32_t  PWM_IMR1;                     /**< \brief (Pwm Offset: 0x18) PWM Interrupt Mask Register 1 */
  __I  uint32_t  PWM_ISR1;                     /**< \brief (Pwm Offset: 0x1C) PWM Interrupt Status Register 1 */
  __IO uint32_t  PWM_SCM;                      /**< \brief (Pwm Offset: 0x20) PWM Sync Channels Mode Register */
  __O  uint32_t  PWM_DMAR;                     /**< \brief (Pwm Offset: 0x24) PWM DMA Register */
  __IO uint32_t  PWM_SCUC;                     /**< \brief (Pwm Offset: 0x28) PWM Sync Channels Update Control Register */
  __IO uint32_t  PWM_SCUP;                     /**< \brief (Pwm Offset: 0x2C) PWM Sync Channels Update Period Register */
  __O  uint32_t  PWM_SCUPUPD;                  /**< \brief (Pwm Offset: 0x30) PWM Sync Channels Update Period Update Register */
  __O  uint32_t  PWM_IER2;                     /**< \brief (Pwm Offset: 0x34) PWM Interrupt Enable Register 2 */
  __O  uint32_t  PWM_IDR2;                     /**< \brief (Pwm Offset: 0x38) PWM Interrupt Disable Register 2 */
  __I  uint32_t  PWM_IMR2;                     /**< \brief (Pwm Offset: 0x3C) PWM Interrupt Mask Register 2 */
  __I  uint32_t  PWM_ISR2;                     /**< \brief (Pwm Offset: 0x40) PWM Interrupt Status Register 2 */
  __IO uint32_t  PWM_OOV;                      /**< \brief (Pwm Offset: 0x44) PWM Output Override Value Register */
  __IO uint32_t  PWM_OS;                       /**< \brief (Pwm Offset: 0x48) PWM Output Selection Register */
  __O  uint32_t  PWM_OSS;                      /**< \brief (Pwm Offset: 0x4C) PWM Output Selection Set Register */
  __O  uint32_t  PWM_OSC;                      /**< \brief (Pwm Offset: 0x50) PWM Output Selection Clear Register */
  __O  uint32_t  PWM_OSSUPD;                   /**< \brief (Pwm Offset: 0x54) PWM Output Selection Set Update Register */
  __O  uint32_t  PWM_OSCUPD;                   /**< \brief (Pwm Offset: 0x58) PWM Output Selection Clear Update Register */
  __IO uint32_t  PWM_FMR;                      /**< \brief (Pwm Offset: 0x5C) PWM Fault Mode Register */
  __I  uint32_t  PWM_FSR;                      /**< \brief (Pwm Offset: 0x60) PWM Fault Status Register */
  __O  uint32_t  PWM_FCR;                      /**< \brief (Pwm Offset: 0x64) PWM Fault Clear Register */
  __IO uint32_t  PWM_FPV1;                     /**< \brief (Pwm Offset: 0x68) PWM Fault Protection Value Register 1 */
  __IO uint32_t  PWM_FPE;                      /**< \brief (Pwm Offset: 0x6C) PWM Fault Protection Enable Register */
  __I  uint32_t  Reserved1[3];
  __IO uint32_t  PWM_ELMR[2];                  /**< \brief (Pwm Offset: 0x7C) PWM Event Line 0 Mode Register */
  __I  uint32_t  Reserved2[7];
  __IO uint32_t  PWM_SSPR;                     /**< \brief (Pwm Offset: 0xA0) PWM Spread Spectrum Register */
  __O  uint32_t  PWM_SSPUP;                    /**< \brief (Pwm Offset: 0xA4) PWM Spread Spectrum Update Register */
  __I  uint32_t  Reserved3[2];
  __IO uint32_t  PWM_SMMR;                     /**< \brief (Pwm Offset: 0xB0) PWM Stepper Motor Mode Register */
  __I  uint32_t  Reserved4[3];
  __IO uint32_t  PWM_FPV2;                     /**< \brief (Pwm Offset: 0xC0) PWM Fault Protection Value 2 Register */
  __I  uint32_t  Reserved5[8];
  __O  uint32_t  PWM_WPCR;                     /**< \brief (Pwm Offset: 0xE4) PWM Write Protection Control Register */
  __I  uint32_t  PWM_WPSR;                     /**< \brief (Pwm Offset: 0xE8) PWM Write Protection Status Register */
  __I  uint32_t  Reserved6[4];
  __I  uint32_t  PWM_VERSION;                  /**< \brief (Pwm Offset: 0xFC) Version Register */
  __I  uint32_t  Reserved7[12];
       PwmCmp    PWM_CMP[PWMCMP_NUMBER];       /**< \brief (Pwm Offset: 0x130) 0 .. 7 */
  __I  uint32_t  Reserved8[20];
       PwmCh_num PWM_CH_NUM[PWMCH_NUM_NUMBER]; /**< \brief (Pwm Offset: 0x200) ch_num = 0 .. 3 */
  __I  uint32_t  Reserved9[96];
  __O  uint32_t  PWM_CMUPD0;                   /**< \brief (Pwm Offset: 0x400) PWM Channel Mode Update Register (ch_num = 0) */
  __IO uint32_t  PWM_CAE0;                     /**< \brief (Pwm Offset: 0x404) PWM Channel Additional Edge Register (ch_num = 0) */
  __O  uint32_t  PWM_CAEUPD0;                  /**< \brief (Pwm Offset: 0x408) PWM Channel Additional Edge Update Register (ch_num = 0) */
  __I  uint32_t  Reserved10[5];
  __O  uint32_t  PWM_CMUPD1;                   /**< \brief (Pwm Offset: 0x420) PWM Channel Mode Update Register (ch_num = 1) */
  __IO uint32_t  PWM_CAE1;                     /**< \brief (Pwm Offset: 0x424) PWM Channel Additional Edge Register (ch_num = 1) */
  __O  uint32_t  PWM_CAEUPD1;                  /**< \brief (Pwm Offset: 0x428) PWM Channel Additional Edge Update Register (ch_num = 1) */
  __IO uint32_t  PWM_ETRG1;                    /**< \brief (Pwm Offset: 0x42C) PWM External Trigger Register (trg_num = 1) */
  __IO uint32_t  PWM_LEBR1;                    /**< \brief (Pwm Offset: 0x430) PWM Leading-Edge Blanking Register (trg_num = 1) */
  __I  uint32_t  Reserved11[3];
  __O  uint32_t  PWM_CMUPD2;                   /**< \brief (Pwm Offset: 0x440) PWM Channel Mode Update Register (ch_num = 2) */
  __IO uint32_t  PWM_CAE2;                     /**< \brief (Pwm Offset: 0x444) PWM Channel Additional Edge Register (ch_num = 2) */
  __O  uint32_t  PWM_CAEUPD2;                  /**< \brief (Pwm Offset: 0x448) PWM Channel Additional Edge Update Register (ch_num = 2) */
  __IO uint32_t  PWM_ETRG2;                    /**< \brief (Pwm Offset: 0x44C) PWM External Trigger Register (trg_num = 2) */
  __IO uint32_t  PWM_LEBR2;                    /**< \brief (Pwm Offset: 0x450) PWM Leading-Edge Blanking Register (trg_num = 2) */
  __I  uint32_t  Reserved12[3];
  __O  uint32_t  PWM_CMUPD3;                   /**< \brief (Pwm Offset: 0x460) PWM Channel Mode Update Register (ch_num = 3) */
  __IO uint32_t  PWM_CAE3;                     /**< \brief (Pwm Offset: 0x464) PWM Channel Additional Edge Register (ch_num = 3) */
  __O  uint32_t  PWM_CAEUPD3;                  /**< \brief (Pwm Offset: 0x468) PWM Channel Additional Edge Update Register (ch_num = 3) */
  __IO uint32_t  PWM_ETRG3;                    /**< \brief (Pwm Offset: 0x46C) PWM External Trigger Register (trg_num = 3) */
  __IO uint32_t  PWM_LEBR3;                    /**< \brief (Pwm Offset: 0x470) PWM Leading-Edge Blanking Register (trg_num = 3) */
} Pwm;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- PWM_CLK : (PWM Offset: 0x00) PWM Clock Register -------- */
#define PWM_CLK_DIVA_Pos 0
#define PWM_CLK_DIVA_Msk (0xffu << PWM_CLK_DIVA_Pos) /**< \brief (PWM_CLK) CLKA, CLKB Divide Factor */
#define PWM_CLK_DIVA(value) ((PWM_CLK_DIVA_Msk & ((value) << PWM_CLK_DIVA_Pos)))
#define PWM_CLK_PREA_Pos 8
#define PWM_CLK_PREA_Msk (0xfu << PWM_CLK_PREA_Pos) /**< \brief (PWM_CLK) CLKA, CLKB Source Clock Selection */
#define PWM_CLK_PREA(value) ((PWM_CLK_PREA_Msk & ((value) << PWM_CLK_PREA_Pos)))
#define PWM_CLK_DIVB_Pos 16
#define PWM_CLK_DIVB_Msk (0xffu << PWM_CLK_DIVB_Pos) /**< \brief (PWM_CLK) CLKA, CLKB Divide Factor */
#define PWM_CLK_DIVB(value) ((PWM_CLK_DIVB_Msk & ((value) << PWM_CLK_DIVB_Pos)))
#define PWM_CLK_PREB_Pos 24
#define PWM_CLK_PREB_Msk (0xfu << PWM_CLK_PREB_Pos) /**< \brief (PWM_CLK) CLKA, CLKB Source Clock Selection */
#define PWM_CLK_PREB(value) ((PWM_CLK_PREB_Msk & ((value) << PWM_CLK_PREB_Pos)))
#define PWM_CLK_CLKSEL (0x1u << 31) /**< \brief (PWM_CLK) CCK Source Clock Selection */
/* -------- PWM_ENA : (PWM Offset: 0x04) PWM Enable Register -------- */
#define PWM_ENA_CHID0 (0x1u << 0) /**< \brief (PWM_ENA) Channel ID */
#define PWM_ENA_CHID1 (0x1u << 1) /**< \brief (PWM_ENA) Channel ID */
#define PWM_ENA_CHID2 (0x1u << 2) /**< \brief (PWM_ENA) Channel ID */
#define PWM_ENA_CHID3 (0x1u << 3) /**< \brief (PWM_ENA) Channel ID */
/* -------- PWM_DIS : (PWM Offset: 0x08) PWM Disable Register -------- */
#define PWM_DIS_CHID0 (0x1u << 0) /**< \brief (PWM_DIS) Channel ID */
#define PWM_DIS_CHID1 (0x1u << 1) /**< \brief (PWM_DIS) Channel ID */
#define PWM_DIS_CHID2 (0x1u << 2) /**< \brief (PWM_DIS) Channel ID */
#define PWM_DIS_CHID3 (0x1u << 3) /**< \brief (PWM_DIS) Channel ID */
/* -------- PWM_SR : (PWM Offset: 0x0C) PWM Status Register -------- */
#define PWM_SR_CHID0 (0x1u << 0) /**< \brief (PWM_SR) Channel ID */
#define PWM_SR_CHID1 (0x1u << 1) /**< \brief (PWM_SR) Channel ID */
#define PWM_SR_CHID2 (0x1u << 2) /**< \brief (PWM_SR) Channel ID */
#define PWM_SR_CHID3 (0x1u << 3) /**< \brief (PWM_SR) Channel ID */
/* -------- PWM_IER1 : (PWM Offset: 0x10) PWM Interrupt Enable Register 1 -------- */
#define PWM_IER1_CHID0 (0x1u << 0) /**< \brief (PWM_IER1) Counter Event on Channel 0 Interrupt Enable */
#define PWM_IER1_CHID1 (0x1u << 1) /**< \brief (PWM_IER1) Counter Event on Channel 1 Interrupt Enable */
#define PWM_IER1_CHID2 (0x1u << 2) /**< \brief (PWM_IER1) Counter Event on Channel 2 Interrupt Enable */
#define PWM_IER1_CHID3 (0x1u << 3) /**< \brief (PWM_IER1) Counter Event on Channel 3 Interrupt Enable */
#define PWM_IER1_FCHID0 (0x1u << 16) /**< \brief (PWM_IER1) Fault Protection Trigger on Channel 0 Interrupt Enable */
#define PWM_IER1_FCHID1 (0x1u << 17) /**< \brief (PWM_IER1) Fault Protection Trigger on Channel 1 Interrupt Enable */
#define PWM_IER1_FCHID2 (0x1u << 18) /**< \brief (PWM_IER1) Fault Protection Trigger on Channel 2 Interrupt Enable */
#define PWM_IER1_FCHID3 (0x1u << 19) /**< \brief (PWM_IER1) Fault Protection Trigger on Channel 3 Interrupt Enable */
/* -------- PWM_IDR1 : (PWM Offset: 0x14) PWM Interrupt Disable Register 1 -------- */
#define PWM_IDR1_CHID0 (0x1u << 0) /**< \brief (PWM_IDR1) Counter Event on Channel 0 Interrupt Disable */
#define PWM_IDR1_CHID1 (0x1u << 1) /**< \brief (PWM_IDR1) Counter Event on Channel 1 Interrupt Disable */
#define PWM_IDR1_CHID2 (0x1u << 2) /**< \brief (PWM_IDR1) Counter Event on Channel 2 Interrupt Disable */
#define PWM_IDR1_CHID3 (0x1u << 3) /**< \brief (PWM_IDR1) Counter Event on Channel 3 Interrupt Disable */
#define PWM_IDR1_FCHID0 (0x1u << 16) /**< \brief (PWM_IDR1) Fault Protection Trigger on Channel 0 Interrupt Disable */
#define PWM_IDR1_FCHID1 (0x1u << 17) /**< \brief (PWM_IDR1) Fault Protection Trigger on Channel 1 Interrupt Disable */
#define PWM_IDR1_FCHID2 (0x1u << 18) /**< \brief (PWM_IDR1) Fault Protection Trigger on Channel 2 Interrupt Disable */
#define PWM_IDR1_FCHID3 (0x1u << 19) /**< \brief (PWM_IDR1) Fault Protection Trigger on Channel 3 Interrupt Disable */
/* -------- PWM_IMR1 : (PWM Offset: 0x18) PWM Interrupt Mask Register 1 -------- */
#define PWM_IMR1_CHID0 (0x1u << 0) /**< \brief (PWM_IMR1) Counter Event on Channel 0 Interrupt Mask */
#define PWM_IMR1_CHID1 (0x1u << 1) /**< \brief (PWM_IMR1) Counter Event on Channel 1 Interrupt Mask */
#define PWM_IMR1_CHID2 (0x1u << 2) /**< \brief (PWM_IMR1) Counter Event on Channel 2 Interrupt Mask */
#define PWM_IMR1_CHID3 (0x1u << 3) /**< \brief (PWM_IMR1) Counter Event on Channel 3 Interrupt Mask */
#define PWM_IMR1_FCHID0 (0x1u << 16) /**< \brief (PWM_IMR1) Fault Protection Trigger on Channel 0 Interrupt Mask */
#define PWM_IMR1_FCHID1 (0x1u << 17) /**< \brief (PWM_IMR1) Fault Protection Trigger on Channel 1 Interrupt Mask */
#define PWM_IMR1_FCHID2 (0x1u << 18) /**< \brief (PWM_IMR1) Fault Protection Trigger on Channel 2 Interrupt Mask */
#define PWM_IMR1_FCHID3 (0x1u << 19) /**< \brief (PWM_IMR1) Fault Protection Trigger on Channel 3 Interrupt Mask */
/* -------- PWM_ISR1 : (PWM Offset: 0x1C) PWM Interrupt Status Register 1 -------- */
#define PWM_ISR1_CHID0 (0x1u << 0) /**< \brief (PWM_ISR1) Counter Event on Channel 0 */
#define PWM_ISR1_CHID1 (0x1u << 1) /**< \brief (PWM_ISR1) Counter Event on Channel 1 */
#define PWM_ISR1_CHID2 (0x1u << 2) /**< \brief (PWM_ISR1) Counter Event on Channel 2 */
#define PWM_ISR1_CHID3 (0x1u << 3) /**< \brief (PWM_ISR1) Counter Event on Channel 3 */
#define PWM_ISR1_FCHID0 (0x1u << 16) /**< \brief (PWM_ISR1) Fault Protection Trigger on Channel 0 */
#define PWM_ISR1_FCHID1 (0x1u << 17) /**< \brief (PWM_ISR1) Fault Protection Trigger on Channel 1 */
#define PWM_ISR1_FCHID2 (0x1u << 18) /**< \brief (PWM_ISR1) Fault Protection Trigger on Channel 2 */
#define PWM_ISR1_FCHID3 (0x1u << 19) /**< \brief (PWM_ISR1) Fault Protection Trigger on Channel 3 */
/* -------- PWM_SCM : (PWM Offset: 0x20) PWM Sync Channels Mode Register -------- */
#define PWM_SCM_SYNC0 (0x1u << 0) /**< \brief (PWM_SCM) Synchronous Channel 0 */
#define PWM_SCM_SYNC1 (0x1u << 1) /**< \brief (PWM_SCM) Synchronous Channel 1 */
#define PWM_SCM_SYNC2 (0x1u << 2) /**< \brief (PWM_SCM) Synchronous Channel 2 */
#define PWM_SCM_SYNC3 (0x1u << 3) /**< \brief (PWM_SCM) Synchronous Channel 3 */
#define PWM_SCM_UPDM_Pos 16
#define PWM_SCM_UPDM_Msk (0x3u << PWM_SCM_UPDM_Pos) /**< \brief (PWM_SCM) Synchronous Channels Update Mode */
#define   PWM_SCM_UPDM_MODE0 (0x0u << 16) /**< \brief (PWM_SCM) Manual write of double buffer registers and manual update of synchronous channels */
#define   PWM_SCM_UPDM_MODE1 (0x1u << 16) /**< \brief (PWM_SCM) Manual write of double buffer registers and automatic update of synchronous channels */
#define   PWM_SCM_UPDM_MODE2 (0x2u << 16) /**< \brief (PWM_SCM) Automatic write of duty-cycle update registers by the DMA and automatic update of synchronous channels */
#define PWM_SCM_PTRM (0x1u << 20) /**< \brief (PWM_SCM) DMA Transfer Request Mode */
#define PWM_SCM_PTRCS_Pos 21
#define PWM_SCM_PTRCS_Msk (0x7u << PWM_SCM_PTRCS_Pos) /**< \brief (PWM_SCM) DMA Transfer Request Comparison Selection */
#define PWM_SCM_PTRCS(value) ((PWM_SCM_PTRCS_Msk & ((value) << PWM_SCM_PTRCS_Pos)))
/* -------- PWM_DMAR : (PWM Offset: 0x24) PWM DMA Register -------- */
#define PWM_DMAR_DMADUTY_Pos 0
#define PWM_DMAR_DMADUTY_Msk (0xffffffu << PWM_DMAR_DMADUTY_Pos) /**< \brief (PWM_DMAR) Duty-Cycle Holding Register for DMA Access */
#define PWM_DMAR_DMADUTY(value) ((PWM_DMAR_DMADUTY_Msk & ((value) << PWM_DMAR_DMADUTY_Pos)))
/* -------- PWM_SCUC : (PWM Offset: 0x28) PWM Sync Channels Update Control Register -------- */
#define PWM_SCUC_UPDULOCK (0x1u << 0) /**< \brief (PWM_SCUC) Synchronous Channels Update Unlock */
/* -------- PWM_SCUP : (PWM Offset: 0x2C) PWM Sync Channels Update Period Register -------- */
#define PWM_SCUP_UPR_Pos 0
#define PWM_SCUP_UPR_Msk (0xfu << PWM_SCUP_UPR_Pos) /**< \brief (PWM_SCUP) Update Period */
#define PWM_SCUP_UPR(value) ((PWM_SCUP_UPR_Msk & ((value) << PWM_SCUP_UPR_Pos)))
#define PWM_SCUP_UPRCNT_Pos 4
#define PWM_SCUP_UPRCNT_Msk (0xfu << PWM_SCUP_UPRCNT_Pos) /**< \brief (PWM_SCUP) Update Period Counter */
#define PWM_SCUP_UPRCNT(value) ((PWM_SCUP_UPRCNT_Msk & ((value) << PWM_SCUP_UPRCNT_Pos)))
/* -------- PWM_SCUPUPD : (PWM Offset: 0x30) PWM Sync Channels Update Period Update Register -------- */
#define PWM_SCUPUPD_UPRUPD_Pos 0
#define PWM_SCUPUPD_UPRUPD_Msk (0xfu << PWM_SCUPUPD_UPRUPD_Pos) /**< \brief (PWM_SCUPUPD) Update Period Update */
#define PWM_SCUPUPD_UPRUPD(value) ((PWM_SCUPUPD_UPRUPD_Msk & ((value) << PWM_SCUPUPD_UPRUPD_Pos)))
/* -------- PWM_IER2 : (PWM Offset: 0x34) PWM Interrupt Enable Register 2 -------- */
#define PWM_IER2_WRDY (0x1u << 0) /**< \brief (PWM_IER2) Write Ready for Synchronous Channels Update Interrupt Enable */
#define PWM_IER2_UNRE (0x1u << 3) /**< \brief (PWM_IER2) Synchronous Channels Update Underrun Error Interrupt Enable */
#define PWM_IER2_CMPM0 (0x1u << 8) /**< \brief (PWM_IER2) Comparison 0 Match Interrupt Enable */
#define PWM_IER2_CMPM1 (0x1u << 9) /**< \brief (PWM_IER2) Comparison 1 Match Interrupt Enable */
#define PWM_IER2_CMPM2 (0x1u << 10) /**< \brief (PWM_IER2) Comparison 2 Match Interrupt Enable */
#define PWM_IER2_CMPM3 (0x1u << 11) /**< \brief (PWM_IER2) Comparison 3 Match Interrupt Enable */
#define PWM_IER2_CMPM4 (0x1u << 12) /**< \brief (PWM_IER2) Comparison 4 Match Interrupt Enable */
#define PWM_IER2_CMPM5 (0x1u << 13) /**< \brief (PWM_IER2) Comparison 5 Match Interrupt Enable */
#define PWM_IER2_CMPM6 (0x1u << 14) /**< \brief (PWM_IER2) Comparison 6 Match Interrupt Enable */
#define PWM_IER2_CMPM7 (0x1u << 15) /**< \brief (PWM_IER2) Comparison 7 Match Interrupt Enable */
#define PWM_IER2_CMPU0 (0x1u << 16) /**< \brief (PWM_IER2) Comparison 0 Update Interrupt Enable */
#define PWM_IER2_CMPU1 (0x1u << 17) /**< \brief (PWM_IER2) Comparison 1 Update Interrupt Enable */
#define PWM_IER2_CMPU2 (0x1u << 18) /**< \brief (PWM_IER2) Comparison 2 Update Interrupt Enable */
#define PWM_IER2_CMPU3 (0x1u << 19) /**< \brief (PWM_IER2) Comparison 3 Update Interrupt Enable */
#define PWM_IER2_CMPU4 (0x1u << 20) /**< \brief (PWM_IER2) Comparison 4 Update Interrupt Enable */
#define PWM_IER2_CMPU5 (0x1u << 21) /**< \brief (PWM_IER2) Comparison 5 Update Interrupt Enable */
#define PWM_IER2_CMPU6 (0x1u << 22) /**< \brief (PWM_IER2) Comparison 6 Update Interrupt Enable */
#define PWM_IER2_CMPU7 (0x1u << 23) /**< \brief (PWM_IER2) Comparison 7 Update Interrupt Enable */
/* -------- PWM_IDR2 : (PWM Offset: 0x38) PWM Interrupt Disable Register 2 -------- */
#define PWM_IDR2_WRDY (0x1u << 0) /**< \brief (PWM_IDR2) Write Ready for Synchronous Channels Update Interrupt Disable */
#define PWM_IDR2_UNRE (0x1u << 3) /**< \brief (PWM_IDR2) Synchronous Channels Update Underrun Error Interrupt Disable */
#define PWM_IDR2_CMPM0 (0x1u << 8) /**< \brief (PWM_IDR2) Comparison 0 Match Interrupt Disable */
#define PWM_IDR2_CMPM1 (0x1u << 9) /**< \brief (PWM_IDR2) Comparison 1 Match Interrupt Disable */
#define PWM_IDR2_CMPM2 (0x1u << 10) /**< \brief (PWM_IDR2) Comparison 2 Match Interrupt Disable */
#define PWM_IDR2_CMPM3 (0x1u << 11) /**< \brief (PWM_IDR2) Comparison 3 Match Interrupt Disable */
#define PWM_IDR2_CMPM4 (0x1u << 12) /**< \brief (PWM_IDR2) Comparison 4 Match Interrupt Disable */
#define PWM_IDR2_CMPM5 (0x1u << 13) /**< \brief (PWM_IDR2) Comparison 5 Match Interrupt Disable */
#define PWM_IDR2_CMPM6 (0x1u << 14) /**< \brief (PWM_IDR2) Comparison 6 Match Interrupt Disable */
#define PWM_IDR2_CMPM7 (0x1u << 15) /**< \brief (PWM_IDR2) Comparison 7 Match Interrupt Disable */
#define PWM_IDR2_CMPU0 (0x1u << 16) /**< \brief (PWM_IDR2) Comparison 0 Update Interrupt Disable */
#define PWM_IDR2_CMPU1 (0x1u << 17) /**< \brief (PWM_IDR2) Comparison 1 Update Interrupt Disable */
#define PWM_IDR2_CMPU2 (0x1u << 18) /**< \brief (PWM_IDR2) Comparison 2 Update Interrupt Disable */
#define PWM_IDR2_CMPU3 (0x1u << 19) /**< \brief (PWM_IDR2) Comparison 3 Update Interrupt Disable */
#define PWM_IDR2_CMPU4 (0x1u << 20) /**< \brief (PWM_IDR2) Comparison 4 Update Interrupt Disable */
#define PWM_IDR2_CMPU5 (0x1u << 21) /**< \brief (PWM_IDR2) Comparison 5 Update Interrupt Disable */
#define PWM_IDR2_CMPU6 (0x1u << 22) /**< \brief (PWM_IDR2) Comparison 6 Update Interrupt Disable */
#define PWM_IDR2_CMPU7 (0x1u << 23) /**< \brief (PWM_IDR2) Comparison 7 Update Interrupt Disable */
/* -------- PWM_IMR2 : (PWM Offset: 0x3C) PWM Interrupt Mask Register 2 -------- */
#define PWM_IMR2_WRDY (0x1u << 0) /**< \brief (PWM_IMR2) Write Ready for Synchronous Channels Update Interrupt Mask */
#define PWM_IMR2_UNRE (0x1u << 3) /**< \brief (PWM_IMR2) Synchronous Channels Update Underrun Error Interrupt Mask */
#define PWM_IMR2_CMPM0 (0x1u << 8) /**< \brief (PWM_IMR2) Comparison 0 Match Interrupt Mask */
#define PWM_IMR2_CMPM1 (0x1u << 9) /**< \brief (PWM_IMR2) Comparison 1 Match Interrupt Mask */
#define PWM_IMR2_CMPM2 (0x1u << 10) /**< \brief (PWM_IMR2) Comparison 2 Match Interrupt Mask */
#define PWM_IMR2_CMPM3 (0x1u << 11) /**< \brief (PWM_IMR2) Comparison 3 Match Interrupt Mask */
#define PWM_IMR2_CMPM4 (0x1u << 12) /**< \brief (PWM_IMR2) Comparison 4 Match Interrupt Mask */
#define PWM_IMR2_CMPM5 (0x1u << 13) /**< \brief (PWM_IMR2) Comparison 5 Match Interrupt Mask */
#define PWM_IMR2_CMPM6 (0x1u << 14) /**< \brief (PWM_IMR2) Comparison 6 Match Interrupt Mask */
#define PWM_IMR2_CMPM7 (0x1u << 15) /**< \brief (PWM_IMR2) Comparison 7 Match Interrupt Mask */
#define PWM_IMR2_CMPU0 (0x1u << 16) /**< \brief (PWM_IMR2) Comparison 0 Update Interrupt Mask */
#define PWM_IMR2_CMPU1 (0x1u << 17) /**< \brief (PWM_IMR2) Comparison 1 Update Interrupt Mask */
#define PWM_IMR2_CMPU2 (0x1u << 18) /**< \brief (PWM_IMR2) Comparison 2 Update Interrupt Mask */
#define PWM_IMR2_CMPU3 (0x1u << 19) /**< \brief (PWM_IMR2) Comparison 3 Update Interrupt Mask */
#define PWM_IMR2_CMPU4 (0x1u << 20) /**< \brief (PWM_IMR2) Comparison 4 Update Interrupt Mask */
#define PWM_IMR2_CMPU5 (0x1u << 21) /**< \brief (PWM_IMR2) Comparison 5 Update Interrupt Mask */
#define PWM_IMR2_CMPU6 (0x1u << 22) /**< \brief (PWM_IMR2) Comparison 6 Update Interrupt Mask */
#define PWM_IMR2_CMPU7 (0x1u << 23) /**< \brief (PWM_IMR2) Comparison 7 Update Interrupt Mask */
/* -------- PWM_ISR2 : (PWM Offset: 0x40) PWM Interrupt Status Register 2 -------- */
#define PWM_ISR2_WRDY (0x1u << 0) /**< \brief (PWM_ISR2) Write Ready for Synchronous Channels Update */
#define PWM_ISR2_UNRE (0x1u << 3) /**< \brief (PWM_ISR2) Synchronous Channels Update Underrun Error */
#define PWM_ISR2_CMPM0 (0x1u << 8) /**< \brief (PWM_ISR2) Comparison 0 Match */
#define PWM_ISR2_CMPM1 (0x1u << 9) /**< \brief (PWM_ISR2) Comparison 1 Match */
#define PWM_ISR2_CMPM2 (0x1u << 10) /**< \brief (PWM_ISR2) Comparison 2 Match */
#define PWM_ISR2_CMPM3 (0x1u << 11) /**< \brief (PWM_ISR2) Comparison 3 Match */
#define PWM_ISR2_CMPM4 (0x1u << 12) /**< \brief (PWM_ISR2) Comparison 4 Match */
#define PWM_ISR2_CMPM5 (0x1u << 13) /**< \brief (PWM_ISR2) Comparison 5 Match */
#define PWM_ISR2_CMPM6 (0x1u << 14) /**< \brief (PWM_ISR2) Comparison 6 Match */
#define PWM_ISR2_CMPM7 (0x1u << 15) /**< \brief (PWM_ISR2) Comparison 7 Match */
#define PWM_ISR2_CMPU0 (0x1u << 16) /**< \brief (PWM_ISR2) Comparison 0 Update */
#define PWM_ISR2_CMPU1 (0x1u << 17) /**< \brief (PWM_ISR2) Comparison 1 Update */
#define PWM_ISR2_CMPU2 (0x1u << 18) /**< \brief (PWM_ISR2) Comparison 2 Update */
#define PWM_ISR2_CMPU3 (0x1u << 19) /**< \brief (PWM_ISR2) Comparison 3 Update */
#define PWM_ISR2_CMPU4 (0x1u << 20) /**< \brief (PWM_ISR2) Comparison 4 Update */
#define PWM_ISR2_CMPU5 (0x1u << 21) /**< \brief (PWM_ISR2) Comparison 5 Update */
#define PWM_ISR2_CMPU6 (0x1u << 22) /**< \brief (PWM_ISR2) Comparison 6 Update */
#define PWM_ISR2_CMPU7 (0x1u << 23) /**< \brief (PWM_ISR2) Comparison 7 Update */
/* -------- PWM_OOV : (PWM Offset: 0x44) PWM Output Override Value Register -------- */
#define PWM_OOV_OOVH0 (0x1u << 0) /**< \brief (PWM_OOV) Output Override Value for PWMH output of the channel 0 */
#define PWM_OOV_OOVH1 (0x1u << 1) /**< \brief (PWM_OOV) Output Override Value for PWMH output of the channel 1 */
#define PWM_OOV_OOVH2 (0x1u << 2) /**< \brief (PWM_OOV) Output Override Value for PWMH output of the channel 2 */
#define PWM_OOV_OOVH3 (0x1u << 3) /**< \brief (PWM_OOV) Output Override Value for PWMH output of the channel 3 */
#define PWM_OOV_OOVL0 (0x1u << 16) /**< \brief (PWM_OOV) Output Override Value for PWML output of the channel 0 */
#define PWM_OOV_OOVL1 (0x1u << 17) /**< \brief (PWM_OOV) Output Override Value for PWML output of the channel 1 */
#define PWM_OOV_OOVL2 (0x1u << 18) /**< \brief (PWM_OOV) Output Override Value for PWML output of the channel 2 */
#define PWM_OOV_OOVL3 (0x1u << 19) /**< \brief (PWM_OOV) Output Override Value for PWML output of the channel 3 */
/* -------- PWM_OS : (PWM Offset: 0x48) PWM Output Selection Register -------- */
#define PWM_OS_OSH0 (0x1u << 0) /**< \brief (PWM_OS) Output Selection for PWMH output of the channel 0 */
#define PWM_OS_OSH1 (0x1u << 1) /**< \brief (PWM_OS) Output Selection for PWMH output of the channel 1 */
#define PWM_OS_OSH2 (0x1u << 2) /**< \brief (PWM_OS) Output Selection for PWMH output of the channel 2 */
#define PWM_OS_OSH3 (0x1u << 3) /**< \brief (PWM_OS) Output Selection for PWMH output of the channel 3 */
#define PWM_OS_OSL0 (0x1u << 16) /**< \brief (PWM_OS) Output Selection for PWML output of the channel 0 */
#define PWM_OS_OSL1 (0x1u << 17) /**< \brief (PWM_OS) Output Selection for PWML output of the channel 1 */
#define PWM_OS_OSL2 (0x1u << 18) /**< \brief (PWM_OS) Output Selection for PWML output of the channel 2 */
#define PWM_OS_OSL3 (0x1u << 19) /**< \brief (PWM_OS) Output Selection for PWML output of the channel 3 */
/* -------- PWM_OSS : (PWM Offset: 0x4C) PWM Output Selection Set Register -------- */
#define PWM_OSS_OSSH0 (0x1u << 0) /**< \brief (PWM_OSS) Output Selection Set for PWMH output of the channel 0 */
#define PWM_OSS_OSSH1 (0x1u << 1) /**< \brief (PWM_OSS) Output Selection Set for PWMH output of the channel 1 */
#define PWM_OSS_OSSH2 (0x1u << 2) /**< \brief (PWM_OSS) Output Selection Set for PWMH output of the channel 2 */
#define PWM_OSS_OSSH3 (0x1u << 3) /**< \brief (PWM_OSS) Output Selection Set for PWMH output of the channel 3 */
#define PWM_OSS_OSSL0 (0x1u << 16) /**< \brief (PWM_OSS) Output Selection Set for PWML output of the channel 0 */
#define PWM_OSS_OSSL1 (0x1u << 17) /**< \brief (PWM_OSS) Output Selection Set for PWML output of the channel 1 */
#define PWM_OSS_OSSL2 (0x1u << 18) /**< \brief (PWM_OSS) Output Selection Set for PWML output of the channel 2 */
#define PWM_OSS_OSSL3 (0x1u << 19) /**< \brief (PWM_OSS) Output Selection Set for PWML output of the channel 3 */
/* -------- PWM_OSC : (PWM Offset: 0x50) PWM Output Selection Clear Register -------- */
#define PWM_OSC_OSCH0 (0x1u << 0) /**< \brief (PWM_OSC) Output Selection Clear for PWMH output of the channel 0 */
#define PWM_OSC_OSCH1 (0x1u << 1) /**< \brief (PWM_OSC) Output Selection Clear for PWMH output of the channel 1 */
#define PWM_OSC_OSCH2 (0x1u << 2) /**< \brief (PWM_OSC) Output Selection Clear for PWMH output of the channel 2 */
#define PWM_OSC_OSCH3 (0x1u << 3) /**< \brief (PWM_OSC) Output Selection Clear for PWMH output of the channel 3 */
#define PWM_OSC_OSCL0 (0x1u << 16) /**< \brief (PWM_OSC) Output Selection Clear for PWML output of the channel 0 */
#define PWM_OSC_OSCL1 (0x1u << 17) /**< \brief (PWM_OSC) Output Selection Clear for PWML output of the channel 1 */
#define PWM_OSC_OSCL2 (0x1u << 18) /**< \brief (PWM_OSC) Output Selection Clear for PWML output of the channel 2 */
#define PWM_OSC_OSCL3 (0x1u << 19) /**< \brief (PWM_OSC) Output Selection Clear for PWML output of the channel 3 */
/* -------- PWM_OSSUPD : (PWM Offset: 0x54) PWM Output Selection Set Update Register -------- */
#define PWM_OSSUPD_OSSUPH0 (0x1u << 0) /**< \brief (PWM_OSSUPD) Output Selection Set for PWMH output of the channel 0 */
#define PWM_OSSUPD_OSSUPH1 (0x1u << 1) /**< \brief (PWM_OSSUPD) Output Selection Set for PWMH output of the channel 1 */
#define PWM_OSSUPD_OSSUPH2 (0x1u << 2) /**< \brief (PWM_OSSUPD) Output Selection Set for PWMH output of the channel 2 */
#define PWM_OSSUPD_OSSUPH3 (0x1u << 3) /**< \brief (PWM_OSSUPD) Output Selection Set for PWMH output of the channel 3 */
#define PWM_OSSUPD_OSSUPL0 (0x1u << 16) /**< \brief (PWM_OSSUPD) Output Selection Set for PWML output of the channel 0 */
#define PWM_OSSUPD_OSSUPL1 (0x1u << 17) /**< \brief (PWM_OSSUPD) Output Selection Set for PWML output of the channel 1 */
#define PWM_OSSUPD_OSSUPL2 (0x1u << 18) /**< \brief (PWM_OSSUPD) Output Selection Set for PWML output of the channel 2 */
#define PWM_OSSUPD_OSSUPL3 (0x1u << 19) /**< \brief (PWM_OSSUPD) Output Selection Set for PWML output of the channel 3 */
/* -------- PWM_OSCUPD : (PWM Offset: 0x58) PWM Output Selection Clear Update Register -------- */
#define PWM_OSCUPD_OSCUPH0 (0x1u << 0) /**< \brief (PWM_OSCUPD) Output Selection Clear for PWMH output of the channel 0 */
#define PWM_OSCUPD_OSCUPH1 (0x1u << 1) /**< \brief (PWM_OSCUPD) Output Selection Clear for PWMH output of the channel 1 */
#define PWM_OSCUPD_OSCUPH2 (0x1u << 2) /**< \brief (PWM_OSCUPD) Output Selection Clear for PWMH output of the channel 2 */
#define PWM_OSCUPD_OSCUPH3 (0x1u << 3) /**< \brief (PWM_OSCUPD) Output Selection Clear for PWMH output of the channel 3 */
#define PWM_OSCUPD_OSCUPL0 (0x1u << 16) /**< \brief (PWM_OSCUPD) Output Selection Clear for PWML output of the channel 0 */
#define PWM_OSCUPD_OSCUPL1 (0x1u << 17) /**< \brief (PWM_OSCUPD) Output Selection Clear for PWML output of the channel 1 */
#define PWM_OSCUPD_OSCUPL2 (0x1u << 18) /**< \brief (PWM_OSCUPD) Output Selection Clear for PWML output of the channel 2 */
#define PWM_OSCUPD_OSCUPL3 (0x1u << 19) /**< \brief (PWM_OSCUPD) Output Selection Clear for PWML output of the channel 3 */
/* -------- PWM_FMR : (PWM Offset: 0x5C) PWM Fault Mode Register -------- */
#define PWM_FMR_FPOL_Pos 0
#define PWM_FMR_FPOL_Msk (0xffu << PWM_FMR_FPOL_Pos) /**< \brief (PWM_FMR) Fault Polarity */
#define PWM_FMR_FPOL(value) ((PWM_FMR_FPOL_Msk & ((value) << PWM_FMR_FPOL_Pos)))
#define PWM_FMR_FMOD_Pos 8
#define PWM_FMR_FMOD_Msk (0xffu << PWM_FMR_FMOD_Pos) /**< \brief (PWM_FMR) Fault Activation Mode */
#define PWM_FMR_FMOD(value) ((PWM_FMR_FMOD_Msk & ((value) << PWM_FMR_FMOD_Pos)))
#define PWM_FMR_FFIL_Pos 16
#define PWM_FMR_FFIL_Msk (0xffu << PWM_FMR_FFIL_Pos) /**< \brief (PWM_FMR) Fault Filtering */
#define PWM_FMR_FFIL(value) ((PWM_FMR_FFIL_Msk & ((value) << PWM_FMR_FFIL_Pos)))
/* -------- PWM_FSR : (PWM Offset: 0x60) PWM Fault Status Register -------- */
#define PWM_FSR_FIV_Pos 0
#define PWM_FSR_FIV_Msk (0xffu << PWM_FSR_FIV_Pos) /**< \brief (PWM_FSR) Fault Input Value */
#define PWM_FSR_FS_Pos 8
#define PWM_FSR_FS_Msk (0xffu << PWM_FSR_FS_Pos) /**< \brief (PWM_FSR) Fault Status */
/* -------- PWM_FCR : (PWM Offset: 0x64) PWM Fault Clear Register -------- */
#define PWM_FCR_FCLR_Pos 0
#define PWM_FCR_FCLR_Msk (0xffu << PWM_FCR_FCLR_Pos) /**< \brief (PWM_FCR) Fault Clear */
#define PWM_FCR_FCLR(value) ((PWM_FCR_FCLR_Msk & ((value) << PWM_FCR_FCLR_Pos)))
/* -------- PWM_FPV1 : (PWM Offset: 0x68) PWM Fault Protection Value Register 1 -------- */
#define PWM_FPV1_FPVH0 (0x1u << 0) /**< \brief (PWM_FPV1) Fault Protection Value for PWMH output on channel 0 */
#define PWM_FPV1_FPVH1 (0x1u << 1) /**< \brief (PWM_FPV1) Fault Protection Value for PWMH output on channel 1 */
#define PWM_FPV1_FPVH2 (0x1u << 2) /**< \brief (PWM_FPV1) Fault Protection Value for PWMH output on channel 2 */
#define PWM_FPV1_FPVH3 (0x1u << 3) /**< \brief (PWM_FPV1) Fault Protection Value for PWMH output on channel 3 */
#define PWM_FPV1_FPVL0 (0x1u << 16) /**< \brief (PWM_FPV1) Fault Protection Value for PWML output on channel 0 */
#define PWM_FPV1_FPVL1 (0x1u << 17) /**< \brief (PWM_FPV1) Fault Protection Value for PWML output on channel 1 */
#define PWM_FPV1_FPVL2 (0x1u << 18) /**< \brief (PWM_FPV1) Fault Protection Value for PWML output on channel 2 */
#define PWM_FPV1_FPVL3 (0x1u << 19) /**< \brief (PWM_FPV1) Fault Protection Value for PWML output on channel 3 */
/* -------- PWM_FPE : (PWM Offset: 0x6C) PWM Fault Protection Enable Register -------- */
#define PWM_FPE_FPE0_Pos 0
#define PWM_FPE_FPE0_Msk (0xffu << PWM_FPE_FPE0_Pos) /**< \brief (PWM_FPE) Fault Protection Enable for channel 0 */
#define PWM_FPE_FPE0(value) ((PWM_FPE_FPE0_Msk & ((value) << PWM_FPE_FPE0_Pos)))
#define PWM_FPE_FPE1_Pos 8
#define PWM_FPE_FPE1_Msk (0xffu << PWM_FPE_FPE1_Pos) /**< \brief (PWM_FPE) Fault Protection Enable for channel 1 */
#define PWM_FPE_FPE1(value) ((PWM_FPE_FPE1_Msk & ((value) << PWM_FPE_FPE1_Pos)))
#define PWM_FPE_FPE2_Pos 16
#define PWM_FPE_FPE2_Msk (0xffu << PWM_FPE_FPE2_Pos) /**< \brief (PWM_FPE) Fault Protection Enable for channel 2 */
#define PWM_FPE_FPE2(value) ((PWM_FPE_FPE2_Msk & ((value) << PWM_FPE_FPE2_Pos)))
#define PWM_FPE_FPE3_Pos 24
#define PWM_FPE_FPE3_Msk (0xffu << PWM_FPE_FPE3_Pos) /**< \brief (PWM_FPE) Fault Protection Enable for channel 3 */
#define PWM_FPE_FPE3(value) ((PWM_FPE_FPE3_Msk & ((value) << PWM_FPE_FPE3_Pos)))
/* -------- PWM_ELMR[2] : (PWM Offset: 0x7C) PWM Event Line 0 Mode Register -------- */
#define PWM_ELMR_CSEL0 (0x1u << 0) /**< \brief (PWM_ELMR[2]) Comparison 0 Selection */
#define PWM_ELMR_CSEL1 (0x1u << 1) /**< \brief (PWM_ELMR[2]) Comparison 1 Selection */
#define PWM_ELMR_CSEL2 (0x1u << 2) /**< \brief (PWM_ELMR[2]) Comparison 2 Selection */
#define PWM_ELMR_CSEL3 (0x1u << 3) /**< \brief (PWM_ELMR[2]) Comparison 3 Selection */
#define PWM_ELMR_CSEL4 (0x1u << 4) /**< \brief (PWM_ELMR[2]) Comparison 4 Selection */
#define PWM_ELMR_CSEL5 (0x1u << 5) /**< \brief (PWM_ELMR[2]) Comparison 5 Selection */
#define PWM_ELMR_CSEL6 (0x1u << 6) /**< \brief (PWM_ELMR[2]) Comparison 6 Selection */
#define PWM_ELMR_CSEL7 (0x1u << 7) /**< \brief (PWM_ELMR[2]) Comparison 7 Selection */
/* -------- PWM_SSPR : (PWM Offset: 0xA0) PWM Spread Spectrum Register -------- */
#define PWM_SSPR_SPRD_Pos 0
#define PWM_SSPR_SPRD_Msk (0xffffffu << PWM_SSPR_SPRD_Pos) /**< \brief (PWM_SSPR) Spread Spectrum Limit Value */
#define PWM_SSPR_SPRD(value) ((PWM_SSPR_SPRD_Msk & ((value) << PWM_SSPR_SPRD_Pos)))
#define PWM_SSPR_SPRDM (0x1u << 24) /**< \brief (PWM_SSPR) Spread Spectrum Counter Mode */
/* -------- PWM_SSPUP : (PWM Offset: 0xA4) PWM Spread Spectrum Update Register -------- */
#define PWM_SSPUP_SPRDUP_Pos 0
#define PWM_SSPUP_SPRDUP_Msk (0xffffffu << PWM_SSPUP_SPRDUP_Pos) /**< \brief (PWM_SSPUP) Spread Spectrum Limit Value Update */
#define PWM_SSPUP_SPRDUP(value) ((PWM_SSPUP_SPRDUP_Msk & ((value) << PWM_SSPUP_SPRDUP_Pos)))
/* -------- PWM_SMMR : (PWM Offset: 0xB0) PWM Stepper Motor Mode Register -------- */
#define PWM_SMMR_GCEN0 (0x1u << 0) /**< \brief (PWM_SMMR) Gray Count ENable */
#define PWM_SMMR_GCEN1 (0x1u << 1) /**< \brief (PWM_SMMR) Gray Count ENable */
#define PWM_SMMR_DOWN0 (0x1u << 16) /**< \brief (PWM_SMMR) DOWN Count */
#define PWM_SMMR_DOWN1 (0x1u << 17) /**< \brief (PWM_SMMR) DOWN Count */
/* -------- PWM_FPV2 : (PWM Offset: 0xC0) PWM Fault Protection Value 2 Register -------- */
#define PWM_FPV2_FPZH0 (0x1u << 0) /**< \brief (PWM_FPV2) Fault Protection to Hi-Z for PWMH output on channel 0 */
#define PWM_FPV2_FPZH1 (0x1u << 1) /**< \brief (PWM_FPV2) Fault Protection to Hi-Z for PWMH output on channel 1 */
#define PWM_FPV2_FPZH2 (0x1u << 2) /**< \brief (PWM_FPV2) Fault Protection to Hi-Z for PWMH output on channel 2 */
#define PWM_FPV2_FPZH3 (0x1u << 3) /**< \brief (PWM_FPV2) Fault Protection to Hi-Z for PWMH output on channel 3 */
#define PWM_FPV2_FPZL0 (0x1u << 16) /**< \brief (PWM_FPV2) Fault Protection to Hi-Z for PWML output on channel 0 */
#define PWM_FPV2_FPZL1 (0x1u << 17) /**< \brief (PWM_FPV2) Fault Protection to Hi-Z for PWML output on channel 1 */
#define PWM_FPV2_FPZL2 (0x1u << 18) /**< \brief (PWM_FPV2) Fault Protection to Hi-Z for PWML output on channel 2 */
#define PWM_FPV2_FPZL3 (0x1u << 19) /**< \brief (PWM_FPV2) Fault Protection to Hi-Z for PWML output on channel 3 */
/* -------- PWM_WPCR : (PWM Offset: 0xE4) PWM Write Protection Control Register -------- */
#define PWM_WPCR_WPCMD_Pos 0
#define PWM_WPCR_WPCMD_Msk (0x3u << PWM_WPCR_WPCMD_Pos) /**< \brief (PWM_WPCR) Write Protection Command */
#define   PWM_WPCR_WPCMD_DISABLE_SW_PROT (0x0u << 0) /**< \brief (PWM_WPCR) Disables the software write protection of the register groups of which the bit WPRGx is at '1'. */
#define   PWM_WPCR_WPCMD_ENABLE_SW_PROT (0x1u << 0) /**< \brief (PWM_WPCR) Enables the software write protection of the register groups of which the bit WPRGx is at '1'. */
#define   PWM_WPCR_WPCMD_ENABLE_HW_PROT (0x2u << 0) /**< \brief (PWM_WPCR) Enables the hardware write protection of the register groups of which the bit WPRGx is at '1'. Only a hardware reset of the PWM controller can disable the hardware write protection. Moreover, to meet security requirements, the PIO lines associated with the PWM can not be configured through the PIO interface. */
#define PWM_WPCR_WPRG0 (0x1u << 2) /**< \brief (PWM_WPCR) Write Protection Register Group 0 */
#define PWM_WPCR_WPRG1 (0x1u << 3) /**< \brief (PWM_WPCR) Write Protection Register Group 1 */
#define PWM_WPCR_WPRG2 (0x1u << 4) /**< \brief (PWM_WPCR) Write Protection Register Group 2 */
#define PWM_WPCR_WPRG3 (0x1u << 5) /**< \brief (PWM_WPCR) Write Protection Register Group 3 */
#define PWM_WPCR_WPRG4 (0x1u << 6) /**< \brief (PWM_WPCR) Write Protection Register Group 4 */
#define PWM_WPCR_WPRG5 (0x1u << 7) /**< \brief (PWM_WPCR) Write Protection Register Group 5 */
#define PWM_WPCR_WPKEY_Pos 8
#define PWM_WPCR_WPKEY_Msk (0xffffffu << PWM_WPCR_WPKEY_Pos) /**< \brief (PWM_WPCR) Write Protection Key */
#define   PWM_WPCR_WPKEY_PASSWD (0x50574Du << 8) /**< \brief (PWM_WPCR) Writing any other value in this field aborts the write operation of the WPCMD field.Always reads as 0 */
/* -------- PWM_WPSR : (PWM Offset: 0xE8) PWM Write Protection Status Register -------- */
#define PWM_WPSR_WPSWS0 (0x1u << 0) /**< \brief (PWM_WPSR) Write Protect SW Status */
#define PWM_WPSR_WPSWS1 (0x1u << 1) /**< \brief (PWM_WPSR) Write Protect SW Status */
#define PWM_WPSR_WPSWS2 (0x1u << 2) /**< \brief (PWM_WPSR) Write Protect SW Status */
#define PWM_WPSR_WPSWS3 (0x1u << 3) /**< \brief (PWM_WPSR) Write Protect SW Status */
#define PWM_WPSR_WPSWS4 (0x1u << 4) /**< \brief (PWM_WPSR) Write Protect SW Status */
#define PWM_WPSR_WPSWS5 (0x1u << 5) /**< \brief (PWM_WPSR) Write Protect SW Status */
#define PWM_WPSR_WPVS (0x1u << 7) /**< \brief (PWM_WPSR) Write Protect Violation Status */
#define PWM_WPSR_WPHWS0 (0x1u << 8) /**< \brief (PWM_WPSR) Write Protect HW Status */
#define PWM_WPSR_WPHWS1 (0x1u << 9) /**< \brief (PWM_WPSR) Write Protect HW Status */
#define PWM_WPSR_WPHWS2 (0x1u << 10) /**< \brief (PWM_WPSR) Write Protect HW Status */
#define PWM_WPSR_WPHWS3 (0x1u << 11) /**< \brief (PWM_WPSR) Write Protect HW Status */
#define PWM_WPSR_WPHWS4 (0x1u << 12) /**< \brief (PWM_WPSR) Write Protect HW Status */
#define PWM_WPSR_WPHWS5 (0x1u << 13) /**< \brief (PWM_WPSR) Write Protect HW Status */
#define PWM_WPSR_WPVSRC_Pos 16
#define PWM_WPSR_WPVSRC_Msk (0xffffu << PWM_WPSR_WPVSRC_Pos) /**< \brief (PWM_WPSR) Write Protect Violation Source */
/* -------- PWM_VERSION : (PWM Offset: 0xFC) Version Register -------- */
#define PWM_VERSION_VERSION_Pos 0
#define PWM_VERSION_VERSION_Msk (0xfffu << PWM_VERSION_VERSION_Pos) /**< \brief (PWM_VERSION) Version of the Hardware Module */
#define PWM_VERSION_MFN_Pos 16
#define PWM_VERSION_MFN_Msk (0x7u << PWM_VERSION_MFN_Pos) /**< \brief (PWM_VERSION) Metal Fix Number */
/* -------- PWM_CMPV : (PWM Offset: N/A) PWM Comparison 0 Value Register -------- */
#define PWM_CMPV_CV_Pos 0
#define PWM_CMPV_CV_Msk (0xffffffu << PWM_CMPV_CV_Pos) /**< \brief (PWM_CMPV) Comparison x Value */
#define PWM_CMPV_CV(value) ((PWM_CMPV_CV_Msk & ((value) << PWM_CMPV_CV_Pos)))
#define PWM_CMPV_CVM (0x1u << 24) /**< \brief (PWM_CMPV) Comparison x Value Mode */
/* -------- PWM_CMPVUPD : (PWM Offset: N/A) PWM Comparison 0 Value Update Register -------- */
#define PWM_CMPVUPD_CVUPD_Pos 0
#define PWM_CMPVUPD_CVUPD_Msk (0xffffffu << PWM_CMPVUPD_CVUPD_Pos) /**< \brief (PWM_CMPVUPD) Comparison x Value Update */
#define PWM_CMPVUPD_CVUPD(value) ((PWM_CMPVUPD_CVUPD_Msk & ((value) << PWM_CMPVUPD_CVUPD_Pos)))
#define PWM_CMPVUPD_CVMUPD (0x1u << 24) /**< \brief (PWM_CMPVUPD) Comparison x Value Mode Update */
/* -------- PWM_CMPM : (PWM Offset: N/A) PWM Comparison 0 Mode Register -------- */
#define PWM_CMPM_CEN (0x1u << 0) /**< \brief (PWM_CMPM) Comparison x Enable */
#define PWM_CMPM_CTR_Pos 4
#define PWM_CMPM_CTR_Msk (0xfu << PWM_CMPM_CTR_Pos) /**< \brief (PWM_CMPM) Comparison x Trigger */
#define PWM_CMPM_CTR(value) ((PWM_CMPM_CTR_Msk & ((value) << PWM_CMPM_CTR_Pos)))
#define PWM_CMPM_CPR_Pos 8
#define PWM_CMPM_CPR_Msk (0xfu << PWM_CMPM_CPR_Pos) /**< \brief (PWM_CMPM) Comparison x Period */
#define PWM_CMPM_CPR(value) ((PWM_CMPM_CPR_Msk & ((value) << PWM_CMPM_CPR_Pos)))
#define PWM_CMPM_CPRCNT_Pos 12
#define PWM_CMPM_CPRCNT_Msk (0xfu << PWM_CMPM_CPRCNT_Pos) /**< \brief (PWM_CMPM) Comparison x Period Counter */
#define PWM_CMPM_CPRCNT(value) ((PWM_CMPM_CPRCNT_Msk & ((value) << PWM_CMPM_CPRCNT_Pos)))
#define PWM_CMPM_CUPR_Pos 16
#define PWM_CMPM_CUPR_Msk (0xfu << PWM_CMPM_CUPR_Pos) /**< \brief (PWM_CMPM) Comparison x Update Period */
#define PWM_CMPM_CUPR(value) ((PWM_CMPM_CUPR_Msk & ((value) << PWM_CMPM_CUPR_Pos)))
#define PWM_CMPM_CUPRCNT_Pos 20
#define PWM_CMPM_CUPRCNT_Msk (0xfu << PWM_CMPM_CUPRCNT_Pos) /**< \brief (PWM_CMPM) Comparison x Update Period Counter */
#define PWM_CMPM_CUPRCNT(value) ((PWM_CMPM_CUPRCNT_Msk & ((value) << PWM_CMPM_CUPRCNT_Pos)))
/* -------- PWM_CMPMUPD : (PWM Offset: N/A) PWM Comparison 0 Mode Update Register -------- */
#define PWM_CMPMUPD_CENUPD (0x1u << 0) /**< \brief (PWM_CMPMUPD) Comparison x Enable Update */
#define PWM_CMPMUPD_CTRUPD_Pos 4
#define PWM_CMPMUPD_CTRUPD_Msk (0xfu << PWM_CMPMUPD_CTRUPD_Pos) /**< \brief (PWM_CMPMUPD) Comparison x Trigger Update */
#define PWM_CMPMUPD_CTRUPD(value) ((PWM_CMPMUPD_CTRUPD_Msk & ((value) << PWM_CMPMUPD_CTRUPD_Pos)))
#define PWM_CMPMUPD_CPRUPD_Pos 8
#define PWM_CMPMUPD_CPRUPD_Msk (0xfu << PWM_CMPMUPD_CPRUPD_Pos) /**< \brief (PWM_CMPMUPD) Comparison x Period Update */
#define PWM_CMPMUPD_CPRUPD(value) ((PWM_CMPMUPD_CPRUPD_Msk & ((value) << PWM_CMPMUPD_CPRUPD_Pos)))
#define PWM_CMPMUPD_CUPRUPD_Pos 16
#define PWM_CMPMUPD_CUPRUPD_Msk (0xfu << PWM_CMPMUPD_CUPRUPD_Pos) /**< \brief (PWM_CMPMUPD) Comparison x Update Period Update */
#define PWM_CMPMUPD_CUPRUPD(value) ((PWM_CMPMUPD_CUPRUPD_Msk & ((value) << PWM_CMPMUPD_CUPRUPD_Pos)))
/* -------- PWM_CMR : (PWM Offset: N/A) PWM Channel Mode Register -------- */
#define PWM_CMR_CPRE_Pos 0
#define PWM_CMR_CPRE_Msk (0xfu << PWM_CMR_CPRE_Pos) /**< \brief (PWM_CMR) Channel Pre-scaler */
#define   PWM_CMR_CPRE_CCK (0x0u << 0) /**< \brief (PWM_CMR) Internal clock */
#define   PWM_CMR_CPRE_CCK_DIV_2 (0x1u << 0) /**< \brief (PWM_CMR) Internal clock/2 */
#define   PWM_CMR_CPRE_CCK_DIV_4 (0x2u << 0) /**< \brief (PWM_CMR) Internal clock/4 */
#define   PWM_CMR_CPRE_CCK_DIV_8 (0x3u << 0) /**< \brief (PWM_CMR) Internal clock/8 */
#define   PWM_CMR_CPRE_CCK_DIV_16 (0x4u << 0) /**< \brief (PWM_CMR) Internal clock/16 */
#define   PWM_CMR_CPRE_CCK_DIV_32 (0x5u << 0) /**< \brief (PWM_CMR) Internal clock/32 */
#define   PWM_CMR_CPRE_CCK_DIV_64 (0x6u << 0) /**< \brief (PWM_CMR) Internal clock/64 */
#define   PWM_CMR_CPRE_CCK_DIV_128 (0x7u << 0) /**< \brief (PWM_CMR) Internal clock/128 */
#define   PWM_CMR_CPRE_CCK_DIV_256 (0x8u << 0) /**< \brief (PWM_CMR) Internal clock/256 */
#define   PWM_CMR_CPRE_CCK_DIV_512 (0x9u << 0) /**< \brief (PWM_CMR) Internal clock/512 */
#define   PWM_CMR_CPRE_CCK_DIV_1024 (0xAu << 0) /**< \brief (PWM_CMR) Internal clock/1024 */
#define   PWM_CMR_CPRE_CLKA (0xBu << 0) /**< \brief (PWM_CMR) Clock A */
#define   PWM_CMR_CPRE_CLKB (0xCu << 0) /**< \brief (PWM_CMR) Clock B */
#define PWM_CMR_CALG (0x1u << 8) /**< \brief (PWM_CMR) Channel Alignment */
#define PWM_CMR_CPOL (0x1u << 9) /**< \brief (PWM_CMR) Channel Polarity */
#define PWM_CMR_CES (0x1u << 10) /**< \brief (PWM_CMR) Counter Event Selection */
#define PWM_CMR_UPDS (0x1u << 11) /**< \brief (PWM_CMR) Update Selection */
#define PWM_CMR_DPOLI (0x1u << 12) /**< \brief (PWM_CMR) Disabled Polarity Inverted */
#define PWM_CMR_TCTS (0x1u << 13) /**< \brief (PWM_CMR) Timer Counter Trigger Selection */
#define PWM_CMR_DTE (0x1u << 16) /**< \brief (PWM_CMR) Dead-Time Generator Enable */
#define PWM_CMR_DTHI (0x1u << 17) /**< \brief (PWM_CMR) Dead-Time PWMHx Output Inverted */
#define PWM_CMR_DTLI (0x1u << 18) /**< \brief (PWM_CMR) Dead-Time PWMLx Output Inverted */
#define PWM_CMR_PPM (0x1u << 19) /**< \brief (PWM_CMR) Push-Pull Mode */
/* -------- PWM_CDTY : (PWM Offset: N/A) PWM Channel Duty Cycle Register -------- */
#define PWM_CDTY_CDTY_Pos 0
#define PWM_CDTY_CDTY_Msk (0xffffffu << PWM_CDTY_CDTY_Pos) /**< \brief (PWM_CDTY) Channel Duty-Cycle */
#define PWM_CDTY_CDTY(value) ((PWM_CDTY_CDTY_Msk & ((value) << PWM_CDTY_CDTY_Pos)))
/* -------- PWM_CDTYUPD : (PWM Offset: N/A) PWM Channel Duty Cycle Update Register -------- */
#define PWM_CDTYUPD_CDTYUPD_Pos 0
#define PWM_CDTYUPD_CDTYUPD_Msk (0xffffffu << PWM_CDTYUPD_CDTYUPD_Pos) /**< \brief (PWM_CDTYUPD) Channel Duty-Cycle Update */
#define PWM_CDTYUPD_CDTYUPD(value) ((PWM_CDTYUPD_CDTYUPD_Msk & ((value) << PWM_CDTYUPD_CDTYUPD_Pos)))
/* -------- PWM_CPRD : (PWM Offset: N/A) PWM Channel Period Register -------- */
#define PWM_CPRD_CPRD_Pos 0
#define PWM_CPRD_CPRD_Msk (0xffffffu << PWM_CPRD_CPRD_Pos) /**< \brief (PWM_CPRD) Channel Period */
#define PWM_CPRD_CPRD(value) ((PWM_CPRD_CPRD_Msk & ((value) << PWM_CPRD_CPRD_Pos)))
/* -------- PWM_CPRDUPD : (PWM Offset: N/A) PWM Channel Period Update Register -------- */
#define PWM_CPRDUPD_CPRDUPD_Pos 0
#define PWM_CPRDUPD_CPRDUPD_Msk (0xffffffu << PWM_CPRDUPD_CPRDUPD_Pos) /**< \brief (PWM_CPRDUPD) Channel Period Update */
#define PWM_CPRDUPD_CPRDUPD(value) ((PWM_CPRDUPD_CPRDUPD_Msk & ((value) << PWM_CPRDUPD_CPRDUPD_Pos)))
/* -------- PWM_CCNT : (PWM Offset: N/A) PWM Channel Counter Register -------- */
#define PWM_CCNT_CNT_Pos 0
#define PWM_CCNT_CNT_Msk (0xffffffu << PWM_CCNT_CNT_Pos) /**< \brief (PWM_CCNT) Channel Counter Register */
/* -------- PWM_DT : (PWM Offset: N/A) PWM Channel Dead Time Register -------- */
#define PWM_DT_DTH_Pos 0
#define PWM_DT_DTH_Msk (0xffffu << PWM_DT_DTH_Pos) /**< \brief (PWM_DT) Dead-Time Value for PWMHx Output */
#define PWM_DT_DTH(value) ((PWM_DT_DTH_Msk & ((value) << PWM_DT_DTH_Pos)))
#define PWM_DT_DTL_Pos 16
#define PWM_DT_DTL_Msk (0xffffu << PWM_DT_DTL_Pos) /**< \brief (PWM_DT) Dead-Time Value for PWMLx Output */
#define PWM_DT_DTL(value) ((PWM_DT_DTL_Msk & ((value) << PWM_DT_DTL_Pos)))
/* -------- PWM_DTUPD : (PWM Offset: N/A) PWM Channel Dead Time Update Register -------- */
#define PWM_DTUPD_DTHUPD_Pos 0
#define PWM_DTUPD_DTHUPD_Msk (0xffffu << PWM_DTUPD_DTHUPD_Pos) /**< \brief (PWM_DTUPD) Dead-Time Value Update for PWMHx Output */
#define PWM_DTUPD_DTHUPD(value) ((PWM_DTUPD_DTHUPD_Msk & ((value) << PWM_DTUPD_DTHUPD_Pos)))
#define PWM_DTUPD_DTLUPD_Pos 16
#define PWM_DTUPD_DTLUPD_Msk (0xffffu << PWM_DTUPD_DTLUPD_Pos) /**< \brief (PWM_DTUPD) Dead-Time Value Update for PWMLx Output */
#define PWM_DTUPD_DTLUPD(value) ((PWM_DTUPD_DTLUPD_Msk & ((value) << PWM_DTUPD_DTLUPD_Pos)))
/* -------- PWM_CMUPD0 : (PWM Offset: 0x400) PWM Channel Mode Update Register (ch_num = 0) -------- */
#define PWM_CMUPD0_CPOLUP (0x1u << 9) /**< \brief (PWM_CMUPD0) Channel Polarity Update */
#define PWM_CMUPD0_CPOLINVUP (0x1u << 13) /**< \brief (PWM_CMUPD0) Channel Polarity Inversion Update */
/* -------- PWM_CAE0 : (PWM Offset: 0x404) PWM Channel Additional Edge Register (ch_num = 0) -------- */
#define PWM_CAE0_ADEDGV_Pos 0
#define PWM_CAE0_ADEDGV_Msk (0xffffffu << PWM_CAE0_ADEDGV_Pos) /**< \brief (PWM_CAE0) Channel Additional Edge Value */
#define PWM_CAE0_ADEDGV(value) ((PWM_CAE0_ADEDGV_Msk & ((value) << PWM_CAE0_ADEDGV_Pos)))
#define PWM_CAE0_ADEDGM_Pos 24
#define PWM_CAE0_ADEDGM_Msk (0x3u << PWM_CAE0_ADEDGM_Pos) /**< \brief (PWM_CAE0) Channel Additional Edge Mode */
#define   PWM_CAE0_ADEDGM_INC (0x0u << 24) /**< \brief (PWM_CAE0) The additional edge of the channel x output waveform occurs when CCNTx reaches ADEDGV and the counter of the channel x is incrementing. */
#define   PWM_CAE0_ADEDGM_DEC (0x1u << 24) /**< \brief (PWM_CAE0) The additional edge of the channel x output waveform occurs when CCNTx reaches ADEDGV and the counter of the channel x is incrementing. */
#define   PWM_CAE0_ADEDGM_BOTH (0x2u << 24) /**< \brief (PWM_CAE0) The additional edge of the channel x output waveform occurs when CCNTx reaches ADEDGV, whether the counter is incrementing or not. */
/* -------- PWM_CAEUPD0 : (PWM Offset: 0x408) PWM Channel Additional Edge Update Register (ch_num = 0) -------- */
#define PWM_CAEUPD0_ADEDGVUP_Pos 0
#define PWM_CAEUPD0_ADEDGVUP_Msk (0xffffffu << PWM_CAEUPD0_ADEDGVUP_Pos) /**< \brief (PWM_CAEUPD0) Channel Additional Edge Value Update */
#define PWM_CAEUPD0_ADEDGVUP(value) ((PWM_CAEUPD0_ADEDGVUP_Msk & ((value) << PWM_CAEUPD0_ADEDGVUP_Pos)))
#define PWM_CAEUPD0_ADEDGMUP_Pos 24
#define PWM_CAEUPD0_ADEDGMUP_Msk (0x3u << PWM_CAEUPD0_ADEDGMUP_Pos) /**< \brief (PWM_CAEUPD0) Channel Additional Edge Mode Update */
#define   PWM_CAEUPD0_ADEDGMUP_INC (0x0u << 24) /**< \brief (PWM_CAEUPD0) The additional edge of the channel x output waveform occurs when CCNTx reaches ADEDGVUP and the counter of the channel x is incrementing. */
#define   PWM_CAEUPD0_ADEDGMUP_DEC (0x1u << 24) /**< \brief (PWM_CAEUPD0) The additional edge of the channel x output waveform occurs when CCNTx reaches ADEDGVUP and the counter of the channel x is incrementing. */
#define   PWM_CAEUPD0_ADEDGMUP_BOTH (0x2u << 24) /**< \brief (PWM_CAEUPD0) The additional edge of the channel x output waveform occurs when CCNTx reaches ADEDGVUP, whether the counter is incrementing or not. */
/* -------- PWM_CMUPD1 : (PWM Offset: 0x420) PWM Channel Mode Update Register (ch_num = 1) -------- */
#define PWM_CMUPD1_CPOLUP (0x1u << 9) /**< \brief (PWM_CMUPD1) Channel Polarity Update */
#define PWM_CMUPD1_CPOLINVUP (0x1u << 13) /**< \brief (PWM_CMUPD1) Channel Polarity Inversion Update */
/* -------- PWM_CAE1 : (PWM Offset: 0x424) PWM Channel Additional Edge Register (ch_num = 1) -------- */
#define PWM_CAE1_ADEDGV_Pos 0
#define PWM_CAE1_ADEDGV_Msk (0xffffffu << PWM_CAE1_ADEDGV_Pos) /**< \brief (PWM_CAE1) Channel Additional Edge Value */
#define PWM_CAE1_ADEDGV(value) ((PWM_CAE1_ADEDGV_Msk & ((value) << PWM_CAE1_ADEDGV_Pos)))
#define PWM_CAE1_ADEDGM_Pos 24
#define PWM_CAE1_ADEDGM_Msk (0x3u << PWM_CAE1_ADEDGM_Pos) /**< \brief (PWM_CAE1) Channel Additional Edge Mode */
#define   PWM_CAE1_ADEDGM_INC (0x0u << 24) /**< \brief (PWM_CAE1) The additional edge of the channel x output waveform occurs when CCNTx reaches ADEDGV and the counter of the channel x is incrementing. */
#define   PWM_CAE1_ADEDGM_DEC (0x1u << 24) /**< \brief (PWM_CAE1) The additional edge of the channel x output waveform occurs when CCNTx reaches ADEDGV and the counter of the channel x is incrementing. */
#define   PWM_CAE1_ADEDGM_BOTH (0x2u << 24) /**< \brief (PWM_CAE1) The additional edge of the channel x output waveform occurs when CCNTx reaches ADEDGV, whether the counter is incrementing or not. */
/* -------- PWM_CAEUPD1 : (PWM Offset: 0x428) PWM Channel Additional Edge Update Register (ch_num = 1) -------- */
#define PWM_CAEUPD1_ADEDGVUP_Pos 0
#define PWM_CAEUPD1_ADEDGVUP_Msk (0xffffffu << PWM_CAEUPD1_ADEDGVUP_Pos) /**< \brief (PWM_CAEUPD1) Channel Additional Edge Value Update */
#define PWM_CAEUPD1_ADEDGVUP(value) ((PWM_CAEUPD1_ADEDGVUP_Msk & ((value) << PWM_CAEUPD1_ADEDGVUP_Pos)))
#define PWM_CAEUPD1_ADEDGMUP_Pos 24
#define PWM_CAEUPD1_ADEDGMUP_Msk (0x3u << PWM_CAEUPD1_ADEDGMUP_Pos) /**< \brief (PWM_CAEUPD1) Channel Additional Edge Mode Update */
#define   PWM_CAEUPD1_ADEDGMUP_INC (0x0u << 24) /**< \brief (PWM_CAEUPD1) The additional edge of the channel x output waveform occurs when CCNTx reaches ADEDGVUP and the counter of the channel x is incrementing. */
#define   PWM_CAEUPD1_ADEDGMUP_DEC (0x1u << 24) /**< \brief (PWM_CAEUPD1) The additional edge of the channel x output waveform occurs when CCNTx reaches ADEDGVUP and the counter of the channel x is incrementing. */
#define   PWM_CAEUPD1_ADEDGMUP_BOTH (0x2u << 24) /**< \brief (PWM_CAEUPD1) The additional edge of the channel x output waveform occurs when CCNTx reaches ADEDGVUP, whether the counter is incrementing or not. */
/* -------- PWM_ETRG1 : (PWM Offset: 0x42C) PWM External Trigger Register (trg_num = 1) -------- */
#define PWM_ETRG1_MAXCNT_Pos 0
#define PWM_ETRG1_MAXCNT_Msk (0xffffffu << PWM_ETRG1_MAXCNT_Pos) /**< \brief (PWM_ETRG1) Maximum Counter value */
#define PWM_ETRG1_MAXCNT(value) ((PWM_ETRG1_MAXCNT_Msk & ((value) << PWM_ETRG1_MAXCNT_Pos)))
#define PWM_ETRG1_TRGMODE_Pos 24
#define PWM_ETRG1_TRGMODE_Msk (0x3u << PWM_ETRG1_TRGMODE_Pos) /**< \brief (PWM_ETRG1) External Trigger Mode */
#define   PWM_ETRG1_TRGMODE_OFF (0x0u << 24) /**< \brief (PWM_ETRG1) External trigger is not enabled. */
#define   PWM_ETRG1_TRGMODE_MODE1 (0x1u << 24) /**< \brief (PWM_ETRG1) External PWM Reset Mode */
#define   PWM_ETRG1_TRGMODE_MODE2 (0x2u << 24) /**< \brief (PWM_ETRG1) External PWM Start Mode */
#define   PWM_ETRG1_TRGMODE_MODE3 (0x3u << 24) /**< \brief (PWM_ETRG1) Cycle-by-cycle Duty Mode */
#define PWM_ETRG1_TRGEDGE (0x1u << 28) /**< \brief (PWM_ETRG1) Edge Selection */
#define   PWM_ETRG1_TRGEDGE_FALLING_ZERO (0x0u << 28) /**< \brief (PWM_ETRG1) TRGMODE = 1: TRGINx event detection on falling edge.TRGMODE = 2, 3: TRGINx active level is 0 */
#define   PWM_ETRG1_TRGEDGE_RISING_ONE (0x1u << 28) /**< \brief (PWM_ETRG1) TRGMODE = 1: TRGINx event detection on rising edge.TRGMODE = 2, 3: TRGINx active level is 1 */
#define PWM_ETRG1_TRGFILT (0x1u << 29) /**< \brief (PWM_ETRG1) Filtered input */
#define PWM_ETRG1_TRGSRC (0x1u << 30) /**< \brief (PWM_ETRG1) Trigger Source */
#define PWM_ETRG1_RFEN (0x1u << 31) /**< \brief (PWM_ETRG1) Recoverable Fault Enable */
/* -------- PWM_LEBR1 : (PWM Offset: 0x430) PWM Leading-Edge Blanking Register (trg_num = 1) -------- */
#define PWM_LEBR1_LEBDELAY_Pos 0
#define PWM_LEBR1_LEBDELAY_Msk (0x7fu << PWM_LEBR1_LEBDELAY_Pos) /**< \brief (PWM_LEBR1) Leading-Edge Blanking Delay for TRGINx */
#define PWM_LEBR1_LEBDELAY(value) ((PWM_LEBR1_LEBDELAY_Msk & ((value) << PWM_LEBR1_LEBDELAY_Pos)))
#define PWM_LEBR1_PWMLFEN (0x1u << 16) /**< \brief (PWM_LEBR1) PWML Falling Edge Enable */
#define PWM_LEBR1_PWMLREN (0x1u << 17) /**< \brief (PWM_LEBR1) PWML Rising Edge Enable */
#define PWM_LEBR1_PWMHFEN (0x1u << 18) /**< \brief (PWM_LEBR1) PWMH Falling Edge Enable */
#define PWM_LEBR1_PWMHREN (0x1u << 19) /**< \brief (PWM_LEBR1) PWMH Rising Edge Enable */
/* -------- PWM_CMUPD2 : (PWM Offset: 0x440) PWM Channel Mode Update Register (ch_num = 2) -------- */
#define PWM_CMUPD2_CPOLUP (0x1u << 9) /**< \brief (PWM_CMUPD2) Channel Polarity Update */
#define PWM_CMUPD2_CPOLINVUP (0x1u << 13) /**< \brief (PWM_CMUPD2) Channel Polarity Inversion Update */
/* -------- PWM_CAE2 : (PWM Offset: 0x444) PWM Channel Additional Edge Register (ch_num = 2) -------- */
#define PWM_CAE2_ADEDGV_Pos 0
#define PWM_CAE2_ADEDGV_Msk (0xffffffu << PWM_CAE2_ADEDGV_Pos) /**< \brief (PWM_CAE2) Channel Additional Edge Value */
#define PWM_CAE2_ADEDGV(value) ((PWM_CAE2_ADEDGV_Msk & ((value) << PWM_CAE2_ADEDGV_Pos)))
#define PWM_CAE2_ADEDGM_Pos 24
#define PWM_CAE2_ADEDGM_Msk (0x3u << PWM_CAE2_ADEDGM_Pos) /**< \brief (PWM_CAE2) Channel Additional Edge Mode */
#define   PWM_CAE2_ADEDGM_INC (0x0u << 24) /**< \brief (PWM_CAE2) The additional edge of the channel x output waveform occurs when CCNTx reaches ADEDGV and the counter of the channel x is incrementing. */
#define   PWM_CAE2_ADEDGM_DEC (0x1u << 24) /**< \brief (PWM_CAE2) The additional edge of the channel x output waveform occurs when CCNTx reaches ADEDGV and the counter of the channel x is incrementing. */
#define   PWM_CAE2_ADEDGM_BOTH (0x2u << 24) /**< \brief (PWM_CAE2) The additional edge of the channel x output waveform occurs when CCNTx reaches ADEDGV, whether the counter is incrementing or not. */
/* -------- PWM_CAEUPD2 : (PWM Offset: 0x448) PWM Channel Additional Edge Update Register (ch_num = 2) -------- */
#define PWM_CAEUPD2_ADEDGVUP_Pos 0
#define PWM_CAEUPD2_ADEDGVUP_Msk (0xffffffu << PWM_CAEUPD2_ADEDGVUP_Pos) /**< \brief (PWM_CAEUPD2) Channel Additional Edge Value Update */
#define PWM_CAEUPD2_ADEDGVUP(value) ((PWM_CAEUPD2_ADEDGVUP_Msk & ((value) << PWM_CAEUPD2_ADEDGVUP_Pos)))
#define PWM_CAEUPD2_ADEDGMUP_Pos 24
#define PWM_CAEUPD2_ADEDGMUP_Msk (0x3u << PWM_CAEUPD2_ADEDGMUP_Pos) /**< \brief (PWM_CAEUPD2) Channel Additional Edge Mode Update */
#define   PWM_CAEUPD2_ADEDGMUP_INC (0x0u << 24) /**< \brief (PWM_CAEUPD2) The additional edge of the channel x output waveform occurs when CCNTx reaches ADEDGVUP and the counter of the channel x is incrementing. */
#define   PWM_CAEUPD2_ADEDGMUP_DEC (0x1u << 24) /**< \brief (PWM_CAEUPD2) The additional edge of the channel x output waveform occurs when CCNTx reaches ADEDGVUP and the counter of the channel x is incrementing. */
#define   PWM_CAEUPD2_ADEDGMUP_BOTH (0x2u << 24) /**< \brief (PWM_CAEUPD2) The additional edge of the channel x output waveform occurs when CCNTx reaches ADEDGVUP, whether the counter is incrementing or not. */
/* -------- PWM_ETRG2 : (PWM Offset: 0x44C) PWM External Trigger Register (trg_num = 2) -------- */
#define PWM_ETRG2_MAXCNT_Pos 0
#define PWM_ETRG2_MAXCNT_Msk (0xffffffu << PWM_ETRG2_MAXCNT_Pos) /**< \brief (PWM_ETRG2) Maximum Counter value */
#define PWM_ETRG2_MAXCNT(value) ((PWM_ETRG2_MAXCNT_Msk & ((value) << PWM_ETRG2_MAXCNT_Pos)))
#define PWM_ETRG2_TRGMODE_Pos 24
#define PWM_ETRG2_TRGMODE_Msk (0x3u << PWM_ETRG2_TRGMODE_Pos) /**< \brief (PWM_ETRG2) External Trigger Mode */
#define   PWM_ETRG2_TRGMODE_OFF (0x0u << 24) /**< \brief (PWM_ETRG2) External trigger is not enabled. */
#define   PWM_ETRG2_TRGMODE_MODE1 (0x1u << 24) /**< \brief (PWM_ETRG2) External PWM Reset Mode */
#define   PWM_ETRG2_TRGMODE_MODE2 (0x2u << 24) /**< \brief (PWM_ETRG2) External PWM Start Mode */
#define   PWM_ETRG2_TRGMODE_MODE3 (0x3u << 24) /**< \brief (PWM_ETRG2) Cycle-by-cycle Duty Mode */
#define PWM_ETRG2_TRGEDGE (0x1u << 28) /**< \brief (PWM_ETRG2) Edge Selection */
#define   PWM_ETRG2_TRGEDGE_FALLING_ZERO (0x0u << 28) /**< \brief (PWM_ETRG2) TRGMODE = 1: TRGINx event detection on falling edge.TRGMODE = 2, 3: TRGINx active level is 0 */
#define   PWM_ETRG2_TRGEDGE_RISING_ONE (0x1u << 28) /**< \brief (PWM_ETRG2) TRGMODE = 1: TRGINx event detection on rising edge.TRGMODE = 2, 3: TRGINx active level is 1 */
#define PWM_ETRG2_TRGFILT (0x1u << 29) /**< \brief (PWM_ETRG2) Filtered input */
#define PWM_ETRG2_TRGSRC (0x1u << 30) /**< \brief (PWM_ETRG2) Trigger Source */
#define PWM_ETRG2_RFEN (0x1u << 31) /**< \brief (PWM_ETRG2) Recoverable Fault Enable */
/* -------- PWM_LEBR2 : (PWM Offset: 0x450) PWM Leading-Edge Blanking Register (trg_num = 2) -------- */
#define PWM_LEBR2_LEBDELAY_Pos 0
#define PWM_LEBR2_LEBDELAY_Msk (0x7fu << PWM_LEBR2_LEBDELAY_Pos) /**< \brief (PWM_LEBR2) Leading-Edge Blanking Delay for TRGINx */
#define PWM_LEBR2_LEBDELAY(value) ((PWM_LEBR2_LEBDELAY_Msk & ((value) << PWM_LEBR2_LEBDELAY_Pos)))
#define PWM_LEBR2_PWMLFEN (0x1u << 16) /**< \brief (PWM_LEBR2) PWML Falling Edge Enable */
#define PWM_LEBR2_PWMLREN (0x1u << 17) /**< \brief (PWM_LEBR2) PWML Rising Edge Enable */
#define PWM_LEBR2_PWMHFEN (0x1u << 18) /**< \brief (PWM_LEBR2) PWMH Falling Edge Enable */
#define PWM_LEBR2_PWMHREN (0x1u << 19) /**< \brief (PWM_LEBR2) PWMH Rising Edge Enable */
/* -------- PWM_CMUPD3 : (PWM Offset: 0x460) PWM Channel Mode Update Register (ch_num = 3) -------- */
#define PWM_CMUPD3_CPOLUP (0x1u << 9) /**< \brief (PWM_CMUPD3) Channel Polarity Update */
#define PWM_CMUPD3_CPOLINVUP (0x1u << 13) /**< \brief (PWM_CMUPD3) Channel Polarity Inversion Update */
/* -------- PWM_CAE3 : (PWM Offset: 0x464) PWM Channel Additional Edge Register (ch_num = 3) -------- */
#define PWM_CAE3_ADEDGV_Pos 0
#define PWM_CAE3_ADEDGV_Msk (0xffffffu << PWM_CAE3_ADEDGV_Pos) /**< \brief (PWM_CAE3) Channel Additional Edge Value */
#define PWM_CAE3_ADEDGV(value) ((PWM_CAE3_ADEDGV_Msk & ((value) << PWM_CAE3_ADEDGV_Pos)))
#define PWM_CAE3_ADEDGM_Pos 24
#define PWM_CAE3_ADEDGM_Msk (0x3u << PWM_CAE3_ADEDGM_Pos) /**< \brief (PWM_CAE3) Channel Additional Edge Mode */
#define   PWM_CAE3_ADEDGM_INC (0x0u << 24) /**< \brief (PWM_CAE3) The additional edge of the channel x output waveform occurs when CCNTx reaches ADEDGV and the counter of the channel x is incrementing. */
#define   PWM_CAE3_ADEDGM_DEC (0x1u << 24) /**< \brief (PWM_CAE3) The additional edge of the channel x output waveform occurs when CCNTx reaches ADEDGV and the counter of the channel x is incrementing. */
#define   PWM_CAE3_ADEDGM_BOTH (0x2u << 24) /**< \brief (PWM_CAE3) The additional edge of the channel x output waveform occurs when CCNTx reaches ADEDGV, whether the counter is incrementing or not. */
/* -------- PWM_CAEUPD3 : (PWM Offset: 0x468) PWM Channel Additional Edge Update Register (ch_num = 3) -------- */
#define PWM_CAEUPD3_ADEDGVUP_Pos 0
#define PWM_CAEUPD3_ADEDGVUP_Msk (0xffffffu << PWM_CAEUPD3_ADEDGVUP_Pos) /**< \brief (PWM_CAEUPD3) Channel Additional Edge Value Update */
#define PWM_CAEUPD3_ADEDGVUP(value) ((PWM_CAEUPD3_ADEDGVUP_Msk & ((value) << PWM_CAEUPD3_ADEDGVUP_Pos)))
#define PWM_CAEUPD3_ADEDGMUP_Pos 24
#define PWM_CAEUPD3_ADEDGMUP_Msk (0x3u << PWM_CAEUPD3_ADEDGMUP_Pos) /**< \brief (PWM_CAEUPD3) Channel Additional Edge Mode Update */
#define   PWM_CAEUPD3_ADEDGMUP_INC (0x0u << 24) /**< \brief (PWM_CAEUPD3) The additional edge of the channel x output waveform occurs when CCNTx reaches ADEDGVUP and the counter of the channel x is incrementing. */
#define   PWM_CAEUPD3_ADEDGMUP_DEC (0x1u << 24) /**< \brief (PWM_CAEUPD3) The additional edge of the channel x output waveform occurs when CCNTx reaches ADEDGVUP and the counter of the channel x is incrementing. */
#define   PWM_CAEUPD3_ADEDGMUP_BOTH (0x2u << 24) /**< \brief (PWM_CAEUPD3) The additional edge of the channel x output waveform occurs when CCNTx reaches ADEDGVUP, whether the counter is incrementing or not. */
/* -------- PWM_ETRG3 : (PWM Offset: 0x46C) PWM External Trigger Register (trg_num = 3) -------- */
#define PWM_ETRG3_MAXCNT_Pos 0
#define PWM_ETRG3_MAXCNT_Msk (0xffffffu << PWM_ETRG3_MAXCNT_Pos) /**< \brief (PWM_ETRG3) Maximum Counter value */
#define PWM_ETRG3_MAXCNT(value) ((PWM_ETRG3_MAXCNT_Msk & ((value) << PWM_ETRG3_MAXCNT_Pos)))
#define PWM_ETRG3_TRGMODE_Pos 24
#define PWM_ETRG3_TRGMODE_Msk (0x3u << PWM_ETRG3_TRGMODE_Pos) /**< \brief (PWM_ETRG3) External Trigger Mode */
#define   PWM_ETRG3_TRGMODE_OFF (0x0u << 24) /**< \brief (PWM_ETRG3) External trigger is not enabled. */
#define   PWM_ETRG3_TRGMODE_MODE1 (0x1u << 24) /**< \brief (PWM_ETRG3) External PWM Reset Mode */
#define   PWM_ETRG3_TRGMODE_MODE2 (0x2u << 24) /**< \brief (PWM_ETRG3) External PWM Start Mode */
#define   PWM_ETRG3_TRGMODE_MODE3 (0x3u << 24) /**< \brief (PWM_ETRG3) Cycle-by-cycle Duty Mode */
#define PWM_ETRG3_TRGEDGE (0x1u << 28) /**< \brief (PWM_ETRG3) Edge Selection */
#define   PWM_ETRG3_TRGEDGE_FALLING_ZERO (0x0u << 28) /**< \brief (PWM_ETRG3) TRGMODE = 1: TRGINx event detection on falling edge.TRGMODE = 2, 3: TRGINx active level is 0 */
#define   PWM_ETRG3_TRGEDGE_RISING_ONE (0x1u << 28) /**< \brief (PWM_ETRG3) TRGMODE = 1: TRGINx event detection on rising edge.TRGMODE = 2, 3: TRGINx active level is 1 */
#define PWM_ETRG3_TRGFILT (0x1u << 29) /**< \brief (PWM_ETRG3) Filtered input */
#define PWM_ETRG3_TRGSRC (0x1u << 30) /**< \brief (PWM_ETRG3) Trigger Source */
#define PWM_ETRG3_RFEN (0x1u << 31) /**< \brief (PWM_ETRG3) Recoverable Fault Enable */
/* -------- PWM_LEBR3 : (PWM Offset: 0x470) PWM Leading-Edge Blanking Register (trg_num = 3) -------- */
#define PWM_LEBR3_LEBDELAY_Pos 0
#define PWM_LEBR3_LEBDELAY_Msk (0x7fu << PWM_LEBR3_LEBDELAY_Pos) /**< \brief (PWM_LEBR3) Leading-Edge Blanking Delay for TRGINx */
#define PWM_LEBR3_LEBDELAY(value) ((PWM_LEBR3_LEBDELAY_Msk & ((value) << PWM_LEBR3_LEBDELAY_Pos)))
#define PWM_LEBR3_PWMLFEN (0x1u << 16) /**< \brief (PWM_LEBR3) PWML Falling Edge Enable */
#define PWM_LEBR3_PWMLREN (0x1u << 17) /**< \brief (PWM_LEBR3) PWML Rising Edge Enable */
#define PWM_LEBR3_PWMHFEN (0x1u << 18) /**< \brief (PWM_LEBR3) PWMH Falling Edge Enable */
#define PWM_LEBR3_PWMHREN (0x1u << 19) /**< \brief (PWM_LEBR3) PWMH Rising Edge Enable */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR Quad SPI Interface */
/* ============================================================================= */
/** \addtogroup SAMA5D2_QSPI Quad SPI Interface */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief Qspi hardware registers */
typedef struct {
  __O  uint32_t QSPI_CR;       /**< \brief (Qspi Offset: 0x00) Control Register */
  __IO uint32_t QSPI_MR;       /**< \brief (Qspi Offset: 0x04) Mode Register */
  __I  uint32_t QSPI_RDR;      /**< \brief (Qspi Offset: 0x08) Receive Data Register */
  __O  uint32_t QSPI_TDR;      /**< \brief (Qspi Offset: 0x0C) Transmit Data Register */
  __I  uint32_t QSPI_SR;       /**< \brief (Qspi Offset: 0x10) Status Register */
  __O  uint32_t QSPI_IER;      /**< \brief (Qspi Offset: 0x14) Interrupt Enable Register */
  __O  uint32_t QSPI_IDR;      /**< \brief (Qspi Offset: 0x18) Interrupt Disable Register */
  __I  uint32_t QSPI_IMR;      /**< \brief (Qspi Offset: 0x1C) Interrupt Mask Register */
  __IO uint32_t QSPI_SCR;      /**< \brief (Qspi Offset: 0x20) Serial Clock Register */
  __I  uint32_t Reserved1[3];
  __IO uint32_t QSPI_IAR;      /**< \brief (Qspi Offset: 0x30) Instruction Address Register */
  __IO uint32_t QSPI_ICR;      /**< \brief (Qspi Offset: 0x34) Instruction Code Register */
  __IO uint32_t QSPI_IFR;      /**< \brief (Qspi Offset: 0x38) Instruction Frame Register */
  __I  uint32_t Reserved2[1];
  __IO uint32_t QSPI_SMR;      /**< \brief (Qspi Offset: 0x40) Scrambling Mode Register */
  __IO uint32_t QSPI_SKR;      /**< \brief (Qspi Offset: 0x44) Scrambling Key Register */
  __I  uint32_t Reserved3[39];
  __IO uint32_t QSPI_WPMR;     /**< \brief (Qspi Offset: 0xE4) Write Protection Mode Register */
  __I  uint32_t QSPI_WPSR;     /**< \brief (Qspi Offset: 0xE8) Write Protection Status Register */
  __I  uint32_t Reserved4[4];
  __I  uint32_t QSPI_VERSION;  /**< \brief (Qspi Offset: 0x00FC) Version Register */
} Qspi;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- QSPI_CR : (QSPI Offset: 0x00) Control Register -------- */
#define QSPI_CR_QSPIEN (0x1u << 0) /**< \brief (QSPI_CR) QSPI Enable */
#define QSPI_CR_QSPIDIS (0x1u << 1) /**< \brief (QSPI_CR) QSPI Disable */
#define QSPI_CR_SWRST (0x1u << 7) /**< \brief (QSPI_CR) QSPI Software Reset */
#define QSPI_CR_LASTXFER (0x1u << 24) /**< \brief (QSPI_CR) Last Transfer */
/* -------- QSPI_MR : (QSPI Offset: 0x04) Mode Register -------- */
#define QSPI_MR_SMM (0x1u << 0) /**< \brief (QSPI_MR) Serial Memory Mode */
#define   QSPI_MR_SMM_SPI (0x0u << 0) /**< \brief (QSPI_MR) The QSPI is in SPI Mode. */
#define   QSPI_MR_SMM_MEMORY (0x1u << 0) /**< \brief (QSPI_MR) The QSPI is in Serial Memory Mode. */
#define QSPI_MR_LLB (0x1u << 1) /**< \brief (QSPI_MR) Local Loopback Enable */
#define   QSPI_MR_LLB_DISABLED (0x0u << 1) /**< \brief (QSPI_MR) Local loopback path disabled. */
#define   QSPI_MR_LLB_ENABLED (0x1u << 1) /**< \brief (QSPI_MR) Local loopback path enabled. */
#define QSPI_MR_WDRBT (0x1u << 2) /**< \brief (QSPI_MR) Wait Data Read Before Transfer */
#define   QSPI_MR_WDRBT_DISABLED (0x0u << 2) /**< \brief (QSPI_MR) No effect. In SPI mode, a transfer can be initiated whatever the state of the QSPI_RDR is. */
#define   QSPI_MR_WDRBT_ENABLED (0x1u << 2) /**< \brief (QSPI_MR) In SPI Mode, a transfer can start only if the QSPI_RDR is empty, i.e., does not contain any unread data. This mode prevents overrun error in reception. */
#define QSPI_MR_CSMODE_Pos 4
#define QSPI_MR_CSMODE_Msk (0x3u << QSPI_MR_CSMODE_Pos) /**< \brief (QSPI_MR) Chip Select Mode */
#define   QSPI_MR_CSMODE_NOT_RELOADED (0x0u << 4) /**< \brief (QSPI_MR) The chip select is deasserted if TD has not been reloaded before the end of the current transfer. */
#define   QSPI_MR_CSMODE_LASTXFER (0x1u << 4) /**< \brief (QSPI_MR) The chip select is deasserted when the bit LASTXFER is written at 1 and the character written in TD has been transferred. */
#define   QSPI_MR_CSMODE_SYSTEMATICALLY (0x2u << 4) /**< \brief (QSPI_MR) The chip select is deasserted systematically after each transfer. */
#define QSPI_MR_NBBITS_Pos 8
#define QSPI_MR_NBBITS_Msk (0xfu << QSPI_MR_NBBITS_Pos) /**< \brief (QSPI_MR) Number Of Bits Per Transfer */
#define   QSPI_MR_NBBITS_8_BIT (0x0u << 8) /**< \brief (QSPI_MR) 8 bits for transfer */
#define   QSPI_MR_NBBITS_9_BIT (0x1u << 8) /**< \brief (QSPI_MR) 9 bits for transfer */
#define   QSPI_MR_NBBITS_10_BIT (0x2u << 8) /**< \brief (QSPI_MR) 10 bits for transfer */
#define   QSPI_MR_NBBITS_11_BIT (0x3u << 8) /**< \brief (QSPI_MR) 11 bits for transfer */
#define   QSPI_MR_NBBITS_12_BIT (0x4u << 8) /**< \brief (QSPI_MR) 12 bits for transfer */
#define   QSPI_MR_NBBITS_13_BIT (0x5u << 8) /**< \brief (QSPI_MR) 13 bits for transfer */
#define   QSPI_MR_NBBITS_14_BIT (0x6u << 8) /**< \brief (QSPI_MR) 14 bits for transfer */
#define   QSPI_MR_NBBITS_15_BIT (0x7u << 8) /**< \brief (QSPI_MR) 15 bits for transfer */
#define   QSPI_MR_NBBITS_16_BIT (0x8u << 8) /**< \brief (QSPI_MR) 16 bits for transfer */
#define QSPI_MR_DLYBCT_Pos 16
#define QSPI_MR_DLYBCT_Msk (0xffu << QSPI_MR_DLYBCT_Pos) /**< \brief (QSPI_MR) Delay Between Consecutive Transfers */
#define QSPI_MR_DLYBCT(value) ((QSPI_MR_DLYBCT_Msk & ((value) << QSPI_MR_DLYBCT_Pos)))
#define QSPI_MR_DLYCS_Pos 24
#define QSPI_MR_DLYCS_Msk (0xffu << QSPI_MR_DLYCS_Pos) /**< \brief (QSPI_MR) Minimum Inactive NPCS Delay */
#define QSPI_MR_DLYCS(value) ((QSPI_MR_DLYCS_Msk & ((value) << QSPI_MR_DLYCS_Pos)))
/* -------- QSPI_RDR : (QSPI Offset: 0x08) Receive Data Register -------- */
#define QSPI_RDR_RD_Pos 0
#define QSPI_RDR_RD_Msk (0xffffu << QSPI_RDR_RD_Pos) /**< \brief (QSPI_RDR) Receive Data */
/* -------- QSPI_TDR : (QSPI Offset: 0x0C) Transmit Data Register -------- */
#define QSPI_TDR_TD_Pos 0
#define QSPI_TDR_TD_Msk (0xffffu << QSPI_TDR_TD_Pos) /**< \brief (QSPI_TDR) Transmit Data */
#define QSPI_TDR_TD(value) ((QSPI_TDR_TD_Msk & ((value) << QSPI_TDR_TD_Pos)))
/* -------- QSPI_SR : (QSPI Offset: 0x10) Status Register -------- */
#define QSPI_SR_RDRF (0x1u << 0) /**< \brief (QSPI_SR) Receive Data Register Full */
#define QSPI_SR_TDRE (0x1u << 1) /**< \brief (QSPI_SR) Transmit Data Register Empty */
#define QSPI_SR_TXEMPTY (0x1u << 2) /**< \brief (QSPI_SR) Transmission Registers Empty */
#define QSPI_SR_OVRES (0x1u << 3) /**< \brief (QSPI_SR) Overrun Error Status */
#define QSPI_SR_CSR (0x1u << 8) /**< \brief (QSPI_SR) Chip Select Rise */
#define QSPI_SR_CSS (0x1u << 9) /**< \brief (QSPI_SR) Chip Select Status */
#define QSPI_SR_INSTRE (0x1u << 10) /**< \brief (QSPI_SR) Instruction End Status */
#define QSPI_SR_QSPIENS (0x1u << 24) /**< \brief (QSPI_SR) QSPI Enable Status */
/* -------- QSPI_IER : (QSPI Offset: 0x14) Interrupt Enable Register -------- */
#define QSPI_IER_RDRF (0x1u << 0) /**< \brief (QSPI_IER) Receive Data Register Full Interrupt Enable */
#define QSPI_IER_TDRE (0x1u << 1) /**< \brief (QSPI_IER) Transmit Data Register Empty Interrupt Enable */
#define QSPI_IER_TXEMPTY (0x1u << 2) /**< \brief (QSPI_IER) Transmission Registers Empty Enable */
#define QSPI_IER_OVRES (0x1u << 3) /**< \brief (QSPI_IER) Overrun Error Interrupt Enable */
#define QSPI_IER_CSR (0x1u << 8) /**< \brief (QSPI_IER) Chip Select Rise Interrupt Enable */
#define QSPI_IER_CSS (0x1u << 9) /**< \brief (QSPI_IER) Chip Select Status Interrupt Enable */
#define QSPI_IER_INSTRE (0x1u << 10) /**< \brief (QSPI_IER) Instruction End Interrupt Enable */
/* -------- QSPI_IDR : (QSPI Offset: 0x18) Interrupt Disable Register -------- */
#define QSPI_IDR_RDRF (0x1u << 0) /**< \brief (QSPI_IDR) Receive Data Register Full Interrupt Disable */
#define QSPI_IDR_TDRE (0x1u << 1) /**< \brief (QSPI_IDR) Transmit Data Register Empty Interrupt Disable */
#define QSPI_IDR_TXEMPTY (0x1u << 2) /**< \brief (QSPI_IDR) Transmission Registers Empty Disable */
#define QSPI_IDR_OVRES (0x1u << 3) /**< \brief (QSPI_IDR) Overrun Error Interrupt Disable */
#define QSPI_IDR_CSR (0x1u << 8) /**< \brief (QSPI_IDR) Chip Select Rise Interrupt Disable */
#define QSPI_IDR_CSS (0x1u << 9) /**< \brief (QSPI_IDR) Chip Select Status Interrupt Disable */
#define QSPI_IDR_INSTRE (0x1u << 10) /**< \brief (QSPI_IDR) Instruction End Interrupt Disable */
/* -------- QSPI_IMR : (QSPI Offset: 0x1C) Interrupt Mask Register -------- */
#define QSPI_IMR_RDRF (0x1u << 0) /**< \brief (QSPI_IMR) Receive Data Register Full Interrupt Mask */
#define QSPI_IMR_TDRE (0x1u << 1) /**< \brief (QSPI_IMR) Transmit Data Register Empty Interrupt Mask */
#define QSPI_IMR_TXEMPTY (0x1u << 2) /**< \brief (QSPI_IMR) Transmission Registers Empty Mask */
#define QSPI_IMR_OVRES (0x1u << 3) /**< \brief (QSPI_IMR) Overrun Error Interrupt Mask */
#define QSPI_IMR_CSR (0x1u << 8) /**< \brief (QSPI_IMR) Chip Select Rise Interrupt Mask */
#define QSPI_IMR_CSS (0x1u << 9) /**< \brief (QSPI_IMR) Chip Select Status Interrupt Mask */
#define QSPI_IMR_INSTRE (0x1u << 10) /**< \brief (QSPI_IMR) Instruction End Interrupt Mask */
/* -------- QSPI_SCR : (QSPI Offset: 0x20) Serial Clock Register -------- */
#define QSPI_SCR_CPOL (0x1u << 0) /**< \brief (QSPI_SCR) Clock Polarity */
#define QSPI_SCR_CPHA (0x1u << 1) /**< \brief (QSPI_SCR) Clock Phase */
#define QSPI_SCR_SCBR_Pos 8
#define QSPI_SCR_SCBR_Msk (0xffu << QSPI_SCR_SCBR_Pos) /**< \brief (QSPI_SCR) Serial Clock Baud Rate */
#define QSPI_SCR_SCBR(value) ((QSPI_SCR_SCBR_Msk & ((value) << QSPI_SCR_SCBR_Pos)))
#define QSPI_SCR_DLYBS_Pos 16
#define QSPI_SCR_DLYBS_Msk (0xffu << QSPI_SCR_DLYBS_Pos) /**< \brief (QSPI_SCR) Delay Before SPCK */
#define QSPI_SCR_DLYBS(value) ((QSPI_SCR_DLYBS_Msk & ((value) << QSPI_SCR_DLYBS_Pos)))
/* -------- QSPI_IAR : (QSPI Offset: 0x30) Instruction Address Register -------- */
#define QSPI_IAR_ADDR_Pos 0
#define QSPI_IAR_ADDR_Msk (0xffffffffu << QSPI_IAR_ADDR_Pos) /**< \brief (QSPI_IAR) Address */
#define QSPI_IAR_ADDR(value) ((QSPI_IAR_ADDR_Msk & ((value) << QSPI_IAR_ADDR_Pos)))
/* -------- QSPI_ICR : (QSPI Offset: 0x34) Instruction Code Register -------- */
#define QSPI_ICR_INST_Pos 0
#define QSPI_ICR_INST_Msk (0xffu << QSPI_ICR_INST_Pos) /**< \brief (QSPI_ICR) Instruction Code */
#define QSPI_ICR_INST(value) ((QSPI_ICR_INST_Msk & ((value) << QSPI_ICR_INST_Pos)))
#define QSPI_ICR_OPT_Pos 16
#define QSPI_ICR_OPT_Msk (0xffu << QSPI_ICR_OPT_Pos) /**< \brief (QSPI_ICR) Option Code */
#define QSPI_ICR_OPT(value) ((QSPI_ICR_OPT_Msk & ((value) << QSPI_ICR_OPT_Pos)))
/* -------- QSPI_IFR : (QSPI Offset: 0x38) Instruction Frame Register -------- */
#define QSPI_IFR_WIDTH_Pos 0
#define QSPI_IFR_WIDTH_Msk (0x7u << QSPI_IFR_WIDTH_Pos) /**< \brief (QSPI_IFR) Width of Instruction Code, Address, Option Code and Data */
#define   QSPI_IFR_WIDTH_SINGLE_BIT_SPI (0x0u << 0) /**< \brief (QSPI_IFR) Instruction: Single-bit SPI / Address-Option: Single-bit SPI / Data: Single-bit SPI */
#define   QSPI_IFR_WIDTH_DUAL_OUTPUT (0x1u << 0) /**< \brief (QSPI_IFR) Instruction: Single-bit SPI / Address-Option: Single-bit SPI / Data: Dual SPI */
#define   QSPI_IFR_WIDTH_QUAD_OUTPUT (0x2u << 0) /**< \brief (QSPI_IFR) Instruction: Single-bit SPI / Address-Option: Single-bit SPI / Data: Quad SPI */
#define   QSPI_IFR_WIDTH_DUAL_IO (0x3u << 0) /**< \brief (QSPI_IFR) Instruction: Single-bit SPI / Address-Option: Dual SPI / Data: Dual SPI */
#define   QSPI_IFR_WIDTH_QUAD_IO (0x4u << 0) /**< \brief (QSPI_IFR) Instruction: Single-bit SPI / Address-Option: Quad SPI / Data: Quad SPI */
#define   QSPI_IFR_WIDTH_DUAL_CMD (0x5u << 0) /**< \brief (QSPI_IFR) Instruction: Dual SPI / Address-Option: Dual SPI / Data: Dual SPI */
#define   QSPI_IFR_WIDTH_QUAD_CMD (0x6u << 0) /**< \brief (QSPI_IFR) Instruction: Quad SPI / Address-Option: Quad SPI / Data: Quad SPI */
#define QSPI_IFR_INSTEN (0x1u << 4) /**< \brief (QSPI_IFR) Instruction Enable */
#define QSPI_IFR_ADDREN (0x1u << 5) /**< \brief (QSPI_IFR) Address Enable */
#define QSPI_IFR_OPTEN (0x1u << 6) /**< \brief (QSPI_IFR) Option Enable */
#define QSPI_IFR_DATAEN (0x1u << 7) /**< \brief (QSPI_IFR) Data Enable */
#define QSPI_IFR_OPTL_Pos 8
#define QSPI_IFR_OPTL_Msk (0x3u << QSPI_IFR_OPTL_Pos) /**< \brief (QSPI_IFR) Option Code Length */
#define   QSPI_IFR_OPTL_OPTION_1BIT (0x0u << 8) /**< \brief (QSPI_IFR) The option code is 1 bit long. */
#define   QSPI_IFR_OPTL_OPTION_2BIT (0x1u << 8) /**< \brief (QSPI_IFR) The option code is 2 bits long. */
#define   QSPI_IFR_OPTL_OPTION_4BIT (0x2u << 8) /**< \brief (QSPI_IFR) The option code is 4 bits long. */
#define   QSPI_IFR_OPTL_OPTION_8BIT (0x3u << 8) /**< \brief (QSPI_IFR) The option code is 8 bits long. */
#define QSPI_IFR_ADDRL (0x1u << 10) /**< \brief (QSPI_IFR) Address Length */
#define   QSPI_IFR_ADDRL_24_BIT (0x0u << 10) /**< \brief (QSPI_IFR) The address is 24 bits long. */
#define   QSPI_IFR_ADDRL_32_BIT (0x1u << 10) /**< \brief (QSPI_IFR) The address is 32 bits long. */
#define QSPI_IFR_TFRTYP_Pos 12
#define QSPI_IFR_TFRTYP_Msk (0x3u << QSPI_IFR_TFRTYP_Pos) /**< \brief (QSPI_IFR) Data Transfer Type */
#define   QSPI_IFR_TFRTYP_TRSFR_READ (0x0u << 12) /**< \brief (QSPI_IFR) Read transfer from the serial memory.Scrambling is not performed.Read at random location (fetch) in the serial flash memory is not possible. */
#define   QSPI_IFR_TFRTYP_TRSFR_READ_MEMORY (0x1u << 12) /**< \brief (QSPI_IFR) Read data transfer from the serial memory.If enabled, scrambling is performed.Read at random location (fetch) in the serial flash memory is possible. */
#define   QSPI_IFR_TFRTYP_TRSFR_WRITE (0x2u << 12) /**< \brief (QSPI_IFR) Write transfer into the serial memory.Scrambling is not performed. */
#define   QSPI_IFR_TFRTYP_TRSFR_WRITE_MEMORY (0x3u << 12) /**< \brief (QSPI_IFR) Write data transfer into the serial memory.If enabled, scrambling is performed. */
#define QSPI_IFR_CRM (0x1u << 14) /**< \brief (QSPI_IFR) Continuous Read Mode */
#define   QSPI_IFR_CRM_DISABLED (0x0u << 14) /**< \brief (QSPI_IFR) The Continuous Read Mode is disabled. */
#define   QSPI_IFR_CRM_ENABLED (0x1u << 14) /**< \brief (QSPI_IFR) The Continuous Read Mode is enabled. */
#define QSPI_IFR_NBDUM_Pos 16
#define QSPI_IFR_NBDUM_Msk (0x1fu << QSPI_IFR_NBDUM_Pos) /**< \brief (QSPI_IFR) Number Of Dummy Cycles */
#define QSPI_IFR_NBDUM(value) ((QSPI_IFR_NBDUM_Msk & ((value) << QSPI_IFR_NBDUM_Pos)))
/* -------- QSPI_SMR : (QSPI Offset: 0x40) Scrambling Mode Register -------- */
#define QSPI_SMR_SCREN (0x1u << 0) /**< \brief (QSPI_SMR) Scrambling/Unscrambling Enable */
#define   QSPI_SMR_SCREN_DISABLED (0x0u << 0) /**< \brief (QSPI_SMR) The scrambling/unscrambling is disabled. */
#define   QSPI_SMR_SCREN_ENABLED (0x1u << 0) /**< \brief (QSPI_SMR) The scrambling/unscrambling is enabled. */
#define QSPI_SMR_RVDIS (0x1u << 1) /**< \brief (QSPI_SMR) Scrambling/Unscrambling Random Value Disable */
/* -------- QSPI_SKR : (QSPI Offset: 0x44) Scrambling Key Register -------- */
#define QSPI_SKR_USRK_Pos 0
#define QSPI_SKR_USRK_Msk (0xffffffffu << QSPI_SKR_USRK_Pos) /**< \brief (QSPI_SKR) Scrambling User Key */
#define QSPI_SKR_USRK(value) ((QSPI_SKR_USRK_Msk & ((value) << QSPI_SKR_USRK_Pos)))
/* -------- QSPI_WPMR : (QSPI Offset: 0xE4) Write Protection Mode Register -------- */
#define QSPI_WPMR_WPEN (0x1u << 0) /**< \brief (QSPI_WPMR) Write Protection Enable */
#define QSPI_WPMR_WPKEY_Pos 8
#define QSPI_WPMR_WPKEY_Msk (0xffffffu << QSPI_WPMR_WPKEY_Pos) /**< \brief (QSPI_WPMR) Write Protection Key */
#define   QSPI_WPMR_WPKEY_PASSWD (0x515350u << 8) /**< \brief (QSPI_WPMR) Writing any other value in this field aborts the write operation of the WPEN bit. Always reads as 0. */
/* -------- QSPI_WPSR : (QSPI Offset: 0xE8) Write Protection Status Register -------- */
#define QSPI_WPSR_WPVS (0x1u << 0) /**< \brief (QSPI_WPSR) Write Protection Violation Status */
#define QSPI_WPSR_WPVSRC_Pos 8
#define QSPI_WPSR_WPVSRC_Msk (0xffu << QSPI_WPSR_WPVSRC_Pos) /**< \brief (QSPI_WPSR) Write Protection Violation Source */
/* -------- QSPI_VERSION : (QSPI Offset: 0x00FC) Version Register -------- */
#define QSPI_VERSION_VERSION_Pos 0
#define QSPI_VERSION_VERSION_Msk (0xfffu << QSPI_VERSION_VERSION_Pos) /**< \brief (QSPI_VERSION) Hardware Module Version */
#define QSPI_VERSION_MFN_Pos 16
#define QSPI_VERSION_MFN_Msk (0x7u << QSPI_VERSION_MFN_Pos) /**< \brief (QSPI_VERSION) Metal Fix Number */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR Reset Controller */
/* ============================================================================= */
/** \addtogroup SAMA5D2_RSTC Reset Controller */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief Rstc hardware registers */
typedef struct {
  __O  uint32_t RSTC_CR; /**< \brief (Rstc Offset: 0x00) Control Register */
  __I  uint32_t RSTC_SR; /**< \brief (Rstc Offset: 0x04) Status Register */
  __IO uint32_t RSTC_MR; /**< \brief (Rstc Offset: 0x08) Mode Register */
} Rstc;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- RSTC_CR : (RSTC Offset: 0x00) Control Register -------- */
#define RSTC_CR_PROCRST (0x1u << 0) /**< \brief (RSTC_CR) Processor Reset */
#define RSTC_CR_PERRST (0x1u << 2) /**< \brief (RSTC_CR) Peripheral Reset */
#define RSTC_CR_EXTRST (0x1u << 3) /**< \brief (RSTC_CR) External Reset */
#define RSTC_CR_KEY_Pos 24
#define RSTC_CR_KEY_Msk (0xffu << RSTC_CR_KEY_Pos) /**< \brief (RSTC_CR) Write Access Password */
#define RSTC_CR_KEY(value) ((RSTC_CR_KEY_Msk & ((value) << RSTC_CR_KEY_Pos)))
#define   RSTC_CR_KEY_PASSWD (0xA5u << 24) /**< \brief (RSTC_CR) Writing any other value in this field aborts the write operation.Always reads as 0. */
/* -------- RSTC_SR : (RSTC Offset: 0x04) Status Register -------- */
#define RSTC_SR_URSTS (0x1u << 0) /**< \brief (RSTC_SR) User Reset Status */
#define RSTC_SR_RSTTYP_Pos 8
#define RSTC_SR_RSTTYP_Msk (0x7u << RSTC_SR_RSTTYP_Pos) /**< \brief (RSTC_SR) Reset Type */
#define   RSTC_SR_RSTTYP_GENERAL_RST (0x0u << 8) /**< \brief (RSTC_SR) Both VDDCORE and VDDBU rising */
#define   RSTC_SR_RSTTYP_WKUP_RST (0x1u << 8) /**< \brief (RSTC_SR) VDDCORE rising */
#define   RSTC_SR_RSTTYP_WDT_RST (0x2u << 8) /**< \brief (RSTC_SR) Watchdog fault occurred */
#define   RSTC_SR_RSTTYP_SOFT_RST (0x3u << 8) /**< \brief (RSTC_SR) Processor reset required by the software */
#define   RSTC_SR_RSTTYP_USER_RST (0x4u << 8) /**< \brief (RSTC_SR) NRST pin detected low */
#define RSTC_SR_NRSTL (0x1u << 16) /**< \brief (RSTC_SR) NRST Pin Level */
#define RSTC_SR_SRCMP (0x1u << 17) /**< \brief (RSTC_SR) Software Reset Command in Progress */
/* -------- RSTC_MR : (RSTC Offset: 0x08) Mode Register -------- */
#define RSTC_MR_URSTEN (0x1u << 0) /**< \brief (RSTC_MR) User Reset Enable */
#define RSTC_MR_URSTIEN (0x1u << 4) /**< \brief (RSTC_MR) User Reset Interrupt Enable */
#define RSTC_MR_ERSTL_Pos 8
#define RSTC_MR_ERSTL_Msk (0xfu << RSTC_MR_ERSTL_Pos) /**< \brief (RSTC_MR) External Reset Length */
#define RSTC_MR_ERSTL(value) ((RSTC_MR_ERSTL_Msk & ((value) << RSTC_MR_ERSTL_Pos)))
#define RSTC_MR_KEY_Pos 24
#define RSTC_MR_KEY_Msk (0xffu << RSTC_MR_KEY_Pos) /**< \brief (RSTC_MR) Write Access Password */
#define   RSTC_MR_KEY_PASSWD (0xA5u << 24) /**< \brief (RSTC_MR) Writing any other value in this field aborts the write operation.Always reads as 0. */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR Real-time Clock */
/* ============================================================================= */
/** \addtogroup SAMA5D2_RTC Real-time Clock */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief RtcTs hardware registers */
typedef struct {
  __I uint32_t RTC_TSTR; /**< \brief (RtcTs Offset: 0x0) TimeStamp Time Register 0 */
  __I uint32_t RTC_TSDR; /**< \brief (RtcTs Offset: 0x4) TimeStamp Date Register 0 */
  __I uint32_t RTC_TSSR; /**< \brief (RtcTs Offset: 0x8) TimeStamp Source Register 0 */
} RtcTs;
/** \brief Rtc hardware registers */
#define RTCTS_NUMBER 2
typedef struct {
  __IO uint32_t RTC_CR;               /**< \brief (Rtc Offset: 0x00) Control Register */
  __IO uint32_t RTC_MR;               /**< \brief (Rtc Offset: 0x04) Mode Register */
  __IO uint32_t RTC_TIMR;             /**< \brief (Rtc Offset: 0x08) Time Register */
  __IO uint32_t RTC_CALR;             /**< \brief (Rtc Offset: 0x0C) Calendar Register */
  __IO uint32_t RTC_TIMALR;           /**< \brief (Rtc Offset: 0x10) Time Alarm Register */
  __IO uint32_t RTC_CALALR;           /**< \brief (Rtc Offset: 0x14) Calendar Alarm Register */
  __I  uint32_t RTC_SR;               /**< \brief (Rtc Offset: 0x18) Status Register */
  __O  uint32_t RTC_SCCR;             /**< \brief (Rtc Offset: 0x1C) Status Clear Command Register */
  __O  uint32_t RTC_IER;              /**< \brief (Rtc Offset: 0x20) Interrupt Enable Register */
  __O  uint32_t RTC_IDR;              /**< \brief (Rtc Offset: 0x24) Interrupt Disable Register */
  __I  uint32_t RTC_IMR;              /**< \brief (Rtc Offset: 0x28) Interrupt Mask Register */
  __I  uint32_t RTC_VER;              /**< \brief (Rtc Offset: 0x2C) Valid Entry Register */
  __I  uint32_t Reserved1[32];
       RtcTs    RTC_TS[RTCTS_NUMBER]; /**< \brief (Rtc Offset: 0xB0) 0 .. 1 */
  __I  uint32_t Reserved2[2];
  __I  uint32_t RTC_MSR;              /**< \brief (Rtc Offset: 0xD0) Milliseconds Register */
  __I  uint32_t Reserved3[10];
  __I  uint32_t RTC_VERSION;          /**< \brief (Rtc Offset: 0xFC) Version Register */
} Rtc;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- RTC_CR : (RTC Offset: 0x00) Control Register -------- */
#define RTC_CR_UPDTIM (0x1u << 0) /**< \brief (RTC_CR) Update Request Time Register */
#define RTC_CR_UPDCAL (0x1u << 1) /**< \brief (RTC_CR) Update Request Calendar Register */
#define RTC_CR_TIMEVSEL_Pos 8
#define RTC_CR_TIMEVSEL_Msk (0x3u << RTC_CR_TIMEVSEL_Pos) /**< \brief (RTC_CR) Time Event Selection */
#define   RTC_CR_TIMEVSEL_MINUTE (0x0u << 8) /**< \brief (RTC_CR) Minute change */
#define   RTC_CR_TIMEVSEL_HOUR (0x1u << 8) /**< \brief (RTC_CR) Hour change */
#define   RTC_CR_TIMEVSEL_MIDNIGHT (0x2u << 8) /**< \brief (RTC_CR) Every day at midnight */
#define   RTC_CR_TIMEVSEL_NOON (0x3u << 8) /**< \brief (RTC_CR) Every day at noon */
#define RTC_CR_CALEVSEL_Pos 16
#define RTC_CR_CALEVSEL_Msk (0x3u << RTC_CR_CALEVSEL_Pos) /**< \brief (RTC_CR) Calendar Event Selection */
#define   RTC_CR_CALEVSEL_WEEK (0x0u << 16) /**< \brief (RTC_CR) Week change (every Monday at time 00:00:00) */
#define   RTC_CR_CALEVSEL_MONTH (0x1u << 16) /**< \brief (RTC_CR) Month change (every 01 of each month at time 00:00:00) */
#define   RTC_CR_CALEVSEL_YEAR (0x2u << 16) /**< \brief (RTC_CR) Year change (every January 1 at time 00:00:00) */
/* -------- RTC_MR : (RTC Offset: 0x04) Mode Register -------- */
#define RTC_MR_HRMOD (0x1u << 0) /**< \brief (RTC_MR) 12-/24-hour Mode */
#define RTC_MR_PERSIAN (0x1u << 1) /**< \brief (RTC_MR) PERSIAN Calendar */
#define RTC_MR_NEGPPM (0x1u << 4) /**< \brief (RTC_MR) NEGative PPM Correction */
#define RTC_MR_CORRECTION_Pos 8
#define RTC_MR_CORRECTION_Msk (0x7fu << RTC_MR_CORRECTION_Pos) /**< \brief (RTC_MR) Slow Clock Correction */
#define RTC_MR_CORRECTION(value) ((RTC_MR_CORRECTION_Msk & ((value) << RTC_MR_CORRECTION_Pos)))
#define RTC_MR_HIGHPPM (0x1u << 15) /**< \brief (RTC_MR) HIGH PPM Correction */
#define RTC_MR_OUT0_Pos 16
#define RTC_MR_OUT0_Msk (0x7u << RTC_MR_OUT0_Pos) /**< \brief (RTC_MR) All ADC Channel Trigger Event Source Selection */
#define   RTC_MR_OUT0_NO_WAVE (0x0u << 16) /**< \brief (RTC_MR) No waveform, stuck at '0' */
#define   RTC_MR_OUT0_FREQ1HZ (0x1u << 16) /**< \brief (RTC_MR) 1 Hz square wave */
#define   RTC_MR_OUT0_FREQ32HZ (0x2u << 16) /**< \brief (RTC_MR) 32 Hz square wave */
#define   RTC_MR_OUT0_FREQ64HZ (0x3u << 16) /**< \brief (RTC_MR) 64 Hz square wave */
#define   RTC_MR_OUT0_FREQ512HZ (0x4u << 16) /**< \brief (RTC_MR) 512 Hz square wave */
#define   RTC_MR_OUT0_ALARM_FLAG (0x6u << 16) /**< \brief (RTC_MR) Output is a copy of the alarm flag */
#define RTC_MR_OUT1_Pos 20
#define RTC_MR_OUT1_Msk (0x7u << RTC_MR_OUT1_Pos) /**< \brief (RTC_MR) ADC Last Channel Trigger Event Source Selection */
#define   RTC_MR_OUT1_NO_WAVE (0x0u << 20) /**< \brief (RTC_MR) No waveform, stuck at '0' */
#define   RTC_MR_OUT1_FREQ1HZ (0x1u << 20) /**< \brief (RTC_MR) 1 Hz square wave */
#define   RTC_MR_OUT1_FREQ32HZ (0x2u << 20) /**< \brief (RTC_MR) 32 Hz square wave */
#define   RTC_MR_OUT1_FREQ64HZ (0x3u << 20) /**< \brief (RTC_MR) 64 Hz square wave */
#define   RTC_MR_OUT1_FREQ512HZ (0x4u << 20) /**< \brief (RTC_MR) 512 Hz square wave */
#define   RTC_MR_OUT1_ALARM_FLAG (0x6u << 20) /**< \brief (RTC_MR) Output is a copy of the alarm flag */
/* -------- RTC_TIMR : (RTC Offset: 0x08) Time Register -------- */
#define RTC_TIMR_SEC_Pos 0
#define RTC_TIMR_SEC_Msk (0x7fu << RTC_TIMR_SEC_Pos) /**< \brief (RTC_TIMR) Current Second */
#define RTC_TIMR_SEC(value) ((RTC_TIMR_SEC_Msk & ((value) << RTC_TIMR_SEC_Pos)))
#define RTC_TIMR_MIN_Pos 8
#define RTC_TIMR_MIN_Msk (0x7fu << RTC_TIMR_MIN_Pos) /**< \brief (RTC_TIMR) Current Minute */
#define RTC_TIMR_MIN(value) ((RTC_TIMR_MIN_Msk & ((value) << RTC_TIMR_MIN_Pos)))
#define RTC_TIMR_HOUR_Pos 16
#define RTC_TIMR_HOUR_Msk (0x3fu << RTC_TIMR_HOUR_Pos) /**< \brief (RTC_TIMR) Current Hour */
#define RTC_TIMR_HOUR(value) ((RTC_TIMR_HOUR_Msk & ((value) << RTC_TIMR_HOUR_Pos)))
#define RTC_TIMR_AMPM (0x1u << 22) /**< \brief (RTC_TIMR) Ante Meridiem Post Meridiem Indicator */
/* -------- RTC_CALR : (RTC Offset: 0x0C) Calendar Register -------- */
#define RTC_CALR_CENT_Pos 0
#define RTC_CALR_CENT_Msk (0x7fu << RTC_CALR_CENT_Pos) /**< \brief (RTC_CALR) Current Century */
#define RTC_CALR_CENT(value) ((RTC_CALR_CENT_Msk & ((value) << RTC_CALR_CENT_Pos)))
#define RTC_CALR_YEAR_Pos 8
#define RTC_CALR_YEAR_Msk (0xffu << RTC_CALR_YEAR_Pos) /**< \brief (RTC_CALR) Current Year */
#define RTC_CALR_YEAR(value) ((RTC_CALR_YEAR_Msk & ((value) << RTC_CALR_YEAR_Pos)))
#define RTC_CALR_MONTH_Pos 16
#define RTC_CALR_MONTH_Msk (0x1fu << RTC_CALR_MONTH_Pos) /**< \brief (RTC_CALR) Current Month */
#define RTC_CALR_MONTH(value) ((RTC_CALR_MONTH_Msk & ((value) << RTC_CALR_MONTH_Pos)))
#define RTC_CALR_DAY_Pos 21
#define RTC_CALR_DAY_Msk (0x7u << RTC_CALR_DAY_Pos) /**< \brief (RTC_CALR) Current Day in Current Week */
#define RTC_CALR_DAY(value) ((RTC_CALR_DAY_Msk & ((value) << RTC_CALR_DAY_Pos)))
#define RTC_CALR_DATE_Pos 24
#define RTC_CALR_DATE_Msk (0x3fu << RTC_CALR_DATE_Pos) /**< \brief (RTC_CALR) Current Day in Current Month */
#define RTC_CALR_DATE(value) ((RTC_CALR_DATE_Msk & ((value) << RTC_CALR_DATE_Pos)))
/* -------- RTC_TIMALR : (RTC Offset: 0x10) Time Alarm Register -------- */
#define RTC_TIMALR_SEC_Pos 0
#define RTC_TIMALR_SEC_Msk (0x7fu << RTC_TIMALR_SEC_Pos) /**< \brief (RTC_TIMALR) Second Alarm */
#define RTC_TIMALR_SEC(value) ((RTC_TIMALR_SEC_Msk & ((value) << RTC_TIMALR_SEC_Pos)))
#define RTC_TIMALR_SECEN (0x1u << 7) /**< \brief (RTC_TIMALR) Second Alarm Enable */
#define RTC_TIMALR_MIN_Pos 8
#define RTC_TIMALR_MIN_Msk (0x7fu << RTC_TIMALR_MIN_Pos) /**< \brief (RTC_TIMALR) Minute Alarm */
#define RTC_TIMALR_MIN(value) ((RTC_TIMALR_MIN_Msk & ((value) << RTC_TIMALR_MIN_Pos)))
#define RTC_TIMALR_MINEN (0x1u << 15) /**< \brief (RTC_TIMALR) Minute Alarm Enable */
#define RTC_TIMALR_HOUR_Pos 16
#define RTC_TIMALR_HOUR_Msk (0x3fu << RTC_TIMALR_HOUR_Pos) /**< \brief (RTC_TIMALR) Hour Alarm */
#define RTC_TIMALR_HOUR(value) ((RTC_TIMALR_HOUR_Msk & ((value) << RTC_TIMALR_HOUR_Pos)))
#define RTC_TIMALR_AMPM (0x1u << 22) /**< \brief (RTC_TIMALR) AM/PM Indicator */
#define RTC_TIMALR_HOUREN (0x1u << 23) /**< \brief (RTC_TIMALR) Hour Alarm Enable */
/* -------- RTC_CALALR : (RTC Offset: 0x14) Calendar Alarm Register -------- */
#define RTC_CALALR_MONTH_Pos 16
#define RTC_CALALR_MONTH_Msk (0x1fu << RTC_CALALR_MONTH_Pos) /**< \brief (RTC_CALALR) Month Alarm */
#define RTC_CALALR_MONTH(value) ((RTC_CALALR_MONTH_Msk & ((value) << RTC_CALALR_MONTH_Pos)))
#define RTC_CALALR_MTHEN (0x1u << 23) /**< \brief (RTC_CALALR) Month Alarm Enable */
#define RTC_CALALR_DATE_Pos 24
#define RTC_CALALR_DATE_Msk (0x3fu << RTC_CALALR_DATE_Pos) /**< \brief (RTC_CALALR) Date Alarm */
#define RTC_CALALR_DATE(value) ((RTC_CALALR_DATE_Msk & ((value) << RTC_CALALR_DATE_Pos)))
#define RTC_CALALR_DATEEN (0x1u << 31) /**< \brief (RTC_CALALR) Date Alarm Enable */
/* -------- RTC_SR : (RTC Offset: 0x18) Status Register -------- */
#define RTC_SR_ACKUPD (0x1u << 0) /**< \brief (RTC_SR) Acknowledge for Update */
#define   RTC_SR_ACKUPD_FREERUN (0x0u << 0) /**< \brief (RTC_SR) Time and calendar registers cannot be updated. */
#define   RTC_SR_ACKUPD_UPDATE (0x1u << 0) /**< \brief (RTC_SR) Time and calendar registers can be updated. */
#define RTC_SR_ALARM (0x1u << 1) /**< \brief (RTC_SR) Alarm Flag */
#define   RTC_SR_ALARM_NO_ALARMEVENT (0x0u << 1) /**< \brief (RTC_SR) No alarm matching condition occurred. */
#define   RTC_SR_ALARM_ALARMEVENT (0x1u << 1) /**< \brief (RTC_SR) An alarm matching condition has occurred. */
#define RTC_SR_SEC (0x1u << 2) /**< \brief (RTC_SR) Second Event */
#define   RTC_SR_SEC_NO_SECEVENT (0x0u << 2) /**< \brief (RTC_SR) No second event has occurred since the last clear. */
#define   RTC_SR_SEC_SECEVENT (0x1u << 2) /**< \brief (RTC_SR) At least one second event has occurred since the last clear. */
#define RTC_SR_TIMEV (0x1u << 3) /**< \brief (RTC_SR) Time Event */
#define   RTC_SR_TIMEV_NO_TIMEVENT (0x0u << 3) /**< \brief (RTC_SR) No time event has occurred since the last clear. */
#define   RTC_SR_TIMEV_TIMEVENT (0x1u << 3) /**< \brief (RTC_SR) At least one time event has occurred since the last clear. */
#define RTC_SR_CALEV (0x1u << 4) /**< \brief (RTC_SR) Calendar Event */
#define   RTC_SR_CALEV_NO_CALEVENT (0x0u << 4) /**< \brief (RTC_SR) No calendar event has occurred since the last clear. */
#define   RTC_SR_CALEV_CALEVENT (0x1u << 4) /**< \brief (RTC_SR) At least one calendar event has occurred since the last clear. */
#define RTC_SR_TDERR (0x1u << 5) /**< \brief (RTC_SR) Time and/or Date Free Running Error */
#define   RTC_SR_TDERR_CORRECT (0x0u << 5) /**< \brief (RTC_SR) The internal free running counters are carrying valid values since the last read of the Status Register (RTC_SR). */
#define   RTC_SR_TDERR_ERR_TIMEDATE (0x1u << 5) /**< \brief (RTC_SR) The internal free running counters have been corrupted (invalid date or time, non-BCD values) since the last read and/or they are still invalid. */
/* -------- RTC_SCCR : (RTC Offset: 0x1C) Status Clear Command Register -------- */
#define RTC_SCCR_ACKCLR (0x1u << 0) /**< \brief (RTC_SCCR) Acknowledge Clear */
#define RTC_SCCR_ALRCLR (0x1u << 1) /**< \brief (RTC_SCCR) Alarm Clear */
#define RTC_SCCR_SECCLR (0x1u << 2) /**< \brief (RTC_SCCR) Second Clear */
#define RTC_SCCR_TIMCLR (0x1u << 3) /**< \brief (RTC_SCCR) Time Clear */
#define RTC_SCCR_CALCLR (0x1u << 4) /**< \brief (RTC_SCCR) Calendar Clear */
#define RTC_SCCR_TDERRCLR (0x1u << 5) /**< \brief (RTC_SCCR) Time and/or Date Free Running Error Clear */
/* -------- RTC_IER : (RTC Offset: 0x20) Interrupt Enable Register -------- */
#define RTC_IER_ACKEN (0x1u << 0) /**< \brief (RTC_IER) Acknowledge Update Interrupt Enable */
#define RTC_IER_ALREN (0x1u << 1) /**< \brief (RTC_IER) Alarm Interrupt Enable */
#define RTC_IER_SECEN (0x1u << 2) /**< \brief (RTC_IER) Second Event Interrupt Enable */
#define RTC_IER_TIMEN (0x1u << 3) /**< \brief (RTC_IER) Time Event Interrupt Enable */
#define RTC_IER_CALEN (0x1u << 4) /**< \brief (RTC_IER) Calendar Event Interrupt Enable */
#define RTC_IER_TDERREN (0x1u << 5) /**< \brief (RTC_IER) Time and/or Date Error Interrupt Enable */
/* -------- RTC_IDR : (RTC Offset: 0x24) Interrupt Disable Register -------- */
#define RTC_IDR_ACKDIS (0x1u << 0) /**< \brief (RTC_IDR) Acknowledge Update Interrupt Disable */
#define RTC_IDR_ALRDIS (0x1u << 1) /**< \brief (RTC_IDR) Alarm Interrupt Disable */
#define RTC_IDR_SECDIS (0x1u << 2) /**< \brief (RTC_IDR) Second Event Interrupt Disable */
#define RTC_IDR_TIMDIS (0x1u << 3) /**< \brief (RTC_IDR) Time Event Interrupt Disable */
#define RTC_IDR_CALDIS (0x1u << 4) /**< \brief (RTC_IDR) Calendar Event Interrupt Disable */
#define RTC_IDR_TDERRDIS (0x1u << 5) /**< \brief (RTC_IDR) Time and/or Date Error Interrupt Disable */
/* -------- RTC_IMR : (RTC Offset: 0x28) Interrupt Mask Register -------- */
#define RTC_IMR_ACK (0x1u << 0) /**< \brief (RTC_IMR) Acknowledge Update Interrupt Mask */
#define RTC_IMR_ALR (0x1u << 1) /**< \brief (RTC_IMR) Alarm Interrupt Mask */
#define RTC_IMR_SEC (0x1u << 2) /**< \brief (RTC_IMR) Second Event Interrupt Mask */
#define RTC_IMR_TIM (0x1u << 3) /**< \brief (RTC_IMR) Time Event Interrupt Mask */
#define RTC_IMR_CAL (0x1u << 4) /**< \brief (RTC_IMR) Calendar Event Interrupt Mask */
/* -------- RTC_VER : (RTC Offset: 0x2C) Valid Entry Register -------- */
#define RTC_VER_NVTIM (0x1u << 0) /**< \brief (RTC_VER) Non-valid Time */
#define RTC_VER_NVCAL (0x1u << 1) /**< \brief (RTC_VER) Non-valid Calendar */
#define RTC_VER_NVTIMALR (0x1u << 2) /**< \brief (RTC_VER) Non-valid Time Alarm */
#define RTC_VER_NVCALALR (0x1u << 3) /**< \brief (RTC_VER) Non-valid Calendar Alarm */
/* -------- RTC_TSTR : (RTC Offset: N/A) TimeStamp Time Register 0 -------- */
#define RTC_TSTR_SEC_Pos 0
#define RTC_TSTR_SEC_Msk (0x7fu << RTC_TSTR_SEC_Pos) /**< \brief (RTC_TSTR) Seconds of the Tamper */
#define RTC_TSTR_MIN_Pos 8
#define RTC_TSTR_MIN_Msk (0x7fu << RTC_TSTR_MIN_Pos) /**< \brief (RTC_TSTR) Minutes of the Tamper */
#define RTC_TSTR_HOUR_Pos 16
#define RTC_TSTR_HOUR_Msk (0x3fu << RTC_TSTR_HOUR_Pos) /**< \brief (RTC_TSTR) Hours of the Tamper */
#define RTC_TSTR_AMPM (0x1u << 22) /**< \brief (RTC_TSTR) AM/PM Indicator of the Tamper */
#define RTC_TSTR_TEVCNT_Pos 24
#define RTC_TSTR_TEVCNT_Msk (0xfu << RTC_TSTR_TEVCNT_Pos) /**< \brief (RTC_TSTR) Tamper Events Counter */
#define RTC_TSTR_BACKUP (0x1u << 31) /**< \brief (RTC_TSTR) System Mode of the Tamper */
/* -------- RTC_TSDR : (RTC Offset: N/A) TimeStamp Date Register 0 -------- */
#define RTC_TSDR_CENT_Pos 0
#define RTC_TSDR_CENT_Msk (0x7fu << RTC_TSDR_CENT_Pos) /**< \brief (RTC_TSDR) Century of the Tamper */
#define RTC_TSDR_YEAR_Pos 8
#define RTC_TSDR_YEAR_Msk (0xffu << RTC_TSDR_YEAR_Pos) /**< \brief (RTC_TSDR) Year of the Tamper */
#define RTC_TSDR_MONTH_Pos 16
#define RTC_TSDR_MONTH_Msk (0x1fu << RTC_TSDR_MONTH_Pos) /**< \brief (RTC_TSDR) Month of the Tamper */
#define RTC_TSDR_DAY_Pos 21
#define RTC_TSDR_DAY_Msk (0x7u << RTC_TSDR_DAY_Pos) /**< \brief (RTC_TSDR) Day of the Tamper */
#define RTC_TSDR_DATE_Pos 24
#define RTC_TSDR_DATE_Msk (0x3fu << RTC_TSDR_DATE_Pos) /**< \brief (RTC_TSDR) Date of the Tamper */
/* -------- RTC_TSSR : (RTC Offset: N/A) TimeStamp Source Register 0 -------- */
#define RTC_TSSR_SHLDM (0x1u << 0) /**< \brief (RTC_TSSR) Shield Monitor */
#define RTC_TSSR_DBLFM (0x1u << 1) /**< \brief (RTC_TSSR) Double Frequency Monitor */
#define RTC_TSSR_TST (0x1u << 2) /**< \brief (RTC_TSSR) Test Pin Monitor */
#define RTC_TSSR_JTAG (0x1u << 3) /**< \brief (RTC_TSSR) JTAG Pins Monitor */
#define RTC_TSSR_REGUL (0x1u << 4) /**< \brief (RTC_TSSR) Core Regulator Disconnection Monitor */
#define RTC_TSSR_MCKM (0x1u << 5) /**< \brief (RTC_TSSR) Master Clock Monitor */
#define RTC_TSSR_TPML (0x1u << 6) /**< \brief (RTC_TSSR) Low Temperature Monitor */
#define RTC_TSSR_TPMH (0x1u << 7) /**< \brief (RTC_TSSR) High Temperature Monitor */
#define RTC_TSSR_VDDRL (0x1u << 8) /**< \brief (RTC_TSSR) Low VDDDDR Voltage Monitor */
#define RTC_TSSR_VDDRH (0x1u << 9) /**< \brief (RTC_TSSR) High VDDDDR Voltage Monitor */
#define RTC_TSSR_VDDBUL (0x1u << 10) /**< \brief (RTC_TSSR) Low VDDBU Voltage Monitor */
#define RTC_TSSR_VDDBUH (0x1u << 11) /**< \brief (RTC_TSSR) High VDDBU Voltage Monitor */
#define RTC_TSSR_VDDCOREL (0x1u << 12) /**< \brief (RTC_TSSR) Low VDDCORE Voltage Monitor */
#define RTC_TSSR_VDDCOREH (0x1u << 13) /**< \brief (RTC_TSSR) High VDDCORE Voltage Monitor */
#define RTC_TSSR_VDDIOL (0x1u << 14) /**< \brief (RTC_TSSR) Low VDDIO Voltage Monitor */
#define RTC_TSSR_VDDIOH (0x1u << 15) /**< \brief (RTC_TSSR) High VDDIO Voltage Monitor */
#define RTC_TSSR_DET0 (0x1u << 16) /**< \brief (RTC_TSSR) PIOBU Intrusion Detector */
#define RTC_TSSR_DET1 (0x1u << 17) /**< \brief (RTC_TSSR) PIOBU Intrusion Detector */
#define RTC_TSSR_DET2 (0x1u << 18) /**< \brief (RTC_TSSR) PIOBU Intrusion Detector */
#define RTC_TSSR_DET3 (0x1u << 19) /**< \brief (RTC_TSSR) PIOBU Intrusion Detector */
#define RTC_TSSR_DET4 (0x1u << 20) /**< \brief (RTC_TSSR) PIOBU Intrusion Detector */
#define RTC_TSSR_DET5 (0x1u << 21) /**< \brief (RTC_TSSR) PIOBU Intrusion Detector */
#define RTC_TSSR_DET6 (0x1u << 22) /**< \brief (RTC_TSSR) PIOBU Intrusion Detector */
#define RTC_TSSR_DET7 (0x1u << 23) /**< \brief (RTC_TSSR) PIOBU Intrusion Detector */
#define RTC_TSSR_DET8 (0x1u << 24) /**< \brief (RTC_TSSR) PIOBU Intrusion Detector */
#define RTC_TSSR_DET9 (0x1u << 25) /**< \brief (RTC_TSSR) PIOBU Intrusion Detector */
#define RTC_TSSR_DET10 (0x1u << 26) /**< \brief (RTC_TSSR) PIOBU Intrusion Detector */
#define RTC_TSSR_DET11 (0x1u << 27) /**< \brief (RTC_TSSR) PIOBU Intrusion Detector */
#define RTC_TSSR_DET12 (0x1u << 28) /**< \brief (RTC_TSSR) PIOBU Intrusion Detector */
#define RTC_TSSR_DET13 (0x1u << 29) /**< \brief (RTC_TSSR) PIOBU Intrusion Detector */
#define RTC_TSSR_DET14 (0x1u << 30) /**< \brief (RTC_TSSR) PIOBU Intrusion Detector */
#define RTC_TSSR_DET15 (0x1u << 31) /**< \brief (RTC_TSSR) PIOBU Intrusion Detector */
/* -------- RTC_MSR : (RTC Offset: 0xD0) Milliseconds Register -------- */
#define RTC_MSR_MS_Pos 0
#define RTC_MSR_MS_Msk (0x3ffu << RTC_MSR_MS_Pos) /**< \brief (RTC_MSR) Number of 1/1024 seconds elapsed within 1 second */
/* -------- RTC_VERSION : (RTC Offset: 0xFC) Version Register -------- */
#define RTC_VERSION_VERSION_Pos 0
#define RTC_VERSION_VERSION_Msk (0xfffu << RTC_VERSION_VERSION_Pos) /**< \brief (RTC_VERSION) Version of the Hardware Module */
#define RTC_VERSION_MFN_Pos 16
#define RTC_VERSION_MFN_Msk (0x7u << RTC_VERSION_MFN_Pos) /**< \brief (RTC_VERSION) Metal Fix Number */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR Slow Clock Controller */
/* ============================================================================= */
/** \addtogroup SAMA5D2_SCKC Slow Clock Controller */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief Sckc hardware registers */
typedef struct {
  __IO uint32_t SCKC_CR; /**< \brief (Sckc Offset: 0x0) Slow Clock Controller Configuration Register */
} Sckc;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- SCKC_CR : (SCKC Offset: 0x0) Slow Clock Controller Configuration Register -------- */
#define SCKC_CR_RCEN (0x1u << 0) /**< \brief (SCKC_CR) Internal 32 kHz RC Oscillator */
#define SCKC_CR_OSC32EN (0x1u << 1) /**< \brief (SCKC_CR) 32768 Hz Oscillator */
#define SCKC_CR_OSC32BYP (0x1u << 2) /**< \brief (SCKC_CR) 32768Hz Oscillator Bypass */
#define SCKC_CR_OSCSEL (0x1u << 3) /**< \brief (SCKC_CR) Slow Clock Selector */
#define   SCKC_CR_OSCSEL_RC (0x0u << 3) /**< \brief (SCKC_CR) Slow clock is internal 32 kHz RC oscillator. */
#define   SCKC_CR_OSCSEL_XTAL (0x1u << 3) /**< \brief (SCKC_CR) Slow clock is 32768 Hz oscillator. */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR Security Module */
/* ============================================================================= */
/** \addtogroup SAMA5D2_SECUMOD Security Module */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief Secumod hardware registers */
typedef struct {
  __O  uint32_t SECUMOD_CR;        /**< \brief (Secumod Offset: 0x0000) Control Register */
  __IO uint32_t SECUMOD_SYSR;      /**< \brief (Secumod Offset: 0x0004) System Status Register */
  __I  uint32_t SECUMOD_SR;        /**< \brief (Secumod Offset: 0x0008) Status Register */
  __I  uint32_t SECUMOD_ASR;       /**< \brief (Secumod Offset: 0x000C) Auxiliary Status Register */
  __O  uint32_t SECUMOD_SCR;       /**< \brief (Secumod Offset: 0x0010) Status Clear Register */
  __I  uint32_t SECUMOD_RAMRDY;    /**< \brief (Secumod Offset: 0x0014) RAM Access Ready Register */
  __IO uint32_t SECUMOD_PIOBU[16]; /**< \brief (Secumod Offset: 0x0018) PIO Backup Register */
  __IO uint32_t SECUMOD_VBUFR;     /**< \brief (Secumod Offset: 0x0058) VDDBU Filter Register */
  __IO uint32_t SECUMOD_VIOFR;     /**< \brief (Secumod Offset: 0x005C) VDDIO Filter Register */
  __IO uint32_t SECUMOD_VDDRFR;    /**< \brief (Secumod Offset: 0x0060) VDDDDR Filter Register */
  __IO uint32_t SECUMOD_VCOREFR;   /**< \brief (Secumod Offset: 0x0064) VDDCORE Filter Register */
  __IO uint32_t SECUMOD_JTAGCR;    /**< \brief (Secumod Offset: 0x0068) JTAG Protection Control Register */
  __IO uint32_t SECUMOD_DYSTUNE;   /**< \brief (Secumod Offset: 0x006C) Dynamic Signatures Tuning Register */
  __IO uint32_t SECUMOD_SCRKEY;    /**< \brief (Secumod Offset: 0x0070) Scrambling Key Register */
  __IO uint32_t SECUMOD_RAMACC;    /**< \brief (Secumod Offset: 0x0074) Ram Access Rights Register */
  __IO uint32_t SECUMOD_RAMACCSR;  /**< \brief (Secumod Offset: 0x0078) Ram Access Rights Status Register */
  __IO uint32_t SECUMOD_BMPR;      /**< \brief (Secumod Offset: 0x007C) Backup Mode Protection Register */
  __IO uint32_t SECUMOD_NMPR;      /**< \brief (Secumod Offset: 0x0080) Normal Mode Protection Register */
  __O  uint32_t SECUMOD_NIEPR;     /**< \brief (Secumod Offset: 0x0084) Normal Interrupt Enable Protection Register */
  __O  uint32_t SECUMOD_NIDPR;     /**< \brief (Secumod Offset: 0x0088) Normal Interrupt Disable Protection Register */
  __I  uint32_t SECUMOD_NIMPR;     /**< \brief (Secumod Offset: 0x008C) Normal Interrupt Mask Protection Register */
  __IO uint32_t SECUMOD_WKPR;      /**< \brief (Secumod Offset: 0x0090) Wake Up Protection Register */
} Secumod;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- SECUMOD_CR : (SECUMOD Offset: 0x0000) Control Register -------- */
#define SECUMOD_CR_BACKUP (0x1u << 0) /**< \brief (SECUMOD_CR) Backup Mode */
#define SECUMOD_CR_NORMAL (0x1u << 1) /**< \brief (SECUMOD_CR) Normal Mode */
#define SECUMOD_CR_SWPROT (0x1u << 2) /**< \brief (SECUMOD_CR) Software Protection */
#define SECUMOD_CR_NIMP_EN_Pos 3
#define SECUMOD_CR_NIMP_EN_Msk (0x3u << SECUMOD_CR_NIMP_EN_Pos) /**< \brief (SECUMOD_CR) Non-Imprinting Enable */
#define SECUMOD_CR_NIMP_EN(value) ((SECUMOD_CR_NIMP_EN_Msk & ((value) << SECUMOD_CR_NIMP_EN_Pos)))
#define SECUMOD_CR_AUTOBKP_Pos 5
#define SECUMOD_CR_AUTOBKP_Msk (0x3u << SECUMOD_CR_AUTOBKP_Pos) /**< \brief (SECUMOD_CR) Automatic Normal to Backup mode switching */
#define SECUMOD_CR_AUTOBKP(value) ((SECUMOD_CR_AUTOBKP_Msk & ((value) << SECUMOD_CR_AUTOBKP_Pos)))
#define SECUMOD_CR_RBKPDEN_Pos 7
#define SECUMOD_CR_RBKPDEN_Msk (0x3u << SECUMOD_CR_RBKPDEN_Pos) /**< \brief (SECUMOD_CR) Register Bank erase on powerdown Enable */
#define SECUMOD_CR_RBKPDEN(value) ((SECUMOD_CR_RBKPDEN_Msk & ((value) << SECUMOD_CR_RBKPDEN_Pos)))
#define SECUMOD_CR_SCRAMB_Pos 9
#define SECUMOD_CR_SCRAMB_Msk (0x3u << SECUMOD_CR_SCRAMB_Pos) /**< \brief (SECUMOD_CR) Memory Scrambling Enable */
#define SECUMOD_CR_SCRAMB(value) ((SECUMOD_CR_SCRAMB_Msk & ((value) << SECUMOD_CR_SCRAMB_Pos)))
#define SECUMOD_CR_KEY_Pos 16
#define SECUMOD_CR_KEY_Msk (0xffffu << SECUMOD_CR_KEY_Pos) /**< \brief (SECUMOD_CR) Password */
#define SECUMOD_CR_KEY(value) ((SECUMOD_CR_KEY_Msk & ((value) << SECUMOD_CR_KEY_Pos)))
/* -------- SECUMOD_SYSR : (SECUMOD Offset: 0x0004) System Status Register -------- */
#define SECUMOD_SYSR_ERASE_DONE (0x1u << 0) /**< \brief (SECUMOD_SYSR) erasable memories state (RW) */
#define SECUMOD_SYSR_ERASE_ON (0x1u << 1) /**< \brief (SECUMOD_SYSR) erasing process ongoing (RO) */
#define SECUMOD_SYSR_BACKUP (0x1u << 2) /**< \brief (SECUMOD_SYSR) Backup Mode (RO) */
#define SECUMOD_SYSR_SWKUP (0x1u << 3) /**< \brief (SECUMOD_SYSR) SWKUP state (RO) */
#define SECUMOD_SYSR_RBKPDEN (0x1u << 4) /**< \brief (SECUMOD_SYSR) Backup Registers erase on power down enabled (RO) */
#define SECUMOD_SYSR_NIMP_EN (0x1u << 5) /**< \brief (SECUMOD_SYSR) Non Imprinting enabled (RO) */
#define SECUMOD_SYSR_AUTOBKP (0x1u << 6) /**< \brief (SECUMOD_SYSR) Automatic Backup Mode enabled (RO) */
#define SECUMOD_SYSR_SCRAMB (0x1u << 7) /**< \brief (SECUMOD_SYSR) Scrambling enabled (RO) */
/* -------- SECUMOD_SR : (SECUMOD Offset: 0x0008) Status Register -------- */
#define SECUMOD_SR_SHLDM (0x1u << 0) /**< \brief (SECUMOD_SR) Shield Monitor */
#define SECUMOD_SR_DBLFM (0x1u << 1) /**< \brief (SECUMOD_SR) Double Frequency Monitor */
#define SECUMOD_SR_TST (0x1u << 2) /**< \brief (SECUMOD_SR) Test pin Monitor */
#define SECUMOD_SR_JTAG (0x1u << 3) /**< \brief (SECUMOD_SR) JTAG pins Monitor */
#define SECUMOD_SR_REGUL (0x1u << 4) /**< \brief (SECUMOD_SR) Core regulator Monitor. Read SECUMOD_ASR for details. */
#define SECUMOD_SR_MCKM (0x1u << 5) /**< \brief (SECUMOD_SR) Master Clock Monitor. Read SECUMOD_ASR for details. */
#define SECUMOD_SR_TPML (0x1u << 6) /**< \brief (SECUMOD_SR) Low Temperature Monitor */
#define SECUMOD_SR_TPMH (0x1u << 7) /**< \brief (SECUMOD_SR) High Temperature Monitor */
#define SECUMOD_SR_VDDRL (0x1u << 8) /**< \brief (SECUMOD_SR) Low VDDDDR Voltage Monitor */
#define SECUMOD_SR_VDDRH (0x1u << 9) /**< \brief (SECUMOD_SR) High VDDDDR Voltage Monitor */
#define SECUMOD_SR_VDDBUL (0x1u << 10) /**< \brief (SECUMOD_SR) Low VDDBU Voltage Monitor */
#define SECUMOD_SR_VDDBUH (0x1u << 11) /**< \brief (SECUMOD_SR) High VDDBU Voltage Monitor */
#define SECUMOD_SR_VDDCOREL (0x1u << 12) /**< \brief (SECUMOD_SR) Low VDDCORE Voltage Monitor */
#define SECUMOD_SR_VDDCOREH (0x1u << 13) /**< \brief (SECUMOD_SR) High VDDCORE Voltage Monitor */
#define SECUMOD_SR_VDDIOL (0x1u << 14) /**< \brief (SECUMOD_SR) Low VDDIO Voltage Monitor */
#define SECUMOD_SR_VDDIOH (0x1u << 15) /**< \brief (SECUMOD_SR) High VDDIO Voltage Monitor */
#define SECUMOD_SR_DET0 (0x1u << 16) /**< \brief (SECUMOD_SR) PIOBU Intrusion Detector */
#define SECUMOD_SR_DET1 (0x1u << 17) /**< \brief (SECUMOD_SR) PIOBU Intrusion Detector */
#define SECUMOD_SR_DET2 (0x1u << 18) /**< \brief (SECUMOD_SR) PIOBU Intrusion Detector */
#define SECUMOD_SR_DET3 (0x1u << 19) /**< \brief (SECUMOD_SR) PIOBU Intrusion Detector */
#define SECUMOD_SR_DET4 (0x1u << 20) /**< \brief (SECUMOD_SR) PIOBU Intrusion Detector */
#define SECUMOD_SR_DET5 (0x1u << 21) /**< \brief (SECUMOD_SR) PIOBU Intrusion Detector */
#define SECUMOD_SR_DET6 (0x1u << 22) /**< \brief (SECUMOD_SR) PIOBU Intrusion Detector */
#define SECUMOD_SR_DET7 (0x1u << 23) /**< \brief (SECUMOD_SR) PIOBU Intrusion Detector */
#define SECUMOD_SR_DET8 (0x1u << 24) /**< \brief (SECUMOD_SR) PIOBU Intrusion Detector */
#define SECUMOD_SR_DET9 (0x1u << 25) /**< \brief (SECUMOD_SR) PIOBU Intrusion Detector */
#define SECUMOD_SR_DET10 (0x1u << 26) /**< \brief (SECUMOD_SR) PIOBU Intrusion Detector */
#define SECUMOD_SR_DET11 (0x1u << 27) /**< \brief (SECUMOD_SR) PIOBU Intrusion Detector */
#define SECUMOD_SR_DET12 (0x1u << 28) /**< \brief (SECUMOD_SR) PIOBU Intrusion Detector */
#define SECUMOD_SR_DET13 (0x1u << 29) /**< \brief (SECUMOD_SR) PIOBU Intrusion Detector */
#define SECUMOD_SR_DET14 (0x1u << 30) /**< \brief (SECUMOD_SR) PIOBU Intrusion Detector */
#define SECUMOD_SR_DET15 (0x1u << 31) /**< \brief (SECUMOD_SR) PIOBU Intrusion Detector */
/* -------- SECUMOD_ASR : (SECUMOD Offset: 0x000C) Auxiliary Status Register -------- */
#define SECUMOD_ASR_MCKM_LO (0x1u << 0) /**< \brief (SECUMOD_ASR) Low frequency limit reached is the cause of MCKM flag in SECUMOD_SR */
#define SECUMOD_ASR_MCKM_HI (0x1u << 1) /**< \brief (SECUMOD_ASR) High frequency limit reached is the cause of MCKM flag in SECUMOD_SR */
#define SECUMOD_ASR_REGUL_LO (0x1u << 2) /**< \brief (SECUMOD_ASR) voltage output low limit reached is the cause of REGUL flag in SECUMOD_SR */
#define SECUMOD_ASR_REGUL_HI (0x1u << 3) /**< \brief (SECUMOD_ASR) voltage output high limit reached is the cause of REGUL flag in SECUMOD_SR */
#define SECUMOD_ASR_JTAG (0x1u << 4) /**< \brief (SECUMOD_ASR) JTAGSEL, CA5 Tap response or CA5 debug acknowledge is the cause of JTAG flag in SECUMOD_SR */
#define SECUMOD_ASR_TCK (0x1u << 5) /**< \brief (SECUMOD_ASR) TCK/TMS activity detected is the cause of JTAG flag in SECUMOD_SR */
/* -------- SECUMOD_SCR : (SECUMOD Offset: 0x0010) Status Clear Register -------- */
#define SECUMOD_SCR_SHLDM (0x1u << 0) /**< \brief (SECUMOD_SCR) Shield Monitor */
#define SECUMOD_SCR_DBLFM (0x1u << 1) /**< \brief (SECUMOD_SCR) Double Frequency Monitor */
#define SECUMOD_SCR_TST (0x1u << 2) /**< \brief (SECUMOD_SCR) Test pin Monitor */
#define SECUMOD_SCR_JTAG (0x1u << 3) /**< \brief (SECUMOD_SCR) JTAG pins Monitor */
#define SECUMOD_SCR_REGUL (0x1u << 4) /**< \brief (SECUMOD_SCR) Core regulator Monitor */
#define SECUMOD_SCR_MCKM (0x1u << 5) /**< \brief (SECUMOD_SCR) Master Clock Monitor */
#define SECUMOD_SCR_TPML (0x1u << 6) /**< \brief (SECUMOD_SCR) Low Temperature Monitor */
#define SECUMOD_SCR_TPMH (0x1u << 7) /**< \brief (SECUMOD_SCR) High Temperature Monitor */
#define SECUMOD_SCR_VDDRL (0x1u << 8) /**< \brief (SECUMOD_SCR) Low VDDDDR Voltage Monitor */
#define SECUMOD_SCR_VDDRH (0x1u << 9) /**< \brief (SECUMOD_SCR) High VDDDDR Voltage Monitor */
#define SECUMOD_SCR_VDDBUL (0x1u << 10) /**< \brief (SECUMOD_SCR) Low VDDBU Voltage Monitor */
#define SECUMOD_SCR_VDDBUH (0x1u << 11) /**< \brief (SECUMOD_SCR) High VDDBU Voltage Monitor */
#define SECUMOD_SCR_VDDCOREL (0x1u << 12) /**< \brief (SECUMOD_SCR) Low VDDCORE Voltage Monitor */
#define SECUMOD_SCR_VDDCOREH (0x1u << 13) /**< \brief (SECUMOD_SCR) High VDDCORE Voltage Monitor */
#define SECUMOD_SCR_VDDIOL (0x1u << 14) /**< \brief (SECUMOD_SCR) Low VDDIO Voltage Monitor */
#define SECUMOD_SCR_VDDIOH (0x1u << 15) /**< \brief (SECUMOD_SCR) High VDDIO Voltage Monitor */
#define SECUMOD_SCR_DET0 (0x1u << 16) /**< \brief (SECUMOD_SCR) PIOBU Intrusion Detector */
#define SECUMOD_SCR_DET1 (0x1u << 17) /**< \brief (SECUMOD_SCR) PIOBU Intrusion Detector */
#define SECUMOD_SCR_DET2 (0x1u << 18) /**< \brief (SECUMOD_SCR) PIOBU Intrusion Detector */
#define SECUMOD_SCR_DET3 (0x1u << 19) /**< \brief (SECUMOD_SCR) PIOBU Intrusion Detector */
#define SECUMOD_SCR_DET4 (0x1u << 20) /**< \brief (SECUMOD_SCR) PIOBU Intrusion Detector */
#define SECUMOD_SCR_DET5 (0x1u << 21) /**< \brief (SECUMOD_SCR) PIOBU Intrusion Detector */
#define SECUMOD_SCR_DET6 (0x1u << 22) /**< \brief (SECUMOD_SCR) PIOBU Intrusion Detector */
#define SECUMOD_SCR_DET7 (0x1u << 23) /**< \brief (SECUMOD_SCR) PIOBU Intrusion Detector */
#define SECUMOD_SCR_DET8 (0x1u << 24) /**< \brief (SECUMOD_SCR) PIOBU Intrusion Detector */
#define SECUMOD_SCR_DET9 (0x1u << 25) /**< \brief (SECUMOD_SCR) PIOBU Intrusion Detector */
#define SECUMOD_SCR_DET10 (0x1u << 26) /**< \brief (SECUMOD_SCR) PIOBU Intrusion Detector */
#define SECUMOD_SCR_DET11 (0x1u << 27) /**< \brief (SECUMOD_SCR) PIOBU Intrusion Detector */
#define SECUMOD_SCR_DET12 (0x1u << 28) /**< \brief (SECUMOD_SCR) PIOBU Intrusion Detector */
#define SECUMOD_SCR_DET13 (0x1u << 29) /**< \brief (SECUMOD_SCR) PIOBU Intrusion Detector */
#define SECUMOD_SCR_DET14 (0x1u << 30) /**< \brief (SECUMOD_SCR) PIOBU Intrusion Detector */
#define SECUMOD_SCR_DET15 (0x1u << 31) /**< \brief (SECUMOD_SCR) PIOBU Intrusion Detector */
/* -------- SECUMOD_RAMRDY : (SECUMOD Offset: 0x0014) RAM Access Ready Register -------- */
#define SECUMOD_RAMRDY_READY (0x1u << 0) /**< \brief (SECUMOD_RAMRDY) ready for system access flag; */
/* -------- SECUMOD_PIOBU[16] : (SECUMOD Offset: 0x0018) PIO Backup Register -------- */
#define SECUMOD_PIOBU_PIOBU_AFV_Pos 0
#define SECUMOD_PIOBU_PIOBU_AFV_Msk (0xfu << SECUMOD_PIOBU_PIOBU_AFV_Pos) /**< \brief (SECUMOD_PIOBU[16]) PIOBU Alarm Filter Value */
#define SECUMOD_PIOBU_PIOBU_AFV(value) ((SECUMOD_PIOBU_PIOBU_AFV_Msk & ((value) << SECUMOD_PIOBU_PIOBU_AFV_Pos)))
#define SECUMOD_PIOBU_PIOBU_RFV_Pos 4
#define SECUMOD_PIOBU_PIOBU_RFV_Msk (0xfu << SECUMOD_PIOBU_PIOBU_RFV_Pos) /**< \brief (SECUMOD_PIOBU[16]) PIOBUx Reset Filter Value */
#define SECUMOD_PIOBU_PIOBU_RFV(value) ((SECUMOD_PIOBU_PIOBU_RFV_Msk & ((value) << SECUMOD_PIOBU_PIOBU_RFV_Pos)))
#define SECUMOD_PIOBU_OUTPUT (0x1u << 8) /**< \brief (SECUMOD_PIOBU[16]) Configure I/O line in input/output */
#define SECUMOD_PIOBU_PIO_SOD (0x1u << 9) /**< \brief (SECUMOD_PIOBU[16]) Set/Clear the I/O line when configured in output mode (OUTPUT =1) */
#define SECUMOD_PIOBU_PIO_PDS (0x1u << 10) /**< \brief (SECUMOD_PIOBU[16]) (Read-only) Give the level on the pin in input mode (OUTPUT = 0) */
#define SECUMOD_PIOBU_PULLUP_Pos 12
#define SECUMOD_PIOBU_PULLUP_Msk (0x3u << SECUMOD_PIOBU_PULLUP_Pos) /**< \brief (SECUMOD_PIOBU[16]) Programmable Pull-up State */
#define SECUMOD_PIOBU_PULLUP(value) ((SECUMOD_PIOBU_PULLUP_Msk & ((value) << SECUMOD_PIOBU_PULLUP_Pos)))
#define SECUMOD_PIOBU_SCHEDULE (0x1u << 14) /**< \brief (SECUMOD_PIOBU[16]) Pull-up/Down Scheduled */
#define SECUMOD_PIOBU_SWITCH (0x1u << 15) /**< \brief (SECUMOD_PIOBU[16]) Switch state for intrusion detection */
#define SECUMOD_PIOBU_DYNSTAT (0x1u << 20) /**< \brief (SECUMOD_PIOBU[16]) switch for static or dynamic detection intrusion */
#define SECUMOD_PIOBU_FILTER3_5 (0x1u << 21) /**< \brief (SECUMOD_PIOBU[16]) filter for dynamic signatures input; */
/* -------- SECUMOD_VBUFR : (SECUMOD Offset: 0x0058) VDDBU Filter Register -------- */
#define SECUMOD_VBUFR_VDDBUFV_Pos 0
#define SECUMOD_VBUFR_VDDBUFV_Msk (0x7u << SECUMOD_VBUFR_VDDBUFV_Pos) /**< \brief (SECUMOD_VBUFR) VDDBU Filter Value */
#define SECUMOD_VBUFR_VDDBUFV(value) ((SECUMOD_VBUFR_VDDBUFV_Msk & ((value) << SECUMOD_VBUFR_VDDBUFV_Pos)))
/* -------- SECUMOD_VIOFR : (SECUMOD Offset: 0x005C) VDDIO Filter Register -------- */
#define SECUMOD_VIOFR_VDDIO_DBTV_Pos 0
#define SECUMOD_VIOFR_VDDIO_DBTV_Msk (0x1fffu << SECUMOD_VIOFR_VDDIO_DBTV_Pos) /**< \brief (SECUMOD_VIOFR) VDDIO Programmable Debouncing Time Value */
#define SECUMOD_VIOFR_VDDIO_DBTV(value) ((SECUMOD_VIOFR_VDDIO_DBTV_Msk & ((value) << SECUMOD_VIOFR_VDDIO_DBTV_Pos)))
/* -------- SECUMOD_VDDRFR : (SECUMOD Offset: 0x0060) VDDDDR Filter Register -------- */
#define SECUMOD_VDDRFR_VDDDDR_DBTV_Pos 0
#define SECUMOD_VDDRFR_VDDDDR_DBTV_Msk (0x1fffu << SECUMOD_VDDRFR_VDDDDR_DBTV_Pos) /**< \brief (SECUMOD_VDDRFR) VDDDDR Programmable Debouncing Time Value */
#define SECUMOD_VDDRFR_VDDDDR_DBTV(value) ((SECUMOD_VDDRFR_VDDDDR_DBTV_Msk & ((value) << SECUMOD_VDDRFR_VDDDDR_DBTV_Pos)))
/* -------- SECUMOD_VCOREFR : (SECUMOD Offset: 0x0064) VDDCORE Filter Register -------- */
#define SECUMOD_VCOREFR_VDDCORE_DBTV_Pos 0
#define SECUMOD_VCOREFR_VDDCORE_DBTV_Msk (0x1fffu << SECUMOD_VCOREFR_VDDCORE_DBTV_Pos) /**< \brief (SECUMOD_VCOREFR) VDDCORE Programmable Debouncing Time Value */
#define SECUMOD_VCOREFR_VDDCORE_DBTV(value) ((SECUMOD_VCOREFR_VDDCORE_DBTV_Msk & ((value) << SECUMOD_VCOREFR_VDDCORE_DBTV_Pos)))
/* -------- SECUMOD_JTAGCR : (SECUMOD Offset: 0x0068) JTAG Protection Control Register -------- */
#define SECUMOD_JTAGCR_FNTRST (0x1u << 0) /**< \brief (SECUMOD_JTAGCR) Force NTRST */
#define SECUMOD_JTAGCR_CA5_DEBUG_MODE_Pos 1
#define SECUMOD_JTAGCR_CA5_DEBUG_MODE_Msk (0x7u << SECUMOD_JTAGCR_CA5_DEBUG_MODE_Pos) /**< \brief (SECUMOD_JTAGCR) Cortex A5 Invasive/Non invasive Secure/Non secure debug permissions */
#define SECUMOD_JTAGCR_CA5_DEBUG_MODE(value) ((SECUMOD_JTAGCR_CA5_DEBUG_MODE_Msk & ((value) << SECUMOD_JTAGCR_CA5_DEBUG_MODE_Pos)))
#define SECUMOD_JTAGCR_CA5_DEBUG_MON (0x1u << 4) /**< \brief (SECUMOD_JTAGCR) Cortex A5 debug acknowledge (DBGACK) monitoring */
/* -------- SECUMOD_DYSTUNE : (SECUMOD Offset: 0x006C) Dynamic Signatures Tuning Register -------- */
#define SECUMOD_DYSTUNE_RX_ERROR_THRESHOLD_Pos 0
#define SECUMOD_DYSTUNE_RX_ERROR_THRESHOLD_Msk (0x7fu << SECUMOD_DYSTUNE_RX_ERROR_THRESHOLD_Pos) /**< \brief (SECUMOD_DYSTUNE) error detection threshold */
#define SECUMOD_DYSTUNE_RX_ERROR_THRESHOLD(value) ((SECUMOD_DYSTUNE_RX_ERROR_THRESHOLD_Msk & ((value) << SECUMOD_DYSTUNE_RX_ERROR_THRESHOLD_Pos)))
#define SECUMOD_DYSTUNE_NOPA (0x1u << 7) /**< \brief (SECUMOD_DYSTUNE) no periodic alarm */
#define SECUMOD_DYSTUNE_RX_OK_CORREL_NUMBER_Pos 8
#define SECUMOD_DYSTUNE_RX_OK_CORREL_NUMBER_Msk (0xffu << SECUMOD_DYSTUNE_RX_OK_CORREL_NUMBER_Pos) /**< \brief (SECUMOD_DYSTUNE) error counter reset threshold */
#define SECUMOD_DYSTUNE_RX_OK_CORREL_NUMBER(value) ((SECUMOD_DYSTUNE_RX_OK_CORREL_NUMBER_Msk & ((value) << SECUMOD_DYSTUNE_RX_OK_CORREL_NUMBER_Pos)))
#define SECUMOD_DYSTUNE_PERIOD_Pos 16
#define SECUMOD_DYSTUNE_PERIOD_Msk (0xffffu << SECUMOD_DYSTUNE_PERIOD_Pos) /**< \brief (SECUMOD_DYSTUNE) signature clock period */
#define SECUMOD_DYSTUNE_PERIOD(value) ((SECUMOD_DYSTUNE_PERIOD_Msk & ((value) << SECUMOD_DYSTUNE_PERIOD_Pos)))
/* -------- SECUMOD_SCRKEY : (SECUMOD Offset: 0x0070) Scrambling Key Register -------- */
#define SECUMOD_SCRKEY_SCRKEY_Pos 0
#define SECUMOD_SCRKEY_SCRKEY_Msk (0xffffffffu << SECUMOD_SCRKEY_SCRKEY_Pos) /**< \brief (SECUMOD_SCRKEY) Scrambling key value; */
#define SECUMOD_SCRKEY_SCRKEY(value) ((SECUMOD_SCRKEY_SCRKEY_Msk & ((value) << SECUMOD_SCRKEY_SCRKEY_Pos)))
/* -------- SECUMOD_RAMACC : (SECUMOD Offset: 0x0074) Ram Access Rights Register -------- */
#define SECUMOD_RAMACC_RW0_Pos 0
#define SECUMOD_RAMACC_RW0_Msk (0x3u << SECUMOD_RAMACC_RW0_Pos) /**< \brief (SECUMOD_RAMACC) Access right for Ram region [0; 1Kbyte[; */
#define SECUMOD_RAMACC_RW0(value) ((SECUMOD_RAMACC_RW0_Msk & ((value) << SECUMOD_RAMACC_RW0_Pos)))
#define SECUMOD_RAMACC_RW1_Pos 2
#define SECUMOD_RAMACC_RW1_Msk (0x3u << SECUMOD_RAMACC_RW1_Pos) /**< \brief (SECUMOD_RAMACC) Access right for Ram region [1Kbyte; 2Kbyte[; */
#define SECUMOD_RAMACC_RW1(value) ((SECUMOD_RAMACC_RW1_Msk & ((value) << SECUMOD_RAMACC_RW1_Pos)))
#define SECUMOD_RAMACC_RW2_Pos 4
#define SECUMOD_RAMACC_RW2_Msk (0x3u << SECUMOD_RAMACC_RW2_Pos) /**< \brief (SECUMOD_RAMACC) Access right for Ram region [2Kbyte; 3Kbyte[; */
#define SECUMOD_RAMACC_RW2(value) ((SECUMOD_RAMACC_RW2_Msk & ((value) << SECUMOD_RAMACC_RW2_Pos)))
#define SECUMOD_RAMACC_RW3_Pos 6
#define SECUMOD_RAMACC_RW3_Msk (0x3u << SECUMOD_RAMACC_RW3_Pos) /**< \brief (SECUMOD_RAMACC) Access right for Ram region [3Kbyte; 4Kbyte[; */
#define SECUMOD_RAMACC_RW3(value) ((SECUMOD_RAMACC_RW3_Msk & ((value) << SECUMOD_RAMACC_RW3_Pos)))
#define SECUMOD_RAMACC_RW4_Pos 8
#define SECUMOD_RAMACC_RW4_Msk (0x3u << SECUMOD_RAMACC_RW4_Pos) /**< \brief (SECUMOD_RAMACC) Access right for Ram region [4Kbyte; 5Kbyte[; */
#define SECUMOD_RAMACC_RW4(value) ((SECUMOD_RAMACC_RW4_Msk & ((value) << SECUMOD_RAMACC_RW4_Pos)))
#define SECUMOD_RAMACC_RW5_Pos 10
#define SECUMOD_RAMACC_RW5_Msk (0x3u << SECUMOD_RAMACC_RW5_Pos) /**< \brief (SECUMOD_RAMACC) Access right for Ram region [5Kbyte; 6Kbyte[; */
#define SECUMOD_RAMACC_RW5(value) ((SECUMOD_RAMACC_RW5_Msk & ((value) << SECUMOD_RAMACC_RW5_Pos)))
#define SECUMOD_RAMACC_RW6_Pos 12
#define SECUMOD_RAMACC_RW6_Msk (0x3u << SECUMOD_RAMACC_RW6_Pos) /**< \brief (SECUMOD_RAMACC) Access right for Ram region [6Kbyte; 7Kbyte[; */
#define SECUMOD_RAMACC_RW6(value) ((SECUMOD_RAMACC_RW6_Msk & ((value) << SECUMOD_RAMACC_RW6_Pos)))
#define SECUMOD_RAMACC_RW7_Pos 14
#define SECUMOD_RAMACC_RW7_Msk (0x3u << SECUMOD_RAMACC_RW7_Pos) /**< \brief (SECUMOD_RAMACC) Access right for Ram region [7Kbyte; 8Kbyte[; */
#define SECUMOD_RAMACC_RW7(value) ((SECUMOD_RAMACC_RW7_Msk & ((value) << SECUMOD_RAMACC_RW7_Pos)))
#define SECUMOD_RAMACC_RW8_Pos 16
#define SECUMOD_RAMACC_RW8_Msk (0x3u << SECUMOD_RAMACC_RW8_Pos) /**< \brief (SECUMOD_RAMACC) Access right for Ram region [8Kbyte; 9Kbyte[ (registers bank BUREG512b) */
#define SECUMOD_RAMACC_RW8(value) ((SECUMOD_RAMACC_RW8_Msk & ((value) << SECUMOD_RAMACC_RW8_Pos)))
/* -------- SECUMOD_RAMACCSR : (SECUMOD Offset: 0x0078) Ram Access Rights Status Register -------- */
#define SECUMOD_RAMACCSR_RW0_Pos 0
#define SECUMOD_RAMACCSR_RW0_Msk (0x3u << SECUMOD_RAMACCSR_RW0_Pos) /**< \brief (SECUMOD_RAMACCSR) Access right status for Ram region [0; 1Kbyte[; */
#define SECUMOD_RAMACCSR_RW0(value) ((SECUMOD_RAMACCSR_RW0_Msk & ((value) << SECUMOD_RAMACCSR_RW0_Pos)))
#define SECUMOD_RAMACCSR_RW1_Pos 2
#define SECUMOD_RAMACCSR_RW1_Msk (0x3u << SECUMOD_RAMACCSR_RW1_Pos) /**< \brief (SECUMOD_RAMACCSR) Access right status for Ram region [1Kbyte; 2Kbyte[; */
#define SECUMOD_RAMACCSR_RW1(value) ((SECUMOD_RAMACCSR_RW1_Msk & ((value) << SECUMOD_RAMACCSR_RW1_Pos)))
#define SECUMOD_RAMACCSR_RW2_Pos 4
#define SECUMOD_RAMACCSR_RW2_Msk (0x3u << SECUMOD_RAMACCSR_RW2_Pos) /**< \brief (SECUMOD_RAMACCSR) Access right status for Ram region [2Kbyte; 3Kbyte[; */
#define SECUMOD_RAMACCSR_RW2(value) ((SECUMOD_RAMACCSR_RW2_Msk & ((value) << SECUMOD_RAMACCSR_RW2_Pos)))
#define SECUMOD_RAMACCSR_RW3_Pos 6
#define SECUMOD_RAMACCSR_RW3_Msk (0x3u << SECUMOD_RAMACCSR_RW3_Pos) /**< \brief (SECUMOD_RAMACCSR) Access right status for Ram region [3Kbyte; 4Kbyte[; */
#define SECUMOD_RAMACCSR_RW3(value) ((SECUMOD_RAMACCSR_RW3_Msk & ((value) << SECUMOD_RAMACCSR_RW3_Pos)))
#define SECUMOD_RAMACCSR_RW4_Pos 8
#define SECUMOD_RAMACCSR_RW4_Msk (0x3u << SECUMOD_RAMACCSR_RW4_Pos) /**< \brief (SECUMOD_RAMACCSR) Access right status for Ram region [4Kbyte; 5Kbyte[; */
#define SECUMOD_RAMACCSR_RW4(value) ((SECUMOD_RAMACCSR_RW4_Msk & ((value) << SECUMOD_RAMACCSR_RW4_Pos)))
#define SECUMOD_RAMACCSR_RW5_Pos 10
#define SECUMOD_RAMACCSR_RW5_Msk (0x3u << SECUMOD_RAMACCSR_RW5_Pos) /**< \brief (SECUMOD_RAMACCSR) Access right status for Ram region [5Kbyte; 6Kbyte[; */
#define SECUMOD_RAMACCSR_RW5(value) ((SECUMOD_RAMACCSR_RW5_Msk & ((value) << SECUMOD_RAMACCSR_RW5_Pos)))
#define SECUMOD_RAMACCSR_RW6_Pos 12
#define SECUMOD_RAMACCSR_RW6_Msk (0x3u << SECUMOD_RAMACCSR_RW6_Pos) /**< \brief (SECUMOD_RAMACCSR) Access right status for Ram region [6Kbyte; 7Kbyte[; */
#define SECUMOD_RAMACCSR_RW6(value) ((SECUMOD_RAMACCSR_RW6_Msk & ((value) << SECUMOD_RAMACCSR_RW6_Pos)))
#define SECUMOD_RAMACCSR_RW7_Pos 14
#define SECUMOD_RAMACCSR_RW7_Msk (0x3u << SECUMOD_RAMACCSR_RW7_Pos) /**< \brief (SECUMOD_RAMACCSR) Access right status for Ram region [7Kbyte; 8Kbyte[; */
#define SECUMOD_RAMACCSR_RW7(value) ((SECUMOD_RAMACCSR_RW7_Msk & ((value) << SECUMOD_RAMACCSR_RW7_Pos)))
#define SECUMOD_RAMACCSR_RW8_Pos 16
#define SECUMOD_RAMACCSR_RW8_Msk (0x3u << SECUMOD_RAMACCSR_RW8_Pos) /**< \brief (SECUMOD_RAMACCSR) Access right status for Ram region [8Kbyte; 9Kbyte[ (registers bank BUREG512b) */
#define SECUMOD_RAMACCSR_RW8(value) ((SECUMOD_RAMACCSR_RW8_Msk & ((value) << SECUMOD_RAMACCSR_RW8_Pos)))
/* -------- SECUMOD_BMPR : (SECUMOD Offset: 0x007C) Backup Mode Protection Register -------- */
#define SECUMOD_BMPR_SHLDM (0x1u << 0) /**< \brief (SECUMOD_BMPR) Shield Monitor Protection */
#define SECUMOD_BMPR_DBLFM (0x1u << 1) /**< \brief (SECUMOD_BMPR) Double Frequency Monitor Protection */
#define SECUMOD_BMPR_TST (0x1u << 2) /**< \brief (SECUMOD_BMPR) Test pin Protection */
#define SECUMOD_BMPR_JTAG (0x1u << 3) /**< \brief (SECUMOD_BMPR) JTAG pins Protection */
#define SECUMOD_BMPR_TPML (0x1u << 6) /**< \brief (SECUMOD_BMPR) Low Temperature Monitor Protection */
#define SECUMOD_BMPR_TPMH (0x1u << 7) /**< \brief (SECUMOD_BMPR) High Temperature Monitor Protection */
#define SECUMOD_BMPR_VDDBUL (0x1u << 10) /**< \brief (SECUMOD_BMPR) Low VDDBU Voltage Monitor Protection */
#define SECUMOD_BMPR_VDDBUH (0x1u << 11) /**< \brief (SECUMOD_BMPR) High VDDBU Voltage Monitor Protection */
#define SECUMOD_BMPR_DET0 (0x1u << 16) /**< \brief (SECUMOD_BMPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_BMPR_DET1 (0x1u << 17) /**< \brief (SECUMOD_BMPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_BMPR_DET2 (0x1u << 18) /**< \brief (SECUMOD_BMPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_BMPR_DET3 (0x1u << 19) /**< \brief (SECUMOD_BMPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_BMPR_DET4 (0x1u << 20) /**< \brief (SECUMOD_BMPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_BMPR_DET5 (0x1u << 21) /**< \brief (SECUMOD_BMPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_BMPR_DET6 (0x1u << 22) /**< \brief (SECUMOD_BMPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_BMPR_DET7 (0x1u << 23) /**< \brief (SECUMOD_BMPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_BMPR_DET8 (0x1u << 24) /**< \brief (SECUMOD_BMPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_BMPR_DET9 (0x1u << 25) /**< \brief (SECUMOD_BMPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_BMPR_DET10 (0x1u << 26) /**< \brief (SECUMOD_BMPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_BMPR_DET11 (0x1u << 27) /**< \brief (SECUMOD_BMPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_BMPR_DET12 (0x1u << 28) /**< \brief (SECUMOD_BMPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_BMPR_DET13 (0x1u << 29) /**< \brief (SECUMOD_BMPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_BMPR_DET14 (0x1u << 30) /**< \brief (SECUMOD_BMPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_BMPR_DET15 (0x1u << 31) /**< \brief (SECUMOD_BMPR) PIOBU Intrusion Detector Protection */
/* -------- SECUMOD_NMPR : (SECUMOD Offset: 0x0080) Normal Mode Protection Register -------- */
#define SECUMOD_NMPR_SHLDM (0x1u << 0) /**< \brief (SECUMOD_NMPR) Shield Monitor Protection */
#define SECUMOD_NMPR_DBLFM (0x1u << 1) /**< \brief (SECUMOD_NMPR) Double Frequency Monitor Protection */
#define SECUMOD_NMPR_TST (0x1u << 2) /**< \brief (SECUMOD_NMPR) Test pin Protection */
#define SECUMOD_NMPR_JTAG (0x1u << 3) /**< \brief (SECUMOD_NMPR) JTAG pins Protection */
#define SECUMOD_NMPR_REGUL (0x1u << 4) /**< \brief (SECUMOD_NMPR) Core regulator Monitor Protection */
#define SECUMOD_NMPR_MCKM (0x1u << 5) /**< \brief (SECUMOD_NMPR) Master Clock Monitor Protection */
#define SECUMOD_NMPR_TPML (0x1u << 6) /**< \brief (SECUMOD_NMPR) Low Temperature Monitor Protection */
#define SECUMOD_NMPR_TPMH (0x1u << 7) /**< \brief (SECUMOD_NMPR) High Temperature Monitor Protection */
#define SECUMOD_NMPR_VDDRL (0x1u << 8) /**< \brief (SECUMOD_NMPR) Low VDDDDR Voltage Monitor Protection */
#define SECUMOD_NMPR_VDDRH (0x1u << 9) /**< \brief (SECUMOD_NMPR) High VDDDDR Voltage Monitor Protection */
#define SECUMOD_NMPR_VDDBUL (0x1u << 10) /**< \brief (SECUMOD_NMPR) Low VDDBU Voltage Monitor Protection */
#define SECUMOD_NMPR_VDDBUH (0x1u << 11) /**< \brief (SECUMOD_NMPR) High VDDBU Voltage Monitor Protection */
#define SECUMOD_NMPR_VDDCOREL (0x1u << 12) /**< \brief (SECUMOD_NMPR) Low VDDCORE Voltage Monitor Protection */
#define SECUMOD_NMPR_VDDCOREH (0x1u << 13) /**< \brief (SECUMOD_NMPR) High VDDCORE Voltage Monitor Protection */
#define SECUMOD_NMPR_VDDIOL (0x1u << 14) /**< \brief (SECUMOD_NMPR) Low VDDIO Voltage Monitor Protection */
#define SECUMOD_NMPR_VDDIOH (0x1u << 15) /**< \brief (SECUMOD_NMPR) High VDDIO Voltage Monitor Protection */
#define SECUMOD_NMPR_DET0 (0x1u << 16) /**< \brief (SECUMOD_NMPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_NMPR_DET1 (0x1u << 17) /**< \brief (SECUMOD_NMPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_NMPR_DET2 (0x1u << 18) /**< \brief (SECUMOD_NMPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_NMPR_DET3 (0x1u << 19) /**< \brief (SECUMOD_NMPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_NMPR_DET4 (0x1u << 20) /**< \brief (SECUMOD_NMPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_NMPR_DET5 (0x1u << 21) /**< \brief (SECUMOD_NMPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_NMPR_DET6 (0x1u << 22) /**< \brief (SECUMOD_NMPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_NMPR_DET7 (0x1u << 23) /**< \brief (SECUMOD_NMPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_NMPR_DET8 (0x1u << 24) /**< \brief (SECUMOD_NMPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_NMPR_DET9 (0x1u << 25) /**< \brief (SECUMOD_NMPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_NMPR_DET10 (0x1u << 26) /**< \brief (SECUMOD_NMPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_NMPR_DET11 (0x1u << 27) /**< \brief (SECUMOD_NMPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_NMPR_DET12 (0x1u << 28) /**< \brief (SECUMOD_NMPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_NMPR_DET13 (0x1u << 29) /**< \brief (SECUMOD_NMPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_NMPR_DET14 (0x1u << 30) /**< \brief (SECUMOD_NMPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_NMPR_DET15 (0x1u << 31) /**< \brief (SECUMOD_NMPR) PIOBU Intrusion Detector Protection */
/* -------- SECUMOD_NIEPR : (SECUMOD Offset: 0x0084) Normal Interrupt Enable Protection Register -------- */
#define SECUMOD_NIEPR_SHLDM (0x1u << 0) /**< \brief (SECUMOD_NIEPR) Shield Monitor Protection Interrupt Enable */
#define SECUMOD_NIEPR_DBLFM (0x1u << 1) /**< \brief (SECUMOD_NIEPR) Double Frequency Monitor Protection Interrupt Enable */
#define SECUMOD_NIEPR_TST (0x1u << 2) /**< \brief (SECUMOD_NIEPR) Test pin Protection Interrupt Enable */
#define SECUMOD_NIEPR_JTAG (0x1u << 3) /**< \brief (SECUMOD_NIEPR) JTAG pins Protection Interrupt Enable */
#define SECUMOD_NIEPR_REGUL (0x1u << 4) /**< \brief (SECUMOD_NIEPR) Core regulator Protection Interrupt Enable */
#define SECUMOD_NIEPR_MCKM (0x1u << 5) /**< \brief (SECUMOD_NIEPR) Master Clock Monitor Protection Interrupt Enable */
#define SECUMOD_NIEPR_TPML (0x1u << 6) /**< \brief (SECUMOD_NIEPR) Low Temperature Monitor Protection Interrupt Enable */
#define SECUMOD_NIEPR_TPMH (0x1u << 7) /**< \brief (SECUMOD_NIEPR) High Temperature Monitor Protection Interrupt Enable */
#define SECUMOD_NIEPR_VDDRL (0x1u << 8) /**< \brief (SECUMOD_NIEPR) Low VDDDDR Voltage Monitor Protection Interrupt Enable */
#define SECUMOD_NIEPR_VDDRH (0x1u << 9) /**< \brief (SECUMOD_NIEPR) High VDDDDR Voltage Monitor Protection Interrupt Enable */
#define SECUMOD_NIEPR_VDDBUL (0x1u << 10) /**< \brief (SECUMOD_NIEPR) Low VDDBU Voltage Monitor Protection Interrupt Enable */
#define SECUMOD_NIEPR_VDDBUH (0x1u << 11) /**< \brief (SECUMOD_NIEPR) High VDDBU Voltage Monitor Protection Interrupt Enable */
#define SECUMOD_NIEPR_VDDCOREL (0x1u << 12) /**< \brief (SECUMOD_NIEPR) Low VDDCORE Voltage Monitor Protection Interrupt Enable */
#define SECUMOD_NIEPR_VDDCOREH (0x1u << 13) /**< \brief (SECUMOD_NIEPR) High VDDCORE Voltage Monitor Protection Interrupt Enable */
#define SECUMOD_NIEPR_VDDIOL (0x1u << 14) /**< \brief (SECUMOD_NIEPR) Low VDDIO Voltage Monitor Protection Interrupt Enable */
#define SECUMOD_NIEPR_VDDIOH (0x1u << 15) /**< \brief (SECUMOD_NIEPR) High VDDIO Voltage Monitor Protection Interrupt Enable */
#define SECUMOD_NIEPR_DET0 (0x1u << 16) /**< \brief (SECUMOD_NIEPR) PIOBU Intrusion Detector Protection Interrupt Enable */
#define SECUMOD_NIEPR_DET1 (0x1u << 17) /**< \brief (SECUMOD_NIEPR) PIOBU Intrusion Detector Protection Interrupt Enable */
#define SECUMOD_NIEPR_DET2 (0x1u << 18) /**< \brief (SECUMOD_NIEPR) PIOBU Intrusion Detector Protection Interrupt Enable */
#define SECUMOD_NIEPR_DET3 (0x1u << 19) /**< \brief (SECUMOD_NIEPR) PIOBU Intrusion Detector Protection Interrupt Enable */
#define SECUMOD_NIEPR_DET4 (0x1u << 20) /**< \brief (SECUMOD_NIEPR) PIOBU Intrusion Detector Protection Interrupt Enable */
#define SECUMOD_NIEPR_DET5 (0x1u << 21) /**< \brief (SECUMOD_NIEPR) PIOBU Intrusion Detector Protection Interrupt Enable */
#define SECUMOD_NIEPR_DET6 (0x1u << 22) /**< \brief (SECUMOD_NIEPR) PIOBU Intrusion Detector Protection Interrupt Enable */
#define SECUMOD_NIEPR_DET7 (0x1u << 23) /**< \brief (SECUMOD_NIEPR) PIOBU Intrusion Detector Protection Interrupt Enable */
#define SECUMOD_NIEPR_DET8 (0x1u << 24) /**< \brief (SECUMOD_NIEPR) PIOBU Intrusion Detector Protection Interrupt Enable */
#define SECUMOD_NIEPR_DET9 (0x1u << 25) /**< \brief (SECUMOD_NIEPR) PIOBU Intrusion Detector Protection Interrupt Enable */
#define SECUMOD_NIEPR_DET10 (0x1u << 26) /**< \brief (SECUMOD_NIEPR) PIOBU Intrusion Detector Protection Interrupt Enable */
#define SECUMOD_NIEPR_DET11 (0x1u << 27) /**< \brief (SECUMOD_NIEPR) PIOBU Intrusion Detector Protection Interrupt Enable */
#define SECUMOD_NIEPR_DET12 (0x1u << 28) /**< \brief (SECUMOD_NIEPR) PIOBU Intrusion Detector Protection Interrupt Enable */
#define SECUMOD_NIEPR_DET13 (0x1u << 29) /**< \brief (SECUMOD_NIEPR) PIOBU Intrusion Detector Protection Interrupt Enable */
#define SECUMOD_NIEPR_DET14 (0x1u << 30) /**< \brief (SECUMOD_NIEPR) PIOBU Intrusion Detector Protection Interrupt Enable */
#define SECUMOD_NIEPR_DET15 (0x1u << 31) /**< \brief (SECUMOD_NIEPR) PIOBU Intrusion Detector Protection Interrupt Enable */
/* -------- SECUMOD_NIDPR : (SECUMOD Offset: 0x0088) Normal Interrupt Disable Protection Register -------- */
#define SECUMOD_NIDPR_SHLDM (0x1u << 0) /**< \brief (SECUMOD_NIDPR) Shield Monitor Protection Interrupt Disable */
#define SECUMOD_NIDPR_DBLFM (0x1u << 1) /**< \brief (SECUMOD_NIDPR) Double Frequency Monitor Protection Interrupt Disable */
#define SECUMOD_NIDPR_TST (0x1u << 2) /**< \brief (SECUMOD_NIDPR) Test pin Protection Interrupt Disable */
#define SECUMOD_NIDPR_JTAG (0x1u << 3) /**< \brief (SECUMOD_NIDPR) JTAG pins Protection Interrupt Disable */
#define SECUMOD_NIDPR_REGUL (0x1u << 4) /**< \brief (SECUMOD_NIDPR) Core regulator Protection Interrupt Disable */
#define SECUMOD_NIDPR_MCKM (0x1u << 5) /**< \brief (SECUMOD_NIDPR) Master Clock Monitor Protection Interrupt Disable */
#define SECUMOD_NIDPR_TPML (0x1u << 6) /**< \brief (SECUMOD_NIDPR) Low Temperature Monitor Protection Interrupt Disable */
#define SECUMOD_NIDPR_TPMH (0x1u << 7) /**< \brief (SECUMOD_NIDPR) High Temperature Monitor Protection Interrupt Disable */
#define SECUMOD_NIDPR_VDDRL (0x1u << 8) /**< \brief (SECUMOD_NIDPR) Low VDDDDR Voltage Monitor Protection Interrupt Enable */
#define SECUMOD_NIDPR_VDDRH (0x1u << 9) /**< \brief (SECUMOD_NIDPR) High VDDDDR Voltage Monitor Protection Interrupt Enable */
#define SECUMOD_NIDPR_VDDBUL (0x1u << 10) /**< \brief (SECUMOD_NIDPR) Low VDDBU Voltage Monitor Protection Interrupt Disable */
#define SECUMOD_NIDPR_VDDBUH (0x1u << 11) /**< \brief (SECUMOD_NIDPR) High VDDBU Voltage Monitor Protection Interrupt Disable */
#define SECUMOD_NIDPR_VDDCOREL (0x1u << 12) /**< \brief (SECUMOD_NIDPR) Low VDDCORE Voltage Monitor Protection Interrupt Disable */
#define SECUMOD_NIDPR_VDDCOREH (0x1u << 13) /**< \brief (SECUMOD_NIDPR) High VDDCORE Voltage Monitor Protection Interrupt Disable */
#define SECUMOD_NIDPR_VDDIOL (0x1u << 14) /**< \brief (SECUMOD_NIDPR) Low VDDIO Voltage Monitor Protection Interrupt Disable */
#define SECUMOD_NIDPR_VDDIOH (0x1u << 15) /**< \brief (SECUMOD_NIDPR) High VDDIO Voltage Monitor Protection Interrupt Disable */
#define SECUMOD_NIDPR_DET0 (0x1u << 16) /**< \brief (SECUMOD_NIDPR) PIOBU Intrusion Detector Protection Interrupt Disable */
#define SECUMOD_NIDPR_DET1 (0x1u << 17) /**< \brief (SECUMOD_NIDPR) PIOBU Intrusion Detector Protection Interrupt Disable */
#define SECUMOD_NIDPR_DET2 (0x1u << 18) /**< \brief (SECUMOD_NIDPR) PIOBU Intrusion Detector Protection Interrupt Disable */
#define SECUMOD_NIDPR_DET3 (0x1u << 19) /**< \brief (SECUMOD_NIDPR) PIOBU Intrusion Detector Protection Interrupt Disable */
#define SECUMOD_NIDPR_DET4 (0x1u << 20) /**< \brief (SECUMOD_NIDPR) PIOBU Intrusion Detector Protection Interrupt Disable */
#define SECUMOD_NIDPR_DET5 (0x1u << 21) /**< \brief (SECUMOD_NIDPR) PIOBU Intrusion Detector Protection Interrupt Disable */
#define SECUMOD_NIDPR_DET6 (0x1u << 22) /**< \brief (SECUMOD_NIDPR) PIOBU Intrusion Detector Protection Interrupt Disable */
#define SECUMOD_NIDPR_DET7 (0x1u << 23) /**< \brief (SECUMOD_NIDPR) PIOBU Intrusion Detector Protection Interrupt Disable */
#define SECUMOD_NIDPR_DET8 (0x1u << 24) /**< \brief (SECUMOD_NIDPR) PIOBU Intrusion Detector Protection Interrupt Disable */
#define SECUMOD_NIDPR_DET9 (0x1u << 25) /**< \brief (SECUMOD_NIDPR) PIOBU Intrusion Detector Protection Interrupt Disable */
#define SECUMOD_NIDPR_DET10 (0x1u << 26) /**< \brief (SECUMOD_NIDPR) PIOBU Intrusion Detector Protection Interrupt Disable */
#define SECUMOD_NIDPR_DET11 (0x1u << 27) /**< \brief (SECUMOD_NIDPR) PIOBU Intrusion Detector Protection Interrupt Disable */
#define SECUMOD_NIDPR_DET12 (0x1u << 28) /**< \brief (SECUMOD_NIDPR) PIOBU Intrusion Detector Protection Interrupt Disable */
#define SECUMOD_NIDPR_DET13 (0x1u << 29) /**< \brief (SECUMOD_NIDPR) PIOBU Intrusion Detector Protection Interrupt Disable */
#define SECUMOD_NIDPR_DET14 (0x1u << 30) /**< \brief (SECUMOD_NIDPR) PIOBU Intrusion Detector Protection Interrupt Disable */
#define SECUMOD_NIDPR_DET15 (0x1u << 31) /**< \brief (SECUMOD_NIDPR) PIOBU Intrusion Detector Protection Interrupt Disable */
/* -------- SECUMOD_NIMPR : (SECUMOD Offset: 0x008C) Normal Interrupt Mask Protection Register -------- */
#define SECUMOD_NIMPR_SHLDM (0x1u << 0) /**< \brief (SECUMOD_NIMPR) Shield Monitor Protection Interrupt Mask */
#define SECUMOD_NIMPR_DBLFM (0x1u << 1) /**< \brief (SECUMOD_NIMPR) Double Frequency Monitor Protection Interrupt Mask */
#define SECUMOD_NIMPR_TST (0x1u << 2) /**< \brief (SECUMOD_NIMPR) Test pin Protection Interrupt Mask */
#define SECUMOD_NIMPR_JTAG (0x1u << 3) /**< \brief (SECUMOD_NIMPR) JTAG pins Protection Interrupt Mask */
#define SECUMOD_NIMPR_REGUL (0x1u << 4) /**< \brief (SECUMOD_NIMPR) Core regulator Protection Interrupt Mask */
#define SECUMOD_NIMPR_MCKM (0x1u << 5) /**< \brief (SECUMOD_NIMPR) Master Clock Monitor Protection Interrupt Mask */
#define SECUMOD_NIMPR_TPML (0x1u << 6) /**< \brief (SECUMOD_NIMPR) Low Temperature Monitor Protection Interrupt Mask */
#define SECUMOD_NIMPR_TPMH (0x1u << 7) /**< \brief (SECUMOD_NIMPR) High Temperature Monitor Protection Interrupt Mask */
#define SECUMOD_NIMPR_VDDRL (0x1u << 8) /**< \brief (SECUMOD_NIMPR) Low VDDDDR Voltage Monitor Protection Interrupt Mask */
#define SECUMOD_NIMPR_VDDRH (0x1u << 9) /**< \brief (SECUMOD_NIMPR) High VDDDDR Voltage Monitor Protection Interrupt Mask */
#define SECUMOD_NIMPR_VDDBUL (0x1u << 10) /**< \brief (SECUMOD_NIMPR) Low VDDBU Voltage Monitor Protection Interrupt Mask */
#define SECUMOD_NIMPR_VDDBUH (0x1u << 11) /**< \brief (SECUMOD_NIMPR) High VDDBU Voltage Monitor Protection Interrupt Mask */
#define SECUMOD_NIMPR_VDDCOREL (0x1u << 12) /**< \brief (SECUMOD_NIMPR) Low VDDCORE Voltage Monitor Protection Interrupt Mask */
#define SECUMOD_NIMPR_VDDCOREH (0x1u << 13) /**< \brief (SECUMOD_NIMPR) High VDDCORE Voltage Monitor Protection Interrupt Mask */
#define SECUMOD_NIMPR_VDDIOL (0x1u << 14) /**< \brief (SECUMOD_NIMPR) Low VDDIO Voltage Monitor Protection Interrupt Mask */
#define SECUMOD_NIMPR_VDDIOH (0x1u << 15) /**< \brief (SECUMOD_NIMPR) High VDDIO Voltage Monitor Protection Interrupt Mask */
#define SECUMOD_NIMPR_DET0 (0x1u << 16) /**< \brief (SECUMOD_NIMPR) PIOBU Intrusion Detector Protection Interrupt Mask */
#define SECUMOD_NIMPR_DET1 (0x1u << 17) /**< \brief (SECUMOD_NIMPR) PIOBU Intrusion Detector Protection Interrupt Mask */
#define SECUMOD_NIMPR_DET2 (0x1u << 18) /**< \brief (SECUMOD_NIMPR) PIOBU Intrusion Detector Protection Interrupt Mask */
#define SECUMOD_NIMPR_DET3 (0x1u << 19) /**< \brief (SECUMOD_NIMPR) PIOBU Intrusion Detector Protection Interrupt Mask */
#define SECUMOD_NIMPR_DET4 (0x1u << 20) /**< \brief (SECUMOD_NIMPR) PIOBU Intrusion Detector Protection Interrupt Mask */
#define SECUMOD_NIMPR_DET5 (0x1u << 21) /**< \brief (SECUMOD_NIMPR) PIOBU Intrusion Detector Protection Interrupt Mask */
#define SECUMOD_NIMPR_DET6 (0x1u << 22) /**< \brief (SECUMOD_NIMPR) PIOBU Intrusion Detector Protection Interrupt Mask */
#define SECUMOD_NIMPR_DET7 (0x1u << 23) /**< \brief (SECUMOD_NIMPR) PIOBU Intrusion Detector Protection Interrupt Mask */
#define SECUMOD_NIMPR_DET8 (0x1u << 24) /**< \brief (SECUMOD_NIMPR) PIOBU Intrusion Detector Protection Interrupt Mask */
#define SECUMOD_NIMPR_DET9 (0x1u << 25) /**< \brief (SECUMOD_NIMPR) PIOBU Intrusion Detector Protection Interrupt Mask */
#define SECUMOD_NIMPR_DET10 (0x1u << 26) /**< \brief (SECUMOD_NIMPR) PIOBU Intrusion Detector Protection Interrupt Mask */
#define SECUMOD_NIMPR_DET11 (0x1u << 27) /**< \brief (SECUMOD_NIMPR) PIOBU Intrusion Detector Protection Interrupt Mask */
#define SECUMOD_NIMPR_DET12 (0x1u << 28) /**< \brief (SECUMOD_NIMPR) PIOBU Intrusion Detector Protection Interrupt Mask */
#define SECUMOD_NIMPR_DET13 (0x1u << 29) /**< \brief (SECUMOD_NIMPR) PIOBU Intrusion Detector Protection Interrupt Mask */
#define SECUMOD_NIMPR_DET14 (0x1u << 30) /**< \brief (SECUMOD_NIMPR) PIOBU Intrusion Detector Protection Interrupt Mask */
#define SECUMOD_NIMPR_DET15 (0x1u << 31) /**< \brief (SECUMOD_NIMPR) PIOBU Intrusion Detector Protection Interrupt Mask */
/* -------- SECUMOD_WKPR : (SECUMOD Offset: 0x0090) Wake Up Protection Register -------- */
#define SECUMOD_WKPR_SHLDM (0x1u << 0) /**< \brief (SECUMOD_WKPR) Shield Monitor Protection */
#define SECUMOD_WKPR_DBLFM (0x1u << 1) /**< \brief (SECUMOD_WKPR) Double Frequency Monitor Protection */
#define SECUMOD_WKPR_TST (0x1u << 2) /**< \brief (SECUMOD_WKPR) Test pin Protection */
#define SECUMOD_WKPR_JTAG (0x1u << 3) /**< \brief (SECUMOD_WKPR) JTAG pins Protection */
#define SECUMOD_WKPR_TPML (0x1u << 6) /**< \brief (SECUMOD_WKPR) Low Temperature Monitor Protection */
#define SECUMOD_WKPR_TPMH (0x1u << 7) /**< \brief (SECUMOD_WKPR) High Temperature Monitor Protection */
#define SECUMOD_WKPR_VDDBUL (0x1u << 10) /**< \brief (SECUMOD_WKPR) Low VDDBU Voltage Monitor Protection */
#define SECUMOD_WKPR_VDDBUH (0x1u << 11) /**< \brief (SECUMOD_WKPR) High VDDBU Voltage Monitor Protection */
#define SECUMOD_WKPR_DET0 (0x1u << 16) /**< \brief (SECUMOD_WKPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_WKPR_DET1 (0x1u << 17) /**< \brief (SECUMOD_WKPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_WKPR_DET2 (0x1u << 18) /**< \brief (SECUMOD_WKPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_WKPR_DET3 (0x1u << 19) /**< \brief (SECUMOD_WKPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_WKPR_DET4 (0x1u << 20) /**< \brief (SECUMOD_WKPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_WKPR_DET5 (0x1u << 21) /**< \brief (SECUMOD_WKPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_WKPR_DET6 (0x1u << 22) /**< \brief (SECUMOD_WKPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_WKPR_DET7 (0x1u << 23) /**< \brief (SECUMOD_WKPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_WKPR_DET8 (0x1u << 24) /**< \brief (SECUMOD_WKPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_WKPR_DET9 (0x1u << 25) /**< \brief (SECUMOD_WKPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_WKPR_DET10 (0x1u << 26) /**< \brief (SECUMOD_WKPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_WKPR_DET11 (0x1u << 27) /**< \brief (SECUMOD_WKPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_WKPR_DET12 (0x1u << 28) /**< \brief (SECUMOD_WKPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_WKPR_DET13 (0x1u << 29) /**< \brief (SECUMOD_WKPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_WKPR_DET14 (0x1u << 30) /**< \brief (SECUMOD_WKPR) PIOBU Intrusion Detector Protection */
#define SECUMOD_WKPR_DET15 (0x1u << 31) /**< \brief (SECUMOD_WKPR) PIOBU Intrusion Detector Protection */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR Secure Fuse Controller */
/* ============================================================================= */
/** \addtogroup SAMA5D2_SFC Secure Fuse Controller */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief Sfc hardware registers */
typedef struct {
  __O  uint32_t SFC_KR;        /**< \brief (Sfc Offset: 0x00) SFC Key Register */
  __IO uint32_t SFC_MR;        /**< \brief (Sfc Offset: 0X04) SFC Mode Register */
  __I  uint32_t Reserved1[2];
  __IO uint32_t SFC_IER;       /**< \brief (Sfc Offset: 0x10) SFC Interrupt Enable Register */
  __IO uint32_t SFC_IDR;       /**< \brief (Sfc Offset: 0x14) SFC Interrupt Disable Register */
  __I  uint32_t SFC_IMR;       /**< \brief (Sfc Offset: 0x18) SFC Interrupt Mask Register */
  __I  uint32_t SFC_SR;        /**< \brief (Sfc Offset: 0x1C) SFC Status Register */
  __IO uint32_t SFC_DR[24];    /**< \brief (Sfc Offset: 0x20) SFC Data Register */
  __I  uint32_t Reserved2[31];
  __I  uint32_t SFC_VERSION;   /**< \brief (Sfc Offset: 0xFC) Version Register */
} Sfc;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- SFC_KR : (SFC Offset: 0x00) SFC Key Register -------- */
#define SFC_KR_KEY_Pos 0
#define SFC_KR_KEY_Msk (0xffu << SFC_KR_KEY_Pos) /**< \brief (SFC_KR) Key Code */
#define SFC_KR_KEY(value) ((SFC_KR_KEY_Msk & ((value) << SFC_KR_KEY_Pos)))
/* -------- SFC_MR : (SFC Offset: 0X04) SFC Mode Register -------- */
#define SFC_MR_MSK (0x1u << 0) /**< \brief (SFC_MR) Mask Data Registers */
/* -------- SFC_IER : (SFC Offset: 0x10) SFC Interrupt Enable Register -------- */
#define SFC_IER_PGMC (0x1u << 0) /**< \brief (SFC_IER) Programming Sequence Completed Interrupt Enable */
#define SFC_IER_APLE (0x1u << 16) /**< \brief (SFC_IER) Atmel Programming Lock Error Interrupt Enable */
#define SFC_IER_ACE (0x1u << 17) /**< \brief (SFC_IER) Atmel Check Error Interrupt Enable */
/* -------- SFC_IDR : (SFC Offset: 0x14) SFC Interrupt Disable Register -------- */
#define SFC_IDR_PGMC (0x1u << 0) /**< \brief (SFC_IDR) Programming Sequence Completed Interrupt Disable */
#define SFC_IDR_APLE (0x1u << 16) /**< \brief (SFC_IDR) Atmel Programming Lock Error Interrupt Disable */
#define SFC_IDR_ACE (0x1u << 17) /**< \brief (SFC_IDR) Atmel Check Error Interrupt Disable */
/* -------- SFC_IMR : (SFC Offset: 0x18) SFC Interrupt Mask Register -------- */
#define SFC_IMR_PGMC (0x1u << 0) /**< \brief (SFC_IMR) Programming Sequence Completed Interrupt Mask */
#define SFC_IMR_APLE (0x1u << 16) /**< \brief (SFC_IMR) Atmel Programming Lock Error Interrupt Mask */
#define SFC_IMR_ACE (0x1u << 17) /**< \brief (SFC_IMR) Atmel Check Error Interrupt Mask */
/* -------- SFC_SR : (SFC Offset: 0x1C) SFC Status Register -------- */
#define SFC_SR_PGMC (0x1u << 0) /**< \brief (SFC_SR) Programming Sequence Completed */
#define SFC_SR_APLE (0x1u << 16) /**< \brief (SFC_SR) Atmel Programming Lock Error */
#define SFC_SR_ACE (0x1u << 17) /**< \brief (SFC_SR) Atmel Check Error */
/* -------- SFC_DR[24] : (SFC Offset: 0x20) SFC Data Register -------- */
#define SFC_DR_DATA_Pos 0
#define SFC_DR_DATA_Msk (0xffffffffu << SFC_DR_DATA_Pos) /**< \brief (SFC_DR[24]) Fuse Data */
#define SFC_DR_DATA(value) ((SFC_DR_DATA_Msk & ((value) << SFC_DR_DATA_Pos)))
/* -------- SFC_VERSION : (SFC Offset: 0xFC) Version Register -------- */
#define SFC_VERSION_VERSION_Pos 0
#define SFC_VERSION_VERSION_Msk (0xfffu << SFC_VERSION_VERSION_Pos) /**< \brief (SFC_VERSION) Hardware Module Version */
#define SFC_VERSION_MFN_Pos 16
#define SFC_VERSION_MFN_Msk (0x7u << SFC_VERSION_MFN_Pos) /**< \brief (SFC_VERSION) Metal Fix Number */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR Special Function Registers */
/* ============================================================================= */
/** \addtogroup SAMA5D2_SFR Special Function Registers */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief Sfr hardware registers */
typedef struct {
  __IO uint32_t SFR_EMA;        /**< \brief (Sfr Offset: 0x00) Memory Margin Adjustment Register */
  __IO uint32_t SFR_DDRCFG;     /**< \brief (Sfr Offset: 0x04) DDR Configuration Register */
  __I  uint32_t Reserved1[2];
  __IO uint32_t SFR_OHCIICR;    /**< \brief (Sfr Offset: 0x10) OHCI Interrupt Configuration Register */
  __I  uint32_t SFR_OHCIISR;    /**< \brief (Sfr Offset: 0x14) OHCI Interrupt Status Register */
  __I  uint32_t Reserved2[1];
  __IO uint32_t SFR_CORTEX;     /**< \brief (Sfr Offset: 0x1C) Cortex Configuration Register */
  __IO uint32_t SFR_AHB;        /**< \brief (Sfr Offset: 0x20) AHB Configuration Register */
  __IO uint32_t SFR_BRIDGE;     /**< \brief (Sfr Offset: 0x24) Bridge Configuration Register */
  __IO uint32_t SFR_SECURE;     /**< \brief (Sfr Offset: 0x28) Security Configuration Register */
  __I  uint32_t Reserved3[1];
  __IO uint32_t SFR_UTMICKTRIM; /**< \brief (Sfr Offset: 0x30) UTMI Clock Trimming Register */
  __IO uint32_t SFR_UTMIHSTRIM; /**< \brief (Sfr Offset: 0x34) UTMI High Speed Trimming Register */
  __IO uint32_t SFR_UTMIFSTRIM; /**< \brief (Sfr Offset: 0x38) UTMI Full Speed Trimming Register */
  __IO uint32_t SFR_UTMISWAP;   /**< \brief (Sfr Offset: 0x3C) UTMI DP/DM Pin Swapping Register */
  __IO uint32_t SFR_EBICFG;     /**< \brief (Sfr Offset: 0x40) EBI Configuration Register */
  __IO uint32_t SFR_ANACFG;     /**< \brief (Sfr Offset: 0x44) Analog Configuration Register */
  __IO uint32_t SFR_CAN;        /**< \brief (Sfr Offset: 0x48) CAN memories address based Register */
  __I  uint32_t SFR_SN0;        /**< \brief (Sfr Offset: 0x4C) Serial Number 0 Register */
  __I  uint32_t SFR_SN1;        /**< \brief (Sfr Offset: 0x50) Seriel Number 1 Register */
  __IO uint32_t SFR_AICREDIR;   /**< \brief (Sfr Offset: 0x54) AIC interrupt Redirection Register */
  __IO uint32_t SFR_L2CC_HRAMC; /**< \brief (Sfr Offset: 0x58) L2CC_HRAMC1 */
  __IO uint32_t SFR_RM0;        /**< \brief (Sfr Offset: 0x5C) ReadMargin0 Register */
  __IO uint32_t SFR_RM1;        /**< \brief (Sfr Offset: 0x60) ReadMargin1 Register */
  __IO uint32_t SFR_RM2;        /**< \brief (Sfr Offset: 0x64) ReadMargin2 Register */
  __IO uint32_t SFR_RM3;        /**< \brief (Sfr Offset: 0x68) ReadMargin3 Register */
  __IO uint32_t SFR_RM4;        /**< \brief (Sfr Offset: 0x6C) ReadMargin4 Register */
  __IO uint32_t SFR_RM5;        /**< \brief (Sfr Offset: 0x70) ReadMargin5 Register */
  __IO uint32_t SFR_RM6;        /**< \brief (Sfr Offset: 0x74) ReadMargin6 Register */
  __IO uint32_t SFR_RM7;        /**< \brief (Sfr Offset: 0x78) ReadMargin7 Register */
  __I  uint32_t Reserved4[5];
  __IO uint32_t SFR_I2SCLKSEL;  /**< \brief (Sfr Offset: 0x90) I2S Register */
} Sfr;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- SFR_EMA : (SFR Offset: 0x00) Memory Margin Adjustment Register -------- */
#define SFR_EMA_RD_RAM_F_Pos 0
#define SFR_EMA_RD_RAM_F_Msk (0x3u << SFR_EMA_RD_RAM_F_Pos) /**< \brief (SFR_EMA) Value of Single Port RAM (FAST option) READ Margin Adjustment */
#define SFR_EMA_RD_RAM_F(value) ((SFR_EMA_RD_RAM_F_Msk & ((value) << SFR_EMA_RD_RAM_F_Pos)))
#define SFR_EMA_WR_RAM_F_Pos 4
#define SFR_EMA_WR_RAM_F_Msk (0x7u << SFR_EMA_WR_RAM_F_Pos) /**< \brief (SFR_EMA) Value of Single Port RAM (FAST option) WRITE Margin Adjustment */
#define SFR_EMA_WR_RAM_F(value) ((SFR_EMA_WR_RAM_F_Msk & ((value) << SFR_EMA_WR_RAM_F_Pos)))
#define SFR_EMA_RD_RAM_S_Pos 8
#define SFR_EMA_RD_RAM_S_Msk (0x3u << SFR_EMA_RD_RAM_S_Pos) /**< \brief (SFR_EMA) Value of Single Port RAM (SMALL option) READ Margin Adjustment */
#define SFR_EMA_RD_RAM_S(value) ((SFR_EMA_RD_RAM_S_Msk & ((value) << SFR_EMA_RD_RAM_S_Pos)))
#define SFR_EMA_WR_RAM_S_Pos 12
#define SFR_EMA_WR_RAM_S_Msk (0x7u << SFR_EMA_WR_RAM_S_Pos) /**< \brief (SFR_EMA) Value of Single Port RAM (SMALL option) WRITE Margin Adjustment */
#define SFR_EMA_WR_RAM_S(value) ((SFR_EMA_WR_RAM_S_Msk & ((value) << SFR_EMA_WR_RAM_S_Pos)))
#define SFR_EMA_ARM_TURBO (0x1u << 16) /**< \brief (SFR_EMA) Turbo Mode for High Speed Operation */
#define SFR_EMA_ARM_TSEL_Pos 17
#define SFR_EMA_ARM_TSEL_Msk (0x3u << SFR_EMA_ARM_TSEL_Pos) /**< \brief (SFR_EMA) Timing Selection Input */
#define SFR_EMA_ARM_TSEL(value) ((SFR_EMA_ARM_TSEL_Msk & ((value) << SFR_EMA_ARM_TSEL_Pos)))
#define SFR_EMA_ARM_RTSEL (0x1u << 19) /**< \brief (SFR_EMA) Read Timing Select For Testing */
/* -------- SFR_DDRCFG : (SFR Offset: 0x04) DDR Configuration Register -------- */
#define SFR_DDRCFG_CLKDELAY (0x1u << 8) /**< \brief (SFR_DDRCFG) DDR Clocks Delay */
#define   SFR_DDRCFG_CLKDELAY_HARD (0x0u << 8) /**< \brief (SFR_DDRCFG) DDR clocks delay controlled by hardware. */
#define   SFR_DDRCFG_CLKDELAY_SOFT (0x1u << 8) /**< \brief (SFR_DDRCFG) DDR clocks delay controlled by software. */
#define SFR_DDRCFG_FDQIEN (0x1u << 16) /**< \brief (SFR_DDRCFG) Force DDR_DQ Input Buffer Always On */
#define SFR_DDRCFG_FDQSIEN (0x1u << 17) /**< \brief (SFR_DDRCFG) Force DDR_DQS Input Buffer Always On */
/* -------- SFR_OHCIICR : (SFR Offset: 0x10) OHCI Interrupt Configuration Register -------- */
#define SFR_OHCIICR_RES0 (0x1u << 0) /**< \brief (SFR_OHCIICR) USB PORTx RESET */
#define SFR_OHCIICR_RES1 (0x1u << 1) /**< \brief (SFR_OHCIICR) USB PORTx RESET */
#define SFR_OHCIICR_RES2 (0x1u << 2) /**< \brief (SFR_OHCIICR) USB PORTx RESET */
#define SFR_OHCIICR_ARIE (0x1u << 4) /**< \brief (SFR_OHCIICR) OHCI Asynchronous Resume Interrupt Enable */
#define SFR_OHCIICR_APPSTART (0x1u << 5) /**< \brief (SFR_OHCIICR) Reserved */
#define SFR_OHCIICR_SUSPEND_A (0x1u << 8) /**< \brief (SFR_OHCIICR) USB PORT A */
#define SFR_OHCIICR_SUSPEND_B (0x1u << 9) /**< \brief (SFR_OHCIICR)  */
#define SFR_OHCIICR_SUSPEND_C (0x1u << 10) /**< \brief (SFR_OHCIICR) USB PORT C */
#define SFR_OHCIICR_UDPPUDIS (0x1u << 23) /**< \brief (SFR_OHCIICR) USB DEVICE PULL-UP DISABLE */
#define SFR_OHCIICR_HSICSEL (0x1u << 27) /**< \brief (SFR_OHCIICR) USB HSIC SELECT */
/* -------- SFR_OHCIISR : (SFR Offset: 0x14) OHCI Interrupt Status Register -------- */
#define SFR_OHCIISR_RIS0 (0x1u << 0) /**< \brief (SFR_OHCIISR) OHCI Resume Interrupt Status Port 0 */
#define SFR_OHCIISR_RIS1 (0x1u << 1) /**< \brief (SFR_OHCIISR) OHCI Resume Interrupt Status Port 1 */
#define SFR_OHCIISR_RIS2 (0x1u << 2) /**< \brief (SFR_OHCIISR) OHCI Resume Interrupt Status Port 2 */
/* -------- SFR_CORTEX : (SFR Offset: 0x1C) Cortex Configuration Register -------- */
#define SFR_CORTEX_WFE (0x1u << 0) /**< \brief (SFR_CORTEX) Wait for Event Trigger */
/* -------- SFR_AHB : (SFR Offset: 0x20) AHB Configuration Register -------- */
#define SFR_AHB_PFETCH9 (0x1u << 9) /**< \brief (SFR_AHB) AHB MASTERx 9 Converter Prefetch */
#define   SFR_AHB_PFETCH9_INCR4 (0x0u << 9) /**< \brief (SFR_AHB) INCR undefined burst converted to burst of 4 beats. */
#define   SFR_AHB_PFETCH9_INCR8 (0x1u << 9) /**< \brief (SFR_AHB) INCR undefined burst converted to burst of 8 beats. */
#define SFR_AHB_PFETCH12 (0x1u << 12) /**< \brief (SFR_AHB) AHB MASTERx 12 Converter Prefetch */
#define   SFR_AHB_PFETCH12_INCR4 (0x0u << 12) /**< \brief (SFR_AHB) INCR undefined burst converted to burst of 4 beats. */
#define   SFR_AHB_PFETCH12_INCR8 (0x1u << 12) /**< \brief (SFR_AHB) INCR undefined burst converted to burst of 8 beats. */
#define SFR_AHB_DLBOPT9 (0x1u << 25) /**< \brief (SFR_AHB) AHB MASTERx 9 Converter Define Length Burst Optimization */
#define SFR_AHB_DLBOPT12 (0x1u << 28) /**< \brief (SFR_AHB) AHB MASTERx 12 Converter Define Length Burst Optimization */
/* -------- SFR_BRIDGE : (SFR Offset: 0x24) Bridge Configuration Register -------- */
#define SFR_BRIDGE_AXI2AHBSEL (0x1u << 8) /**< \brief (SFR_BRIDGE) AXI to AHB Bridge for DDR Controller Selection */
#define   SFR_BRIDGE_AXI2AHBSEL_SINGLE (0x0u << 8) /**< \brief (SFR_BRIDGE) Uses single port bridge. */
#define   SFR_BRIDGE_AXI2AHBSEL_DUAL (0x1u << 8) /**< \brief (SFR_BRIDGE) Uses dual port bridge. */
#define SFR_BRIDGE_CA5QWR (0x1u << 12) /**< \brief (SFR_BRIDGE) AXI to AHB 2Ports Bridge for DDR Controller Quick Write Response */
#define SFR_BRIDGE_CA5RESP (0x1u << 13) /**< \brief (SFR_BRIDGE) AXI to AHB 2Ports Bridge for DDR Controller ARREADY ASAP */
/* -------- SFR_SECURE : (SFR Offset: 0x28) Security Configuration Register -------- */
#define SFR_SECURE_ROM (0x1u << 0) /**< \brief (SFR_SECURE) Disable Access to ROM Code */
#define SFR_SECURE_FUSE (0x1u << 8) /**< \brief (SFR_SECURE) Disable Access to Fuse Controller */
/* -------- SFR_UTMICKTRIM : (SFR Offset: 0x30) UTMI Clock Trimming Register -------- */
#define SFR_UTMICKTRIM_FREQ_Pos 0
#define SFR_UTMICKTRIM_FREQ_Msk (0x3u << SFR_UTMICKTRIM_FREQ_Pos) /**< \brief (SFR_UTMICKTRIM) UTMI Reference Clock Frequency */
#define   SFR_UTMICKTRIM_FREQ_12 (0x0u << 0) /**< \brief (SFR_UTMICKTRIM) 12 MHz reference clock */
#define   SFR_UTMICKTRIM_FREQ_16 (0x1u << 0) /**< \brief (SFR_UTMICKTRIM) 16 MHz reference clock */
#define   SFR_UTMICKTRIM_FREQ_24 (0x2u << 0) /**< \brief (SFR_UTMICKTRIM) 24 MHz reference clock */
#define   SFR_UTMICKTRIM_FREQ_48 (0x3u << 0) /**< \brief (SFR_UTMICKTRIM) 48 MHz reference clock */
#define SFR_UTMICKTRIM_VBG_Pos 16
#define SFR_UTMICKTRIM_VBG_Msk (0xfu << SFR_UTMICKTRIM_VBG_Pos) /**< \brief (SFR_UTMICKTRIM) UTMI Band Gap Voltage Trimming */
#define SFR_UTMICKTRIM_VBG(value) ((SFR_UTMICKTRIM_VBG_Msk & ((value) << SFR_UTMICKTRIM_VBG_Pos)))
/* -------- SFR_UTMIHSTRIM : (SFR Offset: 0x34) UTMI High Speed Trimming Register -------- */
#define SFR_UTMIHSTRIM_SQUELCH_Pos 0
#define SFR_UTMIHSTRIM_SQUELCH_Msk (0x7u << SFR_UTMIHSTRIM_SQUELCH_Pos) /**< \brief (SFR_UTMIHSTRIM) UTMI HS SQUELCH Voltage Trimming */
#define SFR_UTMIHSTRIM_SQUELCH(value) ((SFR_UTMIHSTRIM_SQUELCH_Msk & ((value) << SFR_UTMIHSTRIM_SQUELCH_Pos)))
#define SFR_UTMIHSTRIM_DISC_Pos 4
#define SFR_UTMIHSTRIM_DISC_Msk (0x7u << SFR_UTMIHSTRIM_DISC_Pos) /**< \brief (SFR_UTMIHSTRIM) UTMI Disconnect Voltage Trimming */
#define SFR_UTMIHSTRIM_DISC(value) ((SFR_UTMIHSTRIM_DISC_Msk & ((value) << SFR_UTMIHSTRIM_DISC_Pos)))
#define SFR_UTMIHSTRIM_SLOPE0_Pos 8
#define SFR_UTMIHSTRIM_SLOPE0_Msk (0x7u << SFR_UTMIHSTRIM_SLOPE0_Pos) /**< \brief (SFR_UTMIHSTRIM) UTMI HS PORTx Transceiver Slope Trimming */
#define SFR_UTMIHSTRIM_SLOPE0(value) ((SFR_UTMIHSTRIM_SLOPE0_Msk & ((value) << SFR_UTMIHSTRIM_SLOPE0_Pos)))
#define SFR_UTMIHSTRIM_SLOPE1_Pos 12
#define SFR_UTMIHSTRIM_SLOPE1_Msk (0x7u << SFR_UTMIHSTRIM_SLOPE1_Pos) /**< \brief (SFR_UTMIHSTRIM) UTMI HS PORTx Transceiver Slope Trimming */
#define SFR_UTMIHSTRIM_SLOPE1(value) ((SFR_UTMIHSTRIM_SLOPE1_Msk & ((value) << SFR_UTMIHSTRIM_SLOPE1_Pos)))
#define SFR_UTMIHSTRIM_SLOPE2_Pos 16
#define SFR_UTMIHSTRIM_SLOPE2_Msk (0x7u << SFR_UTMIHSTRIM_SLOPE2_Pos) /**< \brief (SFR_UTMIHSTRIM) UTMI HS PORTx Transceiver Slope Trimming */
#define SFR_UTMIHSTRIM_SLOPE2(value) ((SFR_UTMIHSTRIM_SLOPE2_Msk & ((value) << SFR_UTMIHSTRIM_SLOPE2_Pos)))
/* -------- SFR_UTMIFSTRIM : (SFR Offset: 0x38) UTMI Full Speed Trimming Register -------- */
#define SFR_UTMIFSTRIM_RISE_Pos 0
#define SFR_UTMIFSTRIM_RISE_Msk (0x7u << SFR_UTMIFSTRIM_RISE_Pos) /**< \brief (SFR_UTMIFSTRIM) FS Transceiver Output Rising Slope Trimming */
#define SFR_UTMIFSTRIM_RISE(value) ((SFR_UTMIFSTRIM_RISE_Msk & ((value) << SFR_UTMIFSTRIM_RISE_Pos)))
#define SFR_UTMIFSTRIM_FALL_Pos 4
#define SFR_UTMIFSTRIM_FALL_Msk (0x7u << SFR_UTMIFSTRIM_FALL_Pos) /**< \brief (SFR_UTMIFSTRIM) FS Transceiver Output Falling Slope Trimming */
#define SFR_UTMIFSTRIM_FALL(value) ((SFR_UTMIFSTRIM_FALL_Msk & ((value) << SFR_UTMIFSTRIM_FALL_Pos)))
#define SFR_UTMIFSTRIM_XCVR_Pos 8
#define SFR_UTMIFSTRIM_XCVR_Msk (0x3u << SFR_UTMIFSTRIM_XCVR_Pos) /**< \brief (SFR_UTMIFSTRIM) FS Transceiver Crossover Voltage Trimming */
#define SFR_UTMIFSTRIM_XCVR(value) ((SFR_UTMIFSTRIM_XCVR_Msk & ((value) << SFR_UTMIFSTRIM_XCVR_Pos)))
#define SFR_UTMIFSTRIM_ZN_Pos 16
#define SFR_UTMIFSTRIM_ZN_Msk (0x7u << SFR_UTMIFSTRIM_ZN_Pos) /**< \brief (SFR_UTMIFSTRIM) FS Transceiver NMOS Impedance Trimming */
#define SFR_UTMIFSTRIM_ZN(value) ((SFR_UTMIFSTRIM_ZN_Msk & ((value) << SFR_UTMIFSTRIM_ZN_Pos)))
#define SFR_UTMIFSTRIM_ZP_Pos 20
#define SFR_UTMIFSTRIM_ZP_Msk (0x7u << SFR_UTMIFSTRIM_ZP_Pos) /**< \brief (SFR_UTMIFSTRIM) FS Transceiver PMOS Impedance Trimming */
#define SFR_UTMIFSTRIM_ZP(value) ((SFR_UTMIFSTRIM_ZP_Msk & ((value) << SFR_UTMIFSTRIM_ZP_Pos)))
/* -------- SFR_UTMISWAP : (SFR Offset: 0x3C) UTMI DP/DM Pin Swapping Register -------- */
#define SFR_UTMISWAP_PORT0 (0x1u << 0) /**< \brief (SFR_UTMISWAP) PORT 0 DP/DM Pin Swapping */
#define   SFR_UTMISWAP_PORT0_NORMAL (0x0u << 0) /**< \brief (SFR_UTMISWAP) DP/DM normal pinout. */
#define   SFR_UTMISWAP_PORT0_SWAPPED (0x1u << 0) /**< \brief (SFR_UTMISWAP) DP/DM swapped pinout. */
#define SFR_UTMISWAP_PORT1 (0x1u << 1) /**< \brief (SFR_UTMISWAP) PORT 1 DP/DM Pin Swapping */
#define   SFR_UTMISWAP_PORT1_NORMAL (0x0u << 1) /**< \brief (SFR_UTMISWAP) DP/DM normal pinout. */
#define   SFR_UTMISWAP_PORT1_SWAPPED (0x1u << 1) /**< \brief (SFR_UTMISWAP) DP/DM swapped pinout. */
#define SFR_UTMISWAP_PORT2 (0x1u << 2) /**< \brief (SFR_UTMISWAP) PORT 2 DP/DM Pin Swapping */
#define   SFR_UTMISWAP_PORT2_NORMAL (0x0u << 2) /**< \brief (SFR_UTMISWAP) DP/DM normal pinout. */
#define   SFR_UTMISWAP_PORT2_SWAPPED (0x1u << 2) /**< \brief (SFR_UTMISWAP) DP/DM swapped pinout. */
/* -------- SFR_EBICFG : (SFR Offset: 0x40) EBI Configuration Register -------- */
#define SFR_EBICFG_BMS (0x1u << 16) /**< \brief (SFR_EBICFG) BMS Sampled Value (Read Only) */
#define   SFR_EBICFG_BMS_ROM (0x0u << 16) /**< \brief (SFR_EBICFG) Boot on ROM. */
#define   SFR_EBICFG_BMS_EBI (0x1u << 16) /**< \brief (SFR_EBICFG) Boot on EBI. */
/* -------- SFR_ANACFG : (SFR Offset: 0x44) Analog Configuration Register -------- */
#define SFR_ANACFG_SM_DDR_EN (0x1u << 0) /**< \brief (SFR_ANACFG) DDR Supply Monitor Enable */
/* -------- SFR_CAN : (SFR Offset: 0x48) CAN memories address based Register -------- */
#define SFR_CAN_EXT_MEM_CAN0_ADDR_Pos 0
#define SFR_CAN_EXT_MEM_CAN0_ADDR_Msk (0xffffu << SFR_CAN_EXT_MEM_CAN0_ADDR_Pos) /**< \brief (SFR_CAN)  */
#define SFR_CAN_EXT_MEM_CAN0_ADDR(value) ((SFR_CAN_EXT_MEM_CAN0_ADDR_Msk & ((value) << SFR_CAN_EXT_MEM_CAN0_ADDR_Pos)))
#define SFR_CAN_EXT_MEM_CAN1_ADDR_Pos 16
#define SFR_CAN_EXT_MEM_CAN1_ADDR_Msk (0xffffu << SFR_CAN_EXT_MEM_CAN1_ADDR_Pos) /**< \brief (SFR_CAN)  */
#define SFR_CAN_EXT_MEM_CAN1_ADDR(value) ((SFR_CAN_EXT_MEM_CAN1_ADDR_Msk & ((value) << SFR_CAN_EXT_MEM_CAN1_ADDR_Pos)))
/* -------- SFR_SN0 : (SFR Offset: 0x4C) Serial Number 0 Register -------- */
#define SFR_SN0_SN0_Pos 0
#define SFR_SN0_SN0_Msk (0xffffffffu << SFR_SN0_SN0_Pos) /**< \brief (SFR_SN0) Serial Number 0 */
/* -------- SFR_SN1 : (SFR Offset: 0x50) Seriel Number 1 Register -------- */
#define SFR_SN1_SN1_Pos 0
#define SFR_SN1_SN1_Msk (0xffffffffu << SFR_SN1_SN1_Pos) /**< \brief (SFR_SN1) Serial Number 1 */
/* -------- SFR_AICREDIR : (SFR Offset: 0x54) AIC interrupt Redirection Register -------- */
#define SFR_AICREDIR_NSAIC (0x1u << 0) /**< \brief (SFR_AICREDIR) Interrupt redirection to Non-Secure AIC */
#define SFR_AICREDIR_AICREDIRKEY_Pos 1
#define SFR_AICREDIR_AICREDIRKEY_Msk (0x7fffffffu << SFR_AICREDIR_AICREDIRKEY_Pos) /**< \brief (SFR_AICREDIR) Unlock Key */
#define SFR_AICREDIR_AICREDIRKEY(value) ((SFR_AICREDIR_AICREDIRKEY_Msk & ((value) << SFR_AICREDIR_AICREDIRKEY_Pos)))
/* -------- SFR_L2CC_HRAMC : (SFR Offset: 0x58) L2CC_HRAMC1 -------- */
#define SFR_L2CC_HRAMC_SRAM_SEL (0x1u << 0) /**< \brief (SFR_L2CC_HRAMC)  */
/* -------- SFR_RM0 : (SFR Offset: 0x5C) ReadMargin0 Register -------- */
#define SFR_RM0_RM0_Pos 0
#define SFR_RM0_RM0_Msk (0xfu << SFR_RM0_RM0_Pos) /**< \brief (SFR_RM0) READMARGIN value: i_ahb_sram - 128K - sadslspkb1p16384x32m16b2w1cp0d0t0 */
#define SFR_RM0_RM0(value) ((SFR_RM0_RM0_Msk & ((value) << SFR_RM0_RM0_Pos)))
#define SFR_RM0_RME0 (0x1u << 4) /**< \brief (SFR_RM0) READMARGIN Enable: */
#define SFR_RM0_RM1_Pos 5
#define SFR_RM0_RM1_Msk (0xfu << SFR_RM0_RM1_Pos) /**< \brief (SFR_RM0) READMARGIN value: i_rom8192x64_sys - 64Kb system ROM - ulp1mrom8192x64cm16 */
#define SFR_RM0_RM1(value) ((SFR_RM0_RM1_Msk & ((value) << SFR_RM0_RM1_Pos)))
#define SFR_RM0_RME1 (0x1u << 9) /**< \brief (SFR_RM0) READMARGIN Enable: */
#define SFR_RM0_RM2_Pos 10
#define SFR_RM0_RM2_Msk (0xfu << SFR_RM0_RM2_Pos) /**< \brief (SFR_RM0) READMARGIN value: 0 i_rom12288x64_ecc - 96Kb system ROM - ulp1mrom12288x64cm16 */
#define SFR_RM0_RM2(value) ((SFR_RM0_RM2_Msk & ((value) << SFR_RM0_RM2_Pos)))
#define SFR_RM0_RME2 (0x1u << 14) /**< \brief (SFR_RM0) READMARGIN Enable: */
#define SFR_RM0_RM3_Pos 15
#define SFR_RM0_RM3_Msk (0xfu << SFR_RM0_RM3_Pos) /**< \brief (SFR_RM0) READMARGIN value: i_non_erase_securam - 1Kb RAM - sadslspkb1p128x72m4b1w1cp0d0t0 */
#define SFR_RM0_RM3(value) ((SFR_RM0_RM3_Msk & ((value) << SFR_RM0_RM3_Pos)))
#define SFR_RM0_RME3 (0x1u << 19) /**< \brief (SFR_RM0) READMARGIN Enable: */
#define SFR_RM0_RM4_Pos 20
#define SFR_RM0_RM4_Msk (0xfu << SFR_RM0_RM4_Pos) /**< \brief (SFR_RM0) READMARGIN value: i_erased_securam - 4Kb RAM - sadslspkb1p512x72m4b1w1cp0d0t0 */
#define SFR_RM0_RM4(value) ((SFR_RM0_RM4_Msk & ((value) << SFR_RM0_RM4_Pos)))
#define SFR_RM0_RME4 (0x1u << 24) /**< \brief (SFR_RM0) READMARGIN Enable: */
#define SFR_RM0_RM5_Pos 25
#define SFR_RM0_RM5_Msk (0xfu << SFR_RM0_RM5_Pos) /**< \brief (SFR_RM0) i_daram_bist - UHPHS - adrlspkb1p512x64cm4sw1 */
#define SFR_RM0_RM5(value) ((SFR_RM0_RM5_Msk & ((value) << SFR_RM0_RM5_Pos)))
#define SFR_RM0_RME5 (0x1u << 29) /**< \brief (SFR_RM0) READMARGIN Enable: */
/* -------- SFR_RM1 : (SFR Offset: 0x60) ReadMargin1 Register -------- */
#define SFR_RM1_RM6_Pos 0
#define SFR_RM1_RM6_Msk (0xfu << SFR_RM1_RM6_Pos) /**< \brief (SFR_RM1) READMARGIN value:  i_descram_bist - UHPHS - adrlspkb1p68x32cm2sw1 */
#define SFR_RM1_RM6(value) ((SFR_RM1_RM6_Msk & ((value) << SFR_RM1_RM6_Pos)))
#define SFR_RM1_RME6 (0x1u << 4) /**< \brief (SFR_RM1) READMARGIN Enable: */
#define SFR_RM1_RM7_Pos 5
#define SFR_RM1_RM7_Msk (0xfu << SFR_RM1_RM7_Pos) /**< \brief (SFR_RM1) READMARGIN value: i_sram0 ,i_sram1 - HSMC5 - sadslspkb1p1152x32m8b1w1cp0d0t0 */
#define SFR_RM1_RM7(value) ((SFR_RM1_RM7_Msk & ((value) << SFR_RM1_RM7_Pos)))
#define SFR_RM1_RME7 (0x1u << 9) /**< \brief (SFR_RM1) READMARGIN Enable: */
#define SFR_RM1_RM8_Pos 10
#define SFR_RM1_RM8_Msk (0xfu << SFR_RM1_RM8_Pos) /**< \brief (SFR_RM1) READMARGIN value: i_lcd_heo_cue0_sram,i_lcd_heo_cue1_sram - HLCD5 - */
#define SFR_RM1_RM8(value) ((SFR_RM1_RM8_Msk & ((value) << SFR_RM1_RM8_Pos)))
#define SFR_RM1_RME8 (0x1u << 14) /**< \brief (SFR_RM1) READMARGIN Enable: */
#define SFR_RM1_RM9_Pos 15
#define SFR_RM1_RM9_Msk (0xfu << SFR_RM1_RM9_Pos) /**< \brief (SFR_RM1) READMARGIN value: i_lcd_heo_scaler0/1/2_sram -  sadslspkb1p1024x16m4b1w1cp0d0t0 - HLCDC5 */
#define SFR_RM1_RM9(value) ((SFR_RM1_RM9_Msk & ((value) << SFR_RM1_RM9_Pos)))
#define SFR_RM1_RME9 (0x1u << 19) /**< \brief (SFR_RM1) READMARGIN Enable: */
#define SFR_RM1_RM10_Pos 20
#define SFR_RM1_RM10_Msk (0xfu << SFR_RM1_RM10_Pos) /**< \brief (SFR_RM1) READMARGIN value: i_lcd_heo_sram,i_lcd_base_sram,i_lcd_ovr1_sram,i_lcd_ovr2_sram - HLCD5 - asdrlspkb2p16x64cm1sw1 */
#define SFR_RM1_RM10(value) ((SFR_RM1_RM10_Msk & ((value) << SFR_RM1_RM10_Pos)))
#define SFR_RM1_RME10 (0x1u << 24) /**< \brief (SFR_RM1) READMARGIN Enable: */
#define SFR_RM1_RM11_Pos 25
#define SFR_RM1_RM11_Msk (0xfu << SFR_RM1_RM11_Pos) /**< \brief (SFR_RM1) READMARGIN value: i_hxisi_cfa_sram 115 - CFA SPRAM - sadslspkb1p2624x12m16b1w1cp0d0t0 */
#define SFR_RM1_RM11(value) ((SFR_RM1_RM11_Msk & ((value) << SFR_RM1_RM11_Pos)))
#define SFR_RM1_RME11 (0x1u << 29) /**< \brief (SFR_RM1) READMARGIN Enable: */
/* -------- SFR_RM2 : (SFR Offset: 0x64) ReadMargin2 Register -------- */
#define SFR_RM2_RM12_Pos 0
#define SFR_RM2_RM12_Msk (0xfu << SFR_RM2_RM12_Pos) /**< \brief (SFR_RM2) READMARGIN value: i_hxisi_sub420_sram - SUB420 - sadslspkb1p1312x20m8b1w1cp0d0t0 */
#define SFR_RM2_RM12(value) ((SFR_RM2_RM12_Msk & ((value) << SFR_RM2_RM12_Pos)))
#define SFR_RM2_RME12 (0x1u << 4) /**< \brief (SFR_RM2) READMARGIN Enable: */
#define SFR_RM2_RM13_Pos 5
#define SFR_RM2_RM13_Msk (0xfu << SFR_RM2_RM13_Pos) /**< \brief (SFR_RM2) READMARGIN value: u_data_ram_lsb0/1,  u_data_ram_msb0/1 - Data L2 Cache RAMS - sram4kx6 */
#define SFR_RM2_RM13(value) ((SFR_RM2_RM13_Msk & ((value) << SFR_RM2_RM13_Pos)))
#define SFR_RM2_RME13 (0x1u << 9) /**< \brief (SFR_RM2) READMARGIN Enable: */
#define SFR_RM2_RM14_Pos 10
#define SFR_RM2_RM14_Msk (0x1fu << SFR_RM2_RM14_Pos) /**< \brief (SFR_RM2) READMARGIN value: u_tag_ram0-7 - Tag L2 Cache RAMs - sram512x21 */
#define SFR_RM2_RM14(value) ((SFR_RM2_RM14_Msk & ((value) << SFR_RM2_RM14_Pos)))
#define SFR_RM2_RM15_Pos 15
#define SFR_RM2_RM15_Msk (0xfu << SFR_RM2_RM15_Pos) /**< \brief (SFR_RM2) READMARGIN value:  u_ddata_bank0-3 - Data Cache TLB RAMs - hsspsram_2048x32 */
#define SFR_RM2_RM15(value) ((SFR_RM2_RM15_Msk & ((value) << SFR_RM2_RM15_Pos)))
#define SFR_RM2_RME15 (0x1u << 19) /**< \brief (SFR_RM2) READMARGIN Enable: */
#define SFR_RM2_RM16_Pos 20
#define SFR_RM2_RM16_Msk (0xfu << SFR_RM2_RM16_Pos) /**< \brief (SFR_RM2) READMARGIN value: u_idata_bank0-1  u_idata_bank0-1 - Instruction Cache TLB RAMs -hsspsram_2048x72 */
#define SFR_RM2_RM16(value) ((SFR_RM2_RM16_Msk & ((value) << SFR_RM2_RM16_Pos)))
#define SFR_RM2_RME16 (0x1u << 24) /**< \brief (SFR_RM2) READMARGIN Enable: */
#define SFR_RM2_RM17_Pos 25
#define SFR_RM2_RM17_Msk (0xfu << SFR_RM2_RM17_Pos) /**< \brief (SFR_RM2) READMARGIN value:  u_ddirty_ram - Data Cache Dirty bits RAM - hs1prf_256x12 */
#define SFR_RM2_RM17(value) ((SFR_RM2_RM17_Msk & ((value) << SFR_RM2_RM17_Pos)))
#define SFR_RM2_RME17 (0x1u << 29) /**< \brief (SFR_RM2) READMARGIN Enable: */
/* -------- SFR_RM3 : (SFR Offset: 0x68) ReadMargin3 Register -------- */
#define SFR_RM3_RM18_Pos 0
#define SFR_RM3_RM18_Msk (0xfu << SFR_RM3_RM18_Pos) /**< \brief (SFR_RM3) READMARGIN value:  u_itag_ram0/1_up,  u_itag_ram0/1_down - Instruction Cache Data RAMs - hs1prf_256x24 */
#define SFR_RM3_RM18(value) ((SFR_RM3_RM18_Msk & ((value) << SFR_RM3_RM18_Pos)))
#define SFR_RM3_RME18 (0x1u << 4) /**< \brief (SFR_RM3) READMARGIN Enable: */
#define SFR_RM3_RM19_Pos 5
#define SFR_RM3_RM19_Msk (0xfu << SFR_RM3_RM19_Pos) /**< \brief (SFR_RM3) RM31: READMARGIN valuie:  u_dtag_bank0-3 - Data Cache Tag RAMs - hs1prf_256x26 */
#define SFR_RM3_RM19(value) ((SFR_RM3_RM19_Msk & ((value) << SFR_RM3_RM19_Pos)))
#define SFR_RM3_RME19 (0x1u << 9) /**< \brief (SFR_RM3) READMARGIN Enable: */
#define SFR_RM3_RM20_Pos 10
#define SFR_RM3_RM20_Msk (0xfu << SFR_RM3_RM20_Pos) /**< \brief (SFR_RM3) u_tlb_bank0-1 - Cache TLB RAMs - hs1prf_64x63 */
#define SFR_RM3_RM20(value) ((SFR_RM3_RM20_Msk & ((value) << SFR_RM3_RM20_Pos)))
#define SFR_RM3_RME20 (0x1u << 14) /**< \brief (SFR_RM3) READMARGIN Enable: */
#define SFR_RM3_RM21_Pos 15
#define SFR_RM3_RM21_Msk (0xfu << SFR_RM3_RM21_Pos) /**< \brief (SFR_RM3) READMARGIN value: U_PICORAM - AVR16 CODE/DATA RAM - ptc_sadslspkb1p4096x32m8b1w1cp0d0t0 */
#define SFR_RM3_RM21(value) ((SFR_RM3_RM21_Msk & ((value) << SFR_RM3_RM21_Pos)))
#define SFR_RM3_RME21 (0x1u << 19) /**< \brief (SFR_RM3) READMARGIN Enable: */
#define SFR_RM3_RM22_Pos 20
#define SFR_RM3_RM22_Msk (0xfu << SFR_RM3_RM22_Pos) /**< \brief (SFR_RM3) READMARGIN value: U_MAILBOX - MAILBOX RAM - ptc_sadslspkb1p1024x32m4b1w1cp0d0t0 */
#define SFR_RM3_RM22(value) ((SFR_RM3_RM22_Msk & ((value) << SFR_RM3_RM22_Pos)))
#define SFR_RM3_RME22 (0x1u << 24) /**< \brief (SFR_RM3) READMARGIN Enable: */
/* -------- SFR_RM4 : (SFR Offset: 0x6C) ReadMargin4 Register -------- */
#define SFR_RM4_RMA_DP0_Pos 0
#define SFR_RM4_RMA_DP0_Msk (0xfu << SFR_RM4_RMA_DP0_Pos) /**< \brief (SFR_RM4) READMARGIN value: i_hsdhc0/i_hsdhc1 - HSDHC0/HSDHC0 buffer - sadslspkb2p128x64m4b1w1cp0d00 */
#define SFR_RM4_RMA_DP0(value) ((SFR_RM4_RMA_DP0_Msk & ((value) << SFR_RM4_RMA_DP0_Pos)))
#define SFR_RM4_RMB_DP0_Pos 4
#define SFR_RM4_RMB_DP0_Msk (0xfu << SFR_RM4_RMB_DP0_Pos) /**< \brief (SFR_RM4) READMARGIN value: i_hsdhc0/i_hsdhc1 - HSDHC0/HSDHC0 buffer - sadslspkb2p128x64m4b1w1cp0d00 */
#define SFR_RM4_RMB_DP0(value) ((SFR_RM4_RMB_DP0_Msk & ((value) << SFR_RM4_RMB_DP0_Pos)))
#define SFR_RM4_RME_DP0 (0x1u << 8) /**< \brief (SFR_RM4) READMARGIN Enable: */
/* -------- SFR_RM5 : (SFR Offset: 0x70) ReadMargin5 Register -------- */
#define SFR_RM5_RMA_DP1_Pos 0
#define SFR_RM5_RMA_DP1_Msk (0xfu << SFR_RM5_RMA_DP1_Pos) /**< \brief (SFR_RM5) READMARGIN value: i_dpram2kx32  - UDPHS / GMACTX DPRAM  - sadslspkb2p2048x32m8b1w1cp0d0t0 */
#define SFR_RM5_RMA_DP1(value) ((SFR_RM5_RMA_DP1_Msk & ((value) << SFR_RM5_RMA_DP1_Pos)))
#define SFR_RM5_RMB_DP1_Pos 4
#define SFR_RM5_RMB_DP1_Msk (0xfu << SFR_RM5_RMB_DP1_Pos) /**< \brief (SFR_RM5) READMARGIN value: i_dpram2kx32  - UDPHS / GMACTX DPRAM  - sadslspkb2p2048x32m8b1w1cp0d0t0 */
#define SFR_RM5_RMB_DP1(value) ((SFR_RM5_RMB_DP1_Msk & ((value) << SFR_RM5_RMB_DP1_Pos)))
#define SFR_RM5_RME_DP1 (0x1u << 8) /**< \brief (SFR_RM5) READMARGIN Enable: */
#define SFR_RM5_RMA_DP2_Pos 9
#define SFR_RM5_RMA_DP2_Msk (0xfu << SFR_RM5_RMA_DP2_Pos) /**< \brief (SFR_RM5) READMARGIN value: i_txdpram - GMAC RX DPRAM - sadslspkb2p1024x32m8b1w1cp0d0t0 */
#define SFR_RM5_RMA_DP2(value) ((SFR_RM5_RMA_DP2_Msk & ((value) << SFR_RM5_RMA_DP2_Pos)))
#define SFR_RM5_RMB_DP2_Pos 13
#define SFR_RM5_RMB_DP2_Msk (0x7u << SFR_RM5_RMB_DP2_Pos) /**< \brief (SFR_RM5) READMARGIN value: i_txdpram - GMAC RX DPRAM - sadslspkb2p1024x32m8b1w1cp0d0t0 */
#define SFR_RM5_RMB_DP2(value) ((SFR_RM5_RMB_DP2_Msk & ((value) << SFR_RM5_RMB_DP2_Pos)))
#define SFR_RM5_RME_DP2 (0x1u << 17) /**< \brief (SFR_RM5) READMARGIN Enable: */
#define SFR_RM5_RMA_DP3_Pos 18
#define SFR_RM5_RMA_DP3_Msk (0xfu << SFR_RM5_RMA_DP3_Pos) /**< \brief (SFR_RM5) READMARGIN value: i_dpram528x64 - HXDMA0/HXDMA1 - sadslspkb2p528x64m4b1w1cp0d0t0 */
#define SFR_RM5_RMA_DP3(value) ((SFR_RM5_RMA_DP3_Msk & ((value) << SFR_RM5_RMA_DP3_Pos)))
#define SFR_RM5_RMB_DP3_Pos 22
#define SFR_RM5_RMB_DP3_Msk (0xfu << SFR_RM5_RMB_DP3_Pos) /**< \brief (SFR_RM5) READMARGIN value: i_dpram528x64 - HXDMA0/HXDMA1 - sadslspkb2p528x64m4b1w1cp0d0t0 */
#define SFR_RM5_RMB_DP3(value) ((SFR_RM5_RMB_DP3_Msk & ((value) << SFR_RM5_RMB_DP3_Pos)))
#define SFR_RM5_RME_DP3 (0x1u << 26) /**< \brief (SFR_RM5) READMARGIN Enable: */
/* -------- SFR_RM6 : (SFR Offset: 0x74) ReadMargin6 Register -------- */
#define SFR_RM6_RMB_DP4_Pos 0
#define SFR_RM6_RMB_DP4_Msk (0xfu << SFR_RM6_RMB_DP4_Pos) /**< \brief (SFR_RM6) READMARGIN value: i_lcd_base_rf2p,i_lcd_ovr1_rf2p,i_lcd_ovr1_rf2p, i_lcd_heo_rf2p, i_lcd_heop1_rf2p , i_lcd_heop2_rf2p - HLCD5 - asdrlspkb2p32x67cm1sw1 */
#define SFR_RM6_RMB_DP4(value) ((SFR_RM6_RMB_DP4_Msk & ((value) << SFR_RM6_RMB_DP4_Pos)))
#define SFR_RM6_RME_DP4 (0x1u << 8) /**< \brief (SFR_RM6) READMARGIN Enable: */
#define SFR_RM6_RMB_DP5_Pos 9
#define SFR_RM6_RMB_DP5_Msk (0xfu << SFR_RM6_RMB_DP5_Pos) /**< \brief (SFR_RM6) READMARGIN value:  i_lcd_output_fifo - HCLCD5 - asdrlspkb2p1024x24cm4sw1 */
#define SFR_RM6_RMB_DP5(value) ((SFR_RM6_RMB_DP5_Msk & ((value) << SFR_RM6_RMB_DP5_Pos)))
#define SFR_RM6_RME_DP5 (0x1u << 17) /**< \brief (SFR_RM6) READMARGIN Enable: */
#define SFR_RM6_RMB_DP6_Pos 18
#define SFR_RM6_RMB_DP6_Msk (0xfu << SFR_RM6_RMB_DP6_Pos) /**< \brief (SFR_RM6) READMARGIN value: i_lcd_pp_fifo - HLCD5 - asdrlspkb2p16x64cm1w1 */
#define SFR_RM6_RMB_DP6(value) ((SFR_RM6_RMB_DP6_Msk & ((value) << SFR_RM6_RMB_DP6_Pos)))
#define SFR_RM6_RME_DP6 (0x1u << 26) /**< \brief (SFR_RM6) READMARGIN Enable: */
/* -------- SFR_RM7 : (SFR Offset: 0x78) ReadMargin7 Register -------- */
#define SFR_RM7_RMB_DP9_Pos 0
#define SFR_RM7_RMB_DP9_Msk (0xfu << SFR_RM7_RMB_DP9_Pos) /**< \brief (SFR_RM7) i_hxisi_his_rf2p - HIS DPRAM - asdrlspkb2p512x20cm4sw1 */
#define SFR_RM7_RMB_DP9(value) ((SFR_RM7_RMB_DP9_Msk & ((value) << SFR_RM7_RMB_DP9_Pos)))
#define SFR_RM7_RME_DP9 (0x1u << 8) /**< \brief (SFR_RM7) READMARGIN Enable: */
#define SFR_RM7_RMB_DP10_Pos 9
#define SFR_RM7_RMB_DP10_Msk (0xfu << SFR_RM7_RMB_DP10_Pos) /**< \brief (SFR_RM7) READMARGIN value: i_hxisi_cfa_sram - sadslspkb1p2624x12m16b1w1cp0d0t0  - CFA(color Filter Array) Single Port RAM */
#define SFR_RM7_RMB_DP10(value) ((SFR_RM7_RMB_DP10_Msk & ((value) << SFR_RM7_RMB_DP10_Pos)))
#define SFR_RM7_RME_DP10 (0x1u << 17) /**< \brief (SFR_RM7) READMARGIN Enable: */
#define SFR_RM7_RMB_DP11_Pos 18
#define SFR_RM7_RMB_DP11_Msk (0xfu << SFR_RM7_RMB_DP11_Pos) /**< \brief (SFR_RM7) READMARGIN value: i_hxisi_mif_rf2p - MIF (Master InterFace) Dual Port register files - asdrlspkb2p34x64cm1sw1 */
#define SFR_RM7_RMB_DP11(value) ((SFR_RM7_RMB_DP11_Msk & ((value) << SFR_RM7_RMB_DP11_Pos)))
#define SFR_RM7_RME_DP11 (0x1u << 26) /**< \brief (SFR_RM7) READMARGIN Enable: */
/* -------- SFR_I2SCLKSEL : (SFR Offset: 0x90) I2S Register -------- */
#define SFR_I2SCLKSEL_CLKSEL0 (0x1u << 0) /**< \brief (SFR_I2SCLKSEL)  */
#define SFR_I2SCLKSEL_CLKSEL1 (0x1u << 1) /**< \brief (SFR_I2SCLKSEL)  */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR Secure Hash Algorithm */
/* ============================================================================= */
/** \addtogroup SAMA5D2_SHA Secure Hash Algorithm */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief Sha hardware registers */
typedef struct {
  __O  uint32_t SHA_CR;          /**< \brief (Sha Offset: 0x00) Control Register */
  __IO uint32_t SHA_MR;          /**< \brief (Sha Offset: 0x04) Mode Register */
  __I  uint32_t Reserved1[2];
  __O  uint32_t SHA_IER;         /**< \brief (Sha Offset: 0x10) Interrupt Enable Register */
  __O  uint32_t SHA_IDR;         /**< \brief (Sha Offset: 0x14) Interrupt Disable Register */
  __I  uint32_t SHA_IMR;         /**< \brief (Sha Offset: 0x18) Interrupt Mask Register */
  __I  uint32_t SHA_ISR;         /**< \brief (Sha Offset: 0x1C) Interrupt Status Register */
  __I  uint32_t Reserved2[8];
  __O  uint32_t SHA_IDATAR[16];  /**< \brief (Sha Offset: 0x40) Input Data 0 Register */
  __IO uint32_t SHA_IODATAR[16]; /**< \brief (Sha Offset: 0x80) Input/Output Data 0 Register */
  __I  uint32_t Reserved3[11];
  __I  uint32_t SHA_ADDRSIZE;    /**< \brief (Sha Offset: 0xEC) Address Size Register */
  __I  uint32_t SHA_IPNAME[2];   /**< \brief (Sha Offset: 0xF0) IP Name 1 Register */
  __I  uint32_t SHA_FEATURES;    /**< \brief (Sha Offset: 0xF8) IP FEATURES Register */
  __I  uint32_t SHA_VERSION;     /**< \brief (Sha Offset: 0xFC) Version Register */
} Sha;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- SHA_CR : (SHA Offset: 0x00) Control Register -------- */
#define SHA_CR_START (0x1u << 0) /**< \brief (SHA_CR) Start Processing */
#define SHA_CR_FIRST (0x1u << 4) /**< \brief (SHA_CR) First Block of a Message */
#define SHA_CR_SWRST (0x1u << 8) /**< \brief (SHA_CR) Software Reset */
/* -------- SHA_MR : (SHA Offset: 0x04) Mode Register -------- */
#define SHA_MR_SMOD_Pos 0
#define SHA_MR_SMOD_Msk (0x3u << SHA_MR_SMOD_Pos) /**< \brief (SHA_MR) Start Mode */
#define   SHA_MR_SMOD_MANUAL_START (0x0u << 0) /**< \brief (SHA_MR) Manual Mode */
#define   SHA_MR_SMOD_AUTO_START (0x1u << 0) /**< \brief (SHA_MR) Auto Mode */
#define   SHA_MR_SMOD_IDATAR0_START (0x2u << 0) /**< \brief (SHA_MR) SHA_IDATAR0 access only Auto Mode */
#define SHA_MR_PROCDLY (0x1u << 4) /**< \brief (SHA_MR) Processing Delay */
#define   SHA_MR_PROCDLY_SHORTEST (0x0u << 4) /**< \brief (SHA_MR) SHA processing runtime is the shortest one */
#define   SHA_MR_PROCDLY_LONGEST (0x1u << 4) /**< \brief (SHA_MR) SHA processing runtime is the longest one */
#define SHA_MR_ALGO_Pos 8
#define SHA_MR_ALGO_Msk (0x7u << SHA_MR_ALGO_Pos) /**< \brief (SHA_MR) SHA Algorithm */
#define   SHA_MR_ALGO_SHA1 (0x0u << 8) /**< \brief (SHA_MR) SHA1 algorithm processed */
#define   SHA_MR_ALGO_SHA256 (0x1u << 8) /**< \brief (SHA_MR) SHA256 algorithm processed */
#define   SHA_MR_ALGO_SHA384 (0x2u << 8) /**< \brief (SHA_MR) SHA384 algorithm processed */
#define   SHA_MR_ALGO_SHA512 (0x3u << 8) /**< \brief (SHA_MR) SHA512 algorithm processed */
#define   SHA_MR_ALGO_SHA224 (0x4u << 8) /**< \brief (SHA_MR) SHA224 algorithm processed */
#define SHA_MR_DUALBUFF (0x1u << 16) /**< \brief (SHA_MR) Dual Input Buffer */
#define   SHA_MR_DUALBUFF_INACTIVE (0x0u << 16) /**< \brief (SHA_MR) SHA_IDATARx and SHA_IODATARx cannot be written during processing of previous block. */
#define   SHA_MR_DUALBUFF_ACTIVE (0x1u << 16) /**< \brief (SHA_MR) SHA_IDATARx and SHA_IODATARx can be written during processing of previous block when SMOD = 0x2. It speeds up the overall runtime of large files. */
/* -------- SHA_IER : (SHA Offset: 0x10) Interrupt Enable Register -------- */
#define SHA_IER_DATRDY (0x1u << 0) /**< \brief (SHA_IER) Data Ready Interrupt Enable */
#define SHA_IER_URAD (0x1u << 8) /**< \brief (SHA_IER) Unspecified Register Access Detection Interrupt Enable */
/* -------- SHA_IDR : (SHA Offset: 0x14) Interrupt Disable Register -------- */
#define SHA_IDR_DATRDY (0x1u << 0) /**< \brief (SHA_IDR) Data Ready Interrupt Disable */
#define SHA_IDR_URAD (0x1u << 8) /**< \brief (SHA_IDR) Unspecified Register Access Detection Interrupt Disable */
/* -------- SHA_IMR : (SHA Offset: 0x18) Interrupt Mask Register -------- */
#define SHA_IMR_DATRDY (0x1u << 0) /**< \brief (SHA_IMR) Data Ready Interrupt Mask */
#define SHA_IMR_URAD (0x1u << 8) /**< \brief (SHA_IMR) Unspecified Register Access Detection Interrupt Mask */
/* -------- SHA_ISR : (SHA Offset: 0x1C) Interrupt Status Register -------- */
#define SHA_ISR_DATRDY (0x1u << 0) /**< \brief (SHA_ISR) Data Ready */
#define SHA_ISR_URAD (0x1u << 8) /**< \brief (SHA_ISR) Unspecified Register Access Detection Status */
#define SHA_ISR_URAT_Pos 12
#define SHA_ISR_URAT_Msk (0x7u << SHA_ISR_URAT_Pos) /**< \brief (SHA_ISR) Unspecified Register Access Type */
/* -------- SHA_IDATAR[16] : (SHA Offset: 0x40) Input Data 0 Register -------- */
#define SHA_IDATAR_IDATA_Pos 0
#define SHA_IDATAR_IDATA_Msk (0xffffffffu << SHA_IDATAR_IDATA_Pos) /**< \brief (SHA_IDATAR[16]) Input Data */
#define SHA_IDATAR_IDATA(value) ((SHA_IDATAR_IDATA_Msk & ((value) << SHA_IDATAR_IDATA_Pos)))
/* -------- SHA_IODATAR[16] : (SHA Offset: 0x80) Input/Output Data 0 Register -------- */
#define SHA_IODATAR_IODATA_Pos 0
#define SHA_IODATAR_IODATA_Msk (0xffffffffu << SHA_IODATAR_IODATA_Pos) /**< \brief (SHA_IODATAR[16]) Input/Output Data */
#define SHA_IODATAR_IODATA(value) ((SHA_IODATAR_IODATA_Msk & ((value) << SHA_IODATAR_IODATA_Pos)))
/* -------- SHA_ADDRSIZE : (SHA Offset: 0xEC) Address Size Register -------- */
#define SHA_ADDRSIZE_ADDRSIZE_Pos 0
#define SHA_ADDRSIZE_ADDRSIZE_Msk (0xffffu << SHA_ADDRSIZE_ADDRSIZE_Pos) /**< \brief (SHA_ADDRSIZE) Peripheral Bus Address Size */
/* -------- SHA_IPNAME[2] : (SHA Offset: 0xF0) IP Name 1 Register -------- */
#define SHA_IPNAME_IPNAME_Pos 0
#define SHA_IPNAME_IPNAME_Msk (0xffffffffu << SHA_IPNAME_IPNAME_Pos) /**< \brief (SHA_IPNAME[2]) IP Name in ASCII Format */
/* -------- SHA_VERSION : (SHA Offset: 0xFC) Version Register -------- */
#define SHA_VERSION_VERSION_Pos 0
#define SHA_VERSION_VERSION_Msk (0xfffu << SHA_VERSION_VERSION_Pos) /**< \brief (SHA_VERSION) Version of the Hardware Module */
#define SHA_VERSION_MFN_Pos 16
#define SHA_VERSION_MFN_Msk (0x7u << SHA_VERSION_MFN_Pos) /**< \brief (SHA_VERSION) Metal Fix Number */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR Shutdown Controller */
/* ============================================================================= */
/** \addtogroup SAMA5D2_SHDWC Shutdown Controller */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief Shdwc hardware registers */
typedef struct {
  __O  uint32_t SHDW_CR;   /**< \brief (Shdwc Offset: 0x00) Shutdown Control Register */
  __IO uint32_t SHDW_MR;   /**< \brief (Shdwc Offset: 0x04) Shutdown Mode Register */
  __I  uint32_t SHDW_SR;   /**< \brief (Shdwc Offset: 0x08) Shutdown Status Register */
  __IO uint32_t SHDW_WUIR; /**< \brief (Shdwc Offset: 0x0C) Shutdown Wake-up Inputs Register */
} Shdwc;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- SHDW_CR : (SHDWC Offset: 0x00) Shutdown Control Register -------- */
#define SHDW_CR_SHDW (0x1u << 0) /**< \brief (SHDW_CR) Shutdown Command */
#define SHDW_CR_KEY_Pos 24
#define SHDW_CR_KEY_Msk (0xffu << SHDW_CR_KEY_Pos) /**< \brief (SHDW_CR) Password */
#define   SHDW_CR_KEY_PASSWD (0xA5u << 24) /**< \brief (SHDW_CR) Writing any other value in this field aborts the write operation. */
/* -------- SHDW_MR : (SHDWC Offset: 0x04) Shutdown Mode Register -------- */
#define SHDW_MR_LPDBCEN0 (0x1u << 0) /**< \brief (SHDW_MR) Low-Power Debouncer Enable WKUP0/TMP0 */
#define   SHDW_MR_LPDBCEN0_NOT_ENABLE (0x0u << 0) /**< \brief (SHDW_MR) The WKUP0/TMP0 input pin is not connected to the low-power debouncer. */
#define   SHDW_MR_LPDBCEN0_ENABLE (0x1u << 0) /**< \brief (SHDW_MR) The WKUP0/TMP0 input pin is connected to the low-power debouncer and can force a system wake-up. */
#define SHDW_MR_LPDBCEN1 (0x1u << 1) /**< \brief (SHDW_MR) Low-Power Debouncer Enable WKUP10/TMP1 */
#define   SHDW_MR_LPDBCEN1_NOT_ENABLE (0x0u << 1) /**< \brief (SHDW_MR) The WKUP10/TMP1 input pin is not connected to the low-power debouncer. */
#define   SHDW_MR_LPDBCEN1_ENABLE (0x1u << 1) /**< \brief (SHDW_MR) The WKUP10/TMP1 input pin is connected to the low-power debouncer and can force a system wake-up. */
#define SHDW_MR_LPDBC_Pos 8
#define SHDW_MR_LPDBC_Msk (0x7u << SHDW_MR_LPDBC_Pos) /**< \brief (SHDW_MR) Low Power Debouncer Period */
#define   SHDW_MR_LPDBC_DISABLE (0x0u << 8) /**< \brief (SHDW_MR) Disable the low-power debouncers. */
#define   SHDW_MR_LPDBC_2_RTCOUT0 (0x1u << 8) /**< \brief (SHDW_MR) WKUP0/1/TMP0/1 in active state for at least 2 RTCOUT0 periods */
#define   SHDW_MR_LPDBC_3_RTCOUT0 (0x2u << 8) /**< \brief (SHDW_MR) WKUP0/1/TMP0/1 in active state for at least 3 RTCOUT0 periods */
#define   SHDW_MR_LPDBC_4_RTCOUT0 (0x3u << 8) /**< \brief (SHDW_MR) WKUP0/1/TMP0/1 in active state for at least 4 RTCOUT0 periods */
#define   SHDW_MR_LPDBC_5_RTCOUT0 (0x4u << 8) /**< \brief (SHDW_MR) WKUP0/1/TMP0/1 in active state for at least 5 RTCOUT0 periods */
#define   SHDW_MR_LPDBC_6_RTCOUT0 (0x5u << 8) /**< \brief (SHDW_MR) WKUP0/1/TMP0/1 in active state for at least 6 RTCOUT0 periods */
#define   SHDW_MR_LPDBC_7_RTCOUT0 (0x6u << 8) /**< \brief (SHDW_MR) WKUP0/1/TMP0/1 in active state for at least 7 RTCOUT0 periods */
#define   SHDW_MR_LPDBC_8_RTCOUT0 (0x7u << 8) /**< \brief (SHDW_MR) WKUP0/1/TMP0/1 in active state for at least 8 RTCOUT0 periods */
#define SHDW_MR_RTCWKEN (0x1u << 17) /**< \brief (SHDW_MR) Real-time Clock Wake-up Enable */
#define SHDW_MR_WKUPDBC_Pos 24
#define SHDW_MR_WKUPDBC_Msk (0x7u << SHDW_MR_WKUPDBC_Pos) /**< \brief (SHDW_MR) Wake-up Inputs Debouncer Period */
#define   SHDW_MR_WKUPDBC_IMMEDIATE (0x0u << 24) /**< \brief (SHDW_MR) Immediate, no debouncing, detected active at least on one Slow Clock edge. */
#define   SHDW_MR_WKUPDBC_3_SCLK (0x1u << 24) /**< \brief (SHDW_MR) WKUPx shall be in its active state for at least 3 SLCK periods */
#define   SHDW_MR_WKUPDBC_32_SCLK (0x2u << 24) /**< \brief (SHDW_MR) WKUPx shall be in its active state for at least 32 SLCK periods */
#define   SHDW_MR_WKUPDBC_512_SCLK (0x3u << 24) /**< \brief (SHDW_MR) WKUPx shall be in its active state for at least 512 SLCK periods */
#define   SHDW_MR_WKUPDBC_4096_SCLK (0x4u << 24) /**< \brief (SHDW_MR) WKUPx shall be in its active state for at least 4,096 SLCK periods */
#define   SHDW_MR_WKUPDBC_32768_SCLK (0x5u << 24) /**< \brief (SHDW_MR) WKUPx shall be in its active state for at least 32,768 SLCK periods */
/* -------- SHDW_SR : (SHDWC Offset: 0x08) Shutdown Status Register -------- */
#define SHDW_SR_WKUPS (0x1u << 0) /**< \brief (SHDW_SR) WKUP Wake-up Status */
#define   SHDW_SR_WKUPS_NO (0x0u << 0) /**< \brief (SHDW_SR) No wake-up due to the assertion of the WKUP pins has occurred since the last read of SUPC_SR. */
#define   SHDW_SR_WKUPS_PRESENT (0x1u << 0) /**< \brief (SHDW_SR) At least one wake-up due to the assertion of the WKUP pins has occurred since the last read of SUPC_SR. */
#define SHDW_SR_RTCWK (0x1u << 5) /**< \brief (SHDW_SR) Real-time Clock Wake-up */
#define SHDW_SR_ACCWK (0x1u << 6) /**< \brief (SHDW_SR) Analog Comparator Wake-up */
#define SHDW_SR_RXLPWK (0x1u << 7) /**< \brief (SHDW_SR) Debug Unit Wake-up */
#define SHDW_SR_WKUPIS0 (0x1u << 16) /**< \brief (SHDW_SR) WKUP Input Status 0 */
#define   SHDW_SR_WKUPIS0_DIS (0x0u << 16) /**< \brief (SHDW_SR) The corresponding wake-up input is disabled, or was inactive at the time the debouncer triggered a wake-up event. */
#define   SHDW_SR_WKUPIS0_EN (0x1u << 16) /**< \brief (SHDW_SR) The corresponding wake-up input was active at the time the debouncer triggered a wake-up event. */
#define SHDW_SR_WKUPIS1 (0x1u << 17) /**< \brief (SHDW_SR) WKUP Input Status 1 */
#define   SHDW_SR_WKUPIS1_DIS (0x0u << 17) /**< \brief (SHDW_SR) The corresponding wake-up input is disabled, or was inactive at the time the debouncer triggered a wake-up event. */
#define   SHDW_SR_WKUPIS1_EN (0x1u << 17) /**< \brief (SHDW_SR) The corresponding wake-up input was active at the time the debouncer triggered a wake-up event. */
#define SHDW_SR_WKUPIS2 (0x1u << 18) /**< \brief (SHDW_SR) WKUP Input Status 2 */
#define   SHDW_SR_WKUPIS2_DIS (0x0u << 18) /**< \brief (SHDW_SR) The corresponding wake-up input is disabled, or was inactive at the time the debouncer triggered a wake-up event. */
#define   SHDW_SR_WKUPIS2_EN (0x1u << 18) /**< \brief (SHDW_SR) The corresponding wake-up input was active at the time the debouncer triggered a wake-up event. */
#define SHDW_SR_WKUPIS3 (0x1u << 19) /**< \brief (SHDW_SR) WKUP Input Status 3 */
#define   SHDW_SR_WKUPIS3_DIS (0x0u << 19) /**< \brief (SHDW_SR) The corresponding wake-up input is disabled, or was inactive at the time the debouncer triggered a wake-up event. */
#define   SHDW_SR_WKUPIS3_EN (0x1u << 19) /**< \brief (SHDW_SR) The corresponding wake-up input was active at the time the debouncer triggered a wake-up event. */
#define SHDW_SR_WKUPIS4 (0x1u << 20) /**< \brief (SHDW_SR) WKUP Input Status 4 */
#define   SHDW_SR_WKUPIS4_DIS (0x0u << 20) /**< \brief (SHDW_SR) The corresponding wake-up input is disabled, or was inactive at the time the debouncer triggered a wake-up event. */
#define   SHDW_SR_WKUPIS4_EN (0x1u << 20) /**< \brief (SHDW_SR) The corresponding wake-up input was active at the time the debouncer triggered a wake-up event. */
#define SHDW_SR_WKUPIS5 (0x1u << 21) /**< \brief (SHDW_SR) WKUP Input Status 5 */
#define   SHDW_SR_WKUPIS5_DIS (0x0u << 21) /**< \brief (SHDW_SR) The corresponding wake-up input is disabled, or was inactive at the time the debouncer triggered a wake-up event. */
#define   SHDW_SR_WKUPIS5_EN (0x1u << 21) /**< \brief (SHDW_SR) The corresponding wake-up input was active at the time the debouncer triggered a wake-up event. */
#define SHDW_SR_WKUPIS6 (0x1u << 22) /**< \brief (SHDW_SR) WKUP Input Status 6 */
#define   SHDW_SR_WKUPIS6_DIS (0x0u << 22) /**< \brief (SHDW_SR) The corresponding wake-up input is disabled, or was inactive at the time the debouncer triggered a wake-up event. */
#define   SHDW_SR_WKUPIS6_EN (0x1u << 22) /**< \brief (SHDW_SR) The corresponding wake-up input was active at the time the debouncer triggered a wake-up event. */
#define SHDW_SR_WKUPIS7 (0x1u << 23) /**< \brief (SHDW_SR) WKUP Input Status 7 */
#define   SHDW_SR_WKUPIS7_DIS (0x0u << 23) /**< \brief (SHDW_SR) The corresponding wake-up input is disabled, or was inactive at the time the debouncer triggered a wake-up event. */
#define   SHDW_SR_WKUPIS7_EN (0x1u << 23) /**< \brief (SHDW_SR) The corresponding wake-up input was active at the time the debouncer triggered a wake-up event. */
#define SHDW_SR_WKUPIS8 (0x1u << 24) /**< \brief (SHDW_SR) WKUP Input Status 8 */
#define   SHDW_SR_WKUPIS8_DIS (0x0u << 24) /**< \brief (SHDW_SR) The corresponding wake-up input is disabled, or was inactive at the time the debouncer triggered a wake-up event. */
#define   SHDW_SR_WKUPIS8_EN (0x1u << 24) /**< \brief (SHDW_SR) The corresponding wake-up input was active at the time the debouncer triggered a wake-up event. */
#define SHDW_SR_WKUPIS9 (0x1u << 25) /**< \brief (SHDW_SR) WKUP Input Status 9 */
#define   SHDW_SR_WKUPIS9_DIS (0x0u << 25) /**< \brief (SHDW_SR) The corresponding wake-up input is disabled, or was inactive at the time the debouncer triggered a wake-up event. */
#define   SHDW_SR_WKUPIS9_EN (0x1u << 25) /**< \brief (SHDW_SR) The corresponding wake-up input was active at the time the debouncer triggered a wake-up event. */
#define SHDW_SR_WKUPIS10 (0x1u << 26) /**< \brief (SHDW_SR) WKUP Input Status 10 */
#define   SHDW_SR_WKUPIS10_DIS (0x0u << 26) /**< \brief (SHDW_SR) The corresponding wake-up input is disabled, or was inactive at the time the debouncer triggered a wake-up event. */
#define   SHDW_SR_WKUPIS10_EN (0x1u << 26) /**< \brief (SHDW_SR) The corresponding wake-up input was active at the time the debouncer triggered a wake-up event. */
#define SHDW_SR_WKUPIS11 (0x1u << 27) /**< \brief (SHDW_SR) WKUP Input Status 11 */
#define   SHDW_SR_WKUPIS11_DIS (0x0u << 27) /**< \brief (SHDW_SR) The corresponding wake-up input is disabled, or was inactive at the time the debouncer triggered a wake-up event. */
#define   SHDW_SR_WKUPIS11_EN (0x1u << 27) /**< \brief (SHDW_SR) The corresponding wake-up input was active at the time the debouncer triggered a wake-up event. */
#define SHDW_SR_WKUPIS12 (0x1u << 28) /**< \brief (SHDW_SR) WKUP Input Status 12 */
#define   SHDW_SR_WKUPIS12_DIS (0x0u << 28) /**< \brief (SHDW_SR) The corresponding wake-up input is disabled, or was inactive at the time the debouncer triggered a wake-up event. */
#define   SHDW_SR_WKUPIS12_EN (0x1u << 28) /**< \brief (SHDW_SR) The corresponding wake-up input was active at the time the debouncer triggered a wake-up event. */
#define SHDW_SR_WKUPIS13 (0x1u << 29) /**< \brief (SHDW_SR) WKUP Input Status 13 */
#define   SHDW_SR_WKUPIS13_DIS (0x0u << 29) /**< \brief (SHDW_SR) The corresponding wake-up input is disabled, or was inactive at the time the debouncer triggered a wake-up event. */
#define   SHDW_SR_WKUPIS13_EN (0x1u << 29) /**< \brief (SHDW_SR) The corresponding wake-up input was active at the time the debouncer triggered a wake-up event. */
#define SHDW_SR_WKUPIS14 (0x1u << 30) /**< \brief (SHDW_SR) WKUP Input Status 14 */
#define   SHDW_SR_WKUPIS14_DIS (0x0u << 30) /**< \brief (SHDW_SR) The corresponding wake-up input is disabled, or was inactive at the time the debouncer triggered a wake-up event. */
#define   SHDW_SR_WKUPIS14_EN (0x1u << 30) /**< \brief (SHDW_SR) The corresponding wake-up input was active at the time the debouncer triggered a wake-up event. */
#define SHDW_SR_WKUPIS15 (0x1u << 31) /**< \brief (SHDW_SR) WKUP Input Status 15 */
#define   SHDW_SR_WKUPIS15_DIS (0x0u << 31) /**< \brief (SHDW_SR) The corresponding wake-up input is disabled, or was inactive at the time the debouncer triggered a wake-up event. */
#define   SHDW_SR_WKUPIS15_EN (0x1u << 31) /**< \brief (SHDW_SR) The corresponding wake-up input was active at the time the debouncer triggered a wake-up event. */
/* -------- SHDW_WUIR : (SHDWC Offset: 0x0C) Shutdown Wake-up Inputs Register -------- */
#define SHDW_WUIR_WKUPEN0 (0x1u << 0) /**< \brief (SHDW_WUIR) Wake-up Input Enable 0 */
#define   SHDW_WUIR_WKUPEN0_DISABLE (0x0u << 0) /**< \brief (SHDW_WUIR) The corresponding wake-up input has no wake-up effect. */
#define   SHDW_WUIR_WKUPEN0_ENABLE (0x1u << 0) /**< \brief (SHDW_WUIR) The corresponding wake-up input forces the wake-up of the core power supply. */
#define SHDW_WUIR_WKUPEN1 (0x1u << 1) /**< \brief (SHDW_WUIR) Wake-up Input Enable 1 */
#define   SHDW_WUIR_WKUPEN1_DISABLE (0x0u << 1) /**< \brief (SHDW_WUIR) The corresponding wake-up input has no wake-up effect. */
#define   SHDW_WUIR_WKUPEN1_ENABLE (0x1u << 1) /**< \brief (SHDW_WUIR) The corresponding wake-up input forces the wake-up of the core power supply. */
#define SHDW_WUIR_WKUPEN2 (0x1u << 2) /**< \brief (SHDW_WUIR) Wake-up Input Enable 2 */
#define   SHDW_WUIR_WKUPEN2_DISABLE (0x0u << 2) /**< \brief (SHDW_WUIR) The corresponding wake-up input has no wake-up effect. */
#define   SHDW_WUIR_WKUPEN2_ENABLE (0x1u << 2) /**< \brief (SHDW_WUIR) The corresponding wake-up input forces the wake-up of the core power supply. */
#define SHDW_WUIR_WKUPEN3 (0x1u << 3) /**< \brief (SHDW_WUIR) Wake-up Input Enable 3 */
#define   SHDW_WUIR_WKUPEN3_DISABLE (0x0u << 3) /**< \brief (SHDW_WUIR) The corresponding wake-up input has no wake-up effect. */
#define   SHDW_WUIR_WKUPEN3_ENABLE (0x1u << 3) /**< \brief (SHDW_WUIR) The corresponding wake-up input forces the wake-up of the core power supply. */
#define SHDW_WUIR_WKUPEN4 (0x1u << 4) /**< \brief (SHDW_WUIR) Wake-up Input Enable 4 */
#define   SHDW_WUIR_WKUPEN4_DISABLE (0x0u << 4) /**< \brief (SHDW_WUIR) The corresponding wake-up input has no wake-up effect. */
#define   SHDW_WUIR_WKUPEN4_ENABLE (0x1u << 4) /**< \brief (SHDW_WUIR) The corresponding wake-up input forces the wake-up of the core power supply. */
#define SHDW_WUIR_WKUPEN5 (0x1u << 5) /**< \brief (SHDW_WUIR) Wake-up Input Enable 5 */
#define   SHDW_WUIR_WKUPEN5_DISABLE (0x0u << 5) /**< \brief (SHDW_WUIR) The corresponding wake-up input has no wake-up effect. */
#define   SHDW_WUIR_WKUPEN5_ENABLE (0x1u << 5) /**< \brief (SHDW_WUIR) The corresponding wake-up input forces the wake-up of the core power supply. */
#define SHDW_WUIR_WKUPEN6 (0x1u << 6) /**< \brief (SHDW_WUIR) Wake-up Input Enable 6 */
#define   SHDW_WUIR_WKUPEN6_DISABLE (0x0u << 6) /**< \brief (SHDW_WUIR) The corresponding wake-up input has no wake-up effect. */
#define   SHDW_WUIR_WKUPEN6_ENABLE (0x1u << 6) /**< \brief (SHDW_WUIR) The corresponding wake-up input forces the wake-up of the core power supply. */
#define SHDW_WUIR_WKUPEN7 (0x1u << 7) /**< \brief (SHDW_WUIR) Wake-up Input Enable 7 */
#define   SHDW_WUIR_WKUPEN7_DISABLE (0x0u << 7) /**< \brief (SHDW_WUIR) The corresponding wake-up input has no wake-up effect. */
#define   SHDW_WUIR_WKUPEN7_ENABLE (0x1u << 7) /**< \brief (SHDW_WUIR) The corresponding wake-up input forces the wake-up of the core power supply. */
#define SHDW_WUIR_WKUPEN8 (0x1u << 8) /**< \brief (SHDW_WUIR) Wake-up Input Enable 8 */
#define   SHDW_WUIR_WKUPEN8_DISABLE (0x0u << 8) /**< \brief (SHDW_WUIR) The corresponding wake-up input has no wake-up effect. */
#define   SHDW_WUIR_WKUPEN8_ENABLE (0x1u << 8) /**< \brief (SHDW_WUIR) The corresponding wake-up input forces the wake-up of the core power supply. */
#define SHDW_WUIR_WKUPEN9 (0x1u << 9) /**< \brief (SHDW_WUIR) Wake-up Input Enable 9 */
#define   SHDW_WUIR_WKUPEN9_DISABLE (0x0u << 9) /**< \brief (SHDW_WUIR) The corresponding wake-up input has no wake-up effect. */
#define   SHDW_WUIR_WKUPEN9_ENABLE (0x1u << 9) /**< \brief (SHDW_WUIR) The corresponding wake-up input forces the wake-up of the core power supply. */
#define SHDW_WUIR_WKUPEN10 (0x1u << 10) /**< \brief (SHDW_WUIR) Wake-up Input Enable 10 */
#define   SHDW_WUIR_WKUPEN10_DISABLE (0x0u << 10) /**< \brief (SHDW_WUIR) The corresponding wake-up input has no wake-up effect. */
#define   SHDW_WUIR_WKUPEN10_ENABLE (0x1u << 10) /**< \brief (SHDW_WUIR) The corresponding wake-up input forces the wake-up of the core power supply. */
#define SHDW_WUIR_WKUPEN11 (0x1u << 11) /**< \brief (SHDW_WUIR) Wake-up Input Enable 11 */
#define   SHDW_WUIR_WKUPEN11_DISABLE (0x0u << 11) /**< \brief (SHDW_WUIR) The corresponding wake-up input has no wake-up effect. */
#define   SHDW_WUIR_WKUPEN11_ENABLE (0x1u << 11) /**< \brief (SHDW_WUIR) The corresponding wake-up input forces the wake-up of the core power supply. */
#define SHDW_WUIR_WKUPEN12 (0x1u << 12) /**< \brief (SHDW_WUIR) Wake-up Input Enable 12 */
#define   SHDW_WUIR_WKUPEN12_DISABLE (0x0u << 12) /**< \brief (SHDW_WUIR) The corresponding wake-up input has no wake-up effect. */
#define   SHDW_WUIR_WKUPEN12_ENABLE (0x1u << 12) /**< \brief (SHDW_WUIR) The corresponding wake-up input forces the wake-up of the core power supply. */
#define SHDW_WUIR_WKUPEN13 (0x1u << 13) /**< \brief (SHDW_WUIR) Wake-up Input Enable 13 */
#define   SHDW_WUIR_WKUPEN13_DISABLE (0x0u << 13) /**< \brief (SHDW_WUIR) The corresponding wake-up input has no wake-up effect. */
#define   SHDW_WUIR_WKUPEN13_ENABLE (0x1u << 13) /**< \brief (SHDW_WUIR) The corresponding wake-up input forces the wake-up of the core power supply. */
#define SHDW_WUIR_WKUPEN14 (0x1u << 14) /**< \brief (SHDW_WUIR) Wake-up Input Enable 14 */
#define   SHDW_WUIR_WKUPEN14_DISABLE (0x0u << 14) /**< \brief (SHDW_WUIR) The corresponding wake-up input has no wake-up effect. */
#define   SHDW_WUIR_WKUPEN14_ENABLE (0x1u << 14) /**< \brief (SHDW_WUIR) The corresponding wake-up input forces the wake-up of the core power supply. */
#define SHDW_WUIR_WKUPEN15 (0x1u << 15) /**< \brief (SHDW_WUIR) Wake-up Input Enable 15 */
#define   SHDW_WUIR_WKUPEN15_DISABLE (0x0u << 15) /**< \brief (SHDW_WUIR) The corresponding wake-up input has no wake-up effect. */
#define   SHDW_WUIR_WKUPEN15_ENABLE (0x1u << 15) /**< \brief (SHDW_WUIR) The corresponding wake-up input forces the wake-up of the core power supply. */
#define SHDW_WUIR_WKUPT0 (0x1u << 16) /**< \brief (SHDW_WUIR) Wake-up Input Type 0 */
#define   SHDW_WUIR_WKUPT0_HIGH_TO_LOW (0x0u << 16) /**< \brief (SHDW_WUIR) A high-to-low level transitiona low-level for a period defined by WKUPDBC on the corresponding wake-up input forces the wake-up of the core power supply. */
#define   SHDW_WUIR_WKUPT0_LOW_TO_HIGH (0x1u << 16) /**< \brief (SHDW_WUIR) A low-to-high level transitiona high-level for a period defined by WKUPDBC on the corresponding wake-up input forces the wake-up of the core power supply. */
#define SHDW_WUIR_WKUPT1 (0x1u << 17) /**< \brief (SHDW_WUIR) Wake-up Input Type 1 */
#define   SHDW_WUIR_WKUPT1_HIGH_TO_LOW (0x0u << 17) /**< \brief (SHDW_WUIR) A high-to-low level transitiona low-level for a period defined by WKUPDBC on the corresponding wake-up input forces the wake-up of the core power supply. */
#define   SHDW_WUIR_WKUPT1_LOW_TO_HIGH (0x1u << 17) /**< \brief (SHDW_WUIR) A low-to-high level transitiona high-level for a period defined by WKUPDBC on the corresponding wake-up input forces the wake-up of the core power supply. */
#define SHDW_WUIR_WKUPT2 (0x1u << 18) /**< \brief (SHDW_WUIR) Wake-up Input Type 2 */
#define   SHDW_WUIR_WKUPT2_HIGH_TO_LOW (0x0u << 18) /**< \brief (SHDW_WUIR) A high-to-low level transitiona low-level for a period defined by WKUPDBC on the corresponding wake-up input forces the wake-up of the core power supply. */
#define   SHDW_WUIR_WKUPT2_LOW_TO_HIGH (0x1u << 18) /**< \brief (SHDW_WUIR) A low-to-high level transitiona high-level for a period defined by WKUPDBC on the corresponding wake-up input forces the wake-up of the core power supply. */
#define SHDW_WUIR_WKUPT3 (0x1u << 19) /**< \brief (SHDW_WUIR) Wake-up Input Type 3 */
#define   SHDW_WUIR_WKUPT3_HIGH_TO_LOW (0x0u << 19) /**< \brief (SHDW_WUIR) A high-to-low level transitiona low-level for a period defined by WKUPDBC on the corresponding wake-up input forces the wake-up of the core power supply. */
#define   SHDW_WUIR_WKUPT3_LOW_TO_HIGH (0x1u << 19) /**< \brief (SHDW_WUIR) A low-to-high level transitiona high-level for a period defined by WKUPDBC on the corresponding wake-up input forces the wake-up of the core power supply. */
#define SHDW_WUIR_WKUPT4 (0x1u << 20) /**< \brief (SHDW_WUIR) Wake-up Input Type 4 */
#define   SHDW_WUIR_WKUPT4_HIGH_TO_LOW (0x0u << 20) /**< \brief (SHDW_WUIR) A high-to-low level transitiona low-level for a period defined by WKUPDBC on the corresponding wake-up input forces the wake-up of the core power supply. */
#define   SHDW_WUIR_WKUPT4_LOW_TO_HIGH (0x1u << 20) /**< \brief (SHDW_WUIR) A low-to-high level transitiona high-level for a period defined by WKUPDBC on the corresponding wake-up input forces the wake-up of the core power supply. */
#define SHDW_WUIR_WKUPT5 (0x1u << 21) /**< \brief (SHDW_WUIR) Wake-up Input Type 5 */
#define   SHDW_WUIR_WKUPT5_HIGH_TO_LOW (0x0u << 21) /**< \brief (SHDW_WUIR) A high-to-low level transitiona low-level for a period defined by WKUPDBC on the corresponding wake-up input forces the wake-up of the core power supply. */
#define   SHDW_WUIR_WKUPT5_LOW_TO_HIGH (0x1u << 21) /**< \brief (SHDW_WUIR) A low-to-high level transitiona high-level for a period defined by WKUPDBC on the corresponding wake-up input forces the wake-up of the core power supply. */
#define SHDW_WUIR_WKUPT6 (0x1u << 22) /**< \brief (SHDW_WUIR) Wake-up Input Type 6 */
#define   SHDW_WUIR_WKUPT6_HIGH_TO_LOW (0x0u << 22) /**< \brief (SHDW_WUIR) A high-to-low level transitiona low-level for a period defined by WKUPDBC on the corresponding wake-up input forces the wake-up of the core power supply. */
#define   SHDW_WUIR_WKUPT6_LOW_TO_HIGH (0x1u << 22) /**< \brief (SHDW_WUIR) A low-to-high level transitiona high-level for a period defined by WKUPDBC on the corresponding wake-up input forces the wake-up of the core power supply. */
#define SHDW_WUIR_WKUPT7 (0x1u << 23) /**< \brief (SHDW_WUIR) Wake-up Input Type 7 */
#define   SHDW_WUIR_WKUPT7_HIGH_TO_LOW (0x0u << 23) /**< \brief (SHDW_WUIR) A high-to-low level transitiona low-level for a period defined by WKUPDBC on the corresponding wake-up input forces the wake-up of the core power supply. */
#define   SHDW_WUIR_WKUPT7_LOW_TO_HIGH (0x1u << 23) /**< \brief (SHDW_WUIR) A low-to-high level transitiona high-level for a period defined by WKUPDBC on the corresponding wake-up input forces the wake-up of the core power supply. */
#define SHDW_WUIR_WKUPT8 (0x1u << 24) /**< \brief (SHDW_WUIR) Wake-up Input Type 8 */
#define   SHDW_WUIR_WKUPT8_HIGH_TO_LOW (0x0u << 24) /**< \brief (SHDW_WUIR) A high-to-low level transitiona low-level for a period defined by WKUPDBC on the corresponding wake-up input forces the wake-up of the core power supply. */
#define   SHDW_WUIR_WKUPT8_LOW_TO_HIGH (0x1u << 24) /**< \brief (SHDW_WUIR) A low-to-high level transitiona high-level for a period defined by WKUPDBC on the corresponding wake-up input forces the wake-up of the core power supply. */
#define SHDW_WUIR_WKUPT9 (0x1u << 25) /**< \brief (SHDW_WUIR) Wake-up Input Type 9 */
#define   SHDW_WUIR_WKUPT9_HIGH_TO_LOW (0x0u << 25) /**< \brief (SHDW_WUIR) A high-to-low level transitiona low-level for a period defined by WKUPDBC on the corresponding wake-up input forces the wake-up of the core power supply. */
#define   SHDW_WUIR_WKUPT9_LOW_TO_HIGH (0x1u << 25) /**< \brief (SHDW_WUIR) A low-to-high level transitiona high-level for a period defined by WKUPDBC on the corresponding wake-up input forces the wake-up of the core power supply. */
#define SHDW_WUIR_WKUPT10 (0x1u << 26) /**< \brief (SHDW_WUIR) Wake-up Input Type 10 */
#define   SHDW_WUIR_WKUPT10_HIGH_TO_LOW (0x0u << 26) /**< \brief (SHDW_WUIR) A high-to-low level transitiona low-level for a period defined by WKUPDBC on the corresponding wake-up input forces the wake-up of the core power supply. */
#define   SHDW_WUIR_WKUPT10_LOW_TO_HIGH (0x1u << 26) /**< \brief (SHDW_WUIR) A low-to-high level transitiona high-level for a period defined by WKUPDBC on the corresponding wake-up input forces the wake-up of the core power supply. */
#define SHDW_WUIR_WKUPT11 (0x1u << 27) /**< \brief (SHDW_WUIR) Wake-up Input Type 11 */
#define   SHDW_WUIR_WKUPT11_HIGH_TO_LOW (0x0u << 27) /**< \brief (SHDW_WUIR) A high-to-low level transitiona low-level for a period defined by WKUPDBC on the corresponding wake-up input forces the wake-up of the core power supply. */
#define   SHDW_WUIR_WKUPT11_LOW_TO_HIGH (0x1u << 27) /**< \brief (SHDW_WUIR) A low-to-high level transitiona high-level for a period defined by WKUPDBC on the corresponding wake-up input forces the wake-up of the core power supply. */
#define SHDW_WUIR_WKUPT12 (0x1u << 28) /**< \brief (SHDW_WUIR) Wake-up Input Type 12 */
#define   SHDW_WUIR_WKUPT12_HIGH_TO_LOW (0x0u << 28) /**< \brief (SHDW_WUIR) A high-to-low level transitiona low-level for a period defined by WKUPDBC on the corresponding wake-up input forces the wake-up of the core power supply. */
#define   SHDW_WUIR_WKUPT12_LOW_TO_HIGH (0x1u << 28) /**< \brief (SHDW_WUIR) A low-to-high level transitiona high-level for a period defined by WKUPDBC on the corresponding wake-up input forces the wake-up of the core power supply. */
#define SHDW_WUIR_WKUPT13 (0x1u << 29) /**< \brief (SHDW_WUIR) Wake-up Input Type 13 */
#define   SHDW_WUIR_WKUPT13_HIGH_TO_LOW (0x0u << 29) /**< \brief (SHDW_WUIR) A high-to-low level transitiona low-level for a period defined by WKUPDBC on the corresponding wake-up input forces the wake-up of the core power supply. */
#define   SHDW_WUIR_WKUPT13_LOW_TO_HIGH (0x1u << 29) /**< \brief (SHDW_WUIR) A low-to-high level transitiona high-level for a period defined by WKUPDBC on the corresponding wake-up input forces the wake-up of the core power supply. */
#define SHDW_WUIR_WKUPT14 (0x1u << 30) /**< \brief (SHDW_WUIR) Wake-up Input Type 14 */
#define   SHDW_WUIR_WKUPT14_HIGH_TO_LOW (0x0u << 30) /**< \brief (SHDW_WUIR) A high-to-low level transitiona low-level for a period defined by WKUPDBC on the corresponding wake-up input forces the wake-up of the core power supply. */
#define   SHDW_WUIR_WKUPT14_LOW_TO_HIGH (0x1u << 30) /**< \brief (SHDW_WUIR) A low-to-high level transitiona high-level for a period defined by WKUPDBC on the corresponding wake-up input forces the wake-up of the core power supply. */
#define SHDW_WUIR_WKUPT15 (0x1u << 31) /**< \brief (SHDW_WUIR) Wake-up Input Type 15 */
#define   SHDW_WUIR_WKUPT15_HIGH_TO_LOW (0x0u << 31) /**< \brief (SHDW_WUIR) A high-to-low level transitiona low-level for a period defined by WKUPDBC on the corresponding wake-up input forces the wake-up of the core power supply. */
#define   SHDW_WUIR_WKUPT15_LOW_TO_HIGH (0x1u << 31) /**< \brief (SHDW_WUIR) A low-to-high level transitiona high-level for a period defined by WKUPDBC on the corresponding wake-up input forces the wake-up of the core power supply. */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR Static Memory Controller */
/* ============================================================================= */
/** \addtogroup SAMA5D2_SMC Static Memory Controller */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief SmcCs_number hardware registers */
typedef struct {
  __IO uint32_t HSMC_SETUP;   /**< \brief (SmcCs_number Offset: 0x0) HSMC Setup Register */
  __IO uint32_t HSMC_PULSE;   /**< \brief (SmcCs_number Offset: 0x4) HSMC Pulse Register */
  __IO uint32_t HSMC_CYCLE;   /**< \brief (SmcCs_number Offset: 0x8) HSMC Cycle Register */
  __IO uint32_t HSMC_TIMINGS; /**< \brief (SmcCs_number Offset: 0xC) HSMC Timings Register */
  __IO uint32_t HSMC_MODE;    /**< \brief (SmcCs_number Offset: 0x10) HSMC Mode Register */
} SmcCs_number;
/** \brief SmcPmecc hardware registers */
typedef struct {
  __I uint32_t HSMC_PMECC[11]; /**< \brief (SmcPmecc Offset: 0x0) PMECC Redundancy x Register */
  __I uint32_t Reserved1[5];
} SmcPmecc;
/** \brief SmcRem hardware registers */
typedef struct {
  __I uint32_t HSMC_REM[12]; /**< \brief (SmcRem Offset: 0x0) PMECC Remainder x Register */
  __I uint32_t Reserved2[4];
} SmcRem;
/** \brief Smc hardware registers */
#define SMCPMECC_NUMBER 8
#define SMCREM_NUMBER 8
#define SMCCS_NUMBER_NUMBER 4
typedef struct {
  __IO uint32_t     HSMC_CFG;                           /**< \brief (Smc Offset: 0x000) HSMC NFC Configuration Register */
  __O  uint32_t     HSMC_CTRL;                          /**< \brief (Smc Offset: 0x004) HSMC NFC Control Register */
  __I  uint32_t     HSMC_SR;                            /**< \brief (Smc Offset: 0x008) HSMC NFC Status Register */
  __O  uint32_t     HSMC_IER;                           /**< \brief (Smc Offset: 0x00C) HSMC NFC Interrupt Enable Register */
  __O  uint32_t     HSMC_IDR;                           /**< \brief (Smc Offset: 0x010) HSMC NFC Interrupt Disable Register */
  __I  uint32_t     HSMC_IMR;                           /**< \brief (Smc Offset: 0x014) HSMC NFC Interrupt Mask Register */
  __IO uint32_t     HSMC_ADDR;                          /**< \brief (Smc Offset: 0x018) HSMC NFC Address Cycle Zero Register */
  __IO uint32_t     HSMC_BANK;                          /**< \brief (Smc Offset: 0x01C) HSMC Bank Address Register */
  __I  uint32_t     Reserved1[20];
  __IO uint32_t     HSMC_PMECCFG;                       /**< \brief (Smc Offset: 0x070) PMECC Configuration Register */
  __IO uint32_t     HSMC_PMECCSAREA;                    /**< \brief (Smc Offset: 0x074) PMECC Spare Area Size Register */
  __IO uint32_t     HSMC_PMECCSADDR;                    /**< \brief (Smc Offset: 0x078) PMECC Start Address Register */
  __IO uint32_t     HSMC_PMECCEADDR;                    /**< \brief (Smc Offset: 0x07C) PMECC End Address Register */
  __I  uint32_t     Reserved2[1];
  __O  uint32_t     HSMC_PMECCTRL;                      /**< \brief (Smc Offset: 0x084) PMECC Control Register */
  __I  uint32_t     HSMC_PMECCSR;                       /**< \brief (Smc Offset: 0x088) PMECC Status Register */
  __O  uint32_t     HSMC_PMECCIER;                      /**< \brief (Smc Offset: 0x08C) PMECC Interrupt Enable register */
  __O  uint32_t     HSMC_PMECCIDR;                      /**< \brief (Smc Offset: 0x090) PMECC Interrupt Disable Register */
  __I  uint32_t     HSMC_PMECCIMR;                      /**< \brief (Smc Offset: 0x094) PMECC Interrupt Mask Register */
  __I  uint32_t     HSMC_PMECCISR;                      /**< \brief (Smc Offset: 0x098) PMECC Interrupt Status Register */
  __I  uint32_t     Reserved3[5];
       SmcPmecc     SMC_PMECC[SMCPMECC_NUMBER];         /**< \brief (Smc Offset: 0xB0) sec_num = 0 .. 7 */
       SmcRem       SMC_REM[SMCREM_NUMBER];             /**< \brief (Smc Offset: 0x2B0) sec_num = 0 .. 7 */
  __I  uint32_t     Reserved4[20];
  __IO uint32_t     HSMC_ELCFG;                         /**< \brief (Smc Offset: 0x500) PMECC Error Location Configuration Register */
  __I  uint32_t     HSMC_ELPRIM;                        /**< \brief (Smc Offset: 0x504) PMECC Error Location Primitive Register */
  __O  uint32_t     HSMC_ELEN;                          /**< \brief (Smc Offset: 0x508) PMECC Error Location Enable Register */
  __O  uint32_t     HSMC_ELDIS;                         /**< \brief (Smc Offset: 0x50C) PMECC Error Location Disable Register */
  __I  uint32_t     HSMC_ELSR;                          /**< \brief (Smc Offset: 0x510) PMECC Error Location Status Register */
  __O  uint32_t     HSMC_ELIER;                         /**< \brief (Smc Offset: 0x514) PMECC Error Location Interrupt Enable register */
  __O  uint32_t     HSMC_ELIDR;                         /**< \brief (Smc Offset: 0x518) PMECC Error Location Interrupt Disable Register */
  __I  uint32_t     HSMC_ELIMR;                         /**< \brief (Smc Offset: 0x51C) PMECC Error Location Interrupt Mask Register */
  __I  uint32_t     HSMC_ELISR;                         /**< \brief (Smc Offset: 0x520) PMECC Error Location Interrupt Status Register */
  __I  uint32_t     Reserved5[1];
  __IO uint32_t     HSMC_SIGMA0;                        /**< \brief (Smc Offset: 0x528) PMECC Error Location SIGMA 0 Register */
  __IO uint32_t     HSMC_SIGMA1;                        /**< \brief (Smc Offset: 0x52C) PMECC Error Location SIGMA 1 Register */
  __IO uint32_t     HSMC_SIGMA2;                        /**< \brief (Smc Offset: 0x530) PMECC Error Location SIGMA 2 Register */
  __IO uint32_t     HSMC_SIGMA3;                        /**< \brief (Smc Offset: 0x534) PMECC Error Location SIGMA 3 Register */
  __IO uint32_t     HSMC_SIGMA4;                        /**< \brief (Smc Offset: 0x538) PMECC Error Location SIGMA 4 Register */
  __IO uint32_t     HSMC_SIGMA5;                        /**< \brief (Smc Offset: 0x53C) PMECC Error Location SIGMA 5 Register */
  __IO uint32_t     HSMC_SIGMA6;                        /**< \brief (Smc Offset: 0x540) PMECC Error Location SIGMA 6 Register */
  __IO uint32_t     HSMC_SIGMA7;                        /**< \brief (Smc Offset: 0x544) PMECC Error Location SIGMA 7 Register */
  __IO uint32_t     HSMC_SIGMA8;                        /**< \brief (Smc Offset: 0x548) PMECC Error Location SIGMA 8 Register */
  __IO uint32_t     HSMC_SIGMA9;                        /**< \brief (Smc Offset: 0x54C) PMECC Error Location SIGMA 9 Register */
  __IO uint32_t     HSMC_SIGMA10;                       /**< \brief (Smc Offset: 0x550) PMECC Error Location SIGMA 10 Register */
  __IO uint32_t     HSMC_SIGMA11;                       /**< \brief (Smc Offset: 0x554) PMECC Error Location SIGMA 11 Register */
  __IO uint32_t     HSMC_SIGMA12;                       /**< \brief (Smc Offset: 0x558) PMECC Error Location SIGMA 12 Register */
  __IO uint32_t     HSMC_SIGMA13;                       /**< \brief (Smc Offset: 0x55C) PMECC Error Location SIGMA 13 Register */
  __IO uint32_t     HSMC_SIGMA14;                       /**< \brief (Smc Offset: 0x560) PMECC Error Location SIGMA 14 Register */
  __IO uint32_t     HSMC_SIGMA15;                       /**< \brief (Smc Offset: 0x564) PMECC Error Location SIGMA 15 Register */
  __IO uint32_t     HSMC_SIGMA16;                       /**< \brief (Smc Offset: 0x568) PMECC Error Location SIGMA 16 Register */
  __IO uint32_t     HSMC_SIGMA17;                       /**< \brief (Smc Offset: 0x56C) PMECC Error Location SIGMA 17 Register */
  __IO uint32_t     HSMC_SIGMA18;                       /**< \brief (Smc Offset: 0x570) PMECC Error Location SIGMA 18 Register */
  __IO uint32_t     HSMC_SIGMA19;                       /**< \brief (Smc Offset: 0x574) PMECC Error Location SIGMA 19 Register */
  __IO uint32_t     HSMC_SIGMA20;                       /**< \brief (Smc Offset: 0x578) PMECC Error Location SIGMA 20 Register */
  __IO uint32_t     HSMC_SIGMA21;                       /**< \brief (Smc Offset: 0x57C) PMECC Error Location SIGMA 21 Register */
  __IO uint32_t     HSMC_SIGMA22;                       /**< \brief (Smc Offset: 0x580) PMECC Error Location SIGMA 22 Register */
  __IO uint32_t     HSMC_SIGMA23;                       /**< \brief (Smc Offset: 0x584) PMECC Error Location SIGMA 23 Register */
  __IO uint32_t     HSMC_SIGMA24;                       /**< \brief (Smc Offset: 0x588) PMECC Error Location SIGMA 24 Register */
  __IO uint32_t     HSMC_SIGMA25;                       /**< \brief (Smc Offset: 0x58C) PMECC Error Location SIGMA 25 Register */
  __IO uint32_t     HSMC_SIGMA26;                       /**< \brief (Smc Offset: 0x590) PMECC Error Location SIGMA 26 Register */
  __IO uint32_t     HSMC_SIGMA27;                       /**< \brief (Smc Offset: 0x594) PMECC Error Location SIGMA 27 Register */
  __IO uint32_t     HSMC_SIGMA28;                       /**< \brief (Smc Offset: 0x598) PMECC Error Location SIGMA 28 Register */
  __IO uint32_t     HSMC_SIGMA29;                       /**< \brief (Smc Offset: 0x59C) PMECC Error Location SIGMA 29 Register */
  __IO uint32_t     HSMC_SIGMA30;                       /**< \brief (Smc Offset: 0x5A0) PMECC Error Location SIGMA 30 Register */
  __IO uint32_t     HSMC_SIGMA31;                       /**< \brief (Smc Offset: 0x5A4) PMECC Error Location SIGMA 31 Register */
  __IO uint32_t     HSMC_SIGMA32;                       /**< \brief (Smc Offset: 0x5A8) PMECC Error Location SIGMA 32 Register */
  __I  uint32_t     HSMC_ERRLOC[32];                    /**< \brief (Smc Offset: 0x5AC) PMECC Error Location 0 Register */
  __I  uint32_t     Reserved6[53];
       SmcCs_number SMC_CS_NUMBER[SMCCS_NUMBER_NUMBER]; /**< \brief (Smc Offset: 0x700) CS_number = 0 .. 3 */
  __I  uint32_t     Reserved7[20];
  __IO uint32_t     HSMC_OCMS;                          /**< \brief (Smc Offset: 0x7A0) HSMC Off Chip Memory Scrambling Register */
  __O  uint32_t     HSMC_KEY1;                          /**< \brief (Smc Offset: 0x7A4) HSMC Off Chip Memory Scrambling KEY1 Register */
  __O  uint32_t     HSMC_KEY2;                          /**< \brief (Smc Offset: 0x7A8) HSMC Off Chip Memory Scrambling KEY2 Register */
  __I  uint32_t     Reserved8[14];
  __IO uint32_t     HSMC_WPMR;                          /**< \brief (Smc Offset: 0x7E4) HSMC Write Protection Mode Register */
  __I  uint32_t     HSMC_WPSR;                          /**< \brief (Smc Offset: 0x7E8) HSMC Write Protection Status Register */
  __I  uint32_t     HSMC_ADDRSIZE;                      /**< \brief (Smc Offset: 0x7EC) HSMC Address Size Register */
  __I  uint32_t     HSMC_IPNAME[2];                     /**< \brief (Smc Offset: 0x7F0) HSMC Name1 Register */
  __I  uint32_t     HSMC_FEATURES;                      /**< \brief (Smc Offset: 0x7F8) HSMC Features Register */
  __I  uint32_t     HSMC_VERSION;                       /**< \brief (Smc Offset: 0x7FC) HSMC Version Register */
} Smc;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- HSMC_CFG : (SMC Offset: 0x000) HSMC NFC Configuration Register -------- */
#define HSMC_CFG_PAGESIZE_Pos 0
#define HSMC_CFG_PAGESIZE_Msk (0x7u << HSMC_CFG_PAGESIZE_Pos) /**< \brief (HSMC_CFG) Page Size of the NAND Flash Device */
#define   HSMC_CFG_PAGESIZE_PS512 (0x0u << 0) /**< \brief (HSMC_CFG) Main area 512 bytes */
#define   HSMC_CFG_PAGESIZE_PS1024 (0x1u << 0) /**< \brief (HSMC_CFG) Main area 1024 bytes */
#define   HSMC_CFG_PAGESIZE_PS2048 (0x2u << 0) /**< \brief (HSMC_CFG) Main area 2048 bytes */
#define   HSMC_CFG_PAGESIZE_PS4096 (0x3u << 0) /**< \brief (HSMC_CFG) Main area 4096 bytes */
#define   HSMC_CFG_PAGESIZE_PS8192 (0x4u << 0) /**< \brief (HSMC_CFG) Main area 8192 bytes */
#define HSMC_CFG_WSPARE (0x1u << 8) /**< \brief (HSMC_CFG) Write Spare Area */
#define HSMC_CFG_RSPARE (0x1u << 9) /**< \brief (HSMC_CFG) Read Spare Area */
#define HSMC_CFG_EDGECTRL (0x1u << 12) /**< \brief (HSMC_CFG) Rising/Falling Edge Detection Control */
#define HSMC_CFG_RBEDGE (0x1u << 13) /**< \brief (HSMC_CFG) Ready/Busy Signal Edge Detection */
#define HSMC_CFG_DTOCYC_Pos 16
#define HSMC_CFG_DTOCYC_Msk (0xfu << HSMC_CFG_DTOCYC_Pos) /**< \brief (HSMC_CFG) Data Timeout Cycle Number */
#define HSMC_CFG_DTOCYC(value) ((HSMC_CFG_DTOCYC_Msk & ((value) << HSMC_CFG_DTOCYC_Pos)))
#define HSMC_CFG_DTOMUL_Pos 20
#define HSMC_CFG_DTOMUL_Msk (0x7u << HSMC_CFG_DTOMUL_Pos) /**< \brief (HSMC_CFG) Data Timeout Multiplier */
#define   HSMC_CFG_DTOMUL_X1 (0x0u << 20) /**< \brief (HSMC_CFG) DTOCYC */
#define   HSMC_CFG_DTOMUL_X16 (0x1u << 20) /**< \brief (HSMC_CFG) DTOCYC x 16 */
#define   HSMC_CFG_DTOMUL_X128 (0x2u << 20) /**< \brief (HSMC_CFG) DTOCYC x 128 */
#define   HSMC_CFG_DTOMUL_X256 (0x3u << 20) /**< \brief (HSMC_CFG) DTOCYC x 256 */
#define   HSMC_CFG_DTOMUL_X1024 (0x4u << 20) /**< \brief (HSMC_CFG) DTOCYC x 1024 */
#define   HSMC_CFG_DTOMUL_X4096 (0x5u << 20) /**< \brief (HSMC_CFG) DTOCYC x 4096 */
#define   HSMC_CFG_DTOMUL_X65536 (0x6u << 20) /**< \brief (HSMC_CFG) DTOCYC x 65536 */
#define   HSMC_CFG_DTOMUL_X1048576 (0x7u << 20) /**< \brief (HSMC_CFG) DTOCYC x 1048576 */
#define HSMC_CFG_NFCSPARESIZE_Pos 24
#define HSMC_CFG_NFCSPARESIZE_Msk (0x7fu << HSMC_CFG_NFCSPARESIZE_Pos) /**< \brief (HSMC_CFG) NAND Flash Spare Area Size Retrieved by the Host Controller */
#define HSMC_CFG_NFCSPARESIZE(value) ((HSMC_CFG_NFCSPARESIZE_Msk & ((value) << HSMC_CFG_NFCSPARESIZE_Pos)))
/* -------- HSMC_CTRL : (SMC Offset: 0x004) HSMC NFC Control Register -------- */
#define HSMC_CTRL_NFCEN (0x1u << 0) /**< \brief (HSMC_CTRL) NAND Flash Controller Enable */
#define HSMC_CTRL_NFCDIS (0x1u << 1) /**< \brief (HSMC_CTRL) NAND Flash Controller Disable */
/* -------- HSMC_SR : (SMC Offset: 0x008) HSMC NFC Status Register -------- */
#define HSMC_SR_SMCSTS (0x1u << 0) /**< \brief (HSMC_SR) NAND Flash Controller Status (this field cannot be reset) */
#define HSMC_SR_RB_RISE (0x1u << 4) /**< \brief (HSMC_SR) Selected Ready Busy Rising Edge Detected */
#define HSMC_SR_RB_FALL (0x1u << 5) /**< \brief (HSMC_SR) Selected Ready Busy Falling Edge Detected */
#define HSMC_SR_NFCBUSY (0x1u << 8) /**< \brief (HSMC_SR) NFC Busy (this field cannot be reset) */
#define HSMC_SR_NFCWR (0x1u << 11) /**< \brief (HSMC_SR) NFC Write/Read Operation (this field cannot be reset) */
#define HSMC_SR_NFCSID_Pos 12
#define HSMC_SR_NFCSID_Msk (0x7u << HSMC_SR_NFCSID_Pos) /**< \brief (HSMC_SR) NFC Chip Select ID (this field cannot be reset) */
#define HSMC_SR_XFRDONE (0x1u << 16) /**< \brief (HSMC_SR) NFC Data Transfer Terminated */
#define HSMC_SR_CMDDONE (0x1u << 17) /**< \brief (HSMC_SR) Command Done */
#define HSMC_SR_DTOE (0x1u << 20) /**< \brief (HSMC_SR) Data Timeout Error */
#define HSMC_SR_UNDEF (0x1u << 21) /**< \brief (HSMC_SR) Undefined Area Error */
#define HSMC_SR_AWB (0x1u << 22) /**< \brief (HSMC_SR) Accessing While Busy */
#define HSMC_SR_NFCASE (0x1u << 23) /**< \brief (HSMC_SR) NFC Access Size Error */
#define HSMC_SR_RB_EDGE3 (0x1u << 27) /**< \brief (HSMC_SR) Ready/Busy Line 3 Edge Detected */
/* -------- HSMC_IER : (SMC Offset: 0x00C) HSMC NFC Interrupt Enable Register -------- */
#define HSMC_IER_RB_RISE (0x1u << 4) /**< \brief (HSMC_IER) Ready Busy Rising Edge Detection Interrupt Enable */
#define HSMC_IER_RB_FALL (0x1u << 5) /**< \brief (HSMC_IER) Ready Busy Falling Edge Detection Interrupt Enable */
#define HSMC_IER_XFRDONE (0x1u << 16) /**< \brief (HSMC_IER) Transfer Done Interrupt Enable */
#define HSMC_IER_CMDDONE (0x1u << 17) /**< \brief (HSMC_IER) Command Done Interrupt Enable */
#define HSMC_IER_DTOE (0x1u << 20) /**< \brief (HSMC_IER) Data Timeout Error Interrupt Enable */
#define HSMC_IER_UNDEF (0x1u << 21) /**< \brief (HSMC_IER) Undefined Area Access Interrupt Enable */
#define HSMC_IER_AWB (0x1u << 22) /**< \brief (HSMC_IER) Accessing While Busy Interrupt Enable */
#define HSMC_IER_NFCASE (0x1u << 23) /**< \brief (HSMC_IER) NFC Access Size Error Interrupt Enable */
#define HSMC_IER_RB_EDGE3 (0x1u << 27) /**< \brief (HSMC_IER) Ready/Busy Line 3 Interrupt Enable */
/* -------- HSMC_IDR : (SMC Offset: 0x010) HSMC NFC Interrupt Disable Register -------- */
#define HSMC_IDR_RB_RISE (0x1u << 4) /**< \brief (HSMC_IDR) Ready Busy Rising Edge Detection Interrupt Disable */
#define HSMC_IDR_RB_FALL (0x1u << 5) /**< \brief (HSMC_IDR) Ready Busy Falling Edge Detection Interrupt Disable */
#define HSMC_IDR_XFRDONE (0x1u << 16) /**< \brief (HSMC_IDR) Transfer Done Interrupt Disable */
#define HSMC_IDR_CMDDONE (0x1u << 17) /**< \brief (HSMC_IDR) Command Done Interrupt Disable */
#define HSMC_IDR_DTOE (0x1u << 20) /**< \brief (HSMC_IDR) Data Timeout Error Interrupt Disable */
#define HSMC_IDR_UNDEF (0x1u << 21) /**< \brief (HSMC_IDR) Undefined Area Access Interrupt Disable */
#define HSMC_IDR_AWB (0x1u << 22) /**< \brief (HSMC_IDR) Accessing While Busy Interrupt Disable */
#define HSMC_IDR_NFCASE (0x1u << 23) /**< \brief (HSMC_IDR) NFC Access Size Error Interrupt Disable */
#define HSMC_IDR_RB_EDGE3 (0x1u << 27) /**< \brief (HSMC_IDR) Ready/Busy Line 3 Interrupt Disable */
/* -------- HSMC_IMR : (SMC Offset: 0x014) HSMC NFC Interrupt Mask Register -------- */
#define HSMC_IMR_RB_RISE (0x1u << 4) /**< \brief (HSMC_IMR) Ready Busy Rising Edge Detection Interrupt Mask */
#define HSMC_IMR_RB_FALL (0x1u << 5) /**< \brief (HSMC_IMR) Ready Busy Falling Edge Detection Interrupt Mask */
#define HSMC_IMR_XFRDONE (0x1u << 16) /**< \brief (HSMC_IMR) Transfer Done Interrupt Mask */
#define HSMC_IMR_CMDDONE (0x1u << 17) /**< \brief (HSMC_IMR) Command Done Interrupt Mask */
#define HSMC_IMR_DTOE (0x1u << 20) /**< \brief (HSMC_IMR) Data Timeout Error Interrupt Mask */
#define HSMC_IMR_UNDEF (0x1u << 21) /**< \brief (HSMC_IMR) Undefined Area Access Interrupt Mask5 */
#define HSMC_IMR_AWB (0x1u << 22) /**< \brief (HSMC_IMR) Accessing While Busy Interrupt Mask */
#define HSMC_IMR_NFCASE (0x1u << 23) /**< \brief (HSMC_IMR) NFC Access Size Error Interrupt Mask */
#define HSMC_IMR_RB_EDGE3 (0x1u << 27) /**< \brief (HSMC_IMR) Ready/Busy Line 3 Interrupt Mask */
/* -------- HSMC_ADDR : (SMC Offset: 0x018) HSMC NFC Address Cycle Zero Register -------- */
#define HSMC_ADDR_ADDR_CYCLE0_Pos 0
#define HSMC_ADDR_ADDR_CYCLE0_Msk (0xffu << HSMC_ADDR_ADDR_CYCLE0_Pos) /**< \brief (HSMC_ADDR) NAND Flash Array Address Cycle 0 */
#define HSMC_ADDR_ADDR_CYCLE0(value) ((HSMC_ADDR_ADDR_CYCLE0_Msk & ((value) << HSMC_ADDR_ADDR_CYCLE0_Pos)))
/* -------- HSMC_BANK : (SMC Offset: 0x01C) HSMC Bank Address Register -------- */
#define HSMC_BANK_BANK (0x1u << 0) /**< \brief (HSMC_BANK) Bank Identifier */
/* -------- HSMC_PMECCFG : (SMC Offset: 0x070) PMECC Configuration Register -------- */
#define HSMC_PMECCFG_BCH_ERR_Pos 0
#define HSMC_PMECCFG_BCH_ERR_Msk (0x7u << HSMC_PMECCFG_BCH_ERR_Pos) /**< \brief (HSMC_PMECCFG) Error Correcting Capability */
#define   HSMC_PMECCFG_BCH_ERR_BCH_ERR2 (0x0u << 0) /**< \brief (HSMC_PMECCFG) 2 errors */
#define   HSMC_PMECCFG_BCH_ERR_BCH_ERR4 (0x1u << 0) /**< \brief (HSMC_PMECCFG) 4 errors */
#define   HSMC_PMECCFG_BCH_ERR_BCH_ERR8 (0x2u << 0) /**< \brief (HSMC_PMECCFG) 8 errors */
#define   HSMC_PMECCFG_BCH_ERR_BCH_ERR12 (0x3u << 0) /**< \brief (HSMC_PMECCFG) 12 errors */
#define   HSMC_PMECCFG_BCH_ERR_BCH_ERR24 (0x4u << 0) /**< \brief (HSMC_PMECCFG) 24 errors */
#define HSMC_PMECCFG_SECTORSZ (0x1u << 4) /**< \brief (HSMC_PMECCFG) Sector Size */
#define HSMC_PMECCFG_PAGESIZE_Pos 8
#define HSMC_PMECCFG_PAGESIZE_Msk (0x3u << HSMC_PMECCFG_PAGESIZE_Pos) /**< \brief (HSMC_PMECCFG) Number of Sectors in the Page */
#define   HSMC_PMECCFG_PAGESIZE_PAGESIZE_1SEC (0x0u << 8) /**< \brief (HSMC_PMECCFG) 1 sector for main area (512 or 1024 bytes) */
#define   HSMC_PMECCFG_PAGESIZE_PAGESIZE_2SEC (0x1u << 8) /**< \brief (HSMC_PMECCFG) 2 sectors for main area (1024 or 2048 bytes) */
#define   HSMC_PMECCFG_PAGESIZE_PAGESIZE_4SEC (0x2u << 8) /**< \brief (HSMC_PMECCFG) 4 sectors for main area (2048 or 4096 bytes) */
#define   HSMC_PMECCFG_PAGESIZE_PAGESIZE_8SEC (0x3u << 8) /**< \brief (HSMC_PMECCFG) 8 sectors for main area (4096 or 8192 bytes) */
#define HSMC_PMECCFG_NANDWR (0x1u << 12) /**< \brief (HSMC_PMECCFG) NAND Write Access */
#define HSMC_PMECCFG_SPAREEN (0x1u << 16) /**< \brief (HSMC_PMECCFG) Spare Enable */
#define HSMC_PMECCFG_AUTO (0x1u << 20) /**< \brief (HSMC_PMECCFG) Automatic Mode Enable */
/* -------- HSMC_PMECCSAREA : (SMC Offset: 0x074) PMECC Spare Area Size Register -------- */
#define HSMC_PMECCSAREA_SPARESIZE_Pos 0
#define HSMC_PMECCSAREA_SPARESIZE_Msk (0x1ffu << HSMC_PMECCSAREA_SPARESIZE_Pos) /**< \brief (HSMC_PMECCSAREA) Spare Area Size */
#define HSMC_PMECCSAREA_SPARESIZE(value) ((HSMC_PMECCSAREA_SPARESIZE_Msk & ((value) << HSMC_PMECCSAREA_SPARESIZE_Pos)))
/* -------- HSMC_PMECCSADDR : (SMC Offset: 0x078) PMECC Start Address Register -------- */
#define HSMC_PMECCSADDR_STARTADDR_Pos 0
#define HSMC_PMECCSADDR_STARTADDR_Msk (0x1ffu << HSMC_PMECCSADDR_STARTADDR_Pos) /**< \brief (HSMC_PMECCSADDR) ECC Area Start Address */
#define HSMC_PMECCSADDR_STARTADDR(value) ((HSMC_PMECCSADDR_STARTADDR_Msk & ((value) << HSMC_PMECCSADDR_STARTADDR_Pos)))
/* -------- HSMC_PMECCEADDR : (SMC Offset: 0x07C) PMECC End Address Register -------- */
#define HSMC_PMECCEADDR_ENDADDR_Pos 0
#define HSMC_PMECCEADDR_ENDADDR_Msk (0x1ffu << HSMC_PMECCEADDR_ENDADDR_Pos) /**< \brief (HSMC_PMECCEADDR) ECC Area End Address */
#define HSMC_PMECCEADDR_ENDADDR(value) ((HSMC_PMECCEADDR_ENDADDR_Msk & ((value) << HSMC_PMECCEADDR_ENDADDR_Pos)))
/* -------- HSMC_PMECCTRL : (SMC Offset: 0x084) PMECC Control Register -------- */
#define HSMC_PMECCTRL_RST (0x1u << 0) /**< \brief (HSMC_PMECCTRL) Reset the PMECC Module */
#define HSMC_PMECCTRL_DATA (0x1u << 1) /**< \brief (HSMC_PMECCTRL) Start a Data Phase */
#define HSMC_PMECCTRL_USER (0x1u << 2) /**< \brief (HSMC_PMECCTRL) Start a User Mode Phase */
#define HSMC_PMECCTRL_ENABLE (0x1u << 4) /**< \brief (HSMC_PMECCTRL) PMECC Enable */
#define HSMC_PMECCTRL_DISABLE (0x1u << 5) /**< \brief (HSMC_PMECCTRL) PMECC Enable */
/* -------- HSMC_PMECCSR : (SMC Offset: 0x088) PMECC Status Register -------- */
#define HSMC_PMECCSR_BUSY (0x1u << 0) /**< \brief (HSMC_PMECCSR) The kernel of the PMECC is busy */
#define HSMC_PMECCSR_ENABLE (0x1u << 4) /**< \brief (HSMC_PMECCSR) PMECC Enable bit */
/* -------- HSMC_PMECCIER : (SMC Offset: 0x08C) PMECC Interrupt Enable register -------- */
#define HSMC_PMECCIER_ERRIE (0x1u << 0) /**< \brief (HSMC_PMECCIER) Error Interrupt Enable */
/* -------- HSMC_PMECCIDR : (SMC Offset: 0x090) PMECC Interrupt Disable Register -------- */
#define HSMC_PMECCIDR_ERRID (0x1u << 0) /**< \brief (HSMC_PMECCIDR) Error Interrupt Disable */
/* -------- HSMC_PMECCIMR : (SMC Offset: 0x094) PMECC Interrupt Mask Register -------- */
#define HSMC_PMECCIMR_ERRIM (0x1u << 0) /**< \brief (HSMC_PMECCIMR) Error Interrupt Mask */
/* -------- HSMC_PMECCISR : (SMC Offset: 0x098) PMECC Interrupt Status Register -------- */
#define HSMC_PMECCISR_ERRIS_Pos 0
#define HSMC_PMECCISR_ERRIS_Msk (0xffu << HSMC_PMECCISR_ERRIS_Pos) /**< \brief (HSMC_PMECCISR) Error Interrupt Status Register */
/* -------- HSMC_PMECC[11] : (SMC Offset: N/A) PMECC Redundancy x Register -------- */
#define HSMC_PMECC_ECC_Pos 0
#define HSMC_PMECC_ECC_Msk (0xffffffffu << HSMC_PMECC_ECC_Pos) /**< \brief (HSMC_PMECC[11]) BCH Redundancy */
/* -------- HSMC_REM[12] : (SMC Offset: N/A) PMECC Remainder x Register -------- */
#define HSMC_REM_REM2NP1_Pos 0
#define HSMC_REM_REM2NP1_Msk (0x3fffu << HSMC_REM_REM2NP1_Pos) /**< \brief (HSMC_REM[12]) BCH Remainder 2 * N + 1 */
#define HSMC_REM_REM2NP3_Pos 16
#define HSMC_REM_REM2NP3_Msk (0x3fffu << HSMC_REM_REM2NP3_Pos) /**< \brief (HSMC_REM[12]) BCH Remainder 2 * N + 3 */
/* -------- HSMC_ELCFG : (SMC Offset: 0x500) PMECC Error Location Configuration Register -------- */
#define HSMC_ELCFG_SECTORSZ (0x1u << 0) /**< \brief (HSMC_ELCFG) Sector Size */
#define HSMC_ELCFG_ERRNUM_Pos 16
#define HSMC_ELCFG_ERRNUM_Msk (0x1fu << HSMC_ELCFG_ERRNUM_Pos) /**< \brief (HSMC_ELCFG) Number of Errors */
#define HSMC_ELCFG_ERRNUM(value) ((HSMC_ELCFG_ERRNUM_Msk & ((value) << HSMC_ELCFG_ERRNUM_Pos)))
/* -------- HSMC_ELPRIM : (SMC Offset: 0x504) PMECC Error Location Primitive Register -------- */
#define HSMC_ELPRIM_PRIMITIV_Pos 0
#define HSMC_ELPRIM_PRIMITIV_Msk (0xffffu << HSMC_ELPRIM_PRIMITIV_Pos) /**< \brief (HSMC_ELPRIM) Primitive Polynomial */
/* -------- HSMC_ELEN : (SMC Offset: 0x508) PMECC Error Location Enable Register -------- */
#define HSMC_ELEN_ENINIT_Pos 0
#define HSMC_ELEN_ENINIT_Msk (0x3fffu << HSMC_ELEN_ENINIT_Pos) /**< \brief (HSMC_ELEN) Error Location Enable */
#define HSMC_ELEN_ENINIT(value) ((HSMC_ELEN_ENINIT_Msk & ((value) << HSMC_ELEN_ENINIT_Pos)))
/* -------- HSMC_ELDIS : (SMC Offset: 0x50C) PMECC Error Location Disable Register -------- */
#define HSMC_ELDIS_DIS (0x1u << 0) /**< \brief (HSMC_ELDIS) Disable Error Location Engine */
/* -------- HSMC_ELSR : (SMC Offset: 0x510) PMECC Error Location Status Register -------- */
#define HSMC_ELSR_BUSY (0x1u << 0) /**< \brief (HSMC_ELSR) Error Location Engine Busy */
/* -------- HSMC_ELIER : (SMC Offset: 0x514) PMECC Error Location Interrupt Enable register -------- */
#define HSMC_ELIER_DONE (0x1u << 0) /**< \brief (HSMC_ELIER) Computation Terminated Interrupt Enable */
/* -------- HSMC_ELIDR : (SMC Offset: 0x518) PMECC Error Location Interrupt Disable Register -------- */
#define HSMC_ELIDR_DONE (0x1u << 0) /**< \brief (HSMC_ELIDR) Computation Terminated Interrupt Disable */
/* -------- HSMC_ELIMR : (SMC Offset: 0x51C) PMECC Error Location Interrupt Mask Register -------- */
#define HSMC_ELIMR_DONE (0x1u << 0) /**< \brief (HSMC_ELIMR) Computation Terminated Interrupt Mask */
/* -------- HSMC_ELISR : (SMC Offset: 0x520) PMECC Error Location Interrupt Status Register -------- */
#define HSMC_ELISR_DONE (0x1u << 0) /**< \brief (HSMC_ELISR) Computation Terminated Interrupt Status */
#define HSMC_ELISR_ERR_CNT_Pos 8
#define HSMC_ELISR_ERR_CNT_Msk (0x1fu << HSMC_ELISR_ERR_CNT_Pos) /**< \brief (HSMC_ELISR) Error Counter value */
/* -------- HSMC_SIGMA0 : (SMC Offset: 0x528) PMECC Error Location SIGMA 0 Register -------- */
#define HSMC_SIGMA0_SIGMA0_Pos 0
#define HSMC_SIGMA0_SIGMA0_Msk (0x3fffu << HSMC_SIGMA0_SIGMA0_Pos) /**< \brief (HSMC_SIGMA0) Coefficient of degree x in the SIGMA polynomial. */
#define HSMC_SIGMA0_SIGMA0(value) ((HSMC_SIGMA0_SIGMA0_Msk & ((value) << HSMC_SIGMA0_SIGMA0_Pos)))
/* -------- HSMC_SIGMA1 : (SMC Offset: 0x52C) PMECC Error Location SIGMA 1 Register -------- */
#define HSMC_SIGMA1_SIGMA1_Pos 0
#define HSMC_SIGMA1_SIGMA1_Msk (0x3fffu << HSMC_SIGMA1_SIGMA1_Pos) /**< \brief (HSMC_SIGMA1) Coefficient of degree x in the SIGMA polynomial. */
#define HSMC_SIGMA1_SIGMA1(value) ((HSMC_SIGMA1_SIGMA1_Msk & ((value) << HSMC_SIGMA1_SIGMA1_Pos)))
/* -------- HSMC_SIGMA2 : (SMC Offset: 0x530) PMECC Error Location SIGMA 2 Register -------- */
#define HSMC_SIGMA2_SIGMA2_Pos 0
#define HSMC_SIGMA2_SIGMA2_Msk (0x3fffu << HSMC_SIGMA2_SIGMA2_Pos) /**< \brief (HSMC_SIGMA2) Coefficient of degree x in the SIGMA polynomial. */
#define HSMC_SIGMA2_SIGMA2(value) ((HSMC_SIGMA2_SIGMA2_Msk & ((value) << HSMC_SIGMA2_SIGMA2_Pos)))
/* -------- HSMC_SIGMA3 : (SMC Offset: 0x534) PMECC Error Location SIGMA 3 Register -------- */
#define HSMC_SIGMA3_SIGMA3_Pos 0
#define HSMC_SIGMA3_SIGMA3_Msk (0x3fffu << HSMC_SIGMA3_SIGMA3_Pos) /**< \brief (HSMC_SIGMA3) Coefficient of degree x in the SIGMA polynomial. */
#define HSMC_SIGMA3_SIGMA3(value) ((HSMC_SIGMA3_SIGMA3_Msk & ((value) << HSMC_SIGMA3_SIGMA3_Pos)))
/* -------- HSMC_SIGMA4 : (SMC Offset: 0x538) PMECC Error Location SIGMA 4 Register -------- */
#define HSMC_SIGMA4_SIGMA4_Pos 0
#define HSMC_SIGMA4_SIGMA4_Msk (0x3fffu << HSMC_SIGMA4_SIGMA4_Pos) /**< \brief (HSMC_SIGMA4) Coefficient of degree x in the SIGMA polynomial. */
#define HSMC_SIGMA4_SIGMA4(value) ((HSMC_SIGMA4_SIGMA4_Msk & ((value) << HSMC_SIGMA4_SIGMA4_Pos)))
/* -------- HSMC_SIGMA5 : (SMC Offset: 0x53C) PMECC Error Location SIGMA 5 Register -------- */
#define HSMC_SIGMA5_SIGMA5_Pos 0
#define HSMC_SIGMA5_SIGMA5_Msk (0x3fffu << HSMC_SIGMA5_SIGMA5_Pos) /**< \brief (HSMC_SIGMA5) Coefficient of degree x in the SIGMA polynomial. */
#define HSMC_SIGMA5_SIGMA5(value) ((HSMC_SIGMA5_SIGMA5_Msk & ((value) << HSMC_SIGMA5_SIGMA5_Pos)))
/* -------- HSMC_SIGMA6 : (SMC Offset: 0x540) PMECC Error Location SIGMA 6 Register -------- */
#define HSMC_SIGMA6_SIGMA6_Pos 0
#define HSMC_SIGMA6_SIGMA6_Msk (0x3fffu << HSMC_SIGMA6_SIGMA6_Pos) /**< \brief (HSMC_SIGMA6) Coefficient of degree x in the SIGMA polynomial. */
#define HSMC_SIGMA6_SIGMA6(value) ((HSMC_SIGMA6_SIGMA6_Msk & ((value) << HSMC_SIGMA6_SIGMA6_Pos)))
/* -------- HSMC_SIGMA7 : (SMC Offset: 0x544) PMECC Error Location SIGMA 7 Register -------- */
#define HSMC_SIGMA7_SIGMA7_Pos 0
#define HSMC_SIGMA7_SIGMA7_Msk (0x3fffu << HSMC_SIGMA7_SIGMA7_Pos) /**< \brief (HSMC_SIGMA7) Coefficient of degree x in the SIGMA polynomial. */
#define HSMC_SIGMA7_SIGMA7(value) ((HSMC_SIGMA7_SIGMA7_Msk & ((value) << HSMC_SIGMA7_SIGMA7_Pos)))
/* -------- HSMC_SIGMA8 : (SMC Offset: 0x548) PMECC Error Location SIGMA 8 Register -------- */
#define HSMC_SIGMA8_SIGMA8_Pos 0
#define HSMC_SIGMA8_SIGMA8_Msk (0x3fffu << HSMC_SIGMA8_SIGMA8_Pos) /**< \brief (HSMC_SIGMA8) Coefficient of degree x in the SIGMA polynomial. */
#define HSMC_SIGMA8_SIGMA8(value) ((HSMC_SIGMA8_SIGMA8_Msk & ((value) << HSMC_SIGMA8_SIGMA8_Pos)))
/* -------- HSMC_SIGMA9 : (SMC Offset: 0x54C) PMECC Error Location SIGMA 9 Register -------- */
#define HSMC_SIGMA9_SIGMA9_Pos 0
#define HSMC_SIGMA9_SIGMA9_Msk (0x3fffu << HSMC_SIGMA9_SIGMA9_Pos) /**< \brief (HSMC_SIGMA9) Coefficient of degree x in the SIGMA polynomial. */
#define HSMC_SIGMA9_SIGMA9(value) ((HSMC_SIGMA9_SIGMA9_Msk & ((value) << HSMC_SIGMA9_SIGMA9_Pos)))
/* -------- HSMC_SIGMA10 : (SMC Offset: 0x550) PMECC Error Location SIGMA 10 Register -------- */
#define HSMC_SIGMA10_SIGMA10_Pos 0
#define HSMC_SIGMA10_SIGMA10_Msk (0x3fffu << HSMC_SIGMA10_SIGMA10_Pos) /**< \brief (HSMC_SIGMA10) Coefficient of degree x in the SIGMA polynomial. */
#define HSMC_SIGMA10_SIGMA10(value) ((HSMC_SIGMA10_SIGMA10_Msk & ((value) << HSMC_SIGMA10_SIGMA10_Pos)))
/* -------- HSMC_SIGMA11 : (SMC Offset: 0x554) PMECC Error Location SIGMA 11 Register -------- */
#define HSMC_SIGMA11_SIGMA11_Pos 0
#define HSMC_SIGMA11_SIGMA11_Msk (0x3fffu << HSMC_SIGMA11_SIGMA11_Pos) /**< \brief (HSMC_SIGMA11) Coefficient of degree x in the SIGMA polynomial. */
#define HSMC_SIGMA11_SIGMA11(value) ((HSMC_SIGMA11_SIGMA11_Msk & ((value) << HSMC_SIGMA11_SIGMA11_Pos)))
/* -------- HSMC_SIGMA12 : (SMC Offset: 0x558) PMECC Error Location SIGMA 12 Register -------- */
#define HSMC_SIGMA12_SIGMA12_Pos 0
#define HSMC_SIGMA12_SIGMA12_Msk (0x3fffu << HSMC_SIGMA12_SIGMA12_Pos) /**< \brief (HSMC_SIGMA12) Coefficient of degree x in the SIGMA polynomial. */
#define HSMC_SIGMA12_SIGMA12(value) ((HSMC_SIGMA12_SIGMA12_Msk & ((value) << HSMC_SIGMA12_SIGMA12_Pos)))
/* -------- HSMC_SIGMA13 : (SMC Offset: 0x55C) PMECC Error Location SIGMA 13 Register -------- */
#define HSMC_SIGMA13_SIGMA13_Pos 0
#define HSMC_SIGMA13_SIGMA13_Msk (0x3fffu << HSMC_SIGMA13_SIGMA13_Pos) /**< \brief (HSMC_SIGMA13) Coefficient of degree x in the SIGMA polynomial. */
#define HSMC_SIGMA13_SIGMA13(value) ((HSMC_SIGMA13_SIGMA13_Msk & ((value) << HSMC_SIGMA13_SIGMA13_Pos)))
/* -------- HSMC_SIGMA14 : (SMC Offset: 0x560) PMECC Error Location SIGMA 14 Register -------- */
#define HSMC_SIGMA14_SIGMA14_Pos 0
#define HSMC_SIGMA14_SIGMA14_Msk (0x3fffu << HSMC_SIGMA14_SIGMA14_Pos) /**< \brief (HSMC_SIGMA14) Coefficient of degree x in the SIGMA polynomial. */
#define HSMC_SIGMA14_SIGMA14(value) ((HSMC_SIGMA14_SIGMA14_Msk & ((value) << HSMC_SIGMA14_SIGMA14_Pos)))
/* -------- HSMC_SIGMA15 : (SMC Offset: 0x564) PMECC Error Location SIGMA 15 Register -------- */
#define HSMC_SIGMA15_SIGMA15_Pos 0
#define HSMC_SIGMA15_SIGMA15_Msk (0x3fffu << HSMC_SIGMA15_SIGMA15_Pos) /**< \brief (HSMC_SIGMA15) Coefficient of degree x in the SIGMA polynomial. */
#define HSMC_SIGMA15_SIGMA15(value) ((HSMC_SIGMA15_SIGMA15_Msk & ((value) << HSMC_SIGMA15_SIGMA15_Pos)))
/* -------- HSMC_SIGMA16 : (SMC Offset: 0x568) PMECC Error Location SIGMA 16 Register -------- */
#define HSMC_SIGMA16_SIGMA16_Pos 0
#define HSMC_SIGMA16_SIGMA16_Msk (0x3fffu << HSMC_SIGMA16_SIGMA16_Pos) /**< \brief (HSMC_SIGMA16) Coefficient of degree x in the SIGMA polynomial. */
#define HSMC_SIGMA16_SIGMA16(value) ((HSMC_SIGMA16_SIGMA16_Msk & ((value) << HSMC_SIGMA16_SIGMA16_Pos)))
/* -------- HSMC_SIGMA17 : (SMC Offset: 0x56C) PMECC Error Location SIGMA 17 Register -------- */
#define HSMC_SIGMA17_SIGMA17_Pos 0
#define HSMC_SIGMA17_SIGMA17_Msk (0x3fffu << HSMC_SIGMA17_SIGMA17_Pos) /**< \brief (HSMC_SIGMA17) Coefficient of degree x in the SIGMA polynomial. */
#define HSMC_SIGMA17_SIGMA17(value) ((HSMC_SIGMA17_SIGMA17_Msk & ((value) << HSMC_SIGMA17_SIGMA17_Pos)))
/* -------- HSMC_SIGMA18 : (SMC Offset: 0x570) PMECC Error Location SIGMA 18 Register -------- */
#define HSMC_SIGMA18_SIGMA18_Pos 0
#define HSMC_SIGMA18_SIGMA18_Msk (0x3fffu << HSMC_SIGMA18_SIGMA18_Pos) /**< \brief (HSMC_SIGMA18) Coefficient of degree x in the SIGMA polynomial. */
#define HSMC_SIGMA18_SIGMA18(value) ((HSMC_SIGMA18_SIGMA18_Msk & ((value) << HSMC_SIGMA18_SIGMA18_Pos)))
/* -------- HSMC_SIGMA19 : (SMC Offset: 0x574) PMECC Error Location SIGMA 19 Register -------- */
#define HSMC_SIGMA19_SIGMA19_Pos 0
#define HSMC_SIGMA19_SIGMA19_Msk (0x3fffu << HSMC_SIGMA19_SIGMA19_Pos) /**< \brief (HSMC_SIGMA19) Coefficient of degree x in the SIGMA polynomial. */
#define HSMC_SIGMA19_SIGMA19(value) ((HSMC_SIGMA19_SIGMA19_Msk & ((value) << HSMC_SIGMA19_SIGMA19_Pos)))
/* -------- HSMC_SIGMA20 : (SMC Offset: 0x578) PMECC Error Location SIGMA 20 Register -------- */
#define HSMC_SIGMA20_SIGMA20_Pos 0
#define HSMC_SIGMA20_SIGMA20_Msk (0x3fffu << HSMC_SIGMA20_SIGMA20_Pos) /**< \brief (HSMC_SIGMA20) Coefficient of degree x in the SIGMA polynomial. */
#define HSMC_SIGMA20_SIGMA20(value) ((HSMC_SIGMA20_SIGMA20_Msk & ((value) << HSMC_SIGMA20_SIGMA20_Pos)))
/* -------- HSMC_SIGMA21 : (SMC Offset: 0x57C) PMECC Error Location SIGMA 21 Register -------- */
#define HSMC_SIGMA21_SIGMA21_Pos 0
#define HSMC_SIGMA21_SIGMA21_Msk (0x3fffu << HSMC_SIGMA21_SIGMA21_Pos) /**< \brief (HSMC_SIGMA21) Coefficient of degree x in the SIGMA polynomial. */
#define HSMC_SIGMA21_SIGMA21(value) ((HSMC_SIGMA21_SIGMA21_Msk & ((value) << HSMC_SIGMA21_SIGMA21_Pos)))
/* -------- HSMC_SIGMA22 : (SMC Offset: 0x580) PMECC Error Location SIGMA 22 Register -------- */
#define HSMC_SIGMA22_SIGMA22_Pos 0
#define HSMC_SIGMA22_SIGMA22_Msk (0x3fffu << HSMC_SIGMA22_SIGMA22_Pos) /**< \brief (HSMC_SIGMA22) Coefficient of degree x in the SIGMA polynomial. */
#define HSMC_SIGMA22_SIGMA22(value) ((HSMC_SIGMA22_SIGMA22_Msk & ((value) << HSMC_SIGMA22_SIGMA22_Pos)))
/* -------- HSMC_SIGMA23 : (SMC Offset: 0x584) PMECC Error Location SIGMA 23 Register -------- */
#define HSMC_SIGMA23_SIGMA23_Pos 0
#define HSMC_SIGMA23_SIGMA23_Msk (0x3fffu << HSMC_SIGMA23_SIGMA23_Pos) /**< \brief (HSMC_SIGMA23) Coefficient of degree x in the SIGMA polynomial. */
#define HSMC_SIGMA23_SIGMA23(value) ((HSMC_SIGMA23_SIGMA23_Msk & ((value) << HSMC_SIGMA23_SIGMA23_Pos)))
/* -------- HSMC_SIGMA24 : (SMC Offset: 0x588) PMECC Error Location SIGMA 24 Register -------- */
#define HSMC_SIGMA24_SIGMA24_Pos 0
#define HSMC_SIGMA24_SIGMA24_Msk (0x3fffu << HSMC_SIGMA24_SIGMA24_Pos) /**< \brief (HSMC_SIGMA24) Coefficient of degree x in the SIGMA polynomial. */
#define HSMC_SIGMA24_SIGMA24(value) ((HSMC_SIGMA24_SIGMA24_Msk & ((value) << HSMC_SIGMA24_SIGMA24_Pos)))
/* -------- HSMC_SIGMA25 : (SMC Offset: 0x58C) PMECC Error Location SIGMA 25 Register -------- */
#define HSMC_SIGMA25_SIGMA25_Pos 0
#define HSMC_SIGMA25_SIGMA25_Msk (0x3fffu << HSMC_SIGMA25_SIGMA25_Pos) /**< \brief (HSMC_SIGMA25) Coefficient of degree x in the SIGMA polynomial. */
#define HSMC_SIGMA25_SIGMA25(value) ((HSMC_SIGMA25_SIGMA25_Msk & ((value) << HSMC_SIGMA25_SIGMA25_Pos)))
/* -------- HSMC_SIGMA26 : (SMC Offset: 0x590) PMECC Error Location SIGMA 26 Register -------- */
#define HSMC_SIGMA26_SIGMA26_Pos 0
#define HSMC_SIGMA26_SIGMA26_Msk (0x3fffu << HSMC_SIGMA26_SIGMA26_Pos) /**< \brief (HSMC_SIGMA26) Coefficient of degree x in the SIGMA polynomial. */
#define HSMC_SIGMA26_SIGMA26(value) ((HSMC_SIGMA26_SIGMA26_Msk & ((value) << HSMC_SIGMA26_SIGMA26_Pos)))
/* -------- HSMC_SIGMA27 : (SMC Offset: 0x594) PMECC Error Location SIGMA 27 Register -------- */
#define HSMC_SIGMA27_SIGMA27_Pos 0
#define HSMC_SIGMA27_SIGMA27_Msk (0x3fffu << HSMC_SIGMA27_SIGMA27_Pos) /**< \brief (HSMC_SIGMA27) Coefficient of degree x in the SIGMA polynomial. */
#define HSMC_SIGMA27_SIGMA27(value) ((HSMC_SIGMA27_SIGMA27_Msk & ((value) << HSMC_SIGMA27_SIGMA27_Pos)))
/* -------- HSMC_SIGMA28 : (SMC Offset: 0x598) PMECC Error Location SIGMA 28 Register -------- */
#define HSMC_SIGMA28_SIGMA28_Pos 0
#define HSMC_SIGMA28_SIGMA28_Msk (0x3fffu << HSMC_SIGMA28_SIGMA28_Pos) /**< \brief (HSMC_SIGMA28) Coefficient of degree x in the SIGMA polynomial. */
#define HSMC_SIGMA28_SIGMA28(value) ((HSMC_SIGMA28_SIGMA28_Msk & ((value) << HSMC_SIGMA28_SIGMA28_Pos)))
/* -------- HSMC_SIGMA29 : (SMC Offset: 0x59C) PMECC Error Location SIGMA 29 Register -------- */
#define HSMC_SIGMA29_SIGMA29_Pos 0
#define HSMC_SIGMA29_SIGMA29_Msk (0x3fffu << HSMC_SIGMA29_SIGMA29_Pos) /**< \brief (HSMC_SIGMA29) Coefficient of degree x in the SIGMA polynomial. */
#define HSMC_SIGMA29_SIGMA29(value) ((HSMC_SIGMA29_SIGMA29_Msk & ((value) << HSMC_SIGMA29_SIGMA29_Pos)))
/* -------- HSMC_SIGMA30 : (SMC Offset: 0x5A0) PMECC Error Location SIGMA 30 Register -------- */
#define HSMC_SIGMA30_SIGMA30_Pos 0
#define HSMC_SIGMA30_SIGMA30_Msk (0x3fffu << HSMC_SIGMA30_SIGMA30_Pos) /**< \brief (HSMC_SIGMA30) Coefficient of degree x in the SIGMA polynomial. */
#define HSMC_SIGMA30_SIGMA30(value) ((HSMC_SIGMA30_SIGMA30_Msk & ((value) << HSMC_SIGMA30_SIGMA30_Pos)))
/* -------- HSMC_SIGMA31 : (SMC Offset: 0x5A4) PMECC Error Location SIGMA 31 Register -------- */
#define HSMC_SIGMA31_SIGMA31_Pos 0
#define HSMC_SIGMA31_SIGMA31_Msk (0x3fffu << HSMC_SIGMA31_SIGMA31_Pos) /**< \brief (HSMC_SIGMA31) Coefficient of degree x in the SIGMA polynomial. */
#define HSMC_SIGMA31_SIGMA31(value) ((HSMC_SIGMA31_SIGMA31_Msk & ((value) << HSMC_SIGMA31_SIGMA31_Pos)))
/* -------- HSMC_SIGMA32 : (SMC Offset: 0x5A8) PMECC Error Location SIGMA 32 Register -------- */
#define HSMC_SIGMA32_SIGMA32_Pos 0
#define HSMC_SIGMA32_SIGMA32_Msk (0x3fffu << HSMC_SIGMA32_SIGMA32_Pos) /**< \brief (HSMC_SIGMA32) Coefficient of degree x in the SIGMA polynomial. */
#define HSMC_SIGMA32_SIGMA32(value) ((HSMC_SIGMA32_SIGMA32_Msk & ((value) << HSMC_SIGMA32_SIGMA32_Pos)))
/* -------- HSMC_ERRLOC[32] : (SMC Offset: 0x5AC) PMECC Error Location 0 Register -------- */
#define HSMC_ERRLOC_ERRLOCN_Pos 0
#define HSMC_ERRLOC_ERRLOCN_Msk (0x3fffu << HSMC_ERRLOC_ERRLOCN_Pos) /**< \brief (HSMC_ERRLOC[32]) Error Position within the Set {sector area, spare area} */
/* -------- HSMC_SETUP : (SMC Offset: N/A) HSMC Setup Register -------- */
#define HSMC_SETUP_NWE_SETUP_Pos 0
#define HSMC_SETUP_NWE_SETUP_Msk (0x3fu << HSMC_SETUP_NWE_SETUP_Pos) /**< \brief (HSMC_SETUP) NWE Setup Length */
#define HSMC_SETUP_NWE_SETUP(value) ((HSMC_SETUP_NWE_SETUP_Msk & ((value) << HSMC_SETUP_NWE_SETUP_Pos)))
#define HSMC_SETUP_NCS_WR_SETUP_Pos 8
#define HSMC_SETUP_NCS_WR_SETUP_Msk (0x3fu << HSMC_SETUP_NCS_WR_SETUP_Pos) /**< \brief (HSMC_SETUP) NCS Setup Length in Write Access */
#define HSMC_SETUP_NCS_WR_SETUP(value) ((HSMC_SETUP_NCS_WR_SETUP_Msk & ((value) << HSMC_SETUP_NCS_WR_SETUP_Pos)))
#define HSMC_SETUP_NRD_SETUP_Pos 16
#define HSMC_SETUP_NRD_SETUP_Msk (0x3fu << HSMC_SETUP_NRD_SETUP_Pos) /**< \brief (HSMC_SETUP) NRD Setup Length */
#define HSMC_SETUP_NRD_SETUP(value) ((HSMC_SETUP_NRD_SETUP_Msk & ((value) << HSMC_SETUP_NRD_SETUP_Pos)))
#define HSMC_SETUP_NCS_RD_SETUP_Pos 24
#define HSMC_SETUP_NCS_RD_SETUP_Msk (0x3fu << HSMC_SETUP_NCS_RD_SETUP_Pos) /**< \brief (HSMC_SETUP) NCS Setup Length in Read Access */
#define HSMC_SETUP_NCS_RD_SETUP(value) ((HSMC_SETUP_NCS_RD_SETUP_Msk & ((value) << HSMC_SETUP_NCS_RD_SETUP_Pos)))
/* -------- HSMC_PULSE : (SMC Offset: N/A) HSMC Pulse Register -------- */
#define HSMC_PULSE_NWE_PULSE_Pos 0
#define HSMC_PULSE_NWE_PULSE_Msk (0x3fu << HSMC_PULSE_NWE_PULSE_Pos) /**< \brief (HSMC_PULSE) NWE Pulse Length */
#define HSMC_PULSE_NWE_PULSE(value) ((HSMC_PULSE_NWE_PULSE_Msk & ((value) << HSMC_PULSE_NWE_PULSE_Pos)))
#define HSMC_PULSE_NCS_WR_PULSE_Pos 8
#define HSMC_PULSE_NCS_WR_PULSE_Msk (0x3fu << HSMC_PULSE_NCS_WR_PULSE_Pos) /**< \brief (HSMC_PULSE) NCS Pulse Length in WRITE Access */
#define HSMC_PULSE_NCS_WR_PULSE(value) ((HSMC_PULSE_NCS_WR_PULSE_Msk & ((value) << HSMC_PULSE_NCS_WR_PULSE_Pos)))
#define HSMC_PULSE_NRD_PULSE_Pos 16
#define HSMC_PULSE_NRD_PULSE_Msk (0x3fu << HSMC_PULSE_NRD_PULSE_Pos) /**< \brief (HSMC_PULSE) NRD Pulse Length */
#define HSMC_PULSE_NRD_PULSE(value) ((HSMC_PULSE_NRD_PULSE_Msk & ((value) << HSMC_PULSE_NRD_PULSE_Pos)))
#define HSMC_PULSE_NCS_RD_PULSE_Pos 24
#define HSMC_PULSE_NCS_RD_PULSE_Msk (0x3fu << HSMC_PULSE_NCS_RD_PULSE_Pos) /**< \brief (HSMC_PULSE) NCS Pulse Length in READ Access */
#define HSMC_PULSE_NCS_RD_PULSE(value) ((HSMC_PULSE_NCS_RD_PULSE_Msk & ((value) << HSMC_PULSE_NCS_RD_PULSE_Pos)))
/* -------- HSMC_CYCLE : (SMC Offset: N/A) HSMC Cycle Register -------- */
#define HSMC_CYCLE_NWE_CYCLE_Pos 0
#define HSMC_CYCLE_NWE_CYCLE_Msk (0x1ffu << HSMC_CYCLE_NWE_CYCLE_Pos) /**< \brief (HSMC_CYCLE) Total Write Cycle Length */
#define HSMC_CYCLE_NWE_CYCLE(value) ((HSMC_CYCLE_NWE_CYCLE_Msk & ((value) << HSMC_CYCLE_NWE_CYCLE_Pos)))
#define HSMC_CYCLE_NRD_CYCLE_Pos 16
#define HSMC_CYCLE_NRD_CYCLE_Msk (0x1ffu << HSMC_CYCLE_NRD_CYCLE_Pos) /**< \brief (HSMC_CYCLE) Total Read Cycle Length */
#define HSMC_CYCLE_NRD_CYCLE(value) ((HSMC_CYCLE_NRD_CYCLE_Msk & ((value) << HSMC_CYCLE_NRD_CYCLE_Pos)))
/* -------- HSMC_TIMINGS : (SMC Offset: N/A) HSMC Timings Register -------- */
#define HSMC_TIMINGS_TCLR_Pos 0
#define HSMC_TIMINGS_TCLR_Msk (0xfu << HSMC_TIMINGS_TCLR_Pos) /**< \brief (HSMC_TIMINGS) CLE to REN Low Delay */
#define HSMC_TIMINGS_TCLR(value) ((HSMC_TIMINGS_TCLR_Msk & ((value) << HSMC_TIMINGS_TCLR_Pos)))
#define HSMC_TIMINGS_TADL_Pos 4
#define HSMC_TIMINGS_TADL_Msk (0xfu << HSMC_TIMINGS_TADL_Pos) /**< \brief (HSMC_TIMINGS) ALE to Data Start */
#define HSMC_TIMINGS_TADL(value) ((HSMC_TIMINGS_TADL_Msk & ((value) << HSMC_TIMINGS_TADL_Pos)))
#define HSMC_TIMINGS_TAR_Pos 8
#define HSMC_TIMINGS_TAR_Msk (0xfu << HSMC_TIMINGS_TAR_Pos) /**< \brief (HSMC_TIMINGS) ALE to REN Low Delay */
#define HSMC_TIMINGS_TAR(value) ((HSMC_TIMINGS_TAR_Msk & ((value) << HSMC_TIMINGS_TAR_Pos)))
#define HSMC_TIMINGS_OCMS (0x1u << 12) /**< \brief (HSMC_TIMINGS) Off Chip Memory Scrambling Enable */
#define HSMC_TIMINGS_TRR_Pos 16
#define HSMC_TIMINGS_TRR_Msk (0xfu << HSMC_TIMINGS_TRR_Pos) /**< \brief (HSMC_TIMINGS) Ready to REN Low Delay */
#define HSMC_TIMINGS_TRR(value) ((HSMC_TIMINGS_TRR_Msk & ((value) << HSMC_TIMINGS_TRR_Pos)))
#define HSMC_TIMINGS_TWB_Pos 24
#define HSMC_TIMINGS_TWB_Msk (0xfu << HSMC_TIMINGS_TWB_Pos) /**< \brief (HSMC_TIMINGS) WEN High to REN to Busy */
#define HSMC_TIMINGS_TWB(value) ((HSMC_TIMINGS_TWB_Msk & ((value) << HSMC_TIMINGS_TWB_Pos)))
#define HSMC_TIMINGS_RBNSEL_Pos 28
#define HSMC_TIMINGS_RBNSEL_Msk (0x7u << HSMC_TIMINGS_RBNSEL_Pos) /**< \brief (HSMC_TIMINGS) Ready/Busy Line Selection */
#define HSMC_TIMINGS_RBNSEL(value) ((HSMC_TIMINGS_RBNSEL_Msk & ((value) << HSMC_TIMINGS_RBNSEL_Pos)))
#define HSMC_TIMINGS_NFSEL (0x1u << 31) /**< \brief (HSMC_TIMINGS) NAND Flash Selection */
/* -------- HSMC_MODE : (SMC Offset: N/A) HSMC Mode Register -------- */
#define HSMC_MODE_READ_MODE (0x1u << 0) /**< \brief (HSMC_MODE) Selection of the Control Signal for Read Operation */
#define   HSMC_MODE_READ_MODE_NCS_CTRL (0x0u << 0) /**< \brief (HSMC_MODE) The Read operation is controlled by the NCS signal. */
#define   HSMC_MODE_READ_MODE_NRD_CTRL (0x1u << 0) /**< \brief (HSMC_MODE) The Read operation is controlled by the NRD signal. */
#define HSMC_MODE_WRITE_MODE (0x1u << 1) /**< \brief (HSMC_MODE) Selection of the Control Signal for Write Operation */
#define   HSMC_MODE_WRITE_MODE_NCS_CTRL (0x0u << 1) /**< \brief (HSMC_MODE) The Write operation is controller by the NCS signal. */
#define   HSMC_MODE_WRITE_MODE_NWE_CTRL (0x1u << 1) /**< \brief (HSMC_MODE) The Write operation is controlled by the NWE signal */
#define HSMC_MODE_EXNW_MODE_Pos 4
#define HSMC_MODE_EXNW_MODE_Msk (0x3u << HSMC_MODE_EXNW_MODE_Pos) /**< \brief (HSMC_MODE) NWAIT Mode */
#define   HSMC_MODE_EXNW_MODE_DISABLED (0x0u << 4) /**< \brief (HSMC_MODE) Disabled-The NWAIT input signal is ignored on the corresponding Chip Select. */
#define   HSMC_MODE_EXNW_MODE_FROZEN (0x2u << 4) /**< \brief (HSMC_MODE) Frozen Mode-If asserted, the NWAIT signal freezes the current read or write cycle. After deassertion, the read/write cycle is resumed from the point where it was stopped. */
#define   HSMC_MODE_EXNW_MODE_READY (0x3u << 4) /**< \brief (HSMC_MODE) Ready Mode-The NWAIT signal indicates the availability of the external device at the end of the pulse of the controlling read or write signal, to complete the access. If high, the access normally completes. If low, the access is extended until NWAIT returns high. */
#define HSMC_MODE_BAT (0x1u << 8) /**< \brief (HSMC_MODE) Byte Access Type */
#define   HSMC_MODE_BAT_BYTE_SELECT (0x0u << 8) /**< \brief (HSMC_MODE) Byte select access type:- Write operation is controlled using NCS, NWE, NBS0, NBS1.- Read operation is controlled using NCS, NRD, NBS0, NBS1. */
#define   HSMC_MODE_BAT_BYTE_WRITE (0x1u << 8) /**< \brief (HSMC_MODE) Byte write access type:- Write operation is controlled using NCS, NWR0, NWR1.- Read operation is controlled using NCS and NRD. */
#define HSMC_MODE_DBW (0x1u << 12) /**< \brief (HSMC_MODE) Data Bus Width */
#define   HSMC_MODE_DBW_BIT_8 (0x0u << 12) /**< \brief (HSMC_MODE) 8-bit bus */
#define   HSMC_MODE_DBW_BIT_16 (0x1u << 12) /**< \brief (HSMC_MODE) 16-bit bus */
#define HSMC_MODE_TDF_CYCLES_Pos 16
#define HSMC_MODE_TDF_CYCLES_Msk (0xfu << HSMC_MODE_TDF_CYCLES_Pos) /**< \brief (HSMC_MODE) Data Float Time */
#define HSMC_MODE_TDF_CYCLES(value) ((HSMC_MODE_TDF_CYCLES_Msk & ((value) << HSMC_MODE_TDF_CYCLES_Pos)))
#define HSMC_MODE_TDF_MODE (0x1u << 20) /**< \brief (HSMC_MODE) TDF Optimization */
/* -------- HSMC_OCMS : (SMC Offset: 0x7A0) HSMC Off Chip Memory Scrambling Register -------- */
#define HSMC_OCMS_SMSE (0x1u << 0) /**< \brief (HSMC_OCMS) Static Memory Controller Scrambling Enable */
#define HSMC_OCMS_SRSE (0x1u << 1) /**< \brief (HSMC_OCMS) NFC Internal SRAM Scrambling Enable */
/* -------- HSMC_KEY1 : (SMC Offset: 0x7A4) HSMC Off Chip Memory Scrambling KEY1 Register -------- */
#define HSMC_KEY1_KEY1_Pos 0
#define HSMC_KEY1_KEY1_Msk (0xffffffffu << HSMC_KEY1_KEY1_Pos) /**< \brief (HSMC_KEY1) Off Chip Memory Scrambling (OCMS) Key Part 1 */
#define HSMC_KEY1_KEY1(value) ((HSMC_KEY1_KEY1_Msk & ((value) << HSMC_KEY1_KEY1_Pos)))
/* -------- HSMC_KEY2 : (SMC Offset: 0x7A8) HSMC Off Chip Memory Scrambling KEY2 Register -------- */
#define HSMC_KEY2_KEY2_Pos 0
#define HSMC_KEY2_KEY2_Msk (0xffffffffu << HSMC_KEY2_KEY2_Pos) /**< \brief (HSMC_KEY2) Off Chip Memory Scrambling (OCMS) Key Part 2 */
#define HSMC_KEY2_KEY2(value) ((HSMC_KEY2_KEY2_Msk & ((value) << HSMC_KEY2_KEY2_Pos)))
/* -------- HSMC_WPMR : (SMC Offset: 0x7E4) HSMC Write Protection Mode Register -------- */
#define HSMC_WPMR_WPEN (0x1u << 0) /**< \brief (HSMC_WPMR) Write Protection Enable */
#define HSMC_WPMR_WPKEY_Pos 8
#define HSMC_WPMR_WPKEY_Msk (0xffffffu << HSMC_WPMR_WPKEY_Pos) /**< \brief (HSMC_WPMR) Write Protection Key */
#define   HSMC_WPMR_WPKEY_PASSWD (0x534D43u << 8) /**< \brief (HSMC_WPMR) Writing any other value in this field aborts the write operation of bit WPEN.Always reads as 0. */
/* -------- HSMC_WPSR : (SMC Offset: 0x7E8) HSMC Write Protection Status Register -------- */
#define HSMC_WPSR_WPVS (0x1u << 0) /**< \brief (HSMC_WPSR) Write Protection Violation Status */
#define HSMC_WPSR_WPVSRC_Pos 8
#define HSMC_WPSR_WPVSRC_Msk (0xffffu << HSMC_WPSR_WPVSRC_Pos) /**< \brief (HSMC_WPSR) Write Protection Violation Source */
/* -------- HSMC_ADDRSIZE : (SMC Offset: 0x7EC) HSMC Address Size Register -------- */
#define HSMC_ADDRSIZE_ADDRSIZE_Pos 0
#define HSMC_ADDRSIZE_ADDRSIZE_Msk (0xffffu << HSMC_ADDRSIZE_ADDRSIZE_Pos) /**< \brief (HSMC_ADDRSIZE) Peripheral Bus Address Area Size */
/* -------- HSMC_IPNAME[2] : (SMC Offset: 0x7F0) HSMC Name1 Register -------- */
#define HSMC_IPNAME_IPNAME_Pos 0
#define HSMC_IPNAME_IPNAME_Msk (0xffffffffu << HSMC_IPNAME_IPNAME_Pos) /**< \brief (HSMC_IPNAME[2]) ASCII Hardware Module Name */
/* -------- HSMC_VERSION : (SMC Offset: 0x7FC) HSMC Version Register -------- */
#define HSMC_VERSION_VERSION_Pos 0
#define HSMC_VERSION_VERSION_Msk (0xfffu << HSMC_VERSION_VERSION_Pos) /**< \brief (HSMC_VERSION) Hardware Version Number */
#define HSMC_VERSION_MFN_Pos 16
#define HSMC_VERSION_MFN_Msk (0x7u << HSMC_VERSION_MFN_Pos) /**< \brief (HSMC_VERSION) Metal Fix Number */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR Serial Peripheral Interface */
/* ============================================================================= */
/** \addtogroup SAMA5D2_SPI Serial Peripheral Interface */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief Spi hardware registers */
typedef struct {
  __O  uint32_t SPI_CR;        /**< \brief (Spi Offset: 0x00) Control Register */
  __IO uint32_t SPI_MR;        /**< \brief (Spi Offset: 0x04) Mode Register */
  __I  uint32_t SPI_RDR;       /**< \brief (Spi Offset: 0x08) Receive Data Register */
  __O  uint32_t SPI_TDR;       /**< \brief (Spi Offset: 0x0C) Transmit Data Register */
  __I  uint32_t SPI_SR;        /**< \brief (Spi Offset: 0x10) Status Register */
  __O  uint32_t SPI_IER;       /**< \brief (Spi Offset: 0x14) Interrupt Enable Register */
  __O  uint32_t SPI_IDR;       /**< \brief (Spi Offset: 0x18) Interrupt Disable Register */
  __I  uint32_t SPI_IMR;       /**< \brief (Spi Offset: 0x1C) Interrupt Mask Register */
  __I  uint32_t Reserved1[4];
  __IO uint32_t SPI_CSR[4];    /**< \brief (Spi Offset: 0x30) Chip Select Register */
  __I  uint32_t Reserved2[2];
  __IO uint32_t SPI_CMPR;      /**< \brief (Spi Offset: 0x48) SPI Comparison Register */
  __I  uint32_t Reserved3[38];
  __IO uint32_t SPI_WPMR;      /**< \brief (Spi Offset: 0xE4) Write Protection Mode Register */
  __I  uint32_t SPI_WPSR;      /**< \brief (Spi Offset: 0xE8) Write Protection Status Register */
  __I  uint32_t Reserved4[4];
  __I  uint32_t SPI_VERSION;   /**< \brief (Spi Offset: 0x00FC) Version Register */
} Spi;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- SPI_CR : (SPI Offset: 0x00) Control Register -------- */
#define SPI_CR_SPIEN (0x1u << 0) /**< \brief (SPI_CR) SPI Enable */
#define SPI_CR_SPIDIS (0x1u << 1) /**< \brief (SPI_CR) SPI Disable */
#define SPI_CR_SWRST (0x1u << 7) /**< \brief (SPI_CR) SPI Software Reset */
#define SPI_CR_REQCLR (0x1u << 12) /**< \brief (SPI_CR) Request to Clear the Comparison Trigger */
#define SPI_CR_LASTXFER (0x1u << 24) /**< \brief (SPI_CR) Last Transfer */
/* -------- SPI_MR : (SPI Offset: 0x04) Mode Register -------- */
#define SPI_MR_MSTR (0x1u << 0) /**< \brief (SPI_MR) Master/Slave Mode */
#define SPI_MR_PS (0x1u << 1) /**< \brief (SPI_MR) Peripheral Select */
#define SPI_MR_PCSDEC (0x1u << 2) /**< \brief (SPI_MR) Chip Select Decode */
#define SPI_MR_BRSRCCLK (0x1u << 3) /**< \brief (SPI_MR) Bit Rate Source Clock */
#define   SPI_MR_BRSRCCLK_PERIPH_CLK (0x0u << 3) /**< \brief (SPI_MR) The peripheral clock is the source clock for the bit rate generation. */
#define   SPI_MR_BRSRCCLK_PMC_PCK (0x1u << 3) /**< \brief (SPI_MR) PMC PCKx is the source clock for the bit rate generation, thus the bit rate can be independent of the core/peripheral clock. */
#define SPI_MR_MODFDIS (0x1u << 4) /**< \brief (SPI_MR) Mode Fault Detection */
#define SPI_MR_WDRBT (0x1u << 5) /**< \brief (SPI_MR) Wait Data Read Before Transfer */
#define SPI_MR_LLB (0x1u << 7) /**< \brief (SPI_MR) Local Loopback Enable */
#define SPI_MR_CMPMODE (0x1u << 12) /**< \brief (SPI_MR) Comparison Mode */
#define   SPI_MR_CMPMODE_FLAG_ONLY (0x0u << 12) /**< \brief (SPI_MR) Any character is received and comparison function drives CMP flag. */
#define   SPI_MR_CMPMODE_START_CONDITION (0x1u << 12) /**< \brief (SPI_MR) Comparison condition must be met to start reception of all incoming characters until REQCLR is set. */
#define SPI_MR_PCS_Pos 16
#define SPI_MR_PCS_Msk (0xfu << SPI_MR_PCS_Pos) /**< \brief (SPI_MR) Peripheral Chip Select */
#define SPI_MR_PCS(value) ((SPI_MR_PCS_Msk & ((value) << SPI_MR_PCS_Pos)))
#define SPI_MR_DLYBCS_Pos 24
#define SPI_MR_DLYBCS_Msk (0xffu << SPI_MR_DLYBCS_Pos) /**< \brief (SPI_MR) Delay Between Chip Selects */
#define SPI_MR_DLYBCS(value) ((SPI_MR_DLYBCS_Msk & ((value) << SPI_MR_DLYBCS_Pos)))
/* -------- SPI_RDR : (SPI Offset: 0x08) Receive Data Register -------- */
#define SPI_RDR_RD_Pos 0
#define SPI_RDR_RD_Msk (0xffffu << SPI_RDR_RD_Pos) /**< \brief (SPI_RDR) Receive Data */
#define SPI_RDR_PCS_Pos 16
#define SPI_RDR_PCS_Msk (0xfu << SPI_RDR_PCS_Pos) /**< \brief (SPI_RDR) Peripheral Chip Select */
/* -------- SPI_TDR : (SPI Offset: 0x0C) Transmit Data Register -------- */
#define SPI_TDR_TD_Pos 0
#define SPI_TDR_TD_Msk (0xffffu << SPI_TDR_TD_Pos) /**< \brief (SPI_TDR) Transmit Data */
#define SPI_TDR_TD(value) ((SPI_TDR_TD_Msk & ((value) << SPI_TDR_TD_Pos)))
#define SPI_TDR_PCS_Pos 16
#define SPI_TDR_PCS_Msk (0xfu << SPI_TDR_PCS_Pos) /**< \brief (SPI_TDR) Peripheral Chip Select */
#define SPI_TDR_PCS(value) ((SPI_TDR_PCS_Msk & ((value) << SPI_TDR_PCS_Pos)))
#define SPI_TDR_LASTXFER (0x1u << 24) /**< \brief (SPI_TDR) Last Transfer */
/* -------- SPI_SR : (SPI Offset: 0x10) Status Register -------- */
#define SPI_SR_RDRF (0x1u << 0) /**< \brief (SPI_SR) Receive Data Register Full */
#define SPI_SR_TDRE (0x1u << 1) /**< \brief (SPI_SR) Transmit Data Register Empty */
#define SPI_SR_MODF (0x1u << 2) /**< \brief (SPI_SR) Mode Fault Error */
#define SPI_SR_OVRES (0x1u << 3) /**< \brief (SPI_SR) Overrun Error Status */
#define SPI_SR_NSSR (0x1u << 8) /**< \brief (SPI_SR) NSS Rising */
#define SPI_SR_TXEMPTY (0x1u << 9) /**< \brief (SPI_SR) Transmission Registers Empty */
#define SPI_SR_UNDES (0x1u << 10) /**< \brief (SPI_SR) Underrun Error Status (Slave mode Only) */
#define SPI_SR_CMP (0x1u << 11) /**< \brief (SPI_SR) Comparison Status */
#define SPI_SR_SPIENS (0x1u << 16) /**< \brief (SPI_SR) SPI Enable Status */
/* -------- SPI_IER : (SPI Offset: 0x14) Interrupt Enable Register -------- */
#define SPI_IER_RDRF (0x1u << 0) /**< \brief (SPI_IER) Receive Data Register Full Interrupt Enable */
#define SPI_IER_TDRE (0x1u << 1) /**< \brief (SPI_IER) SPI Transmit Data Register Empty Interrupt Enable */
#define SPI_IER_MODF (0x1u << 2) /**< \brief (SPI_IER) Mode Fault Error Interrupt Enable */
#define SPI_IER_OVRES (0x1u << 3) /**< \brief (SPI_IER) Overrun Error Interrupt Enable */
#define SPI_IER_NSSR (0x1u << 8) /**< \brief (SPI_IER) NSS Rising Interrupt Enable */
#define SPI_IER_TXEMPTY (0x1u << 9) /**< \brief (SPI_IER) Transmission Registers Empty Enable */
#define SPI_IER_UNDES (0x1u << 10) /**< \brief (SPI_IER) Underrun Error Interrupt Enable */
#define SPI_IER_CMP (0x1u << 11) /**< \brief (SPI_IER) Comparison Interrupt Enable */
/* -------- SPI_IDR : (SPI Offset: 0x18) Interrupt Disable Register -------- */
#define SPI_IDR_RDRF (0x1u << 0) /**< \brief (SPI_IDR) Receive Data Register Full Interrupt Disable */
#define SPI_IDR_TDRE (0x1u << 1) /**< \brief (SPI_IDR) SPI Transmit Data Register Empty Interrupt Disable */
#define SPI_IDR_MODF (0x1u << 2) /**< \brief (SPI_IDR) Mode Fault Error Interrupt Disable */
#define SPI_IDR_OVRES (0x1u << 3) /**< \brief (SPI_IDR) Overrun Error Interrupt Disable */
#define SPI_IDR_NSSR (0x1u << 8) /**< \brief (SPI_IDR) NSS Rising Interrupt Disable */
#define SPI_IDR_TXEMPTY (0x1u << 9) /**< \brief (SPI_IDR) Transmission Registers Empty Disable */
#define SPI_IDR_UNDES (0x1u << 10) /**< \brief (SPI_IDR) Underrun Error Interrupt Disable */
#define SPI_IDR_CMP (0x1u << 11) /**< \brief (SPI_IDR) Comparison Interrupt Disable */
/* -------- SPI_IMR : (SPI Offset: 0x1C) Interrupt Mask Register -------- */
#define SPI_IMR_RDRF (0x1u << 0) /**< \brief (SPI_IMR) Receive Data Register Full Interrupt Mask */
#define SPI_IMR_TDRE (0x1u << 1) /**< \brief (SPI_IMR) SPI Transmit Data Register Empty Interrupt Mask */
#define SPI_IMR_MODF (0x1u << 2) /**< \brief (SPI_IMR) Mode Fault Error Interrupt Mask */
#define SPI_IMR_OVRES (0x1u << 3) /**< \brief (SPI_IMR) Overrun Error Interrupt Mask */
#define SPI_IMR_NSSR (0x1u << 8) /**< \brief (SPI_IMR) NSS Rising Interrupt Mask */
#define SPI_IMR_TXEMPTY (0x1u << 9) /**< \brief (SPI_IMR) Transmission Registers Empty Mask */
#define SPI_IMR_UNDES (0x1u << 10) /**< \brief (SPI_IMR) Underrun Error Interrupt Mask */
#define SPI_IMR_CMP (0x1u << 11) /**< \brief (SPI_IMR) Comparison Interrupt Mask */
/* -------- SPI_CSR[4] : (SPI Offset: 0x30) Chip Select Register -------- */
#define SPI_CSR_CPOL (0x1u << 0) /**< \brief (SPI_CSR[4]) Clock Polarity */
#define SPI_CSR_NCPHA (0x1u << 1) /**< \brief (SPI_CSR[4]) Clock Phase */
#define SPI_CSR_CSNAAT (0x1u << 2) /**< \brief (SPI_CSR[4]) Chip Select Not Active After Transfer (Ignored if CSAAT = 1) */
#define SPI_CSR_CSAAT (0x1u << 3) /**< \brief (SPI_CSR[4]) Chip Select Active After Transfer */
#define SPI_CSR_BITS_Pos 4
#define SPI_CSR_BITS_Msk (0xfu << SPI_CSR_BITS_Pos) /**< \brief (SPI_CSR[4]) Bits Per Transfer */
#define   SPI_CSR_BITS_8_BIT (0x0u << 4) /**< \brief (SPI_CSR[4]) 8 bits for transfer */
#define   SPI_CSR_BITS_9_BIT (0x1u << 4) /**< \brief (SPI_CSR[4]) 9 bits for transfer */
#define   SPI_CSR_BITS_10_BIT (0x2u << 4) /**< \brief (SPI_CSR[4]) 10 bits for transfer */
#define   SPI_CSR_BITS_11_BIT (0x3u << 4) /**< \brief (SPI_CSR[4]) 11 bits for transfer */
#define   SPI_CSR_BITS_12_BIT (0x4u << 4) /**< \brief (SPI_CSR[4]) 12 bits for transfer */
#define   SPI_CSR_BITS_13_BIT (0x5u << 4) /**< \brief (SPI_CSR[4]) 13 bits for transfer */
#define   SPI_CSR_BITS_14_BIT (0x6u << 4) /**< \brief (SPI_CSR[4]) 14 bits for transfer */
#define   SPI_CSR_BITS_15_BIT (0x7u << 4) /**< \brief (SPI_CSR[4]) 15 bits for transfer */
#define   SPI_CSR_BITS_16_BIT (0x8u << 4) /**< \brief (SPI_CSR[4]) 16 bits for transfer */
#define SPI_CSR_SCBR_Pos 8
#define SPI_CSR_SCBR_Msk (0xffu << SPI_CSR_SCBR_Pos) /**< \brief (SPI_CSR[4]) Serial Clock Baud Rate */
#define SPI_CSR_SCBR(value) ((SPI_CSR_SCBR_Msk & ((value) << SPI_CSR_SCBR_Pos)))
#define SPI_CSR_DLYBS_Pos 16
#define SPI_CSR_DLYBS_Msk (0xffu << SPI_CSR_DLYBS_Pos) /**< \brief (SPI_CSR[4]) Delay Before SPCK */
#define SPI_CSR_DLYBS(value) ((SPI_CSR_DLYBS_Msk & ((value) << SPI_CSR_DLYBS_Pos)))
#define SPI_CSR_DLYBCT_Pos 24
#define SPI_CSR_DLYBCT_Msk (0xffu << SPI_CSR_DLYBCT_Pos) /**< \brief (SPI_CSR[4]) Delay Between Consecutive Transfers */
#define SPI_CSR_DLYBCT(value) ((SPI_CSR_DLYBCT_Msk & ((value) << SPI_CSR_DLYBCT_Pos)))
/* -------- SPI_CMPR : (SPI Offset: 0x48) SPI Comparison Register -------- */
#define SPI_CMPR_VAL1_Pos 0
#define SPI_CMPR_VAL1_Msk (0xffffu << SPI_CMPR_VAL1_Pos) /**< \brief (SPI_CMPR) First Comparison Value for Received Character */
#define SPI_CMPR_VAL1(value) ((SPI_CMPR_VAL1_Msk & ((value) << SPI_CMPR_VAL1_Pos)))
#define SPI_CMPR_VAL2_Pos 16
#define SPI_CMPR_VAL2_Msk (0xffffu << SPI_CMPR_VAL2_Pos) /**< \brief (SPI_CMPR) Second Comparison Value for Received Character */
#define SPI_CMPR_VAL2(value) ((SPI_CMPR_VAL2_Msk & ((value) << SPI_CMPR_VAL2_Pos)))
/* -------- SPI_WPMR : (SPI Offset: 0xE4) Write Protection Mode Register -------- */
#define SPI_WPMR_WPEN (0x1u << 0) /**< \brief (SPI_WPMR) Write Protection Enable */
#define SPI_WPMR_WPKEY_Pos 8
#define SPI_WPMR_WPKEY_Msk (0xffffffu << SPI_WPMR_WPKEY_Pos) /**< \brief (SPI_WPMR) Write Protect Key */
#define   SPI_WPMR_WPKEY_PASSWD (0x535049u << 8) /**< \brief (SPI_WPMR) Writing any other value in this field aborts the write operation of the WPEN bit.Always reads as 0. */
/* -------- SPI_WPSR : (SPI Offset: 0xE8) Write Protection Status Register -------- */
#define SPI_WPSR_WPVS (0x1u << 0) /**< \brief (SPI_WPSR) Write Protection Violation Status */
#define SPI_WPSR_WPVSRC_Pos 8
#define SPI_WPSR_WPVSRC_Msk (0xffu << SPI_WPSR_WPVSRC_Pos) /**< \brief (SPI_WPSR) Write Protection Violation Source */
/* -------- SPI_VERSION : (SPI Offset: 0x00FC) Version Register -------- */
#define SPI_VERSION_VERSION_Pos 0
#define SPI_VERSION_VERSION_Msk (0xfffu << SPI_VERSION_VERSION_Pos) /**< \brief (SPI_VERSION) Version of the Hardware Module */
#define SPI_VERSION_MFN_Pos 16
#define SPI_VERSION_MFN_Msk (0x7u << SPI_VERSION_MFN_Pos) /**< \brief (SPI_VERSION) Metal Fix Number */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR Synchronous Serial Controller */
/* ============================================================================= */
/** \addtogroup SAMA5D2_SSC Synchronous Serial Controller */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief Ssc hardware registers */
typedef struct {
  __O  uint32_t SSC_CR;        /**< \brief (Ssc Offset: 0x0) Control Register */
  __IO uint32_t SSC_CMR;       /**< \brief (Ssc Offset: 0x4) Clock Mode Register */
  __I  uint32_t Reserved1[2];
  __IO uint32_t SSC_RCMR;      /**< \brief (Ssc Offset: 0x10) Receive Clock Mode Register */
  __IO uint32_t SSC_RFMR;      /**< \brief (Ssc Offset: 0x14) Receive Frame Mode Register */
  __IO uint32_t SSC_TCMR;      /**< \brief (Ssc Offset: 0x18) Transmit Clock Mode Register */
  __IO uint32_t SSC_TFMR;      /**< \brief (Ssc Offset: 0x1C) Transmit Frame Mode Register */
  __I  uint32_t SSC_RHR;       /**< \brief (Ssc Offset: 0x20) Receive Holding Register */
  __O  uint32_t SSC_THR;       /**< \brief (Ssc Offset: 0x24) Transmit Holding Register */
  __I  uint32_t Reserved2[2];
  __I  uint32_t SSC_RSHR;      /**< \brief (Ssc Offset: 0x30) Receive Sync. Holding Register */
  __IO uint32_t SSC_TSHR;      /**< \brief (Ssc Offset: 0x34) Transmit Sync. Holding Register */
  __IO uint32_t SSC_RC0R;      /**< \brief (Ssc Offset: 0x38) Receive Compare 0 Register */
  __IO uint32_t SSC_RC1R;      /**< \brief (Ssc Offset: 0x3C) Receive Compare 1 Register */
  __I  uint32_t SSC_SR;        /**< \brief (Ssc Offset: 0x40) Status Register */
  __O  uint32_t SSC_IER;       /**< \brief (Ssc Offset: 0x44) Interrupt Enable Register */
  __O  uint32_t SSC_IDR;       /**< \brief (Ssc Offset: 0x48) Interrupt Disable Register */
  __I  uint32_t SSC_IMR;       /**< \brief (Ssc Offset: 0x4C) Interrupt Mask Register */
  __I  uint32_t Reserved3[37];
  __IO uint32_t SSC_WPMR;      /**< \brief (Ssc Offset: 0xE4) Write Protection Mode Register */
  __I  uint32_t SSC_WPSR;      /**< \brief (Ssc Offset: 0xE8) Write Protection Status Register */
  __I  uint32_t Reserved4[4];
  __I  uint32_t SSC_VERSION;   /**< \brief (Ssc Offset: 0xFC) Version Register */
} Ssc;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- SSC_CR : (SSC Offset: 0x0) Control Register -------- */
#define SSC_CR_RXEN (0x1u << 0) /**< \brief (SSC_CR) Receive Enable */
#define SSC_CR_RXDIS (0x1u << 1) /**< \brief (SSC_CR) Receive Disable */
#define SSC_CR_TXEN (0x1u << 8) /**< \brief (SSC_CR) Transmit Enable */
#define SSC_CR_TXDIS (0x1u << 9) /**< \brief (SSC_CR) Transmit Disable */
#define SSC_CR_SWRST (0x1u << 15) /**< \brief (SSC_CR) Software Reset */
/* -------- SSC_CMR : (SSC Offset: 0x4) Clock Mode Register -------- */
#define SSC_CMR_DIV_Pos 0
#define SSC_CMR_DIV_Msk (0xfffu << SSC_CMR_DIV_Pos) /**< \brief (SSC_CMR) Clock Divider */
#define SSC_CMR_DIV(value) ((SSC_CMR_DIV_Msk & ((value) << SSC_CMR_DIV_Pos)))
/* -------- SSC_RCMR : (SSC Offset: 0x10) Receive Clock Mode Register -------- */
#define SSC_RCMR_CKS_Pos 0
#define SSC_RCMR_CKS_Msk (0x3u << SSC_RCMR_CKS_Pos) /**< \brief (SSC_RCMR) Receive Clock Selection */
#define   SSC_RCMR_CKS_MCK (0x0u << 0) /**< \brief (SSC_RCMR) Divided Clock */
#define   SSC_RCMR_CKS_TK (0x1u << 0) /**< \brief (SSC_RCMR) TK Clock signal */
#define   SSC_RCMR_CKS_RK (0x2u << 0) /**< \brief (SSC_RCMR) RK pin */
#define SSC_RCMR_CKO_Pos 2
#define SSC_RCMR_CKO_Msk (0x7u << SSC_RCMR_CKO_Pos) /**< \brief (SSC_RCMR) Receive Clock Output Mode Selection */
#define   SSC_RCMR_CKO_NONE (0x0u << 2) /**< \brief (SSC_RCMR) None, RK pin is an input */
#define   SSC_RCMR_CKO_CONTINUOUS (0x1u << 2) /**< \brief (SSC_RCMR) Continuous Receive Clock, RK pin is an output */
#define   SSC_RCMR_CKO_TRANSFER (0x2u << 2) /**< \brief (SSC_RCMR) Receive Clock only during data transfers, RK pin is an output */
#define SSC_RCMR_CKI (0x1u << 5) /**< \brief (SSC_RCMR) Receive Clock Inversion */
#define SSC_RCMR_CKG_Pos 6
#define SSC_RCMR_CKG_Msk (0x3u << SSC_RCMR_CKG_Pos) /**< \brief (SSC_RCMR) Receive Clock Gating Selection */
#define   SSC_RCMR_CKG_CONTINUOUS (0x0u << 6) /**< \brief (SSC_RCMR) None */
#define   SSC_RCMR_CKG_EN_RF_LOW (0x1u << 6) /**< \brief (SSC_RCMR) Receive Clock enabled only if RF Low */
#define   SSC_RCMR_CKG_EN_RF_HIGH (0x2u << 6) /**< \brief (SSC_RCMR) Receive Clock enabled only if RF High */
#define SSC_RCMR_START_Pos 8
#define SSC_RCMR_START_Msk (0xfu << SSC_RCMR_START_Pos) /**< \brief (SSC_RCMR) Receive Start Selection */
#define   SSC_RCMR_START_CONTINUOUS (0x0u << 8) /**< \brief (SSC_RCMR) Continuous, as soon as the receiver is enabled, and immediately after the end of transfer of the previous data. */
#define   SSC_RCMR_START_TRANSMIT (0x1u << 8) /**< \brief (SSC_RCMR) Transmit start */
#define   SSC_RCMR_START_RF_LOW (0x2u << 8) /**< \brief (SSC_RCMR) Detection of a low level on RF signal */
#define   SSC_RCMR_START_RF_HIGH (0x3u << 8) /**< \brief (SSC_RCMR) Detection of a high level on RF signal */
#define   SSC_RCMR_START_RF_FALLING (0x4u << 8) /**< \brief (SSC_RCMR) Detection of a falling edge on RF signal */
#define   SSC_RCMR_START_RF_RISING (0x5u << 8) /**< \brief (SSC_RCMR) Detection of a rising edge on RF signal */
#define   SSC_RCMR_START_RF_LEVEL (0x6u << 8) /**< \brief (SSC_RCMR) Detection of any level change on RF signal */
#define   SSC_RCMR_START_RF_EDGE (0x7u << 8) /**< \brief (SSC_RCMR) Detection of any edge on RF signal */
#define   SSC_RCMR_START_CMP_0 (0x8u << 8) /**< \brief (SSC_RCMR) Compare 0 */
#define SSC_RCMR_STOP (0x1u << 12) /**< \brief (SSC_RCMR) Receive Stop Selection */
#define SSC_RCMR_STTDLY_Pos 16
#define SSC_RCMR_STTDLY_Msk (0xffu << SSC_RCMR_STTDLY_Pos) /**< \brief (SSC_RCMR) Receive Start Delay */
#define SSC_RCMR_STTDLY(value) ((SSC_RCMR_STTDLY_Msk & ((value) << SSC_RCMR_STTDLY_Pos)))
#define SSC_RCMR_PERIOD_Pos 24
#define SSC_RCMR_PERIOD_Msk (0xffu << SSC_RCMR_PERIOD_Pos) /**< \brief (SSC_RCMR) Receive Period Divider Selection */
#define SSC_RCMR_PERIOD(value) ((SSC_RCMR_PERIOD_Msk & ((value) << SSC_RCMR_PERIOD_Pos)))
/* -------- SSC_RFMR : (SSC Offset: 0x14) Receive Frame Mode Register -------- */
#define SSC_RFMR_DATLEN_Pos 0
#define SSC_RFMR_DATLEN_Msk (0x1fu << SSC_RFMR_DATLEN_Pos) /**< \brief (SSC_RFMR) Data Length */
#define SSC_RFMR_DATLEN(value) ((SSC_RFMR_DATLEN_Msk & ((value) << SSC_RFMR_DATLEN_Pos)))
#define SSC_RFMR_LOOP (0x1u << 5) /**< \brief (SSC_RFMR) Loop Mode */
#define SSC_RFMR_MSBF (0x1u << 7) /**< \brief (SSC_RFMR) Most Significant Bit First */
#define SSC_RFMR_DATNB_Pos 8
#define SSC_RFMR_DATNB_Msk (0xfu << SSC_RFMR_DATNB_Pos) /**< \brief (SSC_RFMR) Data Number per Frame */
#define SSC_RFMR_DATNB(value) ((SSC_RFMR_DATNB_Msk & ((value) << SSC_RFMR_DATNB_Pos)))
#define SSC_RFMR_FSLEN_Pos 16
#define SSC_RFMR_FSLEN_Msk (0xfu << SSC_RFMR_FSLEN_Pos) /**< \brief (SSC_RFMR) Receive Frame Sync Length */
#define SSC_RFMR_FSLEN(value) ((SSC_RFMR_FSLEN_Msk & ((value) << SSC_RFMR_FSLEN_Pos)))
#define SSC_RFMR_FSOS_Pos 20
#define SSC_RFMR_FSOS_Msk (0x7u << SSC_RFMR_FSOS_Pos) /**< \brief (SSC_RFMR) Receive Frame Sync Output Selection */
#define   SSC_RFMR_FSOS_NONE (0x0u << 20) /**< \brief (SSC_RFMR) None, RF pin is an input */
#define   SSC_RFMR_FSOS_NEGATIVE (0x1u << 20) /**< \brief (SSC_RFMR) Negative Pulse, RF pin is an output */
#define   SSC_RFMR_FSOS_POSITIVE (0x2u << 20) /**< \brief (SSC_RFMR) Positive Pulse, RF pin is an output */
#define   SSC_RFMR_FSOS_LOW (0x3u << 20) /**< \brief (SSC_RFMR) Driven Low during data transfer, RF pin is an output */
#define   SSC_RFMR_FSOS_HIGH (0x4u << 20) /**< \brief (SSC_RFMR) Driven High during data transfer, RF pin is an output */
#define   SSC_RFMR_FSOS_TOGGLING (0x5u << 20) /**< \brief (SSC_RFMR) Toggling at each start of data transfer, RF pin is an output */
#define SSC_RFMR_FSEDGE (0x1u << 24) /**< \brief (SSC_RFMR) Frame Sync Edge Detection */
#define   SSC_RFMR_FSEDGE_POSITIVE (0x0u << 24) /**< \brief (SSC_RFMR) Positive Edge Detection */
#define   SSC_RFMR_FSEDGE_NEGATIVE (0x1u << 24) /**< \brief (SSC_RFMR) Negative Edge Detection */
#define SSC_RFMR_FSLEN_EXT_Pos 28
#define SSC_RFMR_FSLEN_EXT_Msk (0xfu << SSC_RFMR_FSLEN_EXT_Pos) /**< \brief (SSC_RFMR) FSLEN Field Extension */
#define SSC_RFMR_FSLEN_EXT(value) ((SSC_RFMR_FSLEN_EXT_Msk & ((value) << SSC_RFMR_FSLEN_EXT_Pos)))
/* -------- SSC_TCMR : (SSC Offset: 0x18) Transmit Clock Mode Register -------- */
#define SSC_TCMR_CKS_Pos 0
#define SSC_TCMR_CKS_Msk (0x3u << SSC_TCMR_CKS_Pos) /**< \brief (SSC_TCMR) Transmit Clock Selection */
#define   SSC_TCMR_CKS_MCK (0x0u << 0) /**< \brief (SSC_TCMR) Divided Clock */
#define   SSC_TCMR_CKS_RK (0x1u << 0) /**< \brief (SSC_TCMR) RK Clock signal */
#define   SSC_TCMR_CKS_TK (0x2u << 0) /**< \brief (SSC_TCMR) TK pin */
#define SSC_TCMR_CKO_Pos 2
#define SSC_TCMR_CKO_Msk (0x7u << SSC_TCMR_CKO_Pos) /**< \brief (SSC_TCMR) Transmit Clock Output Mode Selection */
#define   SSC_TCMR_CKO_NONE (0x0u << 2) /**< \brief (SSC_TCMR) None, TK pin is an input */
#define   SSC_TCMR_CKO_CONTINUOUS (0x1u << 2) /**< \brief (SSC_TCMR) Continuous Transmit Clock, TK pin is an output */
#define   SSC_TCMR_CKO_TRANSFER (0x2u << 2) /**< \brief (SSC_TCMR) Transmit Clock only during data transfers, TK pin is an output */
#define SSC_TCMR_CKI (0x1u << 5) /**< \brief (SSC_TCMR) Transmit Clock Inversion */
#define SSC_TCMR_CKG_Pos 6
#define SSC_TCMR_CKG_Msk (0x3u << SSC_TCMR_CKG_Pos) /**< \brief (SSC_TCMR) Transmit Clock Gating Selection */
#define   SSC_TCMR_CKG_CONTINUOUS (0x0u << 6) /**< \brief (SSC_TCMR) None */
#define   SSC_TCMR_CKG_EN_TF_LOW (0x1u << 6) /**< \brief (SSC_TCMR) Transmit Clock enabled only if TF Low */
#define   SSC_TCMR_CKG_EN_TF_HIGH (0x2u << 6) /**< \brief (SSC_TCMR) Transmit Clock enabled only if TF High */
#define SSC_TCMR_START_Pos 8
#define SSC_TCMR_START_Msk (0xfu << SSC_TCMR_START_Pos) /**< \brief (SSC_TCMR) Transmit Start Selection */
#define   SSC_TCMR_START_CONTINUOUS (0x0u << 8) /**< \brief (SSC_TCMR) Continuous, as soon as a word is written in the SSC_THR Register (if Transmit is enabled), and immediately after the end of transfer of the previous data */
#define   SSC_TCMR_START_RECEIVE (0x1u << 8) /**< \brief (SSC_TCMR) Receive start */
#define   SSC_TCMR_START_TF_LOW (0x2u << 8) /**< \brief (SSC_TCMR) Detection of a low level on TF signal */
#define   SSC_TCMR_START_TF_HIGH (0x3u << 8) /**< \brief (SSC_TCMR) Detection of a high level on TF signal */
#define   SSC_TCMR_START_TF_FALLING (0x4u << 8) /**< \brief (SSC_TCMR) Detection of a falling edge on TF signal */
#define   SSC_TCMR_START_TF_RISING (0x5u << 8) /**< \brief (SSC_TCMR) Detection of a rising edge on TF signal */
#define   SSC_TCMR_START_TF_LEVEL (0x6u << 8) /**< \brief (SSC_TCMR) Detection of any level change on TF signal */
#define   SSC_TCMR_START_TF_EDGE (0x7u << 8) /**< \brief (SSC_TCMR) Detection of any edge on TF signal */
#define SSC_TCMR_STTDLY_Pos 16
#define SSC_TCMR_STTDLY_Msk (0xffu << SSC_TCMR_STTDLY_Pos) /**< \brief (SSC_TCMR) Transmit Start Delay */
#define SSC_TCMR_STTDLY(value) ((SSC_TCMR_STTDLY_Msk & ((value) << SSC_TCMR_STTDLY_Pos)))
#define SSC_TCMR_PERIOD_Pos 24
#define SSC_TCMR_PERIOD_Msk (0xffu << SSC_TCMR_PERIOD_Pos) /**< \brief (SSC_TCMR) Transmit Period Divider Selection */
#define SSC_TCMR_PERIOD(value) ((SSC_TCMR_PERIOD_Msk & ((value) << SSC_TCMR_PERIOD_Pos)))
/* -------- SSC_TFMR : (SSC Offset: 0x1C) Transmit Frame Mode Register -------- */
#define SSC_TFMR_DATLEN_Pos 0
#define SSC_TFMR_DATLEN_Msk (0x1fu << SSC_TFMR_DATLEN_Pos) /**< \brief (SSC_TFMR) Data Length */
#define SSC_TFMR_DATLEN(value) ((SSC_TFMR_DATLEN_Msk & ((value) << SSC_TFMR_DATLEN_Pos)))
#define SSC_TFMR_DATDEF (0x1u << 5) /**< \brief (SSC_TFMR) Data Default Value */
#define SSC_TFMR_MSBF (0x1u << 7) /**< \brief (SSC_TFMR) Most Significant Bit First */
#define SSC_TFMR_DATNB_Pos 8
#define SSC_TFMR_DATNB_Msk (0xfu << SSC_TFMR_DATNB_Pos) /**< \brief (SSC_TFMR) Data Number per frame */
#define SSC_TFMR_DATNB(value) ((SSC_TFMR_DATNB_Msk & ((value) << SSC_TFMR_DATNB_Pos)))
#define SSC_TFMR_FSLEN_Pos 16
#define SSC_TFMR_FSLEN_Msk (0xfu << SSC_TFMR_FSLEN_Pos) /**< \brief (SSC_TFMR) Transmit Frame Sync Length */
#define SSC_TFMR_FSLEN(value) ((SSC_TFMR_FSLEN_Msk & ((value) << SSC_TFMR_FSLEN_Pos)))
#define SSC_TFMR_FSOS_Pos 20
#define SSC_TFMR_FSOS_Msk (0x7u << SSC_TFMR_FSOS_Pos) /**< \brief (SSC_TFMR) Transmit Frame Sync Output Selection */
#define   SSC_TFMR_FSOS_NONE (0x0u << 20) /**< \brief (SSC_TFMR) None, RF pin is an input */
#define   SSC_TFMR_FSOS_NEGATIVE (0x1u << 20) /**< \brief (SSC_TFMR) Negative Pulse, RF pin is an output */
#define   SSC_TFMR_FSOS_POSITIVE (0x2u << 20) /**< \brief (SSC_TFMR) Positive Pulse, RF pin is an output */
#define   SSC_TFMR_FSOS_LOW (0x3u << 20) /**< \brief (SSC_TFMR) Driven Low during data transfer */
#define   SSC_TFMR_FSOS_HIGH (0x4u << 20) /**< \brief (SSC_TFMR) Driven High during data transfer */
#define   SSC_TFMR_FSOS_TOGGLING (0x5u << 20) /**< \brief (SSC_TFMR) Toggling at each start of data transfer */
#define SSC_TFMR_FSDEN (0x1u << 23) /**< \brief (SSC_TFMR) Frame Sync Data Enable */
#define SSC_TFMR_FSEDGE (0x1u << 24) /**< \brief (SSC_TFMR) Frame Sync Edge Detection */
#define   SSC_TFMR_FSEDGE_POSITIVE (0x0u << 24) /**< \brief (SSC_TFMR) Positive Edge Detection */
#define   SSC_TFMR_FSEDGE_NEGATIVE (0x1u << 24) /**< \brief (SSC_TFMR) Negative Edge Detection */
#define SSC_TFMR_FSLEN_EXT_Pos 28
#define SSC_TFMR_FSLEN_EXT_Msk (0xfu << SSC_TFMR_FSLEN_EXT_Pos) /**< \brief (SSC_TFMR) FSLEN Field Extension */
#define SSC_TFMR_FSLEN_EXT(value) ((SSC_TFMR_FSLEN_EXT_Msk & ((value) << SSC_TFMR_FSLEN_EXT_Pos)))
/* -------- SSC_RHR : (SSC Offset: 0x20) Receive Holding Register -------- */
#define SSC_RHR_RDAT_Pos 0
#define SSC_RHR_RDAT_Msk (0xffffffffu << SSC_RHR_RDAT_Pos) /**< \brief (SSC_RHR) Receive Data */
/* -------- SSC_THR : (SSC Offset: 0x24) Transmit Holding Register -------- */
#define SSC_THR_TDAT_Pos 0
#define SSC_THR_TDAT_Msk (0xffffffffu << SSC_THR_TDAT_Pos) /**< \brief (SSC_THR) Transmit Data */
#define SSC_THR_TDAT(value) ((SSC_THR_TDAT_Msk & ((value) << SSC_THR_TDAT_Pos)))
/* -------- SSC_RSHR : (SSC Offset: 0x30) Receive Sync. Holding Register -------- */
#define SSC_RSHR_RSDAT_Pos 0
#define SSC_RSHR_RSDAT_Msk (0xffffu << SSC_RSHR_RSDAT_Pos) /**< \brief (SSC_RSHR) Receive Synchronization Data */
/* -------- SSC_TSHR : (SSC Offset: 0x34) Transmit Sync. Holding Register -------- */
#define SSC_TSHR_TSDAT_Pos 0
#define SSC_TSHR_TSDAT_Msk (0xffffu << SSC_TSHR_TSDAT_Pos) /**< \brief (SSC_TSHR) Transmit Synchronization Data */
#define SSC_TSHR_TSDAT(value) ((SSC_TSHR_TSDAT_Msk & ((value) << SSC_TSHR_TSDAT_Pos)))
/* -------- SSC_RC0R : (SSC Offset: 0x38) Receive Compare 0 Register -------- */
#define SSC_RC0R_CP0_Pos 0
#define SSC_RC0R_CP0_Msk (0xffffu << SSC_RC0R_CP0_Pos) /**< \brief (SSC_RC0R) Receive Compare Data 0 */
#define SSC_RC0R_CP0(value) ((SSC_RC0R_CP0_Msk & ((value) << SSC_RC0R_CP0_Pos)))
/* -------- SSC_RC1R : (SSC Offset: 0x3C) Receive Compare 1 Register -------- */
#define SSC_RC1R_CP1_Pos 0
#define SSC_RC1R_CP1_Msk (0xffffu << SSC_RC1R_CP1_Pos) /**< \brief (SSC_RC1R) Receive Compare Data 1 */
#define SSC_RC1R_CP1(value) ((SSC_RC1R_CP1_Msk & ((value) << SSC_RC1R_CP1_Pos)))
/* -------- SSC_SR : (SSC Offset: 0x40) Status Register -------- */
#define SSC_SR_TXRDY (0x1u << 0) /**< \brief (SSC_SR) Transmit Ready */
#define SSC_SR_TXEMPTY (0x1u << 1) /**< \brief (SSC_SR) Transmit Empty */
#define SSC_SR_RXRDY (0x1u << 4) /**< \brief (SSC_SR) Receive Ready */
#define SSC_SR_OVRUN (0x1u << 5) /**< \brief (SSC_SR) Receive Overrun */
#define SSC_SR_CP0 (0x1u << 8) /**< \brief (SSC_SR) Compare 0 */
#define SSC_SR_CP1 (0x1u << 9) /**< \brief (SSC_SR) Compare 1 */
#define SSC_SR_TXSYN (0x1u << 10) /**< \brief (SSC_SR) Transmit Sync */
#define SSC_SR_RXSYN (0x1u << 11) /**< \brief (SSC_SR) Receive Sync */
#define SSC_SR_TXEN (0x1u << 16) /**< \brief (SSC_SR) Transmit Enable */
#define SSC_SR_RXEN (0x1u << 17) /**< \brief (SSC_SR) Receive Enable */
/* -------- SSC_IER : (SSC Offset: 0x44) Interrupt Enable Register -------- */
#define SSC_IER_TXRDY (0x1u << 0) /**< \brief (SSC_IER) Transmit Ready Interrupt Enable */
#define SSC_IER_TXEMPTY (0x1u << 1) /**< \brief (SSC_IER) Transmit Empty Interrupt Enable */
#define SSC_IER_RXRDY (0x1u << 4) /**< \brief (SSC_IER) Receive Ready Interrupt Enable */
#define SSC_IER_OVRUN (0x1u << 5) /**< \brief (SSC_IER) Receive Overrun Interrupt Enable */
#define SSC_IER_CP0 (0x1u << 8) /**< \brief (SSC_IER) Compare 0 Interrupt Enable */
#define SSC_IER_CP1 (0x1u << 9) /**< \brief (SSC_IER) Compare 1 Interrupt Enable */
#define SSC_IER_TXSYN (0x1u << 10) /**< \brief (SSC_IER) Tx Sync Interrupt Enable */
#define SSC_IER_RXSYN (0x1u << 11) /**< \brief (SSC_IER) Rx Sync Interrupt Enable */
/* -------- SSC_IDR : (SSC Offset: 0x48) Interrupt Disable Register -------- */
#define SSC_IDR_TXRDY (0x1u << 0) /**< \brief (SSC_IDR) Transmit Ready Interrupt Disable */
#define SSC_IDR_TXEMPTY (0x1u << 1) /**< \brief (SSC_IDR) Transmit Empty Interrupt Disable */
#define SSC_IDR_RXRDY (0x1u << 4) /**< \brief (SSC_IDR) Receive Ready Interrupt Disable */
#define SSC_IDR_OVRUN (0x1u << 5) /**< \brief (SSC_IDR) Receive Overrun Interrupt Disable */
#define SSC_IDR_CP0 (0x1u << 8) /**< \brief (SSC_IDR) Compare 0 Interrupt Disable */
#define SSC_IDR_CP1 (0x1u << 9) /**< \brief (SSC_IDR) Compare 1 Interrupt Disable */
#define SSC_IDR_TXSYN (0x1u << 10) /**< \brief (SSC_IDR) Tx Sync Interrupt Enable */
#define SSC_IDR_RXSYN (0x1u << 11) /**< \brief (SSC_IDR) Rx Sync Interrupt Enable */
/* -------- SSC_IMR : (SSC Offset: 0x4C) Interrupt Mask Register -------- */
#define SSC_IMR_TXRDY (0x1u << 0) /**< \brief (SSC_IMR) Transmit Ready Interrupt Mask */
#define SSC_IMR_TXEMPTY (0x1u << 1) /**< \brief (SSC_IMR) Transmit Empty Interrupt Mask */
#define SSC_IMR_RXRDY (0x1u << 4) /**< \brief (SSC_IMR) Receive Ready Interrupt Mask */
#define SSC_IMR_OVRUN (0x1u << 5) /**< \brief (SSC_IMR) Receive Overrun Interrupt Mask */
#define SSC_IMR_CP0 (0x1u << 8) /**< \brief (SSC_IMR) Compare 0 Interrupt Mask */
#define SSC_IMR_CP1 (0x1u << 9) /**< \brief (SSC_IMR) Compare 1 Interrupt Mask */
#define SSC_IMR_TXSYN (0x1u << 10) /**< \brief (SSC_IMR) Tx Sync Interrupt Mask */
#define SSC_IMR_RXSYN (0x1u << 11) /**< \brief (SSC_IMR) Rx Sync Interrupt Mask */
/* -------- SSC_WPMR : (SSC Offset: 0xE4) Write Protection Mode Register -------- */
#define SSC_WPMR_WPEN (0x1u << 0) /**< \brief (SSC_WPMR) Write Protection Enable */
#define SSC_WPMR_WPKEY_Pos 8
#define SSC_WPMR_WPKEY_Msk (0xffffffu << SSC_WPMR_WPKEY_Pos) /**< \brief (SSC_WPMR) Write Protection Key */
#define   SSC_WPMR_WPKEY_PASSWD (0x535343u << 8) /**< \brief (SSC_WPMR) Writing any other value in this field aborts the write operation of the WPEN bit.Always reads as 0. */
/* -------- SSC_WPSR : (SSC Offset: 0xE8) Write Protection Status Register -------- */
#define SSC_WPSR_WPVS (0x1u << 0) /**< \brief (SSC_WPSR) Write Protection Violation Status */
#define SSC_WPSR_WPVSRC_Pos 8
#define SSC_WPSR_WPVSRC_Msk (0xffffu << SSC_WPSR_WPVSRC_Pos) /**< \brief (SSC_WPSR) Write Protect Violation Source */
/* -------- SSC_VERSION : (SSC Offset: 0xFC) Version Register -------- */
#define SSC_VERSION_VERSION_Pos 0
#define SSC_VERSION_VERSION_Msk (0xffffu << SSC_VERSION_VERSION_Pos) /**< \brief (SSC_VERSION) Version of the Hardware Module */
#define SSC_VERSION_MFN_Pos 16
#define SSC_VERSION_MFN_Msk (0x7u << SSC_VERSION_MFN_Pos) /**< \brief (SSC_VERSION) Metal Fix Number */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR Timer Counter */
/* ============================================================================= */
/** \addtogroup SAMA5D2_TC Timer Counter */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief TcChannel hardware registers */
typedef struct {
  __O  uint32_t TC_CCR;       /**< \brief (TcChannel Offset: 0x0) Channel Control Register */
  __IO uint32_t TC_CMR;       /**< \brief (TcChannel Offset: 0x4) Channel Mode Register */
  __IO uint32_t TC_SMMR;      /**< \brief (TcChannel Offset: 0x8) Stepper Motor Mode Register */
  __I  uint32_t TC_RAB;       /**< \brief (TcChannel Offset: 0xC) Register AB */
  __I  uint32_t TC_CV;        /**< \brief (TcChannel Offset: 0x10) Counter Value */
  __IO uint32_t TC_RA;        /**< \brief (TcChannel Offset: 0x14) Register A */
  __IO uint32_t TC_RB;        /**< \brief (TcChannel Offset: 0x18) Register B */
  __IO uint32_t TC_RC;        /**< \brief (TcChannel Offset: 0x1C) Register C */
  __I  uint32_t TC_SR;        /**< \brief (TcChannel Offset: 0x20) Status Register */
  __O  uint32_t TC_IER;       /**< \brief (TcChannel Offset: 0x24) Interrupt Enable Register */
  __O  uint32_t TC_IDR;       /**< \brief (TcChannel Offset: 0x28) Interrupt Disable Register */
  __I  uint32_t TC_IMR;       /**< \brief (TcChannel Offset: 0x2C) Interrupt Mask Register */
  __IO uint32_t TC_EMR;       /**< \brief (TcChannel Offset: 0x30) Extended Mode Register */
  __I  uint32_t Reserved1[3];
} TcChannel;
/** \brief Tc hardware registers */
#define TCCHANNEL_NUMBER 3
typedef struct {
       TcChannel TC_CHANNEL[TCCHANNEL_NUMBER]; /**< \brief (Tc Offset: 0x0) channel = 0 .. 2 */
  __O  uint32_t  TC_BCR;                       /**< \brief (Tc Offset: 0xC0) Block Control Register */
  __IO uint32_t  TC_BMR;                       /**< \brief (Tc Offset: 0xC4) Block Mode Register */
  __O  uint32_t  TC_QIER;                      /**< \brief (Tc Offset: 0xC8) QDEC Interrupt Enable Register */
  __O  uint32_t  TC_QIDR;                      /**< \brief (Tc Offset: 0xCC) QDEC Interrupt Disable Register */
  __I  uint32_t  TC_QIMR;                      /**< \brief (Tc Offset: 0xD0) QDEC Interrupt Mask Register */
  __I  uint32_t  TC_QISR;                      /**< \brief (Tc Offset: 0xD4) QDEC Interrupt Status Register */
  __IO uint32_t  TC_FMR;                       /**< \brief (Tc Offset: 0xD8) Fault Mode Register */
  __I  uint32_t  Reserved1[2];
  __IO uint32_t  TC_WPMR;                      /**< \brief (Tc Offset: 0xE4) Write Protection Mode Register */
  __I  uint32_t  Reserved2[5];
  __I  uint32_t  TC_VER;                       /**< \brief (Tc Offset: 0xFC) Version Register */
} Tc;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- TC_CCR : (TC Offset: N/A) Channel Control Register -------- */
#define TC_CCR_CLKEN (0x1u << 0) /**< \brief (TC_CCR) Counter Clock Enable Command */
#define TC_CCR_CLKDIS (0x1u << 1) /**< \brief (TC_CCR) Counter Clock Disable Command */
#define TC_CCR_SWTRG (0x1u << 2) /**< \brief (TC_CCR) Software Trigger Command */
/* -------- TC_CMR : (TC Offset: N/A) Channel Mode Register -------- */
#define TC_CMR_TCCLKS_Pos 0
#define TC_CMR_TCCLKS_Msk (0x7u << TC_CMR_TCCLKS_Pos) /**< \brief (TC_CMR) Clock Selection */
#define   TC_CMR_TCCLKS_TIMER_CLOCK1 (0x0u << 0) /**< \brief (TC_CMR) Clock selected: internal TIMER_CLOCK1 clock signal (from PMC) */
#define   TC_CMR_TCCLKS_TIMER_CLOCK2 (0x1u << 0) /**< \brief (TC_CMR) Clock selected: internal TIMER_CLOCK2 clock signal (from PMC) */
#define   TC_CMR_TCCLKS_TIMER_CLOCK3 (0x2u << 0) /**< \brief (TC_CMR) Clock selected: internal TIMER_CLOCK3 clock signal (from PMC) */
#define   TC_CMR_TCCLKS_TIMER_CLOCK4 (0x3u << 0) /**< \brief (TC_CMR) Clock selected: internal TIMER_CLOCK4 clock signal (from PMC) */
#define   TC_CMR_TCCLKS_TIMER_CLOCK5 (0x4u << 0) /**< \brief (TC_CMR) Clock selected: internal TIMER_CLOCK5 clock signal (from PMC) */
#define   TC_CMR_TCCLKS_XC0 (0x5u << 0) /**< \brief (TC_CMR) Clock selected: XC0 */
#define   TC_CMR_TCCLKS_XC1 (0x6u << 0) /**< \brief (TC_CMR) Clock selected: XC1 */
#define   TC_CMR_TCCLKS_XC2 (0x7u << 0) /**< \brief (TC_CMR) Clock selected: XC2 */
#define TC_CMR_CLKI (0x1u << 3) /**< \brief (TC_CMR) Clock Invert */
#define TC_CMR_BURST_Pos 4
#define TC_CMR_BURST_Msk (0x3u << TC_CMR_BURST_Pos) /**< \brief (TC_CMR) Burst Signal Selection */
#define   TC_CMR_BURST_NONE (0x0u << 4) /**< \brief (TC_CMR) The clock is not gated by an external signal. */
#define   TC_CMR_BURST_XC0 (0x1u << 4) /**< \brief (TC_CMR) XC0 is ANDed with the selected clock. */
#define   TC_CMR_BURST_XC1 (0x2u << 4) /**< \brief (TC_CMR) XC1 is ANDed with the selected clock. */
#define   TC_CMR_BURST_XC2 (0x3u << 4) /**< \brief (TC_CMR) XC2 is ANDed with the selected clock. */
#define TC_CMR_LDBSTOP (0x1u << 6) /**< \brief (TC_CMR) Counter Clock Stopped with RB Loading */
#define TC_CMR_LDBDIS (0x1u << 7) /**< \brief (TC_CMR) Counter Clock Disable with RB Loading */
#define TC_CMR_ETRGEDG_Pos 8
#define TC_CMR_ETRGEDG_Msk (0x3u << TC_CMR_ETRGEDG_Pos) /**< \brief (TC_CMR) External Trigger Edge Selection */
#define   TC_CMR_ETRGEDG_NONE (0x0u << 8) /**< \brief (TC_CMR) The clock is not gated by an external signal. */
#define   TC_CMR_ETRGEDG_RISING (0x1u << 8) /**< \brief (TC_CMR) Rising edge */
#define   TC_CMR_ETRGEDG_FALLING (0x2u << 8) /**< \brief (TC_CMR) Falling edge */
#define   TC_CMR_ETRGEDG_EDGE (0x3u << 8) /**< \brief (TC_CMR) Each edge */
#define TC_CMR_ABETRG (0x1u << 10) /**< \brief (TC_CMR) TIOA or TIOB External Trigger Selection */
#define TC_CMR_CPCTRG (0x1u << 14) /**< \brief (TC_CMR) RC Compare Trigger Enable */
#define TC_CMR_WAVE (0x1u << 15) /**< \brief (TC_CMR) Waveform Mode */
#define TC_CMR_LDRA_Pos 16
#define TC_CMR_LDRA_Msk (0x3u << TC_CMR_LDRA_Pos) /**< \brief (TC_CMR) RA Loading Edge Selection */
#define   TC_CMR_LDRA_NONE (0x0u << 16) /**< \brief (TC_CMR) None */
#define   TC_CMR_LDRA_RISING (0x1u << 16) /**< \brief (TC_CMR) Rising edge of TIOA */
#define   TC_CMR_LDRA_FALLING (0x2u << 16) /**< \brief (TC_CMR) Falling edge of TIOA */
#define   TC_CMR_LDRA_EDGE (0x3u << 16) /**< \brief (TC_CMR) Each edge of TIOA */
#define TC_CMR_LDRB_Pos 18
#define TC_CMR_LDRB_Msk (0x3u << TC_CMR_LDRB_Pos) /**< \brief (TC_CMR) RB Loading Edge Selection */
#define   TC_CMR_LDRB_NONE (0x0u << 18) /**< \brief (TC_CMR) None */
#define   TC_CMR_LDRB_RISING (0x1u << 18) /**< \brief (TC_CMR) Rising edge of TIOA */
#define   TC_CMR_LDRB_FALLING (0x2u << 18) /**< \brief (TC_CMR) Falling edge of TIOA */
#define   TC_CMR_LDRB_EDGE (0x3u << 18) /**< \brief (TC_CMR) Each edge of TIOA */
#define TC_CMR_SBSMPLR_Pos 20
#define TC_CMR_SBSMPLR_Msk (0x7u << TC_CMR_SBSMPLR_Pos) /**< \brief (TC_CMR) Loading Edge Subsampling Ratio */
#define   TC_CMR_SBSMPLR_ONE (0x0u << 20) /**< \brief (TC_CMR) Load a Capture Register each selected edge */
#define   TC_CMR_SBSMPLR_HALF (0x1u << 20) /**< \brief (TC_CMR) Load a Capture Register every 2 selected edges */
#define   TC_CMR_SBSMPLR_FOURTH (0x2u << 20) /**< \brief (TC_CMR) Load a Capture Register every 4 selected edges */
#define   TC_CMR_SBSMPLR_EIGHTH (0x3u << 20) /**< \brief (TC_CMR) Load a Capture Register every 8 selected edges */
#define   TC_CMR_SBSMPLR_SIXTEENTH (0x4u << 20) /**< \brief (TC_CMR) Load a Capture Register every 16 selected edges */
#define TC_CMR_CPCSTOP (0x1u << 6) /**< \brief (TC_CMR) Counter Clock Stopped with RC Compare */
#define TC_CMR_CPCDIS (0x1u << 7) /**< \brief (TC_CMR) Counter Clock Disable with RC Compare */
#define TC_CMR_EEVTEDG_Pos 8
#define TC_CMR_EEVTEDG_Msk (0x3u << TC_CMR_EEVTEDG_Pos) /**< \brief (TC_CMR) External Event Edge Selection */
#define   TC_CMR_EEVTEDG_NONE (0x0u << 8) /**< \brief (TC_CMR) None */
#define   TC_CMR_EEVTEDG_RISING (0x1u << 8) /**< \brief (TC_CMR) Rising edge */
#define   TC_CMR_EEVTEDG_FALLING (0x2u << 8) /**< \brief (TC_CMR) Falling edge */
#define   TC_CMR_EEVTEDG_EDGE (0x3u << 8) /**< \brief (TC_CMR) Each edge */
#define TC_CMR_EEVT_Pos 10
#define TC_CMR_EEVT_Msk (0x3u << TC_CMR_EEVT_Pos) /**< \brief (TC_CMR) External Event Selection */
#define   TC_CMR_EEVT_TIOB (0x0u << 10) /**< \brief (TC_CMR) TIOB */
#define   TC_CMR_EEVT_XC0 (0x1u << 10) /**< \brief (TC_CMR) XC0 */
#define   TC_CMR_EEVT_XC1 (0x2u << 10) /**< \brief (TC_CMR) XC1 */
#define   TC_CMR_EEVT_XC2 (0x3u << 10) /**< \brief (TC_CMR) XC2 */
#define TC_CMR_ENETRG (0x1u << 12) /**< \brief (TC_CMR) External Event Trigger Enable */
#define TC_CMR_WAVSEL_Pos 13
#define TC_CMR_WAVSEL_Msk (0x3u << TC_CMR_WAVSEL_Pos) /**< \brief (TC_CMR) Waveform Selection */
#define   TC_CMR_WAVSEL_UP (0x0u << 13) /**< \brief (TC_CMR) UP mode without automatic trigger on RC Compare */
#define   TC_CMR_WAVSEL_UPDOWN (0x1u << 13) /**< \brief (TC_CMR) UPDOWN mode without automatic trigger on RC Compare */
#define   TC_CMR_WAVSEL_UP_RC (0x2u << 13) /**< \brief (TC_CMR) UP mode with automatic trigger on RC Compare */
#define   TC_CMR_WAVSEL_UPDOWN_RC (0x3u << 13) /**< \brief (TC_CMR) UPDOWN mode with automatic trigger on RC Compare */
#define TC_CMR_ACPA_Pos 16
#define TC_CMR_ACPA_Msk (0x3u << TC_CMR_ACPA_Pos) /**< \brief (TC_CMR) RA Compare Effect on TIOA */
#define   TC_CMR_ACPA_NONE (0x0u << 16) /**< \brief (TC_CMR) None */
#define   TC_CMR_ACPA_SET (0x1u << 16) /**< \brief (TC_CMR) Set */
#define   TC_CMR_ACPA_CLEAR (0x2u << 16) /**< \brief (TC_CMR) Clear */
#define   TC_CMR_ACPA_TOGGLE (0x3u << 16) /**< \brief (TC_CMR) Toggle */
#define TC_CMR_ACPC_Pos 18
#define TC_CMR_ACPC_Msk (0x3u << TC_CMR_ACPC_Pos) /**< \brief (TC_CMR) RC Compare Effect on TIOA */
#define   TC_CMR_ACPC_NONE (0x0u << 18) /**< \brief (TC_CMR) None */
#define   TC_CMR_ACPC_SET (0x1u << 18) /**< \brief (TC_CMR) Set */
#define   TC_CMR_ACPC_CLEAR (0x2u << 18) /**< \brief (TC_CMR) Clear */
#define   TC_CMR_ACPC_TOGGLE (0x3u << 18) /**< \brief (TC_CMR) Toggle */
#define TC_CMR_AEEVT_Pos 20
#define TC_CMR_AEEVT_Msk (0x3u << TC_CMR_AEEVT_Pos) /**< \brief (TC_CMR) External Event Effect on TIOA */
#define   TC_CMR_AEEVT_NONE (0x0u << 20) /**< \brief (TC_CMR) None */
#define   TC_CMR_AEEVT_SET (0x1u << 20) /**< \brief (TC_CMR) Set */
#define   TC_CMR_AEEVT_CLEAR (0x2u << 20) /**< \brief (TC_CMR) Clear */
#define   TC_CMR_AEEVT_TOGGLE (0x3u << 20) /**< \brief (TC_CMR) Toggle */
#define TC_CMR_ASWTRG_Pos 22
#define TC_CMR_ASWTRG_Msk (0x3u << TC_CMR_ASWTRG_Pos) /**< \brief (TC_CMR) Software Trigger Effect on TIOA */
#define   TC_CMR_ASWTRG_NONE (0x0u << 22) /**< \brief (TC_CMR) None */
#define   TC_CMR_ASWTRG_SET (0x1u << 22) /**< \brief (TC_CMR) Set */
#define   TC_CMR_ASWTRG_CLEAR (0x2u << 22) /**< \brief (TC_CMR) Clear */
#define   TC_CMR_ASWTRG_TOGGLE (0x3u << 22) /**< \brief (TC_CMR) Toggle */
#define TC_CMR_BCPB_Pos 24
#define TC_CMR_BCPB_Msk (0x3u << TC_CMR_BCPB_Pos) /**< \brief (TC_CMR) RB Compare Effect on TIOB */
#define   TC_CMR_BCPB_NONE (0x0u << 24) /**< \brief (TC_CMR) None */
#define   TC_CMR_BCPB_SET (0x1u << 24) /**< \brief (TC_CMR) Set */
#define   TC_CMR_BCPB_CLEAR (0x2u << 24) /**< \brief (TC_CMR) Clear */
#define   TC_CMR_BCPB_TOGGLE (0x3u << 24) /**< \brief (TC_CMR) Toggle */
#define TC_CMR_BCPC_Pos 26
#define TC_CMR_BCPC_Msk (0x3u << TC_CMR_BCPC_Pos) /**< \brief (TC_CMR) RC Compare Effect on TIOB */
#define   TC_CMR_BCPC_NONE (0x0u << 26) /**< \brief (TC_CMR) None */
#define   TC_CMR_BCPC_SET (0x1u << 26) /**< \brief (TC_CMR) Set */
#define   TC_CMR_BCPC_CLEAR (0x2u << 26) /**< \brief (TC_CMR) Clear */
#define   TC_CMR_BCPC_TOGGLE (0x3u << 26) /**< \brief (TC_CMR) Toggle */
#define TC_CMR_BEEVT_Pos 28
#define TC_CMR_BEEVT_Msk (0x3u << TC_CMR_BEEVT_Pos) /**< \brief (TC_CMR) External Event Effect on TIOB */
#define   TC_CMR_BEEVT_NONE (0x0u << 28) /**< \brief (TC_CMR) None */
#define   TC_CMR_BEEVT_SET (0x1u << 28) /**< \brief (TC_CMR) Set */
#define   TC_CMR_BEEVT_CLEAR (0x2u << 28) /**< \brief (TC_CMR) Clear */
#define   TC_CMR_BEEVT_TOGGLE (0x3u << 28) /**< \brief (TC_CMR) Toggle */
#define TC_CMR_BSWTRG_Pos 30
#define TC_CMR_BSWTRG_Msk (0x3u << TC_CMR_BSWTRG_Pos) /**< \brief (TC_CMR) Software Trigger Effect on TIOB */
#define   TC_CMR_BSWTRG_NONE (0x0u << 30) /**< \brief (TC_CMR) None */
#define   TC_CMR_BSWTRG_SET (0x1u << 30) /**< \brief (TC_CMR) Set */
#define   TC_CMR_BSWTRG_CLEAR (0x2u << 30) /**< \brief (TC_CMR) Clear */
#define   TC_CMR_BSWTRG_TOGGLE (0x3u << 30) /**< \brief (TC_CMR) Toggle */
/* -------- TC_SMMR : (TC Offset: N/A) Stepper Motor Mode Register -------- */
#define TC_SMMR_GCEN (0x1u << 0) /**< \brief (TC_SMMR) Gray Count Enable */
#define TC_SMMR_DOWN (0x1u << 1) /**< \brief (TC_SMMR) DOWN Count */
/* -------- TC_RAB : (TC Offset: N/A) Register AB -------- */
#define TC_RAB_RAB_Pos 0
#define TC_RAB_RAB_Msk (0xffffffffu << TC_RAB_RAB_Pos) /**< \brief (TC_RAB) Register A or Register B */
/* -------- TC_CV : (TC Offset: N/A) Counter Value -------- */
#define TC_CV_CV_Pos 0
#define TC_CV_CV_Msk (0xffffffffu << TC_CV_CV_Pos) /**< \brief (TC_CV) Counter Value */
/* -------- TC_RA : (TC Offset: N/A) Register A -------- */
#define TC_RA_RA_Pos 0
#define TC_RA_RA_Msk (0xffffffffu << TC_RA_RA_Pos) /**< \brief (TC_RA) Register A */
#define TC_RA_RA(value) ((TC_RA_RA_Msk & ((value) << TC_RA_RA_Pos)))
/* -------- TC_RB : (TC Offset: N/A) Register B -------- */
#define TC_RB_RB_Pos 0
#define TC_RB_RB_Msk (0xffffffffu << TC_RB_RB_Pos) /**< \brief (TC_RB) Register B */
#define TC_RB_RB(value) ((TC_RB_RB_Msk & ((value) << TC_RB_RB_Pos)))
/* -------- TC_RC : (TC Offset: N/A) Register C -------- */
#define TC_RC_RC_Pos 0
#define TC_RC_RC_Msk (0xffffffffu << TC_RC_RC_Pos) /**< \brief (TC_RC) Register C */
#define TC_RC_RC(value) ((TC_RC_RC_Msk & ((value) << TC_RC_RC_Pos)))
/* -------- TC_SR : (TC Offset: N/A) Status Register -------- */
#define TC_SR_COVFS (0x1u << 0) /**< \brief (TC_SR) Counter Overflow Status */
#define TC_SR_LOVRS (0x1u << 1) /**< \brief (TC_SR) Load Overrun Status */
#define TC_SR_CPAS (0x1u << 2) /**< \brief (TC_SR) RA Compare Status */
#define TC_SR_CPBS (0x1u << 3) /**< \brief (TC_SR) RB Compare Status */
#define TC_SR_CPCS (0x1u << 4) /**< \brief (TC_SR) RC Compare Status */
#define TC_SR_LDRAS (0x1u << 5) /**< \brief (TC_SR) RA Loading Status */
#define TC_SR_LDRBS (0x1u << 6) /**< \brief (TC_SR) RB Loading Status */
#define TC_SR_ETRGS (0x1u << 7) /**< \brief (TC_SR) External Trigger Status */
#define TC_SR_CLKSTA (0x1u << 16) /**< \brief (TC_SR) Clock Enabling Status */
#define TC_SR_MTIOA (0x1u << 17) /**< \brief (TC_SR) TIOA Mirror */
#define TC_SR_MTIOB (0x1u << 18) /**< \brief (TC_SR) TIOB Mirror */
/* -------- TC_IER : (TC Offset: N/A) Interrupt Enable Register -------- */
#define TC_IER_COVFS (0x1u << 0) /**< \brief (TC_IER) Counter Overflow */
#define TC_IER_LOVRS (0x1u << 1) /**< \brief (TC_IER) Load Overrun */
#define TC_IER_CPAS (0x1u << 2) /**< \brief (TC_IER) RA Compare */
#define TC_IER_CPBS (0x1u << 3) /**< \brief (TC_IER) RB Compare */
#define TC_IER_CPCS (0x1u << 4) /**< \brief (TC_IER) RC Compare */
#define TC_IER_LDRAS (0x1u << 5) /**< \brief (TC_IER) RA Loading */
#define TC_IER_LDRBS (0x1u << 6) /**< \brief (TC_IER) RB Loading */
#define TC_IER_ETRGS (0x1u << 7) /**< \brief (TC_IER) External Trigger */
/* -------- TC_IDR : (TC Offset: N/A) Interrupt Disable Register -------- */
#define TC_IDR_COVFS (0x1u << 0) /**< \brief (TC_IDR) Counter Overflow */
#define TC_IDR_LOVRS (0x1u << 1) /**< \brief (TC_IDR) Load Overrun */
#define TC_IDR_CPAS (0x1u << 2) /**< \brief (TC_IDR) RA Compare */
#define TC_IDR_CPBS (0x1u << 3) /**< \brief (TC_IDR) RB Compare */
#define TC_IDR_CPCS (0x1u << 4) /**< \brief (TC_IDR) RC Compare */
#define TC_IDR_LDRAS (0x1u << 5) /**< \brief (TC_IDR) RA Loading */
#define TC_IDR_LDRBS (0x1u << 6) /**< \brief (TC_IDR) RB Loading */
#define TC_IDR_ETRGS (0x1u << 7) /**< \brief (TC_IDR) External Trigger */
/* -------- TC_IMR : (TC Offset: N/A) Interrupt Mask Register -------- */
#define TC_IMR_COVFS (0x1u << 0) /**< \brief (TC_IMR) Counter Overflow */
#define TC_IMR_LOVRS (0x1u << 1) /**< \brief (TC_IMR) Load Overrun */
#define TC_IMR_CPAS (0x1u << 2) /**< \brief (TC_IMR) RA Compare */
#define TC_IMR_CPBS (0x1u << 3) /**< \brief (TC_IMR) RB Compare */
#define TC_IMR_CPCS (0x1u << 4) /**< \brief (TC_IMR) RC Compare */
#define TC_IMR_LDRAS (0x1u << 5) /**< \brief (TC_IMR) RA Loading */
#define TC_IMR_LDRBS (0x1u << 6) /**< \brief (TC_IMR) RB Loading */
#define TC_IMR_ETRGS (0x1u << 7) /**< \brief (TC_IMR) External Trigger */
/* -------- TC_EMR : (TC Offset: N/A) Extended Mode Register -------- */
#define TC_EMR_TRIGSRCA_Pos 0
#define TC_EMR_TRIGSRCA_Msk (0x3u << TC_EMR_TRIGSRCA_Pos) /**< \brief (TC_EMR) TRIGger SouRCe for input A */
#define   TC_EMR_TRIGSRCA_EXTERNAL_TIOAx (0x0u << 0) /**< \brief (TC_EMR) The trigger/capture input A is driven by external pin TIOAx */
#define   TC_EMR_TRIGSRCA_PWMx (0x1u << 0) /**< \brief (TC_EMR) The trigger/capture input A is driven internally by PWMx */
#define TC_EMR_TRIGSRCB_Pos 4
#define TC_EMR_TRIGSRCB_Msk (0x3u << TC_EMR_TRIGSRCB_Pos) /**< \brief (TC_EMR) TRIGger SouRCe for input B */
#define   TC_EMR_TRIGSRCB_EXTERNAL_TIOBx (0x0u << 4) /**< \brief (TC_EMR) The trigger/capture input B is driven by external pin TIOBx */
#define   TC_EMR_TRIGSRCB_PWMx (0x1u << 4) /**< \brief (TC_EMR) The trigger/capture input B is driven internally by PWMx */
#define TC_EMR_NODIVCLK (0x1u << 8) /**< \brief (TC_EMR) NO DIVided CLocK */
/* -------- TC_BCR : (TC Offset: 0xC0) Block Control Register -------- */
#define TC_BCR_SYNC (0x1u << 0) /**< \brief (TC_BCR) Synchro Command */
/* -------- TC_BMR : (TC Offset: 0xC4) Block Mode Register -------- */
#define TC_BMR_TC0XC0S_Pos 0
#define TC_BMR_TC0XC0S_Msk (0x3u << TC_BMR_TC0XC0S_Pos) /**< \brief (TC_BMR) External Clock Signal 0 Selection */
#define   TC_BMR_TC0XC0S_TCLK0 (0x0u << 0) /**< \brief (TC_BMR) Signal connected to XC0: TCLK0 */
#define   TC_BMR_TC0XC0S_TIOA1 (0x2u << 0) /**< \brief (TC_BMR) Signal connected to XC0: TIOA1 */
#define   TC_BMR_TC0XC0S_TIOA2 (0x3u << 0) /**< \brief (TC_BMR) Signal connected to XC0: TIOA2 */
#define TC_BMR_TC1XC1S_Pos 2
#define TC_BMR_TC1XC1S_Msk (0x3u << TC_BMR_TC1XC1S_Pos) /**< \brief (TC_BMR) External Clock Signal 1 Selection */
#define   TC_BMR_TC1XC1S_TCLK1 (0x0u << 2) /**< \brief (TC_BMR) Signal connected to XC1: TCLK1 */
#define   TC_BMR_TC1XC1S_TIOA0 (0x2u << 2) /**< \brief (TC_BMR) Signal connected to XC1: TIOA0 */
#define   TC_BMR_TC1XC1S_TIOA2 (0x3u << 2) /**< \brief (TC_BMR) Signal connected to XC1: TIOA2 */
#define TC_BMR_TC2XC2S_Pos 4
#define TC_BMR_TC2XC2S_Msk (0x3u << TC_BMR_TC2XC2S_Pos) /**< \brief (TC_BMR) External Clock Signal 2 Selection */
#define   TC_BMR_TC2XC2S_TCLK2 (0x0u << 4) /**< \brief (TC_BMR) Signal connected to XC2: TCLK2 */
#define   TC_BMR_TC2XC2S_TIOA0 (0x2u << 4) /**< \brief (TC_BMR) Signal connected to XC2: TIOA0 */
#define   TC_BMR_TC2XC2S_TIOA1 (0x3u << 4) /**< \brief (TC_BMR) Signal connected to XC2: TIOA1 */
#define TC_BMR_QDEN (0x1u << 8) /**< \brief (TC_BMR) Quadrature Decoder ENabled */
#define TC_BMR_POSEN (0x1u << 9) /**< \brief (TC_BMR) POSition ENabled */
#define TC_BMR_SPEEDEN (0x1u << 10) /**< \brief (TC_BMR) SPEED ENabled */
#define TC_BMR_QDTRANS (0x1u << 11) /**< \brief (TC_BMR) Quadrature Decoding TRANSparent */
#define TC_BMR_EDGPHA (0x1u << 12) /**< \brief (TC_BMR) EDGe on PHA count mode */
#define TC_BMR_INVA (0x1u << 13) /**< \brief (TC_BMR) INVerted phA */
#define TC_BMR_INVB (0x1u << 14) /**< \brief (TC_BMR) INVerted phB */
#define TC_BMR_INVIDX (0x1u << 15) /**< \brief (TC_BMR) INVerted InDeX */
#define TC_BMR_SWAP (0x1u << 16) /**< \brief (TC_BMR) SWAP PHA and PHB */
#define TC_BMR_IDXPHB (0x1u << 17) /**< \brief (TC_BMR) InDeX pin is PHB pin */
#define TC_BMR_FILTER (0x1u << 19) /**< \brief (TC_BMR) Glitch Filter */
#define TC_BMR_MAXFILT_Pos 20
#define TC_BMR_MAXFILT_Msk (0x3fu << TC_BMR_MAXFILT_Pos) /**< \brief (TC_BMR) MAXimum FILTer */
#define TC_BMR_MAXFILT(value) ((TC_BMR_MAXFILT_Msk & ((value) << TC_BMR_MAXFILT_Pos)))
/* -------- TC_QIER : (TC Offset: 0xC8) QDEC Interrupt Enable Register -------- */
#define TC_QIER_IDX (0x1u << 0) /**< \brief (TC_QIER) InDeX */
#define TC_QIER_DIRCHG (0x1u << 1) /**< \brief (TC_QIER) DIRection CHanGe */
#define TC_QIER_QERR (0x1u << 2) /**< \brief (TC_QIER) Quadrature ERRor */
/* -------- TC_QIDR : (TC Offset: 0xCC) QDEC Interrupt Disable Register -------- */
#define TC_QIDR_IDX (0x1u << 0) /**< \brief (TC_QIDR) InDeX */
#define TC_QIDR_DIRCHG (0x1u << 1) /**< \brief (TC_QIDR) DIRection CHanGe */
#define TC_QIDR_QERR (0x1u << 2) /**< \brief (TC_QIDR) Quadrature ERRor */
/* -------- TC_QIMR : (TC Offset: 0xD0) QDEC Interrupt Mask Register -------- */
#define TC_QIMR_IDX (0x1u << 0) /**< \brief (TC_QIMR) InDeX */
#define TC_QIMR_DIRCHG (0x1u << 1) /**< \brief (TC_QIMR) DIRection CHanGe */
#define TC_QIMR_QERR (0x1u << 2) /**< \brief (TC_QIMR) Quadrature ERRor */
/* -------- TC_QISR : (TC Offset: 0xD4) QDEC Interrupt Status Register -------- */
#define TC_QISR_IDX (0x1u << 0) /**< \brief (TC_QISR) InDeX */
#define TC_QISR_DIRCHG (0x1u << 1) /**< \brief (TC_QISR) DIRection CHanGe */
#define TC_QISR_QERR (0x1u << 2) /**< \brief (TC_QISR) Quadrature ERRor */
#define TC_QISR_DIR (0x1u << 8) /**< \brief (TC_QISR) DIRection */
/* -------- TC_FMR : (TC Offset: 0xD8) Fault Mode Register -------- */
#define TC_FMR_ENCF0 (0x1u << 0) /**< \brief (TC_FMR) ENable Compare Fault Channel 0 */
#define TC_FMR_ENCF1 (0x1u << 1) /**< \brief (TC_FMR) ENable Compare Fault Channel 1 */
/* -------- TC_WPMR : (TC Offset: 0xE4) Write Protection Mode Register -------- */
#define TC_WPMR_WPEN (0x1u << 0) /**< \brief (TC_WPMR) Write Protect Enable */
#define TC_WPMR_WPKEY_Pos 8
#define TC_WPMR_WPKEY_Msk (0xffffffu << TC_WPMR_WPKEY_Pos) /**< \brief (TC_WPMR) Write Protect KEY */
#define   TC_WPMR_WPKEY_PASSWD (0x54494Du << 8) /**< \brief (TC_WPMR) Writing any other value in this field aborts the write operation of the WPEN bit.Always reads as 0. */
/* -------- TC_VER : (TC Offset: 0xFC) Version Register -------- */
#define TC_VER_VERSION_Pos 0
#define TC_VER_VERSION_Msk (0xfffu << TC_VER_VERSION_Pos) /**< \brief (TC_VER) Version of the Hardware Module */
#define TC_VER_MFN_Pos 16
#define TC_VER_MFN_Msk (0x7u << TC_VER_MFN_Pos) /**< \brief (TC_VER) Metal Fix Number */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR Triple Data Encryption Standard */
/* ============================================================================= */
/** \addtogroup SAMA5D2_TDES Triple Data Encryption Standard */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief Tdes hardware registers */
typedef struct {
  __O  uint32_t TDES_CR;        /**< \brief (Tdes Offset: 0x00) Control Register */
  __IO uint32_t TDES_MR;        /**< \brief (Tdes Offset: 0x04) Mode Register */
  __I  uint32_t Reserved1[2];
  __O  uint32_t TDES_IER;       /**< \brief (Tdes Offset: 0x10) Interrupt Enable Register */
  __O  uint32_t TDES_IDR;       /**< \brief (Tdes Offset: 0x14) Interrupt Disable Register */
  __I  uint32_t TDES_IMR;       /**< \brief (Tdes Offset: 0x18) Interrupt Mask Register */
  __I  uint32_t TDES_ISR;       /**< \brief (Tdes Offset: 0x1C) Interrupt Status Register */
  __O  uint32_t TDES_KEY1WR[2]; /**< \brief (Tdes Offset: 0x20) Key 1 Word Register */
  __O  uint32_t TDES_KEY2WR[2]; /**< \brief (Tdes Offset: 0x28) Key 2 Word Register */
  __O  uint32_t TDES_KEY3WR[2]; /**< \brief (Tdes Offset: 0x30) Key 3 Word Register */
  __I  uint32_t Reserved2[2];
  __O  uint32_t TDES_IDATAR[2]; /**< \brief (Tdes Offset: 0x40) Input Data Register */
  __I  uint32_t Reserved3[2];
  __I  uint32_t TDES_ODATAR[2]; /**< \brief (Tdes Offset: 0x50) Output Data Register */
  __I  uint32_t Reserved4[2];
  __O  uint32_t TDES_IVR[2];    /**< \brief (Tdes Offset: 0x60) Initialization Vector Register */
  __I  uint32_t Reserved5[2];
  __IO uint32_t TDES_XTEA_RNDR; /**< \brief (Tdes Offset: 0x70) XTEA Rounds Register */
  __I  uint32_t Reserved6[34];
  __I  uint32_t TDES_VERSION;   /**< \brief (Tdes Offset: 0xFC) Version Register */
} Tdes;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- TDES_CR : (TDES Offset: 0x00) Control Register -------- */
#define TDES_CR_START (0x1u << 0) /**< \brief (TDES_CR) Start Processing */
#define TDES_CR_SWRST (0x1u << 8) /**< \brief (TDES_CR) Software Reset */
#define TDES_CR_LOADSEED (0x1u << 16) /**< \brief (TDES_CR) Load Seed */
/* -------- TDES_MR : (TDES Offset: 0x04) Mode Register -------- */
#define TDES_MR_CIPHER (0x1u << 0) /**< \brief (TDES_MR) Processing Mode */
#define   TDES_MR_CIPHER_DECRYPT (0x0u << 0) /**< \brief (TDES_MR) Decrypts data. */
#define   TDES_MR_CIPHER_ENCRYPT (0x1u << 0) /**< \brief (TDES_MR) Encrypts data. */
#define TDES_MR_TDESMOD_Pos 1
#define TDES_MR_TDESMOD_Msk (0x3u << TDES_MR_TDESMOD_Pos) /**< \brief (TDES_MR) ALGORITHM mode */
#define   TDES_MR_TDESMOD_SINGLE_DES (0x0u << 1) /**< \brief (TDES_MR) Single DES processing using TDES_KEY1WRx registers */
#define   TDES_MR_TDESMOD_TRIPLE_DES (0x1u << 1) /**< \brief (TDES_MR) Triple DES processing using TDES_KEY1WRx, TDES_KEY2WRx and TDES_KEY3WRx registers */
#define   TDES_MR_TDESMOD_XTEA (0x2u << 1) /**< \brief (TDES_MR) XTEA processing using TDES_KEY1WRx, TDES_KEY2WRx */
#define TDES_MR_KEYMOD (0x1u << 4) /**< \brief (TDES_MR) Key Mode */
#define TDES_MR_SMOD_Pos 8
#define TDES_MR_SMOD_Msk (0x3u << TDES_MR_SMOD_Pos) /**< \brief (TDES_MR) Start Mode */
#define   TDES_MR_SMOD_MANUAL_START (0x0u << 8) /**< \brief (TDES_MR) Manual Mode */
#define   TDES_MR_SMOD_AUTO_START (0x1u << 8) /**< \brief (TDES_MR) Auto Mode */
#define   TDES_MR_SMOD_IDATAR0_START (0x2u << 8) /**< \brief (TDES_MR) TDES_IDATAR0 access only Auto Mode */
#define TDES_MR_OPMOD_Pos 12
#define TDES_MR_OPMOD_Msk (0x3u << TDES_MR_OPMOD_Pos) /**< \brief (TDES_MR) Operation Mode */
#define   TDES_MR_OPMOD_ECB (0x0u << 12) /**< \brief (TDES_MR) Electronic Code Book mode */
#define   TDES_MR_OPMOD_CBC (0x1u << 12) /**< \brief (TDES_MR) Cipher Block Chaining mode */
#define   TDES_MR_OPMOD_OFB (0x2u << 12) /**< \brief (TDES_MR) Output Feedback mode */
#define   TDES_MR_OPMOD_CFB (0x3u << 12) /**< \brief (TDES_MR) Cipher Feedback mode */
#define TDES_MR_LOD (0x1u << 15) /**< \brief (TDES_MR) Last Output Data Mode */
#define TDES_MR_CFBS_Pos 16
#define TDES_MR_CFBS_Msk (0x3u << TDES_MR_CFBS_Pos) /**< \brief (TDES_MR) Cipher Feedback Data Size */
#define   TDES_MR_CFBS_SIZE_64BIT (0x0u << 16) /**< \brief (TDES_MR) 64-bit */
#define   TDES_MR_CFBS_SIZE_32BIT (0x1u << 16) /**< \brief (TDES_MR) 32-bit */
#define   TDES_MR_CFBS_SIZE_16BIT (0x2u << 16) /**< \brief (TDES_MR) 16-bit */
#define   TDES_MR_CFBS_SIZE_8BIT (0x3u << 16) /**< \brief (TDES_MR) 8-bit */
#define TDES_MR_CKEY_Pos 20
#define TDES_MR_CKEY_Msk (0xfu << TDES_MR_CKEY_Pos) /**< \brief (TDES_MR) Countermeasure Key */
#define TDES_MR_CKEY(value) ((TDES_MR_CKEY_Msk & ((value) << TDES_MR_CKEY_Pos)))
#define TDES_MR_CMTYP1 (0x1u << 24) /**< \brief (TDES_MR) Countermeasure Type 1 */
#define   TDES_MR_CMTYP1_NO_PAUSE (0x0u << 24) /**< \brief (TDES_MR) Countermeasure type 1 is disabled */
#define   TDES_MR_CMTYP1_PAUSE (0x1u << 24) /**< \brief (TDES_MR) Countermeasure type 1 is enabled */
#define TDES_MR_CMTYP2 (0x1u << 25) /**< \brief (TDES_MR) Countermeasure Type 2 */
#define   TDES_MR_CMTYP2_NO_DUMMY (0x0u << 25) /**< \brief (TDES_MR) Countermeasure type 2 is disabled */
#define   TDES_MR_CMTYP2_DUMMY (0x1u << 25) /**< \brief (TDES_MR) Countermeasure type 2 is enabled */
#define TDES_MR_CMTYP3 (0x1u << 26) /**< \brief (TDES_MR) Countermeasure Type 3 */
#define   TDES_MR_CMTYP3_NO_RESTART (0x0u << 26) /**< \brief (TDES_MR) Countermeasure type 3 is disabled */
#define   TDES_MR_CMTYP3_RESTART (0x1u << 26) /**< \brief (TDES_MR) Countermeasure type 3 is enabled */
#define TDES_MR_CMTYP4 (0x1u << 27) /**< \brief (TDES_MR) Countermeasure Type 4 */
#define   TDES_MR_CMTYP4_NO_IDLECURRENT (0x0u << 27) /**< \brief (TDES_MR) Countermeasure type 4 is disabled */
#define   TDES_MR_CMTYP4_IDLECURRENT (0x1u << 27) /**< \brief (TDES_MR) Countermeasure type 4 is enabled */
#define TDES_MR_CMTYP5 (0x1u << 28) /**< \brief (TDES_MR) Countermeasure Type 5 */
#define   TDES_MR_CMTYP5_NO_ADDACCESS (0x0u << 28) /**< \brief (TDES_MR) Countermeasure type 5 is disabled */
#define   TDES_MR_CMTYP5_ADDACCESS (0x1u << 28) /**< \brief (TDES_MR) Countermeasure type 5 is enabled */
#define TDES_MR_CMTYP6 (0x1u << 29) /**< \brief (TDES_MR) Countermeasure Type 6 */
#define   TDES_MR_CMTYP6_NO_UNIFORM (0x0u << 29) /**< \brief (TDES_MR) Countermeasure type 6 is disabled */
#define   TDES_MR_CMTYP6_UNIFORM (0x1u << 29) /**< \brief (TDES_MR) Countermeasure type 6 is enabled */
/* -------- TDES_IER : (TDES Offset: 0x10) Interrupt Enable Register -------- */
#define TDES_IER_DATRDY (0x1u << 0) /**< \brief (TDES_IER) Data Ready Interrupt Enable */
#define TDES_IER_URAD (0x1u << 8) /**< \brief (TDES_IER) Unspecified Register Access Detection Interrupt Enable */
/* -------- TDES_IDR : (TDES Offset: 0x14) Interrupt Disable Register -------- */
#define TDES_IDR_DATRDY (0x1u << 0) /**< \brief (TDES_IDR) Data Ready Interrupt Disable */
#define TDES_IDR_URAD (0x1u << 8) /**< \brief (TDES_IDR) Unspecified Register Access Detection Interrupt Disable */
/* -------- TDES_IMR : (TDES Offset: 0x18) Interrupt Mask Register -------- */
#define TDES_IMR_DATRDY (0x1u << 0) /**< \brief (TDES_IMR) Data Ready Interrupt Mask */
#define TDES_IMR_URAD (0x1u << 8) /**< \brief (TDES_IMR) Unspecified Register Access Detection Interrupt Mask */
/* -------- TDES_ISR : (TDES Offset: 0x1C) Interrupt Status Register -------- */
#define TDES_ISR_DATRDY (0x1u << 0) /**< \brief (TDES_ISR) Data Ready */
#define TDES_ISR_URAD (0x1u << 8) /**< \brief (TDES_ISR) Unspecified Register Access Detection Status */
#define TDES_ISR_URAT_Pos 12
#define TDES_ISR_URAT_Msk (0x3u << TDES_ISR_URAT_Pos) /**< \brief (TDES_ISR) Unspecified Register Access */
#define   TDES_ISR_URAT_IDR_WR_PROCESSING (0x0u << 12) /**< \brief (TDES_ISR) Input Data Register written during the data processing when SMOD = 0x2 mode. */
#define   TDES_ISR_URAT_ODR_RD_PROCESSING (0x1u << 12) /**< \brief (TDES_ISR) Output Data Register read during the data processing. */
#define   TDES_ISR_URAT_MR_WR_PROCESSING (0x2u << 12) /**< \brief (TDES_ISR) Mode Register written during the data processing. */
#define   TDES_ISR_URAT_WOR_RD_ACCESS (0x3u << 12) /**< \brief (TDES_ISR) Write-only register read access. */
/* -------- TDES_KEY1WR[2] : (TDES Offset: 0x20) Key 1 Word Register -------- */
#define TDES_KEY1WR_KEY1W_Pos 0
#define TDES_KEY1WR_KEY1W_Msk (0xffffffffu << TDES_KEY1WR_KEY1W_Pos) /**< \brief (TDES_KEY1WR[2]) Key 1 Word */
#define TDES_KEY1WR_KEY1W(value) ((TDES_KEY1WR_KEY1W_Msk & ((value) << TDES_KEY1WR_KEY1W_Pos)))
/* -------- TDES_KEY2WR[2] : (TDES Offset: 0x28) Key 2 Word Register -------- */
#define TDES_KEY2WR_KEY2W_Pos 0
#define TDES_KEY2WR_KEY2W_Msk (0xffffffffu << TDES_KEY2WR_KEY2W_Pos) /**< \brief (TDES_KEY2WR[2]) Key 2 Word */
#define TDES_KEY2WR_KEY2W(value) ((TDES_KEY2WR_KEY2W_Msk & ((value) << TDES_KEY2WR_KEY2W_Pos)))
/* -------- TDES_KEY3WR[2] : (TDES Offset: 0x30) Key 3 Word Register -------- */
#define TDES_KEY3WR_KEY3W_Pos 0
#define TDES_KEY3WR_KEY3W_Msk (0xffffffffu << TDES_KEY3WR_KEY3W_Pos) /**< \brief (TDES_KEY3WR[2]) Key 3 Word */
#define TDES_KEY3WR_KEY3W(value) ((TDES_KEY3WR_KEY3W_Msk & ((value) << TDES_KEY3WR_KEY3W_Pos)))
/* -------- TDES_IDATAR[2] : (TDES Offset: 0x40) Input Data Register -------- */
#define TDES_IDATAR_IDATA_Pos 0
#define TDES_IDATAR_IDATA_Msk (0xffffffffu << TDES_IDATAR_IDATA_Pos) /**< \brief (TDES_IDATAR[2]) Input Data */
#define TDES_IDATAR_IDATA(value) ((TDES_IDATAR_IDATA_Msk & ((value) << TDES_IDATAR_IDATA_Pos)))
/* -------- TDES_ODATAR[2] : (TDES Offset: 0x50) Output Data Register -------- */
#define TDES_ODATAR_ODATA_Pos 0
#define TDES_ODATAR_ODATA_Msk (0xffffffffu << TDES_ODATAR_ODATA_Pos) /**< \brief (TDES_ODATAR[2]) Output Data */
/* -------- TDES_IVR[2] : (TDES Offset: 0x60) Initialization Vector Register -------- */
#define TDES_IVR_IV_Pos 0
#define TDES_IVR_IV_Msk (0xffffffffu << TDES_IVR_IV_Pos) /**< \brief (TDES_IVR[2]) Initialization Vector */
#define TDES_IVR_IV(value) ((TDES_IVR_IV_Msk & ((value) << TDES_IVR_IV_Pos)))
/* -------- TDES_XTEA_RNDR : (TDES Offset: 0x70) XTEA Rounds Register -------- */
#define TDES_XTEA_RNDR_XTEA_RNDS_Pos 0
#define TDES_XTEA_RNDR_XTEA_RNDS_Msk (0x3fu << TDES_XTEA_RNDR_XTEA_RNDS_Pos) /**< \brief (TDES_XTEA_RNDR) Number of Rounds */
#define TDES_XTEA_RNDR_XTEA_RNDS(value) ((TDES_XTEA_RNDR_XTEA_RNDS_Msk & ((value) << TDES_XTEA_RNDR_XTEA_RNDS_Pos)))
/* -------- TDES_VERSION : (TDES Offset: 0xFC) Version Register -------- */
#define TDES_VERSION_VERSION_Pos 0
#define TDES_VERSION_VERSION_Msk (0xfffu << TDES_VERSION_VERSION_Pos) /**< \brief (TDES_VERSION) Version of the Hardware Module */
#define TDES_VERSION_MFN_Pos 16
#define TDES_VERSION_MFN_Msk (0x7u << TDES_VERSION_MFN_Pos) /**< \brief (TDES_VERSION) Metal Fix Number */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR True Random Number Generator */
/* ============================================================================= */
/** \addtogroup SAMA5D2_TRNG True Random Number Generator */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief Trng hardware registers */
typedef struct {
  __O uint32_t TRNG_CR;       /**< \brief (Trng Offset: 0x00) Control Register */
  __I uint32_t Reserved1[3];
  __O uint32_t TRNG_IER;      /**< \brief (Trng Offset: 0x10) Interrupt Enable Register */
  __O uint32_t TRNG_IDR;      /**< \brief (Trng Offset: 0x14) Interrupt Disable Register */
  __I uint32_t TRNG_IMR;      /**< \brief (Trng Offset: 0x18) Interrupt Mask Register */
  __I uint32_t TRNG_ISR;      /**< \brief (Trng Offset: 0x1C) Interrupt Status Register */
  __I uint32_t Reserved2[12];
  __I uint32_t TRNG_ODATA;    /**< \brief (Trng Offset: 0x50) Output Data Register */
  __I uint32_t Reserved3[42];
  __I uint32_t TRNG_VERSION;  /**< \brief (Trng Offset: 0xFC) Version Register */
} Trng;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- TRNG_CR : (TRNG Offset: 0x00) Control Register -------- */
#define TRNG_CR_ENABLE (0x1u << 0) /**< \brief (TRNG_CR) Enables the TRNG to provide random values */
#define TRNG_CR_KEY_Pos 8
#define TRNG_CR_KEY_Msk (0xffffffu << TRNG_CR_KEY_Pos) /**< \brief (TRNG_CR) Security Key. */
#define   TRNG_CR_KEY_PASSWD (0x524E47u << 8) /**< \brief (TRNG_CR) Writing any other value in this field aborts the write operation. */
/* -------- TRNG_IER : (TRNG Offset: 0x10) Interrupt Enable Register -------- */
#define TRNG_IER_DATRDY (0x1u << 0) /**< \brief (TRNG_IER) Data Ready Interrupt Enable */
/* -------- TRNG_IDR : (TRNG Offset: 0x14) Interrupt Disable Register -------- */
#define TRNG_IDR_DATRDY (0x1u << 0) /**< \brief (TRNG_IDR) Data Ready Interrupt Disable */
/* -------- TRNG_IMR : (TRNG Offset: 0x18) Interrupt Mask Register -------- */
#define TRNG_IMR_DATRDY (0x1u << 0) /**< \brief (TRNG_IMR) Data Ready Interrupt Mask */
/* -------- TRNG_ISR : (TRNG Offset: 0x1C) Interrupt Status Register -------- */
#define TRNG_ISR_DATRDY (0x1u << 0) /**< \brief (TRNG_ISR) Data Ready */
/* -------- TRNG_ODATA : (TRNG Offset: 0x50) Output Data Register -------- */
#define TRNG_ODATA_ODATA_Pos 0
#define TRNG_ODATA_ODATA_Msk (0xffffffffu << TRNG_ODATA_ODATA_Pos) /**< \brief (TRNG_ODATA) Output Data */
/* -------- TRNG_VERSION : (TRNG Offset: 0xFC) Version Register -------- */
#define TRNG_VERSION_VERSION_Pos 0
#define TRNG_VERSION_VERSION_Msk (0xfffu << TRNG_VERSION_VERSION_Pos) /**< \brief (TRNG_VERSION) Version of the Hardware Module */
#define TRNG_VERSION_MFN_Pos 16
#define TRNG_VERSION_MFN_Msk (0x7u << TRNG_VERSION_MFN_Pos) /**< \brief (TRNG_VERSION) Metal Fix Number */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR Two-wire Interface High Speed */
/* ============================================================================= */
/** \addtogroup SAMA5D2_TWIHS Two-wire Interface High Speed */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief Twihs hardware registers */
typedef struct {
  __O  uint32_t TWIHS_CR;      /**< \brief (Twihs Offset: 0x00) Control Register */
  __IO uint32_t TWIHS_MMR;     /**< \brief (Twihs Offset: 0x04) Master Mode Register */
  __IO uint32_t TWIHS_SMR;     /**< \brief (Twihs Offset: 0x08) Slave Mode Register */
  __IO uint32_t TWIHS_IADR;    /**< \brief (Twihs Offset: 0x0C) Internal Address Register */
  __IO uint32_t TWIHS_CWGR;    /**< \brief (Twihs Offset: 0x10) Clock Waveform Generator Register */
  __I  uint32_t Reserved1[3];
  __I  uint32_t TWIHS_SR;      /**< \brief (Twihs Offset: 0x20) Status Register */
  __O  uint32_t TWIHS_IER;     /**< \brief (Twihs Offset: 0x24) Interrupt Enable Register */
  __O  uint32_t TWIHS_IDR;     /**< \brief (Twihs Offset: 0x28) Interrupt Disable Register */
  __I  uint32_t TWIHS_IMR;     /**< \brief (Twihs Offset: 0x2C) Interrupt Mask Register */
  __I  uint32_t TWIHS_RHR;     /**< \brief (Twihs Offset: 0x30) Receive Holding Register */
  __O  uint32_t TWIHS_THR;     /**< \brief (Twihs Offset: 0x34) Transmit Holding Register */
  __IO uint32_t TWIHS_SMBTR;   /**< \brief (Twihs Offset: 0x38) SMBus Timing Register */
  __I  uint32_t Reserved2[1];
  __IO uint32_t TWIHS_ACR;     /**< \brief (Twihs Offset: 0x40) Alternative Command Register */
  __IO uint32_t TWIHS_FILTR;   /**< \brief (Twihs Offset: 0x44) Filter Register */
  __I  uint32_t Reserved3[1];
  __IO uint32_t TWIHS_SWMR;    /**< \brief (Twihs Offset: 0x4C) SleepWalking Matching Register */
  __I  uint32_t Reserved4[32];
  __I  uint32_t TWIHS_DR;      /**< \brief (Twihs Offset: 0xD0) Debug Register */
  __I  uint32_t Reserved5[4];
  __IO uint32_t TWIHS_WPMR;    /**< \brief (Twihs Offset: 0xE4) Write Protection Mode Register */
  __I  uint32_t TWIHS_WPSR;    /**< \brief (Twihs Offset: 0xE8) Write Protection Status Register */
  __I  uint32_t Reserved6[4];
  __I  uint32_t TWIHS_VER;     /**< \brief (Twihs Offset: 0xFC) Version Register */
} Twihs;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- TWIHS_CR : (TWIHS Offset: 0x00) Control Register -------- */
#define TWIHS_CR_START (0x1u << 0) /**< \brief (TWIHS_CR) Send a START Condition */
#define TWIHS_CR_STOP (0x1u << 1) /**< \brief (TWIHS_CR) Send a STOP Condition */
#define TWIHS_CR_MSEN (0x1u << 2) /**< \brief (TWIHS_CR) TWIHS Master Mode Enabled */
#define TWIHS_CR_MSDIS (0x1u << 3) /**< \brief (TWIHS_CR) TWIHS Master Mode Disabled */
#define TWIHS_CR_SVEN (0x1u << 4) /**< \brief (TWIHS_CR) TWIHS Slave Mode Enabled */
#define TWIHS_CR_SVDIS (0x1u << 5) /**< \brief (TWIHS_CR) TWIHS Slave Mode Disabled */
#define TWIHS_CR_QUICK (0x1u << 6) /**< \brief (TWIHS_CR) SMBus Quick Command */
#define TWIHS_CR_SWRST (0x1u << 7) /**< \brief (TWIHS_CR) Software Reset */
#define TWIHS_CR_HSEN (0x1u << 8) /**< \brief (TWIHS_CR) TWIHS High-Speed Mode Enabled */
#define TWIHS_CR_HSDIS (0x1u << 9) /**< \brief (TWIHS_CR) TWIHS High-Speed Mode Disabled */
#define TWIHS_CR_SMBEN (0x1u << 10) /**< \brief (TWIHS_CR) SMBus Mode Enabled */
#define TWIHS_CR_SMBDIS (0x1u << 11) /**< \brief (TWIHS_CR) SMBus Mode Disabled */
#define TWIHS_CR_PECEN (0x1u << 12) /**< \brief (TWIHS_CR) Packet Error Checking Enable */
#define TWIHS_CR_PECDIS (0x1u << 13) /**< \brief (TWIHS_CR) Packet Error Checking Disable */
#define TWIHS_CR_PECRQ (0x1u << 14) /**< \brief (TWIHS_CR) PEC Request */
#define TWIHS_CR_CLEAR (0x1u << 15) /**< \brief (TWIHS_CR) Bus CLEAR Command */
#define TWIHS_CR_ACMEN (0x1u << 16) /**< \brief (TWIHS_CR) Alternative Command Mode Enable */
#define TWIHS_CR_ACMDIS (0x1u << 17) /**< \brief (TWIHS_CR) Alternative Command Mode Disable */
#define TWIHS_CR_THRCLR (0x1u << 24) /**< \brief (TWIHS_CR) Transmit Holding Register clear */
#define TWIHS_CR_LOCKCLR (0x1u << 26) /**< \brief (TWIHS_CR) FSM Lock Clear */
/* -------- TWIHS_MMR : (TWIHS Offset: 0x04) Master Mode Register -------- */
#define TWIHS_MMR_IADRSZ_Pos 8
#define TWIHS_MMR_IADRSZ_Msk (0x3u << TWIHS_MMR_IADRSZ_Pos) /**< \brief (TWIHS_MMR) Internal Device Address Size */
#define   TWIHS_MMR_IADRSZ_NONE (0x0u << 8) /**< \brief (TWIHS_MMR) No internal device address */
#define   TWIHS_MMR_IADRSZ_1_BYTE (0x1u << 8) /**< \brief (TWIHS_MMR) One-byte internal device address */
#define   TWIHS_MMR_IADRSZ_2_BYTE (0x2u << 8) /**< \brief (TWIHS_MMR) Two-byte internal device address */
#define   TWIHS_MMR_IADRSZ_3_BYTE (0x3u << 8) /**< \brief (TWIHS_MMR) Three-byte internal device address */
#define TWIHS_MMR_MREAD (0x1u << 12) /**< \brief (TWIHS_MMR) Master Read Direction */
#define TWIHS_MMR_DADR_Pos 16
#define TWIHS_MMR_DADR_Msk (0x7fu << TWIHS_MMR_DADR_Pos) /**< \brief (TWIHS_MMR) Device Address */
#define TWIHS_MMR_DADR(value) ((TWIHS_MMR_DADR_Msk & ((value) << TWIHS_MMR_DADR_Pos)))
/* -------- TWIHS_SMR : (TWIHS Offset: 0x08) Slave Mode Register -------- */
#define TWIHS_SMR_NACKEN (0x1u << 0) /**< \brief (TWIHS_SMR) Slave Receiver Data Phase NACK enable */
#define TWIHS_SMR_SMDA (0x1u << 2) /**< \brief (TWIHS_SMR) SMBus Default Address */
#define TWIHS_SMR_SMHH (0x1u << 3) /**< \brief (TWIHS_SMR) SMBus Host Header */
#define TWIHS_SMR_SCLWSDIS (0x1u << 6) /**< \brief (TWIHS_SMR) Clock Wait State Disable */
#define TWIHS_SMR_MASK_Pos 8
#define TWIHS_SMR_MASK_Msk (0x7fu << TWIHS_SMR_MASK_Pos) /**< \brief (TWIHS_SMR) Slave Address Mask */
#define TWIHS_SMR_MASK(value) ((TWIHS_SMR_MASK_Msk & ((value) << TWIHS_SMR_MASK_Pos)))
#define TWIHS_SMR_SADR_Pos 16
#define TWIHS_SMR_SADR_Msk (0x7fu << TWIHS_SMR_SADR_Pos) /**< \brief (TWIHS_SMR) Slave Address */
#define TWIHS_SMR_SADR(value) ((TWIHS_SMR_SADR_Msk & ((value) << TWIHS_SMR_SADR_Pos)))
#define TWIHS_SMR_SADR1EN (0x1u << 28) /**< \brief (TWIHS_SMR) Slave Address 1 Enable */
#define TWIHS_SMR_SADR2EN (0x1u << 29) /**< \brief (TWIHS_SMR) Slave Address 2 Enable */
#define TWIHS_SMR_SADR3EN (0x1u << 30) /**< \brief (TWIHS_SMR) Slave Address 3 Enable */
#define TWIHS_SMR_DATAMEN (0x1u << 31) /**< \brief (TWIHS_SMR) Data Matching Enable */
/* -------- TWIHS_IADR : (TWIHS Offset: 0x0C) Internal Address Register -------- */
#define TWIHS_IADR_IADR_Pos 0
#define TWIHS_IADR_IADR_Msk (0xffffffu << TWIHS_IADR_IADR_Pos) /**< \brief (TWIHS_IADR) Internal Address */
#define TWIHS_IADR_IADR(value) ((TWIHS_IADR_IADR_Msk & ((value) << TWIHS_IADR_IADR_Pos)))
/* -------- TWIHS_CWGR : (TWIHS Offset: 0x10) Clock Waveform Generator Register -------- */
#define TWIHS_CWGR_CLDIV_Pos 0
#define TWIHS_CWGR_CLDIV_Msk (0xffu << TWIHS_CWGR_CLDIV_Pos) /**< \brief (TWIHS_CWGR) Clock Low Divider */
#define TWIHS_CWGR_CLDIV(value) ((TWIHS_CWGR_CLDIV_Msk & ((value) << TWIHS_CWGR_CLDIV_Pos)))
#define TWIHS_CWGR_CHDIV_Pos 8
#define TWIHS_CWGR_CHDIV_Msk (0xffu << TWIHS_CWGR_CHDIV_Pos) /**< \brief (TWIHS_CWGR) Clock High Divider */
#define TWIHS_CWGR_CHDIV(value) ((TWIHS_CWGR_CHDIV_Msk & ((value) << TWIHS_CWGR_CHDIV_Pos)))
#define TWIHS_CWGR_CKDIV_Pos 16
#define TWIHS_CWGR_CKDIV_Msk (0x7u << TWIHS_CWGR_CKDIV_Pos) /**< \brief (TWIHS_CWGR) Clock Divider */
#define TWIHS_CWGR_CKDIV(value) ((TWIHS_CWGR_CKDIV_Msk & ((value) << TWIHS_CWGR_CKDIV_Pos)))
#define TWIHS_CWGR_CKSRC (0x1u << 20) /**< \brief (TWIHS_CWGR) Transfer Rate Clock Source */
#define   TWIHS_CWGR_CKSRC_PERIPH_CK (0x0u << 20) /**< \brief (TWIHS_CWGR) Peripheral clock is used to generate the TWIHS baud rate. */
#define   TWIHS_CWGR_CKSRC_PMC_PCK (0x1u << 20) /**< \brief (TWIHS_CWGR) PMC PCKx is used to generate the TWIHS baud rate. */
#define TWIHS_CWGR_HOLD_Pos 24
#define TWIHS_CWGR_HOLD_Msk (0x1fu << TWIHS_CWGR_HOLD_Pos) /**< \brief (TWIHS_CWGR) TWD Hold Time Versus TWCK Falling */
#define TWIHS_CWGR_HOLD(value) ((TWIHS_CWGR_HOLD_Msk & ((value) << TWIHS_CWGR_HOLD_Pos)))
/* -------- TWIHS_SR : (TWIHS Offset: 0x20) Status Register -------- */
#define TWIHS_SR_TXCOMP (0x1u << 0) /**< \brief (TWIHS_SR) Transmission Completed (cleared by writing TWIHS_THR) */
#define TWIHS_SR_RXRDY (0x1u << 1) /**< \brief (TWIHS_SR) Receive Holding Register Ready (cleared by reading TWIHS_RHR) */
#define TWIHS_SR_TXRDY (0x1u << 2) /**< \brief (TWIHS_SR) Transmit Holding Register Ready (cleared by writing TWIHS_THR) */
#define TWIHS_SR_SVREAD (0x1u << 3) /**< \brief (TWIHS_SR) Slave Read */
#define TWIHS_SR_SVACC (0x1u << 4) /**< \brief (TWIHS_SR) Slave Access */
#define TWIHS_SR_GACC (0x1u << 5) /**< \brief (TWIHS_SR) General Call Access (cleared on read) */
#define TWIHS_SR_OVRE (0x1u << 6) /**< \brief (TWIHS_SR) Overrun Error (cleared on read) */
#define TWIHS_SR_UNRE (0x1u << 7) /**< \brief (TWIHS_SR) Underrun Error (cleared on read) */
#define TWIHS_SR_NACK (0x1u << 8) /**< \brief (TWIHS_SR) Not Acknowledged (cleared on read) */
#define TWIHS_SR_ARBLST (0x1u << 9) /**< \brief (TWIHS_SR) Arbitration Lost (cleared on read) */
#define TWIHS_SR_SCLWS (0x1u << 10) /**< \brief (TWIHS_SR) Clock Wait State */
#define TWIHS_SR_EOSACC (0x1u << 11) /**< \brief (TWIHS_SR) End Of Slave Access (cleared on read) */
#define TWIHS_SR_MCACK (0x1u << 16) /**< \brief (TWIHS_SR) Master Code Acknowledge (cleared on read) */
#define TWIHS_SR_TOUT (0x1u << 18) /**< \brief (TWIHS_SR) Timeout Error (cleared on read) */
#define TWIHS_SR_PECERR (0x1u << 19) /**< \brief (TWIHS_SR) PEC Error (cleared on read) */
#define TWIHS_SR_SMBDAM (0x1u << 20) /**< \brief (TWIHS_SR) SMBus Default Address Match (cleared on read) */
#define TWIHS_SR_SMBHHM (0x1u << 21) /**< \brief (TWIHS_SR) SMBus Host Header Address Match (cleared on read) */
#define TWIHS_SR_LOCK (0x1u << 23) /**< \brief (TWIHS_SR) TWIHS Lock due to Frame Errors (cleared by writing a one to bit LOCKCLR in TWIHS_CR) */
#define TWIHS_SR_SCL (0x1u << 24) /**< \brief (TWIHS_SR) SCL line value */
#define TWIHS_SR_SDA (0x1u << 25) /**< \brief (TWIHS_SR) SDA line value */
/* -------- TWIHS_IER : (TWIHS Offset: 0x24) Interrupt Enable Register -------- */
#define TWIHS_IER_TXCOMP (0x1u << 0) /**< \brief (TWIHS_IER) Transmission Completed Interrupt Enable */
#define TWIHS_IER_RXRDY (0x1u << 1) /**< \brief (TWIHS_IER) Receive Holding Register Ready Interrupt Enable */
#define TWIHS_IER_TXRDY (0x1u << 2) /**< \brief (TWIHS_IER) Transmit Holding Register Ready Interrupt Enable */
#define TWIHS_IER_SVACC (0x1u << 4) /**< \brief (TWIHS_IER) Slave Access Interrupt Enable */
#define TWIHS_IER_GACC (0x1u << 5) /**< \brief (TWIHS_IER) General Call Access Interrupt Enable */
#define TWIHS_IER_OVRE (0x1u << 6) /**< \brief (TWIHS_IER) Overrun Error Interrupt Enable */
#define TWIHS_IER_UNRE (0x1u << 7) /**< \brief (TWIHS_IER) Underrun Error Interrupt Enable */
#define TWIHS_IER_NACK (0x1u << 8) /**< \brief (TWIHS_IER) Not Acknowledge Interrupt Enable */
#define TWIHS_IER_ARBLST (0x1u << 9) /**< \brief (TWIHS_IER) Arbitration Lost Interrupt Enable */
#define TWIHS_IER_SCL_WS (0x1u << 10) /**< \brief (TWIHS_IER) Clock Wait State Interrupt Enable */
#define TWIHS_IER_EOSACC (0x1u << 11) /**< \brief (TWIHS_IER) End Of Slave Access Interrupt Enable */
#define TWIHS_IER_MCACK (0x1u << 16) /**< \brief (TWIHS_IER) Master Code Acknowledge Interrupt Enable */
#define TWIHS_IER_TOUT (0x1u << 18) /**< \brief (TWIHS_IER) Timeout Error Interrupt Enable */
#define TWIHS_IER_PECERR (0x1u << 19) /**< \brief (TWIHS_IER) PEC Error Interrupt Enable */
#define TWIHS_IER_SMBDAM (0x1u << 20) /**< \brief (TWIHS_IER) SMBus Default Address Match Interrupt Enable */
#define TWIHS_IER_SMBHHM (0x1u << 21) /**< \brief (TWIHS_IER) SMBus Host Header Address Match Interrupt Enable */
/* -------- TWIHS_IDR : (TWIHS Offset: 0x28) Interrupt Disable Register -------- */
#define TWIHS_IDR_TXCOMP (0x1u << 0) /**< \brief (TWIHS_IDR) Transmission Completed Interrupt Disable */
#define TWIHS_IDR_RXRDY (0x1u << 1) /**< \brief (TWIHS_IDR) Receive Holding Register Ready Interrupt Disable */
#define TWIHS_IDR_TXRDY (0x1u << 2) /**< \brief (TWIHS_IDR) Transmit Holding Register Ready Interrupt Disable */
#define TWIHS_IDR_SVACC (0x1u << 4) /**< \brief (TWIHS_IDR) Slave Access Interrupt Disable */
#define TWIHS_IDR_GACC (0x1u << 5) /**< \brief (TWIHS_IDR) General Call Access Interrupt Disable */
#define TWIHS_IDR_OVRE (0x1u << 6) /**< \brief (TWIHS_IDR) Overrun Error Interrupt Disable */
#define TWIHS_IDR_UNRE (0x1u << 7) /**< \brief (TWIHS_IDR) Underrun Error Interrupt Disable */
#define TWIHS_IDR_NACK (0x1u << 8) /**< \brief (TWIHS_IDR) Not Acknowledge Interrupt Disable */
#define TWIHS_IDR_ARBLST (0x1u << 9) /**< \brief (TWIHS_IDR) Arbitration Lost Interrupt Disable */
#define TWIHS_IDR_SCL_WS (0x1u << 10) /**< \brief (TWIHS_IDR) Clock Wait State Interrupt Disable */
#define TWIHS_IDR_EOSACC (0x1u << 11) /**< \brief (TWIHS_IDR) End Of Slave Access Interrupt Disable */
#define TWIHS_IDR_MCACK (0x1u << 16) /**< \brief (TWIHS_IDR) Master Code Acknowledge Interrupt Disable */
#define TWIHS_IDR_TOUT (0x1u << 18) /**< \brief (TWIHS_IDR) Timeout Error Interrupt Disable */
#define TWIHS_IDR_PECERR (0x1u << 19) /**< \brief (TWIHS_IDR) PEC Error Interrupt Disable */
#define TWIHS_IDR_SMBDAM (0x1u << 20) /**< \brief (TWIHS_IDR) SMBus Default Address Match Interrupt Disable */
#define TWIHS_IDR_SMBHHM (0x1u << 21) /**< \brief (TWIHS_IDR) SMBus Host Header Address Match Interrupt Disable */
/* -------- TWIHS_IMR : (TWIHS Offset: 0x2C) Interrupt Mask Register -------- */
#define TWIHS_IMR_TXCOMP (0x1u << 0) /**< \brief (TWIHS_IMR) Transmission Completed Interrupt Mask */
#define TWIHS_IMR_RXRDY (0x1u << 1) /**< \brief (TWIHS_IMR) Receive Holding Register Ready Interrupt Mask */
#define TWIHS_IMR_TXRDY (0x1u << 2) /**< \brief (TWIHS_IMR) Transmit Holding Register Ready Interrupt Mask */
#define TWIHS_IMR_SVACC (0x1u << 4) /**< \brief (TWIHS_IMR) Slave Access Interrupt Mask */
#define TWIHS_IMR_GACC (0x1u << 5) /**< \brief (TWIHS_IMR) General Call Access Interrupt Mask */
#define TWIHS_IMR_OVRE (0x1u << 6) /**< \brief (TWIHS_IMR) Overrun Error Interrupt Mask */
#define TWIHS_IMR_UNRE (0x1u << 7) /**< \brief (TWIHS_IMR) Underrun Error Interrupt Mask */
#define TWIHS_IMR_NACK (0x1u << 8) /**< \brief (TWIHS_IMR) Not Acknowledge Interrupt Mask */
#define TWIHS_IMR_ARBLST (0x1u << 9) /**< \brief (TWIHS_IMR) Arbitration Lost Interrupt Mask */
#define TWIHS_IMR_SCL_WS (0x1u << 10) /**< \brief (TWIHS_IMR) Clock Wait State Interrupt Mask */
#define TWIHS_IMR_EOSACC (0x1u << 11) /**< \brief (TWIHS_IMR) End Of Slave Access Interrupt Mask */
#define TWIHS_IMR_MCACK (0x1u << 16) /**< \brief (TWIHS_IMR) Master Code Acknowledge Interrupt Mask */
#define TWIHS_IMR_TOUT (0x1u << 18) /**< \brief (TWIHS_IMR) Timeout Error Interrupt Mask */
#define TWIHS_IMR_PECERR (0x1u << 19) /**< \brief (TWIHS_IMR) PEC Error Interrupt Mask */
#define TWIHS_IMR_SMBDAM (0x1u << 20) /**< \brief (TWIHS_IMR) SMBus Default Address Match Interrupt Mask */
#define TWIHS_IMR_SMBHHM (0x1u << 21) /**< \brief (TWIHS_IMR) SMBus Host Header Address Match Interrupt Mask */
/* -------- TWIHS_RHR : (TWIHS Offset: 0x30) Receive Holding Register -------- */
#define TWIHS_RHR_RXDATA_Pos 0
#define TWIHS_RHR_RXDATA_Msk (0xffu << TWIHS_RHR_RXDATA_Pos) /**< \brief (TWIHS_RHR) Master or Slave Receive Holding Data */
/* -------- TWIHS_THR : (TWIHS Offset: 0x34) Transmit Holding Register -------- */
#define TWIHS_THR_TXDATA_Pos 0
#define TWIHS_THR_TXDATA_Msk (0xffu << TWIHS_THR_TXDATA_Pos) /**< \brief (TWIHS_THR) Master or Slave Transmit Holding Data */
#define TWIHS_THR_TXDATA(value) ((TWIHS_THR_TXDATA_Msk & ((value) << TWIHS_THR_TXDATA_Pos)))
/* -------- TWIHS_SMBTR : (TWIHS Offset: 0x38) SMBus Timing Register -------- */
#define TWIHS_SMBTR_PRESC_Pos 0
#define TWIHS_SMBTR_PRESC_Msk (0xfu << TWIHS_SMBTR_PRESC_Pos) /**< \brief (TWIHS_SMBTR) SMBus Clock Prescaler */
#define TWIHS_SMBTR_PRESC(value) ((TWIHS_SMBTR_PRESC_Msk & ((value) << TWIHS_SMBTR_PRESC_Pos)))
#define TWIHS_SMBTR_TLOWS_Pos 8
#define TWIHS_SMBTR_TLOWS_Msk (0xffu << TWIHS_SMBTR_TLOWS_Pos) /**< \brief (TWIHS_SMBTR) Slave Clock Stretch Maximum Cycles */
#define TWIHS_SMBTR_TLOWS(value) ((TWIHS_SMBTR_TLOWS_Msk & ((value) << TWIHS_SMBTR_TLOWS_Pos)))
#define TWIHS_SMBTR_TLOWM_Pos 16
#define TWIHS_SMBTR_TLOWM_Msk (0xffu << TWIHS_SMBTR_TLOWM_Pos) /**< \brief (TWIHS_SMBTR) Master Clock Stretch Maximum Cycles */
#define TWIHS_SMBTR_TLOWM(value) ((TWIHS_SMBTR_TLOWM_Msk & ((value) << TWIHS_SMBTR_TLOWM_Pos)))
#define TWIHS_SMBTR_THMAX_Pos 24
#define TWIHS_SMBTR_THMAX_Msk (0xffu << TWIHS_SMBTR_THMAX_Pos) /**< \brief (TWIHS_SMBTR) Clock High Maximum Cycles */
#define TWIHS_SMBTR_THMAX(value) ((TWIHS_SMBTR_THMAX_Msk & ((value) << TWIHS_SMBTR_THMAX_Pos)))
/* -------- TWIHS_ACR : (TWIHS Offset: 0x40) Alternative Command Register -------- */
#define TWIHS_ACR_DATAL_Pos 0
#define TWIHS_ACR_DATAL_Msk (0xffu << TWIHS_ACR_DATAL_Pos) /**< \brief (TWIHS_ACR) Data Length */
#define TWIHS_ACR_DATAL(value) ((TWIHS_ACR_DATAL_Msk & ((value) << TWIHS_ACR_DATAL_Pos)))
#define TWIHS_ACR_DIR (0x1u << 8) /**< \brief (TWIHS_ACR) Transfer Direction */
#define TWIHS_ACR_PEC (0x1u << 9) /**< \brief (TWIHS_ACR) PEC Request (SMBus Mode only) */
#define TWIHS_ACR_NDATAL_Pos 16
#define TWIHS_ACR_NDATAL_Msk (0xffu << TWIHS_ACR_NDATAL_Pos) /**< \brief (TWIHS_ACR) Next Data Length */
#define TWIHS_ACR_NDATAL(value) ((TWIHS_ACR_NDATAL_Msk & ((value) << TWIHS_ACR_NDATAL_Pos)))
#define TWIHS_ACR_NDIR (0x1u << 24) /**< \brief (TWIHS_ACR) Next Transfer Direction */
#define TWIHS_ACR_NPEC (0x1u << 25) /**< \brief (TWIHS_ACR) Next PEC Request (SMBus Mode only) */
/* -------- TWIHS_FILTR : (TWIHS Offset: 0x44) Filter Register -------- */
#define TWIHS_FILTR_FILT (0x1u << 0) /**< \brief (TWIHS_FILTR) RX Digital Filter */
#define TWIHS_FILTR_PADFEN (0x1u << 1) /**< \brief (TWIHS_FILTR) PAD Filter Enable */
#define TWIHS_FILTR_PADFCFG (0x1u << 2) /**< \brief (TWIHS_FILTR) PAD Filter Config */
#define TWIHS_FILTR_THRES_Pos 8
#define TWIHS_FILTR_THRES_Msk (0x7u << TWIHS_FILTR_THRES_Pos) /**< \brief (TWIHS_FILTR) Digital Filter Threshold */
#define TWIHS_FILTR_THRES(value) ((TWIHS_FILTR_THRES_Msk & ((value) << TWIHS_FILTR_THRES_Pos)))
/* -------- TWIHS_SWMR : (TWIHS Offset: 0x4C) SleepWalking Matching Register -------- */
#define TWIHS_SWMR_SADR1_Pos 0
#define TWIHS_SWMR_SADR1_Msk (0x7fu << TWIHS_SWMR_SADR1_Pos) /**< \brief (TWIHS_SWMR) Slave Address 1 */
#define TWIHS_SWMR_SADR1(value) ((TWIHS_SWMR_SADR1_Msk & ((value) << TWIHS_SWMR_SADR1_Pos)))
#define TWIHS_SWMR_SADR2_Pos 8
#define TWIHS_SWMR_SADR2_Msk (0x7fu << TWIHS_SWMR_SADR2_Pos) /**< \brief (TWIHS_SWMR) Slave Address 2 */
#define TWIHS_SWMR_SADR2(value) ((TWIHS_SWMR_SADR2_Msk & ((value) << TWIHS_SWMR_SADR2_Pos)))
#define TWIHS_SWMR_SADR3_Pos 16
#define TWIHS_SWMR_SADR3_Msk (0x7fu << TWIHS_SWMR_SADR3_Pos) /**< \brief (TWIHS_SWMR) Slave Address 3 */
#define TWIHS_SWMR_SADR3(value) ((TWIHS_SWMR_SADR3_Msk & ((value) << TWIHS_SWMR_SADR3_Pos)))
#define TWIHS_SWMR_DATAM_Pos 24
#define TWIHS_SWMR_DATAM_Msk (0xffu << TWIHS_SWMR_DATAM_Pos) /**< \brief (TWIHS_SWMR) Data Match */
#define TWIHS_SWMR_DATAM(value) ((TWIHS_SWMR_DATAM_Msk & ((value) << TWIHS_SWMR_DATAM_Pos)))
/* -------- TWIHS_DR : (TWIHS Offset: 0xD0) Debug Register -------- */
#define TWIHS_DR_SWEN (0x1u << 0) /**< \brief (TWIHS_DR) SleepWalking Enable */
#define TWIHS_DR_CLKRQ (0x1u << 1) /**< \brief (TWIHS_DR) Clock Request */
#define TWIHS_DR_SWMATCH (0x1u << 2) /**< \brief (TWIHS_DR) SleepWalking Match */
#define TWIHS_DR_TRP (0x1u << 3) /**< \brief (TWIHS_DR) Transfer Pending */
/* -------- TWIHS_WPMR : (TWIHS Offset: 0xE4) Write Protection Mode Register -------- */
#define TWIHS_WPMR_WPEN (0x1u << 0) /**< \brief (TWIHS_WPMR) Write Protection Enable */
#define TWIHS_WPMR_WPKEY_Pos 8
#define TWIHS_WPMR_WPKEY_Msk (0xffffffu << TWIHS_WPMR_WPKEY_Pos) /**< \brief (TWIHS_WPMR) Write Protection Key */
#define   TWIHS_WPMR_WPKEY_PASSWD (0x545749u << 8) /**< \brief (TWIHS_WPMR) Writing any other value in this field aborts the write operation of the WPEN bit.Always reads as 0 */
/* -------- TWIHS_WPSR : (TWIHS Offset: 0xE8) Write Protection Status Register -------- */
#define TWIHS_WPSR_WPVS (0x1u << 0) /**< \brief (TWIHS_WPSR) Write Protection Violation Status */
#define TWIHS_WPSR_WPVSRC_Pos 8
#define TWIHS_WPSR_WPVSRC_Msk (0xffffffu << TWIHS_WPSR_WPVSRC_Pos) /**< \brief (TWIHS_WPSR) Write Protection Violation Source */
/* -------- TWIHS_VER : (TWIHS Offset: 0xFC) Version Register -------- */
#define TWIHS_VER_VERSION_Pos 0
#define TWIHS_VER_VERSION_Msk (0xfffu << TWIHS_VER_VERSION_Pos) /**< \brief (TWIHS_VER) Version of the Hardware Module */
#define TWIHS_VER_MFN_Pos 16
#define TWIHS_VER_MFN_Msk (0x7u << TWIHS_VER_MFN_Pos) /**< \brief (TWIHS_VER) Metal Fix Number */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR Universal Asynchronous Receiver Transmitter */
/* ============================================================================= */
/** \addtogroup SAMA5D2_UART Universal Asynchronous Receiver Transmitter */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief Uart hardware registers */
typedef struct {
  __O  uint32_t UART_CR;        /**< \brief (Uart Offset: 0x0000) Control Register */
  __IO uint32_t UART_MR;        /**< \brief (Uart Offset: 0x0004) Mode Register */
  __O  uint32_t UART_IER;       /**< \brief (Uart Offset: 0x0008) Interrupt Enable Register */
  __O  uint32_t UART_IDR;       /**< \brief (Uart Offset: 0x000C) Interrupt Disable Register */
  __I  uint32_t UART_IMR;       /**< \brief (Uart Offset: 0x0010) Interrupt Mask Register */
  __I  uint32_t UART_SR;        /**< \brief (Uart Offset: 0x0014) Status Register */
  __I  uint32_t UART_RHR;       /**< \brief (Uart Offset: 0x0018) Receive Holding Register */
  __O  uint32_t UART_THR;       /**< \brief (Uart Offset: 0x001C) Transmit Holding Register */
  __IO uint32_t UART_BRGR;      /**< \brief (Uart Offset: 0x0020) Baud Rate Generator Register */
  __IO uint32_t UART_CMPR;      /**< \brief (Uart Offset: 0x0024) Comparison Register */
  __I  uint32_t Reserved1[47];
  __IO uint32_t UART_WPMR;      /**< \brief (Uart Offset: 0x00E4) Write Protection Mode Register */
  __I  uint32_t Reserved2[1];
  __IO uint32_t UART_ADDRSIZE;  /**< \brief (Uart Offset: 0x00EC) Address Size Register */
  __IO uint32_t UART_IPNAME[2]; /**< \brief (Uart Offset: 0x00F0) IP Name 1 Register */
  __IO uint32_t UART_FEATURE;   /**< \brief (Uart Offset: 0x00F8) Feature Register */
  __I  uint32_t UART_VERSION;   /**< \brief (Uart Offset: 0x00FC) Version Register */
} Uart;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- UART_CR : (UART Offset: 0x0000) Control Register -------- */
#define UART_CR_RSTRX (0x1u << 2) /**< \brief (UART_CR) Reset Receiver */
#define UART_CR_RSTTX (0x1u << 3) /**< \brief (UART_CR) Reset Transmitter */
#define UART_CR_RXEN (0x1u << 4) /**< \brief (UART_CR) Receiver Enable */
#define UART_CR_RXDIS (0x1u << 5) /**< \brief (UART_CR) Receiver Disable */
#define UART_CR_TXEN (0x1u << 6) /**< \brief (UART_CR) Transmitter Enable */
#define UART_CR_TXDIS (0x1u << 7) /**< \brief (UART_CR) Transmitter Disable */
#define UART_CR_RSTSTA (0x1u << 8) /**< \brief (UART_CR) Reset Status */
#define UART_CR_REQCLR (0x1u << 12) /**< \brief (UART_CR) Request Clear */
#define UART_CR_DBGE (0x1u << 15) /**< \brief (UART_CR) Debug Enable */
/* -------- UART_MR : (UART Offset: 0x0004) Mode Register -------- */
#define UART_MR_PAR_Pos 9
#define UART_MR_PAR_Msk (0x7u << UART_MR_PAR_Pos) /**< \brief (UART_MR) Parity Type */
#define   UART_MR_PAR_EVEN (0x0u << 9) /**< \brief (UART_MR) Even Parity */
#define   UART_MR_PAR_ODD (0x1u << 9) /**< \brief (UART_MR) Odd Parity */
#define   UART_MR_PAR_SPACE (0x2u << 9) /**< \brief (UART_MR) Space: parity forced to 0 */
#define   UART_MR_PAR_MARK (0x3u << 9) /**< \brief (UART_MR) Mark: parity forced to 1 */
#define   UART_MR_PAR_NO (0x4u << 9) /**< \brief (UART_MR) No parity */
#define UART_MR_BRSRCCK (0x1u << 12) /**< \brief (UART_MR) Baud Rate Source Clock */
#define   UART_MR_BRSRCCK_PERIPH_CLK (0x0u << 12) /**< \brief (UART_MR) The baud rate is driven by the peripheral clock */
#define   UART_MR_BRSRCCK_PMC_PCK (0x1u << 12) /**< \brief (UART_MR) The baud rate is driven by a PMC Programmable clock PCK (see PMC section). */
#define UART_MR_CHMODE_Pos 14
#define UART_MR_CHMODE_Msk (0x3u << UART_MR_CHMODE_Pos) /**< \brief (UART_MR) Channel Mode */
#define   UART_MR_CHMODE_NORMAL (0x0u << 14) /**< \brief (UART_MR) Normal mode */
#define   UART_MR_CHMODE_AUTOMATIC (0x1u << 14) /**< \brief (UART_MR) Automatic echo */
#define   UART_MR_CHMODE_LOCAL_LOOPBACK (0x2u << 14) /**< \brief (UART_MR) Local loopback */
#define   UART_MR_CHMODE_REMOTE_LOOPBACK (0x3u << 14) /**< \brief (UART_MR) Remote loopback */
/* -------- UART_IER : (UART Offset: 0x0008) Interrupt Enable Register -------- */
#define UART_IER_RXRDY (0x1u << 0) /**< \brief (UART_IER) Enable RXRDY Interrupt */
#define UART_IER_TXRDY (0x1u << 1) /**< \brief (UART_IER) Enable TXRDY Interrupt */
#define UART_IER_OVRE (0x1u << 5) /**< \brief (UART_IER) Enable Overrun Error Interrupt */
#define UART_IER_FRAME (0x1u << 6) /**< \brief (UART_IER) Enable Framing Error Interrupt */
#define UART_IER_PARE (0x1u << 7) /**< \brief (UART_IER) Enable Parity Error Interrupt */
#define UART_IER_TXEMPTY (0x1u << 9) /**< \brief (UART_IER) Enable TXEMPTY Interrupt */
#define UART_IER_CMP (0x1u << 15) /**< \brief (UART_IER) Enable Comparison Interrupt */
/* -------- UART_IDR : (UART Offset: 0x000C) Interrupt Disable Register -------- */
#define UART_IDR_RXRDY (0x1u << 0) /**< \brief (UART_IDR) Disable RXRDY Interrupt */
#define UART_IDR_TXRDY (0x1u << 1) /**< \brief (UART_IDR) Disable TXRDY Interrupt */
#define UART_IDR_OVRE (0x1u << 5) /**< \brief (UART_IDR) Disable Overrun Error Interrupt */
#define UART_IDR_FRAME (0x1u << 6) /**< \brief (UART_IDR) Disable Framing Error Interrupt */
#define UART_IDR_PARE (0x1u << 7) /**< \brief (UART_IDR) Disable Parity Error Interrupt */
#define UART_IDR_TXEMPTY (0x1u << 9) /**< \brief (UART_IDR) Disable TXEMPTY Interrupt */
#define UART_IDR_CMP (0x1u << 15) /**< \brief (UART_IDR) Disable Comparison Interrupt */
/* -------- UART_IMR : (UART Offset: 0x0010) Interrupt Mask Register -------- */
#define UART_IMR_RXRDY (0x1u << 0) /**< \brief (UART_IMR) Mask RXRDY Interrupt */
#define UART_IMR_TXRDY (0x1u << 1) /**< \brief (UART_IMR) Disable TXRDY Interrupt */
#define UART_IMR_OVRE (0x1u << 5) /**< \brief (UART_IMR) Mask Overrun Error Interrupt */
#define UART_IMR_FRAME (0x1u << 6) /**< \brief (UART_IMR) Mask Framing Error Interrupt */
#define UART_IMR_PARE (0x1u << 7) /**< \brief (UART_IMR) Mask Parity Error Interrupt */
#define UART_IMR_TXEMPTY (0x1u << 9) /**< \brief (UART_IMR) Mask TXEMPTY Interrupt */
#define UART_IMR_CMP (0x1u << 15) /**< \brief (UART_IMR) Mask Comparison Interrupt */
/* -------- UART_SR : (UART Offset: 0x0014) Status Register -------- */
#define UART_SR_RXRDY (0x1u << 0) /**< \brief (UART_SR) Receiver Ready */
#define UART_SR_TXRDY (0x1u << 1) /**< \brief (UART_SR) Transmitter Ready */
#define UART_SR_OVRE (0x1u << 5) /**< \brief (UART_SR) Overrun Error */
#define UART_SR_FRAME (0x1u << 6) /**< \brief (UART_SR) Framing Error */
#define UART_SR_PARE (0x1u << 7) /**< \brief (UART_SR) Parity Error */
#define UART_SR_TXEMPTY (0x1u << 9) /**< \brief (UART_SR) Transmitter Empty */
#define UART_SR_CMP (0x1u << 15) /**< \brief (UART_SR) Comparison Match */
#define UART_SR_SWES (0x1u << 21) /**< \brief (UART_SR) SleepWalking Enable Status */
#define UART_SR_CLKREQ (0x1u << 22) /**< \brief (UART_SR) Clock Request */
#define UART_SR_WKUPREQ (0x1u << 23) /**< \brief (UART_SR) Wake-Up Request */
/* -------- UART_RHR : (UART Offset: 0x0018) Receive Holding Register -------- */
#define UART_RHR_RXCHR_Pos 0
#define UART_RHR_RXCHR_Msk (0xffu << UART_RHR_RXCHR_Pos) /**< \brief (UART_RHR) Received Character */
/* -------- UART_THR : (UART Offset: 0x001C) Transmit Holding Register -------- */
#define UART_THR_TXCHR_Pos 0
#define UART_THR_TXCHR_Msk (0xffu << UART_THR_TXCHR_Pos) /**< \brief (UART_THR) Character to be Transmitted */
#define UART_THR_TXCHR(value) ((UART_THR_TXCHR_Msk & ((value) << UART_THR_TXCHR_Pos)))
/* -------- UART_BRGR : (UART Offset: 0x0020) Baud Rate Generator Register -------- */
#define UART_BRGR_CD_Pos 0
#define UART_BRGR_CD_Msk (0xffffu << UART_BRGR_CD_Pos) /**< \brief (UART_BRGR) Clock Divisor */
#define UART_BRGR_CD(value) ((UART_BRGR_CD_Msk & ((value) << UART_BRGR_CD_Pos)))
/* -------- UART_CMPR : (UART Offset: 0x0024) Comparison Register -------- */
#define UART_CMPR_VAL1_Pos 0
#define UART_CMPR_VAL1_Msk (0xffu << UART_CMPR_VAL1_Pos) /**< \brief (UART_CMPR) First Comparison Value for Received Character */
#define UART_CMPR_VAL1(value) ((UART_CMPR_VAL1_Msk & ((value) << UART_CMPR_VAL1_Pos)))
#define UART_CMPR_CMPMODE (0x1u << 12) /**< \brief (UART_CMPR) Comparison Mode */
#define   UART_CMPR_CMPMODE_FLAG_ONLY (0x0u << 12) /**< \brief (UART_CMPR) Any character is received and comparison function drives CMP flag. */
#define   UART_CMPR_CMPMODE_START_CONDITION (0x1u << 12) /**< \brief (UART_CMPR) Comparison condition must be met to start reception. */
#define UART_CMPR_CMPPAR (0x1u << 14) /**< \brief (UART_CMPR) Compare Parity */
#define UART_CMPR_VAL2_Pos 16
#define UART_CMPR_VAL2_Msk (0xffu << UART_CMPR_VAL2_Pos) /**< \brief (UART_CMPR) Second Comparison Value for Received Character */
#define UART_CMPR_VAL2(value) ((UART_CMPR_VAL2_Msk & ((value) << UART_CMPR_VAL2_Pos)))
/* -------- UART_WPMR : (UART Offset: 0x00E4) Write Protection Mode Register -------- */
#define UART_WPMR_WPEN (0x1u << 0) /**< \brief (UART_WPMR) Write Protection Enable */
#define UART_WPMR_WPKEY_Pos 8
#define UART_WPMR_WPKEY_Msk (0xffffffu << UART_WPMR_WPKEY_Pos) /**< \brief (UART_WPMR) Write Protection Key */
#define   UART_WPMR_WPKEY_PASSWD (0x554152u << 8) /**< \brief (UART_WPMR) Writing any other value in this field aborts the write operation.Always reads as 0. */
/* -------- UART_ADDRSIZE : (UART Offset: 0x00EC) Address Size Register -------- */
#define UART_ADDRSIZE_ADDRSIZE_Pos 0
#define UART_ADDRSIZE_ADDRSIZE_Msk (0xffffu << UART_ADDRSIZE_ADDRSIZE_Pos) /**< \brief (UART_ADDRSIZE) User Interface Address Size */
#define UART_ADDRSIZE_ADDRSIZE(value) ((UART_ADDRSIZE_ADDRSIZE_Msk & ((value) << UART_ADDRSIZE_ADDRSIZE_Pos)))
/* -------- UART_IPNAME[2] : (UART Offset: 0x00F0) IP Name 1 Register -------- */
#define UART_IPNAME_IPNAME_Pos 0
#define UART_IPNAME_IPNAME_Msk (0xffffffffu << UART_IPNAME_IPNAME_Pos) /**< \brief (UART_IPNAME[2]) ASCII Value of Hardware Module Name */
#define UART_IPNAME_IPNAME(value) ((UART_IPNAME_IPNAME_Msk & ((value) << UART_IPNAME_IPNAME_Pos)))
/* -------- UART_VERSION : (UART Offset: 0x00FC) Version Register -------- */
#define UART_VERSION_VERSION_Pos 0
#define UART_VERSION_VERSION_Msk (0xfffu << UART_VERSION_VERSION_Pos) /**< \brief (UART_VERSION) Hardware Module Version */
#define UART_VERSION_MFN_Pos 16
#define UART_VERSION_MFN_Msk (0x7u << UART_VERSION_MFN_Pos) /**< \brief (UART_VERSION) Metal Fix Number */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR USB High Speed Device Port */
/* ============================================================================= */
/** \addtogroup SAMA5D2_UDPHS USB High Speed Device Port */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief UdphsDma hardware registers */
typedef struct {
  __IO uint32_t UDPHS_DMANXTDSC;  /**< \brief (UdphsDma Offset: 0x0) UDPHS DMA Next Descriptor Address Register */
  __IO uint32_t UDPHS_DMAADDRESS; /**< \brief (UdphsDma Offset: 0x4) UDPHS DMA Channel Address Register */
  __IO uint32_t UDPHS_DMACONTROL; /**< \brief (UdphsDma Offset: 0x8) UDPHS DMA Channel Control Register */
  __IO uint32_t UDPHS_DMASTATUS;  /**< \brief (UdphsDma Offset: 0xC) UDPHS DMA Channel Status Register */
} UdphsDma;
/** \brief UdphsEpt hardware registers */
typedef struct {
  __IO uint32_t UDPHS_EPTCFG;    /**< \brief (UdphsEpt Offset: 0x0) UDPHS Endpoint Configuration Register */
  __O  uint32_t UDPHS_EPTCTLENB; /**< \brief (UdphsEpt Offset: 0x4) UDPHS Endpoint Control Enable Register */
  __O  uint32_t UDPHS_EPTCTLDIS; /**< \brief (UdphsEpt Offset: 0x8) UDPHS Endpoint Control Disable Register */
  __I  uint32_t UDPHS_EPTCTL;    /**< \brief (UdphsEpt Offset: 0xC) UDPHS Endpoint Control Register */
  __I  uint32_t Reserved1[1];
  __O  uint32_t UDPHS_EPTSETSTA; /**< \brief (UdphsEpt Offset: 0x14) UDPHS Endpoint Set Status Register */
  __O  uint32_t UDPHS_EPTCLRSTA; /**< \brief (UdphsEpt Offset: 0x18) UDPHS Endpoint Clear Status Register */
  __I  uint32_t UDPHS_EPTSTA;    /**< \brief (UdphsEpt Offset: 0x1C) UDPHS Endpoint Status Register */
} UdphsEpt;
/** \brief Udphs hardware registers */
#define UDPHSEPT_NUMBER 16
#define UDPHSDMA_NUMBER 7
typedef struct {
  __IO uint32_t UDPHS_CTRL;                 /**< \brief (Udphs Offset: 0x00) UDPHS Control Register */
  __I  uint32_t UDPHS_FNUM;                 /**< \brief (Udphs Offset: 0x04) UDPHS Frame Number Register */
  __I  uint32_t Reserved1[2];
  __IO uint32_t UDPHS_IEN;                  /**< \brief (Udphs Offset: 0x10) UDPHS Interrupt Enable Register */
  __I  uint32_t UDPHS_INTSTA;               /**< \brief (Udphs Offset: 0x14) UDPHS Interrupt Status Register */
  __O  uint32_t UDPHS_CLRINT;               /**< \brief (Udphs Offset: 0x18) UDPHS Clear Interrupt Register */
  __O  uint32_t UDPHS_EPTRST;               /**< \brief (Udphs Offset: 0x1C) UDPHS Endpoints Reset Register */
  __I  uint32_t Reserved2[44];
  __IO uint32_t UDPHS_TSTSOFCNT;            /**< \brief (Udphs Offset: 0xD0) UDPHS Test SOF Counter Register */
  __IO uint32_t UDPHS_TSTCNTA;              /**< \brief (Udphs Offset: 0xD4) UDPHS Test A Counter Register */
  __IO uint32_t UDPHS_TSTCNTB;              /**< \brief (Udphs Offset: 0xD8) UDPHS Test B Counter Register */
  __IO uint32_t UDPHS_TSTMODEREG;           /**< \brief (Udphs Offset: 0xDC) UDPHS Test Mode Register */
  __IO uint32_t UDPHS_TST;                  /**< \brief (Udphs Offset: 0xE0) UDPHS Test Register */
  __I  uint32_t Reserved3[2];
  __I  uint32_t UDPHS_ADDRSIZE;             /**< \brief (Udphs Offset: 0xEC) UDPHS IP Address Size Register */
  __I  uint32_t UDPHS_IPNAME[2];            /**< \brief (Udphs Offset: 0xF0) UDPHS IP Name1 Register */
  __I  uint32_t UDPHS_FEATURES;             /**< \brief (Udphs Offset: 0xF8) UDPHS Features Register */
  __I  uint32_t UDPHS_VERSION;              /**< \brief (Udphs Offset: 0xFC) UDPHS Version Register */
       UdphsEpt UDPHS_EPT[UDPHSEPT_NUMBER]; /**< \brief (Udphs Offset: 0x100) endpoint = 0 .. 15 */
       UdphsDma UDPHS_DMA[UDPHSDMA_NUMBER]; /**< \brief (Udphs Offset: 0x300) channel = 0 .. 6 */
} Udphs;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- UDPHS_CTRL : (UDPHS Offset: 0x00) UDPHS Control Register -------- */
#define UDPHS_CTRL_DEV_ADDR_Pos 0
#define UDPHS_CTRL_DEV_ADDR_Msk (0x7fu << UDPHS_CTRL_DEV_ADDR_Pos) /**< \brief (UDPHS_CTRL) UDPHS Address */
#define UDPHS_CTRL_DEV_ADDR(value) ((UDPHS_CTRL_DEV_ADDR_Msk & ((value) << UDPHS_CTRL_DEV_ADDR_Pos)))
#define UDPHS_CTRL_FADDR_EN (0x1u << 7) /**< \brief (UDPHS_CTRL) Function Address Enable */
#define UDPHS_CTRL_EN_UDPHS (0x1u << 8) /**< \brief (UDPHS_CTRL) UDPHS Enable */
#define UDPHS_CTRL_DETACH (0x1u << 9) /**< \brief (UDPHS_CTRL) Detach Command */
#define UDPHS_CTRL_REWAKEUP (0x1u << 10) /**< \brief (UDPHS_CTRL) Send Remote Wake Up */
#define UDPHS_CTRL_PULLD_DIS (0x1u << 11) /**< \brief (UDPHS_CTRL) Pull-Down Disable */
/* -------- UDPHS_FNUM : (UDPHS Offset: 0x04) UDPHS Frame Number Register -------- */
#define UDPHS_FNUM_MICRO_FRAME_NUM_Pos 0
#define UDPHS_FNUM_MICRO_FRAME_NUM_Msk (0x7u << UDPHS_FNUM_MICRO_FRAME_NUM_Pos) /**< \brief (UDPHS_FNUM) Microframe Number */
#define UDPHS_FNUM_FRAME_NUMBER_Pos 3
#define UDPHS_FNUM_FRAME_NUMBER_Msk (0x7ffu << UDPHS_FNUM_FRAME_NUMBER_Pos) /**< \brief (UDPHS_FNUM) Frame Number as defined in the Packet Field Formats */
#define UDPHS_FNUM_FNUM_ERR (0x1u << 31) /**< \brief (UDPHS_FNUM) Frame Number CRC Error */
/* -------- UDPHS_IEN : (UDPHS Offset: 0x10) UDPHS Interrupt Enable Register -------- */
#define UDPHS_IEN_DET_SUSPD (0x1u << 1) /**< \brief (UDPHS_IEN) Suspend Interrupt Enable */
#define UDPHS_IEN_MICRO_SOF (0x1u << 2) /**< \brief (UDPHS_IEN) Micro-SOF Interrupt Enable */
#define UDPHS_IEN_INT_SOF (0x1u << 3) /**< \brief (UDPHS_IEN) SOF Interrupt Enable */
#define UDPHS_IEN_ENDRESET (0x1u << 4) /**< \brief (UDPHS_IEN) End Of Reset Interrupt Enable */
#define UDPHS_IEN_WAKE_UP (0x1u << 5) /**< \brief (UDPHS_IEN) Wake Up CPU Interrupt Enable */
#define UDPHS_IEN_ENDOFRSM (0x1u << 6) /**< \brief (UDPHS_IEN) End Of Resume Interrupt Enable */
#define UDPHS_IEN_UPSTR_RES (0x1u << 7) /**< \brief (UDPHS_IEN) Upstream Resume Interrupt Enable */
#define UDPHS_IEN_EPT_0 (0x1u << 8) /**< \brief (UDPHS_IEN) Endpoint 0 Interrupt Enable */
#define UDPHS_IEN_EPT_1 (0x1u << 9) /**< \brief (UDPHS_IEN) Endpoint 1 Interrupt Enable */
#define UDPHS_IEN_EPT_2 (0x1u << 10) /**< \brief (UDPHS_IEN) Endpoint 2 Interrupt Enable */
#define UDPHS_IEN_EPT_3 (0x1u << 11) /**< \brief (UDPHS_IEN) Endpoint 3 Interrupt Enable */
#define UDPHS_IEN_EPT_4 (0x1u << 12) /**< \brief (UDPHS_IEN) Endpoint 4 Interrupt Enable */
#define UDPHS_IEN_EPT_5 (0x1u << 13) /**< \brief (UDPHS_IEN) Endpoint 5 Interrupt Enable */
#define UDPHS_IEN_EPT_6 (0x1u << 14) /**< \brief (UDPHS_IEN) Endpoint 6 Interrupt Enable */
#define UDPHS_IEN_EPT_7 (0x1u << 15) /**< \brief (UDPHS_IEN) Endpoint 7 Interrupt Enable */
#define UDPHS_IEN_EPT_8 (0x1u << 16) /**< \brief (UDPHS_IEN) Endpoint 8 Interrupt Enable */
#define UDPHS_IEN_EPT_9 (0x1u << 17) /**< \brief (UDPHS_IEN) Endpoint 9 Interrupt Enable */
#define UDPHS_IEN_EPT_10 (0x1u << 18) /**< \brief (UDPHS_IEN) Endpoint 10 Interrupt Enable */
#define UDPHS_IEN_EPT_11 (0x1u << 19) /**< \brief (UDPHS_IEN) Endpoint 11 Interrupt Enable */
#define UDPHS_IEN_EPT_12 (0x1u << 20) /**< \brief (UDPHS_IEN) Endpoint 12 Interrupt Enable */
#define UDPHS_IEN_EPT_13 (0x1u << 21) /**< \brief (UDPHS_IEN) Endpoint 13 Interrupt Enable */
#define UDPHS_IEN_EPT_14 (0x1u << 22) /**< \brief (UDPHS_IEN) Endpoint 14 Interrupt Enable */
#define UDPHS_IEN_EPT_15 (0x1u << 23) /**< \brief (UDPHS_IEN) Endpoint 15 Interrupt Enable */
#define UDPHS_IEN_DMA_1 (0x1u << 25) /**< \brief (UDPHS_IEN) DMA Channel 1 Interrupt Enable */
#define UDPHS_IEN_DMA_2 (0x1u << 26) /**< \brief (UDPHS_IEN) DMA Channel 2 Interrupt Enable */
#define UDPHS_IEN_DMA_3 (0x1u << 27) /**< \brief (UDPHS_IEN) DMA Channel 3 Interrupt Enable */
#define UDPHS_IEN_DMA_4 (0x1u << 28) /**< \brief (UDPHS_IEN) DMA Channel 4 Interrupt Enable */
#define UDPHS_IEN_DMA_5 (0x1u << 29) /**< \brief (UDPHS_IEN) DMA Channel 5 Interrupt Enable */
#define UDPHS_IEN_DMA_6 (0x1u << 30) /**< \brief (UDPHS_IEN) DMA Channel 6 Interrupt Enable */
#define UDPHS_IEN_DMA_7 (0x1u << 31) /**< \brief (UDPHS_IEN) DMA Channel 7 Interrupt Enable */
/* -------- UDPHS_INTSTA : (UDPHS Offset: 0x14) UDPHS Interrupt Status Register -------- */
#define UDPHS_INTSTA_SPEED (0x1u << 0) /**< \brief (UDPHS_INTSTA) Speed Status */
#define UDPHS_INTSTA_DET_SUSPD (0x1u << 1) /**< \brief (UDPHS_INTSTA) Suspend Interrupt */
#define UDPHS_INTSTA_MICRO_SOF (0x1u << 2) /**< \brief (UDPHS_INTSTA) Micro Start Of Frame Interrupt */
#define UDPHS_INTSTA_INT_SOF (0x1u << 3) /**< \brief (UDPHS_INTSTA) Start Of Frame Interrupt */
#define UDPHS_INTSTA_ENDRESET (0x1u << 4) /**< \brief (UDPHS_INTSTA) End Of Reset Interrupt */
#define UDPHS_INTSTA_WAKE_UP (0x1u << 5) /**< \brief (UDPHS_INTSTA) Wake Up CPU Interrupt */
#define UDPHS_INTSTA_ENDOFRSM (0x1u << 6) /**< \brief (UDPHS_INTSTA) End Of Resume Interrupt */
#define UDPHS_INTSTA_UPSTR_RES (0x1u << 7) /**< \brief (UDPHS_INTSTA) Upstream Resume Interrupt */
#define UDPHS_INTSTA_EPT_0 (0x1u << 8) /**< \brief (UDPHS_INTSTA) Endpoint 0 Interrupt */
#define UDPHS_INTSTA_EPT_1 (0x1u << 9) /**< \brief (UDPHS_INTSTA) Endpoint 1 Interrupt */
#define UDPHS_INTSTA_EPT_2 (0x1u << 10) /**< \brief (UDPHS_INTSTA) Endpoint 2 Interrupt */
#define UDPHS_INTSTA_EPT_3 (0x1u << 11) /**< \brief (UDPHS_INTSTA) Endpoint 3 Interrupt */
#define UDPHS_INTSTA_EPT_4 (0x1u << 12) /**< \brief (UDPHS_INTSTA) Endpoint 4 Interrupt */
#define UDPHS_INTSTA_EPT_5 (0x1u << 13) /**< \brief (UDPHS_INTSTA) Endpoint 5 Interrupt */
#define UDPHS_INTSTA_EPT_6 (0x1u << 14) /**< \brief (UDPHS_INTSTA) Endpoint 6 Interrupt */
#define UDPHS_INTSTA_EPT_7 (0x1u << 15) /**< \brief (UDPHS_INTSTA) Endpoint 7 Interrupt */
#define UDPHS_INTSTA_EPT_8 (0x1u << 16) /**< \brief (UDPHS_INTSTA) Endpoint 8 Interrupt */
#define UDPHS_INTSTA_EPT_9 (0x1u << 17) /**< \brief (UDPHS_INTSTA) Endpoint 9 Interrupt */
#define UDPHS_INTSTA_EPT_10 (0x1u << 18) /**< \brief (UDPHS_INTSTA) Endpoint 10 Interrupt */
#define UDPHS_INTSTA_EPT_11 (0x1u << 19) /**< \brief (UDPHS_INTSTA) Endpoint 11 Interrupt */
#define UDPHS_INTSTA_EPT_12 (0x1u << 20) /**< \brief (UDPHS_INTSTA) Endpoint 12 Interrupt */
#define UDPHS_INTSTA_EPT_13 (0x1u << 21) /**< \brief (UDPHS_INTSTA) Endpoint 13 Interrupt */
#define UDPHS_INTSTA_EPT_14 (0x1u << 22) /**< \brief (UDPHS_INTSTA) Endpoint 14 Interrupt */
#define UDPHS_INTSTA_EPT_15 (0x1u << 23) /**< \brief (UDPHS_INTSTA) Endpoint 15 Interrupt */
#define UDPHS_INTSTA_DMA_1 (0x1u << 25) /**< \brief (UDPHS_INTSTA) DMA Channel 1 Interrupt */
#define UDPHS_INTSTA_DMA_2 (0x1u << 26) /**< \brief (UDPHS_INTSTA) DMA Channel 2 Interrupt */
#define UDPHS_INTSTA_DMA_3 (0x1u << 27) /**< \brief (UDPHS_INTSTA) DMA Channel 3 Interrupt */
#define UDPHS_INTSTA_DMA_4 (0x1u << 28) /**< \brief (UDPHS_INTSTA) DMA Channel 4 Interrupt */
#define UDPHS_INTSTA_DMA_5 (0x1u << 29) /**< \brief (UDPHS_INTSTA) DMA Channel 5 Interrupt */
#define UDPHS_INTSTA_DMA_6 (0x1u << 30) /**< \brief (UDPHS_INTSTA) DMA Channel 6 Interrupt */
#define UDPHS_INTSTA_DMA_7 (0x1u << 31) /**< \brief (UDPHS_INTSTA) DMA Channel 7 Interrupt */
/* -------- UDPHS_CLRINT : (UDPHS Offset: 0x18) UDPHS Clear Interrupt Register -------- */
#define UDPHS_CLRINT_DET_SUSPD (0x1u << 1) /**< \brief (UDPHS_CLRINT) Suspend Interrupt Clear */
#define UDPHS_CLRINT_MICRO_SOF (0x1u << 2) /**< \brief (UDPHS_CLRINT) Micro Start Of Frame Interrupt Clear */
#define UDPHS_CLRINT_INT_SOF (0x1u << 3) /**< \brief (UDPHS_CLRINT) Start Of Frame Interrupt Clear */
#define UDPHS_CLRINT_ENDRESET (0x1u << 4) /**< \brief (UDPHS_CLRINT) End Of Reset Interrupt Clear */
#define UDPHS_CLRINT_WAKE_UP (0x1u << 5) /**< \brief (UDPHS_CLRINT) Wake Up CPU Interrupt Clear */
#define UDPHS_CLRINT_ENDOFRSM (0x1u << 6) /**< \brief (UDPHS_CLRINT) End Of Resume Interrupt Clear */
#define UDPHS_CLRINT_UPSTR_RES (0x1u << 7) /**< \brief (UDPHS_CLRINT) Upstream Resume Interrupt Clear */
/* -------- UDPHS_EPTRST : (UDPHS Offset: 0x1C) UDPHS Endpoints Reset Register -------- */
#define UDPHS_EPTRST_EPT_0 (0x1u << 0) /**< \brief (UDPHS_EPTRST) Endpoint 0 Reset */
#define UDPHS_EPTRST_EPT_1 (0x1u << 1) /**< \brief (UDPHS_EPTRST) Endpoint 1 Reset */
#define UDPHS_EPTRST_EPT_2 (0x1u << 2) /**< \brief (UDPHS_EPTRST) Endpoint 2 Reset */
#define UDPHS_EPTRST_EPT_3 (0x1u << 3) /**< \brief (UDPHS_EPTRST) Endpoint 3 Reset */
#define UDPHS_EPTRST_EPT_4 (0x1u << 4) /**< \brief (UDPHS_EPTRST) Endpoint 4 Reset */
#define UDPHS_EPTRST_EPT_5 (0x1u << 5) /**< \brief (UDPHS_EPTRST) Endpoint 5 Reset */
#define UDPHS_EPTRST_EPT_6 (0x1u << 6) /**< \brief (UDPHS_EPTRST) Endpoint 6 Reset */
#define UDPHS_EPTRST_EPT_7 (0x1u << 7) /**< \brief (UDPHS_EPTRST) Endpoint 7 Reset */
#define UDPHS_EPTRST_EPT_8 (0x1u << 8) /**< \brief (UDPHS_EPTRST) Endpoint 8 Reset */
#define UDPHS_EPTRST_EPT_9 (0x1u << 9) /**< \brief (UDPHS_EPTRST) Endpoint 9 Reset */
#define UDPHS_EPTRST_EPT_10 (0x1u << 10) /**< \brief (UDPHS_EPTRST) Endpoint 10 Reset */
#define UDPHS_EPTRST_EPT_11 (0x1u << 11) /**< \brief (UDPHS_EPTRST) Endpoint 11 Reset */
#define UDPHS_EPTRST_EPT_12 (0x1u << 12) /**< \brief (UDPHS_EPTRST) Endpoint 12 Reset */
#define UDPHS_EPTRST_EPT_13 (0x1u << 13) /**< \brief (UDPHS_EPTRST) Endpoint 13 Reset */
#define UDPHS_EPTRST_EPT_14 (0x1u << 14) /**< \brief (UDPHS_EPTRST) Endpoint 14 Reset */
#define UDPHS_EPTRST_EPT_15 (0x1u << 15) /**< \brief (UDPHS_EPTRST) Endpoint 15 Reset */
/* -------- UDPHS_TSTSOFCNT : (UDPHS Offset: 0xD0) UDPHS Test SOF Counter Register -------- */
#define UDPHS_TSTSOFCNT_SOFCNTMAX_Pos 0
#define UDPHS_TSTSOFCNT_SOFCNTMAX_Msk (0x7fu << UDPHS_TSTSOFCNT_SOFCNTMAX_Pos) /**< \brief (UDPHS_TSTSOFCNT) SOF Counter Max Value */
#define UDPHS_TSTSOFCNT_SOFCNTMAX(value) ((UDPHS_TSTSOFCNT_SOFCNTMAX_Msk & ((value) << UDPHS_TSTSOFCNT_SOFCNTMAX_Pos)))
#define UDPHS_TSTSOFCNT_SOFCTLOAD (0x1u << 7) /**< \brief (UDPHS_TSTSOFCNT) SOF Counter Load */
/* -------- UDPHS_TSTCNTA : (UDPHS Offset: 0xD4) UDPHS Test A Counter Register -------- */
#define UDPHS_TSTCNTA_CNTAMAX_Pos 0
#define UDPHS_TSTCNTA_CNTAMAX_Msk (0x7fffu << UDPHS_TSTCNTA_CNTAMAX_Pos) /**< \brief (UDPHS_TSTCNTA) A Counter Max Value */
#define UDPHS_TSTCNTA_CNTAMAX(value) ((UDPHS_TSTCNTA_CNTAMAX_Msk & ((value) << UDPHS_TSTCNTA_CNTAMAX_Pos)))
#define UDPHS_TSTCNTA_CNTALOAD (0x1u << 15) /**< \brief (UDPHS_TSTCNTA) A Counter Load */
/* -------- UDPHS_TSTCNTB : (UDPHS Offset: 0xD8) UDPHS Test B Counter Register -------- */
#define UDPHS_TSTCNTB_CNTBMAX_Pos 0
#define UDPHS_TSTCNTB_CNTBMAX_Msk (0x7fffu << UDPHS_TSTCNTB_CNTBMAX_Pos) /**< \brief (UDPHS_TSTCNTB) B Counter Max Value */
#define UDPHS_TSTCNTB_CNTBMAX(value) ((UDPHS_TSTCNTB_CNTBMAX_Msk & ((value) << UDPHS_TSTCNTB_CNTBMAX_Pos)))
#define UDPHS_TSTCNTB_CNTBLOAD (0x1u << 15) /**< \brief (UDPHS_TSTCNTB) B Counter Load */
/* -------- UDPHS_TSTMODEREG : (UDPHS Offset: 0xDC) UDPHS Test Mode Register -------- */
#define UDPHS_TSTMODEREG_TSTMODE_Pos 1
#define UDPHS_TSTMODEREG_TSTMODE_Msk (0x1fu << UDPHS_TSTMODEREG_TSTMODE_Pos) /**< \brief (UDPHS_TSTMODEREG) UDPHS Core TestModeReg */
#define UDPHS_TSTMODEREG_TSTMODE(value) ((UDPHS_TSTMODEREG_TSTMODE_Msk & ((value) << UDPHS_TSTMODEREG_TSTMODE_Pos)))
/* -------- UDPHS_TST : (UDPHS Offset: 0xE0) UDPHS Test Register -------- */
#define UDPHS_TST_SPEED_CFG_Pos 0
#define UDPHS_TST_SPEED_CFG_Msk (0x3u << UDPHS_TST_SPEED_CFG_Pos) /**< \brief (UDPHS_TST) Speed Configuration */
#define   UDPHS_TST_SPEED_CFG_NORMAL (0x0u << 0) /**< \brief (UDPHS_TST) Normal Mode: The macro is in Full Speed mode, ready to make a High Speed identification, if the host supports it and then to automatically switch to High Speed mode */
#define   UDPHS_TST_SPEED_CFG_HIGH_SPEED (0x2u << 0) /**< \brief (UDPHS_TST) Force High Speed: Set this value to force the hardware to work in High Speed mode. Only for debug or test purpose. */
#define   UDPHS_TST_SPEED_CFG_FULL_SPEED (0x3u << 0) /**< \brief (UDPHS_TST) Force Full Speed: Set this value to force the hardware to work only in Full Speed mode. In this configuration, the macro will not respond to a High Speed reset handshake. */
#define UDPHS_TST_TST_J (0x1u << 2) /**< \brief (UDPHS_TST) Test J Mode */
#define UDPHS_TST_TST_K (0x1u << 3) /**< \brief (UDPHS_TST) Test K Mode */
#define UDPHS_TST_TST_PKT (0x1u << 4) /**< \brief (UDPHS_TST) Test Packet Mode */
#define UDPHS_TST_OPMODE2 (0x1u << 5) /**< \brief (UDPHS_TST) OpMode2 */
/* -------- UDPHS_ADDRSIZE : (UDPHS Offset: 0xEC) UDPHS IP Address Size Register -------- */
#define UDPHS_ADDRSIZE_ADDRSIZE_Pos 0
#define UDPHS_ADDRSIZE_ADDRSIZE_Msk (0xffffffffu << UDPHS_ADDRSIZE_ADDRSIZE_Pos) /**< \brief (UDPHS_ADDRSIZE) Peripheral Bus Address Size */
/* -------- UDPHS_IPNAME[2] : (UDPHS Offset: 0xF0) UDPHS IP Name1 Register -------- */
#define UDPHS_IPNAME_IPNAME_Pos 0
#define UDPHS_IPNAME_IPNAME_Msk (0xffffffffu << UDPHS_IPNAME_IPNAME_Pos) /**< \brief (UDPHS_IPNAME[2]) IP Name in ASCII Format */
/* -------- UDPHS_VERSION : (UDPHS Offset: 0xFC) UDPHS Version Register -------- */
#define UDPHS_VERSION_VERSION_Pos 0
#define UDPHS_VERSION_VERSION_Msk (0xffffu << UDPHS_VERSION_VERSION_Pos) /**< \brief (UDPHS_VERSION) Version of the Hardware Module */
#define UDPHS_VERSION_MFN_Pos 16
#define UDPHS_VERSION_MFN_Msk (0x7u << UDPHS_VERSION_MFN_Pos) /**< \brief (UDPHS_VERSION) Metal Fix Number */
/* -------- UDPHS_EPTCFG : (UDPHS Offset: N/A) UDPHS Endpoint Configuration Register -------- */
#define UDPHS_EPTCFG_EPT_SIZE_Pos 0
#define UDPHS_EPTCFG_EPT_SIZE_Msk (0x7u << UDPHS_EPTCFG_EPT_SIZE_Pos) /**< \brief (UDPHS_EPTCFG) Endpoint Size */
#define   UDPHS_EPTCFG_EPT_SIZE_8 (0x0u << 0) /**< \brief (UDPHS_EPTCFG) 8 bytes */
#define   UDPHS_EPTCFG_EPT_SIZE_16 (0x1u << 0) /**< \brief (UDPHS_EPTCFG) 16 bytes */
#define   UDPHS_EPTCFG_EPT_SIZE_32 (0x2u << 0) /**< \brief (UDPHS_EPTCFG) 32 bytes */
#define   UDPHS_EPTCFG_EPT_SIZE_64 (0x3u << 0) /**< \brief (UDPHS_EPTCFG) 64 bytes */
#define   UDPHS_EPTCFG_EPT_SIZE_128 (0x4u << 0) /**< \brief (UDPHS_EPTCFG) 128 bytes */
#define   UDPHS_EPTCFG_EPT_SIZE_256 (0x5u << 0) /**< \brief (UDPHS_EPTCFG) 256 bytes */
#define   UDPHS_EPTCFG_EPT_SIZE_512 (0x6u << 0) /**< \brief (UDPHS_EPTCFG) 512 bytes */
#define   UDPHS_EPTCFG_EPT_SIZE_1024 (0x7u << 0) /**< \brief (UDPHS_EPTCFG) 1024 bytes */
#define UDPHS_EPTCFG_EPT_DIR (0x1u << 3) /**< \brief (UDPHS_EPTCFG) Endpoint Direction */
#define UDPHS_EPTCFG_EPT_TYPE_Pos 4
#define UDPHS_EPTCFG_EPT_TYPE_Msk (0x3u << UDPHS_EPTCFG_EPT_TYPE_Pos) /**< \brief (UDPHS_EPTCFG) Endpoint Type */
#define   UDPHS_EPTCFG_EPT_TYPE_CTRL8 (0x0u << 4) /**< \brief (UDPHS_EPTCFG) Control endpoint */
#define   UDPHS_EPTCFG_EPT_TYPE_ISO (0x1u << 4) /**< \brief (UDPHS_EPTCFG) Isochronous endpoint */
#define   UDPHS_EPTCFG_EPT_TYPE_BULK (0x2u << 4) /**< \brief (UDPHS_EPTCFG) Bulk endpoint */
#define   UDPHS_EPTCFG_EPT_TYPE_INT (0x3u << 4) /**< \brief (UDPHS_EPTCFG) Interrupt endpoint */
#define UDPHS_EPTCFG_BK_NUMBER_Pos 6
#define UDPHS_EPTCFG_BK_NUMBER_Msk (0x3u << UDPHS_EPTCFG_BK_NUMBER_Pos) /**< \brief (UDPHS_EPTCFG) Number of Banks */
#define   UDPHS_EPTCFG_BK_NUMBER_0 (0x0u << 6) /**< \brief (UDPHS_EPTCFG) Zero bank, the endpoint is not mapped in memory */
#define   UDPHS_EPTCFG_BK_NUMBER_1 (0x1u << 6) /**< \brief (UDPHS_EPTCFG) One bank (bank 0) */
#define   UDPHS_EPTCFG_BK_NUMBER_2 (0x2u << 6) /**< \brief (UDPHS_EPTCFG) Double bank (Ping-Pong: bank0/bank1) */
#define   UDPHS_EPTCFG_BK_NUMBER_3 (0x3u << 6) /**< \brief (UDPHS_EPTCFG) Triple bank (bank0/bank1/bank2) */
#define UDPHS_EPTCFG_NB_TRANS_Pos 8
#define UDPHS_EPTCFG_NB_TRANS_Msk (0x3u << UDPHS_EPTCFG_NB_TRANS_Pos) /**< \brief (UDPHS_EPTCFG) Number Of Transaction per Microframe */
#define UDPHS_EPTCFG_NB_TRANS(value) ((UDPHS_EPTCFG_NB_TRANS_Msk & ((value) << UDPHS_EPTCFG_NB_TRANS_Pos)))
#define UDPHS_EPTCFG_EPT_MAPD (0x1u << 31) /**< \brief (UDPHS_EPTCFG) Endpoint Mapped */
/* -------- UDPHS_EPTCTLENB : (UDPHS Offset: N/A) UDPHS Endpoint Control Enable Register -------- */
#define UDPHS_EPTCTLENB_EPT_ENABL (0x1u << 0) /**< \brief (UDPHS_EPTCTLENB) Endpoint Enable */
#define UDPHS_EPTCTLENB_AUTO_VALID (0x1u << 1) /**< \brief (UDPHS_EPTCTLENB) Packet Auto-Valid Enable */
#define UDPHS_EPTCTLENB_INTDIS_DMA (0x1u << 3) /**< \brief (UDPHS_EPTCTLENB) Interrupts Disable DMA */
#define UDPHS_EPTCTLENB_NYET_DIS (0x1u << 4) /**< \brief (UDPHS_EPTCTLENB) NYET Disable (Only for High Speed Bulk OUT endpoints) */
#define UDPHS_EPTCTLENB_ERR_OVFLW (0x1u << 8) /**< \brief (UDPHS_EPTCTLENB) Overflow Error Interrupt Enable */
#define UDPHS_EPTCTLENB_RXRDY_TXKL (0x1u << 9) /**< \brief (UDPHS_EPTCTLENB) Received OUT Data Interrupt Enable */
#define UDPHS_EPTCTLENB_TX_COMPLT (0x1u << 10) /**< \brief (UDPHS_EPTCTLENB) Transmitted IN Data Complete Interrupt Enable */
#define UDPHS_EPTCTLENB_TXRDY (0x1u << 11) /**< \brief (UDPHS_EPTCTLENB) TX Packet Ready Interrupt Enable */
#define UDPHS_EPTCTLENB_RX_SETUP (0x1u << 12) /**< \brief (UDPHS_EPTCTLENB) Received SETUP */
#define UDPHS_EPTCTLENB_STALL_SNT (0x1u << 13) /**< \brief (UDPHS_EPTCTLENB) Stall Sent Interrupt Enable */
#define UDPHS_EPTCTLENB_NAK_IN (0x1u << 14) /**< \brief (UDPHS_EPTCTLENB) NAKIN Interrupt Enable */
#define UDPHS_EPTCTLENB_NAK_OUT (0x1u << 15) /**< \brief (UDPHS_EPTCTLENB) NAKOUT Interrupt Enable */
#define UDPHS_EPTCTLENB_BUSY_BANK (0x1u << 18) /**< \brief (UDPHS_EPTCTLENB) Busy Bank Interrupt Enable */
#define UDPHS_EPTCTLENB_SHRT_PCKT (0x1u << 31) /**< \brief (UDPHS_EPTCTLENB) Short Packet Send/Short Packet Interrupt Enable */
#define UDPHS_EPTCTLENB_DATAX_RX (0x1u << 6) /**< \brief (UDPHS_EPTCTLENB) DATAx Interrupt Enable (Only for high bandwidth Isochronous OUT endpoints) */
#define UDPHS_EPTCTLENB_MDATA_RX (0x1u << 7) /**< \brief (UDPHS_EPTCTLENB) MDATA Interrupt Enable (Only for high bandwidth Isochronous OUT endpoints) */
#define UDPHS_EPTCTLENB_TXRDY_TRER (0x1u << 11) /**< \brief (UDPHS_EPTCTLENB) TX Packet Ready/Transaction Error Interrupt Enable */
#define UDPHS_EPTCTLENB_ERR_FL_ISO (0x1u << 12) /**< \brief (UDPHS_EPTCTLENB) Error Flow Interrupt Enable */
#define UDPHS_EPTCTLENB_ERR_CRC_NTR (0x1u << 13) /**< \brief (UDPHS_EPTCTLENB) ISO CRC Error/Number of Transaction Error Interrupt Enable */
#define UDPHS_EPTCTLENB_ERR_FLUSH (0x1u << 14) /**< \brief (UDPHS_EPTCTLENB) Bank Flush Error Interrupt Enable */
/* -------- UDPHS_EPTCTLDIS : (UDPHS Offset: N/A) UDPHS Endpoint Control Disable Register -------- */
#define UDPHS_EPTCTLDIS_EPT_DISABL (0x1u << 0) /**< \brief (UDPHS_EPTCTLDIS) Endpoint Disable */
#define UDPHS_EPTCTLDIS_AUTO_VALID (0x1u << 1) /**< \brief (UDPHS_EPTCTLDIS) Packet Auto-Valid Disable */
#define UDPHS_EPTCTLDIS_INTDIS_DMA (0x1u << 3) /**< \brief (UDPHS_EPTCTLDIS) Interrupts Disable DMA */
#define UDPHS_EPTCTLDIS_NYET_DIS (0x1u << 4) /**< \brief (UDPHS_EPTCTLDIS) NYET Enable (Only for High Speed Bulk OUT endpoints) */
#define UDPHS_EPTCTLDIS_ERR_OVFLW (0x1u << 8) /**< \brief (UDPHS_EPTCTLDIS) Overflow Error Interrupt Disable */
#define UDPHS_EPTCTLDIS_RXRDY_TXKL (0x1u << 9) /**< \brief (UDPHS_EPTCTLDIS) Received OUT Data Interrupt Disable */
#define UDPHS_EPTCTLDIS_TX_COMPLT (0x1u << 10) /**< \brief (UDPHS_EPTCTLDIS) Transmitted IN Data Complete Interrupt Disable */
#define UDPHS_EPTCTLDIS_TXRDY (0x1u << 11) /**< \brief (UDPHS_EPTCTLDIS) TX Packet Ready Interrupt Disable */
#define UDPHS_EPTCTLDIS_RX_SETUP (0x1u << 12) /**< \brief (UDPHS_EPTCTLDIS) Received SETUP Interrupt Disable */
#define UDPHS_EPTCTLDIS_STALL_SNT (0x1u << 13) /**< \brief (UDPHS_EPTCTLDIS) Stall Sent Interrupt Disable */
#define UDPHS_EPTCTLDIS_NAK_IN (0x1u << 14) /**< \brief (UDPHS_EPTCTLDIS) NAKIN Interrupt Disable */
#define UDPHS_EPTCTLDIS_NAK_OUT (0x1u << 15) /**< \brief (UDPHS_EPTCTLDIS) NAKOUT Interrupt Disable */
#define UDPHS_EPTCTLDIS_BUSY_BANK (0x1u << 18) /**< \brief (UDPHS_EPTCTLDIS) Busy Bank Interrupt Disable */
#define UDPHS_EPTCTLDIS_SHRT_PCKT (0x1u << 31) /**< \brief (UDPHS_EPTCTLDIS) Short Packet Interrupt Disable */
#define UDPHS_EPTCTLDIS_DATAX_RX (0x1u << 6) /**< \brief (UDPHS_EPTCTLDIS) DATAx Interrupt Disable (Only for High Bandwidth Isochronous OUT endpoints) */
#define UDPHS_EPTCTLDIS_MDATA_RX (0x1u << 7) /**< \brief (UDPHS_EPTCTLDIS) MDATA Interrupt Disable (Only for High Bandwidth Isochronous OUT endpoints) */
#define UDPHS_EPTCTLDIS_TXRDY_TRER (0x1u << 11) /**< \brief (UDPHS_EPTCTLDIS) TX Packet Ready/Transaction Error Interrupt Disable */
#define UDPHS_EPTCTLDIS_ERR_FL_ISO (0x1u << 12) /**< \brief (UDPHS_EPTCTLDIS) Error Flow Interrupt Disable */
#define UDPHS_EPTCTLDIS_ERR_CRC_NTR (0x1u << 13) /**< \brief (UDPHS_EPTCTLDIS) ISO CRC Error/Number of Transaction Error Interrupt Disable */
#define UDPHS_EPTCTLDIS_ERR_FLUSH (0x1u << 14) /**< \brief (UDPHS_EPTCTLDIS) bank flush error Interrupt Disable */
/* -------- UDPHS_EPTCTL : (UDPHS Offset: N/A) UDPHS Endpoint Control Register -------- */
#define UDPHS_EPTCTL_EPT_ENABL (0x1u << 0) /**< \brief (UDPHS_EPTCTL) Endpoint Enable */
#define UDPHS_EPTCTL_AUTO_VALID (0x1u << 1) /**< \brief (UDPHS_EPTCTL) Packet Auto-Valid Enabled (Not for CONTROL Endpoints) */
#define UDPHS_EPTCTL_INTDIS_DMA (0x1u << 3) /**< \brief (UDPHS_EPTCTL) Interrupt Disables DMA */
#define UDPHS_EPTCTL_NYET_DIS (0x1u << 4) /**< \brief (UDPHS_EPTCTL) NYET Disable (Only for High Speed Bulk OUT endpoints) */
#define UDPHS_EPTCTL_ERR_OVFLW (0x1u << 8) /**< \brief (UDPHS_EPTCTL) Overflow Error Interrupt Enabled */
#define UDPHS_EPTCTL_RXRDY_TXKL (0x1u << 9) /**< \brief (UDPHS_EPTCTL) Received OUT Data Interrupt Enabled */
#define UDPHS_EPTCTL_TX_COMPLT (0x1u << 10) /**< \brief (UDPHS_EPTCTL) Transmitted IN Data Complete Interrupt Enabled */
#define UDPHS_EPTCTL_TXRDY (0x1u << 11) /**< \brief (UDPHS_EPTCTL) TX Packet Ready Interrupt Enabled */
#define UDPHS_EPTCTL_RX_SETUP (0x1u << 12) /**< \brief (UDPHS_EPTCTL) Received SETUP Interrupt Enabled */
#define UDPHS_EPTCTL_STALL_SNT (0x1u << 13) /**< \brief (UDPHS_EPTCTL) Stall Sent Interrupt Enabled */
#define UDPHS_EPTCTL_NAK_IN (0x1u << 14) /**< \brief (UDPHS_EPTCTL) NAKIN Interrupt Enabled */
#define UDPHS_EPTCTL_NAK_OUT (0x1u << 15) /**< \brief (UDPHS_EPTCTL) NAKOUT Interrupt Enabled */
#define UDPHS_EPTCTL_BUSY_BANK (0x1u << 18) /**< \brief (UDPHS_EPTCTL) Busy Bank Interrupt Enabled */
#define UDPHS_EPTCTL_SHRT_PCKT (0x1u << 31) /**< \brief (UDPHS_EPTCTL) Short Packet Interrupt Enabled */
#define UDPHS_EPTCTL_DATAX_RX (0x1u << 6) /**< \brief (UDPHS_EPTCTL) DATAx Interrupt Enabled (Only for High Bandwidth Isochronous OUT endpoints) */
#define UDPHS_EPTCTL_MDATA_RX (0x1u << 7) /**< \brief (UDPHS_EPTCTL) MDATA Interrupt Enabled (Only for High Bandwidth Isochronous OUT endpoints) */
#define UDPHS_EPTCTL_TXRDY_TRER (0x1u << 11) /**< \brief (UDPHS_EPTCTL) TX Packet Ready/Transaction Error Interrupt Enabled */
#define UDPHS_EPTCTL_ERR_FL_ISO (0x1u << 12) /**< \brief (UDPHS_EPTCTL) Error Flow Interrupt Enabled */
#define UDPHS_EPTCTL_ERR_CRC_NTR (0x1u << 13) /**< \brief (UDPHS_EPTCTL) ISO CRC Error/Number of Transaction Error Interrupt Enabled */
#define UDPHS_EPTCTL_ERR_FLUSH (0x1u << 14) /**< \brief (UDPHS_EPTCTL) Bank Flush Error Interrupt Enabled */
/* -------- UDPHS_EPTSETSTA : (UDPHS Offset: N/A) UDPHS Endpoint Set Status Register -------- */
#define UDPHS_EPTSETSTA_FRCESTALL (0x1u << 5) /**< \brief (UDPHS_EPTSETSTA) Stall Handshake Request Set */
#define UDPHS_EPTSETSTA_RXRDY_TXKL (0x1u << 9) /**< \brief (UDPHS_EPTSETSTA) KILL Bank Set (for IN Endpoint) */
#define UDPHS_EPTSETSTA_TXRDY (0x1u << 11) /**< \brief (UDPHS_EPTSETSTA) TX Packet Ready Set */
#define UDPHS_EPTSETSTA_TXRDY_TRER (0x1u << 11) /**< \brief (UDPHS_EPTSETSTA) TX Packet Ready Set */
/* -------- UDPHS_EPTCLRSTA : (UDPHS Offset: N/A) UDPHS Endpoint Clear Status Register -------- */
#define UDPHS_EPTCLRSTA_FRCESTALL (0x1u << 5) /**< \brief (UDPHS_EPTCLRSTA) Stall Handshake Request Clear */
#define UDPHS_EPTCLRSTA_TOGGLESQ (0x1u << 6) /**< \brief (UDPHS_EPTCLRSTA) Data Toggle Clear */
#define UDPHS_EPTCLRSTA_RXRDY_TXKL (0x1u << 9) /**< \brief (UDPHS_EPTCLRSTA) Received OUT Data Clear */
#define UDPHS_EPTCLRSTA_TX_COMPLT (0x1u << 10) /**< \brief (UDPHS_EPTCLRSTA) Transmitted IN Data Complete Clear */
#define UDPHS_EPTCLRSTA_RX_SETUP (0x1u << 12) /**< \brief (UDPHS_EPTCLRSTA) Received SETUP Clear */
#define UDPHS_EPTCLRSTA_STALL_SNT (0x1u << 13) /**< \brief (UDPHS_EPTCLRSTA) Stall Sent Clear */
#define UDPHS_EPTCLRSTA_NAK_IN (0x1u << 14) /**< \brief (UDPHS_EPTCLRSTA) NAKIN Clear */
#define UDPHS_EPTCLRSTA_NAK_OUT (0x1u << 15) /**< \brief (UDPHS_EPTCLRSTA) NAKOUT Clear */
#define UDPHS_EPTCLRSTA_ERR_FL_ISO (0x1u << 12) /**< \brief (UDPHS_EPTCLRSTA) Error Flow Clear */
#define UDPHS_EPTCLRSTA_ERR_CRC_NTR (0x1u << 13) /**< \brief (UDPHS_EPTCLRSTA) Number of Transaction Error Clear */
#define UDPHS_EPTCLRSTA_ERR_FLUSH (0x1u << 14) /**< \brief (UDPHS_EPTCLRSTA) Bank Flush Error Clear */
/* -------- UDPHS_EPTSTA : (UDPHS Offset: N/A) UDPHS Endpoint Status Register -------- */
#define UDPHS_EPTSTA_FRCESTALL (0x1u << 5) /**< \brief (UDPHS_EPTSTA) Stall Handshake Request */
#define UDPHS_EPTSTA_TOGGLESQ_STA_Pos 6
#define UDPHS_EPTSTA_TOGGLESQ_STA_Msk (0x3u << UDPHS_EPTSTA_TOGGLESQ_STA_Pos) /**< \brief (UDPHS_EPTSTA) Toggle Sequencing */
#define   UDPHS_EPTSTA_TOGGLESQ_STA_DATA0 (0x0u << 6) /**< \brief (UDPHS_EPTSTA) DATA0 */
#define   UDPHS_EPTSTA_TOGGLESQ_STA_DATA1 (0x1u << 6) /**< \brief (UDPHS_EPTSTA) DATA1 */
#define   UDPHS_EPTSTA_TOGGLESQ_STA_DATA2 (0x2u << 6) /**< \brief (UDPHS_EPTSTA) Reserved for High Bandwidth Isochronous Endpoint */
#define   UDPHS_EPTSTA_TOGGLESQ_STA_MDATA (0x3u << 6) /**< \brief (UDPHS_EPTSTA) Reserved for High Bandwidth Isochronous Endpoint */
#define UDPHS_EPTSTA_ERR_OVFLW (0x1u << 8) /**< \brief (UDPHS_EPTSTA) Overflow Error */
#define UDPHS_EPTSTA_RXRDY_TXKL (0x1u << 9) /**< \brief (UDPHS_EPTSTA) Received OUT Data/KILL Bank */
#define UDPHS_EPTSTA_TX_COMPLT (0x1u << 10) /**< \brief (UDPHS_EPTSTA) Transmitted IN Data Complete */
#define UDPHS_EPTSTA_TXRDY (0x1u << 11) /**< \brief (UDPHS_EPTSTA) TX Packet Ready */
#define UDPHS_EPTSTA_RX_SETUP (0x1u << 12) /**< \brief (UDPHS_EPTSTA) Received SETUP */
#define UDPHS_EPTSTA_STALL_SNT (0x1u << 13) /**< \brief (UDPHS_EPTSTA) Stall Sent */
#define UDPHS_EPTSTA_NAK_IN (0x1u << 14) /**< \brief (UDPHS_EPTSTA) NAK IN */
#define UDPHS_EPTSTA_NAK_OUT (0x1u << 15) /**< \brief (UDPHS_EPTSTA) NAK OUT */
#define UDPHS_EPTSTA_CURBK_CTLDIR_Pos 16
#define UDPHS_EPTSTA_CURBK_CTLDIR_Msk (0x3u << UDPHS_EPTSTA_CURBK_CTLDIR_Pos) /**< \brief (UDPHS_EPTSTA) Current Bank/Control Direction */
#define UDPHS_EPTSTA_BUSY_BANK_STA_Pos 18
#define UDPHS_EPTSTA_BUSY_BANK_STA_Msk (0x3u << UDPHS_EPTSTA_BUSY_BANK_STA_Pos) /**< \brief (UDPHS_EPTSTA) Busy Bank Number */
#define   UDPHS_EPTSTA_BUSY_BANK_STA_1BUSYBANK (0x0u << 18) /**< \brief (UDPHS_EPTSTA) 1 busy bank */
#define   UDPHS_EPTSTA_BUSY_BANK_STA_2BUSYBANKS (0x1u << 18) /**< \brief (UDPHS_EPTSTA) 2 busy banks */
#define   UDPHS_EPTSTA_BUSY_BANK_STA_3BUSYBANKS (0x2u << 18) /**< \brief (UDPHS_EPTSTA) 3 busy banks */
#define UDPHS_EPTSTA_BYTE_COUNT_Pos 20
#define UDPHS_EPTSTA_BYTE_COUNT_Msk (0x7ffu << UDPHS_EPTSTA_BYTE_COUNT_Pos) /**< \brief (UDPHS_EPTSTA) UDPHS Byte Count */
#define UDPHS_EPTSTA_SHRT_PCKT (0x1u << 31) /**< \brief (UDPHS_EPTSTA) Short Packet */
#define UDPHS_EPTSTA_TXRDY_TRER (0x1u << 11) /**< \brief (UDPHS_EPTSTA) TX Packet Ready/Transaction Error */
#define UDPHS_EPTSTA_ERR_FL_ISO (0x1u << 12) /**< \brief (UDPHS_EPTSTA) Error Flow */
#define UDPHS_EPTSTA_ERR_CRC_NTR (0x1u << 13) /**< \brief (UDPHS_EPTSTA) CRC ISO Error/Number of Transaction Error */
#define UDPHS_EPTSTA_ERR_FLUSH (0x1u << 14) /**< \brief (UDPHS_EPTSTA) Bank Flush Error */
#define UDPHS_EPTSTA_CURBK_Pos 16
#define UDPHS_EPTSTA_CURBK_Msk (0x3u << UDPHS_EPTSTA_CURBK_Pos) /**< \brief (UDPHS_EPTSTA) Current Bank */
#define   UDPHS_EPTSTA_CURBK_BANK0 (0x0u << 16) /**< \brief (UDPHS_EPTSTA) Bank 0 (or single bank) */
#define   UDPHS_EPTSTA_CURBK_BANK1 (0x1u << 16) /**< \brief (UDPHS_EPTSTA) Bank 1 */
#define   UDPHS_EPTSTA_CURBK_BANK2 (0x2u << 16) /**< \brief (UDPHS_EPTSTA) Bank 2 */
/* -------- UDPHS_DMANXTDSC : (UDPHS Offset: N/A) UDPHS DMA Next Descriptor Address Register -------- */
#define UDPHS_DMANXTDSC_NXT_DSC_ADD_Pos 0
#define UDPHS_DMANXTDSC_NXT_DSC_ADD_Msk (0xffffffffu << UDPHS_DMANXTDSC_NXT_DSC_ADD_Pos) /**< \brief (UDPHS_DMANXTDSC) Next Descriptor Address */
#define UDPHS_DMANXTDSC_NXT_DSC_ADD(value) ((UDPHS_DMANXTDSC_NXT_DSC_ADD_Msk & ((value) << UDPHS_DMANXTDSC_NXT_DSC_ADD_Pos)))
/* -------- UDPHS_DMAADDRESS : (UDPHS Offset: N/A) UDPHS DMA Channel Address Register -------- */
#define UDPHS_DMAADDRESS_BUFF_ADD_Pos 0
#define UDPHS_DMAADDRESS_BUFF_ADD_Msk (0xffffffffu << UDPHS_DMAADDRESS_BUFF_ADD_Pos) /**< \brief (UDPHS_DMAADDRESS) Buffer Address */
#define UDPHS_DMAADDRESS_BUFF_ADD(value) ((UDPHS_DMAADDRESS_BUFF_ADD_Msk & ((value) << UDPHS_DMAADDRESS_BUFF_ADD_Pos)))
/* -------- UDPHS_DMACONTROL : (UDPHS Offset: N/A) UDPHS DMA Channel Control Register -------- */
#define UDPHS_DMACONTROL_CHANN_ENB (0x1u << 0) /**< \brief (UDPHS_DMACONTROL) (Channel Enable Command) */
#define UDPHS_DMACONTROL_LDNXT_DSC (0x1u << 1) /**< \brief (UDPHS_DMACONTROL) Load Next Channel Transfer Descriptor Enable (Command) */
#define UDPHS_DMACONTROL_END_TR_EN (0x1u << 2) /**< \brief (UDPHS_DMACONTROL) End of Transfer Enable (Control) */
#define UDPHS_DMACONTROL_END_B_EN (0x1u << 3) /**< \brief (UDPHS_DMACONTROL) End of Buffer Enable (Control) */
#define UDPHS_DMACONTROL_END_TR_IT (0x1u << 4) /**< \brief (UDPHS_DMACONTROL) End of Transfer Interrupt Enable */
#define UDPHS_DMACONTROL_END_BUFFIT (0x1u << 5) /**< \brief (UDPHS_DMACONTROL) End of Buffer Interrupt Enable */
#define UDPHS_DMACONTROL_DESC_LD_IT (0x1u << 6) /**< \brief (UDPHS_DMACONTROL) Descriptor Loaded Interrupt Enable */
#define UDPHS_DMACONTROL_BURST_LCK (0x1u << 7) /**< \brief (UDPHS_DMACONTROL) Burst Lock Enable */
#define UDPHS_DMACONTROL_BUFF_LENGTH_Pos 16
#define UDPHS_DMACONTROL_BUFF_LENGTH_Msk (0xffffu << UDPHS_DMACONTROL_BUFF_LENGTH_Pos) /**< \brief (UDPHS_DMACONTROL) Buffer Byte Length (Write-only) */
#define UDPHS_DMACONTROL_BUFF_LENGTH(value) ((UDPHS_DMACONTROL_BUFF_LENGTH_Msk & ((value) << UDPHS_DMACONTROL_BUFF_LENGTH_Pos)))
/* -------- UDPHS_DMASTATUS : (UDPHS Offset: N/A) UDPHS DMA Channel Status Register -------- */
#define UDPHS_DMASTATUS_CHANN_ENB (0x1u << 0) /**< \brief (UDPHS_DMASTATUS) Channel Enable Status */
#define UDPHS_DMASTATUS_CHANN_ACT (0x1u << 1) /**< \brief (UDPHS_DMASTATUS) Channel Active Status */
#define UDPHS_DMASTATUS_END_TR_ST (0x1u << 4) /**< \brief (UDPHS_DMASTATUS) End of Channel Transfer Status */
#define UDPHS_DMASTATUS_END_BF_ST (0x1u << 5) /**< \brief (UDPHS_DMASTATUS) End of Channel Buffer Status */
#define UDPHS_DMASTATUS_DESC_LDST (0x1u << 6) /**< \brief (UDPHS_DMASTATUS) Descriptor Loaded Status */
#define UDPHS_DMASTATUS_BUFF_COUNT_Pos 16
#define UDPHS_DMASTATUS_BUFF_COUNT_Msk (0xffffu << UDPHS_DMASTATUS_BUFF_COUNT_Pos) /**< \brief (UDPHS_DMASTATUS) Buffer Byte Count */
#define UDPHS_DMASTATUS_BUFF_COUNT(value) ((UDPHS_DMASTATUS_BUFF_COUNT_Msk & ((value) << UDPHS_DMASTATUS_BUFF_COUNT_Pos)))

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR Watchdog Timer */
/* ============================================================================= */
/** \addtogroup SAMA5D2_WDT Watchdog Timer */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief Wdt hardware registers */
typedef struct {
  __O  uint32_t WDT_CR; /**< \brief (Wdt Offset: 0x00) Control Register */
  __IO uint32_t WDT_MR; /**< \brief (Wdt Offset: 0x04) Mode Register */
  __I  uint32_t WDT_SR; /**< \brief (Wdt Offset: 0x08) Status Register */
} Wdt;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- WDT_CR : (WDT Offset: 0x00) Control Register -------- */
#define WDT_CR_WDRSTT (0x1u << 0) /**< \brief (WDT_CR) Watchdog Restart */
#define WDT_CR_LOCKMR (0x1u << 4) /**< \brief (WDT_CR) Lock Mode Register Write Access */
#define WDT_CR_KEY_Pos 24
#define WDT_CR_KEY_Msk (0xffu << WDT_CR_KEY_Pos) /**< \brief (WDT_CR) Password. */
#define   WDT_CR_KEY_PASSWD (0xA5u << 24) /**< \brief (WDT_CR) Writing any other value in this field aborts the write operation. */
/* -------- WDT_MR : (WDT Offset: 0x04) Mode Register -------- */
#define WDT_MR_WDV_Pos 0
#define WDT_MR_WDV_Msk (0xfffu << WDT_MR_WDV_Pos) /**< \brief (WDT_MR) Watchdog Counter Value */
#define WDT_MR_WDV(value) ((WDT_MR_WDV_Msk & ((value) << WDT_MR_WDV_Pos)))
#define WDT_MR_WDFIEN (0x1u << 12) /**< \brief (WDT_MR) Watchdog Fault Interrupt Enable */
#define WDT_MR_WDRSTEN (0x1u << 13) /**< \brief (WDT_MR) Watchdog Reset Enable */
#define WDT_MR_WDRPROC (0x1u << 14) /**< \brief (WDT_MR) Watchdog Reset Processor */
#define WDT_MR_WDDIS (0x1u << 15) /**< \brief (WDT_MR) Watchdog Disable */
#define WDT_MR_WDD_Pos 16
#define WDT_MR_WDD_Msk (0xfffu << WDT_MR_WDD_Pos) /**< \brief (WDT_MR) Watchdog Delta Value */
#define WDT_MR_WDD(value) ((WDT_MR_WDD_Msk & ((value) << WDT_MR_WDD_Pos)))
#define WDT_MR_WDDBGHLT (0x1u << 28) /**< \brief (WDT_MR) Watchdog Debug Halt */
#define WDT_MR_WDIDLEHLT (0x1u << 29) /**< \brief (WDT_MR) Watchdog Idle Halt */
/* -------- WDT_SR : (WDT Offset: 0x08) Status Register -------- */
#define WDT_SR_WDUNF (0x1u << 0) /**< \brief (WDT_SR) Watchdog Underflow */
#define WDT_SR_WDERR (0x1u << 1) /**< \brief (WDT_SR) Watchdog Error */

/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR Extensible DMA Controller */
/* ============================================================================= */
/** \addtogroup SAMA5D2_XDMAC Extensible DMA Controller */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief XdmacChid hardware registers */
typedef struct {
  __O  uint32_t XDMAC_CIE;     /**< \brief (XdmacChid Offset: 0x0) Channel Interrupt Enable Register */
  __O  uint32_t XDMAC_CID;     /**< \brief (XdmacChid Offset: 0x4) Channel Interrupt Disable Register */
  __O  uint32_t XDMAC_CIM;     /**< \brief (XdmacChid Offset: 0x8) Channel Interrupt Mask Register */
  __I  uint32_t XDMAC_CIS;     /**< \brief (XdmacChid Offset: 0xC) Channel Interrupt Status Register */
  __IO uint32_t XDMAC_CSA;     /**< \brief (XdmacChid Offset: 0x10) Channel Source Address Register */
  __IO uint32_t XDMAC_CDA;     /**< \brief (XdmacChid Offset: 0x14) Channel Destination Address Register */
  __IO uint32_t XDMAC_CNDA;    /**< \brief (XdmacChid Offset: 0x18) Channel Next Descriptor Address Register */
  __IO uint32_t XDMAC_CNDC;    /**< \brief (XdmacChid Offset: 0x1C) Channel Next Descriptor Control Register */
  __IO uint32_t XDMAC_CUBC;    /**< \brief (XdmacChid Offset: 0x20) Channel Microblock Control Register */
  __IO uint32_t XDMAC_CBC;     /**< \brief (XdmacChid Offset: 0x24) Channel Block Control Register */
  __IO uint32_t XDMAC_CC;      /**< \brief (XdmacChid Offset: 0x28) Channel Configuration Register */
  __IO uint32_t XDMAC_CDS_MSP; /**< \brief (XdmacChid Offset: 0x2C) Channel Data Stride Memory Set Pattern */
  __IO uint32_t XDMAC_CSUS;    /**< \brief (XdmacChid Offset: 0x30) Channel Source Microblock Stride */
  __IO uint32_t XDMAC_CDUS;    /**< \brief (XdmacChid Offset: 0x34) Channel Destination Microblock Stride */
  __I  uint32_t Reserved1[2];
} XdmacChid;
/** \brief Xdmac hardware registers */
#define XDMACCHID_NUMBER 16
typedef struct {
  __IO uint32_t  XDMAC_GTYPE;                  /**< \brief (Xdmac Offset: 0x00) Global Type Register */
  __I  uint32_t  XDMAC_GCFG;                   /**< \brief (Xdmac Offset: 0x04) Global Configuration Register */
  __IO uint32_t  XDMAC_GWAC;                   /**< \brief (Xdmac Offset: 0x08) Global Weighted Arbiter Configuration Register */
  __O  uint32_t  XDMAC_GIE;                    /**< \brief (Xdmac Offset: 0x0C) Global Interrupt Enable Register */
  __O  uint32_t  XDMAC_GID;                    /**< \brief (Xdmac Offset: 0x10) Global Interrupt Disable Register */
  __I  uint32_t  XDMAC_GIM;                    /**< \brief (Xdmac Offset: 0x14) Global Interrupt Mask Register */
  __I  uint32_t  XDMAC_GIS;                    /**< \brief (Xdmac Offset: 0x18) Global Interrupt Status Register */
  __O  uint32_t  XDMAC_GE;                     /**< \brief (Xdmac Offset: 0x1C) Global Channel Enable Register */
  __O  uint32_t  XDMAC_GD;                     /**< \brief (Xdmac Offset: 0x20) Global Channel Disable Register */
  __I  uint32_t  XDMAC_GS;                     /**< \brief (Xdmac Offset: 0x24) Global Channel Status Register */
  __IO uint32_t  XDMAC_GRS;                    /**< \brief (Xdmac Offset: 0x28) Global Channel Read Suspend Register */
  __IO uint32_t  XDMAC_GWS;                    /**< \brief (Xdmac Offset: 0x2C) Global Channel Write Suspend Register */
  __O  uint32_t  XDMAC_GRWS;                   /**< \brief (Xdmac Offset: 0x30) Global Channel Read Write Suspend Register */
  __O  uint32_t  XDMAC_GRWR;                   /**< \brief (Xdmac Offset: 0x34) Global Channel Read Write Resume Register */
  __O  uint32_t  XDMAC_GSWR;                   /**< \brief (Xdmac Offset: 0x38) Global Channel Software Request Register */
  __I  uint32_t  XDMAC_GSWS;                   /**< \brief (Xdmac Offset: 0x3C) Global Channel Software Request Status Register */
  __O  uint32_t  XDMAC_GSWF;                   /**< \brief (Xdmac Offset: 0x40) Global Channel Software Flush Request Register */
  __I  uint32_t  Reserved1[3];
       XdmacChid XDMAC_CHID[XDMACCHID_NUMBER]; /**< \brief (Xdmac Offset: 0x50) chid = 0 .. 15 */
  __I  uint32_t  Reserved2[747];
  __IO uint32_t  XDMAC_VERSION;                /**< \brief (Xdmac Offset: 0xFFC) XDMAC Version Register */
} Xdmac;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* -------- XDMAC_GTYPE : (XDMAC Offset: 0x00) Global Type Register -------- */
#define XDMAC_GTYPE_NB_CH_Pos 0
#define XDMAC_GTYPE_NB_CH_Msk (0x1fu << XDMAC_GTYPE_NB_CH_Pos) /**< \brief (XDMAC_GTYPE) Number of Channels Minus One */
#define XDMAC_GTYPE_NB_CH(value) ((XDMAC_GTYPE_NB_CH_Msk & ((value) << XDMAC_GTYPE_NB_CH_Pos)))
#define XDMAC_GTYPE_FIFO_SZ_Pos 5
#define XDMAC_GTYPE_FIFO_SZ_Msk (0x7ffu << XDMAC_GTYPE_FIFO_SZ_Pos) /**< \brief (XDMAC_GTYPE) Number of Bytes */
#define XDMAC_GTYPE_FIFO_SZ(value) ((XDMAC_GTYPE_FIFO_SZ_Msk & ((value) << XDMAC_GTYPE_FIFO_SZ_Pos)))
#define XDMAC_GTYPE_NB_REQ_Pos 16
#define XDMAC_GTYPE_NB_REQ_Msk (0x7fu << XDMAC_GTYPE_NB_REQ_Pos) /**< \brief (XDMAC_GTYPE) Number of Peripheral Requests Minus One */
#define XDMAC_GTYPE_NB_REQ(value) ((XDMAC_GTYPE_NB_REQ_Msk & ((value) << XDMAC_GTYPE_NB_REQ_Pos)))
/* -------- XDMAC_GCFG : (XDMAC Offset: 0x04) Global Configuration Register -------- */
#define XDMAC_GCFG_CGDISREG (0x1u << 0) /**< \brief (XDMAC_GCFG) Configuration Registers Clock Gating Disable */
#define XDMAC_GCFG_CGDISPIPE (0x1u << 1) /**< \brief (XDMAC_GCFG) Pipeline Clock Gating Disable */
#define XDMAC_GCFG_CGDISFIFO (0x1u << 2) /**< \brief (XDMAC_GCFG) FIFO Clock Gating Disable */
#define XDMAC_GCFG_CGDISIF (0x1u << 3) /**< \brief (XDMAC_GCFG) Bus Interface Clock Gating Disable */
#define XDMAC_GCFG_BXKBEN (0x1u << 8) /**< \brief (XDMAC_GCFG) Boundary X Kilo byte Enable */
/* -------- XDMAC_GWAC : (XDMAC Offset: 0x08) Global Weighted Arbiter Configuration Register -------- */
#define XDMAC_GWAC_PW0_Pos 0
#define XDMAC_GWAC_PW0_Msk (0xfu << XDMAC_GWAC_PW0_Pos) /**< \brief (XDMAC_GWAC) Pool Weight 0 */
#define XDMAC_GWAC_PW0(value) ((XDMAC_GWAC_PW0_Msk & ((value) << XDMAC_GWAC_PW0_Pos)))
#define XDMAC_GWAC_PW1_Pos 4
#define XDMAC_GWAC_PW1_Msk (0xfu << XDMAC_GWAC_PW1_Pos) /**< \brief (XDMAC_GWAC) Pool Weight 1 */
#define XDMAC_GWAC_PW1(value) ((XDMAC_GWAC_PW1_Msk & ((value) << XDMAC_GWAC_PW1_Pos)))
#define XDMAC_GWAC_PW2_Pos 8
#define XDMAC_GWAC_PW2_Msk (0xfu << XDMAC_GWAC_PW2_Pos) /**< \brief (XDMAC_GWAC) Pool Weight 2 */
#define XDMAC_GWAC_PW2(value) ((XDMAC_GWAC_PW2_Msk & ((value) << XDMAC_GWAC_PW2_Pos)))
#define XDMAC_GWAC_PW3_Pos 12
#define XDMAC_GWAC_PW3_Msk (0xfu << XDMAC_GWAC_PW3_Pos) /**< \brief (XDMAC_GWAC) Pool Weight 3 */
#define XDMAC_GWAC_PW3(value) ((XDMAC_GWAC_PW3_Msk & ((value) << XDMAC_GWAC_PW3_Pos)))
/* -------- XDMAC_GIE : (XDMAC Offset: 0x0C) Global Interrupt Enable Register -------- */
#define XDMAC_GIE_IE0 (0x1u << 0) /**< \brief (XDMAC_GIE) XDMAC Channel 0 Interrupt Enable Bit */
#define XDMAC_GIE_IE1 (0x1u << 1) /**< \brief (XDMAC_GIE) XDMAC Channel 1 Interrupt Enable Bit */
#define XDMAC_GIE_IE10 (0x1u << 10) /**< \brief (XDMAC_GIE) XDMAC Channel 10 Interrupt Enable Bit */
#define XDMAC_GIE_IE11 (0x1u << 11) /**< \brief (XDMAC_GIE) XDMAC Channel 11 Interrupt Enable Bit */
#define XDMAC_GIE_IE12 (0x1u << 12) /**< \brief (XDMAC_GIE) XDMAC Channel 12 Interrupt Enable Bit */
#define XDMAC_GIE_IE13 (0x1u << 13) /**< \brief (XDMAC_GIE) XDMAC Channel 13 Interrupt Enable Bit */
#define XDMAC_GIE_IE14 (0x1u << 14) /**< \brief (XDMAC_GIE) XDMAC Channel 14 Interrupt Enable Bit */
#define XDMAC_GIE_IE15 (0x1u << 15) /**< \brief (XDMAC_GIE) XDMAC Channel 15 Interrupt Enable Bit */
/* -------- XDMAC_GID : (XDMAC Offset: 0x10) Global Interrupt Disable Register -------- */
#define XDMAC_GID_ID0 (0x1u << 0) /**< \brief (XDMAC_GID) XDMAC Channel 0 Interrupt Disable Bit */
#define XDMAC_GID_ID1 (0x1u << 1) /**< \brief (XDMAC_GID) XDMAC Channel 1 Interrupt Disable Bit */
#define XDMAC_GID_ID10 (0x1u << 10) /**< \brief (XDMAC_GID) XDMAC Channel 10 Interrupt Disable Bit */
#define XDMAC_GID_ID11 (0x1u << 11) /**< \brief (XDMAC_GID) XDMAC Channel 11 Interrupt Disable Bit */
#define XDMAC_GID_ID12 (0x1u << 12) /**< \brief (XDMAC_GID) XDMAC Channel 12 Interrupt Disable Bit */
#define XDMAC_GID_ID13 (0x1u << 13) /**< \brief (XDMAC_GID) XDMAC Channel 13 Interrupt Disable Bit */
#define XDMAC_GID_ID14 (0x1u << 14) /**< \brief (XDMAC_GID) XDMAC Channel 14 Interrupt Disable Bit */
#define XDMAC_GID_ID15 (0x1u << 15) /**< \brief (XDMAC_GID) XDMAC Channel 15 Interrupt Disable Bit */
/* -------- XDMAC_GIM : (XDMAC Offset: 0x14) Global Interrupt Mask Register -------- */
#define XDMAC_GIM_IM0 (0x1u << 0) /**< \brief (XDMAC_GIM) XDMAC Channel 0 Interrupt Mask Bit */
#define XDMAC_GIM_IM1 (0x1u << 1) /**< \brief (XDMAC_GIM) XDMAC Channel 1 Interrupt Mask Bit */
#define XDMAC_GIM_IM10 (0x1u << 10) /**< \brief (XDMAC_GIM) XDMAC Channel 10 Interrupt Mask Bit */
#define XDMAC_GIM_IM11 (0x1u << 11) /**< \brief (XDMAC_GIM) XDMAC Channel 11 Interrupt Mask Bit */
#define XDMAC_GIM_IM12 (0x1u << 12) /**< \brief (XDMAC_GIM) XDMAC Channel 12 Interrupt Mask Bit */
#define XDMAC_GIM_IM13 (0x1u << 13) /**< \brief (XDMAC_GIM) XDMAC Channel 13 Interrupt Mask Bit */
#define XDMAC_GIM_IM14 (0x1u << 14) /**< \brief (XDMAC_GIM) XDMAC Channel 14 Interrupt Mask Bit */
#define XDMAC_GIM_IM15 (0x1u << 15) /**< \brief (XDMAC_GIM) XDMAC Channel 15 Interrupt Mask Bit */
/* -------- XDMAC_GIS : (XDMAC Offset: 0x18) Global Interrupt Status Register -------- */
#define XDMAC_GIS_IS0 (0x1u << 0) /**< \brief (XDMAC_GIS) XDMAC Channel 0 Interrupt Status Bit */
#define XDMAC_GIS_IS1 (0x1u << 1) /**< \brief (XDMAC_GIS) XDMAC Channel 1 Interrupt Status Bit */
#define XDMAC_GIS_IS10 (0x1u << 10) /**< \brief (XDMAC_GIS) XDMAC Channel 10 Interrupt Status Bit */
#define XDMAC_GIS_IS11 (0x1u << 11) /**< \brief (XDMAC_GIS) XDMAC Channel 11 Interrupt Status Bit */
#define XDMAC_GIS_IS12 (0x1u << 12) /**< \brief (XDMAC_GIS) XDMAC Channel 12 Interrupt Status Bit */
#define XDMAC_GIS_IS13 (0x1u << 13) /**< \brief (XDMAC_GIS) XDMAC Channel 13 Interrupt Status Bit */
#define XDMAC_GIS_IS14 (0x1u << 14) /**< \brief (XDMAC_GIS) XDMAC Channel 14 Interrupt Status Bit */
#define XDMAC_GIS_IS15 (0x1u << 15) /**< \brief (XDMAC_GIS) XDMAC Channel 15 Interrupt Status Bit */
/* -------- XDMAC_GE : (XDMAC Offset: 0x1C) Global Channel Enable Register -------- */
#define XDMAC_GE_EN0 (0x1u << 0) /**< \brief (XDMAC_GE) XDMAC Channel 0 Enable Bit */
#define XDMAC_GE_EN1 (0x1u << 1) /**< \brief (XDMAC_GE) XDMAC Channel 1 Enable Bit */
#define XDMAC_GE_EN10 (0x1u << 10) /**< \brief (XDMAC_GE) XDMAC Channel 10 Enable Bit */
#define XDMAC_GE_EN11 (0x1u << 11) /**< \brief (XDMAC_GE) XDMAC Channel 11 Enable Bit */
#define XDMAC_GE_EN12 (0x1u << 12) /**< \brief (XDMAC_GE) XDMAC Channel 12 Enable Bit */
#define XDMAC_GE_EN13 (0x1u << 13) /**< \brief (XDMAC_GE) XDMAC Channel 13 Enable Bit */
#define XDMAC_GE_EN14 (0x1u << 14) /**< \brief (XDMAC_GE) XDMAC Channel 14 Enable Bit */
#define XDMAC_GE_EN15 (0x1u << 15) /**< \brief (XDMAC_GE) XDMAC Channel 15 Enable Bit */
/* -------- XDMAC_GD : (XDMAC Offset: 0x20) Global Channel Disable Register -------- */
#define XDMAC_GD_DI0 (0x1u << 0) /**< \brief (XDMAC_GD) XDMAC Channel 0 Disable Bit */
#define XDMAC_GD_DI1 (0x1u << 1) /**< \brief (XDMAC_GD) XDMAC Channel 1 Disable Bit */
#define XDMAC_GD_DI10 (0x1u << 10) /**< \brief (XDMAC_GD) XDMAC Channel 10 Disable Bit */
#define XDMAC_GD_DI11 (0x1u << 11) /**< \brief (XDMAC_GD) XDMAC Channel 11 Disable Bit */
#define XDMAC_GD_DI12 (0x1u << 12) /**< \brief (XDMAC_GD) XDMAC Channel 12 Disable Bit */
#define XDMAC_GD_DI13 (0x1u << 13) /**< \brief (XDMAC_GD) XDMAC Channel 13 Disable Bit */
#define XDMAC_GD_DI14 (0x1u << 14) /**< \brief (XDMAC_GD) XDMAC Channel 14 Disable Bit */
#define XDMAC_GD_DI15 (0x1u << 15) /**< \brief (XDMAC_GD) XDMAC Channel 15 Disable Bit */
/* -------- XDMAC_GS : (XDMAC Offset: 0x24) Global Channel Status Register -------- */
#define XDMAC_GS_ST0 (0x1u << 0) /**< \brief (XDMAC_GS) XDMAC Channel 0 Status Bit */
#define XDMAC_GS_ST1 (0x1u << 1) /**< \brief (XDMAC_GS) XDMAC Channel 1 Status Bit */
#define XDMAC_GS_ST10 (0x1u << 10) /**< \brief (XDMAC_GS) XDMAC Channel 10 Status Bit */
#define XDMAC_GS_ST11 (0x1u << 11) /**< \brief (XDMAC_GS) XDMAC Channel 11 Status Bit */
#define XDMAC_GS_ST12 (0x1u << 12) /**< \brief (XDMAC_GS) XDMAC Channel 12 Status Bit */
#define XDMAC_GS_ST13 (0x1u << 13) /**< \brief (XDMAC_GS) XDMAC Channel 13 Status Bit */
#define XDMAC_GS_ST14 (0x1u << 14) /**< \brief (XDMAC_GS) XDMAC Channel 14 Status Bit */
#define XDMAC_GS_ST15 (0x1u << 15) /**< \brief (XDMAC_GS) XDMAC Channel 15 Status Bit */
/* -------- XDMAC_GRS : (XDMAC Offset: 0x28) Global Channel Read Suspend Register -------- */
#define XDMAC_GRS_RS0 (0x1u << 0) /**< \brief (XDMAC_GRS) XDMAC Channel 0 Read Suspend Bit */
#define XDMAC_GRS_RS1 (0x1u << 1) /**< \brief (XDMAC_GRS) XDMAC Channel 1 Read Suspend Bit */
#define XDMAC_GRS_RS10 (0x1u << 10) /**< \brief (XDMAC_GRS) XDMAC Channel 10 Read Suspend Bit */
#define XDMAC_GRS_RS11 (0x1u << 11) /**< \brief (XDMAC_GRS) XDMAC Channel 11 Read Suspend Bit */
#define XDMAC_GRS_RS12 (0x1u << 12) /**< \brief (XDMAC_GRS) XDMAC Channel 12 Read Suspend Bit */
#define XDMAC_GRS_RS13 (0x1u << 13) /**< \brief (XDMAC_GRS) XDMAC Channel 13 Read Suspend Bit */
#define XDMAC_GRS_RS14 (0x1u << 14) /**< \brief (XDMAC_GRS) XDMAC Channel 14 Read Suspend Bit */
#define XDMAC_GRS_RS15 (0x1u << 15) /**< \brief (XDMAC_GRS) XDMAC Channel 15 Read Suspend Bit */
/* -------- XDMAC_GWS : (XDMAC Offset: 0x2C) Global Channel Write Suspend Register -------- */
#define XDMAC_GWS_WS0 (0x1u << 0) /**< \brief (XDMAC_GWS) XDMAC Channel 0 Write Suspend Bit */
#define XDMAC_GWS_WS1 (0x1u << 1) /**< \brief (XDMAC_GWS) XDMAC Channel 1 Write Suspend Bit */
#define XDMAC_GWS_WS10 (0x1u << 10) /**< \brief (XDMAC_GWS) XDMAC Channel 10 Write Suspend Bit */
#define XDMAC_GWS_WS11 (0x1u << 11) /**< \brief (XDMAC_GWS) XDMAC Channel 11 Write Suspend Bit */
#define XDMAC_GWS_WS12 (0x1u << 12) /**< \brief (XDMAC_GWS) XDMAC Channel 12 Write Suspend Bit */
#define XDMAC_GWS_WS13 (0x1u << 13) /**< \brief (XDMAC_GWS) XDMAC Channel 13 Write Suspend Bit */
#define XDMAC_GWS_WS14 (0x1u << 14) /**< \brief (XDMAC_GWS) XDMAC Channel 14 Write Suspend Bit */
#define XDMAC_GWS_WS15 (0x1u << 15) /**< \brief (XDMAC_GWS) XDMAC Channel 15 Write Suspend Bit */
/* -------- XDMAC_GRWS : (XDMAC Offset: 0x30) Global Channel Read Write Suspend Register -------- */
#define XDMAC_GRWS_RWS0 (0x1u << 0) /**< \brief (XDMAC_GRWS) XDMAC Channel 0 Read Write Suspend Bit */
#define XDMAC_GRWS_RWS1 (0x1u << 1) /**< \brief (XDMAC_GRWS) XDMAC Channel 1 Read Write Suspend Bit */
#define XDMAC_GRWS_RWS10 (0x1u << 10) /**< \brief (XDMAC_GRWS) XDMAC Channel 10 Read Write Suspend Bit */
#define XDMAC_GRWS_RWS11 (0x1u << 11) /**< \brief (XDMAC_GRWS) XDMAC Channel 11 Read Write Suspend Bit */
#define XDMAC_GRWS_RWS12 (0x1u << 12) /**< \brief (XDMAC_GRWS) XDMAC Channel 12 Read Write Suspend Bit */
#define XDMAC_GRWS_RWS13 (0x1u << 13) /**< \brief (XDMAC_GRWS) XDMAC Channel 13 Read Write Suspend Bit */
#define XDMAC_GRWS_RWS14 (0x1u << 14) /**< \brief (XDMAC_GRWS) XDMAC Channel 14 Read Write Suspend Bit */
#define XDMAC_GRWS_RWS15 (0x1u << 15) /**< \brief (XDMAC_GRWS) XDMAC Channel 15 Read Write Suspend Bit */
/* -------- XDMAC_GRWR : (XDMAC Offset: 0x34) Global Channel Read Write Resume Register -------- */
#define XDMAC_GRWR_RWR0 (0x1u << 0) /**< \brief (XDMAC_GRWR) XDMAC Channel 0 Read Write Resume Bit */
#define XDMAC_GRWR_RWR1 (0x1u << 1) /**< \brief (XDMAC_GRWR) XDMAC Channel 1 Read Write Resume Bit */
#define XDMAC_GRWR_RWR10 (0x1u << 10) /**< \brief (XDMAC_GRWR) XDMAC Channel 10 Read Write Resume Bit */
#define XDMAC_GRWR_RWR11 (0x1u << 11) /**< \brief (XDMAC_GRWR) XDMAC Channel 11 Read Write Resume Bit */
#define XDMAC_GRWR_RWR12 (0x1u << 12) /**< \brief (XDMAC_GRWR) XDMAC Channel 12 Read Write Resume Bit */
#define XDMAC_GRWR_RWR13 (0x1u << 13) /**< \brief (XDMAC_GRWR) XDMAC Channel 13 Read Write Resume Bit */
#define XDMAC_GRWR_RWR14 (0x1u << 14) /**< \brief (XDMAC_GRWR) XDMAC Channel 14 Read Write Resume Bit */
#define XDMAC_GRWR_RWR15 (0x1u << 15) /**< \brief (XDMAC_GRWR) XDMAC Channel 15 Read Write Resume Bit */
/* -------- XDMAC_GSWR : (XDMAC Offset: 0x38) Global Channel Software Request Register -------- */
#define XDMAC_GSWR_SWREQ0 (0x1u << 0) /**< \brief (XDMAC_GSWR) XDMAC Channel 0 Software Request Bit */
#define XDMAC_GSWR_SWREQ1 (0x1u << 1) /**< \brief (XDMAC_GSWR) XDMAC Channel 1 Software Request Bit */
#define XDMAC_GSWR_SWREQ10 (0x1u << 10) /**< \brief (XDMAC_GSWR) XDMAC Channel 10 Software Request Bit */
#define XDMAC_GSWR_SWREQ11 (0x1u << 11) /**< \brief (XDMAC_GSWR) XDMAC Channel 11 Software Request Bit */
#define XDMAC_GSWR_SWREQ12 (0x1u << 12) /**< \brief (XDMAC_GSWR) XDMAC Channel 12 Software Request Bit */
#define XDMAC_GSWR_SWREQ13 (0x1u << 13) /**< \brief (XDMAC_GSWR) XDMAC Channel 13 Software Request Bit */
#define XDMAC_GSWR_SWREQ14 (0x1u << 14) /**< \brief (XDMAC_GSWR) XDMAC Channel 14 Software Request Bit */
#define XDMAC_GSWR_SWREQ15 (0x1u << 15) /**< \brief (XDMAC_GSWR) XDMAC Channel 15 Software Request Bit */
/* -------- XDMAC_GSWS : (XDMAC Offset: 0x3C) Global Channel Software Request Status Register -------- */
#define XDMAC_GSWS_SWRS0 (0x1u << 0) /**< \brief (XDMAC_GSWS) XDMAC Channel 0 Software Request Status Bit */
#define XDMAC_GSWS_SWRS1 (0x1u << 1) /**< \brief (XDMAC_GSWS) XDMAC Channel 1 Software Request Status Bit */
#define XDMAC_GSWS_SWRS10 (0x1u << 10) /**< \brief (XDMAC_GSWS) XDMAC Channel 10 Software Request Status Bit */
#define XDMAC_GSWS_SWRS11 (0x1u << 11) /**< \brief (XDMAC_GSWS) XDMAC Channel 11 Software Request Status Bit */
#define XDMAC_GSWS_SWRS12 (0x1u << 12) /**< \brief (XDMAC_GSWS) XDMAC Channel 12 Software Request Status Bit */
#define XDMAC_GSWS_SWRS13 (0x1u << 13) /**< \brief (XDMAC_GSWS) XDMAC Channel 13 Software Request Status Bit */
#define XDMAC_GSWS_SWRS14 (0x1u << 14) /**< \brief (XDMAC_GSWS) XDMAC Channel 14 Software Request Status Bit */
#define XDMAC_GSWS_SWRS15 (0x1u << 15) /**< \brief (XDMAC_GSWS) XDMAC Channel 15 Software Request Status Bit */
/* -------- XDMAC_GSWF : (XDMAC Offset: 0x40) Global Channel Software Flush Request Register -------- */
#define XDMAC_GSWF_SWF0 (0x1u << 0) /**< \brief (XDMAC_GSWF) XDMAC Channel 0 Software Flush Request Bit */
#define XDMAC_GSWF_SWF1 (0x1u << 1) /**< \brief (XDMAC_GSWF) XDMAC Channel 1 Software Flush Request Bit */
#define XDMAC_GSWF_SWF10 (0x1u << 10) /**< \brief (XDMAC_GSWF) XDMAC Channel 10 Software Flush Request Bit */
#define XDMAC_GSWF_SWF11 (0x1u << 11) /**< \brief (XDMAC_GSWF) XDMAC Channel 11 Software Flush Request Bit */
#define XDMAC_GSWF_SWF12 (0x1u << 12) /**< \brief (XDMAC_GSWF) XDMAC Channel 12 Software Flush Request Bit */
#define XDMAC_GSWF_SWF13 (0x1u << 13) /**< \brief (XDMAC_GSWF) XDMAC Channel 13 Software Flush Request Bit */
#define XDMAC_GSWF_SWF14 (0x1u << 14) /**< \brief (XDMAC_GSWF) XDMAC Channel 14 Software Flush Request Bit */
#define XDMAC_GSWF_SWF15 (0x1u << 15) /**< \brief (XDMAC_GSWF) XDMAC Channel 15 Software Flush Request Bit */
/* -------- XDMAC_CIE : (XDMAC Offset: N/A) Channel Interrupt Enable Register -------- */
#define XDMAC_CIE_BIE (0x1u << 0) /**< \brief (XDMAC_CIE) End of Block Interrupt Enable Bit */
#define XDMAC_CIE_LIE (0x1u << 1) /**< \brief (XDMAC_CIE) End of Linked List Interrupt Enable Bit */
#define XDMAC_CIE_DIE (0x1u << 2) /**< \brief (XDMAC_CIE) End of Disable Interrupt Enable Bit */
#define XDMAC_CIE_FIE (0x1u << 3) /**< \brief (XDMAC_CIE) End of Flush Interrupt Enable Bit */
#define XDMAC_CIE_RBIE (0x1u << 4) /**< \brief (XDMAC_CIE) Read Bus Error Interrupt Enable Bit */
#define XDMAC_CIE_WBIE (0x1u << 5) /**< \brief (XDMAC_CIE) Write Bus Error Interrupt Enable Bit */
#define XDMAC_CIE_ROIE (0x1u << 6) /**< \brief (XDMAC_CIE) Request Overflow Error Interrupt Enable Bit */
/* -------- XDMAC_CID : (XDMAC Offset: N/A) Channel Interrupt Disable Register -------- */
#define XDMAC_CID_BID (0x1u << 0) /**< \brief (XDMAC_CID) End of Block Interrupt Disable Bit */
#define XDMAC_CID_LID (0x1u << 1) /**< \brief (XDMAC_CID) End of Linked List Interrupt Disable Bit */
#define XDMAC_CID_DID (0x1u << 2) /**< \brief (XDMAC_CID) End of Disable Interrupt Disable Bit */
#define XDMAC_CID_FID (0x1u << 3) /**< \brief (XDMAC_CID) End of Flush Interrupt Disable Bit */
#define XDMAC_CID_RBEID (0x1u << 4) /**< \brief (XDMAC_CID) Read Bus Error Interrupt Disable Bit */
#define XDMAC_CID_WBEID (0x1u << 5) /**< \brief (XDMAC_CID) Write Bus Error Interrupt Disable Bit */
#define XDMAC_CID_ROID (0x1u << 6) /**< \brief (XDMAC_CID) Request Overflow Error Interrupt Disable Bit */
/* -------- XDMAC_CIM : (XDMAC Offset: N/A) Channel Interrupt Mask Register -------- */
#define XDMAC_CIM_BIM (0x1u << 0) /**< \brief (XDMAC_CIM) End of Block Interrupt Mask Bit */
#define XDMAC_CIM_LIM (0x1u << 1) /**< \brief (XDMAC_CIM) End of Linked List Interrupt Mask Bit */
#define XDMAC_CIM_DIM (0x1u << 2) /**< \brief (XDMAC_CIM) End of Disable Interrupt Mask bit */
#define XDMAC_CIM_FIM (0x1u << 3) /**< \brief (XDMAC_CIM) End of Flush Interrupt Mask Bit */
#define XDMAC_CIM_RBEIM (0x1u << 4) /**< \brief (XDMAC_CIM) Read Bus Error Interrupt Mask Bit */
#define XDMAC_CIM_WBEIM (0x1u << 5) /**< \brief (XDMAC_CIM) Write Bus Error Interrupt Mask Bit */
#define XDMAC_CIM_ROIM (0x1u << 6) /**< \brief (XDMAC_CIM) Request Overflow Error Interrupt Mask Bit */
/* -------- XDMAC_CIS : (XDMAC Offset: N/A) Channel Interrupt Status Register -------- */
#define XDMAC_CIS_BIS (0x1u << 0) /**< \brief (XDMAC_CIS) End of Block Interrupt Status Bit */
#define XDMAC_CIS_LIS (0x1u << 1) /**< \brief (XDMAC_CIS) End of Linked List Interrupt Status Bit */
#define XDMAC_CIS_DIS (0x1u << 2) /**< \brief (XDMAC_CIS) End of Disable Interrupt Status Bit */
#define XDMAC_CIS_FIS (0x1u << 3) /**< \brief (XDMAC_CIS) End of Flush Interrupt Status Bit */
#define XDMAC_CIS_RBEIS (0x1u << 4) /**< \brief (XDMAC_CIS) Read Bus Error Interrupt Status Bit */
#define XDMAC_CIS_WBEIS (0x1u << 5) /**< \brief (XDMAC_CIS) Write Bus Error Interrupt Status Bit */
#define XDMAC_CIS_ROIS (0x1u << 6) /**< \brief (XDMAC_CIS) Request Overflow Error Interrupt Status Bit */
/* -------- XDMAC_CSA : (XDMAC Offset: N/A) Channel Source Address Register -------- */
#define XDMAC_CSA_SA_Pos 0
#define XDMAC_CSA_SA_Msk (0xffffffffu << XDMAC_CSA_SA_Pos) /**< \brief (XDMAC_CSA) Channel x Source Address */
#define XDMAC_CSA_SA(value) ((XDMAC_CSA_SA_Msk & ((value) << XDMAC_CSA_SA_Pos)))
/* -------- XDMAC_CDA : (XDMAC Offset: N/A) Channel Destination Address Register -------- */
#define XDMAC_CDA_DA_Pos 0
#define XDMAC_CDA_DA_Msk (0xffffffffu << XDMAC_CDA_DA_Pos) /**< \brief (XDMAC_CDA) Channel x Destination Address */
#define XDMAC_CDA_DA(value) ((XDMAC_CDA_DA_Msk & ((value) << XDMAC_CDA_DA_Pos)))
/* -------- XDMAC_CNDA : (XDMAC Offset: N/A) Channel Next Descriptor Address Register -------- */
#define XDMAC_CNDA_NDAIF (0x1u << 0) /**< \brief (XDMAC_CNDA) Channel x Next Descriptor Interface */
#define XDMAC_CNDA_NDA_Pos 2
#define XDMAC_CNDA_NDA_Msk (0x3fffffffu << XDMAC_CNDA_NDA_Pos) /**< \brief (XDMAC_CNDA) Channel x Next Descriptor Address */
#define XDMAC_CNDA_NDA(value) ((XDMAC_CNDA_NDA_Msk & ((value) << XDMAC_CNDA_NDA_Pos)))
/* -------- XDMAC_CNDC : (XDMAC Offset: N/A) Channel Next Descriptor Control Register -------- */
#define XDMAC_CNDC_NDE (0x1u << 0) /**< \brief (XDMAC_CNDC) Channel x Next Descriptor Enable */
#define   XDMAC_CNDC_NDE_DSCR_FETCH_DIS (0x0u << 0) /**< \brief (XDMAC_CNDC) Descriptor fetch is disabled */
#define   XDMAC_CNDC_NDE_DSCR_FETCH_EN (0x1u << 0) /**< \brief (XDMAC_CNDC) Descriptor fetch is enabled */
#define XDMAC_CNDC_NDSUP (0x1u << 1) /**< \brief (XDMAC_CNDC) Channel x Next Descriptor Source Update */
#define   XDMAC_CNDC_NDSUP_SRC_PARAMS_UNCHANGED (0x0u << 1) /**< \brief (XDMAC_CNDC) Source parameters remain unchanged. */
#define   XDMAC_CNDC_NDSUP_SRC_PARAMS_UPDATED (0x1u << 1) /**< \brief (XDMAC_CNDC) Source parameters are updated when the descriptor is retrieved. */
#define XDMAC_CNDC_NDDUP (0x1u << 2) /**< \brief (XDMAC_CNDC) Channel x Next Descriptor Destination Update */
#define   XDMAC_CNDC_NDDUP_DST_PARAMS_UNCHANGED (0x0u << 2) /**< \brief (XDMAC_CNDC) Destination parameters remain unchanged. */
#define   XDMAC_CNDC_NDDUP_DST_PARAMS_UPDATED (0x1u << 2) /**< \brief (XDMAC_CNDC) Destination parameters are updated when the descriptor is retrieved. */
#define XDMAC_CNDC_NDVIEW_Pos 3
#define XDMAC_CNDC_NDVIEW_Msk (0x3u << XDMAC_CNDC_NDVIEW_Pos) /**< \brief (XDMAC_CNDC) Channel x Next Descriptor View */
#define   XDMAC_CNDC_NDVIEW_NDV0 (0x0u << 3) /**< \brief (XDMAC_CNDC) Next Descriptor View 0 */
#define   XDMAC_CNDC_NDVIEW_NDV1 (0x1u << 3) /**< \brief (XDMAC_CNDC) Next Descriptor View 1 */
#define   XDMAC_CNDC_NDVIEW_NDV2 (0x2u << 3) /**< \brief (XDMAC_CNDC) Next Descriptor View 2 */
#define   XDMAC_CNDC_NDVIEW_NDV3 (0x3u << 3) /**< \brief (XDMAC_CNDC) Next Descriptor View 3 */
/* -------- XDMAC_CUBC : (XDMAC Offset: N/A) Channel Microblock Control Register -------- */
#define XDMAC_CUBC_UBLEN_Pos 0
#define XDMAC_CUBC_UBLEN_Msk (0xffffffu << XDMAC_CUBC_UBLEN_Pos) /**< \brief (XDMAC_CUBC) Channel x Microblock Length */
#define XDMAC_CUBC_UBLEN(value) ((XDMAC_CUBC_UBLEN_Msk & ((value) << XDMAC_CUBC_UBLEN_Pos)))
/* -------- XDMAC_CBC : (XDMAC Offset: N/A) Channel Block Control Register -------- */
#define XDMAC_CBC_BLEN_Pos 0
#define XDMAC_CBC_BLEN_Msk (0xfffu << XDMAC_CBC_BLEN_Pos) /**< \brief (XDMAC_CBC) Channel x Block Length */
#define XDMAC_CBC_BLEN(value) ((XDMAC_CBC_BLEN_Msk & ((value) << XDMAC_CBC_BLEN_Pos)))
/* -------- XDMAC_CC : (XDMAC Offset: N/A) Channel Configuration Register -------- */
#define XDMAC_CC_TYPE (0x1u << 0) /**< \brief (XDMAC_CC) Channel x Transfer Type */
#define   XDMAC_CC_TYPE_MEM_TRAN (0x0u << 0) /**< \brief (XDMAC_CC) Self triggered mode (Memory to Memory Transfer). */
#define   XDMAC_CC_TYPE_PER_TRAN (0x1u << 0) /**< \brief (XDMAC_CC) Synchronized mode (Peripheral to Memory or Memory to Peripheral Transfer). */
#define XDMAC_CC_MBSIZE_Pos 1
#define XDMAC_CC_MBSIZE_Msk (0x3u << XDMAC_CC_MBSIZE_Pos) /**< \brief (XDMAC_CC) Channel x Memory Burst Size */
#define   XDMAC_CC_MBSIZE_SINGLE (0x0u << 1) /**< \brief (XDMAC_CC) The memory burst size is set to one. */
#define   XDMAC_CC_MBSIZE_FOUR (0x1u << 1) /**< \brief (XDMAC_CC) The memory burst size is set to four. */
#define   XDMAC_CC_MBSIZE_EIGHT (0x2u << 1) /**< \brief (XDMAC_CC) The memory burst size is set to eight. */
#define   XDMAC_CC_MBSIZE_SIXTEEN (0x3u << 1) /**< \brief (XDMAC_CC) The memory burst size is set to sixteen. */
#define XDMAC_CC_DSYNC (0x1u << 4) /**< \brief (XDMAC_CC) Channel x Synchronization */
#define   XDMAC_CC_DSYNC_PER2MEM (0x0u << 4) /**< \brief (XDMAC_CC) Peripheral to Memory transfer */
#define   XDMAC_CC_DSYNC_MEM2PER (0x1u << 4) /**< \brief (XDMAC_CC) Memory to Peripheral transfer */
#define XDMAC_CC_PROT (0x1u << 5) /**< \brief (XDMAC_CC) Channel x Protection */
#define   XDMAC_CC_PROT_SEC (0x0u << 5) /**< \brief (XDMAC_CC) Channel is secured */
#define   XDMAC_CC_PROT_UNSEC (0x1u << 5) /**< \brief (XDMAC_CC) Channel is unsecured */
#define XDMAC_CC_SWREQ (0x1u << 6) /**< \brief (XDMAC_CC) Channel x Software Request Trigger */
#define   XDMAC_CC_SWREQ_HWR_CONNECTED (0x0u << 6) /**< \brief (XDMAC_CC) Hardware request line is connected to the peripheral request line. */
#define   XDMAC_CC_SWREQ_SWR_CONNECTED (0x1u << 6) /**< \brief (XDMAC_CC) Software request is connected to the peripheral request line. */
#define XDMAC_CC_MEMSET (0x1u << 7) /**< \brief (XDMAC_CC) Channel x Fill Block of memory */
#define   XDMAC_CC_MEMSET_NORMAL_MODE (0x0u << 7) /**< \brief (XDMAC_CC) Memset is not activated */
#define   XDMAC_CC_MEMSET_HW_MODE (0x1u << 7) /**< \brief (XDMAC_CC) Sets the block of memory pointed by DA field to the specified value. This operation is performed on 8, 16 or 32 bits basis. */
#define XDMAC_CC_CSIZE_Pos 8
#define XDMAC_CC_CSIZE_Msk (0x7u << XDMAC_CC_CSIZE_Pos) /**< \brief (XDMAC_CC) Channel x Chunk Size */
#define   XDMAC_CC_CSIZE_CHK_1 (0x0u << 8) /**< \brief (XDMAC_CC) 1 data transferred */
#define   XDMAC_CC_CSIZE_CHK_2 (0x1u << 8) /**< \brief (XDMAC_CC) 2 data transferred */
#define   XDMAC_CC_CSIZE_CHK_4 (0x2u << 8) /**< \brief (XDMAC_CC) 4 data transferred */
#define   XDMAC_CC_CSIZE_CHK_8 (0x3u << 8) /**< \brief (XDMAC_CC) 8 data transferred */
#define   XDMAC_CC_CSIZE_CHK_16 (0x4u << 8) /**< \brief (XDMAC_CC) 16 data transferred */
#define XDMAC_CC_DWIDTH_Pos 11
#define XDMAC_CC_DWIDTH_Msk (0x3u << XDMAC_CC_DWIDTH_Pos) /**< \brief (XDMAC_CC) Channel x Data Width */
#define   XDMAC_CC_DWIDTH_BYTE (0x0u << 11) /**< \brief (XDMAC_CC) The data size is set to 8 bits */
#define   XDMAC_CC_DWIDTH_HALFWORD (0x1u << 11) /**< \brief (XDMAC_CC) The data size is set to 16 bits */
#define   XDMAC_CC_DWIDTH_WORD (0x2u << 11) /**< \brief (XDMAC_CC) The data size is set to 32 bits */
#define   XDMAC_CC_DWIDTH_DWORD (0x3u << 11) /**< \brief (XDMAC_CC) The data size is set to 64 bits */
#define XDMAC_CC_SIF (0x1u << 13) /**< \brief (XDMAC_CC) Channel x Source Interface Identifier */
#define   XDMAC_CC_SIF_AHB_IF0 (0x0u << 13) /**< \brief (XDMAC_CC) The data is read through the system bus interface 0 */
#define   XDMAC_CC_SIF_AHB_IF1 (0x1u << 13) /**< \brief (XDMAC_CC) The data is read through the system bus interface 1 */
#define XDMAC_CC_DIF (0x1u << 14) /**< \brief (XDMAC_CC) Channel x Destination Interface Identifier */
#define   XDMAC_CC_DIF_AHB_IF0 (0x0u << 14) /**< \brief (XDMAC_CC) The data is written through the system bus interface 0 */
#define   XDMAC_CC_DIF_AHB_IF1 (0x1u << 14) /**< \brief (XDMAC_CC) The data is written though the system bus interface 1 */
#define XDMAC_CC_SAM_Pos 16
#define XDMAC_CC_SAM_Msk (0x3u << XDMAC_CC_SAM_Pos) /**< \brief (XDMAC_CC) Channel x Source Addressing Mode */
#define   XDMAC_CC_SAM_FIXED_AM (0x0u << 16) /**< \brief (XDMAC_CC) The address remains unchanged. */
#define   XDMAC_CC_SAM_INCREMENTED_AM (0x1u << 16) /**< \brief (XDMAC_CC) The addressing mode is incremented (the increment size is set to the data size). */
#define   XDMAC_CC_SAM_UBS_AM (0x2u << 16) /**< \brief (XDMAC_CC) The microblock stride is added at the microblock boundary. */
#define   XDMAC_CC_SAM_UBS_DS_AM (0x3u << 16) /**< \brief (XDMAC_CC) The microblock stride is added at the microblock boundary, the data stride is added at the data boundary. */
#define XDMAC_CC_DAM_Pos 18
#define XDMAC_CC_DAM_Msk (0x3u << XDMAC_CC_DAM_Pos) /**< \brief (XDMAC_CC) Channel x Destination Addressing Mode */
#define   XDMAC_CC_DAM_FIXED_AM (0x0u << 18) /**< \brief (XDMAC_CC) The address remains unchanged. */
#define   XDMAC_CC_DAM_INCREMENTED_AM (0x1u << 18) /**< \brief (XDMAC_CC) The addressing mode is incremented (the increment size is set to the data size). */
#define   XDMAC_CC_DAM_UBS_AM (0x2u << 18) /**< \brief (XDMAC_CC) The microblock stride is added at the microblock boundary. */
#define   XDMAC_CC_DAM_UBS_DS_AM (0x3u << 18) /**< \brief (XDMAC_CC) The microblock stride is added at the microblock boundary, the data stride is added at the data boundary. */
#define XDMAC_CC_INITD (0x1u << 21) /**< \brief (XDMAC_CC) Channel Initialization Terminated (this bit is read only) */
#define   XDMAC_CC_INITD_TERMINATED (0x0u << 21) /**< \brief (XDMAC_CC) Channel initialization is in progress. */
#define   XDMAC_CC_INITD_IN_PROGRESS (0x1u << 21) /**< \brief (XDMAC_CC) Channel initialization is completed. */
#define XDMAC_CC_RDIP (0x1u << 22) /**< \brief (XDMAC_CC) Read in Progress (this bit is read only) */
#define   XDMAC_CC_RDIP_DONE (0x0u << 22) /**< \brief (XDMAC_CC) No Active read transaction on the bus. */
#define   XDMAC_CC_RDIP_IN_PROGRESS (0x1u << 22) /**< \brief (XDMAC_CC) A read transaction is in progress. */
#define XDMAC_CC_WRIP (0x1u << 23) /**< \brief (XDMAC_CC) Write in Progress (this bit is read only) */
#define   XDMAC_CC_WRIP_DONE (0x0u << 23) /**< \brief (XDMAC_CC) No Active write transaction on the bus. */
#define   XDMAC_CC_WRIP_IN_PROGRESS (0x1u << 23) /**< \brief (XDMAC_CC) A Write transaction is in progress. */
#define XDMAC_CC_PERID_Pos 24
#define XDMAC_CC_PERID_Msk (0x7fu << XDMAC_CC_PERID_Pos) /**< \brief (XDMAC_CC) Channel x Peripheral Identifier */
#define XDMAC_CC_PERID(value) ((XDMAC_CC_PERID_Msk & ((value) << XDMAC_CC_PERID_Pos)))
/* -------- XDMAC_CDS_MSP : (XDMAC Offset: N/A) Channel Data Stride Memory Set Pattern -------- */
#define XDMAC_CDS_MSP_SDS_MSP_Pos 0
#define XDMAC_CDS_MSP_SDS_MSP_Msk (0xffffu << XDMAC_CDS_MSP_SDS_MSP_Pos) /**< \brief (XDMAC_CDS_MSP) Channel x Source Data stride or Memory Set Pattern */
#define XDMAC_CDS_MSP_SDS_MSP(value) ((XDMAC_CDS_MSP_SDS_MSP_Msk & ((value) << XDMAC_CDS_MSP_SDS_MSP_Pos)))
#define XDMAC_CDS_MSP_DDS_MSP_Pos 16
#define XDMAC_CDS_MSP_DDS_MSP_Msk (0xffffu << XDMAC_CDS_MSP_DDS_MSP_Pos) /**< \brief (XDMAC_CDS_MSP) Channel x Destination Data Stride or Memory Set Pattern */
#define XDMAC_CDS_MSP_DDS_MSP(value) ((XDMAC_CDS_MSP_DDS_MSP_Msk & ((value) << XDMAC_CDS_MSP_DDS_MSP_Pos)))
/* -------- XDMAC_CSUS : (XDMAC Offset: N/A) Channel Source Microblock Stride -------- */
#define XDMAC_CSUS_SUBS_Pos 0
#define XDMAC_CSUS_SUBS_Msk (0xffffffu << XDMAC_CSUS_SUBS_Pos) /**< \brief (XDMAC_CSUS) Channel x Source Microblock Stride */
#define XDMAC_CSUS_SUBS(value) ((XDMAC_CSUS_SUBS_Msk & ((value) << XDMAC_CSUS_SUBS_Pos)))
/* -------- XDMAC_CDUS : (XDMAC Offset: N/A) Channel Destination Microblock Stride -------- */
#define XDMAC_CDUS_DUBS_Pos 0
#define XDMAC_CDUS_DUBS_Msk (0xffffffu << XDMAC_CDUS_DUBS_Pos) /**< \brief (XDMAC_CDUS) Channel x Destination Microblock Stride */
#define XDMAC_CDUS_DUBS(value) ((XDMAC_CDUS_DUBS_Msk & ((value) << XDMAC_CDUS_DUBS_Pos)))
/* -------- XDMAC_VERSION : (XDMAC Offset: 0xFFC) XDMAC Version Register -------- */
#define XDMAC_VERSION_VERSION_Pos 0
#define XDMAC_VERSION_VERSION_Msk (0xfffu << XDMAC_VERSION_VERSION_Pos) /**< \brief (XDMAC_VERSION) Version of the Hardware Module */
#define XDMAC_VERSION_VERSION(value) ((XDMAC_VERSION_VERSION_Msk & ((value) << XDMAC_VERSION_VERSION_Pos)))
#define XDMAC_VERSION_MFN_Pos 16
#define XDMAC_VERSION_MFN_Msk (0x7u << XDMAC_VERSION_MFN_Pos) /**< \brief (XDMAC_VERSION) Metal Fix Number */
#define XDMAC_VERSION_MFN(value) ((XDMAC_VERSION_MFN_Msk & ((value) << XDMAC_VERSION_MFN_Pos)))

/*@}*/

/*@}*/

/* ************************************************************************** */
/*   REGISTER ACCESS DEFINITIONS FOR SAMA5D2 */
/* ************************************************************************** */
/** \addtogroup SAMA5D2_reg Registers Access Definitions */
/*@{*/

/* ========== Register definition for AXIMX peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_AXIMX_REMAP                 (0x00600000U) /**< \brief (AXIMX) AXI Matrix Remap Register */
#else
  #define REG_AXIMX_REMAP (*(__O uint32_t*)0x00600000U) /**< \brief (AXIMX) AXI Matrix Remap Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for L2CC peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_L2CC_IDR                     (0x00A00000U) /**< \brief (L2CC) Cache ID Register */
  #define REG_L2CC_TYPR                    (0x00A00004U) /**< \brief (L2CC) Cache Type Register */
  #define REG_L2CC_CR                      (0x00A00100U) /**< \brief (L2CC) Control Register */
  #define REG_L2CC_ACR                     (0x00A00104U) /**< \brief (L2CC) Auxiliary Control Register */
  #define REG_L2CC_TRCR                    (0x00A00108U) /**< \brief (L2CC) Tag RAM Control Register */
  #define REG_L2CC_DRCR                    (0x00A0010CU) /**< \brief (L2CC) Data RAM Control Register */
  #define REG_L2CC_ECR                     (0x00A00200U) /**< \brief (L2CC) Event Counter Control Register */
  #define REG_L2CC_ECFGR1                  (0x00A00204U) /**< \brief (L2CC) Event Counter 1 Configuration Register */
  #define REG_L2CC_ECFGR0                  (0x00A00208U) /**< \brief (L2CC) Event Counter 0 Configuration Register */
  #define REG_L2CC_EVR1                    (0x00A0020CU) /**< \brief (L2CC) Event Counter 1 Value Register */
  #define REG_L2CC_EVR0                    (0x00A00210U) /**< \brief (L2CC) Event Counter 0 Value Register */
  #define REG_L2CC_IMR                     (0x00A00214U) /**< \brief (L2CC) Interrupt Mask Register */
  #define REG_L2CC_MISR                    (0x00A00218U) /**< \brief (L2CC) Masked Interrupt Status Register */
  #define REG_L2CC_RISR                    (0x00A0021CU) /**< \brief (L2CC) Raw Interrupt Status Register */
  #define REG_L2CC_ICR                     (0x00A00220U) /**< \brief (L2CC) Interrupt Clear Register */
  #define REG_L2CC_CSR                     (0x00A00730U) /**< \brief (L2CC) Cache Synchronization Register */
  #define REG_L2CC_IPALR                   (0x00A00770U) /**< \brief (L2CC) Invalidate Physical Address Line Register */
  #define REG_L2CC_IWR                     (0x00A0077CU) /**< \brief (L2CC) Invalidate Way Register */
  #define REG_L2CC_CPALR                   (0x00A007B0U) /**< \brief (L2CC) Clean Physical Address Line Register */
  #define REG_L2CC_CIR                     (0x00A007B8U) /**< \brief (L2CC) Clean Index Register */
  #define REG_L2CC_CWR                     (0x00A007BCU) /**< \brief (L2CC) Clean Way Register */
  #define REG_L2CC_CIPALR                  (0x00A007F0U) /**< \brief (L2CC) Clean Invalidate Physical Address Line Register */
  #define REG_L2CC_CIIR                    (0x00A007F8U) /**< \brief (L2CC) Clean Invalidate Index Register */
  #define REG_L2CC_CIWR                    (0x00A007FCU) /**< \brief (L2CC) Clean Invalidate Way Register */
  #define REG_L2CC_DLKR                    (0x00A00900U) /**< \brief (L2CC) Data Lockdown Register */
  #define REG_L2CC_ILKR                    (0x00A00904U) /**< \brief (L2CC) Instruction Lockdown Register */
  #define REG_L2CC_DCR                     (0x00A00F40U) /**< \brief (L2CC) Debug Control Register */
  #define REG_L2CC_PCR                     (0x00A00F60U) /**< \brief (L2CC) Prefetch Control Register */
  #define REG_L2CC_POWCR                   (0x00A00F80U) /**< \brief (L2CC) Power Control Register */
#else
  #define REG_L2CC_IDR    (*(__I  uint32_t*)0x00A00000U) /**< \brief (L2CC) Cache ID Register */
  #define REG_L2CC_TYPR   (*(__I  uint32_t*)0x00A00004U) /**< \brief (L2CC) Cache Type Register */
  #define REG_L2CC_CR     (*(__IO uint32_t*)0x00A00100U) /**< \brief (L2CC) Control Register */
  #define REG_L2CC_ACR    (*(__IO uint32_t*)0x00A00104U) /**< \brief (L2CC) Auxiliary Control Register */
  #define REG_L2CC_TRCR   (*(__IO uint32_t*)0x00A00108U) /**< \brief (L2CC) Tag RAM Control Register */
  #define REG_L2CC_DRCR   (*(__IO uint32_t*)0x00A0010CU) /**< \brief (L2CC) Data RAM Control Register */
  #define REG_L2CC_ECR    (*(__IO uint32_t*)0x00A00200U) /**< \brief (L2CC) Event Counter Control Register */
  #define REG_L2CC_ECFGR1 (*(__IO uint32_t*)0x00A00204U) /**< \brief (L2CC) Event Counter 1 Configuration Register */
  #define REG_L2CC_ECFGR0 (*(__IO uint32_t*)0x00A00208U) /**< \brief (L2CC) Event Counter 0 Configuration Register */
  #define REG_L2CC_EVR1   (*(__IO uint32_t*)0x00A0020CU) /**< \brief (L2CC) Event Counter 1 Value Register */
  #define REG_L2CC_EVR0   (*(__IO uint32_t*)0x00A00210U) /**< \brief (L2CC) Event Counter 0 Value Register */
  #define REG_L2CC_IMR    (*(__IO uint32_t*)0x00A00214U) /**< \brief (L2CC) Interrupt Mask Register */
  #define REG_L2CC_MISR   (*(__I  uint32_t*)0x00A00218U) /**< \brief (L2CC) Masked Interrupt Status Register */
  #define REG_L2CC_RISR   (*(__I  uint32_t*)0x00A0021CU) /**< \brief (L2CC) Raw Interrupt Status Register */
  #define REG_L2CC_ICR    (*(__IO uint32_t*)0x00A00220U) /**< \brief (L2CC) Interrupt Clear Register */
  #define REG_L2CC_CSR    (*(__IO uint32_t*)0x00A00730U) /**< \brief (L2CC) Cache Synchronization Register */
  #define REG_L2CC_IPALR  (*(__IO uint32_t*)0x00A00770U) /**< \brief (L2CC) Invalidate Physical Address Line Register */
  #define REG_L2CC_IWR    (*(__IO uint32_t*)0x00A0077CU) /**< \brief (L2CC) Invalidate Way Register */
  #define REG_L2CC_CPALR  (*(__IO uint32_t*)0x00A007B0U) /**< \brief (L2CC) Clean Physical Address Line Register */
  #define REG_L2CC_CIR    (*(__IO uint32_t*)0x00A007B8U) /**< \brief (L2CC) Clean Index Register */
  #define REG_L2CC_CWR    (*(__IO uint32_t*)0x00A007BCU) /**< \brief (L2CC) Clean Way Register */
  #define REG_L2CC_CIPALR (*(__IO uint32_t*)0x00A007F0U) /**< \brief (L2CC) Clean Invalidate Physical Address Line Register */
  #define REG_L2CC_CIIR   (*(__IO uint32_t*)0x00A007F8U) /**< \brief (L2CC) Clean Invalidate Index Register */
  #define REG_L2CC_CIWR   (*(__IO uint32_t*)0x00A007FCU) /**< \brief (L2CC) Clean Invalidate Way Register */
  #define REG_L2CC_DLKR   (*(__IO uint32_t*)0x00A00900U) /**< \brief (L2CC) Data Lockdown Register */
  #define REG_L2CC_ILKR   (*(__IO uint32_t*)0x00A00904U) /**< \brief (L2CC) Instruction Lockdown Register */
  #define REG_L2CC_DCR    (*(__IO uint32_t*)0x00A00F40U) /**< \brief (L2CC) Debug Control Register */
  #define REG_L2CC_PCR    (*(__IO uint32_t*)0x00A00F60U) /**< \brief (L2CC) Prefetch Control Register */
  #define REG_L2CC_POWCR  (*(__IO uint32_t*)0x00A00F80U) /**< \brief (L2CC) Power Control Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for LCDC peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_LCDC_LCDCFG0                   (0xF0000000U) /**< \brief (LCDC) LCD Controller Configuration Register 0 */
  #define REG_LCDC_LCDCFG1                   (0xF0000004U) /**< \brief (LCDC) LCD Controller Configuration Register 1 */
  #define REG_LCDC_LCDCFG2                   (0xF0000008U) /**< \brief (LCDC) LCD Controller Configuration Register 2 */
  #define REG_LCDC_LCDCFG3                   (0xF000000CU) /**< \brief (LCDC) LCD Controller Configuration Register 3 */
  #define REG_LCDC_LCDCFG4                   (0xF0000010U) /**< \brief (LCDC) LCD Controller Configuration Register 4 */
  #define REG_LCDC_LCDCFG5                   (0xF0000014U) /**< \brief (LCDC) LCD Controller Configuration Register 5 */
  #define REG_LCDC_LCDCFG6                   (0xF0000018U) /**< \brief (LCDC) LCD Controller Configuration Register 6 */
  #define REG_LCDC_LCDEN                     (0xF0000020U) /**< \brief (LCDC) LCD Controller Enable Register */
  #define REG_LCDC_LCDDIS                    (0xF0000024U) /**< \brief (LCDC) LCD Controller Disable Register */
  #define REG_LCDC_LCDSR                     (0xF0000028U) /**< \brief (LCDC) LCD Controller Status Register */
  #define REG_LCDC_LCDIER                    (0xF000002CU) /**< \brief (LCDC) LCD Controller Interrupt Enable Register */
  #define REG_LCDC_LCDIDR                    (0xF0000030U) /**< \brief (LCDC) LCD Controller Interrupt Disable Register */
  #define REG_LCDC_LCDIMR                    (0xF0000034U) /**< \brief (LCDC) LCD Controller Interrupt Mask Register */
  #define REG_LCDC_LCDISR                    (0xF0000038U) /**< \brief (LCDC) LCD Controller Interrupt Status Register */
  #define REG_LCDC_ATTR                      (0xF000003CU) /**< \brief (LCDC) LCD Controller Attribute Register */
  #define REG_LCDC_BASECHER                  (0xF0000040U) /**< \brief (LCDC) Base Layer Channel Enable Register */
  #define REG_LCDC_BASECHDR                  (0xF0000044U) /**< \brief (LCDC) Base Layer Channel Disable Register */
  #define REG_LCDC_BASECHSR                  (0xF0000048U) /**< \brief (LCDC) Base Layer Channel Status Register */
  #define REG_LCDC_BASEIER                   (0xF000004CU) /**< \brief (LCDC) Base Layer Interrupt Enable Register */
  #define REG_LCDC_BASEIDR                   (0xF0000050U) /**< \brief (LCDC) Base Layer Interrupt Disabled Register */
  #define REG_LCDC_BASEIMR                   (0xF0000054U) /**< \brief (LCDC) Base Layer Interrupt Mask Register */
  #define REG_LCDC_BASEISR                   (0xF0000058U) /**< \brief (LCDC) Base Layer Interrupt Status Register */
  #define REG_LCDC_BASEHEAD                  (0xF000005CU) /**< \brief (LCDC) Base DMA Head Register */
  #define REG_LCDC_BASEADDR                  (0xF0000060U) /**< \brief (LCDC) Base DMA Address Register */
  #define REG_LCDC_BASECTRL                  (0xF0000064U) /**< \brief (LCDC) Base DMA Control Register */
  #define REG_LCDC_BASENEXT                  (0xF0000068U) /**< \brief (LCDC) Base DMA Next Register */
  #define REG_LCDC_BASECFG0                  (0xF000006CU) /**< \brief (LCDC) Base Layer Configuration Register 0 */
  #define REG_LCDC_BASECFG1                  (0xF0000070U) /**< \brief (LCDC) Base Layer Configuration Register 1 */
  #define REG_LCDC_BASECFG2                  (0xF0000074U) /**< \brief (LCDC) Base Layer Configuration Register 2 */
  #define REG_LCDC_BASECFG3                  (0xF0000078U) /**< \brief (LCDC) Base Layer Configuration Register 3 */
  #define REG_LCDC_BASECFG4                  (0xF000007CU) /**< \brief (LCDC) Base Layer Configuration Register 4 */
  #define REG_LCDC_BASECFG5                  (0xF0000080U) /**< \brief (LCDC) Base Layer Configuration Register 5 */
  #define REG_LCDC_BASECFG6                  (0xF0000084U) /**< \brief (LCDC) Base Layer Configuration Register 6 */
  #define REG_LCDC_OVR1CHER                  (0xF0000140U) /**< \brief (LCDC) Overlay 1 Channel Enable Register */
  #define REG_LCDC_OVR1CHDR                  (0xF0000144U) /**< \brief (LCDC) Overlay 1 Channel Disable Register */
  #define REG_LCDC_OVR1CHSR                  (0xF0000148U) /**< \brief (LCDC) Overlay 1 Channel Status Register */
  #define REG_LCDC_OVR1IER                   (0xF000014CU) /**< \brief (LCDC) Overlay 1 Interrupt Enable Register */
  #define REG_LCDC_OVR1IDR                   (0xF0000150U) /**< \brief (LCDC) Overlay 1 Interrupt Disable Register */
  #define REG_LCDC_OVR1IMR                   (0xF0000154U) /**< \brief (LCDC) Overlay 1 Interrupt Mask Register */
  #define REG_LCDC_OVR1ISR                   (0xF0000158U) /**< \brief (LCDC) Overlay 1 Interrupt Status Register */
  #define REG_LCDC_OVR1HEAD                  (0xF000015CU) /**< \brief (LCDC) Overlay 1 DMA Head Register */
  #define REG_LCDC_OVR1ADDR                  (0xF0000160U) /**< \brief (LCDC) Overlay 1 DMA Address Register */
  #define REG_LCDC_OVR1CTRL                  (0xF0000164U) /**< \brief (LCDC) Overlay 1 DMA Control Register */
  #define REG_LCDC_OVR1NEXT                  (0xF0000168U) /**< \brief (LCDC) Overlay 1 DMA Next Register */
  #define REG_LCDC_OVR1CFG0                  (0xF000016CU) /**< \brief (LCDC) Overlay 1 Configuration Register 0 */
  #define REG_LCDC_OVR1CFG1                  (0xF0000170U) /**< \brief (LCDC) Overlay 1 Configuration Register 1 */
  #define REG_LCDC_OVR1CFG2                  (0xF0000174U) /**< \brief (LCDC) Overlay 1 Configuration Register 2 */
  #define REG_LCDC_OVR1CFG3                  (0xF0000178U) /**< \brief (LCDC) Overlay 1 Configuration Register 3 */
  #define REG_LCDC_OVR1CFG4                  (0xF000017CU) /**< \brief (LCDC) Overlay 1 Configuration Register 4 */
  #define REG_LCDC_OVR1CFG5                  (0xF0000180U) /**< \brief (LCDC) Overlay 1 Configuration Register 5 */
  #define REG_LCDC_OVR1CFG6                  (0xF0000184U) /**< \brief (LCDC) Overlay 1 Configuration Register 6 */
  #define REG_LCDC_OVR1CFG7                  (0xF0000188U) /**< \brief (LCDC) Overlay 1 Configuration Register 7 */
  #define REG_LCDC_OVR1CFG8                  (0xF000018CU) /**< \brief (LCDC) Overlay 1 Configuration Register 8 */
  #define REG_LCDC_OVR1CFG9                  (0xF0000190U) /**< \brief (LCDC) Overlay 1 Configuration Register 9 */
  #define REG_LCDC_OVR2CHER                  (0xF0000240U) /**< \brief (LCDC) Overlay 2 Channel Enable Register */
  #define REG_LCDC_OVR2CHDR                  (0xF0000244U) /**< \brief (LCDC) Overlay 2 Channel Disable Register */
  #define REG_LCDC_OVR2CHSR                  (0xF0000248U) /**< \brief (LCDC) Overlay 2 Channel Status Register */
  #define REG_LCDC_OVR2IER                   (0xF000024CU) /**< \brief (LCDC) Overlay 2 Interrupt Enable Register */
  #define REG_LCDC_OVR2IDR                   (0xF0000250U) /**< \brief (LCDC) Overlay 2 Interrupt Disable Register */
  #define REG_LCDC_OVR2IMR                   (0xF0000254U) /**< \brief (LCDC) Overlay 2 Interrupt Mask Register */
  #define REG_LCDC_OVR2ISR                   (0xF0000258U) /**< \brief (LCDC) Overlay 2 Interrupt Status Register */
  #define REG_LCDC_OVR2HEAD                  (0xF000025CU) /**< \brief (LCDC) Overlay 2 DMA Head Register */
  #define REG_LCDC_OVR2ADDR                  (0xF0000260U) /**< \brief (LCDC) Overlay 2 DMA Address Register */
  #define REG_LCDC_OVR2CTRL                  (0xF0000264U) /**< \brief (LCDC) Overlay 2 DMA Control Register */
  #define REG_LCDC_OVR2NEXT                  (0xF0000268U) /**< \brief (LCDC) Overlay 2 DMA Next Register */
  #define REG_LCDC_OVR2CFG0                  (0xF000026CU) /**< \brief (LCDC) Overlay 2 Configuration Register 0 */
  #define REG_LCDC_OVR2CFG1                  (0xF0000270U) /**< \brief (LCDC) Overlay 2 Configuration Register 1 */
  #define REG_LCDC_OVR2CFG2                  (0xF0000274U) /**< \brief (LCDC) Overlay 2 Configuration Register 2 */
  #define REG_LCDC_OVR2CFG3                  (0xF0000278U) /**< \brief (LCDC) Overlay 2 Configuration Register 3 */
  #define REG_LCDC_OVR2CFG4                  (0xF000027CU) /**< \brief (LCDC) Overlay 2 Configuration Register 4 */
  #define REG_LCDC_OVR2CFG5                  (0xF0000280U) /**< \brief (LCDC) Overlay 2 Configuration Register 5 */
  #define REG_LCDC_OVR2CFG6                  (0xF0000284U) /**< \brief (LCDC) Overlay 2 Configuration Register 6 */
  #define REG_LCDC_OVR2CFG7                  (0xF0000288U) /**< \brief (LCDC) Overlay 2 Configuration Register 7 */
  #define REG_LCDC_OVR2CFG8                  (0xF000028CU) /**< \brief (LCDC) Overlay 2 Configuration Register 8 */
  #define REG_LCDC_OVR2CFG9                  (0xF0000290U) /**< \brief (LCDC) Overlay 2 Configuration Register 8 */
  #define REG_LCDC_HEOCHER                   (0xF0000340U) /**< \brief (LCDC) High End Overlay Channel Enable Register */
  #define REG_LCDC_HEOCHDR                   (0xF0000344U) /**< \brief (LCDC) High End Overlay Channel Disable Register */
  #define REG_LCDC_HEOCHSR                   (0xF0000348U) /**< \brief (LCDC) High End Overlay Channel Status Register */
  #define REG_LCDC_HEOIER                    (0xF000034CU) /**< \brief (LCDC) High End Overlay Interrupt Enable Register */
  #define REG_LCDC_HEOIDR                    (0xF0000350U) /**< \brief (LCDC) High End Overlay Interrupt Disable Register */
  #define REG_LCDC_HEOIMR                    (0xF0000354U) /**< \brief (LCDC) High End Overlay Interrupt Mask Register */
  #define REG_LCDC_HEOISR                    (0xF0000358U) /**< \brief (LCDC) High End Overlay Interrupt Status Register */
  #define REG_LCDC_HEOHEAD                   (0xF000035CU) /**< \brief (LCDC) High End Overlay DMA Head Register */
  #define REG_LCDC_HEOADDR                   (0xF0000360U) /**< \brief (LCDC) High End Overlay DMA Address Register */
  #define REG_LCDC_HEOCTRL                   (0xF0000364U) /**< \brief (LCDC) High End Overlay DMA Control Register */
  #define REG_LCDC_HEONEXT                   (0xF0000368U) /**< \brief (LCDC) High End Overlay DMA Next Register */
  #define REG_LCDC_HEOUHEAD                  (0xF000036CU) /**< \brief (LCDC) High End Overlay U-UV DMA Head Register */
  #define REG_LCDC_HEOUADDR                  (0xF0000370U) /**< \brief (LCDC) High End Overlay U-UV DMA Address Register */
  #define REG_LCDC_HEOUCTRL                  (0xF0000374U) /**< \brief (LCDC) High End Overlay U-UV DMA Control Register */
  #define REG_LCDC_HEOUNEXT                  (0xF0000378U) /**< \brief (LCDC) High End Overlay U-UV DMA Next Register */
  #define REG_LCDC_HEOVHEAD                  (0xF000037CU) /**< \brief (LCDC) High End Overlay V DMA Head Register */
  #define REG_LCDC_HEOVADDR                  (0xF0000380U) /**< \brief (LCDC) High End Overlay V DMA Address Register */
  #define REG_LCDC_HEOVCTRL                  (0xF0000384U) /**< \brief (LCDC) High End Overlay V DMA Control Register */
  #define REG_LCDC_HEOVNEXT                  (0xF0000388U) /**< \brief (LCDC) High End Overlay V DMA Next Register */
  #define REG_LCDC_HEOCFG0                   (0xF000038CU) /**< \brief (LCDC) High End Overlay Configuration Register 0 */
  #define REG_LCDC_HEOCFG1                   (0xF0000390U) /**< \brief (LCDC) High End Overlay Configuration Register 1 */
  #define REG_LCDC_HEOCFG2                   (0xF0000394U) /**< \brief (LCDC) High End Overlay Configuration Register 2 */
  #define REG_LCDC_HEOCFG3                   (0xF0000398U) /**< \brief (LCDC) High End Overlay Configuration Register 3 */
  #define REG_LCDC_HEOCFG4                   (0xF000039CU) /**< \brief (LCDC) High End Overlay Configuration Register 4 */
  #define REG_LCDC_HEOCFG5                   (0xF00003A0U) /**< \brief (LCDC) High End Overlay Configuration Register 5 */
  #define REG_LCDC_HEOCFG6                   (0xF00003A4U) /**< \brief (LCDC) High End Overlay Configuration Register 6 */
  #define REG_LCDC_HEOCFG7                   (0xF00003A8U) /**< \brief (LCDC) High End Overlay Configuration Register 7 */
  #define REG_LCDC_HEOCFG8                   (0xF00003ACU) /**< \brief (LCDC) High End Overlay Configuration Register 8 */
  #define REG_LCDC_HEOCFG9                   (0xF00003B0U) /**< \brief (LCDC) High End Overlay Configuration Register 9 */
  #define REG_LCDC_HEOCFG10                  (0xF00003B4U) /**< \brief (LCDC) High End Overlay Configuration Register 10 */
  #define REG_LCDC_HEOCFG11                  (0xF00003B8U) /**< \brief (LCDC) High End Overlay Configuration Register 11 */
  #define REG_LCDC_HEOCFG12                  (0xF00003BCU) /**< \brief (LCDC) High End Overlay Configuration Register 12 */
  #define REG_LCDC_HEOCFG13                  (0xF00003C0U) /**< \brief (LCDC) High End Overlay Configuration Register 13 */
  #define REG_LCDC_HEOCFG14                  (0xF00003C4U) /**< \brief (LCDC) High End Overlay Configuration Register 14 */
  #define REG_LCDC_HEOCFG15                  (0xF00003C8U) /**< \brief (LCDC) High End Overlay Configuration Register 15 */
  #define REG_LCDC_HEOCFG16                  (0xF00003CCU) /**< \brief (LCDC) High End Overlay Configuration Register 16 */
  #define REG_LCDC_HEOCFG17                  (0xF00003D0U) /**< \brief (LCDC) High End Overlay Configuration Register 17 */
  #define REG_LCDC_HEOCFG18                  (0xF00003D4U) /**< \brief (LCDC) High End Overlay Configuration Register 18 */
  #define REG_LCDC_HEOCFG19                  (0xF00003D8U) /**< \brief (LCDC) High End Overlay Configuration Register 19 */
  #define REG_LCDC_HEOCFG20                  (0xF00003DCU) /**< \brief (LCDC) High End Overlay Configuration Register 20 */
  #define REG_LCDC_HEOCFG21                  (0xF00003E0U) /**< \brief (LCDC) High End Overlay Configuration Register 21 */
  #define REG_LCDC_HEOCFG22                  (0xF00003E4U) /**< \brief (LCDC) High End Overlay Configuration Register 22 */
  #define REG_LCDC_HEOCFG23                  (0xF00003E8U) /**< \brief (LCDC) High End Overlay Configuration Register 23 */
  #define REG_LCDC_HEOCFG24                  (0xF00003ECU) /**< \brief (LCDC) High End Overlay Configuration Register 24 */
  #define REG_LCDC_HEOCFG25                  (0xF00003F0U) /**< \brief (LCDC) High End Overlay Configuration Register 25 */
  #define REG_LCDC_HEOCFG26                  (0xF00003F4U) /**< \brief (LCDC) High End Overlay Configuration Register 26 */
  #define REG_LCDC_HEOCFG27                  (0xF00003F8U) /**< \brief (LCDC) High End Overlay Configuration Register 27 */
  #define REG_LCDC_HEOCFG28                  (0xF00003FCU) /**< \brief (LCDC) High End Overlay Configuration Register 28 */
  #define REG_LCDC_HEOCFG29                  (0xF0000400U) /**< \brief (LCDC) High End Overlay Configuration Register 29 */
  #define REG_LCDC_HEOCFG30                  (0xF0000404U) /**< \brief (LCDC) High End Overlay Configuration Register 30 */
  #define REG_LCDC_HEOCFG31                  (0xF0000408U) /**< \brief (LCDC) High End Overlay Configuration Register 31 */
  #define REG_LCDC_HEOCFG32                  (0xF000040CU) /**< \brief (LCDC) High End Overlay Configuration Register 32 */
  #define REG_LCDC_HEOCFG33                  (0xF0000410U) /**< \brief (LCDC) High End Overlay Configuration Register 33 */
  #define REG_LCDC_HEOCFG34                  (0xF0000414U) /**< \brief (LCDC) High End Overlay Configuration Register 34 */
  #define REG_LCDC_HEOCFG35                  (0xF0000418U) /**< \brief (LCDC) High End Overlay Configuration Register 35 */
  #define REG_LCDC_HEOCFG36                  (0xF000041CU) /**< \brief (LCDC) High End Overlay Configuration Register 36 */
  #define REG_LCDC_HEOCFG37                  (0xF0000420U) /**< \brief (LCDC) High End Overlay Configuration Register 37 */
  #define REG_LCDC_HEOCFG38                  (0xF0000424U) /**< \brief (LCDC) High End Overlay Configuration Register 38 */
  #define REG_LCDC_HEOCFG39                  (0xF0000428U) /**< \brief (LCDC) High End Overlay Configuration Register 39 */
  #define REG_LCDC_HEOCFG40                  (0xF000042CU) /**< \brief (LCDC) High End Overlay Configuration Register 40 */
  #define REG_LCDC_HEOCFG41                  (0xF0000430U) /**< \brief (LCDC) High End Overlay Configuration Register 41 */
  #define REG_LCDC_PPCHER                    (0xF0000540U) /**< \brief (LCDC) Post Processing Channel Enable Register */
  #define REG_LCDC_PPCHDR                    (0xF0000544U) /**< \brief (LCDC) Post Processing Channel Disable Register */
  #define REG_LCDC_PPCHSR                    (0xF0000548U) /**< \brief (LCDC) Post Processing Channel Status Register */
  #define REG_LCDC_PPIER                     (0xF000054CU) /**< \brief (LCDC) Post Processing Interrupt Enable Register */
  #define REG_LCDC_PPIDR                     (0xF0000550U) /**< \brief (LCDC) Post Processing Interrupt Disable Register */
  #define REG_LCDC_PPIMR                     (0xF0000554U) /**< \brief (LCDC) Post Processing Interrupt Mask Register */
  #define REG_LCDC_PPISR                     (0xF0000558U) /**< \brief (LCDC) Post Processing Interrupt Status Register */
  #define REG_LCDC_PPHEAD                    (0xF000055CU) /**< \brief (LCDC) Post Processing Head Register */
  #define REG_LCDC_PPADDR                    (0xF0000560U) /**< \brief (LCDC) Post Processing Address Register */
  #define REG_LCDC_PPCTRL                    (0xF0000564U) /**< \brief (LCDC) Post Processing Control Register */
  #define REG_LCDC_PPNEXT                    (0xF0000568U) /**< \brief (LCDC) Post Processing Next Register */
  #define REG_LCDC_PPCFG0                    (0xF000056CU) /**< \brief (LCDC) Post Processing Configuration Register 0 */
  #define REG_LCDC_PPCFG1                    (0xF0000570U) /**< \brief (LCDC) Post Processing Configuration Register 1 */
  #define REG_LCDC_PPCFG2                    (0xF0000574U) /**< \brief (LCDC) Post Processing Configuration Register 2 */
  #define REG_LCDC_PPCFG3                    (0xF0000578U) /**< \brief (LCDC) Post Processing Configuration Register 3 */
  #define REG_LCDC_PPCFG4                    (0xF000057CU) /**< \brief (LCDC) Post Processing Configuration Register 4 */
  #define REG_LCDC_PPCFG5                    (0xF0000580U) /**< \brief (LCDC) Post Processing Configuration Register 5 */
  #define REG_LCDC_BASECLUT                  (0xF0000600U) /**< \brief (LCDC) Base CLUT Register */
  #define REG_LCDC_OVR1CLUT                  (0xF0000A00U) /**< \brief (LCDC) Overlay 1 CLUT Register */
  #define REG_LCDC_OVR2CLUT                  (0xF0000E00U) /**< \brief (LCDC) Overlay 2 CLUT Register */
  #define REG_LCDC_HEOCLUT                   (0xF0001200U) /**< \brief (LCDC) High End Overlay CLUT Register */
  #define REG_LCDC_ADDRSIZE                  (0xF0001FECU) /**< \brief (LCDC) Address Size Register */
  #define REG_LCDC_IPNAME                    (0xF0001FF0U) /**< \brief (LCDC) IP Name1 Register */
  #define REG_LCDC_FEATURES                  (0xF0001FF8U) /**< \brief (LCDC) Features Register */
  #define REG_LCDC_VERSION                   (0xF0001FFCU) /**< \brief (LCDC) Version Register */
#else
  #define REG_LCDC_LCDCFG0  (*(__IO uint32_t*)0xF0000000U) /**< \brief (LCDC) LCD Controller Configuration Register 0 */
  #define REG_LCDC_LCDCFG1  (*(__IO uint32_t*)0xF0000004U) /**< \brief (LCDC) LCD Controller Configuration Register 1 */
  #define REG_LCDC_LCDCFG2  (*(__IO uint32_t*)0xF0000008U) /**< \brief (LCDC) LCD Controller Configuration Register 2 */
  #define REG_LCDC_LCDCFG3  (*(__IO uint32_t*)0xF000000CU) /**< \brief (LCDC) LCD Controller Configuration Register 3 */
  #define REG_LCDC_LCDCFG4  (*(__IO uint32_t*)0xF0000010U) /**< \brief (LCDC) LCD Controller Configuration Register 4 */
  #define REG_LCDC_LCDCFG5  (*(__IO uint32_t*)0xF0000014U) /**< \brief (LCDC) LCD Controller Configuration Register 5 */
  #define REG_LCDC_LCDCFG6  (*(__IO uint32_t*)0xF0000018U) /**< \brief (LCDC) LCD Controller Configuration Register 6 */
  #define REG_LCDC_LCDEN    (*(__O  uint32_t*)0xF0000020U) /**< \brief (LCDC) LCD Controller Enable Register */
  #define REG_LCDC_LCDDIS   (*(__O  uint32_t*)0xF0000024U) /**< \brief (LCDC) LCD Controller Disable Register */
  #define REG_LCDC_LCDSR    (*(__I  uint32_t*)0xF0000028U) /**< \brief (LCDC) LCD Controller Status Register */
  #define REG_LCDC_LCDIER   (*(__O  uint32_t*)0xF000002CU) /**< \brief (LCDC) LCD Controller Interrupt Enable Register */
  #define REG_LCDC_LCDIDR   (*(__O  uint32_t*)0xF0000030U) /**< \brief (LCDC) LCD Controller Interrupt Disable Register */
  #define REG_LCDC_LCDIMR   (*(__I  uint32_t*)0xF0000034U) /**< \brief (LCDC) LCD Controller Interrupt Mask Register */
  #define REG_LCDC_LCDISR   (*(__I  uint32_t*)0xF0000038U) /**< \brief (LCDC) LCD Controller Interrupt Status Register */
  #define REG_LCDC_ATTR     (*(__O  uint32_t*)0xF000003CU) /**< \brief (LCDC) LCD Controller Attribute Register */
  #define REG_LCDC_BASECHER (*(__O  uint32_t*)0xF0000040U) /**< \brief (LCDC) Base Layer Channel Enable Register */
  #define REG_LCDC_BASECHDR (*(__O  uint32_t*)0xF0000044U) /**< \brief (LCDC) Base Layer Channel Disable Register */
  #define REG_LCDC_BASECHSR (*(__I  uint32_t*)0xF0000048U) /**< \brief (LCDC) Base Layer Channel Status Register */
  #define REG_LCDC_BASEIER  (*(__O  uint32_t*)0xF000004CU) /**< \brief (LCDC) Base Layer Interrupt Enable Register */
  #define REG_LCDC_BASEIDR  (*(__O  uint32_t*)0xF0000050U) /**< \brief (LCDC) Base Layer Interrupt Disabled Register */
  #define REG_LCDC_BASEIMR  (*(__I  uint32_t*)0xF0000054U) /**< \brief (LCDC) Base Layer Interrupt Mask Register */
  #define REG_LCDC_BASEISR  (*(__I  uint32_t*)0xF0000058U) /**< \brief (LCDC) Base Layer Interrupt Status Register */
  #define REG_LCDC_BASEHEAD (*(__IO uint32_t*)0xF000005CU) /**< \brief (LCDC) Base DMA Head Register */
  #define REG_LCDC_BASEADDR (*(__IO uint32_t*)0xF0000060U) /**< \brief (LCDC) Base DMA Address Register */
  #define REG_LCDC_BASECTRL (*(__IO uint32_t*)0xF0000064U) /**< \brief (LCDC) Base DMA Control Register */
  #define REG_LCDC_BASENEXT (*(__IO uint32_t*)0xF0000068U) /**< \brief (LCDC) Base DMA Next Register */
  #define REG_LCDC_BASECFG0 (*(__IO uint32_t*)0xF000006CU) /**< \brief (LCDC) Base Layer Configuration Register 0 */
  #define REG_LCDC_BASECFG1 (*(__IO uint32_t*)0xF0000070U) /**< \brief (LCDC) Base Layer Configuration Register 1 */
  #define REG_LCDC_BASECFG2 (*(__IO uint32_t*)0xF0000074U) /**< \brief (LCDC) Base Layer Configuration Register 2 */
  #define REG_LCDC_BASECFG3 (*(__IO uint32_t*)0xF0000078U) /**< \brief (LCDC) Base Layer Configuration Register 3 */
  #define REG_LCDC_BASECFG4 (*(__IO uint32_t*)0xF000007CU) /**< \brief (LCDC) Base Layer Configuration Register 4 */
  #define REG_LCDC_BASECFG5 (*(__IO uint32_t*)0xF0000080U) /**< \brief (LCDC) Base Layer Configuration Register 5 */
  #define REG_LCDC_BASECFG6 (*(__IO uint32_t*)0xF0000084U) /**< \brief (LCDC) Base Layer Configuration Register 6 */
  #define REG_LCDC_OVR1CHER (*(__O  uint32_t*)0xF0000140U) /**< \brief (LCDC) Overlay 1 Channel Enable Register */
  #define REG_LCDC_OVR1CHDR (*(__O  uint32_t*)0xF0000144U) /**< \brief (LCDC) Overlay 1 Channel Disable Register */
  #define REG_LCDC_OVR1CHSR (*(__I  uint32_t*)0xF0000148U) /**< \brief (LCDC) Overlay 1 Channel Status Register */
  #define REG_LCDC_OVR1IER  (*(__O  uint32_t*)0xF000014CU) /**< \brief (LCDC) Overlay 1 Interrupt Enable Register */
  #define REG_LCDC_OVR1IDR  (*(__O  uint32_t*)0xF0000150U) /**< \brief (LCDC) Overlay 1 Interrupt Disable Register */
  #define REG_LCDC_OVR1IMR  (*(__I  uint32_t*)0xF0000154U) /**< \brief (LCDC) Overlay 1 Interrupt Mask Register */
  #define REG_LCDC_OVR1ISR  (*(__I  uint32_t*)0xF0000158U) /**< \brief (LCDC) Overlay 1 Interrupt Status Register */
  #define REG_LCDC_OVR1HEAD (*(__IO uint32_t*)0xF000015CU) /**< \brief (LCDC) Overlay 1 DMA Head Register */
  #define REG_LCDC_OVR1ADDR (*(__IO uint32_t*)0xF0000160U) /**< \brief (LCDC) Overlay 1 DMA Address Register */
  #define REG_LCDC_OVR1CTRL (*(__IO uint32_t*)0xF0000164U) /**< \brief (LCDC) Overlay 1 DMA Control Register */
  #define REG_LCDC_OVR1NEXT (*(__IO uint32_t*)0xF0000168U) /**< \brief (LCDC) Overlay 1 DMA Next Register */
  #define REG_LCDC_OVR1CFG0 (*(__IO uint32_t*)0xF000016CU) /**< \brief (LCDC) Overlay 1 Configuration Register 0 */
  #define REG_LCDC_OVR1CFG1 (*(__IO uint32_t*)0xF0000170U) /**< \brief (LCDC) Overlay 1 Configuration Register 1 */
  #define REG_LCDC_OVR1CFG2 (*(__IO uint32_t*)0xF0000174U) /**< \brief (LCDC) Overlay 1 Configuration Register 2 */
  #define REG_LCDC_OVR1CFG3 (*(__IO uint32_t*)0xF0000178U) /**< \brief (LCDC) Overlay 1 Configuration Register 3 */
  #define REG_LCDC_OVR1CFG4 (*(__IO uint32_t*)0xF000017CU) /**< \brief (LCDC) Overlay 1 Configuration Register 4 */
  #define REG_LCDC_OVR1CFG5 (*(__IO uint32_t*)0xF0000180U) /**< \brief (LCDC) Overlay 1 Configuration Register 5 */
  #define REG_LCDC_OVR1CFG6 (*(__IO uint32_t*)0xF0000184U) /**< \brief (LCDC) Overlay 1 Configuration Register 6 */
  #define REG_LCDC_OVR1CFG7 (*(__IO uint32_t*)0xF0000188U) /**< \brief (LCDC) Overlay 1 Configuration Register 7 */
  #define REG_LCDC_OVR1CFG8 (*(__IO uint32_t*)0xF000018CU) /**< \brief (LCDC) Overlay 1 Configuration Register 8 */
  #define REG_LCDC_OVR1CFG9 (*(__IO uint32_t*)0xF0000190U) /**< \brief (LCDC) Overlay 1 Configuration Register 9 */
  #define REG_LCDC_OVR2CHER (*(__O  uint32_t*)0xF0000240U) /**< \brief (LCDC) Overlay 2 Channel Enable Register */
  #define REG_LCDC_OVR2CHDR (*(__O  uint32_t*)0xF0000244U) /**< \brief (LCDC) Overlay 2 Channel Disable Register */
  #define REG_LCDC_OVR2CHSR (*(__I  uint32_t*)0xF0000248U) /**< \brief (LCDC) Overlay 2 Channel Status Register */
  #define REG_LCDC_OVR2IER  (*(__O  uint32_t*)0xF000024CU) /**< \brief (LCDC) Overlay 2 Interrupt Enable Register */
  #define REG_LCDC_OVR2IDR  (*(__O  uint32_t*)0xF0000250U) /**< \brief (LCDC) Overlay 2 Interrupt Disable Register */
  #define REG_LCDC_OVR2IMR  (*(__I  uint32_t*)0xF0000254U) /**< \brief (LCDC) Overlay 2 Interrupt Mask Register */
  #define REG_LCDC_OVR2ISR  (*(__I  uint32_t*)0xF0000258U) /**< \brief (LCDC) Overlay 2 Interrupt Status Register */
  #define REG_LCDC_OVR2HEAD (*(__IO uint32_t*)0xF000025CU) /**< \brief (LCDC) Overlay 2 DMA Head Register */
  #define REG_LCDC_OVR2ADDR (*(__IO uint32_t*)0xF0000260U) /**< \brief (LCDC) Overlay 2 DMA Address Register */
  #define REG_LCDC_OVR2CTRL (*(__IO uint32_t*)0xF0000264U) /**< \brief (LCDC) Overlay 2 DMA Control Register */
  #define REG_LCDC_OVR2NEXT (*(__IO uint32_t*)0xF0000268U) /**< \brief (LCDC) Overlay 2 DMA Next Register */
  #define REG_LCDC_OVR2CFG0 (*(__IO uint32_t*)0xF000026CU) /**< \brief (LCDC) Overlay 2 Configuration Register 0 */
  #define REG_LCDC_OVR2CFG1 (*(__IO uint32_t*)0xF0000270U) /**< \brief (LCDC) Overlay 2 Configuration Register 1 */
  #define REG_LCDC_OVR2CFG2 (*(__IO uint32_t*)0xF0000274U) /**< \brief (LCDC) Overlay 2 Configuration Register 2 */
  #define REG_LCDC_OVR2CFG3 (*(__IO uint32_t*)0xF0000278U) /**< \brief (LCDC) Overlay 2 Configuration Register 3 */
  #define REG_LCDC_OVR2CFG4 (*(__IO uint32_t*)0xF000027CU) /**< \brief (LCDC) Overlay 2 Configuration Register 4 */
  #define REG_LCDC_OVR2CFG5 (*(__IO uint32_t*)0xF0000280U) /**< \brief (LCDC) Overlay 2 Configuration Register 5 */
  #define REG_LCDC_OVR2CFG6 (*(__IO uint32_t*)0xF0000284U) /**< \brief (LCDC) Overlay 2 Configuration Register 6 */
  #define REG_LCDC_OVR2CFG7 (*(__IO uint32_t*)0xF0000288U) /**< \brief (LCDC) Overlay 2 Configuration Register 7 */
  #define REG_LCDC_OVR2CFG8 (*(__IO uint32_t*)0xF000028CU) /**< \brief (LCDC) Overlay 2 Configuration Register 8 */
  #define REG_LCDC_OVR2CFG9 (*(__IO uint32_t*)0xF0000290U) /**< \brief (LCDC) Overlay 2 Configuration Register 8 */
  #define REG_LCDC_HEOCHER  (*(__O  uint32_t*)0xF0000340U) /**< \brief (LCDC) High End Overlay Channel Enable Register */
  #define REG_LCDC_HEOCHDR  (*(__O  uint32_t*)0xF0000344U) /**< \brief (LCDC) High End Overlay Channel Disable Register */
  #define REG_LCDC_HEOCHSR  (*(__I  uint32_t*)0xF0000348U) /**< \brief (LCDC) High End Overlay Channel Status Register */
  #define REG_LCDC_HEOIER   (*(__O  uint32_t*)0xF000034CU) /**< \brief (LCDC) High End Overlay Interrupt Enable Register */
  #define REG_LCDC_HEOIDR   (*(__O  uint32_t*)0xF0000350U) /**< \brief (LCDC) High End Overlay Interrupt Disable Register */
  #define REG_LCDC_HEOIMR   (*(__I  uint32_t*)0xF0000354U) /**< \brief (LCDC) High End Overlay Interrupt Mask Register */
  #define REG_LCDC_HEOISR   (*(__I  uint32_t*)0xF0000358U) /**< \brief (LCDC) High End Overlay Interrupt Status Register */
  #define REG_LCDC_HEOHEAD  (*(__IO uint32_t*)0xF000035CU) /**< \brief (LCDC) High End Overlay DMA Head Register */
  #define REG_LCDC_HEOADDR  (*(__IO uint32_t*)0xF0000360U) /**< \brief (LCDC) High End Overlay DMA Address Register */
  #define REG_LCDC_HEOCTRL  (*(__IO uint32_t*)0xF0000364U) /**< \brief (LCDC) High End Overlay DMA Control Register */
  #define REG_LCDC_HEONEXT  (*(__IO uint32_t*)0xF0000368U) /**< \brief (LCDC) High End Overlay DMA Next Register */
  #define REG_LCDC_HEOUHEAD (*(__IO uint32_t*)0xF000036CU) /**< \brief (LCDC) High End Overlay U-UV DMA Head Register */
  #define REG_LCDC_HEOUADDR (*(__IO uint32_t*)0xF0000370U) /**< \brief (LCDC) High End Overlay U-UV DMA Address Register */
  #define REG_LCDC_HEOUCTRL (*(__IO uint32_t*)0xF0000374U) /**< \brief (LCDC) High End Overlay U-UV DMA Control Register */
  #define REG_LCDC_HEOUNEXT (*(__IO uint32_t*)0xF0000378U) /**< \brief (LCDC) High End Overlay U-UV DMA Next Register */
  #define REG_LCDC_HEOVHEAD (*(__IO uint32_t*)0xF000037CU) /**< \brief (LCDC) High End Overlay V DMA Head Register */
  #define REG_LCDC_HEOVADDR (*(__IO uint32_t*)0xF0000380U) /**< \brief (LCDC) High End Overlay V DMA Address Register */
  #define REG_LCDC_HEOVCTRL (*(__IO uint32_t*)0xF0000384U) /**< \brief (LCDC) High End Overlay V DMA Control Register */
  #define REG_LCDC_HEOVNEXT (*(__IO uint32_t*)0xF0000388U) /**< \brief (LCDC) High End Overlay V DMA Next Register */
  #define REG_LCDC_HEOCFG0  (*(__IO uint32_t*)0xF000038CU) /**< \brief (LCDC) High End Overlay Configuration Register 0 */
  #define REG_LCDC_HEOCFG1  (*(__IO uint32_t*)0xF0000390U) /**< \brief (LCDC) High End Overlay Configuration Register 1 */
  #define REG_LCDC_HEOCFG2  (*(__IO uint32_t*)0xF0000394U) /**< \brief (LCDC) High End Overlay Configuration Register 2 */
  #define REG_LCDC_HEOCFG3  (*(__IO uint32_t*)0xF0000398U) /**< \brief (LCDC) High End Overlay Configuration Register 3 */
  #define REG_LCDC_HEOCFG4  (*(__IO uint32_t*)0xF000039CU) /**< \brief (LCDC) High End Overlay Configuration Register 4 */
  #define REG_LCDC_HEOCFG5  (*(__IO uint32_t*)0xF00003A0U) /**< \brief (LCDC) High End Overlay Configuration Register 5 */
  #define REG_LCDC_HEOCFG6  (*(__IO uint32_t*)0xF00003A4U) /**< \brief (LCDC) High End Overlay Configuration Register 6 */
  #define REG_LCDC_HEOCFG7  (*(__IO uint32_t*)0xF00003A8U) /**< \brief (LCDC) High End Overlay Configuration Register 7 */
  #define REG_LCDC_HEOCFG8  (*(__IO uint32_t*)0xF00003ACU) /**< \brief (LCDC) High End Overlay Configuration Register 8 */
  #define REG_LCDC_HEOCFG9  (*(__IO uint32_t*)0xF00003B0U) /**< \brief (LCDC) High End Overlay Configuration Register 9 */
  #define REG_LCDC_HEOCFG10 (*(__IO uint32_t*)0xF00003B4U) /**< \brief (LCDC) High End Overlay Configuration Register 10 */
  #define REG_LCDC_HEOCFG11 (*(__IO uint32_t*)0xF00003B8U) /**< \brief (LCDC) High End Overlay Configuration Register 11 */
  #define REG_LCDC_HEOCFG12 (*(__IO uint32_t*)0xF00003BCU) /**< \brief (LCDC) High End Overlay Configuration Register 12 */
  #define REG_LCDC_HEOCFG13 (*(__IO uint32_t*)0xF00003C0U) /**< \brief (LCDC) High End Overlay Configuration Register 13 */
  #define REG_LCDC_HEOCFG14 (*(__IO uint32_t*)0xF00003C4U) /**< \brief (LCDC) High End Overlay Configuration Register 14 */
  #define REG_LCDC_HEOCFG15 (*(__IO uint32_t*)0xF00003C8U) /**< \brief (LCDC) High End Overlay Configuration Register 15 */
  #define REG_LCDC_HEOCFG16 (*(__IO uint32_t*)0xF00003CCU) /**< \brief (LCDC) High End Overlay Configuration Register 16 */
  #define REG_LCDC_HEOCFG17 (*(__IO uint32_t*)0xF00003D0U) /**< \brief (LCDC) High End Overlay Configuration Register 17 */
  #define REG_LCDC_HEOCFG18 (*(__IO uint32_t*)0xF00003D4U) /**< \brief (LCDC) High End Overlay Configuration Register 18 */
  #define REG_LCDC_HEOCFG19 (*(__IO uint32_t*)0xF00003D8U) /**< \brief (LCDC) High End Overlay Configuration Register 19 */
  #define REG_LCDC_HEOCFG20 (*(__IO uint32_t*)0xF00003DCU) /**< \brief (LCDC) High End Overlay Configuration Register 20 */
  #define REG_LCDC_HEOCFG21 (*(__IO uint32_t*)0xF00003E0U) /**< \brief (LCDC) High End Overlay Configuration Register 21 */
  #define REG_LCDC_HEOCFG22 (*(__IO uint32_t*)0xF00003E4U) /**< \brief (LCDC) High End Overlay Configuration Register 22 */
  #define REG_LCDC_HEOCFG23 (*(__IO uint32_t*)0xF00003E8U) /**< \brief (LCDC) High End Overlay Configuration Register 23 */
  #define REG_LCDC_HEOCFG24 (*(__IO uint32_t*)0xF00003ECU) /**< \brief (LCDC) High End Overlay Configuration Register 24 */
  #define REG_LCDC_HEOCFG25 (*(__IO uint32_t*)0xF00003F0U) /**< \brief (LCDC) High End Overlay Configuration Register 25 */
  #define REG_LCDC_HEOCFG26 (*(__IO uint32_t*)0xF00003F4U) /**< \brief (LCDC) High End Overlay Configuration Register 26 */
  #define REG_LCDC_HEOCFG27 (*(__IO uint32_t*)0xF00003F8U) /**< \brief (LCDC) High End Overlay Configuration Register 27 */
  #define REG_LCDC_HEOCFG28 (*(__IO uint32_t*)0xF00003FCU) /**< \brief (LCDC) High End Overlay Configuration Register 28 */
  #define REG_LCDC_HEOCFG29 (*(__IO uint32_t*)0xF0000400U) /**< \brief (LCDC) High End Overlay Configuration Register 29 */
  #define REG_LCDC_HEOCFG30 (*(__IO uint32_t*)0xF0000404U) /**< \brief (LCDC) High End Overlay Configuration Register 30 */
  #define REG_LCDC_HEOCFG31 (*(__IO uint32_t*)0xF0000408U) /**< \brief (LCDC) High End Overlay Configuration Register 31 */
  #define REG_LCDC_HEOCFG32 (*(__IO uint32_t*)0xF000040CU) /**< \brief (LCDC) High End Overlay Configuration Register 32 */
  #define REG_LCDC_HEOCFG33 (*(__IO uint32_t*)0xF0000410U) /**< \brief (LCDC) High End Overlay Configuration Register 33 */
  #define REG_LCDC_HEOCFG34 (*(__IO uint32_t*)0xF0000414U) /**< \brief (LCDC) High End Overlay Configuration Register 34 */
  #define REG_LCDC_HEOCFG35 (*(__IO uint32_t*)0xF0000418U) /**< \brief (LCDC) High End Overlay Configuration Register 35 */
  #define REG_LCDC_HEOCFG36 (*(__IO uint32_t*)0xF000041CU) /**< \brief (LCDC) High End Overlay Configuration Register 36 */
  #define REG_LCDC_HEOCFG37 (*(__IO uint32_t*)0xF0000420U) /**< \brief (LCDC) High End Overlay Configuration Register 37 */
  #define REG_LCDC_HEOCFG38 (*(__IO uint32_t*)0xF0000424U) /**< \brief (LCDC) High End Overlay Configuration Register 38 */
  #define REG_LCDC_HEOCFG39 (*(__IO uint32_t*)0xF0000428U) /**< \brief (LCDC) High End Overlay Configuration Register 39 */
  #define REG_LCDC_HEOCFG40 (*(__IO uint32_t*)0xF000042CU) /**< \brief (LCDC) High End Overlay Configuration Register 40 */
  #define REG_LCDC_HEOCFG41 (*(__IO uint32_t*)0xF0000430U) /**< \brief (LCDC) High End Overlay Configuration Register 41 */
  #define REG_LCDC_PPCHER   (*(__O  uint32_t*)0xF0000540U) /**< \brief (LCDC) Post Processing Channel Enable Register */
  #define REG_LCDC_PPCHDR   (*(__O  uint32_t*)0xF0000544U) /**< \brief (LCDC) Post Processing Channel Disable Register */
  #define REG_LCDC_PPCHSR   (*(__I  uint32_t*)0xF0000548U) /**< \brief (LCDC) Post Processing Channel Status Register */
  #define REG_LCDC_PPIER    (*(__O  uint32_t*)0xF000054CU) /**< \brief (LCDC) Post Processing Interrupt Enable Register */
  #define REG_LCDC_PPIDR    (*(__O  uint32_t*)0xF0000550U) /**< \brief (LCDC) Post Processing Interrupt Disable Register */
  #define REG_LCDC_PPIMR    (*(__I  uint32_t*)0xF0000554U) /**< \brief (LCDC) Post Processing Interrupt Mask Register */
  #define REG_LCDC_PPISR    (*(__I  uint32_t*)0xF0000558U) /**< \brief (LCDC) Post Processing Interrupt Status Register */
  #define REG_LCDC_PPHEAD   (*(__IO uint32_t*)0xF000055CU) /**< \brief (LCDC) Post Processing Head Register */
  #define REG_LCDC_PPADDR   (*(__IO uint32_t*)0xF0000560U) /**< \brief (LCDC) Post Processing Address Register */
  #define REG_LCDC_PPCTRL   (*(__IO uint32_t*)0xF0000564U) /**< \brief (LCDC) Post Processing Control Register */
  #define REG_LCDC_PPNEXT   (*(__IO uint32_t*)0xF0000568U) /**< \brief (LCDC) Post Processing Next Register */
  #define REG_LCDC_PPCFG0   (*(__IO uint32_t*)0xF000056CU) /**< \brief (LCDC) Post Processing Configuration Register 0 */
  #define REG_LCDC_PPCFG1   (*(__IO uint32_t*)0xF0000570U) /**< \brief (LCDC) Post Processing Configuration Register 1 */
  #define REG_LCDC_PPCFG2   (*(__IO uint32_t*)0xF0000574U) /**< \brief (LCDC) Post Processing Configuration Register 2 */
  #define REG_LCDC_PPCFG3   (*(__IO uint32_t*)0xF0000578U) /**< \brief (LCDC) Post Processing Configuration Register 3 */
  #define REG_LCDC_PPCFG4   (*(__IO uint32_t*)0xF000057CU) /**< \brief (LCDC) Post Processing Configuration Register 4 */
  #define REG_LCDC_PPCFG5   (*(__IO uint32_t*)0xF0000580U) /**< \brief (LCDC) Post Processing Configuration Register 5 */
  #define REG_LCDC_BASECLUT (*(__IO uint32_t*)0xF0000600U) /**< \brief (LCDC) Base CLUT Register */
  #define REG_LCDC_OVR1CLUT (*(__IO uint32_t*)0xF0000A00U) /**< \brief (LCDC) Overlay 1 CLUT Register */
  #define REG_LCDC_OVR2CLUT (*(__IO uint32_t*)0xF0000E00U) /**< \brief (LCDC) Overlay 2 CLUT Register */
  #define REG_LCDC_HEOCLUT  (*(__IO uint32_t*)0xF0001200U) /**< \brief (LCDC) High End Overlay CLUT Register */
  #define REG_LCDC_ADDRSIZE (*(__I  uint32_t*)0xF0001FECU) /**< \brief (LCDC) Address Size Register */
  #define REG_LCDC_IPNAME   (*(__I  uint32_t*)0xF0001FF0U) /**< \brief (LCDC) IP Name1 Register */
  #define REG_LCDC_FEATURES (*(__I  uint32_t*)0xF0001FF8U) /**< \brief (LCDC) Features Register */
  #define REG_LCDC_VERSION  (*(__I  uint32_t*)0xF0001FFCU) /**< \brief (LCDC) Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for XDMAC1 peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_XDMAC1_GTYPE                      (0xF0004000U) /**< \brief (XDMAC1) Global Type Register */
  #define REG_XDMAC1_GCFG                       (0xF0004004U) /**< \brief (XDMAC1) Global Configuration Register */
  #define REG_XDMAC1_GWAC                       (0xF0004008U) /**< \brief (XDMAC1) Global Weighted Arbiter Configuration Register */
  #define REG_XDMAC1_GIE                        (0xF000400CU) /**< \brief (XDMAC1) Global Interrupt Enable Register */
  #define REG_XDMAC1_GID                        (0xF0004010U) /**< \brief (XDMAC1) Global Interrupt Disable Register */
  #define REG_XDMAC1_GIM                        (0xF0004014U) /**< \brief (XDMAC1) Global Interrupt Mask Register */
  #define REG_XDMAC1_GIS                        (0xF0004018U) /**< \brief (XDMAC1) Global Interrupt Status Register */
  #define REG_XDMAC1_GE                         (0xF000401CU) /**< \brief (XDMAC1) Global Channel Enable Register */
  #define REG_XDMAC1_GD                         (0xF0004020U) /**< \brief (XDMAC1) Global Channel Disable Register */
  #define REG_XDMAC1_GS                         (0xF0004024U) /**< \brief (XDMAC1) Global Channel Status Register */
  #define REG_XDMAC1_GRS                        (0xF0004028U) /**< \brief (XDMAC1) Global Channel Read Suspend Register */
  #define REG_XDMAC1_GWS                        (0xF000402CU) /**< \brief (XDMAC1) Global Channel Write Suspend Register */
  #define REG_XDMAC1_GRWS                       (0xF0004030U) /**< \brief (XDMAC1) Global Channel Read Write Suspend Register */
  #define REG_XDMAC1_GRWR                       (0xF0004034U) /**< \brief (XDMAC1) Global Channel Read Write Resume Register */
  #define REG_XDMAC1_GSWR                       (0xF0004038U) /**< \brief (XDMAC1) Global Channel Software Request Register */
  #define REG_XDMAC1_GSWS                       (0xF000403CU) /**< \brief (XDMAC1) Global Channel Software Request Status Register */
  #define REG_XDMAC1_GSWF                       (0xF0004040U) /**< \brief (XDMAC1) Global Channel Software Flush Request Register */
  #define REG_XDMAC1_CIE0                       (0xF0004050U) /**< \brief (XDMAC1) Channel Interrupt Enable Register (chid = 0) */
  #define REG_XDMAC1_CID0                       (0xF0004054U) /**< \brief (XDMAC1) Channel Interrupt Disable Register (chid = 0) */
  #define REG_XDMAC1_CIM0                       (0xF0004058U) /**< \brief (XDMAC1) Channel Interrupt Mask Register (chid = 0) */
  #define REG_XDMAC1_CIS0                       (0xF000405CU) /**< \brief (XDMAC1) Channel Interrupt Status Register (chid = 0) */
  #define REG_XDMAC1_CSA0                       (0xF0004060U) /**< \brief (XDMAC1) Channel Source Address Register (chid = 0) */
  #define REG_XDMAC1_CDA0                       (0xF0004064U) /**< \brief (XDMAC1) Channel Destination Address Register (chid = 0) */
  #define REG_XDMAC1_CNDA0                      (0xF0004068U) /**< \brief (XDMAC1) Channel Next Descriptor Address Register (chid = 0) */
  #define REG_XDMAC1_CNDC0                      (0xF000406CU) /**< \brief (XDMAC1) Channel Next Descriptor Control Register (chid = 0) */
  #define REG_XDMAC1_CUBC0                      (0xF0004070U) /**< \brief (XDMAC1) Channel Microblock Control Register (chid = 0) */
  #define REG_XDMAC1_CBC0                       (0xF0004074U) /**< \brief (XDMAC1) Channel Block Control Register (chid = 0) */
  #define REG_XDMAC1_CC0                        (0xF0004078U) /**< \brief (XDMAC1) Channel Configuration Register (chid = 0) */
  #define REG_XDMAC1_CDS_MSP0                   (0xF000407CU) /**< \brief (XDMAC1) Channel Data Stride Memory Set Pattern (chid = 0) */
  #define REG_XDMAC1_CSUS0                      (0xF0004080U) /**< \brief (XDMAC1) Channel Source Microblock Stride (chid = 0) */
  #define REG_XDMAC1_CDUS0                      (0xF0004084U) /**< \brief (XDMAC1) Channel Destination Microblock Stride (chid = 0) */
  #define REG_XDMAC1_CIE1                       (0xF0004090U) /**< \brief (XDMAC1) Channel Interrupt Enable Register (chid = 1) */
  #define REG_XDMAC1_CID1                       (0xF0004094U) /**< \brief (XDMAC1) Channel Interrupt Disable Register (chid = 1) */
  #define REG_XDMAC1_CIM1                       (0xF0004098U) /**< \brief (XDMAC1) Channel Interrupt Mask Register (chid = 1) */
  #define REG_XDMAC1_CIS1                       (0xF000409CU) /**< \brief (XDMAC1) Channel Interrupt Status Register (chid = 1) */
  #define REG_XDMAC1_CSA1                       (0xF00040A0U) /**< \brief (XDMAC1) Channel Source Address Register (chid = 1) */
  #define REG_XDMAC1_CDA1                       (0xF00040A4U) /**< \brief (XDMAC1) Channel Destination Address Register (chid = 1) */
  #define REG_XDMAC1_CNDA1                      (0xF00040A8U) /**< \brief (XDMAC1) Channel Next Descriptor Address Register (chid = 1) */
  #define REG_XDMAC1_CNDC1                      (0xF00040ACU) /**< \brief (XDMAC1) Channel Next Descriptor Control Register (chid = 1) */
  #define REG_XDMAC1_CUBC1                      (0xF00040B0U) /**< \brief (XDMAC1) Channel Microblock Control Register (chid = 1) */
  #define REG_XDMAC1_CBC1                       (0xF00040B4U) /**< \brief (XDMAC1) Channel Block Control Register (chid = 1) */
  #define REG_XDMAC1_CC1                        (0xF00040B8U) /**< \brief (XDMAC1) Channel Configuration Register (chid = 1) */
  #define REG_XDMAC1_CDS_MSP1                   (0xF00040BCU) /**< \brief (XDMAC1) Channel Data Stride Memory Set Pattern (chid = 1) */
  #define REG_XDMAC1_CSUS1                      (0xF00040C0U) /**< \brief (XDMAC1) Channel Source Microblock Stride (chid = 1) */
  #define REG_XDMAC1_CDUS1                      (0xF00040C4U) /**< \brief (XDMAC1) Channel Destination Microblock Stride (chid = 1) */
  #define REG_XDMAC1_CIE2                       (0xF00040D0U) /**< \brief (XDMAC1) Channel Interrupt Enable Register (chid = 2) */
  #define REG_XDMAC1_CID2                       (0xF00040D4U) /**< \brief (XDMAC1) Channel Interrupt Disable Register (chid = 2) */
  #define REG_XDMAC1_CIM2                       (0xF00040D8U) /**< \brief (XDMAC1) Channel Interrupt Mask Register (chid = 2) */
  #define REG_XDMAC1_CIS2                       (0xF00040DCU) /**< \brief (XDMAC1) Channel Interrupt Status Register (chid = 2) */
  #define REG_XDMAC1_CSA2                       (0xF00040E0U) /**< \brief (XDMAC1) Channel Source Address Register (chid = 2) */
  #define REG_XDMAC1_CDA2                       (0xF00040E4U) /**< \brief (XDMAC1) Channel Destination Address Register (chid = 2) */
  #define REG_XDMAC1_CNDA2                      (0xF00040E8U) /**< \brief (XDMAC1) Channel Next Descriptor Address Register (chid = 2) */
  #define REG_XDMAC1_CNDC2                      (0xF00040ECU) /**< \brief (XDMAC1) Channel Next Descriptor Control Register (chid = 2) */
  #define REG_XDMAC1_CUBC2                      (0xF00040F0U) /**< \brief (XDMAC1) Channel Microblock Control Register (chid = 2) */
  #define REG_XDMAC1_CBC2                       (0xF00040F4U) /**< \brief (XDMAC1) Channel Block Control Register (chid = 2) */
  #define REG_XDMAC1_CC2                        (0xF00040F8U) /**< \brief (XDMAC1) Channel Configuration Register (chid = 2) */
  #define REG_XDMAC1_CDS_MSP2                   (0xF00040FCU) /**< \brief (XDMAC1) Channel Data Stride Memory Set Pattern (chid = 2) */
  #define REG_XDMAC1_CSUS2                      (0xF0004100U) /**< \brief (XDMAC1) Channel Source Microblock Stride (chid = 2) */
  #define REG_XDMAC1_CDUS2                      (0xF0004104U) /**< \brief (XDMAC1) Channel Destination Microblock Stride (chid = 2) */
  #define REG_XDMAC1_CIE3                       (0xF0004110U) /**< \brief (XDMAC1) Channel Interrupt Enable Register (chid = 3) */
  #define REG_XDMAC1_CID3                       (0xF0004114U) /**< \brief (XDMAC1) Channel Interrupt Disable Register (chid = 3) */
  #define REG_XDMAC1_CIM3                       (0xF0004118U) /**< \brief (XDMAC1) Channel Interrupt Mask Register (chid = 3) */
  #define REG_XDMAC1_CIS3                       (0xF000411CU) /**< \brief (XDMAC1) Channel Interrupt Status Register (chid = 3) */
  #define REG_XDMAC1_CSA3                       (0xF0004120U) /**< \brief (XDMAC1) Channel Source Address Register (chid = 3) */
  #define REG_XDMAC1_CDA3                       (0xF0004124U) /**< \brief (XDMAC1) Channel Destination Address Register (chid = 3) */
  #define REG_XDMAC1_CNDA3                      (0xF0004128U) /**< \brief (XDMAC1) Channel Next Descriptor Address Register (chid = 3) */
  #define REG_XDMAC1_CNDC3                      (0xF000412CU) /**< \brief (XDMAC1) Channel Next Descriptor Control Register (chid = 3) */
  #define REG_XDMAC1_CUBC3                      (0xF0004130U) /**< \brief (XDMAC1) Channel Microblock Control Register (chid = 3) */
  #define REG_XDMAC1_CBC3                       (0xF0004134U) /**< \brief (XDMAC1) Channel Block Control Register (chid = 3) */
  #define REG_XDMAC1_CC3                        (0xF0004138U) /**< \brief (XDMAC1) Channel Configuration Register (chid = 3) */
  #define REG_XDMAC1_CDS_MSP3                   (0xF000413CU) /**< \brief (XDMAC1) Channel Data Stride Memory Set Pattern (chid = 3) */
  #define REG_XDMAC1_CSUS3                      (0xF0004140U) /**< \brief (XDMAC1) Channel Source Microblock Stride (chid = 3) */
  #define REG_XDMAC1_CDUS3                      (0xF0004144U) /**< \brief (XDMAC1) Channel Destination Microblock Stride (chid = 3) */
  #define REG_XDMAC1_CIE4                       (0xF0004150U) /**< \brief (XDMAC1) Channel Interrupt Enable Register (chid = 4) */
  #define REG_XDMAC1_CID4                       (0xF0004154U) /**< \brief (XDMAC1) Channel Interrupt Disable Register (chid = 4) */
  #define REG_XDMAC1_CIM4                       (0xF0004158U) /**< \brief (XDMAC1) Channel Interrupt Mask Register (chid = 4) */
  #define REG_XDMAC1_CIS4                       (0xF000415CU) /**< \brief (XDMAC1) Channel Interrupt Status Register (chid = 4) */
  #define REG_XDMAC1_CSA4                       (0xF0004160U) /**< \brief (XDMAC1) Channel Source Address Register (chid = 4) */
  #define REG_XDMAC1_CDA4                       (0xF0004164U) /**< \brief (XDMAC1) Channel Destination Address Register (chid = 4) */
  #define REG_XDMAC1_CNDA4                      (0xF0004168U) /**< \brief (XDMAC1) Channel Next Descriptor Address Register (chid = 4) */
  #define REG_XDMAC1_CNDC4                      (0xF000416CU) /**< \brief (XDMAC1) Channel Next Descriptor Control Register (chid = 4) */
  #define REG_XDMAC1_CUBC4                      (0xF0004170U) /**< \brief (XDMAC1) Channel Microblock Control Register (chid = 4) */
  #define REG_XDMAC1_CBC4                       (0xF0004174U) /**< \brief (XDMAC1) Channel Block Control Register (chid = 4) */
  #define REG_XDMAC1_CC4                        (0xF0004178U) /**< \brief (XDMAC1) Channel Configuration Register (chid = 4) */
  #define REG_XDMAC1_CDS_MSP4                   (0xF000417CU) /**< \brief (XDMAC1) Channel Data Stride Memory Set Pattern (chid = 4) */
  #define REG_XDMAC1_CSUS4                      (0xF0004180U) /**< \brief (XDMAC1) Channel Source Microblock Stride (chid = 4) */
  #define REG_XDMAC1_CDUS4                      (0xF0004184U) /**< \brief (XDMAC1) Channel Destination Microblock Stride (chid = 4) */
  #define REG_XDMAC1_CIE5                       (0xF0004190U) /**< \brief (XDMAC1) Channel Interrupt Enable Register (chid = 5) */
  #define REG_XDMAC1_CID5                       (0xF0004194U) /**< \brief (XDMAC1) Channel Interrupt Disable Register (chid = 5) */
  #define REG_XDMAC1_CIM5                       (0xF0004198U) /**< \brief (XDMAC1) Channel Interrupt Mask Register (chid = 5) */
  #define REG_XDMAC1_CIS5                       (0xF000419CU) /**< \brief (XDMAC1) Channel Interrupt Status Register (chid = 5) */
  #define REG_XDMAC1_CSA5                       (0xF00041A0U) /**< \brief (XDMAC1) Channel Source Address Register (chid = 5) */
  #define REG_XDMAC1_CDA5                       (0xF00041A4U) /**< \brief (XDMAC1) Channel Destination Address Register (chid = 5) */
  #define REG_XDMAC1_CNDA5                      (0xF00041A8U) /**< \brief (XDMAC1) Channel Next Descriptor Address Register (chid = 5) */
  #define REG_XDMAC1_CNDC5                      (0xF00041ACU) /**< \brief (XDMAC1) Channel Next Descriptor Control Register (chid = 5) */
  #define REG_XDMAC1_CUBC5                      (0xF00041B0U) /**< \brief (XDMAC1) Channel Microblock Control Register (chid = 5) */
  #define REG_XDMAC1_CBC5                       (0xF00041B4U) /**< \brief (XDMAC1) Channel Block Control Register (chid = 5) */
  #define REG_XDMAC1_CC5                        (0xF00041B8U) /**< \brief (XDMAC1) Channel Configuration Register (chid = 5) */
  #define REG_XDMAC1_CDS_MSP5                   (0xF00041BCU) /**< \brief (XDMAC1) Channel Data Stride Memory Set Pattern (chid = 5) */
  #define REG_XDMAC1_CSUS5                      (0xF00041C0U) /**< \brief (XDMAC1) Channel Source Microblock Stride (chid = 5) */
  #define REG_XDMAC1_CDUS5                      (0xF00041C4U) /**< \brief (XDMAC1) Channel Destination Microblock Stride (chid = 5) */
  #define REG_XDMAC1_CIE6                       (0xF00041D0U) /**< \brief (XDMAC1) Channel Interrupt Enable Register (chid = 6) */
  #define REG_XDMAC1_CID6                       (0xF00041D4U) /**< \brief (XDMAC1) Channel Interrupt Disable Register (chid = 6) */
  #define REG_XDMAC1_CIM6                       (0xF00041D8U) /**< \brief (XDMAC1) Channel Interrupt Mask Register (chid = 6) */
  #define REG_XDMAC1_CIS6                       (0xF00041DCU) /**< \brief (XDMAC1) Channel Interrupt Status Register (chid = 6) */
  #define REG_XDMAC1_CSA6                       (0xF00041E0U) /**< \brief (XDMAC1) Channel Source Address Register (chid = 6) */
  #define REG_XDMAC1_CDA6                       (0xF00041E4U) /**< \brief (XDMAC1) Channel Destination Address Register (chid = 6) */
  #define REG_XDMAC1_CNDA6                      (0xF00041E8U) /**< \brief (XDMAC1) Channel Next Descriptor Address Register (chid = 6) */
  #define REG_XDMAC1_CNDC6                      (0xF00041ECU) /**< \brief (XDMAC1) Channel Next Descriptor Control Register (chid = 6) */
  #define REG_XDMAC1_CUBC6                      (0xF00041F0U) /**< \brief (XDMAC1) Channel Microblock Control Register (chid = 6) */
  #define REG_XDMAC1_CBC6                       (0xF00041F4U) /**< \brief (XDMAC1) Channel Block Control Register (chid = 6) */
  #define REG_XDMAC1_CC6                        (0xF00041F8U) /**< \brief (XDMAC1) Channel Configuration Register (chid = 6) */
  #define REG_XDMAC1_CDS_MSP6                   (0xF00041FCU) /**< \brief (XDMAC1) Channel Data Stride Memory Set Pattern (chid = 6) */
  #define REG_XDMAC1_CSUS6                      (0xF0004200U) /**< \brief (XDMAC1) Channel Source Microblock Stride (chid = 6) */
  #define REG_XDMAC1_CDUS6                      (0xF0004204U) /**< \brief (XDMAC1) Channel Destination Microblock Stride (chid = 6) */
  #define REG_XDMAC1_CIE7                       (0xF0004210U) /**< \brief (XDMAC1) Channel Interrupt Enable Register (chid = 7) */
  #define REG_XDMAC1_CID7                       (0xF0004214U) /**< \brief (XDMAC1) Channel Interrupt Disable Register (chid = 7) */
  #define REG_XDMAC1_CIM7                       (0xF0004218U) /**< \brief (XDMAC1) Channel Interrupt Mask Register (chid = 7) */
  #define REG_XDMAC1_CIS7                       (0xF000421CU) /**< \brief (XDMAC1) Channel Interrupt Status Register (chid = 7) */
  #define REG_XDMAC1_CSA7                       (0xF0004220U) /**< \brief (XDMAC1) Channel Source Address Register (chid = 7) */
  #define REG_XDMAC1_CDA7                       (0xF0004224U) /**< \brief (XDMAC1) Channel Destination Address Register (chid = 7) */
  #define REG_XDMAC1_CNDA7                      (0xF0004228U) /**< \brief (XDMAC1) Channel Next Descriptor Address Register (chid = 7) */
  #define REG_XDMAC1_CNDC7                      (0xF000422CU) /**< \brief (XDMAC1) Channel Next Descriptor Control Register (chid = 7) */
  #define REG_XDMAC1_CUBC7                      (0xF0004230U) /**< \brief (XDMAC1) Channel Microblock Control Register (chid = 7) */
  #define REG_XDMAC1_CBC7                       (0xF0004234U) /**< \brief (XDMAC1) Channel Block Control Register (chid = 7) */
  #define REG_XDMAC1_CC7                        (0xF0004238U) /**< \brief (XDMAC1) Channel Configuration Register (chid = 7) */
  #define REG_XDMAC1_CDS_MSP7                   (0xF000423CU) /**< \brief (XDMAC1) Channel Data Stride Memory Set Pattern (chid = 7) */
  #define REG_XDMAC1_CSUS7                      (0xF0004240U) /**< \brief (XDMAC1) Channel Source Microblock Stride (chid = 7) */
  #define REG_XDMAC1_CDUS7                      (0xF0004244U) /**< \brief (XDMAC1) Channel Destination Microblock Stride (chid = 7) */
  #define REG_XDMAC1_CIE8                       (0xF0004250U) /**< \brief (XDMAC1) Channel Interrupt Enable Register (chid = 8) */
  #define REG_XDMAC1_CID8                       (0xF0004254U) /**< \brief (XDMAC1) Channel Interrupt Disable Register (chid = 8) */
  #define REG_XDMAC1_CIM8                       (0xF0004258U) /**< \brief (XDMAC1) Channel Interrupt Mask Register (chid = 8) */
  #define REG_XDMAC1_CIS8                       (0xF000425CU) /**< \brief (XDMAC1) Channel Interrupt Status Register (chid = 8) */
  #define REG_XDMAC1_CSA8                       (0xF0004260U) /**< \brief (XDMAC1) Channel Source Address Register (chid = 8) */
  #define REG_XDMAC1_CDA8                       (0xF0004264U) /**< \brief (XDMAC1) Channel Destination Address Register (chid = 8) */
  #define REG_XDMAC1_CNDA8                      (0xF0004268U) /**< \brief (XDMAC1) Channel Next Descriptor Address Register (chid = 8) */
  #define REG_XDMAC1_CNDC8                      (0xF000426CU) /**< \brief (XDMAC1) Channel Next Descriptor Control Register (chid = 8) */
  #define REG_XDMAC1_CUBC8                      (0xF0004270U) /**< \brief (XDMAC1) Channel Microblock Control Register (chid = 8) */
  #define REG_XDMAC1_CBC8                       (0xF0004274U) /**< \brief (XDMAC1) Channel Block Control Register (chid = 8) */
  #define REG_XDMAC1_CC8                        (0xF0004278U) /**< \brief (XDMAC1) Channel Configuration Register (chid = 8) */
  #define REG_XDMAC1_CDS_MSP8                   (0xF000427CU) /**< \brief (XDMAC1) Channel Data Stride Memory Set Pattern (chid = 8) */
  #define REG_XDMAC1_CSUS8                      (0xF0004280U) /**< \brief (XDMAC1) Channel Source Microblock Stride (chid = 8) */
  #define REG_XDMAC1_CDUS8                      (0xF0004284U) /**< \brief (XDMAC1) Channel Destination Microblock Stride (chid = 8) */
  #define REG_XDMAC1_CIE9                       (0xF0004290U) /**< \brief (XDMAC1) Channel Interrupt Enable Register (chid = 9) */
  #define REG_XDMAC1_CID9                       (0xF0004294U) /**< \brief (XDMAC1) Channel Interrupt Disable Register (chid = 9) */
  #define REG_XDMAC1_CIM9                       (0xF0004298U) /**< \brief (XDMAC1) Channel Interrupt Mask Register (chid = 9) */
  #define REG_XDMAC1_CIS9                       (0xF000429CU) /**< \brief (XDMAC1) Channel Interrupt Status Register (chid = 9) */
  #define REG_XDMAC1_CSA9                       (0xF00042A0U) /**< \brief (XDMAC1) Channel Source Address Register (chid = 9) */
  #define REG_XDMAC1_CDA9                       (0xF00042A4U) /**< \brief (XDMAC1) Channel Destination Address Register (chid = 9) */
  #define REG_XDMAC1_CNDA9                      (0xF00042A8U) /**< \brief (XDMAC1) Channel Next Descriptor Address Register (chid = 9) */
  #define REG_XDMAC1_CNDC9                      (0xF00042ACU) /**< \brief (XDMAC1) Channel Next Descriptor Control Register (chid = 9) */
  #define REG_XDMAC1_CUBC9                      (0xF00042B0U) /**< \brief (XDMAC1) Channel Microblock Control Register (chid = 9) */
  #define REG_XDMAC1_CBC9                       (0xF00042B4U) /**< \brief (XDMAC1) Channel Block Control Register (chid = 9) */
  #define REG_XDMAC1_CC9                        (0xF00042B8U) /**< \brief (XDMAC1) Channel Configuration Register (chid = 9) */
  #define REG_XDMAC1_CDS_MSP9                   (0xF00042BCU) /**< \brief (XDMAC1) Channel Data Stride Memory Set Pattern (chid = 9) */
  #define REG_XDMAC1_CSUS9                      (0xF00042C0U) /**< \brief (XDMAC1) Channel Source Microblock Stride (chid = 9) */
  #define REG_XDMAC1_CDUS9                      (0xF00042C4U) /**< \brief (XDMAC1) Channel Destination Microblock Stride (chid = 9) */
  #define REG_XDMAC1_CIE10                      (0xF00042D0U) /**< \brief (XDMAC1) Channel Interrupt Enable Register (chid = 10) */
  #define REG_XDMAC1_CID10                      (0xF00042D4U) /**< \brief (XDMAC1) Channel Interrupt Disable Register (chid = 10) */
  #define REG_XDMAC1_CIM10                      (0xF00042D8U) /**< \brief (XDMAC1) Channel Interrupt Mask Register (chid = 10) */
  #define REG_XDMAC1_CIS10                      (0xF00042DCU) /**< \brief (XDMAC1) Channel Interrupt Status Register (chid = 10) */
  #define REG_XDMAC1_CSA10                      (0xF00042E0U) /**< \brief (XDMAC1) Channel Source Address Register (chid = 10) */
  #define REG_XDMAC1_CDA10                      (0xF00042E4U) /**< \brief (XDMAC1) Channel Destination Address Register (chid = 10) */
  #define REG_XDMAC1_CNDA10                     (0xF00042E8U) /**< \brief (XDMAC1) Channel Next Descriptor Address Register (chid = 10) */
  #define REG_XDMAC1_CNDC10                     (0xF00042ECU) /**< \brief (XDMAC1) Channel Next Descriptor Control Register (chid = 10) */
  #define REG_XDMAC1_CUBC10                     (0xF00042F0U) /**< \brief (XDMAC1) Channel Microblock Control Register (chid = 10) */
  #define REG_XDMAC1_CBC10                      (0xF00042F4U) /**< \brief (XDMAC1) Channel Block Control Register (chid = 10) */
  #define REG_XDMAC1_CC10                       (0xF00042F8U) /**< \brief (XDMAC1) Channel Configuration Register (chid = 10) */
  #define REG_XDMAC1_CDS_MSP10                  (0xF00042FCU) /**< \brief (XDMAC1) Channel Data Stride Memory Set Pattern (chid = 10) */
  #define REG_XDMAC1_CSUS10                     (0xF0004300U) /**< \brief (XDMAC1) Channel Source Microblock Stride (chid = 10) */
  #define REG_XDMAC1_CDUS10                     (0xF0004304U) /**< \brief (XDMAC1) Channel Destination Microblock Stride (chid = 10) */
  #define REG_XDMAC1_CIE11                      (0xF0004310U) /**< \brief (XDMAC1) Channel Interrupt Enable Register (chid = 11) */
  #define REG_XDMAC1_CID11                      (0xF0004314U) /**< \brief (XDMAC1) Channel Interrupt Disable Register (chid = 11) */
  #define REG_XDMAC1_CIM11                      (0xF0004318U) /**< \brief (XDMAC1) Channel Interrupt Mask Register (chid = 11) */
  #define REG_XDMAC1_CIS11                      (0xF000431CU) /**< \brief (XDMAC1) Channel Interrupt Status Register (chid = 11) */
  #define REG_XDMAC1_CSA11                      (0xF0004320U) /**< \brief (XDMAC1) Channel Source Address Register (chid = 11) */
  #define REG_XDMAC1_CDA11                      (0xF0004324U) /**< \brief (XDMAC1) Channel Destination Address Register (chid = 11) */
  #define REG_XDMAC1_CNDA11                     (0xF0004328U) /**< \brief (XDMAC1) Channel Next Descriptor Address Register (chid = 11) */
  #define REG_XDMAC1_CNDC11                     (0xF000432CU) /**< \brief (XDMAC1) Channel Next Descriptor Control Register (chid = 11) */
  #define REG_XDMAC1_CUBC11                     (0xF0004330U) /**< \brief (XDMAC1) Channel Microblock Control Register (chid = 11) */
  #define REG_XDMAC1_CBC11                      (0xF0004334U) /**< \brief (XDMAC1) Channel Block Control Register (chid = 11) */
  #define REG_XDMAC1_CC11                       (0xF0004338U) /**< \brief (XDMAC1) Channel Configuration Register (chid = 11) */
  #define REG_XDMAC1_CDS_MSP11                  (0xF000433CU) /**< \brief (XDMAC1) Channel Data Stride Memory Set Pattern (chid = 11) */
  #define REG_XDMAC1_CSUS11                     (0xF0004340U) /**< \brief (XDMAC1) Channel Source Microblock Stride (chid = 11) */
  #define REG_XDMAC1_CDUS11                     (0xF0004344U) /**< \brief (XDMAC1) Channel Destination Microblock Stride (chid = 11) */
  #define REG_XDMAC1_CIE12                      (0xF0004350U) /**< \brief (XDMAC1) Channel Interrupt Enable Register (chid = 12) */
  #define REG_XDMAC1_CID12                      (0xF0004354U) /**< \brief (XDMAC1) Channel Interrupt Disable Register (chid = 12) */
  #define REG_XDMAC1_CIM12                      (0xF0004358U) /**< \brief (XDMAC1) Channel Interrupt Mask Register (chid = 12) */
  #define REG_XDMAC1_CIS12                      (0xF000435CU) /**< \brief (XDMAC1) Channel Interrupt Status Register (chid = 12) */
  #define REG_XDMAC1_CSA12                      (0xF0004360U) /**< \brief (XDMAC1) Channel Source Address Register (chid = 12) */
  #define REG_XDMAC1_CDA12                      (0xF0004364U) /**< \brief (XDMAC1) Channel Destination Address Register (chid = 12) */
  #define REG_XDMAC1_CNDA12                     (0xF0004368U) /**< \brief (XDMAC1) Channel Next Descriptor Address Register (chid = 12) */
  #define REG_XDMAC1_CNDC12                     (0xF000436CU) /**< \brief (XDMAC1) Channel Next Descriptor Control Register (chid = 12) */
  #define REG_XDMAC1_CUBC12                     (0xF0004370U) /**< \brief (XDMAC1) Channel Microblock Control Register (chid = 12) */
  #define REG_XDMAC1_CBC12                      (0xF0004374U) /**< \brief (XDMAC1) Channel Block Control Register (chid = 12) */
  #define REG_XDMAC1_CC12                       (0xF0004378U) /**< \brief (XDMAC1) Channel Configuration Register (chid = 12) */
  #define REG_XDMAC1_CDS_MSP12                  (0xF000437CU) /**< \brief (XDMAC1) Channel Data Stride Memory Set Pattern (chid = 12) */
  #define REG_XDMAC1_CSUS12                     (0xF0004380U) /**< \brief (XDMAC1) Channel Source Microblock Stride (chid = 12) */
  #define REG_XDMAC1_CDUS12                     (0xF0004384U) /**< \brief (XDMAC1) Channel Destination Microblock Stride (chid = 12) */
  #define REG_XDMAC1_CIE13                      (0xF0004390U) /**< \brief (XDMAC1) Channel Interrupt Enable Register (chid = 13) */
  #define REG_XDMAC1_CID13                      (0xF0004394U) /**< \brief (XDMAC1) Channel Interrupt Disable Register (chid = 13) */
  #define REG_XDMAC1_CIM13                      (0xF0004398U) /**< \brief (XDMAC1) Channel Interrupt Mask Register (chid = 13) */
  #define REG_XDMAC1_CIS13                      (0xF000439CU) /**< \brief (XDMAC1) Channel Interrupt Status Register (chid = 13) */
  #define REG_XDMAC1_CSA13                      (0xF00043A0U) /**< \brief (XDMAC1) Channel Source Address Register (chid = 13) */
  #define REG_XDMAC1_CDA13                      (0xF00043A4U) /**< \brief (XDMAC1) Channel Destination Address Register (chid = 13) */
  #define REG_XDMAC1_CNDA13                     (0xF00043A8U) /**< \brief (XDMAC1) Channel Next Descriptor Address Register (chid = 13) */
  #define REG_XDMAC1_CNDC13                     (0xF00043ACU) /**< \brief (XDMAC1) Channel Next Descriptor Control Register (chid = 13) */
  #define REG_XDMAC1_CUBC13                     (0xF00043B0U) /**< \brief (XDMAC1) Channel Microblock Control Register (chid = 13) */
  #define REG_XDMAC1_CBC13                      (0xF00043B4U) /**< \brief (XDMAC1) Channel Block Control Register (chid = 13) */
  #define REG_XDMAC1_CC13                       (0xF00043B8U) /**< \brief (XDMAC1) Channel Configuration Register (chid = 13) */
  #define REG_XDMAC1_CDS_MSP13                  (0xF00043BCU) /**< \brief (XDMAC1) Channel Data Stride Memory Set Pattern (chid = 13) */
  #define REG_XDMAC1_CSUS13                     (0xF00043C0U) /**< \brief (XDMAC1) Channel Source Microblock Stride (chid = 13) */
  #define REG_XDMAC1_CDUS13                     (0xF00043C4U) /**< \brief (XDMAC1) Channel Destination Microblock Stride (chid = 13) */
  #define REG_XDMAC1_CIE14                      (0xF00043D0U) /**< \brief (XDMAC1) Channel Interrupt Enable Register (chid = 14) */
  #define REG_XDMAC1_CID14                      (0xF00043D4U) /**< \brief (XDMAC1) Channel Interrupt Disable Register (chid = 14) */
  #define REG_XDMAC1_CIM14                      (0xF00043D8U) /**< \brief (XDMAC1) Channel Interrupt Mask Register (chid = 14) */
  #define REG_XDMAC1_CIS14                      (0xF00043DCU) /**< \brief (XDMAC1) Channel Interrupt Status Register (chid = 14) */
  #define REG_XDMAC1_CSA14                      (0xF00043E0U) /**< \brief (XDMAC1) Channel Source Address Register (chid = 14) */
  #define REG_XDMAC1_CDA14                      (0xF00043E4U) /**< \brief (XDMAC1) Channel Destination Address Register (chid = 14) */
  #define REG_XDMAC1_CNDA14                     (0xF00043E8U) /**< \brief (XDMAC1) Channel Next Descriptor Address Register (chid = 14) */
  #define REG_XDMAC1_CNDC14                     (0xF00043ECU) /**< \brief (XDMAC1) Channel Next Descriptor Control Register (chid = 14) */
  #define REG_XDMAC1_CUBC14                     (0xF00043F0U) /**< \brief (XDMAC1) Channel Microblock Control Register (chid = 14) */
  #define REG_XDMAC1_CBC14                      (0xF00043F4U) /**< \brief (XDMAC1) Channel Block Control Register (chid = 14) */
  #define REG_XDMAC1_CC14                       (0xF00043F8U) /**< \brief (XDMAC1) Channel Configuration Register (chid = 14) */
  #define REG_XDMAC1_CDS_MSP14                  (0xF00043FCU) /**< \brief (XDMAC1) Channel Data Stride Memory Set Pattern (chid = 14) */
  #define REG_XDMAC1_CSUS14                     (0xF0004400U) /**< \brief (XDMAC1) Channel Source Microblock Stride (chid = 14) */
  #define REG_XDMAC1_CDUS14                     (0xF0004404U) /**< \brief (XDMAC1) Channel Destination Microblock Stride (chid = 14) */
  #define REG_XDMAC1_CIE15                      (0xF0004410U) /**< \brief (XDMAC1) Channel Interrupt Enable Register (chid = 15) */
  #define REG_XDMAC1_CID15                      (0xF0004414U) /**< \brief (XDMAC1) Channel Interrupt Disable Register (chid = 15) */
  #define REG_XDMAC1_CIM15                      (0xF0004418U) /**< \brief (XDMAC1) Channel Interrupt Mask Register (chid = 15) */
  #define REG_XDMAC1_CIS15                      (0xF000441CU) /**< \brief (XDMAC1) Channel Interrupt Status Register (chid = 15) */
  #define REG_XDMAC1_CSA15                      (0xF0004420U) /**< \brief (XDMAC1) Channel Source Address Register (chid = 15) */
  #define REG_XDMAC1_CDA15                      (0xF0004424U) /**< \brief (XDMAC1) Channel Destination Address Register (chid = 15) */
  #define REG_XDMAC1_CNDA15                     (0xF0004428U) /**< \brief (XDMAC1) Channel Next Descriptor Address Register (chid = 15) */
  #define REG_XDMAC1_CNDC15                     (0xF000442CU) /**< \brief (XDMAC1) Channel Next Descriptor Control Register (chid = 15) */
  #define REG_XDMAC1_CUBC15                     (0xF0004430U) /**< \brief (XDMAC1) Channel Microblock Control Register (chid = 15) */
  #define REG_XDMAC1_CBC15                      (0xF0004434U) /**< \brief (XDMAC1) Channel Block Control Register (chid = 15) */
  #define REG_XDMAC1_CC15                       (0xF0004438U) /**< \brief (XDMAC1) Channel Configuration Register (chid = 15) */
  #define REG_XDMAC1_CDS_MSP15                  (0xF000443CU) /**< \brief (XDMAC1) Channel Data Stride Memory Set Pattern (chid = 15) */
  #define REG_XDMAC1_CSUS15                     (0xF0004440U) /**< \brief (XDMAC1) Channel Source Microblock Stride (chid = 15) */
  #define REG_XDMAC1_CDUS15                     (0xF0004444U) /**< \brief (XDMAC1) Channel Destination Microblock Stride (chid = 15) */
  #define REG_XDMAC1_VERSION                    (0xF0004FFCU) /**< \brief (XDMAC1) XDMAC Version Register */
#else
  #define REG_XDMAC1_GTYPE     (*(__IO uint32_t*)0xF0004000U) /**< \brief (XDMAC1) Global Type Register */
  #define REG_XDMAC1_GCFG      (*(__I  uint32_t*)0xF0004004U) /**< \brief (XDMAC1) Global Configuration Register */
  #define REG_XDMAC1_GWAC      (*(__IO uint32_t*)0xF0004008U) /**< \brief (XDMAC1) Global Weighted Arbiter Configuration Register */
  #define REG_XDMAC1_GIE       (*(__O  uint32_t*)0xF000400CU) /**< \brief (XDMAC1) Global Interrupt Enable Register */
  #define REG_XDMAC1_GID       (*(__O  uint32_t*)0xF0004010U) /**< \brief (XDMAC1) Global Interrupt Disable Register */
  #define REG_XDMAC1_GIM       (*(__I  uint32_t*)0xF0004014U) /**< \brief (XDMAC1) Global Interrupt Mask Register */
  #define REG_XDMAC1_GIS       (*(__I  uint32_t*)0xF0004018U) /**< \brief (XDMAC1) Global Interrupt Status Register */
  #define REG_XDMAC1_GE        (*(__O  uint32_t*)0xF000401CU) /**< \brief (XDMAC1) Global Channel Enable Register */
  #define REG_XDMAC1_GD        (*(__O  uint32_t*)0xF0004020U) /**< \brief (XDMAC1) Global Channel Disable Register */
  #define REG_XDMAC1_GS        (*(__I  uint32_t*)0xF0004024U) /**< \brief (XDMAC1) Global Channel Status Register */
  #define REG_XDMAC1_GRS       (*(__IO uint32_t*)0xF0004028U) /**< \brief (XDMAC1) Global Channel Read Suspend Register */
  #define REG_XDMAC1_GWS       (*(__IO uint32_t*)0xF000402CU) /**< \brief (XDMAC1) Global Channel Write Suspend Register */
  #define REG_XDMAC1_GRWS      (*(__O  uint32_t*)0xF0004030U) /**< \brief (XDMAC1) Global Channel Read Write Suspend Register */
  #define REG_XDMAC1_GRWR      (*(__O  uint32_t*)0xF0004034U) /**< \brief (XDMAC1) Global Channel Read Write Resume Register */
  #define REG_XDMAC1_GSWR      (*(__O  uint32_t*)0xF0004038U) /**< \brief (XDMAC1) Global Channel Software Request Register */
  #define REG_XDMAC1_GSWS      (*(__I  uint32_t*)0xF000403CU) /**< \brief (XDMAC1) Global Channel Software Request Status Register */
  #define REG_XDMAC1_GSWF      (*(__O  uint32_t*)0xF0004040U) /**< \brief (XDMAC1) Global Channel Software Flush Request Register */
  #define REG_XDMAC1_CIE0      (*(__O  uint32_t*)0xF0004050U) /**< \brief (XDMAC1) Channel Interrupt Enable Register (chid = 0) */
  #define REG_XDMAC1_CID0      (*(__O  uint32_t*)0xF0004054U) /**< \brief (XDMAC1) Channel Interrupt Disable Register (chid = 0) */
  #define REG_XDMAC1_CIM0      (*(__O  uint32_t*)0xF0004058U) /**< \brief (XDMAC1) Channel Interrupt Mask Register (chid = 0) */
  #define REG_XDMAC1_CIS0      (*(__I  uint32_t*)0xF000405CU) /**< \brief (XDMAC1) Channel Interrupt Status Register (chid = 0) */
  #define REG_XDMAC1_CSA0      (*(__IO uint32_t*)0xF0004060U) /**< \brief (XDMAC1) Channel Source Address Register (chid = 0) */
  #define REG_XDMAC1_CDA0      (*(__IO uint32_t*)0xF0004064U) /**< \brief (XDMAC1) Channel Destination Address Register (chid = 0) */
  #define REG_XDMAC1_CNDA0     (*(__IO uint32_t*)0xF0004068U) /**< \brief (XDMAC1) Channel Next Descriptor Address Register (chid = 0) */
  #define REG_XDMAC1_CNDC0     (*(__IO uint32_t*)0xF000406CU) /**< \brief (XDMAC1) Channel Next Descriptor Control Register (chid = 0) */
  #define REG_XDMAC1_CUBC0     (*(__IO uint32_t*)0xF0004070U) /**< \brief (XDMAC1) Channel Microblock Control Register (chid = 0) */
  #define REG_XDMAC1_CBC0      (*(__IO uint32_t*)0xF0004074U) /**< \brief (XDMAC1) Channel Block Control Register (chid = 0) */
  #define REG_XDMAC1_CC0       (*(__IO uint32_t*)0xF0004078U) /**< \brief (XDMAC1) Channel Configuration Register (chid = 0) */
  #define REG_XDMAC1_CDS_MSP0  (*(__IO uint32_t*)0xF000407CU) /**< \brief (XDMAC1) Channel Data Stride Memory Set Pattern (chid = 0) */
  #define REG_XDMAC1_CSUS0     (*(__IO uint32_t*)0xF0004080U) /**< \brief (XDMAC1) Channel Source Microblock Stride (chid = 0) */
  #define REG_XDMAC1_CDUS0     (*(__IO uint32_t*)0xF0004084U) /**< \brief (XDMAC1) Channel Destination Microblock Stride (chid = 0) */
  #define REG_XDMAC1_CIE1      (*(__O  uint32_t*)0xF0004090U) /**< \brief (XDMAC1) Channel Interrupt Enable Register (chid = 1) */
  #define REG_XDMAC1_CID1      (*(__O  uint32_t*)0xF0004094U) /**< \brief (XDMAC1) Channel Interrupt Disable Register (chid = 1) */
  #define REG_XDMAC1_CIM1      (*(__O  uint32_t*)0xF0004098U) /**< \brief (XDMAC1) Channel Interrupt Mask Register (chid = 1) */
  #define REG_XDMAC1_CIS1      (*(__I  uint32_t*)0xF000409CU) /**< \brief (XDMAC1) Channel Interrupt Status Register (chid = 1) */
  #define REG_XDMAC1_CSA1      (*(__IO uint32_t*)0xF00040A0U) /**< \brief (XDMAC1) Channel Source Address Register (chid = 1) */
  #define REG_XDMAC1_CDA1      (*(__IO uint32_t*)0xF00040A4U) /**< \brief (XDMAC1) Channel Destination Address Register (chid = 1) */
  #define REG_XDMAC1_CNDA1     (*(__IO uint32_t*)0xF00040A8U) /**< \brief (XDMAC1) Channel Next Descriptor Address Register (chid = 1) */
  #define REG_XDMAC1_CNDC1     (*(__IO uint32_t*)0xF00040ACU) /**< \brief (XDMAC1) Channel Next Descriptor Control Register (chid = 1) */
  #define REG_XDMAC1_CUBC1     (*(__IO uint32_t*)0xF00040B0U) /**< \brief (XDMAC1) Channel Microblock Control Register (chid = 1) */
  #define REG_XDMAC1_CBC1      (*(__IO uint32_t*)0xF00040B4U) /**< \brief (XDMAC1) Channel Block Control Register (chid = 1) */
  #define REG_XDMAC1_CC1       (*(__IO uint32_t*)0xF00040B8U) /**< \brief (XDMAC1) Channel Configuration Register (chid = 1) */
  #define REG_XDMAC1_CDS_MSP1  (*(__IO uint32_t*)0xF00040BCU) /**< \brief (XDMAC1) Channel Data Stride Memory Set Pattern (chid = 1) */
  #define REG_XDMAC1_CSUS1     (*(__IO uint32_t*)0xF00040C0U) /**< \brief (XDMAC1) Channel Source Microblock Stride (chid = 1) */
  #define REG_XDMAC1_CDUS1     (*(__IO uint32_t*)0xF00040C4U) /**< \brief (XDMAC1) Channel Destination Microblock Stride (chid = 1) */
  #define REG_XDMAC1_CIE2      (*(__O  uint32_t*)0xF00040D0U) /**< \brief (XDMAC1) Channel Interrupt Enable Register (chid = 2) */
  #define REG_XDMAC1_CID2      (*(__O  uint32_t*)0xF00040D4U) /**< \brief (XDMAC1) Channel Interrupt Disable Register (chid = 2) */
  #define REG_XDMAC1_CIM2      (*(__O  uint32_t*)0xF00040D8U) /**< \brief (XDMAC1) Channel Interrupt Mask Register (chid = 2) */
  #define REG_XDMAC1_CIS2      (*(__I  uint32_t*)0xF00040DCU) /**< \brief (XDMAC1) Channel Interrupt Status Register (chid = 2) */
  #define REG_XDMAC1_CSA2      (*(__IO uint32_t*)0xF00040E0U) /**< \brief (XDMAC1) Channel Source Address Register (chid = 2) */
  #define REG_XDMAC1_CDA2      (*(__IO uint32_t*)0xF00040E4U) /**< \brief (XDMAC1) Channel Destination Address Register (chid = 2) */
  #define REG_XDMAC1_CNDA2     (*(__IO uint32_t*)0xF00040E8U) /**< \brief (XDMAC1) Channel Next Descriptor Address Register (chid = 2) */
  #define REG_XDMAC1_CNDC2     (*(__IO uint32_t*)0xF00040ECU) /**< \brief (XDMAC1) Channel Next Descriptor Control Register (chid = 2) */
  #define REG_XDMAC1_CUBC2     (*(__IO uint32_t*)0xF00040F0U) /**< \brief (XDMAC1) Channel Microblock Control Register (chid = 2) */
  #define REG_XDMAC1_CBC2      (*(__IO uint32_t*)0xF00040F4U) /**< \brief (XDMAC1) Channel Block Control Register (chid = 2) */
  #define REG_XDMAC1_CC2       (*(__IO uint32_t*)0xF00040F8U) /**< \brief (XDMAC1) Channel Configuration Register (chid = 2) */
  #define REG_XDMAC1_CDS_MSP2  (*(__IO uint32_t*)0xF00040FCU) /**< \brief (XDMAC1) Channel Data Stride Memory Set Pattern (chid = 2) */
  #define REG_XDMAC1_CSUS2     (*(__IO uint32_t*)0xF0004100U) /**< \brief (XDMAC1) Channel Source Microblock Stride (chid = 2) */
  #define REG_XDMAC1_CDUS2     (*(__IO uint32_t*)0xF0004104U) /**< \brief (XDMAC1) Channel Destination Microblock Stride (chid = 2) */
  #define REG_XDMAC1_CIE3      (*(__O  uint32_t*)0xF0004110U) /**< \brief (XDMAC1) Channel Interrupt Enable Register (chid = 3) */
  #define REG_XDMAC1_CID3      (*(__O  uint32_t*)0xF0004114U) /**< \brief (XDMAC1) Channel Interrupt Disable Register (chid = 3) */
  #define REG_XDMAC1_CIM3      (*(__O  uint32_t*)0xF0004118U) /**< \brief (XDMAC1) Channel Interrupt Mask Register (chid = 3) */
  #define REG_XDMAC1_CIS3      (*(__I  uint32_t*)0xF000411CU) /**< \brief (XDMAC1) Channel Interrupt Status Register (chid = 3) */
  #define REG_XDMAC1_CSA3      (*(__IO uint32_t*)0xF0004120U) /**< \brief (XDMAC1) Channel Source Address Register (chid = 3) */
  #define REG_XDMAC1_CDA3      (*(__IO uint32_t*)0xF0004124U) /**< \brief (XDMAC1) Channel Destination Address Register (chid = 3) */
  #define REG_XDMAC1_CNDA3     (*(__IO uint32_t*)0xF0004128U) /**< \brief (XDMAC1) Channel Next Descriptor Address Register (chid = 3) */
  #define REG_XDMAC1_CNDC3     (*(__IO uint32_t*)0xF000412CU) /**< \brief (XDMAC1) Channel Next Descriptor Control Register (chid = 3) */
  #define REG_XDMAC1_CUBC3     (*(__IO uint32_t*)0xF0004130U) /**< \brief (XDMAC1) Channel Microblock Control Register (chid = 3) */
  #define REG_XDMAC1_CBC3      (*(__IO uint32_t*)0xF0004134U) /**< \brief (XDMAC1) Channel Block Control Register (chid = 3) */
  #define REG_XDMAC1_CC3       (*(__IO uint32_t*)0xF0004138U) /**< \brief (XDMAC1) Channel Configuration Register (chid = 3) */
  #define REG_XDMAC1_CDS_MSP3  (*(__IO uint32_t*)0xF000413CU) /**< \brief (XDMAC1) Channel Data Stride Memory Set Pattern (chid = 3) */
  #define REG_XDMAC1_CSUS3     (*(__IO uint32_t*)0xF0004140U) /**< \brief (XDMAC1) Channel Source Microblock Stride (chid = 3) */
  #define REG_XDMAC1_CDUS3     (*(__IO uint32_t*)0xF0004144U) /**< \brief (XDMAC1) Channel Destination Microblock Stride (chid = 3) */
  #define REG_XDMAC1_CIE4      (*(__O  uint32_t*)0xF0004150U) /**< \brief (XDMAC1) Channel Interrupt Enable Register (chid = 4) */
  #define REG_XDMAC1_CID4      (*(__O  uint32_t*)0xF0004154U) /**< \brief (XDMAC1) Channel Interrupt Disable Register (chid = 4) */
  #define REG_XDMAC1_CIM4      (*(__O  uint32_t*)0xF0004158U) /**< \brief (XDMAC1) Channel Interrupt Mask Register (chid = 4) */
  #define REG_XDMAC1_CIS4      (*(__I  uint32_t*)0xF000415CU) /**< \brief (XDMAC1) Channel Interrupt Status Register (chid = 4) */
  #define REG_XDMAC1_CSA4      (*(__IO uint32_t*)0xF0004160U) /**< \brief (XDMAC1) Channel Source Address Register (chid = 4) */
  #define REG_XDMAC1_CDA4      (*(__IO uint32_t*)0xF0004164U) /**< \brief (XDMAC1) Channel Destination Address Register (chid = 4) */
  #define REG_XDMAC1_CNDA4     (*(__IO uint32_t*)0xF0004168U) /**< \brief (XDMAC1) Channel Next Descriptor Address Register (chid = 4) */
  #define REG_XDMAC1_CNDC4     (*(__IO uint32_t*)0xF000416CU) /**< \brief (XDMAC1) Channel Next Descriptor Control Register (chid = 4) */
  #define REG_XDMAC1_CUBC4     (*(__IO uint32_t*)0xF0004170U) /**< \brief (XDMAC1) Channel Microblock Control Register (chid = 4) */
  #define REG_XDMAC1_CBC4      (*(__IO uint32_t*)0xF0004174U) /**< \brief (XDMAC1) Channel Block Control Register (chid = 4) */
  #define REG_XDMAC1_CC4       (*(__IO uint32_t*)0xF0004178U) /**< \brief (XDMAC1) Channel Configuration Register (chid = 4) */
  #define REG_XDMAC1_CDS_MSP4  (*(__IO uint32_t*)0xF000417CU) /**< \brief (XDMAC1) Channel Data Stride Memory Set Pattern (chid = 4) */
  #define REG_XDMAC1_CSUS4     (*(__IO uint32_t*)0xF0004180U) /**< \brief (XDMAC1) Channel Source Microblock Stride (chid = 4) */
  #define REG_XDMAC1_CDUS4     (*(__IO uint32_t*)0xF0004184U) /**< \brief (XDMAC1) Channel Destination Microblock Stride (chid = 4) */
  #define REG_XDMAC1_CIE5      (*(__O  uint32_t*)0xF0004190U) /**< \brief (XDMAC1) Channel Interrupt Enable Register (chid = 5) */
  #define REG_XDMAC1_CID5      (*(__O  uint32_t*)0xF0004194U) /**< \brief (XDMAC1) Channel Interrupt Disable Register (chid = 5) */
  #define REG_XDMAC1_CIM5      (*(__O  uint32_t*)0xF0004198U) /**< \brief (XDMAC1) Channel Interrupt Mask Register (chid = 5) */
  #define REG_XDMAC1_CIS5      (*(__I  uint32_t*)0xF000419CU) /**< \brief (XDMAC1) Channel Interrupt Status Register (chid = 5) */
  #define REG_XDMAC1_CSA5      (*(__IO uint32_t*)0xF00041A0U) /**< \brief (XDMAC1) Channel Source Address Register (chid = 5) */
  #define REG_XDMAC1_CDA5      (*(__IO uint32_t*)0xF00041A4U) /**< \brief (XDMAC1) Channel Destination Address Register (chid = 5) */
  #define REG_XDMAC1_CNDA5     (*(__IO uint32_t*)0xF00041A8U) /**< \brief (XDMAC1) Channel Next Descriptor Address Register (chid = 5) */
  #define REG_XDMAC1_CNDC5     (*(__IO uint32_t*)0xF00041ACU) /**< \brief (XDMAC1) Channel Next Descriptor Control Register (chid = 5) */
  #define REG_XDMAC1_CUBC5     (*(__IO uint32_t*)0xF00041B0U) /**< \brief (XDMAC1) Channel Microblock Control Register (chid = 5) */
  #define REG_XDMAC1_CBC5      (*(__IO uint32_t*)0xF00041B4U) /**< \brief (XDMAC1) Channel Block Control Register (chid = 5) */
  #define REG_XDMAC1_CC5       (*(__IO uint32_t*)0xF00041B8U) /**< \brief (XDMAC1) Channel Configuration Register (chid = 5) */
  #define REG_XDMAC1_CDS_MSP5  (*(__IO uint32_t*)0xF00041BCU) /**< \brief (XDMAC1) Channel Data Stride Memory Set Pattern (chid = 5) */
  #define REG_XDMAC1_CSUS5     (*(__IO uint32_t*)0xF00041C0U) /**< \brief (XDMAC1) Channel Source Microblock Stride (chid = 5) */
  #define REG_XDMAC1_CDUS5     (*(__IO uint32_t*)0xF00041C4U) /**< \brief (XDMAC1) Channel Destination Microblock Stride (chid = 5) */
  #define REG_XDMAC1_CIE6      (*(__O  uint32_t*)0xF00041D0U) /**< \brief (XDMAC1) Channel Interrupt Enable Register (chid = 6) */
  #define REG_XDMAC1_CID6      (*(__O  uint32_t*)0xF00041D4U) /**< \brief (XDMAC1) Channel Interrupt Disable Register (chid = 6) */
  #define REG_XDMAC1_CIM6      (*(__O  uint32_t*)0xF00041D8U) /**< \brief (XDMAC1) Channel Interrupt Mask Register (chid = 6) */
  #define REG_XDMAC1_CIS6      (*(__I  uint32_t*)0xF00041DCU) /**< \brief (XDMAC1) Channel Interrupt Status Register (chid = 6) */
  #define REG_XDMAC1_CSA6      (*(__IO uint32_t*)0xF00041E0U) /**< \brief (XDMAC1) Channel Source Address Register (chid = 6) */
  #define REG_XDMAC1_CDA6      (*(__IO uint32_t*)0xF00041E4U) /**< \brief (XDMAC1) Channel Destination Address Register (chid = 6) */
  #define REG_XDMAC1_CNDA6     (*(__IO uint32_t*)0xF00041E8U) /**< \brief (XDMAC1) Channel Next Descriptor Address Register (chid = 6) */
  #define REG_XDMAC1_CNDC6     (*(__IO uint32_t*)0xF00041ECU) /**< \brief (XDMAC1) Channel Next Descriptor Control Register (chid = 6) */
  #define REG_XDMAC1_CUBC6     (*(__IO uint32_t*)0xF00041F0U) /**< \brief (XDMAC1) Channel Microblock Control Register (chid = 6) */
  #define REG_XDMAC1_CBC6      (*(__IO uint32_t*)0xF00041F4U) /**< \brief (XDMAC1) Channel Block Control Register (chid = 6) */
  #define REG_XDMAC1_CC6       (*(__IO uint32_t*)0xF00041F8U) /**< \brief (XDMAC1) Channel Configuration Register (chid = 6) */
  #define REG_XDMAC1_CDS_MSP6  (*(__IO uint32_t*)0xF00041FCU) /**< \brief (XDMAC1) Channel Data Stride Memory Set Pattern (chid = 6) */
  #define REG_XDMAC1_CSUS6     (*(__IO uint32_t*)0xF0004200U) /**< \brief (XDMAC1) Channel Source Microblock Stride (chid = 6) */
  #define REG_XDMAC1_CDUS6     (*(__IO uint32_t*)0xF0004204U) /**< \brief (XDMAC1) Channel Destination Microblock Stride (chid = 6) */
  #define REG_XDMAC1_CIE7      (*(__O  uint32_t*)0xF0004210U) /**< \brief (XDMAC1) Channel Interrupt Enable Register (chid = 7) */
  #define REG_XDMAC1_CID7      (*(__O  uint32_t*)0xF0004214U) /**< \brief (XDMAC1) Channel Interrupt Disable Register (chid = 7) */
  #define REG_XDMAC1_CIM7      (*(__O  uint32_t*)0xF0004218U) /**< \brief (XDMAC1) Channel Interrupt Mask Register (chid = 7) */
  #define REG_XDMAC1_CIS7      (*(__I  uint32_t*)0xF000421CU) /**< \brief (XDMAC1) Channel Interrupt Status Register (chid = 7) */
  #define REG_XDMAC1_CSA7      (*(__IO uint32_t*)0xF0004220U) /**< \brief (XDMAC1) Channel Source Address Register (chid = 7) */
  #define REG_XDMAC1_CDA7      (*(__IO uint32_t*)0xF0004224U) /**< \brief (XDMAC1) Channel Destination Address Register (chid = 7) */
  #define REG_XDMAC1_CNDA7     (*(__IO uint32_t*)0xF0004228U) /**< \brief (XDMAC1) Channel Next Descriptor Address Register (chid = 7) */
  #define REG_XDMAC1_CNDC7     (*(__IO uint32_t*)0xF000422CU) /**< \brief (XDMAC1) Channel Next Descriptor Control Register (chid = 7) */
  #define REG_XDMAC1_CUBC7     (*(__IO uint32_t*)0xF0004230U) /**< \brief (XDMAC1) Channel Microblock Control Register (chid = 7) */
  #define REG_XDMAC1_CBC7      (*(__IO uint32_t*)0xF0004234U) /**< \brief (XDMAC1) Channel Block Control Register (chid = 7) */
  #define REG_XDMAC1_CC7       (*(__IO uint32_t*)0xF0004238U) /**< \brief (XDMAC1) Channel Configuration Register (chid = 7) */
  #define REG_XDMAC1_CDS_MSP7  (*(__IO uint32_t*)0xF000423CU) /**< \brief (XDMAC1) Channel Data Stride Memory Set Pattern (chid = 7) */
  #define REG_XDMAC1_CSUS7     (*(__IO uint32_t*)0xF0004240U) /**< \brief (XDMAC1) Channel Source Microblock Stride (chid = 7) */
  #define REG_XDMAC1_CDUS7     (*(__IO uint32_t*)0xF0004244U) /**< \brief (XDMAC1) Channel Destination Microblock Stride (chid = 7) */
  #define REG_XDMAC1_CIE8      (*(__O  uint32_t*)0xF0004250U) /**< \brief (XDMAC1) Channel Interrupt Enable Register (chid = 8) */
  #define REG_XDMAC1_CID8      (*(__O  uint32_t*)0xF0004254U) /**< \brief (XDMAC1) Channel Interrupt Disable Register (chid = 8) */
  #define REG_XDMAC1_CIM8      (*(__O  uint32_t*)0xF0004258U) /**< \brief (XDMAC1) Channel Interrupt Mask Register (chid = 8) */
  #define REG_XDMAC1_CIS8      (*(__I  uint32_t*)0xF000425CU) /**< \brief (XDMAC1) Channel Interrupt Status Register (chid = 8) */
  #define REG_XDMAC1_CSA8      (*(__IO uint32_t*)0xF0004260U) /**< \brief (XDMAC1) Channel Source Address Register (chid = 8) */
  #define REG_XDMAC1_CDA8      (*(__IO uint32_t*)0xF0004264U) /**< \brief (XDMAC1) Channel Destination Address Register (chid = 8) */
  #define REG_XDMAC1_CNDA8     (*(__IO uint32_t*)0xF0004268U) /**< \brief (XDMAC1) Channel Next Descriptor Address Register (chid = 8) */
  #define REG_XDMAC1_CNDC8     (*(__IO uint32_t*)0xF000426CU) /**< \brief (XDMAC1) Channel Next Descriptor Control Register (chid = 8) */
  #define REG_XDMAC1_CUBC8     (*(__IO uint32_t*)0xF0004270U) /**< \brief (XDMAC1) Channel Microblock Control Register (chid = 8) */
  #define REG_XDMAC1_CBC8      (*(__IO uint32_t*)0xF0004274U) /**< \brief (XDMAC1) Channel Block Control Register (chid = 8) */
  #define REG_XDMAC1_CC8       (*(__IO uint32_t*)0xF0004278U) /**< \brief (XDMAC1) Channel Configuration Register (chid = 8) */
  #define REG_XDMAC1_CDS_MSP8  (*(__IO uint32_t*)0xF000427CU) /**< \brief (XDMAC1) Channel Data Stride Memory Set Pattern (chid = 8) */
  #define REG_XDMAC1_CSUS8     (*(__IO uint32_t*)0xF0004280U) /**< \brief (XDMAC1) Channel Source Microblock Stride (chid = 8) */
  #define REG_XDMAC1_CDUS8     (*(__IO uint32_t*)0xF0004284U) /**< \brief (XDMAC1) Channel Destination Microblock Stride (chid = 8) */
  #define REG_XDMAC1_CIE9      (*(__O  uint32_t*)0xF0004290U) /**< \brief (XDMAC1) Channel Interrupt Enable Register (chid = 9) */
  #define REG_XDMAC1_CID9      (*(__O  uint32_t*)0xF0004294U) /**< \brief (XDMAC1) Channel Interrupt Disable Register (chid = 9) */
  #define REG_XDMAC1_CIM9      (*(__O  uint32_t*)0xF0004298U) /**< \brief (XDMAC1) Channel Interrupt Mask Register (chid = 9) */
  #define REG_XDMAC1_CIS9      (*(__I  uint32_t*)0xF000429CU) /**< \brief (XDMAC1) Channel Interrupt Status Register (chid = 9) */
  #define REG_XDMAC1_CSA9      (*(__IO uint32_t*)0xF00042A0U) /**< \brief (XDMAC1) Channel Source Address Register (chid = 9) */
  #define REG_XDMAC1_CDA9      (*(__IO uint32_t*)0xF00042A4U) /**< \brief (XDMAC1) Channel Destination Address Register (chid = 9) */
  #define REG_XDMAC1_CNDA9     (*(__IO uint32_t*)0xF00042A8U) /**< \brief (XDMAC1) Channel Next Descriptor Address Register (chid = 9) */
  #define REG_XDMAC1_CNDC9     (*(__IO uint32_t*)0xF00042ACU) /**< \brief (XDMAC1) Channel Next Descriptor Control Register (chid = 9) */
  #define REG_XDMAC1_CUBC9     (*(__IO uint32_t*)0xF00042B0U) /**< \brief (XDMAC1) Channel Microblock Control Register (chid = 9) */
  #define REG_XDMAC1_CBC9      (*(__IO uint32_t*)0xF00042B4U) /**< \brief (XDMAC1) Channel Block Control Register (chid = 9) */
  #define REG_XDMAC1_CC9       (*(__IO uint32_t*)0xF00042B8U) /**< \brief (XDMAC1) Channel Configuration Register (chid = 9) */
  #define REG_XDMAC1_CDS_MSP9  (*(__IO uint32_t*)0xF00042BCU) /**< \brief (XDMAC1) Channel Data Stride Memory Set Pattern (chid = 9) */
  #define REG_XDMAC1_CSUS9     (*(__IO uint32_t*)0xF00042C0U) /**< \brief (XDMAC1) Channel Source Microblock Stride (chid = 9) */
  #define REG_XDMAC1_CDUS9     (*(__IO uint32_t*)0xF00042C4U) /**< \brief (XDMAC1) Channel Destination Microblock Stride (chid = 9) */
  #define REG_XDMAC1_CIE10     (*(__O  uint32_t*)0xF00042D0U) /**< \brief (XDMAC1) Channel Interrupt Enable Register (chid = 10) */
  #define REG_XDMAC1_CID10     (*(__O  uint32_t*)0xF00042D4U) /**< \brief (XDMAC1) Channel Interrupt Disable Register (chid = 10) */
  #define REG_XDMAC1_CIM10     (*(__O  uint32_t*)0xF00042D8U) /**< \brief (XDMAC1) Channel Interrupt Mask Register (chid = 10) */
  #define REG_XDMAC1_CIS10     (*(__I  uint32_t*)0xF00042DCU) /**< \brief (XDMAC1) Channel Interrupt Status Register (chid = 10) */
  #define REG_XDMAC1_CSA10     (*(__IO uint32_t*)0xF00042E0U) /**< \brief (XDMAC1) Channel Source Address Register (chid = 10) */
  #define REG_XDMAC1_CDA10     (*(__IO uint32_t*)0xF00042E4U) /**< \brief (XDMAC1) Channel Destination Address Register (chid = 10) */
  #define REG_XDMAC1_CNDA10    (*(__IO uint32_t*)0xF00042E8U) /**< \brief (XDMAC1) Channel Next Descriptor Address Register (chid = 10) */
  #define REG_XDMAC1_CNDC10    (*(__IO uint32_t*)0xF00042ECU) /**< \brief (XDMAC1) Channel Next Descriptor Control Register (chid = 10) */
  #define REG_XDMAC1_CUBC10    (*(__IO uint32_t*)0xF00042F0U) /**< \brief (XDMAC1) Channel Microblock Control Register (chid = 10) */
  #define REG_XDMAC1_CBC10     (*(__IO uint32_t*)0xF00042F4U) /**< \brief (XDMAC1) Channel Block Control Register (chid = 10) */
  #define REG_XDMAC1_CC10      (*(__IO uint32_t*)0xF00042F8U) /**< \brief (XDMAC1) Channel Configuration Register (chid = 10) */
  #define REG_XDMAC1_CDS_MSP10 (*(__IO uint32_t*)0xF00042FCU) /**< \brief (XDMAC1) Channel Data Stride Memory Set Pattern (chid = 10) */
  #define REG_XDMAC1_CSUS10    (*(__IO uint32_t*)0xF0004300U) /**< \brief (XDMAC1) Channel Source Microblock Stride (chid = 10) */
  #define REG_XDMAC1_CDUS10    (*(__IO uint32_t*)0xF0004304U) /**< \brief (XDMAC1) Channel Destination Microblock Stride (chid = 10) */
  #define REG_XDMAC1_CIE11     (*(__O  uint32_t*)0xF0004310U) /**< \brief (XDMAC1) Channel Interrupt Enable Register (chid = 11) */
  #define REG_XDMAC1_CID11     (*(__O  uint32_t*)0xF0004314U) /**< \brief (XDMAC1) Channel Interrupt Disable Register (chid = 11) */
  #define REG_XDMAC1_CIM11     (*(__O  uint32_t*)0xF0004318U) /**< \brief (XDMAC1) Channel Interrupt Mask Register (chid = 11) */
  #define REG_XDMAC1_CIS11     (*(__I  uint32_t*)0xF000431CU) /**< \brief (XDMAC1) Channel Interrupt Status Register (chid = 11) */
  #define REG_XDMAC1_CSA11     (*(__IO uint32_t*)0xF0004320U) /**< \brief (XDMAC1) Channel Source Address Register (chid = 11) */
  #define REG_XDMAC1_CDA11     (*(__IO uint32_t*)0xF0004324U) /**< \brief (XDMAC1) Channel Destination Address Register (chid = 11) */
  #define REG_XDMAC1_CNDA11    (*(__IO uint32_t*)0xF0004328U) /**< \brief (XDMAC1) Channel Next Descriptor Address Register (chid = 11) */
  #define REG_XDMAC1_CNDC11    (*(__IO uint32_t*)0xF000432CU) /**< \brief (XDMAC1) Channel Next Descriptor Control Register (chid = 11) */
  #define REG_XDMAC1_CUBC11    (*(__IO uint32_t*)0xF0004330U) /**< \brief (XDMAC1) Channel Microblock Control Register (chid = 11) */
  #define REG_XDMAC1_CBC11     (*(__IO uint32_t*)0xF0004334U) /**< \brief (XDMAC1) Channel Block Control Register (chid = 11) */
  #define REG_XDMAC1_CC11      (*(__IO uint32_t*)0xF0004338U) /**< \brief (XDMAC1) Channel Configuration Register (chid = 11) */
  #define REG_XDMAC1_CDS_MSP11 (*(__IO uint32_t*)0xF000433CU) /**< \brief (XDMAC1) Channel Data Stride Memory Set Pattern (chid = 11) */
  #define REG_XDMAC1_CSUS11    (*(__IO uint32_t*)0xF0004340U) /**< \brief (XDMAC1) Channel Source Microblock Stride (chid = 11) */
  #define REG_XDMAC1_CDUS11    (*(__IO uint32_t*)0xF0004344U) /**< \brief (XDMAC1) Channel Destination Microblock Stride (chid = 11) */
  #define REG_XDMAC1_CIE12     (*(__O  uint32_t*)0xF0004350U) /**< \brief (XDMAC1) Channel Interrupt Enable Register (chid = 12) */
  #define REG_XDMAC1_CID12     (*(__O  uint32_t*)0xF0004354U) /**< \brief (XDMAC1) Channel Interrupt Disable Register (chid = 12) */
  #define REG_XDMAC1_CIM12     (*(__O  uint32_t*)0xF0004358U) /**< \brief (XDMAC1) Channel Interrupt Mask Register (chid = 12) */
  #define REG_XDMAC1_CIS12     (*(__I  uint32_t*)0xF000435CU) /**< \brief (XDMAC1) Channel Interrupt Status Register (chid = 12) */
  #define REG_XDMAC1_CSA12     (*(__IO uint32_t*)0xF0004360U) /**< \brief (XDMAC1) Channel Source Address Register (chid = 12) */
  #define REG_XDMAC1_CDA12     (*(__IO uint32_t*)0xF0004364U) /**< \brief (XDMAC1) Channel Destination Address Register (chid = 12) */
  #define REG_XDMAC1_CNDA12    (*(__IO uint32_t*)0xF0004368U) /**< \brief (XDMAC1) Channel Next Descriptor Address Register (chid = 12) */
  #define REG_XDMAC1_CNDC12    (*(__IO uint32_t*)0xF000436CU) /**< \brief (XDMAC1) Channel Next Descriptor Control Register (chid = 12) */
  #define REG_XDMAC1_CUBC12    (*(__IO uint32_t*)0xF0004370U) /**< \brief (XDMAC1) Channel Microblock Control Register (chid = 12) */
  #define REG_XDMAC1_CBC12     (*(__IO uint32_t*)0xF0004374U) /**< \brief (XDMAC1) Channel Block Control Register (chid = 12) */
  #define REG_XDMAC1_CC12      (*(__IO uint32_t*)0xF0004378U) /**< \brief (XDMAC1) Channel Configuration Register (chid = 12) */
  #define REG_XDMAC1_CDS_MSP12 (*(__IO uint32_t*)0xF000437CU) /**< \brief (XDMAC1) Channel Data Stride Memory Set Pattern (chid = 12) */
  #define REG_XDMAC1_CSUS12    (*(__IO uint32_t*)0xF0004380U) /**< \brief (XDMAC1) Channel Source Microblock Stride (chid = 12) */
  #define REG_XDMAC1_CDUS12    (*(__IO uint32_t*)0xF0004384U) /**< \brief (XDMAC1) Channel Destination Microblock Stride (chid = 12) */
  #define REG_XDMAC1_CIE13     (*(__O  uint32_t*)0xF0004390U) /**< \brief (XDMAC1) Channel Interrupt Enable Register (chid = 13) */
  #define REG_XDMAC1_CID13     (*(__O  uint32_t*)0xF0004394U) /**< \brief (XDMAC1) Channel Interrupt Disable Register (chid = 13) */
  #define REG_XDMAC1_CIM13     (*(__O  uint32_t*)0xF0004398U) /**< \brief (XDMAC1) Channel Interrupt Mask Register (chid = 13) */
  #define REG_XDMAC1_CIS13     (*(__I  uint32_t*)0xF000439CU) /**< \brief (XDMAC1) Channel Interrupt Status Register (chid = 13) */
  #define REG_XDMAC1_CSA13     (*(__IO uint32_t*)0xF00043A0U) /**< \brief (XDMAC1) Channel Source Address Register (chid = 13) */
  #define REG_XDMAC1_CDA13     (*(__IO uint32_t*)0xF00043A4U) /**< \brief (XDMAC1) Channel Destination Address Register (chid = 13) */
  #define REG_XDMAC1_CNDA13    (*(__IO uint32_t*)0xF00043A8U) /**< \brief (XDMAC1) Channel Next Descriptor Address Register (chid = 13) */
  #define REG_XDMAC1_CNDC13    (*(__IO uint32_t*)0xF00043ACU) /**< \brief (XDMAC1) Channel Next Descriptor Control Register (chid = 13) */
  #define REG_XDMAC1_CUBC13    (*(__IO uint32_t*)0xF00043B0U) /**< \brief (XDMAC1) Channel Microblock Control Register (chid = 13) */
  #define REG_XDMAC1_CBC13     (*(__IO uint32_t*)0xF00043B4U) /**< \brief (XDMAC1) Channel Block Control Register (chid = 13) */
  #define REG_XDMAC1_CC13      (*(__IO uint32_t*)0xF00043B8U) /**< \brief (XDMAC1) Channel Configuration Register (chid = 13) */
  #define REG_XDMAC1_CDS_MSP13 (*(__IO uint32_t*)0xF00043BCU) /**< \brief (XDMAC1) Channel Data Stride Memory Set Pattern (chid = 13) */
  #define REG_XDMAC1_CSUS13    (*(__IO uint32_t*)0xF00043C0U) /**< \brief (XDMAC1) Channel Source Microblock Stride (chid = 13) */
  #define REG_XDMAC1_CDUS13    (*(__IO uint32_t*)0xF00043C4U) /**< \brief (XDMAC1) Channel Destination Microblock Stride (chid = 13) */
  #define REG_XDMAC1_CIE14     (*(__O  uint32_t*)0xF00043D0U) /**< \brief (XDMAC1) Channel Interrupt Enable Register (chid = 14) */
  #define REG_XDMAC1_CID14     (*(__O  uint32_t*)0xF00043D4U) /**< \brief (XDMAC1) Channel Interrupt Disable Register (chid = 14) */
  #define REG_XDMAC1_CIM14     (*(__O  uint32_t*)0xF00043D8U) /**< \brief (XDMAC1) Channel Interrupt Mask Register (chid = 14) */
  #define REG_XDMAC1_CIS14     (*(__I  uint32_t*)0xF00043DCU) /**< \brief (XDMAC1) Channel Interrupt Status Register (chid = 14) */
  #define REG_XDMAC1_CSA14     (*(__IO uint32_t*)0xF00043E0U) /**< \brief (XDMAC1) Channel Source Address Register (chid = 14) */
  #define REG_XDMAC1_CDA14     (*(__IO uint32_t*)0xF00043E4U) /**< \brief (XDMAC1) Channel Destination Address Register (chid = 14) */
  #define REG_XDMAC1_CNDA14    (*(__IO uint32_t*)0xF00043E8U) /**< \brief (XDMAC1) Channel Next Descriptor Address Register (chid = 14) */
  #define REG_XDMAC1_CNDC14    (*(__IO uint32_t*)0xF00043ECU) /**< \brief (XDMAC1) Channel Next Descriptor Control Register (chid = 14) */
  #define REG_XDMAC1_CUBC14    (*(__IO uint32_t*)0xF00043F0U) /**< \brief (XDMAC1) Channel Microblock Control Register (chid = 14) */
  #define REG_XDMAC1_CBC14     (*(__IO uint32_t*)0xF00043F4U) /**< \brief (XDMAC1) Channel Block Control Register (chid = 14) */
  #define REG_XDMAC1_CC14      (*(__IO uint32_t*)0xF00043F8U) /**< \brief (XDMAC1) Channel Configuration Register (chid = 14) */
  #define REG_XDMAC1_CDS_MSP14 (*(__IO uint32_t*)0xF00043FCU) /**< \brief (XDMAC1) Channel Data Stride Memory Set Pattern (chid = 14) */
  #define REG_XDMAC1_CSUS14    (*(__IO uint32_t*)0xF0004400U) /**< \brief (XDMAC1) Channel Source Microblock Stride (chid = 14) */
  #define REG_XDMAC1_CDUS14    (*(__IO uint32_t*)0xF0004404U) /**< \brief (XDMAC1) Channel Destination Microblock Stride (chid = 14) */
  #define REG_XDMAC1_CIE15     (*(__O  uint32_t*)0xF0004410U) /**< \brief (XDMAC1) Channel Interrupt Enable Register (chid = 15) */
  #define REG_XDMAC1_CID15     (*(__O  uint32_t*)0xF0004414U) /**< \brief (XDMAC1) Channel Interrupt Disable Register (chid = 15) */
  #define REG_XDMAC1_CIM15     (*(__O  uint32_t*)0xF0004418U) /**< \brief (XDMAC1) Channel Interrupt Mask Register (chid = 15) */
  #define REG_XDMAC1_CIS15     (*(__I  uint32_t*)0xF000441CU) /**< \brief (XDMAC1) Channel Interrupt Status Register (chid = 15) */
  #define REG_XDMAC1_CSA15     (*(__IO uint32_t*)0xF0004420U) /**< \brief (XDMAC1) Channel Source Address Register (chid = 15) */
  #define REG_XDMAC1_CDA15     (*(__IO uint32_t*)0xF0004424U) /**< \brief (XDMAC1) Channel Destination Address Register (chid = 15) */
  #define REG_XDMAC1_CNDA15    (*(__IO uint32_t*)0xF0004428U) /**< \brief (XDMAC1) Channel Next Descriptor Address Register (chid = 15) */
  #define REG_XDMAC1_CNDC15    (*(__IO uint32_t*)0xF000442CU) /**< \brief (XDMAC1) Channel Next Descriptor Control Register (chid = 15) */
  #define REG_XDMAC1_CUBC15    (*(__IO uint32_t*)0xF0004430U) /**< \brief (XDMAC1) Channel Microblock Control Register (chid = 15) */
  #define REG_XDMAC1_CBC15     (*(__IO uint32_t*)0xF0004434U) /**< \brief (XDMAC1) Channel Block Control Register (chid = 15) */
  #define REG_XDMAC1_CC15      (*(__IO uint32_t*)0xF0004438U) /**< \brief (XDMAC1) Channel Configuration Register (chid = 15) */
  #define REG_XDMAC1_CDS_MSP15 (*(__IO uint32_t*)0xF000443CU) /**< \brief (XDMAC1) Channel Data Stride Memory Set Pattern (chid = 15) */
  #define REG_XDMAC1_CSUS15    (*(__IO uint32_t*)0xF0004440U) /**< \brief (XDMAC1) Channel Source Microblock Stride (chid = 15) */
  #define REG_XDMAC1_CDUS15    (*(__IO uint32_t*)0xF0004444U) /**< \brief (XDMAC1) Channel Destination Microblock Stride (chid = 15) */
  #define REG_XDMAC1_VERSION   (*(__IO uint32_t*)0xF0004FFCU) /**< \brief (XDMAC1) XDMAC Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for ISI peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_HXISI_CTRLEN                        (0xF0008000U) /**< \brief (ISI) Control Enable Register */
  #define REG_HXISI_CTRLDIS                       (0xF0008004U) /**< \brief (ISI) Control Disable Register */
  #define REG_HXISI_CTRLSR                        (0xF0008008U) /**< \brief (ISI) Control Status Register */
  #define REG_HXISI_PFE_CFG0                      (0xF000800CU) /**< \brief (ISI) Parallel Front End Configuration 0 Register */
  #define REG_HXISI_PFE_CFG1                      (0xF0008010U) /**< \brief (ISI) Parallel Front End Configuration 1 Register */
  #define REG_HXISI_PFE_CFG2                      (0xF0008014U) /**< \brief (ISI) Parallel Front End Configuration 2 Register */
  #define REG_HXISI_CLKEN                         (0xF0008018U) /**< \brief (ISI) Clock Enable Register */
  #define REG_HXISI_CLKDIS                        (0xF000801CU) /**< \brief (ISI) Clock Disable Register */
  #define REG_HXISI_CLKSR                         (0xF0008020U) /**< \brief (ISI) Clock Status Register */
  #define REG_HXISI_CLKCFG                        (0xF0008024U) /**< \brief (ISI) Clock Configuration Register */
  #define REG_HXISI_INTEN                         (0xF0008028U) /**< \brief (ISI) Interrupt Enable Register */
  #define REG_HXISI_INTDIS                        (0xF000802CU) /**< \brief (ISI) Interrupt Disable Register */
  #define REG_HXISI_INTMASK                       (0xF0008030U) /**< \brief (ISI) Interrupt Mask Register */
  #define REG_HXISI_INTSR                         (0xF0008034U) /**< \brief (ISI) Interrupt Status Register */
  #define REG_HXISI_DPC_CTRL                      (0xF0008040U) /**< \brief (ISI) Defective Pixel Correction Control Register */
  #define REG_HXISI_DPC_CFG                       (0xF0008044U) /**< \brief (ISI) Defective Pixel Correction Configuration Register */
  #define REG_HXISI_DPC_THRESHM                   (0xF0008048U) /**< \brief (ISI) Defective Pixel Correction Threshold M Register */
  #define REG_HXISI_DPC_THRESHC                   (0xF000804CU) /**< \brief (ISI) Defective Pixel Correction Threshold C Register */
  #define REG_HXISI_DPC_THRESHA                   (0xF0008050U) /**< \brief (ISI) Defective Pixel Correction Threshold A Register */
  #define REG_HXISI_DPC_SR                        (0xF0008054U) /**< \brief (ISI) Defective Pixel Correction Status Register */
  #define REG_HXISI_WB_CTRL                       (0xF0008058U) /**< \brief (ISI) White Balance Control Register */
  #define REG_HXISI_WB_CFG                        (0xF000805CU) /**< \brief (ISI) White Balance Configuration Register */
  #define REG_HXISI_WB_O_RGR                      (0xF0008060U) /**< \brief (ISI) White Balance Offset for R, GR Register */
  #define REG_HXISI_WB_O_BGB                      (0xF0008064U) /**< \brief (ISI) White Balance Offset for B, GB Register */
  #define REG_HXISI_WB_G_RGR                      (0xF0008068U) /**< \brief (ISI) White Balance Gain for R, GR Register */
  #define REG_HXISI_WB_G_BGB                      (0xF000806CU) /**< \brief (ISI) White Balance Gain for B, GB Register */
  #define REG_HXISI_CFA_CTRL                      (0xF0008070U) /**< \brief (ISI) Color Filter Array Control Register */
  #define REG_HXISI_CFA_CFG                       (0xF0008074U) /**< \brief (ISI) Color Filter Array Configuration Register */
  #define REG_HXISI_CC_CTRL                       (0xF0008078U) /**< \brief (ISI) Color Correction Control Register */
  #define REG_HXISI_CC_RR_RG                      (0xF000807CU) /**< \brief (ISI) Color Correction RR RG Register */
  #define REG_HXISI_CC_RB_OR                      (0xF0008080U) /**< \brief (ISI) Color Correction RB OR Register */
  #define REG_HXISI_CC_GR_GG                      (0xF0008084U) /**< \brief (ISI) Color Correction GR GG Register */
  #define REG_HXISI_CC_GB_OG                      (0xF0008088U) /**< \brief (ISI) Color Correction GB OG Register */
  #define REG_HXISI_CC_BR_BG                      (0xF000808CU) /**< \brief (ISI) Color Correction BR BG Register */
  #define REG_HXISI_CC_BB_OB                      (0xF0008090U) /**< \brief (ISI) Color Correction BB OB Register */
  #define REG_HXISI_GAM_CTRL                      (0xF0008094U) /**< \brief (ISI) Gamma Correction Control Register */
  #define REG_HXISI_GAM_BENTRY                    (0xF0008098U) /**< \brief (ISI) Gamma Correction Blue Entry */
  #define REG_HXISI_GAM_GENTRY                    (0xF0008198U) /**< \brief (ISI) Gamma Correction Green Entry */
  #define REG_HXISI_GAM_RENTRY                    (0xF0008298U) /**< \brief (ISI) Gamma Correction Red Entry */
  #define REG_HXISI_CSC_CTRL                      (0xF0008398U) /**< \brief (ISI) Color Space Conversion Control Register */
  #define REG_HXISI_CSC_YR_YG                     (0xF000839CU) /**< \brief (ISI) Color Space Conversion YR, YG Register */
  #define REG_HXISI_CSC_YB_OY                     (0xF00083A0U) /**< \brief (ISI) Color Space Conversion YB, OY Register */
  #define REG_HXISI_CSC_CBR_CBG                   (0xF00083A4U) /**< \brief (ISI) Color Space Conversion CBR CBG Register */
  #define REG_HXISI_CSC_CBB_OCB                   (0xF00083A8U) /**< \brief (ISI) Color Space Conversion CBB OCB Register */
  #define REG_HXISI_CSC_CRR_CRG                   (0xF00083ACU) /**< \brief (ISI) Color Space Conversion CRR CRG Register */
  #define REG_HXISI_CSC_CRB_OCR                   (0xF00083B0U) /**< \brief (ISI) Color Space Conversion CRB OCR Register */
  #define REG_HXISI_CBC_CTRL                      (0xF00083B4U) /**< \brief (ISI) Contrast and Brightness Control Register */
  #define REG_HXISI_CBC_CFG                       (0xF00083B8U) /**< \brief (ISI) Contrast and Brightness Configuration Register */
  #define REG_HXISI_CBC_BRIGHT                    (0xF00083BCU) /**< \brief (ISI) Contrast and Brightness, Brightness Register */
  #define REG_HXISI_CBC_CONTRAST                  (0xF00083C0U) /**< \brief (ISI) Contrast and Brightness, Contrast Register */
  #define REG_HXISI_SUB422_CTRL                   (0xF00083C4U) /**< \brief (ISI) Subsampling 4:4:4 to 4:2:2 Control Register */
  #define REG_HXISI_SUB422_CFG                    (0xF00083C8U) /**< \brief (ISI) Subsampling 4:4:4 to 4:2:2 Configuration Register */
  #define REG_HXISI_SUB420_CTRL                   (0xF00083CCU) /**< \brief (ISI) Subsampling 4:2:2 to 4:2:0 Control Register */
  #define REG_HXISI_RLP_CFG                       (0xF00083D0U) /**< \brief (ISI) Rounding, Limiting and Packing Config Register */
  #define REG_HXISI_HIS_CTRL                      (0xF00083D4U) /**< \brief (ISI) Histogram Control Register */
  #define REG_HXISI_HIS_CFG                       (0xF00083D8U) /**< \brief (ISI) Histogram Configuration Register */
  #define REG_HXISI_DCFG                          (0xF00083E0U) /**< \brief (ISI) DMA Configuration Register */
  #define REG_HXISI_DCTRL                         (0xF00083E4U) /**< \brief (ISI) DMA Control Register */
  #define REG_HXISI_DNDA                          (0xF00083E8U) /**< \brief (ISI) DMA Descriptor Address Register */
  #define REG_HXISI_DAD0                          (0xF00083ECU) /**< \brief (ISI) DMA Address 0 Register */
  #define REG_HXISI_DST0                          (0xF00083F0U) /**< \brief (ISI) DMA Stride 0 Register */
  #define REG_HXISI_DAD1                          (0xF00083F4U) /**< \brief (ISI) DMA Address 1 Register */
  #define REG_HXISI_DST1                          (0xF00083F8U) /**< \brief (ISI) DMA Stride 1 Register */
  #define REG_HXISI_DAD2                          (0xF00083FCU) /**< \brief (ISI) DMA Address 2 Register */
  #define REG_HXISI_DST2                          (0xF0008400U) /**< \brief (ISI) DMA Stride 2 Register */
  #define REG_IPB_VERSION                         (0xF000840CU) /**< \brief (ISI) Version Register */
  #define REG_HXISI_HIS_ENTRY                     (0xF0008410U) /**< \brief (ISI) Histogram Entry */
#else
  #define REG_HXISI_CTRLEN       (*(__O  uint32_t*)0xF0008000U) /**< \brief (ISI) Control Enable Register */
  #define REG_HXISI_CTRLDIS      (*(__O  uint32_t*)0xF0008004U) /**< \brief (ISI) Control Disable Register */
  #define REG_HXISI_CTRLSR       (*(__I  uint32_t*)0xF0008008U) /**< \brief (ISI) Control Status Register */
  #define REG_HXISI_PFE_CFG0     (*(__IO uint32_t*)0xF000800CU) /**< \brief (ISI) Parallel Front End Configuration 0 Register */
  #define REG_HXISI_PFE_CFG1     (*(__IO uint32_t*)0xF0008010U) /**< \brief (ISI) Parallel Front End Configuration 1 Register */
  #define REG_HXISI_PFE_CFG2     (*(__IO uint32_t*)0xF0008014U) /**< \brief (ISI) Parallel Front End Configuration 2 Register */
  #define REG_HXISI_CLKEN        (*(__O  uint32_t*)0xF0008018U) /**< \brief (ISI) Clock Enable Register */
  #define REG_HXISI_CLKDIS       (*(__O  uint32_t*)0xF000801CU) /**< \brief (ISI) Clock Disable Register */
  #define REG_HXISI_CLKSR        (*(__I  uint32_t*)0xF0008020U) /**< \brief (ISI) Clock Status Register */
  #define REG_HXISI_CLKCFG       (*(__IO uint32_t*)0xF0008024U) /**< \brief (ISI) Clock Configuration Register */
  #define REG_HXISI_INTEN        (*(__O  uint32_t*)0xF0008028U) /**< \brief (ISI) Interrupt Enable Register */
  #define REG_HXISI_INTDIS       (*(__O  uint32_t*)0xF000802CU) /**< \brief (ISI) Interrupt Disable Register */
  #define REG_HXISI_INTMASK      (*(__I  uint32_t*)0xF0008030U) /**< \brief (ISI) Interrupt Mask Register */
  #define REG_HXISI_INTSR        (*(__I  uint32_t*)0xF0008034U) /**< \brief (ISI) Interrupt Status Register */
  #define REG_HXISI_DPC_CTRL     (*(__IO uint32_t*)0xF0008040U) /**< \brief (ISI) Defective Pixel Correction Control Register */
  #define REG_HXISI_DPC_CFG      (*(__IO uint32_t*)0xF0008044U) /**< \brief (ISI) Defective Pixel Correction Configuration Register */
  #define REG_HXISI_DPC_THRESHM  (*(__IO uint32_t*)0xF0008048U) /**< \brief (ISI) Defective Pixel Correction Threshold M Register */
  #define REG_HXISI_DPC_THRESHC  (*(__IO uint32_t*)0xF000804CU) /**< \brief (ISI) Defective Pixel Correction Threshold C Register */
  #define REG_HXISI_DPC_THRESHA  (*(__IO uint32_t*)0xF0008050U) /**< \brief (ISI) Defective Pixel Correction Threshold A Register */
  #define REG_HXISI_DPC_SR       (*(__I  uint32_t*)0xF0008054U) /**< \brief (ISI) Defective Pixel Correction Status Register */
  #define REG_HXISI_WB_CTRL      (*(__IO uint32_t*)0xF0008058U) /**< \brief (ISI) White Balance Control Register */
  #define REG_HXISI_WB_CFG       (*(__IO uint32_t*)0xF000805CU) /**< \brief (ISI) White Balance Configuration Register */
  #define REG_HXISI_WB_O_RGR     (*(__IO uint32_t*)0xF0008060U) /**< \brief (ISI) White Balance Offset for R, GR Register */
  #define REG_HXISI_WB_O_BGB     (*(__IO uint32_t*)0xF0008064U) /**< \brief (ISI) White Balance Offset for B, GB Register */
  #define REG_HXISI_WB_G_RGR     (*(__IO uint32_t*)0xF0008068U) /**< \brief (ISI) White Balance Gain for R, GR Register */
  #define REG_HXISI_WB_G_BGB     (*(__IO uint32_t*)0xF000806CU) /**< \brief (ISI) White Balance Gain for B, GB Register */
  #define REG_HXISI_CFA_CTRL     (*(__IO uint32_t*)0xF0008070U) /**< \brief (ISI) Color Filter Array Control Register */
  #define REG_HXISI_CFA_CFG      (*(__IO uint32_t*)0xF0008074U) /**< \brief (ISI) Color Filter Array Configuration Register */
  #define REG_HXISI_CC_CTRL      (*(__IO uint32_t*)0xF0008078U) /**< \brief (ISI) Color Correction Control Register */
  #define REG_HXISI_CC_RR_RG     (*(__IO uint32_t*)0xF000807CU) /**< \brief (ISI) Color Correction RR RG Register */
  #define REG_HXISI_CC_RB_OR     (*(__IO uint32_t*)0xF0008080U) /**< \brief (ISI) Color Correction RB OR Register */
  #define REG_HXISI_CC_GR_GG     (*(__IO uint32_t*)0xF0008084U) /**< \brief (ISI) Color Correction GR GG Register */
  #define REG_HXISI_CC_GB_OG     (*(__IO uint32_t*)0xF0008088U) /**< \brief (ISI) Color Correction GB OG Register */
  #define REG_HXISI_CC_BR_BG     (*(__IO uint32_t*)0xF000808CU) /**< \brief (ISI) Color Correction BR BG Register */
  #define REG_HXISI_CC_BB_OB     (*(__IO uint32_t*)0xF0008090U) /**< \brief (ISI) Color Correction BB OB Register */
  #define REG_HXISI_GAM_CTRL     (*(__IO uint32_t*)0xF0008094U) /**< \brief (ISI) Gamma Correction Control Register */
  #define REG_HXISI_GAM_BENTRY   (*(__IO uint32_t*)0xF0008098U) /**< \brief (ISI) Gamma Correction Blue Entry */
  #define REG_HXISI_GAM_GENTRY   (*(__IO uint32_t*)0xF0008198U) /**< \brief (ISI) Gamma Correction Green Entry */
  #define REG_HXISI_GAM_RENTRY   (*(__IO uint32_t*)0xF0008298U) /**< \brief (ISI) Gamma Correction Red Entry */
  #define REG_HXISI_CSC_CTRL     (*(__IO uint32_t*)0xF0008398U) /**< \brief (ISI) Color Space Conversion Control Register */
  #define REG_HXISI_CSC_YR_YG    (*(__IO uint32_t*)0xF000839CU) /**< \brief (ISI) Color Space Conversion YR, YG Register */
  #define REG_HXISI_CSC_YB_OY    (*(__IO uint32_t*)0xF00083A0U) /**< \brief (ISI) Color Space Conversion YB, OY Register */
  #define REG_HXISI_CSC_CBR_CBG  (*(__IO uint32_t*)0xF00083A4U) /**< \brief (ISI) Color Space Conversion CBR CBG Register */
  #define REG_HXISI_CSC_CBB_OCB  (*(__IO uint32_t*)0xF00083A8U) /**< \brief (ISI) Color Space Conversion CBB OCB Register */
  #define REG_HXISI_CSC_CRR_CRG  (*(__IO uint32_t*)0xF00083ACU) /**< \brief (ISI) Color Space Conversion CRR CRG Register */
  #define REG_HXISI_CSC_CRB_OCR  (*(__IO uint32_t*)0xF00083B0U) /**< \brief (ISI) Color Space Conversion CRB OCR Register */
  #define REG_HXISI_CBC_CTRL     (*(__IO uint32_t*)0xF00083B4U) /**< \brief (ISI) Contrast and Brightness Control Register */
  #define REG_HXISI_CBC_CFG      (*(__IO uint32_t*)0xF00083B8U) /**< \brief (ISI) Contrast and Brightness Configuration Register */
  #define REG_HXISI_CBC_BRIGHT   (*(__IO uint32_t*)0xF00083BCU) /**< \brief (ISI) Contrast and Brightness, Brightness Register */
  #define REG_HXISI_CBC_CONTRAST (*(__IO uint32_t*)0xF00083C0U) /**< \brief (ISI) Contrast and Brightness, Contrast Register */
  #define REG_HXISI_SUB422_CTRL  (*(__IO uint32_t*)0xF00083C4U) /**< \brief (ISI) Subsampling 4:4:4 to 4:2:2 Control Register */
  #define REG_HXISI_SUB422_CFG   (*(__IO uint32_t*)0xF00083C8U) /**< \brief (ISI) Subsampling 4:4:4 to 4:2:2 Configuration Register */
  #define REG_HXISI_SUB420_CTRL  (*(__IO uint32_t*)0xF00083CCU) /**< \brief (ISI) Subsampling 4:2:2 to 4:2:0 Control Register */
  #define REG_HXISI_RLP_CFG      (*(__IO uint32_t*)0xF00083D0U) /**< \brief (ISI) Rounding, Limiting and Packing Config Register */
  #define REG_HXISI_HIS_CTRL     (*(__IO uint32_t*)0xF00083D4U) /**< \brief (ISI) Histogram Control Register */
  #define REG_HXISI_HIS_CFG      (*(__IO uint32_t*)0xF00083D8U) /**< \brief (ISI) Histogram Configuration Register */
  #define REG_HXISI_DCFG         (*(__IO uint32_t*)0xF00083E0U) /**< \brief (ISI) DMA Configuration Register */
  #define REG_HXISI_DCTRL        (*(__IO uint32_t*)0xF00083E4U) /**< \brief (ISI) DMA Control Register */
  #define REG_HXISI_DNDA         (*(__IO uint32_t*)0xF00083E8U) /**< \brief (ISI) DMA Descriptor Address Register */
  #define REG_HXISI_DAD0         (*(__IO uint32_t*)0xF00083ECU) /**< \brief (ISI) DMA Address 0 Register */
  #define REG_HXISI_DST0         (*(__IO uint32_t*)0xF00083F0U) /**< \brief (ISI) DMA Stride 0 Register */
  #define REG_HXISI_DAD1         (*(__IO uint32_t*)0xF00083F4U) /**< \brief (ISI) DMA Address 1 Register */
  #define REG_HXISI_DST1         (*(__IO uint32_t*)0xF00083F8U) /**< \brief (ISI) DMA Stride 1 Register */
  #define REG_HXISI_DAD2         (*(__IO uint32_t*)0xF00083FCU) /**< \brief (ISI) DMA Address 2 Register */
  #define REG_HXISI_DST2         (*(__IO uint32_t*)0xF0008400U) /**< \brief (ISI) DMA Stride 2 Register */
  #define REG_IPB_VERSION        (*(__I  uint32_t*)0xF000840CU) /**< \brief (ISI) Version Register */
  #define REG_HXISI_HIS_ENTRY    (*(__I  uint32_t*)0xF0008410U) /**< \brief (ISI) Histogram Entry */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for MPDDRC peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_MPDDRC_MR                               (0xF000C000U) /**< \brief (MPDDRC) MPDDRC Mode Register */
  #define REG_MPDDRC_RTR                              (0xF000C004U) /**< \brief (MPDDRC) MPDDRC Refresh Timer Register */
  #define REG_MPDDRC_CR                               (0xF000C008U) /**< \brief (MPDDRC) MPDDRC Configuration Register */
  #define REG_MPDDRC_TPR0                             (0xF000C00CU) /**< \brief (MPDDRC) MPDDRC Timing Parameter 0 Register */
  #define REG_MPDDRC_TPR1                             (0xF000C010U) /**< \brief (MPDDRC) MPDDRC Timing Parameter 1 Register */
  #define REG_MPDDRC_TPR2                             (0xF000C014U) /**< \brief (MPDDRC) MPDDRC Timing Parameter 2 Register */
  #define REG_MPDDRC_LPR                              (0xF000C01CU) /**< \brief (MPDDRC) MPDDRC Low-power Register */
  #define REG_MPDDRC_MD                               (0xF000C020U) /**< \brief (MPDDRC) MPDDRC Memory Device Register */
  #define REG_MPDDRC_HS                               (0xF000C024U) /**< \brief (MPDDRC) MPDDRC High Speed Register */
  #define REG_MPDDRC_LPDDR23_LPR                      (0xF000C028U) /**< \brief (MPDDRC) MPDDRC LPDDR2-LPDDR3 Low-power Register */
  #define REG_MPDDRC_LPDDR23_CAL_MR4                  (0xF000C02CU) /**< \brief (MPDDRC) MPDDRC LPDDR2-LPDDR3 Calibration and MR4 Register */
  #define REG_MPDDRC_LPDDR23_TIM_CAL                  (0xF000C030U) /**< \brief (MPDDRC) MPDDRC LPDDR2-LPDDR3 Timing Calibration Register */
  #define REG_MPDDRC_IO_CALIBR                        (0xF000C034U) /**< \brief (MPDDRC) MPDDRC IO Calibration */
  #define REG_MPDDRC_OCMS                             (0xF000C038U) /**< \brief (MPDDRC) MPDDRC OCMS Register */
  #define REG_MPDDRC_OCMS_KEY1                        (0xF000C03CU) /**< \brief (MPDDRC) MPDDRC OCMS KEY1 Register */
  #define REG_MPDDRC_OCMS_KEY2                        (0xF000C040U) /**< \brief (MPDDRC) MPDDRC OCMS KEY2 Register */
  #define REG_MPDDRC_CONF_ARBITER                     (0xF000C044U) /**< \brief (MPDDRC) MPDDRC Configuration Arbiter Register */
  #define REG_MPDDRC_TIMEOUT                          (0xF000C048U) /**< \brief (MPDDRC) MPDDRC Time-out Port 0/1/2/3 Register */
  #define REG_MPDDRC_REQ_PORT_0123                    (0xF000C04CU) /**< \brief (MPDDRC) MPDDRC Request Port 0/1/2/3 Register */
  #define REG_MPDDRC_REQ_PORT_4567                    (0xF000C050U) /**< \brief (MPDDRC) MPDDRC Request Port 4/5/6/7 Register */
  #define REG_MPDDRC_BDW_PORT_0123                    (0xF000C054U) /**< \brief (MPDDRC) MPDDRC Bandwidth Port 0/1/2/3 Register */
  #define REG_MPDDRC_BDW_PORT_4567                    (0xF000C058U) /**< \brief (MPDDRC) MPDDRC Bandwidth Port 4/5/6/7 Register */
  #define REG_MPDDRC_RD_DATA_PATH                     (0xF000C05CU) /**< \brief (MPDDRC) MPDDRC Read Datapath Register */
  #define REG_MPDDRC_MON_CONFIG                       (0xF000C060U) /**< \brief (MPDDRC) MPDDRC Monitor configuration */
  #define REG_MPDDRC_MON_ADDR_0                       (0xF000C064U) /**< \brief (MPDDRC) MPDDRC Monitor Address High/Low port 0 */
  #define REG_MPDDRC_MON_ADDR_1                       (0xF000C068U) /**< \brief (MPDDRC) MPDDRC Monitor Address High/Low port 1 */
  #define REG_MPDDRC_MON_ADDR_2                       (0xF000C06CU) /**< \brief (MPDDRC) MPDDRC Monitor Address High/Low port 2 */
  #define REG_MPDDRC_MON_ADDR_3                       (0xF000C070U) /**< \brief (MPDDRC) MPDDRC Monitor Address High/Low port 3 */
  #define REG_MPDDRC_MON_ADDR_4                       (0xF000C074U) /**< \brief (MPDDRC) MPDDRC Monitor Address High/Low port 4 */
  #define REG_MPDDRC_MON_ADDR_5                       (0xF000C078U) /**< \brief (MPDDRC) MPDDRC Monitor Address High/Low port 5 */
  #define REG_MPDDRC_MON_ADDR_6                       (0xF000C07CU) /**< \brief (MPDDRC) MPDDRC Monitor Address High/Low port 6 */
  #define REG_MPDDRC_MON_ADDR_7                       (0xF000C080U) /**< \brief (MPDDRC) MPDDRC Monitor Address High/Low port 7 */
  #define REG_MPDDRC_MON_INFO_0                       (0xF000C084U) /**< \brief (MPDDRC) MPDDRC Monitor Information port 0 */
  #define REG_MPDDRC_MON_INFO_1                       (0xF000C088U) /**< \brief (MPDDRC) MPDDRC Monitor Information port 1 */
  #define REG_MPDDRC_MON_INFO_2                       (0xF000C08CU) /**< \brief (MPDDRC) MPDDRC Monitor Information port 2 */
  #define REG_MPDDRC_MON_INFO_3                       (0xF000C090U) /**< \brief (MPDDRC) MPDDRC Monitor Information port 3 */
  #define REG_MPDDRC_MON_INFO_4                       (0xF000C094U) /**< \brief (MPDDRC) MPDDRC Monitor Information port 4 */
  #define REG_MPDDRC_MON_INFO_5                       (0xF000C098U) /**< \brief (MPDDRC) MPDDRC Monitor Information port 5 */
  #define REG_MPDDRC_MON_INFO_6                       (0xF000C09CU) /**< \brief (MPDDRC) MPDDRC Monitor Information port 6 */
  #define REG_MPDDRC_MON_INFO_7                       (0xF000C0A0U) /**< \brief (MPDDRC) MPDDRC Monitor Information port 7 */
  #define REG_MPDDRC_WPMR                             (0xF000C0E4U) /**< \brief (MPDDRC) MPDDRC Write Protection Mode Register */
  #define REG_MPDDRC_WPSR                             (0xF000C0E8U) /**< \brief (MPDDRC) MPDDRC Write Protection Status Register */
  #define REG_MPDDRC_ADDRSIZE                         (0xF000C0ECU) /**< \brief (MPDDRC) MPDDRC Address Size Register */
  #define REG_MPDDRC_IPNAME                           (0xF000C0F0U) /**< \brief (MPDDRC) MPDDRC IP Name 1 Register */
  #define REG_MPDDRC_FEATURES                         (0xF000C0F8U) /**< \brief (MPDDRC) MPDDRC Features Register */
  #define REG_MPDDRC_VERSION                          (0xF000C0FCU) /**< \brief (MPDDRC) MPDDRC Version Register */
  #define REG_MPDDRC_DLL_OS                           (0xF000C100U) /**< \brief (MPDDRC) MPDDRC DLL Offset Selection Register */
  #define REG_MPDDRC_DLL_MAO                          (0xF000C104U) /**< \brief (MPDDRC) MPDDRC DLL MASTER Offset Register */
  #define REG_MPDDRC_DLL_SO0                          (0xF000C108U) /**< \brief (MPDDRC) MPDDRC DLL SLAVE Offset 0 Register */
  #define REG_MPDDRC_DLL_SO1                          (0xF000C10CU) /**< \brief (MPDDRC) MPDDRC DLL SLAVE Offset 1 Register */
  #define REG_MPDDRC_DLL_WRO                          (0xF000C110U) /**< \brief (MPDDRC) MPDDRC DLL CLKWR Offset Register */
  #define REG_MPDDRC_DLL_ADO                          (0xF000C114U) /**< \brief (MPDDRC) MPDDRC DLL CLKAD Offset Register */
  #define REG_MPDDRC_DLL_SM                           (0xF000C118U) /**< \brief (MPDDRC) MPDDRC DLL Status MASTER0 Register */
  #define REG_MPDDRC_DLL_SSL                          (0xF000C128U) /**< \brief (MPDDRC) MPDDRC DLL Status SLAVE0 Register */
  #define REG_MPDDRC_DLL_SWR                          (0xF000C148U) /**< \brief (MPDDRC) MPDDRC DLL Status CLKWR0 Register */
  #define REG_MPDDRC_DLL_SAD                          (0xF000C158U) /**< \brief (MPDDRC) MPDDRC DLL Status CLKAD Register */
  #define REG_MPDDRC_DLL_BC                           (0xF000C1D0U) /**< \brief (MPDDRC) MPDDRC DLL BIST Control Register */
  #define REG_MPDDRC_DLL_BS                           (0xF000C1D4U) /**< \brief (MPDDRC) MPDDRC DLL BIST Status Register */
  #define REG_MPDDRC_DLL_REVISION                     (0xF000C1FCU) /**< \brief (MPDDRC) MPDDRC DLL Revision Register */
#else
  #define REG_MPDDRC_MR              (*(__IO uint32_t*)0xF000C000U) /**< \brief (MPDDRC) MPDDRC Mode Register */
  #define REG_MPDDRC_RTR             (*(__IO uint32_t*)0xF000C004U) /**< \brief (MPDDRC) MPDDRC Refresh Timer Register */
  #define REG_MPDDRC_CR              (*(__IO uint32_t*)0xF000C008U) /**< \brief (MPDDRC) MPDDRC Configuration Register */
  #define REG_MPDDRC_TPR0            (*(__IO uint32_t*)0xF000C00CU) /**< \brief (MPDDRC) MPDDRC Timing Parameter 0 Register */
  #define REG_MPDDRC_TPR1            (*(__IO uint32_t*)0xF000C010U) /**< \brief (MPDDRC) MPDDRC Timing Parameter 1 Register */
  #define REG_MPDDRC_TPR2            (*(__IO uint32_t*)0xF000C014U) /**< \brief (MPDDRC) MPDDRC Timing Parameter 2 Register */
  #define REG_MPDDRC_LPR             (*(__IO uint32_t*)0xF000C01CU) /**< \brief (MPDDRC) MPDDRC Low-power Register */
  #define REG_MPDDRC_MD              (*(__IO uint32_t*)0xF000C020U) /**< \brief (MPDDRC) MPDDRC Memory Device Register */
  #define REG_MPDDRC_HS              (*(__IO uint32_t*)0xF000C024U) /**< \brief (MPDDRC) MPDDRC High Speed Register */
  #define REG_MPDDRC_LPDDR23_LPR     (*(__IO uint32_t*)0xF000C028U) /**< \brief (MPDDRC) MPDDRC LPDDR2-LPDDR3 Low-power Register */
  #define REG_MPDDRC_LPDDR23_CAL_MR4 (*(__IO uint32_t*)0xF000C02CU) /**< \brief (MPDDRC) MPDDRC LPDDR2-LPDDR3 Calibration and MR4 Register */
  #define REG_MPDDRC_LPDDR23_TIM_CAL (*(__IO uint32_t*)0xF000C030U) /**< \brief (MPDDRC) MPDDRC LPDDR2-LPDDR3 Timing Calibration Register */
  #define REG_MPDDRC_IO_CALIBR       (*(__IO uint32_t*)0xF000C034U) /**< \brief (MPDDRC) MPDDRC IO Calibration */
  #define REG_MPDDRC_OCMS            (*(__IO uint32_t*)0xF000C038U) /**< \brief (MPDDRC) MPDDRC OCMS Register */
  #define REG_MPDDRC_OCMS_KEY1       (*(__O  uint32_t*)0xF000C03CU) /**< \brief (MPDDRC) MPDDRC OCMS KEY1 Register */
  #define REG_MPDDRC_OCMS_KEY2       (*(__O  uint32_t*)0xF000C040U) /**< \brief (MPDDRC) MPDDRC OCMS KEY2 Register */
  #define REG_MPDDRC_CONF_ARBITER    (*(__IO uint32_t*)0xF000C044U) /**< \brief (MPDDRC) MPDDRC Configuration Arbiter Register */
  #define REG_MPDDRC_TIMEOUT         (*(__IO uint32_t*)0xF000C048U) /**< \brief (MPDDRC) MPDDRC Time-out Port 0/1/2/3 Register */
  #define REG_MPDDRC_REQ_PORT_0123   (*(__IO uint32_t*)0xF000C04CU) /**< \brief (MPDDRC) MPDDRC Request Port 0/1/2/3 Register */
  #define REG_MPDDRC_REQ_PORT_4567   (*(__IO uint32_t*)0xF000C050U) /**< \brief (MPDDRC) MPDDRC Request Port 4/5/6/7 Register */
  #define REG_MPDDRC_BDW_PORT_0123   (*(__I  uint32_t*)0xF000C054U) /**< \brief (MPDDRC) MPDDRC Bandwidth Port 0/1/2/3 Register */
  #define REG_MPDDRC_BDW_PORT_4567   (*(__I  uint32_t*)0xF000C058U) /**< \brief (MPDDRC) MPDDRC Bandwidth Port 4/5/6/7 Register */
  #define REG_MPDDRC_RD_DATA_PATH    (*(__IO uint32_t*)0xF000C05CU) /**< \brief (MPDDRC) MPDDRC Read Datapath Register */
  #define REG_MPDDRC_MON_CONFIG      (*(__IO uint32_t*)0xF000C060U) /**< \brief (MPDDRC) MPDDRC Monitor configuration */
  #define REG_MPDDRC_MON_ADDR_0      (*(__IO uint32_t*)0xF000C064U) /**< \brief (MPDDRC) MPDDRC Monitor Address High/Low port 0 */
  #define REG_MPDDRC_MON_ADDR_1      (*(__IO uint32_t*)0xF000C068U) /**< \brief (MPDDRC) MPDDRC Monitor Address High/Low port 1 */
  #define REG_MPDDRC_MON_ADDR_2      (*(__IO uint32_t*)0xF000C06CU) /**< \brief (MPDDRC) MPDDRC Monitor Address High/Low port 2 */
  #define REG_MPDDRC_MON_ADDR_3      (*(__IO uint32_t*)0xF000C070U) /**< \brief (MPDDRC) MPDDRC Monitor Address High/Low port 3 */
  #define REG_MPDDRC_MON_ADDR_4      (*(__IO uint32_t*)0xF000C074U) /**< \brief (MPDDRC) MPDDRC Monitor Address High/Low port 4 */
  #define REG_MPDDRC_MON_ADDR_5      (*(__IO uint32_t*)0xF000C078U) /**< \brief (MPDDRC) MPDDRC Monitor Address High/Low port 5 */
  #define REG_MPDDRC_MON_ADDR_6      (*(__IO uint32_t*)0xF000C07CU) /**< \brief (MPDDRC) MPDDRC Monitor Address High/Low port 6 */
  #define REG_MPDDRC_MON_ADDR_7      (*(__IO uint32_t*)0xF000C080U) /**< \brief (MPDDRC) MPDDRC Monitor Address High/Low port 7 */
  #define REG_MPDDRC_MON_INFO_0      (*(__I  uint32_t*)0xF000C084U) /**< \brief (MPDDRC) MPDDRC Monitor Information port 0 */
  #define REG_MPDDRC_MON_INFO_1      (*(__I  uint32_t*)0xF000C088U) /**< \brief (MPDDRC) MPDDRC Monitor Information port 1 */
  #define REG_MPDDRC_MON_INFO_2      (*(__I  uint32_t*)0xF000C08CU) /**< \brief (MPDDRC) MPDDRC Monitor Information port 2 */
  #define REG_MPDDRC_MON_INFO_3      (*(__I  uint32_t*)0xF000C090U) /**< \brief (MPDDRC) MPDDRC Monitor Information port 3 */
  #define REG_MPDDRC_MON_INFO_4      (*(__I  uint32_t*)0xF000C094U) /**< \brief (MPDDRC) MPDDRC Monitor Information port 4 */
  #define REG_MPDDRC_MON_INFO_5      (*(__I  uint32_t*)0xF000C098U) /**< \brief (MPDDRC) MPDDRC Monitor Information port 5 */
  #define REG_MPDDRC_MON_INFO_6      (*(__I  uint32_t*)0xF000C09CU) /**< \brief (MPDDRC) MPDDRC Monitor Information port 6 */
  #define REG_MPDDRC_MON_INFO_7      (*(__I  uint32_t*)0xF000C0A0U) /**< \brief (MPDDRC) MPDDRC Monitor Information port 7 */
  #define REG_MPDDRC_WPMR            (*(__IO uint32_t*)0xF000C0E4U) /**< \brief (MPDDRC) MPDDRC Write Protection Mode Register */
  #define REG_MPDDRC_WPSR            (*(__I  uint32_t*)0xF000C0E8U) /**< \brief (MPDDRC) MPDDRC Write Protection Status Register */
  #define REG_MPDDRC_ADDRSIZE        (*(__I  uint32_t*)0xF000C0ECU) /**< \brief (MPDDRC) MPDDRC Address Size Register */
  #define REG_MPDDRC_IPNAME          (*(__I  uint32_t*)0xF000C0F0U) /**< \brief (MPDDRC) MPDDRC IP Name 1 Register */
  #define REG_MPDDRC_FEATURES        (*(__I  uint32_t*)0xF000C0F8U) /**< \brief (MPDDRC) MPDDRC Features Register */
  #define REG_MPDDRC_VERSION         (*(__I  uint32_t*)0xF000C0FCU) /**< \brief (MPDDRC) MPDDRC Version Register */
  #define REG_MPDDRC_DLL_OS          (*(__IO uint32_t*)0xF000C100U) /**< \brief (MPDDRC) MPDDRC DLL Offset Selection Register */
  #define REG_MPDDRC_DLL_MAO         (*(__IO uint32_t*)0xF000C104U) /**< \brief (MPDDRC) MPDDRC DLL MASTER Offset Register */
  #define REG_MPDDRC_DLL_SO0         (*(__IO uint32_t*)0xF000C108U) /**< \brief (MPDDRC) MPDDRC DLL SLAVE Offset 0 Register */
  #define REG_MPDDRC_DLL_SO1         (*(__IO uint32_t*)0xF000C10CU) /**< \brief (MPDDRC) MPDDRC DLL SLAVE Offset 1 Register */
  #define REG_MPDDRC_DLL_WRO         (*(__IO uint32_t*)0xF000C110U) /**< \brief (MPDDRC) MPDDRC DLL CLKWR Offset Register */
  #define REG_MPDDRC_DLL_ADO         (*(__IO uint32_t*)0xF000C114U) /**< \brief (MPDDRC) MPDDRC DLL CLKAD Offset Register */
  #define REG_MPDDRC_DLL_SM          (*(__I  uint32_t*)0xF000C118U) /**< \brief (MPDDRC) MPDDRC DLL Status MASTER0 Register */
  #define REG_MPDDRC_DLL_SSL         (*(__I  uint32_t*)0xF000C128U) /**< \brief (MPDDRC) MPDDRC DLL Status SLAVE0 Register */
  #define REG_MPDDRC_DLL_SWR         (*(__I  uint32_t*)0xF000C148U) /**< \brief (MPDDRC) MPDDRC DLL Status CLKWR0 Register */
  #define REG_MPDDRC_DLL_SAD         (*(__I  uint32_t*)0xF000C158U) /**< \brief (MPDDRC) MPDDRC DLL Status CLKAD Register */
  #define REG_MPDDRC_DLL_BC          (*(__O  uint32_t*)0xF000C1D0U) /**< \brief (MPDDRC) MPDDRC DLL BIST Control Register */
  #define REG_MPDDRC_DLL_BS          (*(__I  uint32_t*)0xF000C1D4U) /**< \brief (MPDDRC) MPDDRC DLL BIST Status Register */
  #define REG_MPDDRC_DLL_REVISION    (*(__I  uint32_t*)0xF000C1FCU) /**< \brief (MPDDRC) MPDDRC DLL Revision Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for XDMAC0 peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_XDMAC0_GTYPE                      (0xF0010000U) /**< \brief (XDMAC0) Global Type Register */
  #define REG_XDMAC0_GCFG                       (0xF0010004U) /**< \brief (XDMAC0) Global Configuration Register */
  #define REG_XDMAC0_GWAC                       (0xF0010008U) /**< \brief (XDMAC0) Global Weighted Arbiter Configuration Register */
  #define REG_XDMAC0_GIE                        (0xF001000CU) /**< \brief (XDMAC0) Global Interrupt Enable Register */
  #define REG_XDMAC0_GID                        (0xF0010010U) /**< \brief (XDMAC0) Global Interrupt Disable Register */
  #define REG_XDMAC0_GIM                        (0xF0010014U) /**< \brief (XDMAC0) Global Interrupt Mask Register */
  #define REG_XDMAC0_GIS                        (0xF0010018U) /**< \brief (XDMAC0) Global Interrupt Status Register */
  #define REG_XDMAC0_GE                         (0xF001001CU) /**< \brief (XDMAC0) Global Channel Enable Register */
  #define REG_XDMAC0_GD                         (0xF0010020U) /**< \brief (XDMAC0) Global Channel Disable Register */
  #define REG_XDMAC0_GS                         (0xF0010024U) /**< \brief (XDMAC0) Global Channel Status Register */
  #define REG_XDMAC0_GRS                        (0xF0010028U) /**< \brief (XDMAC0) Global Channel Read Suspend Register */
  #define REG_XDMAC0_GWS                        (0xF001002CU) /**< \brief (XDMAC0) Global Channel Write Suspend Register */
  #define REG_XDMAC0_GRWS                       (0xF0010030U) /**< \brief (XDMAC0) Global Channel Read Write Suspend Register */
  #define REG_XDMAC0_GRWR                       (0xF0010034U) /**< \brief (XDMAC0) Global Channel Read Write Resume Register */
  #define REG_XDMAC0_GSWR                       (0xF0010038U) /**< \brief (XDMAC0) Global Channel Software Request Register */
  #define REG_XDMAC0_GSWS                       (0xF001003CU) /**< \brief (XDMAC0) Global Channel Software Request Status Register */
  #define REG_XDMAC0_GSWF                       (0xF0010040U) /**< \brief (XDMAC0) Global Channel Software Flush Request Register */
  #define REG_XDMAC0_CIE0                       (0xF0010050U) /**< \brief (XDMAC0) Channel Interrupt Enable Register (chid = 0) */
  #define REG_XDMAC0_CID0                       (0xF0010054U) /**< \brief (XDMAC0) Channel Interrupt Disable Register (chid = 0) */
  #define REG_XDMAC0_CIM0                       (0xF0010058U) /**< \brief (XDMAC0) Channel Interrupt Mask Register (chid = 0) */
  #define REG_XDMAC0_CIS0                       (0xF001005CU) /**< \brief (XDMAC0) Channel Interrupt Status Register (chid = 0) */
  #define REG_XDMAC0_CSA0                       (0xF0010060U) /**< \brief (XDMAC0) Channel Source Address Register (chid = 0) */
  #define REG_XDMAC0_CDA0                       (0xF0010064U) /**< \brief (XDMAC0) Channel Destination Address Register (chid = 0) */
  #define REG_XDMAC0_CNDA0                      (0xF0010068U) /**< \brief (XDMAC0) Channel Next Descriptor Address Register (chid = 0) */
  #define REG_XDMAC0_CNDC0                      (0xF001006CU) /**< \brief (XDMAC0) Channel Next Descriptor Control Register (chid = 0) */
  #define REG_XDMAC0_CUBC0                      (0xF0010070U) /**< \brief (XDMAC0) Channel Microblock Control Register (chid = 0) */
  #define REG_XDMAC0_CBC0                       (0xF0010074U) /**< \brief (XDMAC0) Channel Block Control Register (chid = 0) */
  #define REG_XDMAC0_CC0                        (0xF0010078U) /**< \brief (XDMAC0) Channel Configuration Register (chid = 0) */
  #define REG_XDMAC0_CDS_MSP0                   (0xF001007CU) /**< \brief (XDMAC0) Channel Data Stride Memory Set Pattern (chid = 0) */
  #define REG_XDMAC0_CSUS0                      (0xF0010080U) /**< \brief (XDMAC0) Channel Source Microblock Stride (chid = 0) */
  #define REG_XDMAC0_CDUS0                      (0xF0010084U) /**< \brief (XDMAC0) Channel Destination Microblock Stride (chid = 0) */
  #define REG_XDMAC0_CIE1                       (0xF0010090U) /**< \brief (XDMAC0) Channel Interrupt Enable Register (chid = 1) */
  #define REG_XDMAC0_CID1                       (0xF0010094U) /**< \brief (XDMAC0) Channel Interrupt Disable Register (chid = 1) */
  #define REG_XDMAC0_CIM1                       (0xF0010098U) /**< \brief (XDMAC0) Channel Interrupt Mask Register (chid = 1) */
  #define REG_XDMAC0_CIS1                       (0xF001009CU) /**< \brief (XDMAC0) Channel Interrupt Status Register (chid = 1) */
  #define REG_XDMAC0_CSA1                       (0xF00100A0U) /**< \brief (XDMAC0) Channel Source Address Register (chid = 1) */
  #define REG_XDMAC0_CDA1                       (0xF00100A4U) /**< \brief (XDMAC0) Channel Destination Address Register (chid = 1) */
  #define REG_XDMAC0_CNDA1                      (0xF00100A8U) /**< \brief (XDMAC0) Channel Next Descriptor Address Register (chid = 1) */
  #define REG_XDMAC0_CNDC1                      (0xF00100ACU) /**< \brief (XDMAC0) Channel Next Descriptor Control Register (chid = 1) */
  #define REG_XDMAC0_CUBC1                      (0xF00100B0U) /**< \brief (XDMAC0) Channel Microblock Control Register (chid = 1) */
  #define REG_XDMAC0_CBC1                       (0xF00100B4U) /**< \brief (XDMAC0) Channel Block Control Register (chid = 1) */
  #define REG_XDMAC0_CC1                        (0xF00100B8U) /**< \brief (XDMAC0) Channel Configuration Register (chid = 1) */
  #define REG_XDMAC0_CDS_MSP1                   (0xF00100BCU) /**< \brief (XDMAC0) Channel Data Stride Memory Set Pattern (chid = 1) */
  #define REG_XDMAC0_CSUS1                      (0xF00100C0U) /**< \brief (XDMAC0) Channel Source Microblock Stride (chid = 1) */
  #define REG_XDMAC0_CDUS1                      (0xF00100C4U) /**< \brief (XDMAC0) Channel Destination Microblock Stride (chid = 1) */
  #define REG_XDMAC0_CIE2                       (0xF00100D0U) /**< \brief (XDMAC0) Channel Interrupt Enable Register (chid = 2) */
  #define REG_XDMAC0_CID2                       (0xF00100D4U) /**< \brief (XDMAC0) Channel Interrupt Disable Register (chid = 2) */
  #define REG_XDMAC0_CIM2                       (0xF00100D8U) /**< \brief (XDMAC0) Channel Interrupt Mask Register (chid = 2) */
  #define REG_XDMAC0_CIS2                       (0xF00100DCU) /**< \brief (XDMAC0) Channel Interrupt Status Register (chid = 2) */
  #define REG_XDMAC0_CSA2                       (0xF00100E0U) /**< \brief (XDMAC0) Channel Source Address Register (chid = 2) */
  #define REG_XDMAC0_CDA2                       (0xF00100E4U) /**< \brief (XDMAC0) Channel Destination Address Register (chid = 2) */
  #define REG_XDMAC0_CNDA2                      (0xF00100E8U) /**< \brief (XDMAC0) Channel Next Descriptor Address Register (chid = 2) */
  #define REG_XDMAC0_CNDC2                      (0xF00100ECU) /**< \brief (XDMAC0) Channel Next Descriptor Control Register (chid = 2) */
  #define REG_XDMAC0_CUBC2                      (0xF00100F0U) /**< \brief (XDMAC0) Channel Microblock Control Register (chid = 2) */
  #define REG_XDMAC0_CBC2                       (0xF00100F4U) /**< \brief (XDMAC0) Channel Block Control Register (chid = 2) */
  #define REG_XDMAC0_CC2                        (0xF00100F8U) /**< \brief (XDMAC0) Channel Configuration Register (chid = 2) */
  #define REG_XDMAC0_CDS_MSP2                   (0xF00100FCU) /**< \brief (XDMAC0) Channel Data Stride Memory Set Pattern (chid = 2) */
  #define REG_XDMAC0_CSUS2                      (0xF0010100U) /**< \brief (XDMAC0) Channel Source Microblock Stride (chid = 2) */
  #define REG_XDMAC0_CDUS2                      (0xF0010104U) /**< \brief (XDMAC0) Channel Destination Microblock Stride (chid = 2) */
  #define REG_XDMAC0_CIE3                       (0xF0010110U) /**< \brief (XDMAC0) Channel Interrupt Enable Register (chid = 3) */
  #define REG_XDMAC0_CID3                       (0xF0010114U) /**< \brief (XDMAC0) Channel Interrupt Disable Register (chid = 3) */
  #define REG_XDMAC0_CIM3                       (0xF0010118U) /**< \brief (XDMAC0) Channel Interrupt Mask Register (chid = 3) */
  #define REG_XDMAC0_CIS3                       (0xF001011CU) /**< \brief (XDMAC0) Channel Interrupt Status Register (chid = 3) */
  #define REG_XDMAC0_CSA3                       (0xF0010120U) /**< \brief (XDMAC0) Channel Source Address Register (chid = 3) */
  #define REG_XDMAC0_CDA3                       (0xF0010124U) /**< \brief (XDMAC0) Channel Destination Address Register (chid = 3) */
  #define REG_XDMAC0_CNDA3                      (0xF0010128U) /**< \brief (XDMAC0) Channel Next Descriptor Address Register (chid = 3) */
  #define REG_XDMAC0_CNDC3                      (0xF001012CU) /**< \brief (XDMAC0) Channel Next Descriptor Control Register (chid = 3) */
  #define REG_XDMAC0_CUBC3                      (0xF0010130U) /**< \brief (XDMAC0) Channel Microblock Control Register (chid = 3) */
  #define REG_XDMAC0_CBC3                       (0xF0010134U) /**< \brief (XDMAC0) Channel Block Control Register (chid = 3) */
  #define REG_XDMAC0_CC3                        (0xF0010138U) /**< \brief (XDMAC0) Channel Configuration Register (chid = 3) */
  #define REG_XDMAC0_CDS_MSP3                   (0xF001013CU) /**< \brief (XDMAC0) Channel Data Stride Memory Set Pattern (chid = 3) */
  #define REG_XDMAC0_CSUS3                      (0xF0010140U) /**< \brief (XDMAC0) Channel Source Microblock Stride (chid = 3) */
  #define REG_XDMAC0_CDUS3                      (0xF0010144U) /**< \brief (XDMAC0) Channel Destination Microblock Stride (chid = 3) */
  #define REG_XDMAC0_CIE4                       (0xF0010150U) /**< \brief (XDMAC0) Channel Interrupt Enable Register (chid = 4) */
  #define REG_XDMAC0_CID4                       (0xF0010154U) /**< \brief (XDMAC0) Channel Interrupt Disable Register (chid = 4) */
  #define REG_XDMAC0_CIM4                       (0xF0010158U) /**< \brief (XDMAC0) Channel Interrupt Mask Register (chid = 4) */
  #define REG_XDMAC0_CIS4                       (0xF001015CU) /**< \brief (XDMAC0) Channel Interrupt Status Register (chid = 4) */
  #define REG_XDMAC0_CSA4                       (0xF0010160U) /**< \brief (XDMAC0) Channel Source Address Register (chid = 4) */
  #define REG_XDMAC0_CDA4                       (0xF0010164U) /**< \brief (XDMAC0) Channel Destination Address Register (chid = 4) */
  #define REG_XDMAC0_CNDA4                      (0xF0010168U) /**< \brief (XDMAC0) Channel Next Descriptor Address Register (chid = 4) */
  #define REG_XDMAC0_CNDC4                      (0xF001016CU) /**< \brief (XDMAC0) Channel Next Descriptor Control Register (chid = 4) */
  #define REG_XDMAC0_CUBC4                      (0xF0010170U) /**< \brief (XDMAC0) Channel Microblock Control Register (chid = 4) */
  #define REG_XDMAC0_CBC4                       (0xF0010174U) /**< \brief (XDMAC0) Channel Block Control Register (chid = 4) */
  #define REG_XDMAC0_CC4                        (0xF0010178U) /**< \brief (XDMAC0) Channel Configuration Register (chid = 4) */
  #define REG_XDMAC0_CDS_MSP4                   (0xF001017CU) /**< \brief (XDMAC0) Channel Data Stride Memory Set Pattern (chid = 4) */
  #define REG_XDMAC0_CSUS4                      (0xF0010180U) /**< \brief (XDMAC0) Channel Source Microblock Stride (chid = 4) */
  #define REG_XDMAC0_CDUS4                      (0xF0010184U) /**< \brief (XDMAC0) Channel Destination Microblock Stride (chid = 4) */
  #define REG_XDMAC0_CIE5                       (0xF0010190U) /**< \brief (XDMAC0) Channel Interrupt Enable Register (chid = 5) */
  #define REG_XDMAC0_CID5                       (0xF0010194U) /**< \brief (XDMAC0) Channel Interrupt Disable Register (chid = 5) */
  #define REG_XDMAC0_CIM5                       (0xF0010198U) /**< \brief (XDMAC0) Channel Interrupt Mask Register (chid = 5) */
  #define REG_XDMAC0_CIS5                       (0xF001019CU) /**< \brief (XDMAC0) Channel Interrupt Status Register (chid = 5) */
  #define REG_XDMAC0_CSA5                       (0xF00101A0U) /**< \brief (XDMAC0) Channel Source Address Register (chid = 5) */
  #define REG_XDMAC0_CDA5                       (0xF00101A4U) /**< \brief (XDMAC0) Channel Destination Address Register (chid = 5) */
  #define REG_XDMAC0_CNDA5                      (0xF00101A8U) /**< \brief (XDMAC0) Channel Next Descriptor Address Register (chid = 5) */
  #define REG_XDMAC0_CNDC5                      (0xF00101ACU) /**< \brief (XDMAC0) Channel Next Descriptor Control Register (chid = 5) */
  #define REG_XDMAC0_CUBC5                      (0xF00101B0U) /**< \brief (XDMAC0) Channel Microblock Control Register (chid = 5) */
  #define REG_XDMAC0_CBC5                       (0xF00101B4U) /**< \brief (XDMAC0) Channel Block Control Register (chid = 5) */
  #define REG_XDMAC0_CC5                        (0xF00101B8U) /**< \brief (XDMAC0) Channel Configuration Register (chid = 5) */
  #define REG_XDMAC0_CDS_MSP5                   (0xF00101BCU) /**< \brief (XDMAC0) Channel Data Stride Memory Set Pattern (chid = 5) */
  #define REG_XDMAC0_CSUS5                      (0xF00101C0U) /**< \brief (XDMAC0) Channel Source Microblock Stride (chid = 5) */
  #define REG_XDMAC0_CDUS5                      (0xF00101C4U) /**< \brief (XDMAC0) Channel Destination Microblock Stride (chid = 5) */
  #define REG_XDMAC0_CIE6                       (0xF00101D0U) /**< \brief (XDMAC0) Channel Interrupt Enable Register (chid = 6) */
  #define REG_XDMAC0_CID6                       (0xF00101D4U) /**< \brief (XDMAC0) Channel Interrupt Disable Register (chid = 6) */
  #define REG_XDMAC0_CIM6                       (0xF00101D8U) /**< \brief (XDMAC0) Channel Interrupt Mask Register (chid = 6) */
  #define REG_XDMAC0_CIS6                       (0xF00101DCU) /**< \brief (XDMAC0) Channel Interrupt Status Register (chid = 6) */
  #define REG_XDMAC0_CSA6                       (0xF00101E0U) /**< \brief (XDMAC0) Channel Source Address Register (chid = 6) */
  #define REG_XDMAC0_CDA6                       (0xF00101E4U) /**< \brief (XDMAC0) Channel Destination Address Register (chid = 6) */
  #define REG_XDMAC0_CNDA6                      (0xF00101E8U) /**< \brief (XDMAC0) Channel Next Descriptor Address Register (chid = 6) */
  #define REG_XDMAC0_CNDC6                      (0xF00101ECU) /**< \brief (XDMAC0) Channel Next Descriptor Control Register (chid = 6) */
  #define REG_XDMAC0_CUBC6                      (0xF00101F0U) /**< \brief (XDMAC0) Channel Microblock Control Register (chid = 6) */
  #define REG_XDMAC0_CBC6                       (0xF00101F4U) /**< \brief (XDMAC0) Channel Block Control Register (chid = 6) */
  #define REG_XDMAC0_CC6                        (0xF00101F8U) /**< \brief (XDMAC0) Channel Configuration Register (chid = 6) */
  #define REG_XDMAC0_CDS_MSP6                   (0xF00101FCU) /**< \brief (XDMAC0) Channel Data Stride Memory Set Pattern (chid = 6) */
  #define REG_XDMAC0_CSUS6                      (0xF0010200U) /**< \brief (XDMAC0) Channel Source Microblock Stride (chid = 6) */
  #define REG_XDMAC0_CDUS6                      (0xF0010204U) /**< \brief (XDMAC0) Channel Destination Microblock Stride (chid = 6) */
  #define REG_XDMAC0_CIE7                       (0xF0010210U) /**< \brief (XDMAC0) Channel Interrupt Enable Register (chid = 7) */
  #define REG_XDMAC0_CID7                       (0xF0010214U) /**< \brief (XDMAC0) Channel Interrupt Disable Register (chid = 7) */
  #define REG_XDMAC0_CIM7                       (0xF0010218U) /**< \brief (XDMAC0) Channel Interrupt Mask Register (chid = 7) */
  #define REG_XDMAC0_CIS7                       (0xF001021CU) /**< \brief (XDMAC0) Channel Interrupt Status Register (chid = 7) */
  #define REG_XDMAC0_CSA7                       (0xF0010220U) /**< \brief (XDMAC0) Channel Source Address Register (chid = 7) */
  #define REG_XDMAC0_CDA7                       (0xF0010224U) /**< \brief (XDMAC0) Channel Destination Address Register (chid = 7) */
  #define REG_XDMAC0_CNDA7                      (0xF0010228U) /**< \brief (XDMAC0) Channel Next Descriptor Address Register (chid = 7) */
  #define REG_XDMAC0_CNDC7                      (0xF001022CU) /**< \brief (XDMAC0) Channel Next Descriptor Control Register (chid = 7) */
  #define REG_XDMAC0_CUBC7                      (0xF0010230U) /**< \brief (XDMAC0) Channel Microblock Control Register (chid = 7) */
  #define REG_XDMAC0_CBC7                       (0xF0010234U) /**< \brief (XDMAC0) Channel Block Control Register (chid = 7) */
  #define REG_XDMAC0_CC7                        (0xF0010238U) /**< \brief (XDMAC0) Channel Configuration Register (chid = 7) */
  #define REG_XDMAC0_CDS_MSP7                   (0xF001023CU) /**< \brief (XDMAC0) Channel Data Stride Memory Set Pattern (chid = 7) */
  #define REG_XDMAC0_CSUS7                      (0xF0010240U) /**< \brief (XDMAC0) Channel Source Microblock Stride (chid = 7) */
  #define REG_XDMAC0_CDUS7                      (0xF0010244U) /**< \brief (XDMAC0) Channel Destination Microblock Stride (chid = 7) */
  #define REG_XDMAC0_CIE8                       (0xF0010250U) /**< \brief (XDMAC0) Channel Interrupt Enable Register (chid = 8) */
  #define REG_XDMAC0_CID8                       (0xF0010254U) /**< \brief (XDMAC0) Channel Interrupt Disable Register (chid = 8) */
  #define REG_XDMAC0_CIM8                       (0xF0010258U) /**< \brief (XDMAC0) Channel Interrupt Mask Register (chid = 8) */
  #define REG_XDMAC0_CIS8                       (0xF001025CU) /**< \brief (XDMAC0) Channel Interrupt Status Register (chid = 8) */
  #define REG_XDMAC0_CSA8                       (0xF0010260U) /**< \brief (XDMAC0) Channel Source Address Register (chid = 8) */
  #define REG_XDMAC0_CDA8                       (0xF0010264U) /**< \brief (XDMAC0) Channel Destination Address Register (chid = 8) */
  #define REG_XDMAC0_CNDA8                      (0xF0010268U) /**< \brief (XDMAC0) Channel Next Descriptor Address Register (chid = 8) */
  #define REG_XDMAC0_CNDC8                      (0xF001026CU) /**< \brief (XDMAC0) Channel Next Descriptor Control Register (chid = 8) */
  #define REG_XDMAC0_CUBC8                      (0xF0010270U) /**< \brief (XDMAC0) Channel Microblock Control Register (chid = 8) */
  #define REG_XDMAC0_CBC8                       (0xF0010274U) /**< \brief (XDMAC0) Channel Block Control Register (chid = 8) */
  #define REG_XDMAC0_CC8                        (0xF0010278U) /**< \brief (XDMAC0) Channel Configuration Register (chid = 8) */
  #define REG_XDMAC0_CDS_MSP8                   (0xF001027CU) /**< \brief (XDMAC0) Channel Data Stride Memory Set Pattern (chid = 8) */
  #define REG_XDMAC0_CSUS8                      (0xF0010280U) /**< \brief (XDMAC0) Channel Source Microblock Stride (chid = 8) */
  #define REG_XDMAC0_CDUS8                      (0xF0010284U) /**< \brief (XDMAC0) Channel Destination Microblock Stride (chid = 8) */
  #define REG_XDMAC0_CIE9                       (0xF0010290U) /**< \brief (XDMAC0) Channel Interrupt Enable Register (chid = 9) */
  #define REG_XDMAC0_CID9                       (0xF0010294U) /**< \brief (XDMAC0) Channel Interrupt Disable Register (chid = 9) */
  #define REG_XDMAC0_CIM9                       (0xF0010298U) /**< \brief (XDMAC0) Channel Interrupt Mask Register (chid = 9) */
  #define REG_XDMAC0_CIS9                       (0xF001029CU) /**< \brief (XDMAC0) Channel Interrupt Status Register (chid = 9) */
  #define REG_XDMAC0_CSA9                       (0xF00102A0U) /**< \brief (XDMAC0) Channel Source Address Register (chid = 9) */
  #define REG_XDMAC0_CDA9                       (0xF00102A4U) /**< \brief (XDMAC0) Channel Destination Address Register (chid = 9) */
  #define REG_XDMAC0_CNDA9                      (0xF00102A8U) /**< \brief (XDMAC0) Channel Next Descriptor Address Register (chid = 9) */
  #define REG_XDMAC0_CNDC9                      (0xF00102ACU) /**< \brief (XDMAC0) Channel Next Descriptor Control Register (chid = 9) */
  #define REG_XDMAC0_CUBC9                      (0xF00102B0U) /**< \brief (XDMAC0) Channel Microblock Control Register (chid = 9) */
  #define REG_XDMAC0_CBC9                       (0xF00102B4U) /**< \brief (XDMAC0) Channel Block Control Register (chid = 9) */
  #define REG_XDMAC0_CC9                        (0xF00102B8U) /**< \brief (XDMAC0) Channel Configuration Register (chid = 9) */
  #define REG_XDMAC0_CDS_MSP9                   (0xF00102BCU) /**< \brief (XDMAC0) Channel Data Stride Memory Set Pattern (chid = 9) */
  #define REG_XDMAC0_CSUS9                      (0xF00102C0U) /**< \brief (XDMAC0) Channel Source Microblock Stride (chid = 9) */
  #define REG_XDMAC0_CDUS9                      (0xF00102C4U) /**< \brief (XDMAC0) Channel Destination Microblock Stride (chid = 9) */
  #define REG_XDMAC0_CIE10                      (0xF00102D0U) /**< \brief (XDMAC0) Channel Interrupt Enable Register (chid = 10) */
  #define REG_XDMAC0_CID10                      (0xF00102D4U) /**< \brief (XDMAC0) Channel Interrupt Disable Register (chid = 10) */
  #define REG_XDMAC0_CIM10                      (0xF00102D8U) /**< \brief (XDMAC0) Channel Interrupt Mask Register (chid = 10) */
  #define REG_XDMAC0_CIS10                      (0xF00102DCU) /**< \brief (XDMAC0) Channel Interrupt Status Register (chid = 10) */
  #define REG_XDMAC0_CSA10                      (0xF00102E0U) /**< \brief (XDMAC0) Channel Source Address Register (chid = 10) */
  #define REG_XDMAC0_CDA10                      (0xF00102E4U) /**< \brief (XDMAC0) Channel Destination Address Register (chid = 10) */
  #define REG_XDMAC0_CNDA10                     (0xF00102E8U) /**< \brief (XDMAC0) Channel Next Descriptor Address Register (chid = 10) */
  #define REG_XDMAC0_CNDC10                     (0xF00102ECU) /**< \brief (XDMAC0) Channel Next Descriptor Control Register (chid = 10) */
  #define REG_XDMAC0_CUBC10                     (0xF00102F0U) /**< \brief (XDMAC0) Channel Microblock Control Register (chid = 10) */
  #define REG_XDMAC0_CBC10                      (0xF00102F4U) /**< \brief (XDMAC0) Channel Block Control Register (chid = 10) */
  #define REG_XDMAC0_CC10                       (0xF00102F8U) /**< \brief (XDMAC0) Channel Configuration Register (chid = 10) */
  #define REG_XDMAC0_CDS_MSP10                  (0xF00102FCU) /**< \brief (XDMAC0) Channel Data Stride Memory Set Pattern (chid = 10) */
  #define REG_XDMAC0_CSUS10                     (0xF0010300U) /**< \brief (XDMAC0) Channel Source Microblock Stride (chid = 10) */
  #define REG_XDMAC0_CDUS10                     (0xF0010304U) /**< \brief (XDMAC0) Channel Destination Microblock Stride (chid = 10) */
  #define REG_XDMAC0_CIE11                      (0xF0010310U) /**< \brief (XDMAC0) Channel Interrupt Enable Register (chid = 11) */
  #define REG_XDMAC0_CID11                      (0xF0010314U) /**< \brief (XDMAC0) Channel Interrupt Disable Register (chid = 11) */
  #define REG_XDMAC0_CIM11                      (0xF0010318U) /**< \brief (XDMAC0) Channel Interrupt Mask Register (chid = 11) */
  #define REG_XDMAC0_CIS11                      (0xF001031CU) /**< \brief (XDMAC0) Channel Interrupt Status Register (chid = 11) */
  #define REG_XDMAC0_CSA11                      (0xF0010320U) /**< \brief (XDMAC0) Channel Source Address Register (chid = 11) */
  #define REG_XDMAC0_CDA11                      (0xF0010324U) /**< \brief (XDMAC0) Channel Destination Address Register (chid = 11) */
  #define REG_XDMAC0_CNDA11                     (0xF0010328U) /**< \brief (XDMAC0) Channel Next Descriptor Address Register (chid = 11) */
  #define REG_XDMAC0_CNDC11                     (0xF001032CU) /**< \brief (XDMAC0) Channel Next Descriptor Control Register (chid = 11) */
  #define REG_XDMAC0_CUBC11                     (0xF0010330U) /**< \brief (XDMAC0) Channel Microblock Control Register (chid = 11) */
  #define REG_XDMAC0_CBC11                      (0xF0010334U) /**< \brief (XDMAC0) Channel Block Control Register (chid = 11) */
  #define REG_XDMAC0_CC11                       (0xF0010338U) /**< \brief (XDMAC0) Channel Configuration Register (chid = 11) */
  #define REG_XDMAC0_CDS_MSP11                  (0xF001033CU) /**< \brief (XDMAC0) Channel Data Stride Memory Set Pattern (chid = 11) */
  #define REG_XDMAC0_CSUS11                     (0xF0010340U) /**< \brief (XDMAC0) Channel Source Microblock Stride (chid = 11) */
  #define REG_XDMAC0_CDUS11                     (0xF0010344U) /**< \brief (XDMAC0) Channel Destination Microblock Stride (chid = 11) */
  #define REG_XDMAC0_CIE12                      (0xF0010350U) /**< \brief (XDMAC0) Channel Interrupt Enable Register (chid = 12) */
  #define REG_XDMAC0_CID12                      (0xF0010354U) /**< \brief (XDMAC0) Channel Interrupt Disable Register (chid = 12) */
  #define REG_XDMAC0_CIM12                      (0xF0010358U) /**< \brief (XDMAC0) Channel Interrupt Mask Register (chid = 12) */
  #define REG_XDMAC0_CIS12                      (0xF001035CU) /**< \brief (XDMAC0) Channel Interrupt Status Register (chid = 12) */
  #define REG_XDMAC0_CSA12                      (0xF0010360U) /**< \brief (XDMAC0) Channel Source Address Register (chid = 12) */
  #define REG_XDMAC0_CDA12                      (0xF0010364U) /**< \brief (XDMAC0) Channel Destination Address Register (chid = 12) */
  #define REG_XDMAC0_CNDA12                     (0xF0010368U) /**< \brief (XDMAC0) Channel Next Descriptor Address Register (chid = 12) */
  #define REG_XDMAC0_CNDC12                     (0xF001036CU) /**< \brief (XDMAC0) Channel Next Descriptor Control Register (chid = 12) */
  #define REG_XDMAC0_CUBC12                     (0xF0010370U) /**< \brief (XDMAC0) Channel Microblock Control Register (chid = 12) */
  #define REG_XDMAC0_CBC12                      (0xF0010374U) /**< \brief (XDMAC0) Channel Block Control Register (chid = 12) */
  #define REG_XDMAC0_CC12                       (0xF0010378U) /**< \brief (XDMAC0) Channel Configuration Register (chid = 12) */
  #define REG_XDMAC0_CDS_MSP12                  (0xF001037CU) /**< \brief (XDMAC0) Channel Data Stride Memory Set Pattern (chid = 12) */
  #define REG_XDMAC0_CSUS12                     (0xF0010380U) /**< \brief (XDMAC0) Channel Source Microblock Stride (chid = 12) */
  #define REG_XDMAC0_CDUS12                     (0xF0010384U) /**< \brief (XDMAC0) Channel Destination Microblock Stride (chid = 12) */
  #define REG_XDMAC0_CIE13                      (0xF0010390U) /**< \brief (XDMAC0) Channel Interrupt Enable Register (chid = 13) */
  #define REG_XDMAC0_CID13                      (0xF0010394U) /**< \brief (XDMAC0) Channel Interrupt Disable Register (chid = 13) */
  #define REG_XDMAC0_CIM13                      (0xF0010398U) /**< \brief (XDMAC0) Channel Interrupt Mask Register (chid = 13) */
  #define REG_XDMAC0_CIS13                      (0xF001039CU) /**< \brief (XDMAC0) Channel Interrupt Status Register (chid = 13) */
  #define REG_XDMAC0_CSA13                      (0xF00103A0U) /**< \brief (XDMAC0) Channel Source Address Register (chid = 13) */
  #define REG_XDMAC0_CDA13                      (0xF00103A4U) /**< \brief (XDMAC0) Channel Destination Address Register (chid = 13) */
  #define REG_XDMAC0_CNDA13                     (0xF00103A8U) /**< \brief (XDMAC0) Channel Next Descriptor Address Register (chid = 13) */
  #define REG_XDMAC0_CNDC13                     (0xF00103ACU) /**< \brief (XDMAC0) Channel Next Descriptor Control Register (chid = 13) */
  #define REG_XDMAC0_CUBC13                     (0xF00103B0U) /**< \brief (XDMAC0) Channel Microblock Control Register (chid = 13) */
  #define REG_XDMAC0_CBC13                      (0xF00103B4U) /**< \brief (XDMAC0) Channel Block Control Register (chid = 13) */
  #define REG_XDMAC0_CC13                       (0xF00103B8U) /**< \brief (XDMAC0) Channel Configuration Register (chid = 13) */
  #define REG_XDMAC0_CDS_MSP13                  (0xF00103BCU) /**< \brief (XDMAC0) Channel Data Stride Memory Set Pattern (chid = 13) */
  #define REG_XDMAC0_CSUS13                     (0xF00103C0U) /**< \brief (XDMAC0) Channel Source Microblock Stride (chid = 13) */
  #define REG_XDMAC0_CDUS13                     (0xF00103C4U) /**< \brief (XDMAC0) Channel Destination Microblock Stride (chid = 13) */
  #define REG_XDMAC0_CIE14                      (0xF00103D0U) /**< \brief (XDMAC0) Channel Interrupt Enable Register (chid = 14) */
  #define REG_XDMAC0_CID14                      (0xF00103D4U) /**< \brief (XDMAC0) Channel Interrupt Disable Register (chid = 14) */
  #define REG_XDMAC0_CIM14                      (0xF00103D8U) /**< \brief (XDMAC0) Channel Interrupt Mask Register (chid = 14) */
  #define REG_XDMAC0_CIS14                      (0xF00103DCU) /**< \brief (XDMAC0) Channel Interrupt Status Register (chid = 14) */
  #define REG_XDMAC0_CSA14                      (0xF00103E0U) /**< \brief (XDMAC0) Channel Source Address Register (chid = 14) */
  #define REG_XDMAC0_CDA14                      (0xF00103E4U) /**< \brief (XDMAC0) Channel Destination Address Register (chid = 14) */
  #define REG_XDMAC0_CNDA14                     (0xF00103E8U) /**< \brief (XDMAC0) Channel Next Descriptor Address Register (chid = 14) */
  #define REG_XDMAC0_CNDC14                     (0xF00103ECU) /**< \brief (XDMAC0) Channel Next Descriptor Control Register (chid = 14) */
  #define REG_XDMAC0_CUBC14                     (0xF00103F0U) /**< \brief (XDMAC0) Channel Microblock Control Register (chid = 14) */
  #define REG_XDMAC0_CBC14                      (0xF00103F4U) /**< \brief (XDMAC0) Channel Block Control Register (chid = 14) */
  #define REG_XDMAC0_CC14                       (0xF00103F8U) /**< \brief (XDMAC0) Channel Configuration Register (chid = 14) */
  #define REG_XDMAC0_CDS_MSP14                  (0xF00103FCU) /**< \brief (XDMAC0) Channel Data Stride Memory Set Pattern (chid = 14) */
  #define REG_XDMAC0_CSUS14                     (0xF0010400U) /**< \brief (XDMAC0) Channel Source Microblock Stride (chid = 14) */
  #define REG_XDMAC0_CDUS14                     (0xF0010404U) /**< \brief (XDMAC0) Channel Destination Microblock Stride (chid = 14) */
  #define REG_XDMAC0_CIE15                      (0xF0010410U) /**< \brief (XDMAC0) Channel Interrupt Enable Register (chid = 15) */
  #define REG_XDMAC0_CID15                      (0xF0010414U) /**< \brief (XDMAC0) Channel Interrupt Disable Register (chid = 15) */
  #define REG_XDMAC0_CIM15                      (0xF0010418U) /**< \brief (XDMAC0) Channel Interrupt Mask Register (chid = 15) */
  #define REG_XDMAC0_CIS15                      (0xF001041CU) /**< \brief (XDMAC0) Channel Interrupt Status Register (chid = 15) */
  #define REG_XDMAC0_CSA15                      (0xF0010420U) /**< \brief (XDMAC0) Channel Source Address Register (chid = 15) */
  #define REG_XDMAC0_CDA15                      (0xF0010424U) /**< \brief (XDMAC0) Channel Destination Address Register (chid = 15) */
  #define REG_XDMAC0_CNDA15                     (0xF0010428U) /**< \brief (XDMAC0) Channel Next Descriptor Address Register (chid = 15) */
  #define REG_XDMAC0_CNDC15                     (0xF001042CU) /**< \brief (XDMAC0) Channel Next Descriptor Control Register (chid = 15) */
  #define REG_XDMAC0_CUBC15                     (0xF0010430U) /**< \brief (XDMAC0) Channel Microblock Control Register (chid = 15) */
  #define REG_XDMAC0_CBC15                      (0xF0010434U) /**< \brief (XDMAC0) Channel Block Control Register (chid = 15) */
  #define REG_XDMAC0_CC15                       (0xF0010438U) /**< \brief (XDMAC0) Channel Configuration Register (chid = 15) */
  #define REG_XDMAC0_CDS_MSP15                  (0xF001043CU) /**< \brief (XDMAC0) Channel Data Stride Memory Set Pattern (chid = 15) */
  #define REG_XDMAC0_CSUS15                     (0xF0010440U) /**< \brief (XDMAC0) Channel Source Microblock Stride (chid = 15) */
  #define REG_XDMAC0_CDUS15                     (0xF0010444U) /**< \brief (XDMAC0) Channel Destination Microblock Stride (chid = 15) */
  #define REG_XDMAC0_VERSION                    (0xF0010FFCU) /**< \brief (XDMAC0) XDMAC Version Register */
#else
  #define REG_XDMAC0_GTYPE     (*(__IO uint32_t*)0xF0010000U) /**< \brief (XDMAC0) Global Type Register */
  #define REG_XDMAC0_GCFG      (*(__I  uint32_t*)0xF0010004U) /**< \brief (XDMAC0) Global Configuration Register */
  #define REG_XDMAC0_GWAC      (*(__IO uint32_t*)0xF0010008U) /**< \brief (XDMAC0) Global Weighted Arbiter Configuration Register */
  #define REG_XDMAC0_GIE       (*(__O  uint32_t*)0xF001000CU) /**< \brief (XDMAC0) Global Interrupt Enable Register */
  #define REG_XDMAC0_GID       (*(__O  uint32_t*)0xF0010010U) /**< \brief (XDMAC0) Global Interrupt Disable Register */
  #define REG_XDMAC0_GIM       (*(__I  uint32_t*)0xF0010014U) /**< \brief (XDMAC0) Global Interrupt Mask Register */
  #define REG_XDMAC0_GIS       (*(__I  uint32_t*)0xF0010018U) /**< \brief (XDMAC0) Global Interrupt Status Register */
  #define REG_XDMAC0_GE        (*(__O  uint32_t*)0xF001001CU) /**< \brief (XDMAC0) Global Channel Enable Register */
  #define REG_XDMAC0_GD        (*(__O  uint32_t*)0xF0010020U) /**< \brief (XDMAC0) Global Channel Disable Register */
  #define REG_XDMAC0_GS        (*(__I  uint32_t*)0xF0010024U) /**< \brief (XDMAC0) Global Channel Status Register */
  #define REG_XDMAC0_GRS       (*(__IO uint32_t*)0xF0010028U) /**< \brief (XDMAC0) Global Channel Read Suspend Register */
  #define REG_XDMAC0_GWS       (*(__IO uint32_t*)0xF001002CU) /**< \brief (XDMAC0) Global Channel Write Suspend Register */
  #define REG_XDMAC0_GRWS      (*(__O  uint32_t*)0xF0010030U) /**< \brief (XDMAC0) Global Channel Read Write Suspend Register */
  #define REG_XDMAC0_GRWR      (*(__O  uint32_t*)0xF0010034U) /**< \brief (XDMAC0) Global Channel Read Write Resume Register */
  #define REG_XDMAC0_GSWR      (*(__O  uint32_t*)0xF0010038U) /**< \brief (XDMAC0) Global Channel Software Request Register */
  #define REG_XDMAC0_GSWS      (*(__I  uint32_t*)0xF001003CU) /**< \brief (XDMAC0) Global Channel Software Request Status Register */
  #define REG_XDMAC0_GSWF      (*(__O  uint32_t*)0xF0010040U) /**< \brief (XDMAC0) Global Channel Software Flush Request Register */
  #define REG_XDMAC0_CIE0      (*(__O  uint32_t*)0xF0010050U) /**< \brief (XDMAC0) Channel Interrupt Enable Register (chid = 0) */
  #define REG_XDMAC0_CID0      (*(__O  uint32_t*)0xF0010054U) /**< \brief (XDMAC0) Channel Interrupt Disable Register (chid = 0) */
  #define REG_XDMAC0_CIM0      (*(__O  uint32_t*)0xF0010058U) /**< \brief (XDMAC0) Channel Interrupt Mask Register (chid = 0) */
  #define REG_XDMAC0_CIS0      (*(__I  uint32_t*)0xF001005CU) /**< \brief (XDMAC0) Channel Interrupt Status Register (chid = 0) */
  #define REG_XDMAC0_CSA0      (*(__IO uint32_t*)0xF0010060U) /**< \brief (XDMAC0) Channel Source Address Register (chid = 0) */
  #define REG_XDMAC0_CDA0      (*(__IO uint32_t*)0xF0010064U) /**< \brief (XDMAC0) Channel Destination Address Register (chid = 0) */
  #define REG_XDMAC0_CNDA0     (*(__IO uint32_t*)0xF0010068U) /**< \brief (XDMAC0) Channel Next Descriptor Address Register (chid = 0) */
  #define REG_XDMAC0_CNDC0     (*(__IO uint32_t*)0xF001006CU) /**< \brief (XDMAC0) Channel Next Descriptor Control Register (chid = 0) */
  #define REG_XDMAC0_CUBC0     (*(__IO uint32_t*)0xF0010070U) /**< \brief (XDMAC0) Channel Microblock Control Register (chid = 0) */
  #define REG_XDMAC0_CBC0      (*(__IO uint32_t*)0xF0010074U) /**< \brief (XDMAC0) Channel Block Control Register (chid = 0) */
  #define REG_XDMAC0_CC0       (*(__IO uint32_t*)0xF0010078U) /**< \brief (XDMAC0) Channel Configuration Register (chid = 0) */
  #define REG_XDMAC0_CDS_MSP0  (*(__IO uint32_t*)0xF001007CU) /**< \brief (XDMAC0) Channel Data Stride Memory Set Pattern (chid = 0) */
  #define REG_XDMAC0_CSUS0     (*(__IO uint32_t*)0xF0010080U) /**< \brief (XDMAC0) Channel Source Microblock Stride (chid = 0) */
  #define REG_XDMAC0_CDUS0     (*(__IO uint32_t*)0xF0010084U) /**< \brief (XDMAC0) Channel Destination Microblock Stride (chid = 0) */
  #define REG_XDMAC0_CIE1      (*(__O  uint32_t*)0xF0010090U) /**< \brief (XDMAC0) Channel Interrupt Enable Register (chid = 1) */
  #define REG_XDMAC0_CID1      (*(__O  uint32_t*)0xF0010094U) /**< \brief (XDMAC0) Channel Interrupt Disable Register (chid = 1) */
  #define REG_XDMAC0_CIM1      (*(__O  uint32_t*)0xF0010098U) /**< \brief (XDMAC0) Channel Interrupt Mask Register (chid = 1) */
  #define REG_XDMAC0_CIS1      (*(__I  uint32_t*)0xF001009CU) /**< \brief (XDMAC0) Channel Interrupt Status Register (chid = 1) */
  #define REG_XDMAC0_CSA1      (*(__IO uint32_t*)0xF00100A0U) /**< \brief (XDMAC0) Channel Source Address Register (chid = 1) */
  #define REG_XDMAC0_CDA1      (*(__IO uint32_t*)0xF00100A4U) /**< \brief (XDMAC0) Channel Destination Address Register (chid = 1) */
  #define REG_XDMAC0_CNDA1     (*(__IO uint32_t*)0xF00100A8U) /**< \brief (XDMAC0) Channel Next Descriptor Address Register (chid = 1) */
  #define REG_XDMAC0_CNDC1     (*(__IO uint32_t*)0xF00100ACU) /**< \brief (XDMAC0) Channel Next Descriptor Control Register (chid = 1) */
  #define REG_XDMAC0_CUBC1     (*(__IO uint32_t*)0xF00100B0U) /**< \brief (XDMAC0) Channel Microblock Control Register (chid = 1) */
  #define REG_XDMAC0_CBC1      (*(__IO uint32_t*)0xF00100B4U) /**< \brief (XDMAC0) Channel Block Control Register (chid = 1) */
  #define REG_XDMAC0_CC1       (*(__IO uint32_t*)0xF00100B8U) /**< \brief (XDMAC0) Channel Configuration Register (chid = 1) */
  #define REG_XDMAC0_CDS_MSP1  (*(__IO uint32_t*)0xF00100BCU) /**< \brief (XDMAC0) Channel Data Stride Memory Set Pattern (chid = 1) */
  #define REG_XDMAC0_CSUS1     (*(__IO uint32_t*)0xF00100C0U) /**< \brief (XDMAC0) Channel Source Microblock Stride (chid = 1) */
  #define REG_XDMAC0_CDUS1     (*(__IO uint32_t*)0xF00100C4U) /**< \brief (XDMAC0) Channel Destination Microblock Stride (chid = 1) */
  #define REG_XDMAC0_CIE2      (*(__O  uint32_t*)0xF00100D0U) /**< \brief (XDMAC0) Channel Interrupt Enable Register (chid = 2) */
  #define REG_XDMAC0_CID2      (*(__O  uint32_t*)0xF00100D4U) /**< \brief (XDMAC0) Channel Interrupt Disable Register (chid = 2) */
  #define REG_XDMAC0_CIM2      (*(__O  uint32_t*)0xF00100D8U) /**< \brief (XDMAC0) Channel Interrupt Mask Register (chid = 2) */
  #define REG_XDMAC0_CIS2      (*(__I  uint32_t*)0xF00100DCU) /**< \brief (XDMAC0) Channel Interrupt Status Register (chid = 2) */
  #define REG_XDMAC0_CSA2      (*(__IO uint32_t*)0xF00100E0U) /**< \brief (XDMAC0) Channel Source Address Register (chid = 2) */
  #define REG_XDMAC0_CDA2      (*(__IO uint32_t*)0xF00100E4U) /**< \brief (XDMAC0) Channel Destination Address Register (chid = 2) */
  #define REG_XDMAC0_CNDA2     (*(__IO uint32_t*)0xF00100E8U) /**< \brief (XDMAC0) Channel Next Descriptor Address Register (chid = 2) */
  #define REG_XDMAC0_CNDC2     (*(__IO uint32_t*)0xF00100ECU) /**< \brief (XDMAC0) Channel Next Descriptor Control Register (chid = 2) */
  #define REG_XDMAC0_CUBC2     (*(__IO uint32_t*)0xF00100F0U) /**< \brief (XDMAC0) Channel Microblock Control Register (chid = 2) */
  #define REG_XDMAC0_CBC2      (*(__IO uint32_t*)0xF00100F4U) /**< \brief (XDMAC0) Channel Block Control Register (chid = 2) */
  #define REG_XDMAC0_CC2       (*(__IO uint32_t*)0xF00100F8U) /**< \brief (XDMAC0) Channel Configuration Register (chid = 2) */
  #define REG_XDMAC0_CDS_MSP2  (*(__IO uint32_t*)0xF00100FCU) /**< \brief (XDMAC0) Channel Data Stride Memory Set Pattern (chid = 2) */
  #define REG_XDMAC0_CSUS2     (*(__IO uint32_t*)0xF0010100U) /**< \brief (XDMAC0) Channel Source Microblock Stride (chid = 2) */
  #define REG_XDMAC0_CDUS2     (*(__IO uint32_t*)0xF0010104U) /**< \brief (XDMAC0) Channel Destination Microblock Stride (chid = 2) */
  #define REG_XDMAC0_CIE3      (*(__O  uint32_t*)0xF0010110U) /**< \brief (XDMAC0) Channel Interrupt Enable Register (chid = 3) */
  #define REG_XDMAC0_CID3      (*(__O  uint32_t*)0xF0010114U) /**< \brief (XDMAC0) Channel Interrupt Disable Register (chid = 3) */
  #define REG_XDMAC0_CIM3      (*(__O  uint32_t*)0xF0010118U) /**< \brief (XDMAC0) Channel Interrupt Mask Register (chid = 3) */
  #define REG_XDMAC0_CIS3      (*(__I  uint32_t*)0xF001011CU) /**< \brief (XDMAC0) Channel Interrupt Status Register (chid = 3) */
  #define REG_XDMAC0_CSA3      (*(__IO uint32_t*)0xF0010120U) /**< \brief (XDMAC0) Channel Source Address Register (chid = 3) */
  #define REG_XDMAC0_CDA3      (*(__IO uint32_t*)0xF0010124U) /**< \brief (XDMAC0) Channel Destination Address Register (chid = 3) */
  #define REG_XDMAC0_CNDA3     (*(__IO uint32_t*)0xF0010128U) /**< \brief (XDMAC0) Channel Next Descriptor Address Register (chid = 3) */
  #define REG_XDMAC0_CNDC3     (*(__IO uint32_t*)0xF001012CU) /**< \brief (XDMAC0) Channel Next Descriptor Control Register (chid = 3) */
  #define REG_XDMAC0_CUBC3     (*(__IO uint32_t*)0xF0010130U) /**< \brief (XDMAC0) Channel Microblock Control Register (chid = 3) */
  #define REG_XDMAC0_CBC3      (*(__IO uint32_t*)0xF0010134U) /**< \brief (XDMAC0) Channel Block Control Register (chid = 3) */
  #define REG_XDMAC0_CC3       (*(__IO uint32_t*)0xF0010138U) /**< \brief (XDMAC0) Channel Configuration Register (chid = 3) */
  #define REG_XDMAC0_CDS_MSP3  (*(__IO uint32_t*)0xF001013CU) /**< \brief (XDMAC0) Channel Data Stride Memory Set Pattern (chid = 3) */
  #define REG_XDMAC0_CSUS3     (*(__IO uint32_t*)0xF0010140U) /**< \brief (XDMAC0) Channel Source Microblock Stride (chid = 3) */
  #define REG_XDMAC0_CDUS3     (*(__IO uint32_t*)0xF0010144U) /**< \brief (XDMAC0) Channel Destination Microblock Stride (chid = 3) */
  #define REG_XDMAC0_CIE4      (*(__O  uint32_t*)0xF0010150U) /**< \brief (XDMAC0) Channel Interrupt Enable Register (chid = 4) */
  #define REG_XDMAC0_CID4      (*(__O  uint32_t*)0xF0010154U) /**< \brief (XDMAC0) Channel Interrupt Disable Register (chid = 4) */
  #define REG_XDMAC0_CIM4      (*(__O  uint32_t*)0xF0010158U) /**< \brief (XDMAC0) Channel Interrupt Mask Register (chid = 4) */
  #define REG_XDMAC0_CIS4      (*(__I  uint32_t*)0xF001015CU) /**< \brief (XDMAC0) Channel Interrupt Status Register (chid = 4) */
  #define REG_XDMAC0_CSA4      (*(__IO uint32_t*)0xF0010160U) /**< \brief (XDMAC0) Channel Source Address Register (chid = 4) */
  #define REG_XDMAC0_CDA4      (*(__IO uint32_t*)0xF0010164U) /**< \brief (XDMAC0) Channel Destination Address Register (chid = 4) */
  #define REG_XDMAC0_CNDA4     (*(__IO uint32_t*)0xF0010168U) /**< \brief (XDMAC0) Channel Next Descriptor Address Register (chid = 4) */
  #define REG_XDMAC0_CNDC4     (*(__IO uint32_t*)0xF001016CU) /**< \brief (XDMAC0) Channel Next Descriptor Control Register (chid = 4) */
  #define REG_XDMAC0_CUBC4     (*(__IO uint32_t*)0xF0010170U) /**< \brief (XDMAC0) Channel Microblock Control Register (chid = 4) */
  #define REG_XDMAC0_CBC4      (*(__IO uint32_t*)0xF0010174U) /**< \brief (XDMAC0) Channel Block Control Register (chid = 4) */
  #define REG_XDMAC0_CC4       (*(__IO uint32_t*)0xF0010178U) /**< \brief (XDMAC0) Channel Configuration Register (chid = 4) */
  #define REG_XDMAC0_CDS_MSP4  (*(__IO uint32_t*)0xF001017CU) /**< \brief (XDMAC0) Channel Data Stride Memory Set Pattern (chid = 4) */
  #define REG_XDMAC0_CSUS4     (*(__IO uint32_t*)0xF0010180U) /**< \brief (XDMAC0) Channel Source Microblock Stride (chid = 4) */
  #define REG_XDMAC0_CDUS4     (*(__IO uint32_t*)0xF0010184U) /**< \brief (XDMAC0) Channel Destination Microblock Stride (chid = 4) */
  #define REG_XDMAC0_CIE5      (*(__O  uint32_t*)0xF0010190U) /**< \brief (XDMAC0) Channel Interrupt Enable Register (chid = 5) */
  #define REG_XDMAC0_CID5      (*(__O  uint32_t*)0xF0010194U) /**< \brief (XDMAC0) Channel Interrupt Disable Register (chid = 5) */
  #define REG_XDMAC0_CIM5      (*(__O  uint32_t*)0xF0010198U) /**< \brief (XDMAC0) Channel Interrupt Mask Register (chid = 5) */
  #define REG_XDMAC0_CIS5      (*(__I  uint32_t*)0xF001019CU) /**< \brief (XDMAC0) Channel Interrupt Status Register (chid = 5) */
  #define REG_XDMAC0_CSA5      (*(__IO uint32_t*)0xF00101A0U) /**< \brief (XDMAC0) Channel Source Address Register (chid = 5) */
  #define REG_XDMAC0_CDA5      (*(__IO uint32_t*)0xF00101A4U) /**< \brief (XDMAC0) Channel Destination Address Register (chid = 5) */
  #define REG_XDMAC0_CNDA5     (*(__IO uint32_t*)0xF00101A8U) /**< \brief (XDMAC0) Channel Next Descriptor Address Register (chid = 5) */
  #define REG_XDMAC0_CNDC5     (*(__IO uint32_t*)0xF00101ACU) /**< \brief (XDMAC0) Channel Next Descriptor Control Register (chid = 5) */
  #define REG_XDMAC0_CUBC5     (*(__IO uint32_t*)0xF00101B0U) /**< \brief (XDMAC0) Channel Microblock Control Register (chid = 5) */
  #define REG_XDMAC0_CBC5      (*(__IO uint32_t*)0xF00101B4U) /**< \brief (XDMAC0) Channel Block Control Register (chid = 5) */
  #define REG_XDMAC0_CC5       (*(__IO uint32_t*)0xF00101B8U) /**< \brief (XDMAC0) Channel Configuration Register (chid = 5) */
  #define REG_XDMAC0_CDS_MSP5  (*(__IO uint32_t*)0xF00101BCU) /**< \brief (XDMAC0) Channel Data Stride Memory Set Pattern (chid = 5) */
  #define REG_XDMAC0_CSUS5     (*(__IO uint32_t*)0xF00101C0U) /**< \brief (XDMAC0) Channel Source Microblock Stride (chid = 5) */
  #define REG_XDMAC0_CDUS5     (*(__IO uint32_t*)0xF00101C4U) /**< \brief (XDMAC0) Channel Destination Microblock Stride (chid = 5) */
  #define REG_XDMAC0_CIE6      (*(__O  uint32_t*)0xF00101D0U) /**< \brief (XDMAC0) Channel Interrupt Enable Register (chid = 6) */
  #define REG_XDMAC0_CID6      (*(__O  uint32_t*)0xF00101D4U) /**< \brief (XDMAC0) Channel Interrupt Disable Register (chid = 6) */
  #define REG_XDMAC0_CIM6      (*(__O  uint32_t*)0xF00101D8U) /**< \brief (XDMAC0) Channel Interrupt Mask Register (chid = 6) */
  #define REG_XDMAC0_CIS6      (*(__I  uint32_t*)0xF00101DCU) /**< \brief (XDMAC0) Channel Interrupt Status Register (chid = 6) */
  #define REG_XDMAC0_CSA6      (*(__IO uint32_t*)0xF00101E0U) /**< \brief (XDMAC0) Channel Source Address Register (chid = 6) */
  #define REG_XDMAC0_CDA6      (*(__IO uint32_t*)0xF00101E4U) /**< \brief (XDMAC0) Channel Destination Address Register (chid = 6) */
  #define REG_XDMAC0_CNDA6     (*(__IO uint32_t*)0xF00101E8U) /**< \brief (XDMAC0) Channel Next Descriptor Address Register (chid = 6) */
  #define REG_XDMAC0_CNDC6     (*(__IO uint32_t*)0xF00101ECU) /**< \brief (XDMAC0) Channel Next Descriptor Control Register (chid = 6) */
  #define REG_XDMAC0_CUBC6     (*(__IO uint32_t*)0xF00101F0U) /**< \brief (XDMAC0) Channel Microblock Control Register (chid = 6) */
  #define REG_XDMAC0_CBC6      (*(__IO uint32_t*)0xF00101F4U) /**< \brief (XDMAC0) Channel Block Control Register (chid = 6) */
  #define REG_XDMAC0_CC6       (*(__IO uint32_t*)0xF00101F8U) /**< \brief (XDMAC0) Channel Configuration Register (chid = 6) */
  #define REG_XDMAC0_CDS_MSP6  (*(__IO uint32_t*)0xF00101FCU) /**< \brief (XDMAC0) Channel Data Stride Memory Set Pattern (chid = 6) */
  #define REG_XDMAC0_CSUS6     (*(__IO uint32_t*)0xF0010200U) /**< \brief (XDMAC0) Channel Source Microblock Stride (chid = 6) */
  #define REG_XDMAC0_CDUS6     (*(__IO uint32_t*)0xF0010204U) /**< \brief (XDMAC0) Channel Destination Microblock Stride (chid = 6) */
  #define REG_XDMAC0_CIE7      (*(__O  uint32_t*)0xF0010210U) /**< \brief (XDMAC0) Channel Interrupt Enable Register (chid = 7) */
  #define REG_XDMAC0_CID7      (*(__O  uint32_t*)0xF0010214U) /**< \brief (XDMAC0) Channel Interrupt Disable Register (chid = 7) */
  #define REG_XDMAC0_CIM7      (*(__O  uint32_t*)0xF0010218U) /**< \brief (XDMAC0) Channel Interrupt Mask Register (chid = 7) */
  #define REG_XDMAC0_CIS7      (*(__I  uint32_t*)0xF001021CU) /**< \brief (XDMAC0) Channel Interrupt Status Register (chid = 7) */
  #define REG_XDMAC0_CSA7      (*(__IO uint32_t*)0xF0010220U) /**< \brief (XDMAC0) Channel Source Address Register (chid = 7) */
  #define REG_XDMAC0_CDA7      (*(__IO uint32_t*)0xF0010224U) /**< \brief (XDMAC0) Channel Destination Address Register (chid = 7) */
  #define REG_XDMAC0_CNDA7     (*(__IO uint32_t*)0xF0010228U) /**< \brief (XDMAC0) Channel Next Descriptor Address Register (chid = 7) */
  #define REG_XDMAC0_CNDC7     (*(__IO uint32_t*)0xF001022CU) /**< \brief (XDMAC0) Channel Next Descriptor Control Register (chid = 7) */
  #define REG_XDMAC0_CUBC7     (*(__IO uint32_t*)0xF0010230U) /**< \brief (XDMAC0) Channel Microblock Control Register (chid = 7) */
  #define REG_XDMAC0_CBC7      (*(__IO uint32_t*)0xF0010234U) /**< \brief (XDMAC0) Channel Block Control Register (chid = 7) */
  #define REG_XDMAC0_CC7       (*(__IO uint32_t*)0xF0010238U) /**< \brief (XDMAC0) Channel Configuration Register (chid = 7) */
  #define REG_XDMAC0_CDS_MSP7  (*(__IO uint32_t*)0xF001023CU) /**< \brief (XDMAC0) Channel Data Stride Memory Set Pattern (chid = 7) */
  #define REG_XDMAC0_CSUS7     (*(__IO uint32_t*)0xF0010240U) /**< \brief (XDMAC0) Channel Source Microblock Stride (chid = 7) */
  #define REG_XDMAC0_CDUS7     (*(__IO uint32_t*)0xF0010244U) /**< \brief (XDMAC0) Channel Destination Microblock Stride (chid = 7) */
  #define REG_XDMAC0_CIE8      (*(__O  uint32_t*)0xF0010250U) /**< \brief (XDMAC0) Channel Interrupt Enable Register (chid = 8) */
  #define REG_XDMAC0_CID8      (*(__O  uint32_t*)0xF0010254U) /**< \brief (XDMAC0) Channel Interrupt Disable Register (chid = 8) */
  #define REG_XDMAC0_CIM8      (*(__O  uint32_t*)0xF0010258U) /**< \brief (XDMAC0) Channel Interrupt Mask Register (chid = 8) */
  #define REG_XDMAC0_CIS8      (*(__I  uint32_t*)0xF001025CU) /**< \brief (XDMAC0) Channel Interrupt Status Register (chid = 8) */
  #define REG_XDMAC0_CSA8      (*(__IO uint32_t*)0xF0010260U) /**< \brief (XDMAC0) Channel Source Address Register (chid = 8) */
  #define REG_XDMAC0_CDA8      (*(__IO uint32_t*)0xF0010264U) /**< \brief (XDMAC0) Channel Destination Address Register (chid = 8) */
  #define REG_XDMAC0_CNDA8     (*(__IO uint32_t*)0xF0010268U) /**< \brief (XDMAC0) Channel Next Descriptor Address Register (chid = 8) */
  #define REG_XDMAC0_CNDC8     (*(__IO uint32_t*)0xF001026CU) /**< \brief (XDMAC0) Channel Next Descriptor Control Register (chid = 8) */
  #define REG_XDMAC0_CUBC8     (*(__IO uint32_t*)0xF0010270U) /**< \brief (XDMAC0) Channel Microblock Control Register (chid = 8) */
  #define REG_XDMAC0_CBC8      (*(__IO uint32_t*)0xF0010274U) /**< \brief (XDMAC0) Channel Block Control Register (chid = 8) */
  #define REG_XDMAC0_CC8       (*(__IO uint32_t*)0xF0010278U) /**< \brief (XDMAC0) Channel Configuration Register (chid = 8) */
  #define REG_XDMAC0_CDS_MSP8  (*(__IO uint32_t*)0xF001027CU) /**< \brief (XDMAC0) Channel Data Stride Memory Set Pattern (chid = 8) */
  #define REG_XDMAC0_CSUS8     (*(__IO uint32_t*)0xF0010280U) /**< \brief (XDMAC0) Channel Source Microblock Stride (chid = 8) */
  #define REG_XDMAC0_CDUS8     (*(__IO uint32_t*)0xF0010284U) /**< \brief (XDMAC0) Channel Destination Microblock Stride (chid = 8) */
  #define REG_XDMAC0_CIE9      (*(__O  uint32_t*)0xF0010290U) /**< \brief (XDMAC0) Channel Interrupt Enable Register (chid = 9) */
  #define REG_XDMAC0_CID9      (*(__O  uint32_t*)0xF0010294U) /**< \brief (XDMAC0) Channel Interrupt Disable Register (chid = 9) */
  #define REG_XDMAC0_CIM9      (*(__O  uint32_t*)0xF0010298U) /**< \brief (XDMAC0) Channel Interrupt Mask Register (chid = 9) */
  #define REG_XDMAC0_CIS9      (*(__I  uint32_t*)0xF001029CU) /**< \brief (XDMAC0) Channel Interrupt Status Register (chid = 9) */
  #define REG_XDMAC0_CSA9      (*(__IO uint32_t*)0xF00102A0U) /**< \brief (XDMAC0) Channel Source Address Register (chid = 9) */
  #define REG_XDMAC0_CDA9      (*(__IO uint32_t*)0xF00102A4U) /**< \brief (XDMAC0) Channel Destination Address Register (chid = 9) */
  #define REG_XDMAC0_CNDA9     (*(__IO uint32_t*)0xF00102A8U) /**< \brief (XDMAC0) Channel Next Descriptor Address Register (chid = 9) */
  #define REG_XDMAC0_CNDC9     (*(__IO uint32_t*)0xF00102ACU) /**< \brief (XDMAC0) Channel Next Descriptor Control Register (chid = 9) */
  #define REG_XDMAC0_CUBC9     (*(__IO uint32_t*)0xF00102B0U) /**< \brief (XDMAC0) Channel Microblock Control Register (chid = 9) */
  #define REG_XDMAC0_CBC9      (*(__IO uint32_t*)0xF00102B4U) /**< \brief (XDMAC0) Channel Block Control Register (chid = 9) */
  #define REG_XDMAC0_CC9       (*(__IO uint32_t*)0xF00102B8U) /**< \brief (XDMAC0) Channel Configuration Register (chid = 9) */
  #define REG_XDMAC0_CDS_MSP9  (*(__IO uint32_t*)0xF00102BCU) /**< \brief (XDMAC0) Channel Data Stride Memory Set Pattern (chid = 9) */
  #define REG_XDMAC0_CSUS9     (*(__IO uint32_t*)0xF00102C0U) /**< \brief (XDMAC0) Channel Source Microblock Stride (chid = 9) */
  #define REG_XDMAC0_CDUS9     (*(__IO uint32_t*)0xF00102C4U) /**< \brief (XDMAC0) Channel Destination Microblock Stride (chid = 9) */
  #define REG_XDMAC0_CIE10     (*(__O  uint32_t*)0xF00102D0U) /**< \brief (XDMAC0) Channel Interrupt Enable Register (chid = 10) */
  #define REG_XDMAC0_CID10     (*(__O  uint32_t*)0xF00102D4U) /**< \brief (XDMAC0) Channel Interrupt Disable Register (chid = 10) */
  #define REG_XDMAC0_CIM10     (*(__O  uint32_t*)0xF00102D8U) /**< \brief (XDMAC0) Channel Interrupt Mask Register (chid = 10) */
  #define REG_XDMAC0_CIS10     (*(__I  uint32_t*)0xF00102DCU) /**< \brief (XDMAC0) Channel Interrupt Status Register (chid = 10) */
  #define REG_XDMAC0_CSA10     (*(__IO uint32_t*)0xF00102E0U) /**< \brief (XDMAC0) Channel Source Address Register (chid = 10) */
  #define REG_XDMAC0_CDA10     (*(__IO uint32_t*)0xF00102E4U) /**< \brief (XDMAC0) Channel Destination Address Register (chid = 10) */
  #define REG_XDMAC0_CNDA10    (*(__IO uint32_t*)0xF00102E8U) /**< \brief (XDMAC0) Channel Next Descriptor Address Register (chid = 10) */
  #define REG_XDMAC0_CNDC10    (*(__IO uint32_t*)0xF00102ECU) /**< \brief (XDMAC0) Channel Next Descriptor Control Register (chid = 10) */
  #define REG_XDMAC0_CUBC10    (*(__IO uint32_t*)0xF00102F0U) /**< \brief (XDMAC0) Channel Microblock Control Register (chid = 10) */
  #define REG_XDMAC0_CBC10     (*(__IO uint32_t*)0xF00102F4U) /**< \brief (XDMAC0) Channel Block Control Register (chid = 10) */
  #define REG_XDMAC0_CC10      (*(__IO uint32_t*)0xF00102F8U) /**< \brief (XDMAC0) Channel Configuration Register (chid = 10) */
  #define REG_XDMAC0_CDS_MSP10 (*(__IO uint32_t*)0xF00102FCU) /**< \brief (XDMAC0) Channel Data Stride Memory Set Pattern (chid = 10) */
  #define REG_XDMAC0_CSUS10    (*(__IO uint32_t*)0xF0010300U) /**< \brief (XDMAC0) Channel Source Microblock Stride (chid = 10) */
  #define REG_XDMAC0_CDUS10    (*(__IO uint32_t*)0xF0010304U) /**< \brief (XDMAC0) Channel Destination Microblock Stride (chid = 10) */
  #define REG_XDMAC0_CIE11     (*(__O  uint32_t*)0xF0010310U) /**< \brief (XDMAC0) Channel Interrupt Enable Register (chid = 11) */
  #define REG_XDMAC0_CID11     (*(__O  uint32_t*)0xF0010314U) /**< \brief (XDMAC0) Channel Interrupt Disable Register (chid = 11) */
  #define REG_XDMAC0_CIM11     (*(__O  uint32_t*)0xF0010318U) /**< \brief (XDMAC0) Channel Interrupt Mask Register (chid = 11) */
  #define REG_XDMAC0_CIS11     (*(__I  uint32_t*)0xF001031CU) /**< \brief (XDMAC0) Channel Interrupt Status Register (chid = 11) */
  #define REG_XDMAC0_CSA11     (*(__IO uint32_t*)0xF0010320U) /**< \brief (XDMAC0) Channel Source Address Register (chid = 11) */
  #define REG_XDMAC0_CDA11     (*(__IO uint32_t*)0xF0010324U) /**< \brief (XDMAC0) Channel Destination Address Register (chid = 11) */
  #define REG_XDMAC0_CNDA11    (*(__IO uint32_t*)0xF0010328U) /**< \brief (XDMAC0) Channel Next Descriptor Address Register (chid = 11) */
  #define REG_XDMAC0_CNDC11    (*(__IO uint32_t*)0xF001032CU) /**< \brief (XDMAC0) Channel Next Descriptor Control Register (chid = 11) */
  #define REG_XDMAC0_CUBC11    (*(__IO uint32_t*)0xF0010330U) /**< \brief (XDMAC0) Channel Microblock Control Register (chid = 11) */
  #define REG_XDMAC0_CBC11     (*(__IO uint32_t*)0xF0010334U) /**< \brief (XDMAC0) Channel Block Control Register (chid = 11) */
  #define REG_XDMAC0_CC11      (*(__IO uint32_t*)0xF0010338U) /**< \brief (XDMAC0) Channel Configuration Register (chid = 11) */
  #define REG_XDMAC0_CDS_MSP11 (*(__IO uint32_t*)0xF001033CU) /**< \brief (XDMAC0) Channel Data Stride Memory Set Pattern (chid = 11) */
  #define REG_XDMAC0_CSUS11    (*(__IO uint32_t*)0xF0010340U) /**< \brief (XDMAC0) Channel Source Microblock Stride (chid = 11) */
  #define REG_XDMAC0_CDUS11    (*(__IO uint32_t*)0xF0010344U) /**< \brief (XDMAC0) Channel Destination Microblock Stride (chid = 11) */
  #define REG_XDMAC0_CIE12     (*(__O  uint32_t*)0xF0010350U) /**< \brief (XDMAC0) Channel Interrupt Enable Register (chid = 12) */
  #define REG_XDMAC0_CID12     (*(__O  uint32_t*)0xF0010354U) /**< \brief (XDMAC0) Channel Interrupt Disable Register (chid = 12) */
  #define REG_XDMAC0_CIM12     (*(__O  uint32_t*)0xF0010358U) /**< \brief (XDMAC0) Channel Interrupt Mask Register (chid = 12) */
  #define REG_XDMAC0_CIS12     (*(__I  uint32_t*)0xF001035CU) /**< \brief (XDMAC0) Channel Interrupt Status Register (chid = 12) */
  #define REG_XDMAC0_CSA12     (*(__IO uint32_t*)0xF0010360U) /**< \brief (XDMAC0) Channel Source Address Register (chid = 12) */
  #define REG_XDMAC0_CDA12     (*(__IO uint32_t*)0xF0010364U) /**< \brief (XDMAC0) Channel Destination Address Register (chid = 12) */
  #define REG_XDMAC0_CNDA12    (*(__IO uint32_t*)0xF0010368U) /**< \brief (XDMAC0) Channel Next Descriptor Address Register (chid = 12) */
  #define REG_XDMAC0_CNDC12    (*(__IO uint32_t*)0xF001036CU) /**< \brief (XDMAC0) Channel Next Descriptor Control Register (chid = 12) */
  #define REG_XDMAC0_CUBC12    (*(__IO uint32_t*)0xF0010370U) /**< \brief (XDMAC0) Channel Microblock Control Register (chid = 12) */
  #define REG_XDMAC0_CBC12     (*(__IO uint32_t*)0xF0010374U) /**< \brief (XDMAC0) Channel Block Control Register (chid = 12) */
  #define REG_XDMAC0_CC12      (*(__IO uint32_t*)0xF0010378U) /**< \brief (XDMAC0) Channel Configuration Register (chid = 12) */
  #define REG_XDMAC0_CDS_MSP12 (*(__IO uint32_t*)0xF001037CU) /**< \brief (XDMAC0) Channel Data Stride Memory Set Pattern (chid = 12) */
  #define REG_XDMAC0_CSUS12    (*(__IO uint32_t*)0xF0010380U) /**< \brief (XDMAC0) Channel Source Microblock Stride (chid = 12) */
  #define REG_XDMAC0_CDUS12    (*(__IO uint32_t*)0xF0010384U) /**< \brief (XDMAC0) Channel Destination Microblock Stride (chid = 12) */
  #define REG_XDMAC0_CIE13     (*(__O  uint32_t*)0xF0010390U) /**< \brief (XDMAC0) Channel Interrupt Enable Register (chid = 13) */
  #define REG_XDMAC0_CID13     (*(__O  uint32_t*)0xF0010394U) /**< \brief (XDMAC0) Channel Interrupt Disable Register (chid = 13) */
  #define REG_XDMAC0_CIM13     (*(__O  uint32_t*)0xF0010398U) /**< \brief (XDMAC0) Channel Interrupt Mask Register (chid = 13) */
  #define REG_XDMAC0_CIS13     (*(__I  uint32_t*)0xF001039CU) /**< \brief (XDMAC0) Channel Interrupt Status Register (chid = 13) */
  #define REG_XDMAC0_CSA13     (*(__IO uint32_t*)0xF00103A0U) /**< \brief (XDMAC0) Channel Source Address Register (chid = 13) */
  #define REG_XDMAC0_CDA13     (*(__IO uint32_t*)0xF00103A4U) /**< \brief (XDMAC0) Channel Destination Address Register (chid = 13) */
  #define REG_XDMAC0_CNDA13    (*(__IO uint32_t*)0xF00103A8U) /**< \brief (XDMAC0) Channel Next Descriptor Address Register (chid = 13) */
  #define REG_XDMAC0_CNDC13    (*(__IO uint32_t*)0xF00103ACU) /**< \brief (XDMAC0) Channel Next Descriptor Control Register (chid = 13) */
  #define REG_XDMAC0_CUBC13    (*(__IO uint32_t*)0xF00103B0U) /**< \brief (XDMAC0) Channel Microblock Control Register (chid = 13) */
  #define REG_XDMAC0_CBC13     (*(__IO uint32_t*)0xF00103B4U) /**< \brief (XDMAC0) Channel Block Control Register (chid = 13) */
  #define REG_XDMAC0_CC13      (*(__IO uint32_t*)0xF00103B8U) /**< \brief (XDMAC0) Channel Configuration Register (chid = 13) */
  #define REG_XDMAC0_CDS_MSP13 (*(__IO uint32_t*)0xF00103BCU) /**< \brief (XDMAC0) Channel Data Stride Memory Set Pattern (chid = 13) */
  #define REG_XDMAC0_CSUS13    (*(__IO uint32_t*)0xF00103C0U) /**< \brief (XDMAC0) Channel Source Microblock Stride (chid = 13) */
  #define REG_XDMAC0_CDUS13    (*(__IO uint32_t*)0xF00103C4U) /**< \brief (XDMAC0) Channel Destination Microblock Stride (chid = 13) */
  #define REG_XDMAC0_CIE14     (*(__O  uint32_t*)0xF00103D0U) /**< \brief (XDMAC0) Channel Interrupt Enable Register (chid = 14) */
  #define REG_XDMAC0_CID14     (*(__O  uint32_t*)0xF00103D4U) /**< \brief (XDMAC0) Channel Interrupt Disable Register (chid = 14) */
  #define REG_XDMAC0_CIM14     (*(__O  uint32_t*)0xF00103D8U) /**< \brief (XDMAC0) Channel Interrupt Mask Register (chid = 14) */
  #define REG_XDMAC0_CIS14     (*(__I  uint32_t*)0xF00103DCU) /**< \brief (XDMAC0) Channel Interrupt Status Register (chid = 14) */
  #define REG_XDMAC0_CSA14     (*(__IO uint32_t*)0xF00103E0U) /**< \brief (XDMAC0) Channel Source Address Register (chid = 14) */
  #define REG_XDMAC0_CDA14     (*(__IO uint32_t*)0xF00103E4U) /**< \brief (XDMAC0) Channel Destination Address Register (chid = 14) */
  #define REG_XDMAC0_CNDA14    (*(__IO uint32_t*)0xF00103E8U) /**< \brief (XDMAC0) Channel Next Descriptor Address Register (chid = 14) */
  #define REG_XDMAC0_CNDC14    (*(__IO uint32_t*)0xF00103ECU) /**< \brief (XDMAC0) Channel Next Descriptor Control Register (chid = 14) */
  #define REG_XDMAC0_CUBC14    (*(__IO uint32_t*)0xF00103F0U) /**< \brief (XDMAC0) Channel Microblock Control Register (chid = 14) */
  #define REG_XDMAC0_CBC14     (*(__IO uint32_t*)0xF00103F4U) /**< \brief (XDMAC0) Channel Block Control Register (chid = 14) */
  #define REG_XDMAC0_CC14      (*(__IO uint32_t*)0xF00103F8U) /**< \brief (XDMAC0) Channel Configuration Register (chid = 14) */
  #define REG_XDMAC0_CDS_MSP14 (*(__IO uint32_t*)0xF00103FCU) /**< \brief (XDMAC0) Channel Data Stride Memory Set Pattern (chid = 14) */
  #define REG_XDMAC0_CSUS14    (*(__IO uint32_t*)0xF0010400U) /**< \brief (XDMAC0) Channel Source Microblock Stride (chid = 14) */
  #define REG_XDMAC0_CDUS14    (*(__IO uint32_t*)0xF0010404U) /**< \brief (XDMAC0) Channel Destination Microblock Stride (chid = 14) */
  #define REG_XDMAC0_CIE15     (*(__O  uint32_t*)0xF0010410U) /**< \brief (XDMAC0) Channel Interrupt Enable Register (chid = 15) */
  #define REG_XDMAC0_CID15     (*(__O  uint32_t*)0xF0010414U) /**< \brief (XDMAC0) Channel Interrupt Disable Register (chid = 15) */
  #define REG_XDMAC0_CIM15     (*(__O  uint32_t*)0xF0010418U) /**< \brief (XDMAC0) Channel Interrupt Mask Register (chid = 15) */
  #define REG_XDMAC0_CIS15     (*(__I  uint32_t*)0xF001041CU) /**< \brief (XDMAC0) Channel Interrupt Status Register (chid = 15) */
  #define REG_XDMAC0_CSA15     (*(__IO uint32_t*)0xF0010420U) /**< \brief (XDMAC0) Channel Source Address Register (chid = 15) */
  #define REG_XDMAC0_CDA15     (*(__IO uint32_t*)0xF0010424U) /**< \brief (XDMAC0) Channel Destination Address Register (chid = 15) */
  #define REG_XDMAC0_CNDA15    (*(__IO uint32_t*)0xF0010428U) /**< \brief (XDMAC0) Channel Next Descriptor Address Register (chid = 15) */
  #define REG_XDMAC0_CNDC15    (*(__IO uint32_t*)0xF001042CU) /**< \brief (XDMAC0) Channel Next Descriptor Control Register (chid = 15) */
  #define REG_XDMAC0_CUBC15    (*(__IO uint32_t*)0xF0010430U) /**< \brief (XDMAC0) Channel Microblock Control Register (chid = 15) */
  #define REG_XDMAC0_CBC15     (*(__IO uint32_t*)0xF0010434U) /**< \brief (XDMAC0) Channel Block Control Register (chid = 15) */
  #define REG_XDMAC0_CC15      (*(__IO uint32_t*)0xF0010438U) /**< \brief (XDMAC0) Channel Configuration Register (chid = 15) */
  #define REG_XDMAC0_CDS_MSP15 (*(__IO uint32_t*)0xF001043CU) /**< \brief (XDMAC0) Channel Data Stride Memory Set Pattern (chid = 15) */
  #define REG_XDMAC0_CSUS15    (*(__IO uint32_t*)0xF0010440U) /**< \brief (XDMAC0) Channel Source Microblock Stride (chid = 15) */
  #define REG_XDMAC0_CDUS15    (*(__IO uint32_t*)0xF0010444U) /**< \brief (XDMAC0) Channel Destination Microblock Stride (chid = 15) */
  #define REG_XDMAC0_VERSION   (*(__IO uint32_t*)0xF0010FFCU) /**< \brief (XDMAC0) XDMAC Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for PMC peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_PMC_SCER                        (0xF0014000U) /**< \brief (PMC) System Clock Enable Register */
  #define REG_PMC_SCDR                        (0xF0014004U) /**< \brief (PMC) System Clock Disable Register */
  #define REG_PMC_SCSR                        (0xF0014008U) /**< \brief (PMC) System Clock Status Register */
  #define REG_CKGR_UCKR                       (0xF001401CU) /**< \brief (PMC) UTMI Clock Register */
  #define REG_CKGR_MOR                        (0xF0014020U) /**< \brief (PMC) Main Oscillator Register */
  #define REG_CKGR_MCFR                       (0xF0014024U) /**< \brief (PMC) Main Clock Frequency Register */
  #define REG_CKGR_PLLAR                      (0xF0014028U) /**< \brief (PMC) PLLA Register */
  #define REG_PMC_MCKR                        (0xF0014030U) /**< \brief (PMC) Master Clock Register */
  #define REG_PMC_USB                         (0xF0014038U) /**< \brief (PMC) USB Clock Register */
  #define REG_PMC_SMD                         (0xF001403CU) /**< \brief (PMC) Soft Modem Clock Register */
  #define REG_PMC_PCK                         (0xF0014040U) /**< \brief (PMC) Programmable Clock 0 Register */
  #define REG_PMC_IER                         (0xF0014060U) /**< \brief (PMC) Interrupt Enable Register */
  #define REG_PMC_IDR                         (0xF0014064U) /**< \brief (PMC) Interrupt Disable Register */
  #define REG_PMC_SR                          (0xF0014068U) /**< \brief (PMC) Status Register */
  #define REG_PMC_IMR                         (0xF001406CU) /**< \brief (PMC) Interrupt Mask Register */
  #define REG_PMC_FSMR                        (0xF0014070U) /**< \brief (PMC) PMC Fast Startup Mode Register */
  #define REG_PMC_FSPR                        (0xF0014074U) /**< \brief (PMC) PMC Fast Startup Polarity Register */
  #define REG_PMC_FOCR                        (0xF0014078U) /**< \brief (PMC) Fault Output Clear Register */
  #define REG_PMC_PLLICPR                     (0xF0014080U) /**< \brief (PMC) PLL Charge Pump Current Register */
  #define REG_PMC_WPMR                        (0xF00140E4U) /**< \brief (PMC) Write ProtectIon Mode Register */
  #define REG_PMC_WPSR                        (0xF00140E8U) /**< \brief (PMC) Write Protection Status Register */
  #define REG_PMC_ADDRSIZE                    (0xF00140ECU) /**< \brief (PMC) Address Size Register */
  #define REG_PMC_IPNAME                      (0xF00140F0U) /**< \brief (PMC) IP Name1 Register */
  #define REG_PMC_FEATURES                    (0xF00140F8U) /**< \brief (PMC) Features Register */
  #define REG_PMC_VERSION                     (0xF00140FCU) /**< \brief (PMC) Version Register */
  #define REG_PMC_PCR                         (0xF001410CU) /**< \brief (PMC) Peripheral Control Register */
  #define REG_PMC_OCR                         (0xF0014110U) /**< \brief (PMC) Oscillator Calibration Register */
  #define REG_PMC_SLPWK_AIPR                  (0xF0014144U) /**< \brief (PMC) SleepWalking Activity In Progress Register */
  #define REG_PMC_SLPWKCR                     (0xF0014148U) /**< \brief (PMC) SleepWalking Control Register */
  #define REG_PMC_AUDIO_PLL0                  (0xF001414CU) /**< \brief (PMC) Audio PLL Register 0 */
  #define REG_PMC_AUDIO_PLL1                  (0xF0014150U) /**< \brief (PMC) Audio PLL Register 1 */
#else
  #define REG_PMC_SCER       (*(__O  uint32_t*)0xF0014000U) /**< \brief (PMC) System Clock Enable Register */
  #define REG_PMC_SCDR       (*(__O  uint32_t*)0xF0014004U) /**< \brief (PMC) System Clock Disable Register */
  #define REG_PMC_SCSR       (*(__I  uint32_t*)0xF0014008U) /**< \brief (PMC) System Clock Status Register */
  #define REG_CKGR_UCKR      (*(__IO uint32_t*)0xF001401CU) /**< \brief (PMC) UTMI Clock Register */
  #define REG_CKGR_MOR       (*(__IO uint32_t*)0xF0014020U) /**< \brief (PMC) Main Oscillator Register */
  #define REG_CKGR_MCFR      (*(__IO uint32_t*)0xF0014024U) /**< \brief (PMC) Main Clock Frequency Register */
  #define REG_CKGR_PLLAR     (*(__IO uint32_t*)0xF0014028U) /**< \brief (PMC) PLLA Register */
  #define REG_PMC_MCKR       (*(__IO uint32_t*)0xF0014030U) /**< \brief (PMC) Master Clock Register */
  #define REG_PMC_USB        (*(__IO uint32_t*)0xF0014038U) /**< \brief (PMC) USB Clock Register */
  #define REG_PMC_SMD        (*(__IO uint32_t*)0xF001403CU) /**< \brief (PMC) Soft Modem Clock Register */
  #define REG_PMC_PCK        (*(__IO uint32_t*)0xF0014040U) /**< \brief (PMC) Programmable Clock 0 Register */
  #define REG_PMC_IER        (*(__O  uint32_t*)0xF0014060U) /**< \brief (PMC) Interrupt Enable Register */
  #define REG_PMC_IDR        (*(__O  uint32_t*)0xF0014064U) /**< \brief (PMC) Interrupt Disable Register */
  #define REG_PMC_SR         (*(__I  uint32_t*)0xF0014068U) /**< \brief (PMC) Status Register */
  #define REG_PMC_IMR        (*(__I  uint32_t*)0xF001406CU) /**< \brief (PMC) Interrupt Mask Register */
  #define REG_PMC_FSMR       (*(__IO uint32_t*)0xF0014070U) /**< \brief (PMC) PMC Fast Startup Mode Register */
  #define REG_PMC_FSPR       (*(__IO uint32_t*)0xF0014074U) /**< \brief (PMC) PMC Fast Startup Polarity Register */
  #define REG_PMC_FOCR       (*(__O  uint32_t*)0xF0014078U) /**< \brief (PMC) Fault Output Clear Register */
  #define REG_PMC_PLLICPR    (*(__IO uint32_t*)0xF0014080U) /**< \brief (PMC) PLL Charge Pump Current Register */
  #define REG_PMC_WPMR       (*(__IO uint32_t*)0xF00140E4U) /**< \brief (PMC) Write ProtectIon Mode Register */
  #define REG_PMC_WPSR       (*(__I  uint32_t*)0xF00140E8U) /**< \brief (PMC) Write Protection Status Register */
  #define REG_PMC_ADDRSIZE   (*(__I  uint32_t*)0xF00140ECU) /**< \brief (PMC) Address Size Register */
  #define REG_PMC_IPNAME     (*(__I  uint32_t*)0xF00140F0U) /**< \brief (PMC) IP Name1 Register */
  #define REG_PMC_FEATURES   (*(__I  uint32_t*)0xF00140F8U) /**< \brief (PMC) Features Register */
  #define REG_PMC_VERSION    (*(__I  uint32_t*)0xF00140FCU) /**< \brief (PMC) Version Register */
  #define REG_PMC_PCR        (*(__IO uint32_t*)0xF001410CU) /**< \brief (PMC) Peripheral Control Register */
  #define REG_PMC_OCR        (*(__IO uint32_t*)0xF0014110U) /**< \brief (PMC) Oscillator Calibration Register */
  #define REG_PMC_SLPWK_AIPR (*(__I  uint32_t*)0xF0014144U) /**< \brief (PMC) SleepWalking Activity In Progress Register */
  #define REG_PMC_SLPWKCR    (*(__IO uint32_t*)0xF0014148U) /**< \brief (PMC) SleepWalking Control Register */
  #define REG_PMC_AUDIO_PLL0 (*(__IO uint32_t*)0xF001414CU) /**< \brief (PMC) Audio PLL Register 0 */
  #define REG_PMC_AUDIO_PLL1 (*(__IO uint32_t*)0xF0014150U) /**< \brief (PMC) Audio PLL Register 1 */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for MATRIX0 peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_MATRIX0_MCFG                     (0xF0018000U) /**< \brief (MATRIX0) Master Configuration Register */
  #define REG_MATRIX0_SCFG                     (0xF0018040U) /**< \brief (MATRIX0) Slave Configuration Register */
  #define REG_MATRIX0_PRAS0                    (0xF0018080U) /**< \brief (MATRIX0) Priority Register A for Slave 0 */
  #define REG_MATRIX0_PRBS0                    (0xF0018084U) /**< \brief (MATRIX0) Priority Register B for Slave 0 */
  #define REG_MATRIX0_PRAS1                    (0xF0018088U) /**< \brief (MATRIX0) Priority Register A for Slave 1 */
  #define REG_MATRIX0_PRBS1                    (0xF001808CU) /**< \brief (MATRIX0) Priority Register B for Slave 1 */
  #define REG_MATRIX0_PRAS2                    (0xF0018090U) /**< \brief (MATRIX0) Priority Register A for Slave 2 */
  #define REG_MATRIX0_PRBS2                    (0xF0018094U) /**< \brief (MATRIX0) Priority Register B for Slave 2 */
  #define REG_MATRIX0_PRAS3                    (0xF0018098U) /**< \brief (MATRIX0) Priority Register A for Slave 3 */
  #define REG_MATRIX0_PRBS3                    (0xF001809CU) /**< \brief (MATRIX0) Priority Register B for Slave 3 */
  #define REG_MATRIX0_PRAS4                    (0xF00180A0U) /**< \brief (MATRIX0) Priority Register A for Slave 4 */
  #define REG_MATRIX0_PRBS4                    (0xF00180A4U) /**< \brief (MATRIX0) Priority Register B for Slave 4 */
  #define REG_MATRIX0_PRAS5                    (0xF00180A8U) /**< \brief (MATRIX0) Priority Register A for Slave 5 */
  #define REG_MATRIX0_PRBS5                    (0xF00180ACU) /**< \brief (MATRIX0) Priority Register B for Slave 5 */
  #define REG_MATRIX0_PRAS6                    (0xF00180B0U) /**< \brief (MATRIX0) Priority Register A for Slave 6 */
  #define REG_MATRIX0_PRBS6                    (0xF00180B4U) /**< \brief (MATRIX0) Priority Register B for Slave 6 */
  #define REG_MATRIX0_PRAS7                    (0xF00180B8U) /**< \brief (MATRIX0) Priority Register A for Slave 7 */
  #define REG_MATRIX0_PRBS7                    (0xF00180BCU) /**< \brief (MATRIX0) Priority Register B for Slave 7 */
  #define REG_MATRIX0_PRAS8                    (0xF00180C0U) /**< \brief (MATRIX0) Priority Register A for Slave 8 */
  #define REG_MATRIX0_PRBS8                    (0xF00180C4U) /**< \brief (MATRIX0) Priority Register B for Slave 8 */
  #define REG_MATRIX0_PRAS9                    (0xF00180C8U) /**< \brief (MATRIX0) Priority Register A for Slave 9 */
  #define REG_MATRIX0_PRBS9                    (0xF00180CCU) /**< \brief (MATRIX0) Priority Register B for Slave 9 */
  #define REG_MATRIX0_PRAS10                   (0xF00180D0U) /**< \brief (MATRIX0) Priority Register A for Slave 10 */
  #define REG_MATRIX0_PRBS10                   (0xF00180D4U) /**< \brief (MATRIX0) Priority Register B for Slave 10 */
  #define REG_MATRIX0_PRAS11                   (0xF00180D8U) /**< \brief (MATRIX0) Priority Register A for Slave 11 */
  #define REG_MATRIX0_PRBS11                   (0xF00180DCU) /**< \brief (MATRIX0) Priority Register B for Slave 11 */
  #define REG_MATRIX0_PRAS12                   (0xF00180E0U) /**< \brief (MATRIX0) Priority Register A for Slave 12 */
  #define REG_MATRIX0_PRBS12                   (0xF00180E4U) /**< \brief (MATRIX0) Priority Register B for Slave 12 */
  #define REG_MATRIX0_PRAS13                   (0xF00180E8U) /**< \brief (MATRIX0) Priority Register A for Slave 13 */
  #define REG_MATRIX0_PRBS13                   (0xF00180ECU) /**< \brief (MATRIX0) Priority Register B for Slave 13 */
  #define REG_MATRIX0_PRAS14                   (0xF00180F0U) /**< \brief (MATRIX0) Priority Register A for Slave 14 */
  #define REG_MATRIX0_PRBS14                   (0xF00180F4U) /**< \brief (MATRIX0) Priority Register B for Slave 14 */
  #define REG_MATRIX0_PRAS15                   (0xF00180F8U) /**< \brief (MATRIX0) Priority Register A for Slave 15 */
  #define REG_MATRIX0_PRBS15                   (0xF00180FCU) /**< \brief (MATRIX0) Priority Register B for Slave 15 */
  #define REG_MATRIX0_MRCR                     (0xF0018100U) /**< \brief (MATRIX0) Master Remap Control Register */
  #define REG_MATRIX0_SFR                      (0xF0018110U) /**< \brief (MATRIX0) Special Function Register */
  #define REG_MATRIX0_MEIER                    (0xF0018150U) /**< \brief (MATRIX0) Master Error Interrupt Enable Register */
  #define REG_MATRIX0_MEIDR                    (0xF0018154U) /**< \brief (MATRIX0) Master Error Interrupt Disable Register */
  #define REG_MATRIX0_MEIMR                    (0xF0018158U) /**< \brief (MATRIX0) Master Error Interrupt Mask Register */
  #define REG_MATRIX0_MESR                     (0xF001815CU) /**< \brief (MATRIX0) Master Error Status Register */
  #define REG_MATRIX0_MEAR                     (0xF0018160U) /**< \brief (MATRIX0) Master 0 Error Address Register */
  #define REG_MATRIX0_WPMR                     (0xF00181E4U) /**< \brief (MATRIX0) Write Protect Mode Register */
  #define REG_MATRIX0_WPSR                     (0xF00181E8U) /**< \brief (MATRIX0) Write Protect Status Register */
  #define REG_MATRIX0_VERSION                  (0xF00181FCU) /**< \brief (MATRIX0) Version Register */
  #define REG_MATRIX0_SSR                      (0xF0018200U) /**< \brief (MATRIX0) Security Slave 0 Register */
  #define REG_MATRIX0_SASSR                    (0xF0018240U) /**< \brief (MATRIX0) Security Areas Split Slave 0 Register */
  #define REG_MATRIX0_SRTSR                    (0xF0018280U) /**< \brief (MATRIX0) Security Region Top Slave 0 Register */
  #define REG_MATRIX0_SPSELR                   (0xF00182C0U) /**< \brief (MATRIX0) Security Peripheral Select 1 Register */
#else
  #define REG_MATRIX0_MCFG    (*(__IO uint32_t*)0xF0018000U) /**< \brief (MATRIX0) Master Configuration Register */
  #define REG_MATRIX0_SCFG    (*(__IO uint32_t*)0xF0018040U) /**< \brief (MATRIX0) Slave Configuration Register */
  #define REG_MATRIX0_PRAS0   (*(__IO uint32_t*)0xF0018080U) /**< \brief (MATRIX0) Priority Register A for Slave 0 */
  #define REG_MATRIX0_PRBS0   (*(__IO uint32_t*)0xF0018084U) /**< \brief (MATRIX0) Priority Register B for Slave 0 */
  #define REG_MATRIX0_PRAS1   (*(__IO uint32_t*)0xF0018088U) /**< \brief (MATRIX0) Priority Register A for Slave 1 */
  #define REG_MATRIX0_PRBS1   (*(__IO uint32_t*)0xF001808CU) /**< \brief (MATRIX0) Priority Register B for Slave 1 */
  #define REG_MATRIX0_PRAS2   (*(__IO uint32_t*)0xF0018090U) /**< \brief (MATRIX0) Priority Register A for Slave 2 */
  #define REG_MATRIX0_PRBS2   (*(__IO uint32_t*)0xF0018094U) /**< \brief (MATRIX0) Priority Register B for Slave 2 */
  #define REG_MATRIX0_PRAS3   (*(__IO uint32_t*)0xF0018098U) /**< \brief (MATRIX0) Priority Register A for Slave 3 */
  #define REG_MATRIX0_PRBS3   (*(__IO uint32_t*)0xF001809CU) /**< \brief (MATRIX0) Priority Register B for Slave 3 */
  #define REG_MATRIX0_PRAS4   (*(__IO uint32_t*)0xF00180A0U) /**< \brief (MATRIX0) Priority Register A for Slave 4 */
  #define REG_MATRIX0_PRBS4   (*(__IO uint32_t*)0xF00180A4U) /**< \brief (MATRIX0) Priority Register B for Slave 4 */
  #define REG_MATRIX0_PRAS5   (*(__IO uint32_t*)0xF00180A8U) /**< \brief (MATRIX0) Priority Register A for Slave 5 */
  #define REG_MATRIX0_PRBS5   (*(__IO uint32_t*)0xF00180ACU) /**< \brief (MATRIX0) Priority Register B for Slave 5 */
  #define REG_MATRIX0_PRAS6   (*(__IO uint32_t*)0xF00180B0U) /**< \brief (MATRIX0) Priority Register A for Slave 6 */
  #define REG_MATRIX0_PRBS6   (*(__IO uint32_t*)0xF00180B4U) /**< \brief (MATRIX0) Priority Register B for Slave 6 */
  #define REG_MATRIX0_PRAS7   (*(__IO uint32_t*)0xF00180B8U) /**< \brief (MATRIX0) Priority Register A for Slave 7 */
  #define REG_MATRIX0_PRBS7   (*(__IO uint32_t*)0xF00180BCU) /**< \brief (MATRIX0) Priority Register B for Slave 7 */
  #define REG_MATRIX0_PRAS8   (*(__IO uint32_t*)0xF00180C0U) /**< \brief (MATRIX0) Priority Register A for Slave 8 */
  #define REG_MATRIX0_PRBS8   (*(__IO uint32_t*)0xF00180C4U) /**< \brief (MATRIX0) Priority Register B for Slave 8 */
  #define REG_MATRIX0_PRAS9   (*(__IO uint32_t*)0xF00180C8U) /**< \brief (MATRIX0) Priority Register A for Slave 9 */
  #define REG_MATRIX0_PRBS9   (*(__IO uint32_t*)0xF00180CCU) /**< \brief (MATRIX0) Priority Register B for Slave 9 */
  #define REG_MATRIX0_PRAS10  (*(__IO uint32_t*)0xF00180D0U) /**< \brief (MATRIX0) Priority Register A for Slave 10 */
  #define REG_MATRIX0_PRBS10  (*(__IO uint32_t*)0xF00180D4U) /**< \brief (MATRIX0) Priority Register B for Slave 10 */
  #define REG_MATRIX0_PRAS11  (*(__IO uint32_t*)0xF00180D8U) /**< \brief (MATRIX0) Priority Register A for Slave 11 */
  #define REG_MATRIX0_PRBS11  (*(__IO uint32_t*)0xF00180DCU) /**< \brief (MATRIX0) Priority Register B for Slave 11 */
  #define REG_MATRIX0_PRAS12  (*(__IO uint32_t*)0xF00180E0U) /**< \brief (MATRIX0) Priority Register A for Slave 12 */
  #define REG_MATRIX0_PRBS12  (*(__IO uint32_t*)0xF00180E4U) /**< \brief (MATRIX0) Priority Register B for Slave 12 */
  #define REG_MATRIX0_PRAS13  (*(__IO uint32_t*)0xF00180E8U) /**< \brief (MATRIX0) Priority Register A for Slave 13 */
  #define REG_MATRIX0_PRBS13  (*(__IO uint32_t*)0xF00180ECU) /**< \brief (MATRIX0) Priority Register B for Slave 13 */
  #define REG_MATRIX0_PRAS14  (*(__IO uint32_t*)0xF00180F0U) /**< \brief (MATRIX0) Priority Register A for Slave 14 */
  #define REG_MATRIX0_PRBS14  (*(__IO uint32_t*)0xF00180F4U) /**< \brief (MATRIX0) Priority Register B for Slave 14 */
  #define REG_MATRIX0_PRAS15  (*(__IO uint32_t*)0xF00180F8U) /**< \brief (MATRIX0) Priority Register A for Slave 15 */
  #define REG_MATRIX0_PRBS15  (*(__IO uint32_t*)0xF00180FCU) /**< \brief (MATRIX0) Priority Register B for Slave 15 */
  #define REG_MATRIX0_MRCR    (*(__IO uint32_t*)0xF0018100U) /**< \brief (MATRIX0) Master Remap Control Register */
  #define REG_MATRIX0_SFR     (*(__IO uint32_t*)0xF0018110U) /**< \brief (MATRIX0) Special Function Register */
  #define REG_MATRIX0_MEIER   (*(__O  uint32_t*)0xF0018150U) /**< \brief (MATRIX0) Master Error Interrupt Enable Register */
  #define REG_MATRIX0_MEIDR   (*(__O  uint32_t*)0xF0018154U) /**< \brief (MATRIX0) Master Error Interrupt Disable Register */
  #define REG_MATRIX0_MEIMR   (*(__I  uint32_t*)0xF0018158U) /**< \brief (MATRIX0) Master Error Interrupt Mask Register */
  #define REG_MATRIX0_MESR    (*(__I  uint32_t*)0xF001815CU) /**< \brief (MATRIX0) Master Error Status Register */
  #define REG_MATRIX0_MEAR    (*(__I  uint32_t*)0xF0018160U) /**< \brief (MATRIX0) Master 0 Error Address Register */
  #define REG_MATRIX0_WPMR    (*(__IO uint32_t*)0xF00181E4U) /**< \brief (MATRIX0) Write Protect Mode Register */
  #define REG_MATRIX0_WPSR    (*(__I  uint32_t*)0xF00181E8U) /**< \brief (MATRIX0) Write Protect Status Register */
  #define REG_MATRIX0_VERSION (*(__I  uint32_t*)0xF00181FCU) /**< \brief (MATRIX0) Version Register */
  #define REG_MATRIX0_SSR     (*(__IO uint32_t*)0xF0018200U) /**< \brief (MATRIX0) Security Slave 0 Register */
  #define REG_MATRIX0_SASSR   (*(__IO uint32_t*)0xF0018240U) /**< \brief (MATRIX0) Security Areas Split Slave 0 Register */
  #define REG_MATRIX0_SRTSR   (*(__IO uint32_t*)0xF0018280U) /**< \brief (MATRIX0) Security Region Top Slave 0 Register */
  #define REG_MATRIX0_SPSELR  (*(__IO uint32_t*)0xF00182C0U) /**< \brief (MATRIX0) Security Peripheral Select 1 Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for AESB peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_AESB_CR                       (0xF001C000U) /**< \brief (AESB) Control Register */
  #define REG_AESB_MR                       (0xF001C004U) /**< \brief (AESB) Mode Register */
  #define REG_AESB_IER                      (0xF001C010U) /**< \brief (AESB) Interrupt Enable Register */
  #define REG_AESB_IDR                      (0xF001C014U) /**< \brief (AESB) Interrupt Disable Register */
  #define REG_AESB_IMR                      (0xF001C018U) /**< \brief (AESB) Interrupt Mask Register */
  #define REG_AESB_ISR                      (0xF001C01CU) /**< \brief (AESB) Interrupt Status Register */
  #define REG_AESB_KEYWR                    (0xF001C020U) /**< \brief (AESB) Key Word Register */
  #define REG_AESB_IDATAR                   (0xF001C040U) /**< \brief (AESB) Input Data Register */
  #define REG_AESB_ODATAR                   (0xF001C050U) /**< \brief (AESB) Output Data Register */
  #define REG_AESB_IVR                      (0xF001C060U) /**< \brief (AESB) Initialization Vector Register */
  #define REG_AESB_VERSION                  (0xF001C0FCU) /**< \brief (AESB) Version Register */
#else
  #define REG_AESB_CR      (*(__O  uint32_t*)0xF001C000U) /**< \brief (AESB) Control Register */
  #define REG_AESB_MR      (*(__IO uint32_t*)0xF001C004U) /**< \brief (AESB) Mode Register */
  #define REG_AESB_IER     (*(__O  uint32_t*)0xF001C010U) /**< \brief (AESB) Interrupt Enable Register */
  #define REG_AESB_IDR     (*(__O  uint32_t*)0xF001C014U) /**< \brief (AESB) Interrupt Disable Register */
  #define REG_AESB_IMR     (*(__I  uint32_t*)0xF001C018U) /**< \brief (AESB) Interrupt Mask Register */
  #define REG_AESB_ISR     (*(__I  uint32_t*)0xF001C01CU) /**< \brief (AESB) Interrupt Status Register */
  #define REG_AESB_KEYWR   (*(__O  uint32_t*)0xF001C020U) /**< \brief (AESB) Key Word Register */
  #define REG_AESB_IDATAR  (*(__O  uint32_t*)0xF001C040U) /**< \brief (AESB) Input Data Register */
  #define REG_AESB_ODATAR  (*(__I  uint32_t*)0xF001C050U) /**< \brief (AESB) Output Data Register */
  #define REG_AESB_IVR     (*(__O  uint32_t*)0xF001C060U) /**< \brief (AESB) Initialization Vector Register */
  #define REG_AESB_VERSION (*(__I  uint32_t*)0xF001C0FCU) /**< \brief (AESB) Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for QSPI0 peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_QSPI0_CR                       (0xF0020000U) /**< \brief (QSPI0) Control Register */
  #define REG_QSPI0_MR                       (0xF0020004U) /**< \brief (QSPI0) Mode Register */
  #define REG_QSPI0_RDR                      (0xF0020008U) /**< \brief (QSPI0) Receive Data Register */
  #define REG_QSPI0_TDR                      (0xF002000CU) /**< \brief (QSPI0) Transmit Data Register */
  #define REG_QSPI0_SR                       (0xF0020010U) /**< \brief (QSPI0) Status Register */
  #define REG_QSPI0_IER                      (0xF0020014U) /**< \brief (QSPI0) Interrupt Enable Register */
  #define REG_QSPI0_IDR                      (0xF0020018U) /**< \brief (QSPI0) Interrupt Disable Register */
  #define REG_QSPI0_IMR                      (0xF002001CU) /**< \brief (QSPI0) Interrupt Mask Register */
  #define REG_QSPI0_SCR                      (0xF0020020U) /**< \brief (QSPI0) Serial Clock Register */
  #define REG_QSPI0_IAR                      (0xF0020030U) /**< \brief (QSPI0) Instruction Address Register */
  #define REG_QSPI0_ICR                      (0xF0020034U) /**< \brief (QSPI0) Instruction Code Register */
  #define REG_QSPI0_IFR                      (0xF0020038U) /**< \brief (QSPI0) Instruction Frame Register */
  #define REG_QSPI0_SMR                      (0xF0020040U) /**< \brief (QSPI0) Scrambling Mode Register */
  #define REG_QSPI0_SKR                      (0xF0020044U) /**< \brief (QSPI0) Scrambling Key Register */
  #define REG_QSPI0_WPMR                     (0xF00200E4U) /**< \brief (QSPI0) Write Protection Mode Register */
  #define REG_QSPI0_WPSR                     (0xF00200E8U) /**< \brief (QSPI0) Write Protection Status Register */
  #define REG_QSPI0_VERSION                  (0xF00200FCU) /**< \brief (QSPI0) Version Register */
#else
  #define REG_QSPI0_CR      (*(__O  uint32_t*)0xF0020000U) /**< \brief (QSPI0) Control Register */
  #define REG_QSPI0_MR      (*(__IO uint32_t*)0xF0020004U) /**< \brief (QSPI0) Mode Register */
  #define REG_QSPI0_RDR     (*(__I  uint32_t*)0xF0020008U) /**< \brief (QSPI0) Receive Data Register */
  #define REG_QSPI0_TDR     (*(__O  uint32_t*)0xF002000CU) /**< \brief (QSPI0) Transmit Data Register */
  #define REG_QSPI0_SR      (*(__I  uint32_t*)0xF0020010U) /**< \brief (QSPI0) Status Register */
  #define REG_QSPI0_IER     (*(__O  uint32_t*)0xF0020014U) /**< \brief (QSPI0) Interrupt Enable Register */
  #define REG_QSPI0_IDR     (*(__O  uint32_t*)0xF0020018U) /**< \brief (QSPI0) Interrupt Disable Register */
  #define REG_QSPI0_IMR     (*(__I  uint32_t*)0xF002001CU) /**< \brief (QSPI0) Interrupt Mask Register */
  #define REG_QSPI0_SCR     (*(__IO uint32_t*)0xF0020020U) /**< \brief (QSPI0) Serial Clock Register */
  #define REG_QSPI0_IAR     (*(__IO uint32_t*)0xF0020030U) /**< \brief (QSPI0) Instruction Address Register */
  #define REG_QSPI0_ICR     (*(__IO uint32_t*)0xF0020034U) /**< \brief (QSPI0) Instruction Code Register */
  #define REG_QSPI0_IFR     (*(__IO uint32_t*)0xF0020038U) /**< \brief (QSPI0) Instruction Frame Register */
  #define REG_QSPI0_SMR     (*(__IO uint32_t*)0xF0020040U) /**< \brief (QSPI0) Scrambling Mode Register */
  #define REG_QSPI0_SKR     (*(__IO uint32_t*)0xF0020044U) /**< \brief (QSPI0) Scrambling Key Register */
  #define REG_QSPI0_WPMR    (*(__IO uint32_t*)0xF00200E4U) /**< \brief (QSPI0) Write Protection Mode Register */
  #define REG_QSPI0_WPSR    (*(__I  uint32_t*)0xF00200E8U) /**< \brief (QSPI0) Write Protection Status Register */
  #define REG_QSPI0_VERSION (*(__I  uint32_t*)0xF00200FCU) /**< \brief (QSPI0) Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for QSPI1 peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_QSPI1_CR                       (0xF0024000U) /**< \brief (QSPI1) Control Register */
  #define REG_QSPI1_MR                       (0xF0024004U) /**< \brief (QSPI1) Mode Register */
  #define REG_QSPI1_RDR                      (0xF0024008U) /**< \brief (QSPI1) Receive Data Register */
  #define REG_QSPI1_TDR                      (0xF002400CU) /**< \brief (QSPI1) Transmit Data Register */
  #define REG_QSPI1_SR                       (0xF0024010U) /**< \brief (QSPI1) Status Register */
  #define REG_QSPI1_IER                      (0xF0024014U) /**< \brief (QSPI1) Interrupt Enable Register */
  #define REG_QSPI1_IDR                      (0xF0024018U) /**< \brief (QSPI1) Interrupt Disable Register */
  #define REG_QSPI1_IMR                      (0xF002401CU) /**< \brief (QSPI1) Interrupt Mask Register */
  #define REG_QSPI1_SCR                      (0xF0024020U) /**< \brief (QSPI1) Serial Clock Register */
  #define REG_QSPI1_IAR                      (0xF0024030U) /**< \brief (QSPI1) Instruction Address Register */
  #define REG_QSPI1_ICR                      (0xF0024034U) /**< \brief (QSPI1) Instruction Code Register */
  #define REG_QSPI1_IFR                      (0xF0024038U) /**< \brief (QSPI1) Instruction Frame Register */
  #define REG_QSPI1_SMR                      (0xF0024040U) /**< \brief (QSPI1) Scrambling Mode Register */
  #define REG_QSPI1_SKR                      (0xF0024044U) /**< \brief (QSPI1) Scrambling Key Register */
  #define REG_QSPI1_WPMR                     (0xF00240E4U) /**< \brief (QSPI1) Write Protection Mode Register */
  #define REG_QSPI1_WPSR                     (0xF00240E8U) /**< \brief (QSPI1) Write Protection Status Register */
  #define REG_QSPI1_VERSION                  (0xF00240FCU) /**< \brief (QSPI1) Version Register */
#else
  #define REG_QSPI1_CR      (*(__O  uint32_t*)0xF0024000U) /**< \brief (QSPI1) Control Register */
  #define REG_QSPI1_MR      (*(__IO uint32_t*)0xF0024004U) /**< \brief (QSPI1) Mode Register */
  #define REG_QSPI1_RDR     (*(__I  uint32_t*)0xF0024008U) /**< \brief (QSPI1) Receive Data Register */
  #define REG_QSPI1_TDR     (*(__O  uint32_t*)0xF002400CU) /**< \brief (QSPI1) Transmit Data Register */
  #define REG_QSPI1_SR      (*(__I  uint32_t*)0xF0024010U) /**< \brief (QSPI1) Status Register */
  #define REG_QSPI1_IER     (*(__O  uint32_t*)0xF0024014U) /**< \brief (QSPI1) Interrupt Enable Register */
  #define REG_QSPI1_IDR     (*(__O  uint32_t*)0xF0024018U) /**< \brief (QSPI1) Interrupt Disable Register */
  #define REG_QSPI1_IMR     (*(__I  uint32_t*)0xF002401CU) /**< \brief (QSPI1) Interrupt Mask Register */
  #define REG_QSPI1_SCR     (*(__IO uint32_t*)0xF0024020U) /**< \brief (QSPI1) Serial Clock Register */
  #define REG_QSPI1_IAR     (*(__IO uint32_t*)0xF0024030U) /**< \brief (QSPI1) Instruction Address Register */
  #define REG_QSPI1_ICR     (*(__IO uint32_t*)0xF0024034U) /**< \brief (QSPI1) Instruction Code Register */
  #define REG_QSPI1_IFR     (*(__IO uint32_t*)0xF0024038U) /**< \brief (QSPI1) Instruction Frame Register */
  #define REG_QSPI1_SMR     (*(__IO uint32_t*)0xF0024040U) /**< \brief (QSPI1) Scrambling Mode Register */
  #define REG_QSPI1_SKR     (*(__IO uint32_t*)0xF0024044U) /**< \brief (QSPI1) Scrambling Key Register */
  #define REG_QSPI1_WPMR    (*(__IO uint32_t*)0xF00240E4U) /**< \brief (QSPI1) Write Protection Mode Register */
  #define REG_QSPI1_WPSR    (*(__I  uint32_t*)0xF00240E8U) /**< \brief (QSPI1) Write Protection Status Register */
  #define REG_QSPI1_VERSION (*(__I  uint32_t*)0xF00240FCU) /**< \brief (QSPI1) Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for SHA peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_SHA_CR                        (0xF0028000U) /**< \brief (SHA) Control Register */
  #define REG_SHA_MR                        (0xF0028004U) /**< \brief (SHA) Mode Register */
  #define REG_SHA_IER                       (0xF0028010U) /**< \brief (SHA) Interrupt Enable Register */
  #define REG_SHA_IDR                       (0xF0028014U) /**< \brief (SHA) Interrupt Disable Register */
  #define REG_SHA_IMR                       (0xF0028018U) /**< \brief (SHA) Interrupt Mask Register */
  #define REG_SHA_ISR                       (0xF002801CU) /**< \brief (SHA) Interrupt Status Register */
  #define REG_SHA_IDATAR                    (0xF0028040U) /**< \brief (SHA) Input Data 0 Register */
  #define REG_SHA_IODATAR                   (0xF0028080U) /**< \brief (SHA) Input/Output Data 0 Register */
  #define REG_SHA_ADDRSIZE                  (0xF00280ECU) /**< \brief (SHA) Address Size Register */
  #define REG_SHA_IPNAME                    (0xF00280F0U) /**< \brief (SHA) IP Name 1 Register */
  #define REG_SHA_FEATURES                  (0xF00280F8U) /**< \brief (SHA) IP FEATURES Register */
  #define REG_SHA_VERSION                   (0xF00280FCU) /**< \brief (SHA) Version Register */
#else
  #define REG_SHA_CR       (*(__O  uint32_t*)0xF0028000U) /**< \brief (SHA) Control Register */
  #define REG_SHA_MR       (*(__IO uint32_t*)0xF0028004U) /**< \brief (SHA) Mode Register */
  #define REG_SHA_IER      (*(__O  uint32_t*)0xF0028010U) /**< \brief (SHA) Interrupt Enable Register */
  #define REG_SHA_IDR      (*(__O  uint32_t*)0xF0028014U) /**< \brief (SHA) Interrupt Disable Register */
  #define REG_SHA_IMR      (*(__I  uint32_t*)0xF0028018U) /**< \brief (SHA) Interrupt Mask Register */
  #define REG_SHA_ISR      (*(__I  uint32_t*)0xF002801CU) /**< \brief (SHA) Interrupt Status Register */
  #define REG_SHA_IDATAR   (*(__O  uint32_t*)0xF0028040U) /**< \brief (SHA) Input Data 0 Register */
  #define REG_SHA_IODATAR  (*(__IO uint32_t*)0xF0028080U) /**< \brief (SHA) Input/Output Data 0 Register */
  #define REG_SHA_ADDRSIZE (*(__I  uint32_t*)0xF00280ECU) /**< \brief (SHA) Address Size Register */
  #define REG_SHA_IPNAME   (*(__I  uint32_t*)0xF00280F0U) /**< \brief (SHA) IP Name 1 Register */
  #define REG_SHA_FEATURES (*(__I  uint32_t*)0xF00280F8U) /**< \brief (SHA) IP FEATURES Register */
  #define REG_SHA_VERSION  (*(__I  uint32_t*)0xF00280FCU) /**< \brief (SHA) Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for AES peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_AES_CR                       (0xF002C000U) /**< \brief (AES) Control Register */
  #define REG_AES_MR                       (0xF002C004U) /**< \brief (AES) Mode Register */
  #define REG_AES_IER                      (0xF002C010U) /**< \brief (AES) Interrupt Enable Register */
  #define REG_AES_IDR                      (0xF002C014U) /**< \brief (AES) Interrupt Disable Register */
  #define REG_AES_IMR                      (0xF002C018U) /**< \brief (AES) Interrupt Mask Register */
  #define REG_AES_ISR                      (0xF002C01CU) /**< \brief (AES) Interrupt Status Register */
  #define REG_AES_KEYWR                    (0xF002C020U) /**< \brief (AES) Key Word Register */
  #define REG_AES_IDATAR                   (0xF002C040U) /**< \brief (AES) Input Data Register */
  #define REG_AES_ODATAR                   (0xF002C050U) /**< \brief (AES) Output Data Register */
  #define REG_AES_IVR                      (0xF002C060U) /**< \brief (AES) Initialization Vector Register */
  #define REG_AES_AADLENR                  (0xF002C070U) /**< \brief (AES) Additional Authenticated Data Length Register */
  #define REG_AES_CLENR                    (0xF002C074U) /**< \brief (AES) Plaintext/Ciphertext Length Register */
  #define REG_AES_GHASHR                   (0xF002C078U) /**< \brief (AES) GCM Intermediate Hash Word Register */
  #define REG_AES_TAGR                     (0xF002C088U) /**< \brief (AES) GCM Authentication Tag Word Register */
  #define REG_AES_CTRR                     (0xF002C098U) /**< \brief (AES) GCM Encryption Counter Value Register */
  #define REG_AES_GCMHR                    (0xF002C09CU) /**< \brief (AES) GCM H Word Register */
  #define REG_AES_EMR                      (0xF002C0B0U) /**< \brief (AES) Extended Mode Register */
  #define REG_AES_BCNT                     (0xF002C0B4U) /**< \brief (AES) Byte Counter Register */
  #define REG_AES_VERSION                  (0xF002C0FCU) /**< \brief (AES) Version Register */
#else
  #define REG_AES_CR      (*(__O  uint32_t*)0xF002C000U) /**< \brief (AES) Control Register */
  #define REG_AES_MR      (*(__IO uint32_t*)0xF002C004U) /**< \brief (AES) Mode Register */
  #define REG_AES_IER     (*(__O  uint32_t*)0xF002C010U) /**< \brief (AES) Interrupt Enable Register */
  #define REG_AES_IDR     (*(__O  uint32_t*)0xF002C014U) /**< \brief (AES) Interrupt Disable Register */
  #define REG_AES_IMR     (*(__I  uint32_t*)0xF002C018U) /**< \brief (AES) Interrupt Mask Register */
  #define REG_AES_ISR     (*(__I  uint32_t*)0xF002C01CU) /**< \brief (AES) Interrupt Status Register */
  #define REG_AES_KEYWR   (*(__O  uint32_t*)0xF002C020U) /**< \brief (AES) Key Word Register */
  #define REG_AES_IDATAR  (*(__O  uint32_t*)0xF002C040U) /**< \brief (AES) Input Data Register */
  #define REG_AES_ODATAR  (*(__I  uint32_t*)0xF002C050U) /**< \brief (AES) Output Data Register */
  #define REG_AES_IVR     (*(__O  uint32_t*)0xF002C060U) /**< \brief (AES) Initialization Vector Register */
  #define REG_AES_AADLENR (*(__IO uint32_t*)0xF002C070U) /**< \brief (AES) Additional Authenticated Data Length Register */
  #define REG_AES_CLENR   (*(__IO uint32_t*)0xF002C074U) /**< \brief (AES) Plaintext/Ciphertext Length Register */
  #define REG_AES_GHASHR  (*(__IO uint32_t*)0xF002C078U) /**< \brief (AES) GCM Intermediate Hash Word Register */
  #define REG_AES_TAGR    (*(__I  uint32_t*)0xF002C088U) /**< \brief (AES) GCM Authentication Tag Word Register */
  #define REG_AES_CTRR    (*(__I  uint32_t*)0xF002C098U) /**< \brief (AES) GCM Encryption Counter Value Register */
  #define REG_AES_GCMHR   (*(__IO uint32_t*)0xF002C09CU) /**< \brief (AES) GCM H Word Register */
  #define REG_AES_EMR     (*(__IO uint32_t*)0xF002C0B0U) /**< \brief (AES) Extended Mode Register */
  #define REG_AES_BCNT    (*(__IO uint32_t*)0xF002C0B4U) /**< \brief (AES) Byte Counter Register */
  #define REG_AES_VERSION (*(__I  uint32_t*)0xF002C0FCU) /**< \brief (AES) Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for SPI0 peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_SPI0_CR                       (0xF8000000U) /**< \brief (SPI0) Control Register */
  #define REG_SPI0_MR                       (0xF8000004U) /**< \brief (SPI0) Mode Register */
  #define REG_SPI0_RDR                      (0xF8000008U) /**< \brief (SPI0) Receive Data Register */
  #define REG_SPI0_TDR                      (0xF800000CU) /**< \brief (SPI0) Transmit Data Register */
  #define REG_SPI0_SR                       (0xF8000010U) /**< \brief (SPI0) Status Register */
  #define REG_SPI0_IER                      (0xF8000014U) /**< \brief (SPI0) Interrupt Enable Register */
  #define REG_SPI0_IDR                      (0xF8000018U) /**< \brief (SPI0) Interrupt Disable Register */
  #define REG_SPI0_IMR                      (0xF800001CU) /**< \brief (SPI0) Interrupt Mask Register */
  #define REG_SPI0_CSR                      (0xF8000030U) /**< \brief (SPI0) Chip Select Register */
  #define REG_SPI0_CMPR                     (0xF8000048U) /**< \brief (SPI0) SPI Comparison Register */
  #define REG_SPI0_WPMR                     (0xF80000E4U) /**< \brief (SPI0) Write Protection Mode Register */
  #define REG_SPI0_WPSR                     (0xF80000E8U) /**< \brief (SPI0) Write Protection Status Register */
  #define REG_SPI0_VERSION                  (0xF80000FCU) /**< \brief (SPI0) Version Register */
#else
  #define REG_SPI0_CR      (*(__O  uint32_t*)0xF8000000U) /**< \brief (SPI0) Control Register */
  #define REG_SPI0_MR      (*(__IO uint32_t*)0xF8000004U) /**< \brief (SPI0) Mode Register */
  #define REG_SPI0_RDR     (*(__I  uint32_t*)0xF8000008U) /**< \brief (SPI0) Receive Data Register */
  #define REG_SPI0_TDR     (*(__O  uint32_t*)0xF800000CU) /**< \brief (SPI0) Transmit Data Register */
  #define REG_SPI0_SR      (*(__I  uint32_t*)0xF8000010U) /**< \brief (SPI0) Status Register */
  #define REG_SPI0_IER     (*(__O  uint32_t*)0xF8000014U) /**< \brief (SPI0) Interrupt Enable Register */
  #define REG_SPI0_IDR     (*(__O  uint32_t*)0xF8000018U) /**< \brief (SPI0) Interrupt Disable Register */
  #define REG_SPI0_IMR     (*(__I  uint32_t*)0xF800001CU) /**< \brief (SPI0) Interrupt Mask Register */
  #define REG_SPI0_CSR     (*(__IO uint32_t*)0xF8000030U) /**< \brief (SPI0) Chip Select Register */
  #define REG_SPI0_CMPR    (*(__IO uint32_t*)0xF8000048U) /**< \brief (SPI0) SPI Comparison Register */
  #define REG_SPI0_WPMR    (*(__IO uint32_t*)0xF80000E4U) /**< \brief (SPI0) Write Protection Mode Register */
  #define REG_SPI0_WPSR    (*(__I  uint32_t*)0xF80000E8U) /**< \brief (SPI0) Write Protection Status Register */
  #define REG_SPI0_VERSION (*(__I  uint32_t*)0xF80000FCU) /**< \brief (SPI0) Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for SSC0 peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_SSC0_CR                       (0xF8004000U) /**< \brief (SSC0) Control Register */
  #define REG_SSC0_CMR                      (0xF8004004U) /**< \brief (SSC0) Clock Mode Register */
  #define REG_SSC0_RCMR                     (0xF8004010U) /**< \brief (SSC0) Receive Clock Mode Register */
  #define REG_SSC0_RFMR                     (0xF8004014U) /**< \brief (SSC0) Receive Frame Mode Register */
  #define REG_SSC0_TCMR                     (0xF8004018U) /**< \brief (SSC0) Transmit Clock Mode Register */
  #define REG_SSC0_TFMR                     (0xF800401CU) /**< \brief (SSC0) Transmit Frame Mode Register */
  #define REG_SSC0_RHR                      (0xF8004020U) /**< \brief (SSC0) Receive Holding Register */
  #define REG_SSC0_THR                      (0xF8004024U) /**< \brief (SSC0) Transmit Holding Register */
  #define REG_SSC0_RSHR                     (0xF8004030U) /**< \brief (SSC0) Receive Sync. Holding Register */
  #define REG_SSC0_TSHR                     (0xF8004034U) /**< \brief (SSC0) Transmit Sync. Holding Register */
  #define REG_SSC0_RC0R                     (0xF8004038U) /**< \brief (SSC0) Receive Compare 0 Register */
  #define REG_SSC0_RC1R                     (0xF800403CU) /**< \brief (SSC0) Receive Compare 1 Register */
  #define REG_SSC0_SR                       (0xF8004040U) /**< \brief (SSC0) Status Register */
  #define REG_SSC0_IER                      (0xF8004044U) /**< \brief (SSC0) Interrupt Enable Register */
  #define REG_SSC0_IDR                      (0xF8004048U) /**< \brief (SSC0) Interrupt Disable Register */
  #define REG_SSC0_IMR                      (0xF800404CU) /**< \brief (SSC0) Interrupt Mask Register */
  #define REG_SSC0_WPMR                     (0xF80040E4U) /**< \brief (SSC0) Write Protection Mode Register */
  #define REG_SSC0_WPSR                     (0xF80040E8U) /**< \brief (SSC0) Write Protection Status Register */
  #define REG_SSC0_VERSION                  (0xF80040FCU) /**< \brief (SSC0) Version Register */
#else
  #define REG_SSC0_CR      (*(__O  uint32_t*)0xF8004000U) /**< \brief (SSC0) Control Register */
  #define REG_SSC0_CMR     (*(__IO uint32_t*)0xF8004004U) /**< \brief (SSC0) Clock Mode Register */
  #define REG_SSC0_RCMR    (*(__IO uint32_t*)0xF8004010U) /**< \brief (SSC0) Receive Clock Mode Register */
  #define REG_SSC0_RFMR    (*(__IO uint32_t*)0xF8004014U) /**< \brief (SSC0) Receive Frame Mode Register */
  #define REG_SSC0_TCMR    (*(__IO uint32_t*)0xF8004018U) /**< \brief (SSC0) Transmit Clock Mode Register */
  #define REG_SSC0_TFMR    (*(__IO uint32_t*)0xF800401CU) /**< \brief (SSC0) Transmit Frame Mode Register */
  #define REG_SSC0_RHR     (*(__I  uint32_t*)0xF8004020U) /**< \brief (SSC0) Receive Holding Register */
  #define REG_SSC0_THR     (*(__O  uint32_t*)0xF8004024U) /**< \brief (SSC0) Transmit Holding Register */
  #define REG_SSC0_RSHR    (*(__I  uint32_t*)0xF8004030U) /**< \brief (SSC0) Receive Sync. Holding Register */
  #define REG_SSC0_TSHR    (*(__IO uint32_t*)0xF8004034U) /**< \brief (SSC0) Transmit Sync. Holding Register */
  #define REG_SSC0_RC0R    (*(__IO uint32_t*)0xF8004038U) /**< \brief (SSC0) Receive Compare 0 Register */
  #define REG_SSC0_RC1R    (*(__IO uint32_t*)0xF800403CU) /**< \brief (SSC0) Receive Compare 1 Register */
  #define REG_SSC0_SR      (*(__I  uint32_t*)0xF8004040U) /**< \brief (SSC0) Status Register */
  #define REG_SSC0_IER     (*(__O  uint32_t*)0xF8004044U) /**< \brief (SSC0) Interrupt Enable Register */
  #define REG_SSC0_IDR     (*(__O  uint32_t*)0xF8004048U) /**< \brief (SSC0) Interrupt Disable Register */
  #define REG_SSC0_IMR     (*(__I  uint32_t*)0xF800404CU) /**< \brief (SSC0) Interrupt Mask Register */
  #define REG_SSC0_WPMR    (*(__IO uint32_t*)0xF80040E4U) /**< \brief (SSC0) Write Protection Mode Register */
  #define REG_SSC0_WPSR    (*(__I  uint32_t*)0xF80040E8U) /**< \brief (SSC0) Write Protection Status Register */
  #define REG_SSC0_VERSION (*(__I  uint32_t*)0xF80040FCU) /**< \brief (SSC0) Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for GMAC peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_GMAC_NCR                        (0xF8008000U) /**< \brief (GMAC) Network Control Register */
  #define REG_GMAC_NCFGR                      (0xF8008004U) /**< \brief (GMAC) Network Configuration Register */
  #define REG_GMAC_NSR                        (0xF8008008U) /**< \brief (GMAC) Network Status Register */
  #define REG_GMAC_UR                         (0xF800800CU) /**< \brief (GMAC) User Register */
  #define REG_GMAC_DCFGR                      (0xF8008010U) /**< \brief (GMAC) DMA Configuration Register */
  #define REG_GMAC_TSR                        (0xF8008014U) /**< \brief (GMAC) Transmit Status Register */
  #define REG_GMAC_RBQB                       (0xF8008018U) /**< \brief (GMAC) Receive Buffer Queue Base Address */
  #define REG_GMAC_TBQB                       (0xF800801CU) /**< \brief (GMAC) Transmit Buffer Queue Base Address */
  #define REG_GMAC_RSR                        (0xF8008020U) /**< \brief (GMAC) Receive Status Register */
  #define REG_GMAC_ISR                        (0xF8008024U) /**< \brief (GMAC) Interrupt Status Register */
  #define REG_GMAC_IER                        (0xF8008028U) /**< \brief (GMAC) Interrupt Enable Register */
  #define REG_GMAC_IDR                        (0xF800802CU) /**< \brief (GMAC) Interrupt Disable Register */
  #define REG_GMAC_IMR                        (0xF8008030U) /**< \brief (GMAC) Interrupt Mask Register */
  #define REG_GMAC_MAN                        (0xF8008034U) /**< \brief (GMAC) PHY Maintenance Register */
  #define REG_GMAC_RPQ                        (0xF8008038U) /**< \brief (GMAC) Received Pause Quantum Register */
  #define REG_GMAC_TPQ                        (0xF800803CU) /**< \brief (GMAC) Transmit Pause Quantum Register */
  #define REG_GMAC_TPSF                       (0xF8008040U) /**< \brief (GMAC) TX Partial Store and Forward Register */
  #define REG_GMAC_RPSF                       (0xF8008044U) /**< \brief (GMAC) RX Partial Store and Forward Register */
  #define REG_GMAC_HRB                        (0xF8008080U) /**< \brief (GMAC) Hash Register Bottom [31:0] */
  #define REG_GMAC_HRT                        (0xF8008084U) /**< \brief (GMAC) Hash Register Top [63:32] */
  #define REG_GMAC_SAB1                       (0xF8008088U) /**< \brief (GMAC) Specific Address 1 Bottom [31:0] Register */
  #define REG_GMAC_SAT1                       (0xF800808CU) /**< \brief (GMAC) Specific Address 1 Top [47:32] Register */
  #define REG_GMAC_SAB2                       (0xF8008090U) /**< \brief (GMAC) Specific Address 2 Bottom [31:0] Register */
  #define REG_GMAC_SAT2                       (0xF8008094U) /**< \brief (GMAC) Specific Address 2 Top [47:32] Register */
  #define REG_GMAC_SAB3                       (0xF8008098U) /**< \brief (GMAC) Specific Address 3 Bottom [31:0] Register */
  #define REG_GMAC_SAT3                       (0xF800809CU) /**< \brief (GMAC) Specific Address 3 Top [47:32] Register */
  #define REG_GMAC_SAB4                       (0xF80080A0U) /**< \brief (GMAC) Specific Address 4 Bottom [31:0] Register */
  #define REG_GMAC_SAT4                       (0xF80080A4U) /**< \brief (GMAC) Specific Address 4 Top [47:32] Register */
  #define REG_GMAC_TIDM                       (0xF80080A8U) /**< \brief (GMAC) Type ID Match 1 Register */
  #define REG_GMAC_WOL                        (0xF80080B8U) /**< \brief (GMAC) Wake on LAN Register */
  #define REG_GMAC_IPGS                       (0xF80080BCU) /**< \brief (GMAC) IPG Stretch Register */
  #define REG_GMAC_SVLAN                      (0xF80080C0U) /**< \brief (GMAC) Stacked VLAN Register */
  #define REG_GMAC_TPFCP                      (0xF80080C4U) /**< \brief (GMAC) Transmit PFC Pause Register */
  #define REG_GMAC_SAMB1                      (0xF80080C8U) /**< \brief (GMAC) Specific Address 1 Mask Bottom [31:0] Register */
  #define REG_GMAC_SAMT1                      (0xF80080CCU) /**< \brief (GMAC) Specific Address 1 Mask Top [47:32] Register */
  #define REG_GMAC_NSC                        (0xF80080DCU) /**< \brief (GMAC) 1588 Timer Nanosecond Comparison Register */
  #define REG_GMAC_SCL                        (0xF80080E0U) /**< \brief (GMAC) 1588 Timer Second Comparison [31:0] Register */
  #define REG_GMAC_SCH                        (0xF80080E4U) /**< \brief (GMAC) 1588 Timer Second Comparison [47:32] Register */
  #define REG_GMAC_MID                        (0xF80080FCU) /**< \brief (GMAC) Module ID Register */
  #define REG_GMAC_OTLO                       (0xF8008100U) /**< \brief (GMAC) Octets Transmitted [31:0] Register */
  #define REG_GMAC_OTHI                       (0xF8008104U) /**< \brief (GMAC) Octets Transmitted [47:32] Register */
  #define REG_GMAC_FT                         (0xF8008108U) /**< \brief (GMAC) Frames Transmitted Register */
  #define REG_GMAC_BCFT                       (0xF800810CU) /**< \brief (GMAC) Broadcast Frames Transmitted Register */
  #define REG_GMAC_MFT                        (0xF8008110U) /**< \brief (GMAC) Multicast Frames Transmitted Register */
  #define REG_GMAC_PFT                        (0xF8008114U) /**< \brief (GMAC) Pause Frames Transmitted Register */
  #define REG_GMAC_BFT64                      (0xF8008118U) /**< \brief (GMAC) 64 Byte Frames Transmitted Register */
  #define REG_GMAC_TBFT127                    (0xF800811CU) /**< \brief (GMAC) 65 to 127 Byte Frames Transmitted Register */
  #define REG_GMAC_TBFT255                    (0xF8008120U) /**< \brief (GMAC) 128 to 255 Byte Frames Transmitted Register */
  #define REG_GMAC_TBFT511                    (0xF8008124U) /**< \brief (GMAC) 256 to 511 Byte Frames Transmitted Register */
  #define REG_GMAC_TBFT1023                   (0xF8008128U) /**< \brief (GMAC) 512 to 1023 Byte Frames Transmitted Register */
  #define REG_GMAC_TBFT1518                   (0xF800812CU) /**< \brief (GMAC) 1024 to 1518 Byte Frames Transmitted Register */
  #define REG_GMAC_GTBFT1518                  (0xF8008130U) /**< \brief (GMAC) Greater Than 1518 Byte Frames Transmitted Register */
  #define REG_GMAC_TUR                        (0xF8008134U) /**< \brief (GMAC) Transmit Underruns Register */
  #define REG_GMAC_SCF                        (0xF8008138U) /**< \brief (GMAC) Single Collision Frames Register */
  #define REG_GMAC_MCF                        (0xF800813CU) /**< \brief (GMAC) Multiple Collision Frames Register */
  #define REG_GMAC_EC                         (0xF8008140U) /**< \brief (GMAC) Excessive Collisions Register */
  #define REG_GMAC_LC                         (0xF8008144U) /**< \brief (GMAC) Late Collisions Register */
  #define REG_GMAC_DTF                        (0xF8008148U) /**< \brief (GMAC) Deferred Transmission Frames Register */
  #define REG_GMAC_CSE                        (0xF800814CU) /**< \brief (GMAC) Carrier Sense Errors Register */
  #define REG_GMAC_ORLO                       (0xF8008150U) /**< \brief (GMAC) Octets Received [31:0] Received */
  #define REG_GMAC_ORHI                       (0xF8008154U) /**< \brief (GMAC) Octets Received [47:32] Received */
  #define REG_GMAC_FR                         (0xF8008158U) /**< \brief (GMAC) Frames Received Register */
  #define REG_GMAC_BCFR                       (0xF800815CU) /**< \brief (GMAC) Broadcast Frames Received Register */
  #define REG_GMAC_MFR                        (0xF8008160U) /**< \brief (GMAC) Multicast Frames Received Register */
  #define REG_GMAC_PFR                        (0xF8008164U) /**< \brief (GMAC) Pause Frames Received Register */
  #define REG_GMAC_BFR64                      (0xF8008168U) /**< \brief (GMAC) 64 Byte Frames Received Register */
  #define REG_GMAC_TBFR127                    (0xF800816CU) /**< \brief (GMAC) 65 to 127 Byte Frames Received Register */
  #define REG_GMAC_TBFR255                    (0xF8008170U) /**< \brief (GMAC) 128 to 255 Byte Frames Received Register */
  #define REG_GMAC_TBFR511                    (0xF8008174U) /**< \brief (GMAC) 256 to 511Byte Frames Received Register */
  #define REG_GMAC_TBFR1023                   (0xF8008178U) /**< \brief (GMAC) 512 to 1023 Byte Frames Received Register */
  #define REG_GMAC_TBFR1518                   (0xF800817CU) /**< \brief (GMAC) 1024 to 1518 Byte Frames Received Register */
  #define REG_GMAC_TMXBFR                     (0xF8008180U) /**< \brief (GMAC) 1519 to Maximum Byte Frames Received Register */
  #define REG_GMAC_UFR                        (0xF8008184U) /**< \brief (GMAC) Undersize Frames Received Register */
  #define REG_GMAC_OFR                        (0xF8008188U) /**< \brief (GMAC) Oversize Frames Received Register */
  #define REG_GMAC_JR                         (0xF800818CU) /**< \brief (GMAC) Jabbers Received Register */
  #define REG_GMAC_FCSE                       (0xF8008190U) /**< \brief (GMAC) Frame Check Sequence Errors Register */
  #define REG_GMAC_LFFE                       (0xF8008194U) /**< \brief (GMAC) Length Field Frame Errors Register */
  #define REG_GMAC_RSE                        (0xF8008198U) /**< \brief (GMAC) Receive Symbol Errors Register */
  #define REG_GMAC_AE                         (0xF800819CU) /**< \brief (GMAC) Alignment Errors Register */
  #define REG_GMAC_RRE                        (0xF80081A0U) /**< \brief (GMAC) Receive Resource Errors Register */
  #define REG_GMAC_ROE                        (0xF80081A4U) /**< \brief (GMAC) Receive Overrun Register */
  #define REG_GMAC_IHCE                       (0xF80081A8U) /**< \brief (GMAC) IP Header Checksum Errors Register */
  #define REG_GMAC_TCE                        (0xF80081ACU) /**< \brief (GMAC) TCP Checksum Errors Register */
  #define REG_GMAC_UCE                        (0xF80081B0U) /**< \brief (GMAC) UDP Checksum Errors Register */
  #define REG_GMAC_TISUBN                     (0xF80081BCU) /**< \brief (GMAC) 1588 Timer Increment Sub-nanoseconds Register */
  #define REG_GMAC_TSH                        (0xF80081C0U) /**< \brief (GMAC) 1588 Timer Seconds [47:32] Register */
  #define REG_GMAC_TSSSH                      (0xF80081C4U) /**< \brief (GMAC) 1588 Timer Sync Strobe Seconds [47:32] Register */
  #define REG_GMAC_TSSSL                      (0xF80081C8U) /**< \brief (GMAC) 1588 Timer Sync Strobe Seconds [31:0] Register */
  #define REG_GMAC_TSSN                       (0xF80081CCU) /**< \brief (GMAC) 1588 Timer Sync Strobe Nanoseconds Register */
  #define REG_GMAC_TSL                        (0xF80081D0U) /**< \brief (GMAC) 1588 Timer Seconds [31:0] Register */
  #define REG_GMAC_TN                         (0xF80081D4U) /**< \brief (GMAC) 1588 Timer Nanoseconds Register */
  #define REG_GMAC_TA                         (0xF80081D8U) /**< \brief (GMAC) 1588 Timer Adjust Register */
  #define REG_GMAC_TI                         (0xF80081DCU) /**< \brief (GMAC) 1588 Timer Increment Register */
  #define REG_GMAC_EFTS                       (0xF80081E0U) /**< \brief (GMAC) PTP Event Frame Transmitted Seconds */
  #define REG_GMAC_EFTN                       (0xF80081E4U) /**< \brief (GMAC) PTP Event Frame Transmitted Nanoseconds */
  #define REG_GMAC_EFRS                       (0xF80081E8U) /**< \brief (GMAC) PTP Event Frame Received Seconds */
  #define REG_GMAC_EFRN                       (0xF80081ECU) /**< \brief (GMAC) PTP Event Frame Received Nanoseconds */
  #define REG_GMAC_PEFTS                      (0xF80081F0U) /**< \brief (GMAC) PTP Peer Event Frame Transmitted Seconds */
  #define REG_GMAC_PEFTN                      (0xF80081F4U) /**< \brief (GMAC) PTP Peer Event Frame Transmitted Nanoseconds */
  #define REG_GMAC_PEFRS                      (0xF80081F8U) /**< \brief (GMAC) PTP Peer Event Frame Received Seconds */
  #define REG_GMAC_PEFRN                      (0xF80081FCU) /**< \brief (GMAC) PTP Peer Event Frame Received Nanoseconds */
  #define REG_GMAC_ISRPQ                      (0xF8008400U) /**< \brief (GMAC) Interrupt Status Register Priority Queue */
  #define REG_GMAC_TBQBAPQ                    (0xF8008440U) /**< \brief (GMAC) Transmit Buffer Queue Base Address Priority Queue */
  #define REG_GMAC_RBQBAPQ                    (0xF8008480U) /**< \brief (GMAC) Receive Buffer Queue Base Address Priority Queue */
  #define REG_GMAC_RBSRPQ                     (0xF80084A0U) /**< \brief (GMAC) Receive Buffer Size Register Priority Queue */
  #define REG_GMAC_ST1RPQ                     (0xF8008500U) /**< \brief (GMAC) Screening Type 1 Register Priority Queue */
  #define REG_GMAC_ST2RPQ                     (0xF8008540U) /**< \brief (GMAC) Screening Type 2 Register Priority Queue */
  #define REG_GMAC_IERPQ                      (0xF8008600U) /**< \brief (GMAC) Interrupt Enable Register Priority Queue */
  #define REG_GMAC_IDRPQ                      (0xF8008620U) /**< \brief (GMAC) Interrupt Disable Register Priority Queue */
  #define REG_GMAC_IMRPQ                      (0xF8008640U) /**< \brief (GMAC) Interrupt Mask Register Priority Queue */
  #define REG_GMAC_ST2ETHR                    (0xF80086E0U) /**< \brief (GMAC) Screener Type 2 - Ethertype Registers */
  #define REG_GMAC_ST2CMPR                    (0xF8008700U) /**< \brief (GMAC) Screener Type 2 - Compare Registers */
#else
  #define REG_GMAC_NCR       (*(__IO uint32_t*)0xF8008000U) /**< \brief (GMAC) Network Control Register */
  #define REG_GMAC_NCFGR     (*(__IO uint32_t*)0xF8008004U) /**< \brief (GMAC) Network Configuration Register */
  #define REG_GMAC_NSR       (*(__I  uint32_t*)0xF8008008U) /**< \brief (GMAC) Network Status Register */
  #define REG_GMAC_UR        (*(__IO uint32_t*)0xF800800CU) /**< \brief (GMAC) User Register */
  #define REG_GMAC_DCFGR     (*(__IO uint32_t*)0xF8008010U) /**< \brief (GMAC) DMA Configuration Register */
  #define REG_GMAC_TSR       (*(__IO uint32_t*)0xF8008014U) /**< \brief (GMAC) Transmit Status Register */
  #define REG_GMAC_RBQB      (*(__IO uint32_t*)0xF8008018U) /**< \brief (GMAC) Receive Buffer Queue Base Address */
  #define REG_GMAC_TBQB      (*(__IO uint32_t*)0xF800801CU) /**< \brief (GMAC) Transmit Buffer Queue Base Address */
  #define REG_GMAC_RSR       (*(__IO uint32_t*)0xF8008020U) /**< \brief (GMAC) Receive Status Register */
  #define REG_GMAC_ISR       (*(__I  uint32_t*)0xF8008024U) /**< \brief (GMAC) Interrupt Status Register */
  #define REG_GMAC_IER       (*(__O  uint32_t*)0xF8008028U) /**< \brief (GMAC) Interrupt Enable Register */
  #define REG_GMAC_IDR       (*(__O  uint32_t*)0xF800802CU) /**< \brief (GMAC) Interrupt Disable Register */
  #define REG_GMAC_IMR       (*(__I  uint32_t*)0xF8008030U) /**< \brief (GMAC) Interrupt Mask Register */
  #define REG_GMAC_MAN       (*(__IO uint32_t*)0xF8008034U) /**< \brief (GMAC) PHY Maintenance Register */
  #define REG_GMAC_RPQ       (*(__I  uint32_t*)0xF8008038U) /**< \brief (GMAC) Received Pause Quantum Register */
  #define REG_GMAC_TPQ       (*(__IO uint32_t*)0xF800803CU) /**< \brief (GMAC) Transmit Pause Quantum Register */
  #define REG_GMAC_TPSF      (*(__IO uint32_t*)0xF8008040U) /**< \brief (GMAC) TX Partial Store and Forward Register */
  #define REG_GMAC_RPSF      (*(__IO uint32_t*)0xF8008044U) /**< \brief (GMAC) RX Partial Store and Forward Register */
  #define REG_GMAC_HRB       (*(__IO uint32_t*)0xF8008080U) /**< \brief (GMAC) Hash Register Bottom [31:0] */
  #define REG_GMAC_HRT       (*(__IO uint32_t*)0xF8008084U) /**< \brief (GMAC) Hash Register Top [63:32] */
  #define REG_GMAC_SAB1      (*(__IO uint32_t*)0xF8008088U) /**< \brief (GMAC) Specific Address 1 Bottom [31:0] Register */
  #define REG_GMAC_SAT1      (*(__IO uint32_t*)0xF800808CU) /**< \brief (GMAC) Specific Address 1 Top [47:32] Register */
  #define REG_GMAC_SAB2      (*(__IO uint32_t*)0xF8008090U) /**< \brief (GMAC) Specific Address 2 Bottom [31:0] Register */
  #define REG_GMAC_SAT2      (*(__IO uint32_t*)0xF8008094U) /**< \brief (GMAC) Specific Address 2 Top [47:32] Register */
  #define REG_GMAC_SAB3      (*(__IO uint32_t*)0xF8008098U) /**< \brief (GMAC) Specific Address 3 Bottom [31:0] Register */
  #define REG_GMAC_SAT3      (*(__IO uint32_t*)0xF800809CU) /**< \brief (GMAC) Specific Address 3 Top [47:32] Register */
  #define REG_GMAC_SAB4      (*(__IO uint32_t*)0xF80080A0U) /**< \brief (GMAC) Specific Address 4 Bottom [31:0] Register */
  #define REG_GMAC_SAT4      (*(__IO uint32_t*)0xF80080A4U) /**< \brief (GMAC) Specific Address 4 Top [47:32] Register */
  #define REG_GMAC_TIDM      (*(__IO uint32_t*)0xF80080A8U) /**< \brief (GMAC) Type ID Match 1 Register */
  #define REG_GMAC_WOL       (*(__IO uint32_t*)0xF80080B8U) /**< \brief (GMAC) Wake on LAN Register */
  #define REG_GMAC_IPGS      (*(__IO uint32_t*)0xF80080BCU) /**< \brief (GMAC) IPG Stretch Register */
  #define REG_GMAC_SVLAN     (*(__IO uint32_t*)0xF80080C0U) /**< \brief (GMAC) Stacked VLAN Register */
  #define REG_GMAC_TPFCP     (*(__IO uint32_t*)0xF80080C4U) /**< \brief (GMAC) Transmit PFC Pause Register */
  #define REG_GMAC_SAMB1     (*(__IO uint32_t*)0xF80080C8U) /**< \brief (GMAC) Specific Address 1 Mask Bottom [31:0] Register */
  #define REG_GMAC_SAMT1     (*(__IO uint32_t*)0xF80080CCU) /**< \brief (GMAC) Specific Address 1 Mask Top [47:32] Register */
  #define REG_GMAC_NSC       (*(__IO uint32_t*)0xF80080DCU) /**< \brief (GMAC) 1588 Timer Nanosecond Comparison Register */
  #define REG_GMAC_SCL       (*(__IO uint32_t*)0xF80080E0U) /**< \brief (GMAC) 1588 Timer Second Comparison [31:0] Register */
  #define REG_GMAC_SCH       (*(__IO uint32_t*)0xF80080E4U) /**< \brief (GMAC) 1588 Timer Second Comparison [47:32] Register */
  #define REG_GMAC_MID       (*(__I  uint32_t*)0xF80080FCU) /**< \brief (GMAC) Module ID Register */
  #define REG_GMAC_OTLO      (*(__I  uint32_t*)0xF8008100U) /**< \brief (GMAC) Octets Transmitted [31:0] Register */
  #define REG_GMAC_OTHI      (*(__I  uint32_t*)0xF8008104U) /**< \brief (GMAC) Octets Transmitted [47:32] Register */
  #define REG_GMAC_FT        (*(__I  uint32_t*)0xF8008108U) /**< \brief (GMAC) Frames Transmitted Register */
  #define REG_GMAC_BCFT      (*(__I  uint32_t*)0xF800810CU) /**< \brief (GMAC) Broadcast Frames Transmitted Register */
  #define REG_GMAC_MFT       (*(__I  uint32_t*)0xF8008110U) /**< \brief (GMAC) Multicast Frames Transmitted Register */
  #define REG_GMAC_PFT       (*(__I  uint32_t*)0xF8008114U) /**< \brief (GMAC) Pause Frames Transmitted Register */
  #define REG_GMAC_BFT64     (*(__I  uint32_t*)0xF8008118U) /**< \brief (GMAC) 64 Byte Frames Transmitted Register */
  #define REG_GMAC_TBFT127   (*(__I  uint32_t*)0xF800811CU) /**< \brief (GMAC) 65 to 127 Byte Frames Transmitted Register */
  #define REG_GMAC_TBFT255   (*(__I  uint32_t*)0xF8008120U) /**< \brief (GMAC) 128 to 255 Byte Frames Transmitted Register */
  #define REG_GMAC_TBFT511   (*(__I  uint32_t*)0xF8008124U) /**< \brief (GMAC) 256 to 511 Byte Frames Transmitted Register */
  #define REG_GMAC_TBFT1023  (*(__I  uint32_t*)0xF8008128U) /**< \brief (GMAC) 512 to 1023 Byte Frames Transmitted Register */
  #define REG_GMAC_TBFT1518  (*(__I  uint32_t*)0xF800812CU) /**< \brief (GMAC) 1024 to 1518 Byte Frames Transmitted Register */
  #define REG_GMAC_GTBFT1518 (*(__I  uint32_t*)0xF8008130U) /**< \brief (GMAC) Greater Than 1518 Byte Frames Transmitted Register */
  #define REG_GMAC_TUR       (*(__I  uint32_t*)0xF8008134U) /**< \brief (GMAC) Transmit Underruns Register */
  #define REG_GMAC_SCF       (*(__I  uint32_t*)0xF8008138U) /**< \brief (GMAC) Single Collision Frames Register */
  #define REG_GMAC_MCF       (*(__I  uint32_t*)0xF800813CU) /**< \brief (GMAC) Multiple Collision Frames Register */
  #define REG_GMAC_EC        (*(__I  uint32_t*)0xF8008140U) /**< \brief (GMAC) Excessive Collisions Register */
  #define REG_GMAC_LC        (*(__I  uint32_t*)0xF8008144U) /**< \brief (GMAC) Late Collisions Register */
  #define REG_GMAC_DTF       (*(__I  uint32_t*)0xF8008148U) /**< \brief (GMAC) Deferred Transmission Frames Register */
  #define REG_GMAC_CSE       (*(__I  uint32_t*)0xF800814CU) /**< \brief (GMAC) Carrier Sense Errors Register */
  #define REG_GMAC_ORLO      (*(__I  uint32_t*)0xF8008150U) /**< \brief (GMAC) Octets Received [31:0] Received */
  #define REG_GMAC_ORHI      (*(__I  uint32_t*)0xF8008154U) /**< \brief (GMAC) Octets Received [47:32] Received */
  #define REG_GMAC_FR        (*(__I  uint32_t*)0xF8008158U) /**< \brief (GMAC) Frames Received Register */
  #define REG_GMAC_BCFR      (*(__I  uint32_t*)0xF800815CU) /**< \brief (GMAC) Broadcast Frames Received Register */
  #define REG_GMAC_MFR       (*(__I  uint32_t*)0xF8008160U) /**< \brief (GMAC) Multicast Frames Received Register */
  #define REG_GMAC_PFR       (*(__I  uint32_t*)0xF8008164U) /**< \brief (GMAC) Pause Frames Received Register */
  #define REG_GMAC_BFR64     (*(__I  uint32_t*)0xF8008168U) /**< \brief (GMAC) 64 Byte Frames Received Register */
  #define REG_GMAC_TBFR127   (*(__I  uint32_t*)0xF800816CU) /**< \brief (GMAC) 65 to 127 Byte Frames Received Register */
  #define REG_GMAC_TBFR255   (*(__I  uint32_t*)0xF8008170U) /**< \brief (GMAC) 128 to 255 Byte Frames Received Register */
  #define REG_GMAC_TBFR511   (*(__I  uint32_t*)0xF8008174U) /**< \brief (GMAC) 256 to 511Byte Frames Received Register */
  #define REG_GMAC_TBFR1023  (*(__I  uint32_t*)0xF8008178U) /**< \brief (GMAC) 512 to 1023 Byte Frames Received Register */
  #define REG_GMAC_TBFR1518  (*(__I  uint32_t*)0xF800817CU) /**< \brief (GMAC) 1024 to 1518 Byte Frames Received Register */
  #define REG_GMAC_TMXBFR    (*(__I  uint32_t*)0xF8008180U) /**< \brief (GMAC) 1519 to Maximum Byte Frames Received Register */
  #define REG_GMAC_UFR       (*(__I  uint32_t*)0xF8008184U) /**< \brief (GMAC) Undersize Frames Received Register */
  #define REG_GMAC_OFR       (*(__I  uint32_t*)0xF8008188U) /**< \brief (GMAC) Oversize Frames Received Register */
  #define REG_GMAC_JR        (*(__I  uint32_t*)0xF800818CU) /**< \brief (GMAC) Jabbers Received Register */
  #define REG_GMAC_FCSE      (*(__I  uint32_t*)0xF8008190U) /**< \brief (GMAC) Frame Check Sequence Errors Register */
  #define REG_GMAC_LFFE      (*(__I  uint32_t*)0xF8008194U) /**< \brief (GMAC) Length Field Frame Errors Register */
  #define REG_GMAC_RSE       (*(__I  uint32_t*)0xF8008198U) /**< \brief (GMAC) Receive Symbol Errors Register */
  #define REG_GMAC_AE        (*(__I  uint32_t*)0xF800819CU) /**< \brief (GMAC) Alignment Errors Register */
  #define REG_GMAC_RRE       (*(__I  uint32_t*)0xF80081A0U) /**< \brief (GMAC) Receive Resource Errors Register */
  #define REG_GMAC_ROE       (*(__I  uint32_t*)0xF80081A4U) /**< \brief (GMAC) Receive Overrun Register */
  #define REG_GMAC_IHCE      (*(__I  uint32_t*)0xF80081A8U) /**< \brief (GMAC) IP Header Checksum Errors Register */
  #define REG_GMAC_TCE       (*(__I  uint32_t*)0xF80081ACU) /**< \brief (GMAC) TCP Checksum Errors Register */
  #define REG_GMAC_UCE       (*(__I  uint32_t*)0xF80081B0U) /**< \brief (GMAC) UDP Checksum Errors Register */
  #define REG_GMAC_TISUBN    (*(__IO uint32_t*)0xF80081BCU) /**< \brief (GMAC) 1588 Timer Increment Sub-nanoseconds Register */
  #define REG_GMAC_TSH       (*(__IO uint32_t*)0xF80081C0U) /**< \brief (GMAC) 1588 Timer Seconds [47:32] Register */
  #define REG_GMAC_TSSSH     (*(__IO uint32_t*)0xF80081C4U) /**< \brief (GMAC) 1588 Timer Sync Strobe Seconds [47:32] Register */
  #define REG_GMAC_TSSSL     (*(__IO uint32_t*)0xF80081C8U) /**< \brief (GMAC) 1588 Timer Sync Strobe Seconds [31:0] Register */
  #define REG_GMAC_TSSN      (*(__IO uint32_t*)0xF80081CCU) /**< \brief (GMAC) 1588 Timer Sync Strobe Nanoseconds Register */
  #define REG_GMAC_TSL       (*(__IO uint32_t*)0xF80081D0U) /**< \brief (GMAC) 1588 Timer Seconds [31:0] Register */
  #define REG_GMAC_TN        (*(__IO uint32_t*)0xF80081D4U) /**< \brief (GMAC) 1588 Timer Nanoseconds Register */
  #define REG_GMAC_TA        (*(__O  uint32_t*)0xF80081D8U) /**< \brief (GMAC) 1588 Timer Adjust Register */
  #define REG_GMAC_TI        (*(__IO uint32_t*)0xF80081DCU) /**< \brief (GMAC) 1588 Timer Increment Register */
  #define REG_GMAC_EFTS      (*(__I  uint32_t*)0xF80081E0U) /**< \brief (GMAC) PTP Event Frame Transmitted Seconds */
  #define REG_GMAC_EFTN      (*(__I  uint32_t*)0xF80081E4U) /**< \brief (GMAC) PTP Event Frame Transmitted Nanoseconds */
  #define REG_GMAC_EFRS      (*(__I  uint32_t*)0xF80081E8U) /**< \brief (GMAC) PTP Event Frame Received Seconds */
  #define REG_GMAC_EFRN      (*(__I  uint32_t*)0xF80081ECU) /**< \brief (GMAC) PTP Event Frame Received Nanoseconds */
  #define REG_GMAC_PEFTS     (*(__I  uint32_t*)0xF80081F0U) /**< \brief (GMAC) PTP Peer Event Frame Transmitted Seconds */
  #define REG_GMAC_PEFTN     (*(__I  uint32_t*)0xF80081F4U) /**< \brief (GMAC) PTP Peer Event Frame Transmitted Nanoseconds */
  #define REG_GMAC_PEFRS     (*(__I  uint32_t*)0xF80081F8U) /**< \brief (GMAC) PTP Peer Event Frame Received Seconds */
  #define REG_GMAC_PEFRN     (*(__I  uint32_t*)0xF80081FCU) /**< \brief (GMAC) PTP Peer Event Frame Received Nanoseconds */
  #define REG_GMAC_ISRPQ     (*(__I  uint32_t*)0xF8008400U) /**< \brief (GMAC) Interrupt Status Register Priority Queue */
  #define REG_GMAC_TBQBAPQ   (*(__IO uint32_t*)0xF8008440U) /**< \brief (GMAC) Transmit Buffer Queue Base Address Priority Queue */
  #define REG_GMAC_RBQBAPQ   (*(__IO uint32_t*)0xF8008480U) /**< \brief (GMAC) Receive Buffer Queue Base Address Priority Queue */
  #define REG_GMAC_RBSRPQ    (*(__IO uint32_t*)0xF80084A0U) /**< \brief (GMAC) Receive Buffer Size Register Priority Queue */
  #define REG_GMAC_ST1RPQ    (*(__IO uint32_t*)0xF8008500U) /**< \brief (GMAC) Screening Type 1 Register Priority Queue */
  #define REG_GMAC_ST2RPQ    (*(__IO uint32_t*)0xF8008540U) /**< \brief (GMAC) Screening Type 2 Register Priority Queue */
  #define REG_GMAC_IERPQ     (*(__O  uint32_t*)0xF8008600U) /**< \brief (GMAC) Interrupt Enable Register Priority Queue */
  #define REG_GMAC_IDRPQ     (*(__O  uint32_t*)0xF8008620U) /**< \brief (GMAC) Interrupt Disable Register Priority Queue */
  #define REG_GMAC_IMRPQ     (*(__IO uint32_t*)0xF8008640U) /**< \brief (GMAC) Interrupt Mask Register Priority Queue */
  #define REG_GMAC_ST2ETHR   (*(__IO uint32_t*)0xF80086E0U) /**< \brief (GMAC) Screener Type 2 - Ethertype Registers */
  #define REG_GMAC_ST2CMPR   (*(__IO uint32_t*)0xF8008700U) /**< \brief (GMAC) Screener Type 2 - Compare Registers */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for TC0 peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_TC0_CCR0                   (0xF800C000U) /**< \brief (TC0) Channel Control Register (channel = 0) */
  #define REG_TC0_CMR0                   (0xF800C004U) /**< \brief (TC0) Channel Mode Register (channel = 0) */
  #define REG_TC0_SMMR0                  (0xF800C008U) /**< \brief (TC0) Stepper Motor Mode Register (channel = 0) */
  #define REG_TC0_RAB0                   (0xF800C00CU) /**< \brief (TC0) Register AB (channel = 0) */
  #define REG_TC0_CV0                    (0xF800C010U) /**< \brief (TC0) Counter Value (channel = 0) */
  #define REG_TC0_RA0                    (0xF800C014U) /**< \brief (TC0) Register A (channel = 0) */
  #define REG_TC0_RB0                    (0xF800C018U) /**< \brief (TC0) Register B (channel = 0) */
  #define REG_TC0_RC0                    (0xF800C01CU) /**< \brief (TC0) Register C (channel = 0) */
  #define REG_TC0_SR0                    (0xF800C020U) /**< \brief (TC0) Status Register (channel = 0) */
  #define REG_TC0_IER0                   (0xF800C024U) /**< \brief (TC0) Interrupt Enable Register (channel = 0) */
  #define REG_TC0_IDR0                   (0xF800C028U) /**< \brief (TC0) Interrupt Disable Register (channel = 0) */
  #define REG_TC0_IMR0                   (0xF800C02CU) /**< \brief (TC0) Interrupt Mask Register (channel = 0) */
  #define REG_TC0_EMR0                   (0xF800C030U) /**< \brief (TC0) Extended Mode Register (channel = 0) */
  #define REG_TC0_CCR1                   (0xF800C040U) /**< \brief (TC0) Channel Control Register (channel = 1) */
  #define REG_TC0_CMR1                   (0xF800C044U) /**< \brief (TC0) Channel Mode Register (channel = 1) */
  #define REG_TC0_SMMR1                  (0xF800C048U) /**< \brief (TC0) Stepper Motor Mode Register (channel = 1) */
  #define REG_TC0_RAB1                   (0xF800C04CU) /**< \brief (TC0) Register AB (channel = 1) */
  #define REG_TC0_CV1                    (0xF800C050U) /**< \brief (TC0) Counter Value (channel = 1) */
  #define REG_TC0_RA1                    (0xF800C054U) /**< \brief (TC0) Register A (channel = 1) */
  #define REG_TC0_RB1                    (0xF800C058U) /**< \brief (TC0) Register B (channel = 1) */
  #define REG_TC0_RC1                    (0xF800C05CU) /**< \brief (TC0) Register C (channel = 1) */
  #define REG_TC0_SR1                    (0xF800C060U) /**< \brief (TC0) Status Register (channel = 1) */
  #define REG_TC0_IER1                   (0xF800C064U) /**< \brief (TC0) Interrupt Enable Register (channel = 1) */
  #define REG_TC0_IDR1                   (0xF800C068U) /**< \brief (TC0) Interrupt Disable Register (channel = 1) */
  #define REG_TC0_IMR1                   (0xF800C06CU) /**< \brief (TC0) Interrupt Mask Register (channel = 1) */
  #define REG_TC0_EMR1                   (0xF800C070U) /**< \brief (TC0) Extended Mode Register (channel = 1) */
  #define REG_TC0_CCR2                   (0xF800C080U) /**< \brief (TC0) Channel Control Register (channel = 2) */
  #define REG_TC0_CMR2                   (0xF800C084U) /**< \brief (TC0) Channel Mode Register (channel = 2) */
  #define REG_TC0_SMMR2                  (0xF800C088U) /**< \brief (TC0) Stepper Motor Mode Register (channel = 2) */
  #define REG_TC0_RAB2                   (0xF800C08CU) /**< \brief (TC0) Register AB (channel = 2) */
  #define REG_TC0_CV2                    (0xF800C090U) /**< \brief (TC0) Counter Value (channel = 2) */
  #define REG_TC0_RA2                    (0xF800C094U) /**< \brief (TC0) Register A (channel = 2) */
  #define REG_TC0_RB2                    (0xF800C098U) /**< \brief (TC0) Register B (channel = 2) */
  #define REG_TC0_RC2                    (0xF800C09CU) /**< \brief (TC0) Register C (channel = 2) */
  #define REG_TC0_SR2                    (0xF800C0A0U) /**< \brief (TC0) Status Register (channel = 2) */
  #define REG_TC0_IER2                   (0xF800C0A4U) /**< \brief (TC0) Interrupt Enable Register (channel = 2) */
  #define REG_TC0_IDR2                   (0xF800C0A8U) /**< \brief (TC0) Interrupt Disable Register (channel = 2) */
  #define REG_TC0_IMR2                   (0xF800C0ACU) /**< \brief (TC0) Interrupt Mask Register (channel = 2) */
  #define REG_TC0_EMR2                   (0xF800C0B0U) /**< \brief (TC0) Extended Mode Register (channel = 2) */
  #define REG_TC0_BCR                    (0xF800C0C0U) /**< \brief (TC0) Block Control Register */
  #define REG_TC0_BMR                    (0xF800C0C4U) /**< \brief (TC0) Block Mode Register */
  #define REG_TC0_QIER                   (0xF800C0C8U) /**< \brief (TC0) QDEC Interrupt Enable Register */
  #define REG_TC0_QIDR                   (0xF800C0CCU) /**< \brief (TC0) QDEC Interrupt Disable Register */
  #define REG_TC0_QIMR                   (0xF800C0D0U) /**< \brief (TC0) QDEC Interrupt Mask Register */
  #define REG_TC0_QISR                   (0xF800C0D4U) /**< \brief (TC0) QDEC Interrupt Status Register */
  #define REG_TC0_FMR                    (0xF800C0D8U) /**< \brief (TC0) Fault Mode Register */
  #define REG_TC0_WPMR                   (0xF800C0E4U) /**< \brief (TC0) Write Protection Mode Register */
  #define REG_TC0_VER                    (0xF800C0FCU) /**< \brief (TC0) Version Register */
#else
  #define REG_TC0_CCR0  (*(__O  uint32_t*)0xF800C000U) /**< \brief (TC0) Channel Control Register (channel = 0) */
  #define REG_TC0_CMR0  (*(__IO uint32_t*)0xF800C004U) /**< \brief (TC0) Channel Mode Register (channel = 0) */
  #define REG_TC0_SMMR0 (*(__IO uint32_t*)0xF800C008U) /**< \brief (TC0) Stepper Motor Mode Register (channel = 0) */
  #define REG_TC0_RAB0  (*(__I  uint32_t*)0xF800C00CU) /**< \brief (TC0) Register AB (channel = 0) */
  #define REG_TC0_CV0   (*(__I  uint32_t*)0xF800C010U) /**< \brief (TC0) Counter Value (channel = 0) */
  #define REG_TC0_RA0   (*(__IO uint32_t*)0xF800C014U) /**< \brief (TC0) Register A (channel = 0) */
  #define REG_TC0_RB0   (*(__IO uint32_t*)0xF800C018U) /**< \brief (TC0) Register B (channel = 0) */
  #define REG_TC0_RC0   (*(__IO uint32_t*)0xF800C01CU) /**< \brief (TC0) Register C (channel = 0) */
  #define REG_TC0_SR0   (*(__I  uint32_t*)0xF800C020U) /**< \brief (TC0) Status Register (channel = 0) */
  #define REG_TC0_IER0  (*(__O  uint32_t*)0xF800C024U) /**< \brief (TC0) Interrupt Enable Register (channel = 0) */
  #define REG_TC0_IDR0  (*(__O  uint32_t*)0xF800C028U) /**< \brief (TC0) Interrupt Disable Register (channel = 0) */
  #define REG_TC0_IMR0  (*(__I  uint32_t*)0xF800C02CU) /**< \brief (TC0) Interrupt Mask Register (channel = 0) */
  #define REG_TC0_EMR0  (*(__IO uint32_t*)0xF800C030U) /**< \brief (TC0) Extended Mode Register (channel = 0) */
  #define REG_TC0_CCR1  (*(__O  uint32_t*)0xF800C040U) /**< \brief (TC0) Channel Control Register (channel = 1) */
  #define REG_TC0_CMR1  (*(__IO uint32_t*)0xF800C044U) /**< \brief (TC0) Channel Mode Register (channel = 1) */
  #define REG_TC0_SMMR1 (*(__IO uint32_t*)0xF800C048U) /**< \brief (TC0) Stepper Motor Mode Register (channel = 1) */
  #define REG_TC0_RAB1  (*(__I  uint32_t*)0xF800C04CU) /**< \brief (TC0) Register AB (channel = 1) */
  #define REG_TC0_CV1   (*(__I  uint32_t*)0xF800C050U) /**< \brief (TC0) Counter Value (channel = 1) */
  #define REG_TC0_RA1   (*(__IO uint32_t*)0xF800C054U) /**< \brief (TC0) Register A (channel = 1) */
  #define REG_TC0_RB1   (*(__IO uint32_t*)0xF800C058U) /**< \brief (TC0) Register B (channel = 1) */
  #define REG_TC0_RC1   (*(__IO uint32_t*)0xF800C05CU) /**< \brief (TC0) Register C (channel = 1) */
  #define REG_TC0_SR1   (*(__I  uint32_t*)0xF800C060U) /**< \brief (TC0) Status Register (channel = 1) */
  #define REG_TC0_IER1  (*(__O  uint32_t*)0xF800C064U) /**< \brief (TC0) Interrupt Enable Register (channel = 1) */
  #define REG_TC0_IDR1  (*(__O  uint32_t*)0xF800C068U) /**< \brief (TC0) Interrupt Disable Register (channel = 1) */
  #define REG_TC0_IMR1  (*(__I  uint32_t*)0xF800C06CU) /**< \brief (TC0) Interrupt Mask Register (channel = 1) */
  #define REG_TC0_EMR1  (*(__IO uint32_t*)0xF800C070U) /**< \brief (TC0) Extended Mode Register (channel = 1) */
  #define REG_TC0_CCR2  (*(__O  uint32_t*)0xF800C080U) /**< \brief (TC0) Channel Control Register (channel = 2) */
  #define REG_TC0_CMR2  (*(__IO uint32_t*)0xF800C084U) /**< \brief (TC0) Channel Mode Register (channel = 2) */
  #define REG_TC0_SMMR2 (*(__IO uint32_t*)0xF800C088U) /**< \brief (TC0) Stepper Motor Mode Register (channel = 2) */
  #define REG_TC0_RAB2  (*(__I  uint32_t*)0xF800C08CU) /**< \brief (TC0) Register AB (channel = 2) */
  #define REG_TC0_CV2   (*(__I  uint32_t*)0xF800C090U) /**< \brief (TC0) Counter Value (channel = 2) */
  #define REG_TC0_RA2   (*(__IO uint32_t*)0xF800C094U) /**< \brief (TC0) Register A (channel = 2) */
  #define REG_TC0_RB2   (*(__IO uint32_t*)0xF800C098U) /**< \brief (TC0) Register B (channel = 2) */
  #define REG_TC0_RC2   (*(__IO uint32_t*)0xF800C09CU) /**< \brief (TC0) Register C (channel = 2) */
  #define REG_TC0_SR2   (*(__I  uint32_t*)0xF800C0A0U) /**< \brief (TC0) Status Register (channel = 2) */
  #define REG_TC0_IER2  (*(__O  uint32_t*)0xF800C0A4U) /**< \brief (TC0) Interrupt Enable Register (channel = 2) */
  #define REG_TC0_IDR2  (*(__O  uint32_t*)0xF800C0A8U) /**< \brief (TC0) Interrupt Disable Register (channel = 2) */
  #define REG_TC0_IMR2  (*(__I  uint32_t*)0xF800C0ACU) /**< \brief (TC0) Interrupt Mask Register (channel = 2) */
  #define REG_TC0_EMR2  (*(__IO uint32_t*)0xF800C0B0U) /**< \brief (TC0) Extended Mode Register (channel = 2) */
  #define REG_TC0_BCR   (*(__O  uint32_t*)0xF800C0C0U) /**< \brief (TC0) Block Control Register */
  #define REG_TC0_BMR   (*(__IO uint32_t*)0xF800C0C4U) /**< \brief (TC0) Block Mode Register */
  #define REG_TC0_QIER  (*(__O  uint32_t*)0xF800C0C8U) /**< \brief (TC0) QDEC Interrupt Enable Register */
  #define REG_TC0_QIDR  (*(__O  uint32_t*)0xF800C0CCU) /**< \brief (TC0) QDEC Interrupt Disable Register */
  #define REG_TC0_QIMR  (*(__I  uint32_t*)0xF800C0D0U) /**< \brief (TC0) QDEC Interrupt Mask Register */
  #define REG_TC0_QISR  (*(__I  uint32_t*)0xF800C0D4U) /**< \brief (TC0) QDEC Interrupt Status Register */
  #define REG_TC0_FMR   (*(__IO uint32_t*)0xF800C0D8U) /**< \brief (TC0) Fault Mode Register */
  #define REG_TC0_WPMR  (*(__IO uint32_t*)0xF800C0E4U) /**< \brief (TC0) Write Protection Mode Register */
  #define REG_TC0_VER   (*(__I  uint32_t*)0xF800C0FCU) /**< \brief (TC0) Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for TC1 peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_TC1_CCR0                   (0xF8010000U) /**< \brief (TC1) Channel Control Register (channel = 0) */
  #define REG_TC1_CMR0                   (0xF8010004U) /**< \brief (TC1) Channel Mode Register (channel = 0) */
  #define REG_TC1_SMMR0                  (0xF8010008U) /**< \brief (TC1) Stepper Motor Mode Register (channel = 0) */
  #define REG_TC1_RAB0                   (0xF801000CU) /**< \brief (TC1) Register AB (channel = 0) */
  #define REG_TC1_CV0                    (0xF8010010U) /**< \brief (TC1) Counter Value (channel = 0) */
  #define REG_TC1_RA0                    (0xF8010014U) /**< \brief (TC1) Register A (channel = 0) */
  #define REG_TC1_RB0                    (0xF8010018U) /**< \brief (TC1) Register B (channel = 0) */
  #define REG_TC1_RC0                    (0xF801001CU) /**< \brief (TC1) Register C (channel = 0) */
  #define REG_TC1_SR0                    (0xF8010020U) /**< \brief (TC1) Status Register (channel = 0) */
  #define REG_TC1_IER0                   (0xF8010024U) /**< \brief (TC1) Interrupt Enable Register (channel = 0) */
  #define REG_TC1_IDR0                   (0xF8010028U) /**< \brief (TC1) Interrupt Disable Register (channel = 0) */
  #define REG_TC1_IMR0                   (0xF801002CU) /**< \brief (TC1) Interrupt Mask Register (channel = 0) */
  #define REG_TC1_EMR0                   (0xF8010030U) /**< \brief (TC1) Extended Mode Register (channel = 0) */
  #define REG_TC1_CCR1                   (0xF8010040U) /**< \brief (TC1) Channel Control Register (channel = 1) */
  #define REG_TC1_CMR1                   (0xF8010044U) /**< \brief (TC1) Channel Mode Register (channel = 1) */
  #define REG_TC1_SMMR1                  (0xF8010048U) /**< \brief (TC1) Stepper Motor Mode Register (channel = 1) */
  #define REG_TC1_RAB1                   (0xF801004CU) /**< \brief (TC1) Register AB (channel = 1) */
  #define REG_TC1_CV1                    (0xF8010050U) /**< \brief (TC1) Counter Value (channel = 1) */
  #define REG_TC1_RA1                    (0xF8010054U) /**< \brief (TC1) Register A (channel = 1) */
  #define REG_TC1_RB1                    (0xF8010058U) /**< \brief (TC1) Register B (channel = 1) */
  #define REG_TC1_RC1                    (0xF801005CU) /**< \brief (TC1) Register C (channel = 1) */
  #define REG_TC1_SR1                    (0xF8010060U) /**< \brief (TC1) Status Register (channel = 1) */
  #define REG_TC1_IER1                   (0xF8010064U) /**< \brief (TC1) Interrupt Enable Register (channel = 1) */
  #define REG_TC1_IDR1                   (0xF8010068U) /**< \brief (TC1) Interrupt Disable Register (channel = 1) */
  #define REG_TC1_IMR1                   (0xF801006CU) /**< \brief (TC1) Interrupt Mask Register (channel = 1) */
  #define REG_TC1_EMR1                   (0xF8010070U) /**< \brief (TC1) Extended Mode Register (channel = 1) */
  #define REG_TC1_CCR2                   (0xF8010080U) /**< \brief (TC1) Channel Control Register (channel = 2) */
  #define REG_TC1_CMR2                   (0xF8010084U) /**< \brief (TC1) Channel Mode Register (channel = 2) */
  #define REG_TC1_SMMR2                  (0xF8010088U) /**< \brief (TC1) Stepper Motor Mode Register (channel = 2) */
  #define REG_TC1_RAB2                   (0xF801008CU) /**< \brief (TC1) Register AB (channel = 2) */
  #define REG_TC1_CV2                    (0xF8010090U) /**< \brief (TC1) Counter Value (channel = 2) */
  #define REG_TC1_RA2                    (0xF8010094U) /**< \brief (TC1) Register A (channel = 2) */
  #define REG_TC1_RB2                    (0xF8010098U) /**< \brief (TC1) Register B (channel = 2) */
  #define REG_TC1_RC2                    (0xF801009CU) /**< \brief (TC1) Register C (channel = 2) */
  #define REG_TC1_SR2                    (0xF80100A0U) /**< \brief (TC1) Status Register (channel = 2) */
  #define REG_TC1_IER2                   (0xF80100A4U) /**< \brief (TC1) Interrupt Enable Register (channel = 2) */
  #define REG_TC1_IDR2                   (0xF80100A8U) /**< \brief (TC1) Interrupt Disable Register (channel = 2) */
  #define REG_TC1_IMR2                   (0xF80100ACU) /**< \brief (TC1) Interrupt Mask Register (channel = 2) */
  #define REG_TC1_EMR2                   (0xF80100B0U) /**< \brief (TC1) Extended Mode Register (channel = 2) */
  #define REG_TC1_BCR                    (0xF80100C0U) /**< \brief (TC1) Block Control Register */
  #define REG_TC1_BMR                    (0xF80100C4U) /**< \brief (TC1) Block Mode Register */
  #define REG_TC1_QIER                   (0xF80100C8U) /**< \brief (TC1) QDEC Interrupt Enable Register */
  #define REG_TC1_QIDR                   (0xF80100CCU) /**< \brief (TC1) QDEC Interrupt Disable Register */
  #define REG_TC1_QIMR                   (0xF80100D0U) /**< \brief (TC1) QDEC Interrupt Mask Register */
  #define REG_TC1_QISR                   (0xF80100D4U) /**< \brief (TC1) QDEC Interrupt Status Register */
  #define REG_TC1_FMR                    (0xF80100D8U) /**< \brief (TC1) Fault Mode Register */
  #define REG_TC1_WPMR                   (0xF80100E4U) /**< \brief (TC1) Write Protection Mode Register */
  #define REG_TC1_VER                    (0xF80100FCU) /**< \brief (TC1) Version Register */
#else
  #define REG_TC1_CCR0  (*(__O  uint32_t*)0xF8010000U) /**< \brief (TC1) Channel Control Register (channel = 0) */
  #define REG_TC1_CMR0  (*(__IO uint32_t*)0xF8010004U) /**< \brief (TC1) Channel Mode Register (channel = 0) */
  #define REG_TC1_SMMR0 (*(__IO uint32_t*)0xF8010008U) /**< \brief (TC1) Stepper Motor Mode Register (channel = 0) */
  #define REG_TC1_RAB0  (*(__I  uint32_t*)0xF801000CU) /**< \brief (TC1) Register AB (channel = 0) */
  #define REG_TC1_CV0   (*(__I  uint32_t*)0xF8010010U) /**< \brief (TC1) Counter Value (channel = 0) */
  #define REG_TC1_RA0   (*(__IO uint32_t*)0xF8010014U) /**< \brief (TC1) Register A (channel = 0) */
  #define REG_TC1_RB0   (*(__IO uint32_t*)0xF8010018U) /**< \brief (TC1) Register B (channel = 0) */
  #define REG_TC1_RC0   (*(__IO uint32_t*)0xF801001CU) /**< \brief (TC1) Register C (channel = 0) */
  #define REG_TC1_SR0   (*(__I  uint32_t*)0xF8010020U) /**< \brief (TC1) Status Register (channel = 0) */
  #define REG_TC1_IER0  (*(__O  uint32_t*)0xF8010024U) /**< \brief (TC1) Interrupt Enable Register (channel = 0) */
  #define REG_TC1_IDR0  (*(__O  uint32_t*)0xF8010028U) /**< \brief (TC1) Interrupt Disable Register (channel = 0) */
  #define REG_TC1_IMR0  (*(__I  uint32_t*)0xF801002CU) /**< \brief (TC1) Interrupt Mask Register (channel = 0) */
  #define REG_TC1_EMR0  (*(__IO uint32_t*)0xF8010030U) /**< \brief (TC1) Extended Mode Register (channel = 0) */
  #define REG_TC1_CCR1  (*(__O  uint32_t*)0xF8010040U) /**< \brief (TC1) Channel Control Register (channel = 1) */
  #define REG_TC1_CMR1  (*(__IO uint32_t*)0xF8010044U) /**< \brief (TC1) Channel Mode Register (channel = 1) */
  #define REG_TC1_SMMR1 (*(__IO uint32_t*)0xF8010048U) /**< \brief (TC1) Stepper Motor Mode Register (channel = 1) */
  #define REG_TC1_RAB1  (*(__I  uint32_t*)0xF801004CU) /**< \brief (TC1) Register AB (channel = 1) */
  #define REG_TC1_CV1   (*(__I  uint32_t*)0xF8010050U) /**< \brief (TC1) Counter Value (channel = 1) */
  #define REG_TC1_RA1   (*(__IO uint32_t*)0xF8010054U) /**< \brief (TC1) Register A (channel = 1) */
  #define REG_TC1_RB1   (*(__IO uint32_t*)0xF8010058U) /**< \brief (TC1) Register B (channel = 1) */
  #define REG_TC1_RC1   (*(__IO uint32_t*)0xF801005CU) /**< \brief (TC1) Register C (channel = 1) */
  #define REG_TC1_SR1   (*(__I  uint32_t*)0xF8010060U) /**< \brief (TC1) Status Register (channel = 1) */
  #define REG_TC1_IER1  (*(__O  uint32_t*)0xF8010064U) /**< \brief (TC1) Interrupt Enable Register (channel = 1) */
  #define REG_TC1_IDR1  (*(__O  uint32_t*)0xF8010068U) /**< \brief (TC1) Interrupt Disable Register (channel = 1) */
  #define REG_TC1_IMR1  (*(__I  uint32_t*)0xF801006CU) /**< \brief (TC1) Interrupt Mask Register (channel = 1) */
  #define REG_TC1_EMR1  (*(__IO uint32_t*)0xF8010070U) /**< \brief (TC1) Extended Mode Register (channel = 1) */
  #define REG_TC1_CCR2  (*(__O  uint32_t*)0xF8010080U) /**< \brief (TC1) Channel Control Register (channel = 2) */
  #define REG_TC1_CMR2  (*(__IO uint32_t*)0xF8010084U) /**< \brief (TC1) Channel Mode Register (channel = 2) */
  #define REG_TC1_SMMR2 (*(__IO uint32_t*)0xF8010088U) /**< \brief (TC1) Stepper Motor Mode Register (channel = 2) */
  #define REG_TC1_RAB2  (*(__I  uint32_t*)0xF801008CU) /**< \brief (TC1) Register AB (channel = 2) */
  #define REG_TC1_CV2   (*(__I  uint32_t*)0xF8010090U) /**< \brief (TC1) Counter Value (channel = 2) */
  #define REG_TC1_RA2   (*(__IO uint32_t*)0xF8010094U) /**< \brief (TC1) Register A (channel = 2) */
  #define REG_TC1_RB2   (*(__IO uint32_t*)0xF8010098U) /**< \brief (TC1) Register B (channel = 2) */
  #define REG_TC1_RC2   (*(__IO uint32_t*)0xF801009CU) /**< \brief (TC1) Register C (channel = 2) */
  #define REG_TC1_SR2   (*(__I  uint32_t*)0xF80100A0U) /**< \brief (TC1) Status Register (channel = 2) */
  #define REG_TC1_IER2  (*(__O  uint32_t*)0xF80100A4U) /**< \brief (TC1) Interrupt Enable Register (channel = 2) */
  #define REG_TC1_IDR2  (*(__O  uint32_t*)0xF80100A8U) /**< \brief (TC1) Interrupt Disable Register (channel = 2) */
  #define REG_TC1_IMR2  (*(__I  uint32_t*)0xF80100ACU) /**< \brief (TC1) Interrupt Mask Register (channel = 2) */
  #define REG_TC1_EMR2  (*(__IO uint32_t*)0xF80100B0U) /**< \brief (TC1) Extended Mode Register (channel = 2) */
  #define REG_TC1_BCR   (*(__O  uint32_t*)0xF80100C0U) /**< \brief (TC1) Block Control Register */
  #define REG_TC1_BMR   (*(__IO uint32_t*)0xF80100C4U) /**< \brief (TC1) Block Mode Register */
  #define REG_TC1_QIER  (*(__O  uint32_t*)0xF80100C8U) /**< \brief (TC1) QDEC Interrupt Enable Register */
  #define REG_TC1_QIDR  (*(__O  uint32_t*)0xF80100CCU) /**< \brief (TC1) QDEC Interrupt Disable Register */
  #define REG_TC1_QIMR  (*(__I  uint32_t*)0xF80100D0U) /**< \brief (TC1) QDEC Interrupt Mask Register */
  #define REG_TC1_QISR  (*(__I  uint32_t*)0xF80100D4U) /**< \brief (TC1) QDEC Interrupt Status Register */
  #define REG_TC1_FMR   (*(__IO uint32_t*)0xF80100D8U) /**< \brief (TC1) Fault Mode Register */
  #define REG_TC1_WPMR  (*(__IO uint32_t*)0xF80100E4U) /**< \brief (TC1) Write Protection Mode Register */
  #define REG_TC1_VER   (*(__I  uint32_t*)0xF80100FCU) /**< \brief (TC1) Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for HSMC peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_HSMC_CFG                         (0xF8014000U) /**< \brief (HSMC) HSMC NFC Configuration Register */
  #define REG_HSMC_CTRL                        (0xF8014004U) /**< \brief (HSMC) HSMC NFC Control Register */
  #define REG_HSMC_SR                          (0xF8014008U) /**< \brief (HSMC) HSMC NFC Status Register */
  #define REG_HSMC_IER                         (0xF801400CU) /**< \brief (HSMC) HSMC NFC Interrupt Enable Register */
  #define REG_HSMC_IDR                         (0xF8014010U) /**< \brief (HSMC) HSMC NFC Interrupt Disable Register */
  #define REG_HSMC_IMR                         (0xF8014014U) /**< \brief (HSMC) HSMC NFC Interrupt Mask Register */
  #define REG_HSMC_ADDR                        (0xF8014018U) /**< \brief (HSMC) HSMC NFC Address Cycle Zero Register */
  #define REG_HSMC_BANK                        (0xF801401CU) /**< \brief (HSMC) HSMC Bank Address Register */
  #define REG_HSMC_PMECCFG                     (0xF8014070U) /**< \brief (HSMC) PMECC Configuration Register */
  #define REG_HSMC_PMECCSAREA                  (0xF8014074U) /**< \brief (HSMC) PMECC Spare Area Size Register */
  #define REG_HSMC_PMECCSADDR                  (0xF8014078U) /**< \brief (HSMC) PMECC Start Address Register */
  #define REG_HSMC_PMECCEADDR                  (0xF801407CU) /**< \brief (HSMC) PMECC End Address Register */
  #define REG_HSMC_PMECCTRL                    (0xF8014084U) /**< \brief (HSMC) PMECC Control Register */
  #define REG_HSMC_PMECCSR                     (0xF8014088U) /**< \brief (HSMC) PMECC Status Register */
  #define REG_HSMC_PMECCIER                    (0xF801408CU) /**< \brief (HSMC) PMECC Interrupt Enable register */
  #define REG_HSMC_PMECCIDR                    (0xF8014090U) /**< \brief (HSMC) PMECC Interrupt Disable Register */
  #define REG_HSMC_PMECCIMR                    (0xF8014094U) /**< \brief (HSMC) PMECC Interrupt Mask Register */
  #define REG_HSMC_PMECCISR                    (0xF8014098U) /**< \brief (HSMC) PMECC Interrupt Status Register */
  #define REG_HSMC_PMECC0_0                    (0xF80140B0U) /**< \brief (HSMC) PMECC Redundancy 0 Register (sec_num = 0) */
  #define REG_HSMC_PMECC1_0                    (0xF80140B4U) /**< \brief (HSMC) PMECC Redundancy 1 Register (sec_num = 0) */
  #define REG_HSMC_PMECC2_0                    (0xF80140B8U) /**< \brief (HSMC) PMECC Redundancy 2 Register (sec_num = 0) */
  #define REG_HSMC_PMECC3_0                    (0xF80140BCU) /**< \brief (HSMC) PMECC Redundancy 3 Register (sec_num = 0) */
  #define REG_HSMC_PMECC4_0                    (0xF80140C0U) /**< \brief (HSMC) PMECC Redundancy 4 Register (sec_num = 0) */
  #define REG_HSMC_PMECC5_0                    (0xF80140C4U) /**< \brief (HSMC) PMECC Redundancy 5 Register (sec_num = 0) */
  #define REG_HSMC_PMECC6_0                    (0xF80140C8U) /**< \brief (HSMC) PMECC Redundancy 6 Register (sec_num = 0) */
  #define REG_HSMC_PMECC7_0                    (0xF80140CCU) /**< \brief (HSMC) PMECC Redundancy 7 Register (sec_num = 0) */
  #define REG_HSMC_PMECC8_0                    (0xF80140D0U) /**< \brief (HSMC) PMECC Redundancy 8 Register (sec_num = 0) */
  #define REG_HSMC_PMECC9_0                    (0xF80140D4U) /**< \brief (HSMC) PMECC Redundancy 9 Register (sec_num = 0) */
  #define REG_HSMC_PMECC10_0                   (0xF80140D8U) /**< \brief (HSMC) PMECC Redundancy 10 Register (sec_num = 0) */
  #define REG_HSMC_PMECC0_1                    (0xF80140F0U) /**< \brief (HSMC) PMECC Redundancy 0 Register (sec_num = 1) */
  #define REG_HSMC_PMECC1_1                    (0xF80140F4U) /**< \brief (HSMC) PMECC Redundancy 1 Register (sec_num = 1) */
  #define REG_HSMC_PMECC2_1                    (0xF80140F8U) /**< \brief (HSMC) PMECC Redundancy 2 Register (sec_num = 1) */
  #define REG_HSMC_PMECC3_1                    (0xF80140FCU) /**< \brief (HSMC) PMECC Redundancy 3 Register (sec_num = 1) */
  #define REG_HSMC_PMECC4_1                    (0xF8014100U) /**< \brief (HSMC) PMECC Redundancy 4 Register (sec_num = 1) */
  #define REG_HSMC_PMECC5_1                    (0xF8014104U) /**< \brief (HSMC) PMECC Redundancy 5 Register (sec_num = 1) */
  #define REG_HSMC_PMECC6_1                    (0xF8014108U) /**< \brief (HSMC) PMECC Redundancy 6 Register (sec_num = 1) */
  #define REG_HSMC_PMECC7_1                    (0xF801410CU) /**< \brief (HSMC) PMECC Redundancy 7 Register (sec_num = 1) */
  #define REG_HSMC_PMECC8_1                    (0xF8014110U) /**< \brief (HSMC) PMECC Redundancy 8 Register (sec_num = 1) */
  #define REG_HSMC_PMECC9_1                    (0xF8014114U) /**< \brief (HSMC) PMECC Redundancy 9 Register (sec_num = 1) */
  #define REG_HSMC_PMECC10_1                   (0xF8014118U) /**< \brief (HSMC) PMECC Redundancy 10 Register (sec_num = 1) */
  #define REG_HSMC_PMECC0_2                    (0xF8014130U) /**< \brief (HSMC) PMECC Redundancy 0 Register (sec_num = 2) */
  #define REG_HSMC_PMECC1_2                    (0xF8014134U) /**< \brief (HSMC) PMECC Redundancy 1 Register (sec_num = 2) */
  #define REG_HSMC_PMECC2_2                    (0xF8014138U) /**< \brief (HSMC) PMECC Redundancy 2 Register (sec_num = 2) */
  #define REG_HSMC_PMECC3_2                    (0xF801413CU) /**< \brief (HSMC) PMECC Redundancy 3 Register (sec_num = 2) */
  #define REG_HSMC_PMECC4_2                    (0xF8014140U) /**< \brief (HSMC) PMECC Redundancy 4 Register (sec_num = 2) */
  #define REG_HSMC_PMECC5_2                    (0xF8014144U) /**< \brief (HSMC) PMECC Redundancy 5 Register (sec_num = 2) */
  #define REG_HSMC_PMECC6_2                    (0xF8014148U) /**< \brief (HSMC) PMECC Redundancy 6 Register (sec_num = 2) */
  #define REG_HSMC_PMECC7_2                    (0xF801414CU) /**< \brief (HSMC) PMECC Redundancy 7 Register (sec_num = 2) */
  #define REG_HSMC_PMECC8_2                    (0xF8014150U) /**< \brief (HSMC) PMECC Redundancy 8 Register (sec_num = 2) */
  #define REG_HSMC_PMECC9_2                    (0xF8014154U) /**< \brief (HSMC) PMECC Redundancy 9 Register (sec_num = 2) */
  #define REG_HSMC_PMECC10_2                   (0xF8014158U) /**< \brief (HSMC) PMECC Redundancy 10 Register (sec_num = 2) */
  #define REG_HSMC_PMECC0_3                    (0xF8014170U) /**< \brief (HSMC) PMECC Redundancy 0 Register (sec_num = 3) */
  #define REG_HSMC_PMECC1_3                    (0xF8014174U) /**< \brief (HSMC) PMECC Redundancy 1 Register (sec_num = 3) */
  #define REG_HSMC_PMECC2_3                    (0xF8014178U) /**< \brief (HSMC) PMECC Redundancy 2 Register (sec_num = 3) */
  #define REG_HSMC_PMECC3_3                    (0xF801417CU) /**< \brief (HSMC) PMECC Redundancy 3 Register (sec_num = 3) */
  #define REG_HSMC_PMECC4_3                    (0xF8014180U) /**< \brief (HSMC) PMECC Redundancy 4 Register (sec_num = 3) */
  #define REG_HSMC_PMECC5_3                    (0xF8014184U) /**< \brief (HSMC) PMECC Redundancy 5 Register (sec_num = 3) */
  #define REG_HSMC_PMECC6_3                    (0xF8014188U) /**< \brief (HSMC) PMECC Redundancy 6 Register (sec_num = 3) */
  #define REG_HSMC_PMECC7_3                    (0xF801418CU) /**< \brief (HSMC) PMECC Redundancy 7 Register (sec_num = 3) */
  #define REG_HSMC_PMECC8_3                    (0xF8014190U) /**< \brief (HSMC) PMECC Redundancy 8 Register (sec_num = 3) */
  #define REG_HSMC_PMECC9_3                    (0xF8014194U) /**< \brief (HSMC) PMECC Redundancy 9 Register (sec_num = 3) */
  #define REG_HSMC_PMECC10_3                   (0xF8014198U) /**< \brief (HSMC) PMECC Redundancy 10 Register (sec_num = 3) */
  #define REG_HSMC_PMECC0_4                    (0xF80141B0U) /**< \brief (HSMC) PMECC Redundancy 0 Register (sec_num = 4) */
  #define REG_HSMC_PMECC1_4                    (0xF80141B4U) /**< \brief (HSMC) PMECC Redundancy 1 Register (sec_num = 4) */
  #define REG_HSMC_PMECC2_4                    (0xF80141B8U) /**< \brief (HSMC) PMECC Redundancy 2 Register (sec_num = 4) */
  #define REG_HSMC_PMECC3_4                    (0xF80141BCU) /**< \brief (HSMC) PMECC Redundancy 3 Register (sec_num = 4) */
  #define REG_HSMC_PMECC4_4                    (0xF80141C0U) /**< \brief (HSMC) PMECC Redundancy 4 Register (sec_num = 4) */
  #define REG_HSMC_PMECC5_4                    (0xF80141C4U) /**< \brief (HSMC) PMECC Redundancy 5 Register (sec_num = 4) */
  #define REG_HSMC_PMECC6_4                    (0xF80141C8U) /**< \brief (HSMC) PMECC Redundancy 6 Register (sec_num = 4) */
  #define REG_HSMC_PMECC7_4                    (0xF80141CCU) /**< \brief (HSMC) PMECC Redundancy 7 Register (sec_num = 4) */
  #define REG_HSMC_PMECC8_4                    (0xF80141D0U) /**< \brief (HSMC) PMECC Redundancy 8 Register (sec_num = 4) */
  #define REG_HSMC_PMECC9_4                    (0xF80141D4U) /**< \brief (HSMC) PMECC Redundancy 9 Register (sec_num = 4) */
  #define REG_HSMC_PMECC10_4                   (0xF80141D8U) /**< \brief (HSMC) PMECC Redundancy 10 Register (sec_num = 4) */
  #define REG_HSMC_PMECC0_5                    (0xF80141F0U) /**< \brief (HSMC) PMECC Redundancy 0 Register (sec_num = 5) */
  #define REG_HSMC_PMECC1_5                    (0xF80141F4U) /**< \brief (HSMC) PMECC Redundancy 1 Register (sec_num = 5) */
  #define REG_HSMC_PMECC2_5                    (0xF80141F8U) /**< \brief (HSMC) PMECC Redundancy 2 Register (sec_num = 5) */
  #define REG_HSMC_PMECC3_5                    (0xF80141FCU) /**< \brief (HSMC) PMECC Redundancy 3 Register (sec_num = 5) */
  #define REG_HSMC_PMECC4_5                    (0xF8014200U) /**< \brief (HSMC) PMECC Redundancy 4 Register (sec_num = 5) */
  #define REG_HSMC_PMECC5_5                    (0xF8014204U) /**< \brief (HSMC) PMECC Redundancy 5 Register (sec_num = 5) */
  #define REG_HSMC_PMECC6_5                    (0xF8014208U) /**< \brief (HSMC) PMECC Redundancy 6 Register (sec_num = 5) */
  #define REG_HSMC_PMECC7_5                    (0xF801420CU) /**< \brief (HSMC) PMECC Redundancy 7 Register (sec_num = 5) */
  #define REG_HSMC_PMECC8_5                    (0xF8014210U) /**< \brief (HSMC) PMECC Redundancy 8 Register (sec_num = 5) */
  #define REG_HSMC_PMECC9_5                    (0xF8014214U) /**< \brief (HSMC) PMECC Redundancy 9 Register (sec_num = 5) */
  #define REG_HSMC_PMECC10_5                   (0xF8014218U) /**< \brief (HSMC) PMECC Redundancy 10 Register (sec_num = 5) */
  #define REG_HSMC_PMECC0_6                    (0xF8014230U) /**< \brief (HSMC) PMECC Redundancy 0 Register (sec_num = 6) */
  #define REG_HSMC_PMECC1_6                    (0xF8014234U) /**< \brief (HSMC) PMECC Redundancy 1 Register (sec_num = 6) */
  #define REG_HSMC_PMECC2_6                    (0xF8014238U) /**< \brief (HSMC) PMECC Redundancy 2 Register (sec_num = 6) */
  #define REG_HSMC_PMECC3_6                    (0xF801423CU) /**< \brief (HSMC) PMECC Redundancy 3 Register (sec_num = 6) */
  #define REG_HSMC_PMECC4_6                    (0xF8014240U) /**< \brief (HSMC) PMECC Redundancy 4 Register (sec_num = 6) */
  #define REG_HSMC_PMECC5_6                    (0xF8014244U) /**< \brief (HSMC) PMECC Redundancy 5 Register (sec_num = 6) */
  #define REG_HSMC_PMECC6_6                    (0xF8014248U) /**< \brief (HSMC) PMECC Redundancy 6 Register (sec_num = 6) */
  #define REG_HSMC_PMECC7_6                    (0xF801424CU) /**< \brief (HSMC) PMECC Redundancy 7 Register (sec_num = 6) */
  #define REG_HSMC_PMECC8_6                    (0xF8014250U) /**< \brief (HSMC) PMECC Redundancy 8 Register (sec_num = 6) */
  #define REG_HSMC_PMECC9_6                    (0xF8014254U) /**< \brief (HSMC) PMECC Redundancy 9 Register (sec_num = 6) */
  #define REG_HSMC_PMECC10_6                   (0xF8014258U) /**< \brief (HSMC) PMECC Redundancy 10 Register (sec_num = 6) */
  #define REG_HSMC_PMECC0_7                    (0xF8014270U) /**< \brief (HSMC) PMECC Redundancy 0 Register (sec_num = 7) */
  #define REG_HSMC_PMECC1_7                    (0xF8014274U) /**< \brief (HSMC) PMECC Redundancy 1 Register (sec_num = 7) */
  #define REG_HSMC_PMECC2_7                    (0xF8014278U) /**< \brief (HSMC) PMECC Redundancy 2 Register (sec_num = 7) */
  #define REG_HSMC_PMECC3_7                    (0xF801427CU) /**< \brief (HSMC) PMECC Redundancy 3 Register (sec_num = 7) */
  #define REG_HSMC_PMECC4_7                    (0xF8014280U) /**< \brief (HSMC) PMECC Redundancy 4 Register (sec_num = 7) */
  #define REG_HSMC_PMECC5_7                    (0xF8014284U) /**< \brief (HSMC) PMECC Redundancy 5 Register (sec_num = 7) */
  #define REG_HSMC_PMECC6_7                    (0xF8014288U) /**< \brief (HSMC) PMECC Redundancy 6 Register (sec_num = 7) */
  #define REG_HSMC_PMECC7_7                    (0xF801428CU) /**< \brief (HSMC) PMECC Redundancy 7 Register (sec_num = 7) */
  #define REG_HSMC_PMECC8_7                    (0xF8014290U) /**< \brief (HSMC) PMECC Redundancy 8 Register (sec_num = 7) */
  #define REG_HSMC_PMECC9_7                    (0xF8014294U) /**< \brief (HSMC) PMECC Redundancy 9 Register (sec_num = 7) */
  #define REG_HSMC_PMECC10_7                   (0xF8014298U) /**< \brief (HSMC) PMECC Redundancy 10 Register (sec_num = 7) */
  #define REG_HSMC_REM0_0                      (0xF80142B0U) /**< \brief (HSMC) PMECC Remainder 0 Register (sec_num = 0) */
  #define REG_HSMC_REM1_0                      (0xF80142B4U) /**< \brief (HSMC) PMECC Remainder 1 Register (sec_num = 0) */
  #define REG_HSMC_REM2_0                      (0xF80142B8U) /**< \brief (HSMC) PMECC Remainder 2 Register (sec_num = 0) */
  #define REG_HSMC_REM3_0                      (0xF80142BCU) /**< \brief (HSMC) PMECC Remainder 3 Register (sec_num = 0) */
  #define REG_HSMC_REM4_0                      (0xF80142C0U) /**< \brief (HSMC) PMECC Remainder 4 Register (sec_num = 0) */
  #define REG_HSMC_REM5_0                      (0xF80142C4U) /**< \brief (HSMC) PMECC Remainder 5 Register (sec_num = 0) */
  #define REG_HSMC_REM6_0                      (0xF80142C8U) /**< \brief (HSMC) PMECC Remainder 6 Register (sec_num = 0) */
  #define REG_HSMC_REM7_0                      (0xF80142CCU) /**< \brief (HSMC) PMECC Remainder 7 Register (sec_num = 0) */
  #define REG_HSMC_REM8_0                      (0xF80142D0U) /**< \brief (HSMC) PMECC Remainder 8 Register (sec_num = 0) */
  #define REG_HSMC_REM9_0                      (0xF80142D4U) /**< \brief (HSMC) PMECC Remainder 9 Register (sec_num = 0) */
  #define REG_HSMC_REM10_0                     (0xF80142D8U) /**< \brief (HSMC) PMECC Remainder 10 Register (sec_num = 0) */
  #define REG_HSMC_REM11_0                     (0xF80142DCU) /**< \brief (HSMC) PMECC Remainder 11 Register (sec_num = 0) */
  #define REG_HSMC_REM0_1                      (0xF80142F0U) /**< \brief (HSMC) PMECC Remainder 0 Register (sec_num = 1) */
  #define REG_HSMC_REM1_1                      (0xF80142F4U) /**< \brief (HSMC) PMECC Remainder 1 Register (sec_num = 1) */
  #define REG_HSMC_REM2_1                      (0xF80142F8U) /**< \brief (HSMC) PMECC Remainder 2 Register (sec_num = 1) */
  #define REG_HSMC_REM3_1                      (0xF80142FCU) /**< \brief (HSMC) PMECC Remainder 3 Register (sec_num = 1) */
  #define REG_HSMC_REM4_1                      (0xF8014300U) /**< \brief (HSMC) PMECC Remainder 4 Register (sec_num = 1) */
  #define REG_HSMC_REM5_1                      (0xF8014304U) /**< \brief (HSMC) PMECC Remainder 5 Register (sec_num = 1) */
  #define REG_HSMC_REM6_1                      (0xF8014308U) /**< \brief (HSMC) PMECC Remainder 6 Register (sec_num = 1) */
  #define REG_HSMC_REM7_1                      (0xF801430CU) /**< \brief (HSMC) PMECC Remainder 7 Register (sec_num = 1) */
  #define REG_HSMC_REM8_1                      (0xF8014310U) /**< \brief (HSMC) PMECC Remainder 8 Register (sec_num = 1) */
  #define REG_HSMC_REM9_1                      (0xF8014314U) /**< \brief (HSMC) PMECC Remainder 9 Register (sec_num = 1) */
  #define REG_HSMC_REM10_1                     (0xF8014318U) /**< \brief (HSMC) PMECC Remainder 10 Register (sec_num = 1) */
  #define REG_HSMC_REM11_1                     (0xF801431CU) /**< \brief (HSMC) PMECC Remainder 11 Register (sec_num = 1) */
  #define REG_HSMC_REM0_2                      (0xF8014330U) /**< \brief (HSMC) PMECC Remainder 0 Register (sec_num = 2) */
  #define REG_HSMC_REM1_2                      (0xF8014334U) /**< \brief (HSMC) PMECC Remainder 1 Register (sec_num = 2) */
  #define REG_HSMC_REM2_2                      (0xF8014338U) /**< \brief (HSMC) PMECC Remainder 2 Register (sec_num = 2) */
  #define REG_HSMC_REM3_2                      (0xF801433CU) /**< \brief (HSMC) PMECC Remainder 3 Register (sec_num = 2) */
  #define REG_HSMC_REM4_2                      (0xF8014340U) /**< \brief (HSMC) PMECC Remainder 4 Register (sec_num = 2) */
  #define REG_HSMC_REM5_2                      (0xF8014344U) /**< \brief (HSMC) PMECC Remainder 5 Register (sec_num = 2) */
  #define REG_HSMC_REM6_2                      (0xF8014348U) /**< \brief (HSMC) PMECC Remainder 6 Register (sec_num = 2) */
  #define REG_HSMC_REM7_2                      (0xF801434CU) /**< \brief (HSMC) PMECC Remainder 7 Register (sec_num = 2) */
  #define REG_HSMC_REM8_2                      (0xF8014350U) /**< \brief (HSMC) PMECC Remainder 8 Register (sec_num = 2) */
  #define REG_HSMC_REM9_2                      (0xF8014354U) /**< \brief (HSMC) PMECC Remainder 9 Register (sec_num = 2) */
  #define REG_HSMC_REM10_2                     (0xF8014358U) /**< \brief (HSMC) PMECC Remainder 10 Register (sec_num = 2) */
  #define REG_HSMC_REM11_2                     (0xF801435CU) /**< \brief (HSMC) PMECC Remainder 11 Register (sec_num = 2) */
  #define REG_HSMC_REM0_3                      (0xF8014370U) /**< \brief (HSMC) PMECC Remainder 0 Register (sec_num = 3) */
  #define REG_HSMC_REM1_3                      (0xF8014374U) /**< \brief (HSMC) PMECC Remainder 1 Register (sec_num = 3) */
  #define REG_HSMC_REM2_3                      (0xF8014378U) /**< \brief (HSMC) PMECC Remainder 2 Register (sec_num = 3) */
  #define REG_HSMC_REM3_3                      (0xF801437CU) /**< \brief (HSMC) PMECC Remainder 3 Register (sec_num = 3) */
  #define REG_HSMC_REM4_3                      (0xF8014380U) /**< \brief (HSMC) PMECC Remainder 4 Register (sec_num = 3) */
  #define REG_HSMC_REM5_3                      (0xF8014384U) /**< \brief (HSMC) PMECC Remainder 5 Register (sec_num = 3) */
  #define REG_HSMC_REM6_3                      (0xF8014388U) /**< \brief (HSMC) PMECC Remainder 6 Register (sec_num = 3) */
  #define REG_HSMC_REM7_3                      (0xF801438CU) /**< \brief (HSMC) PMECC Remainder 7 Register (sec_num = 3) */
  #define REG_HSMC_REM8_3                      (0xF8014390U) /**< \brief (HSMC) PMECC Remainder 8 Register (sec_num = 3) */
  #define REG_HSMC_REM9_3                      (0xF8014394U) /**< \brief (HSMC) PMECC Remainder 9 Register (sec_num = 3) */
  #define REG_HSMC_REM10_3                     (0xF8014398U) /**< \brief (HSMC) PMECC Remainder 10 Register (sec_num = 3) */
  #define REG_HSMC_REM11_3                     (0xF801439CU) /**< \brief (HSMC) PMECC Remainder 11 Register (sec_num = 3) */
  #define REG_HSMC_REM0_4                      (0xF80143B0U) /**< \brief (HSMC) PMECC Remainder 0 Register (sec_num = 4) */
  #define REG_HSMC_REM1_4                      (0xF80143B4U) /**< \brief (HSMC) PMECC Remainder 1 Register (sec_num = 4) */
  #define REG_HSMC_REM2_4                      (0xF80143B8U) /**< \brief (HSMC) PMECC Remainder 2 Register (sec_num = 4) */
  #define REG_HSMC_REM3_4                      (0xF80143BCU) /**< \brief (HSMC) PMECC Remainder 3 Register (sec_num = 4) */
  #define REG_HSMC_REM4_4                      (0xF80143C0U) /**< \brief (HSMC) PMECC Remainder 4 Register (sec_num = 4) */
  #define REG_HSMC_REM5_4                      (0xF80143C4U) /**< \brief (HSMC) PMECC Remainder 5 Register (sec_num = 4) */
  #define REG_HSMC_REM6_4                      (0xF80143C8U) /**< \brief (HSMC) PMECC Remainder 6 Register (sec_num = 4) */
  #define REG_HSMC_REM7_4                      (0xF80143CCU) /**< \brief (HSMC) PMECC Remainder 7 Register (sec_num = 4) */
  #define REG_HSMC_REM8_4                      (0xF80143D0U) /**< \brief (HSMC) PMECC Remainder 8 Register (sec_num = 4) */
  #define REG_HSMC_REM9_4                      (0xF80143D4U) /**< \brief (HSMC) PMECC Remainder 9 Register (sec_num = 4) */
  #define REG_HSMC_REM10_4                     (0xF80143D8U) /**< \brief (HSMC) PMECC Remainder 10 Register (sec_num = 4) */
  #define REG_HSMC_REM11_4                     (0xF80143DCU) /**< \brief (HSMC) PMECC Remainder 11 Register (sec_num = 4) */
  #define REG_HSMC_REM0_5                      (0xF80143F0U) /**< \brief (HSMC) PMECC Remainder 0 Register (sec_num = 5) */
  #define REG_HSMC_REM1_5                      (0xF80143F4U) /**< \brief (HSMC) PMECC Remainder 1 Register (sec_num = 5) */
  #define REG_HSMC_REM2_5                      (0xF80143F8U) /**< \brief (HSMC) PMECC Remainder 2 Register (sec_num = 5) */
  #define REG_HSMC_REM3_5                      (0xF80143FCU) /**< \brief (HSMC) PMECC Remainder 3 Register (sec_num = 5) */
  #define REG_HSMC_REM4_5                      (0xF8014400U) /**< \brief (HSMC) PMECC Remainder 4 Register (sec_num = 5) */
  #define REG_HSMC_REM5_5                      (0xF8014404U) /**< \brief (HSMC) PMECC Remainder 5 Register (sec_num = 5) */
  #define REG_HSMC_REM6_5                      (0xF8014408U) /**< \brief (HSMC) PMECC Remainder 6 Register (sec_num = 5) */
  #define REG_HSMC_REM7_5                      (0xF801440CU) /**< \brief (HSMC) PMECC Remainder 7 Register (sec_num = 5) */
  #define REG_HSMC_REM8_5                      (0xF8014410U) /**< \brief (HSMC) PMECC Remainder 8 Register (sec_num = 5) */
  #define REG_HSMC_REM9_5                      (0xF8014414U) /**< \brief (HSMC) PMECC Remainder 9 Register (sec_num = 5) */
  #define REG_HSMC_REM10_5                     (0xF8014418U) /**< \brief (HSMC) PMECC Remainder 10 Register (sec_num = 5) */
  #define REG_HSMC_REM11_5                     (0xF801441CU) /**< \brief (HSMC) PMECC Remainder 11 Register (sec_num = 5) */
  #define REG_HSMC_REM0_6                      (0xF8014430U) /**< \brief (HSMC) PMECC Remainder 0 Register (sec_num = 6) */
  #define REG_HSMC_REM1_6                      (0xF8014434U) /**< \brief (HSMC) PMECC Remainder 1 Register (sec_num = 6) */
  #define REG_HSMC_REM2_6                      (0xF8014438U) /**< \brief (HSMC) PMECC Remainder 2 Register (sec_num = 6) */
  #define REG_HSMC_REM3_6                      (0xF801443CU) /**< \brief (HSMC) PMECC Remainder 3 Register (sec_num = 6) */
  #define REG_HSMC_REM4_6                      (0xF8014440U) /**< \brief (HSMC) PMECC Remainder 4 Register (sec_num = 6) */
  #define REG_HSMC_REM5_6                      (0xF8014444U) /**< \brief (HSMC) PMECC Remainder 5 Register (sec_num = 6) */
  #define REG_HSMC_REM6_6                      (0xF8014448U) /**< \brief (HSMC) PMECC Remainder 6 Register (sec_num = 6) */
  #define REG_HSMC_REM7_6                      (0xF801444CU) /**< \brief (HSMC) PMECC Remainder 7 Register (sec_num = 6) */
  #define REG_HSMC_REM8_6                      (0xF8014450U) /**< \brief (HSMC) PMECC Remainder 8 Register (sec_num = 6) */
  #define REG_HSMC_REM9_6                      (0xF8014454U) /**< \brief (HSMC) PMECC Remainder 9 Register (sec_num = 6) */
  #define REG_HSMC_REM10_6                     (0xF8014458U) /**< \brief (HSMC) PMECC Remainder 10 Register (sec_num = 6) */
  #define REG_HSMC_REM11_6                     (0xF801445CU) /**< \brief (HSMC) PMECC Remainder 11 Register (sec_num = 6) */
  #define REG_HSMC_REM0_7                      (0xF8014470U) /**< \brief (HSMC) PMECC Remainder 0 Register (sec_num = 7) */
  #define REG_HSMC_REM1_7                      (0xF8014474U) /**< \brief (HSMC) PMECC Remainder 1 Register (sec_num = 7) */
  #define REG_HSMC_REM2_7                      (0xF8014478U) /**< \brief (HSMC) PMECC Remainder 2 Register (sec_num = 7) */
  #define REG_HSMC_REM3_7                      (0xF801447CU) /**< \brief (HSMC) PMECC Remainder 3 Register (sec_num = 7) */
  #define REG_HSMC_REM4_7                      (0xF8014480U) /**< \brief (HSMC) PMECC Remainder 4 Register (sec_num = 7) */
  #define REG_HSMC_REM5_7                      (0xF8014484U) /**< \brief (HSMC) PMECC Remainder 5 Register (sec_num = 7) */
  #define REG_HSMC_REM6_7                      (0xF8014488U) /**< \brief (HSMC) PMECC Remainder 6 Register (sec_num = 7) */
  #define REG_HSMC_REM7_7                      (0xF801448CU) /**< \brief (HSMC) PMECC Remainder 7 Register (sec_num = 7) */
  #define REG_HSMC_REM8_7                      (0xF8014490U) /**< \brief (HSMC) PMECC Remainder 8 Register (sec_num = 7) */
  #define REG_HSMC_REM9_7                      (0xF8014494U) /**< \brief (HSMC) PMECC Remainder 9 Register (sec_num = 7) */
  #define REG_HSMC_REM10_7                     (0xF8014498U) /**< \brief (HSMC) PMECC Remainder 10 Register (sec_num = 7) */
  #define REG_HSMC_REM11_7                     (0xF801449CU) /**< \brief (HSMC) PMECC Remainder 11 Register (sec_num = 7) */
  #define REG_HSMC_ELCFG                       (0xF8014500U) /**< \brief (HSMC) PMECC Error Location Configuration Register */
  #define REG_HSMC_ELPRIM                      (0xF8014504U) /**< \brief (HSMC) PMECC Error Location Primitive Register */
  #define REG_HSMC_ELEN                        (0xF8014508U) /**< \brief (HSMC) PMECC Error Location Enable Register */
  #define REG_HSMC_ELDIS                       (0xF801450CU) /**< \brief (HSMC) PMECC Error Location Disable Register */
  #define REG_HSMC_ELSR                        (0xF8014510U) /**< \brief (HSMC) PMECC Error Location Status Register */
  #define REG_HSMC_ELIER                       (0xF8014514U) /**< \brief (HSMC) PMECC Error Location Interrupt Enable register */
  #define REG_HSMC_ELIDR                       (0xF8014518U) /**< \brief (HSMC) PMECC Error Location Interrupt Disable Register */
  #define REG_HSMC_ELIMR                       (0xF801451CU) /**< \brief (HSMC) PMECC Error Location Interrupt Mask Register */
  #define REG_HSMC_ELISR                       (0xF8014520U) /**< \brief (HSMC) PMECC Error Location Interrupt Status Register */
  #define REG_HSMC_SIGMA0                      (0xF8014528U) /**< \brief (HSMC) PMECC Error Location SIGMA 0 Register */
  #define REG_HSMC_SIGMA1                      (0xF801452CU) /**< \brief (HSMC) PMECC Error Location SIGMA 1 Register */
  #define REG_HSMC_SIGMA2                      (0xF8014530U) /**< \brief (HSMC) PMECC Error Location SIGMA 2 Register */
  #define REG_HSMC_SIGMA3                      (0xF8014534U) /**< \brief (HSMC) PMECC Error Location SIGMA 3 Register */
  #define REG_HSMC_SIGMA4                      (0xF8014538U) /**< \brief (HSMC) PMECC Error Location SIGMA 4 Register */
  #define REG_HSMC_SIGMA5                      (0xF801453CU) /**< \brief (HSMC) PMECC Error Location SIGMA 5 Register */
  #define REG_HSMC_SIGMA6                      (0xF8014540U) /**< \brief (HSMC) PMECC Error Location SIGMA 6 Register */
  #define REG_HSMC_SIGMA7                      (0xF8014544U) /**< \brief (HSMC) PMECC Error Location SIGMA 7 Register */
  #define REG_HSMC_SIGMA8                      (0xF8014548U) /**< \brief (HSMC) PMECC Error Location SIGMA 8 Register */
  #define REG_HSMC_SIGMA9                      (0xF801454CU) /**< \brief (HSMC) PMECC Error Location SIGMA 9 Register */
  #define REG_HSMC_SIGMA10                     (0xF8014550U) /**< \brief (HSMC) PMECC Error Location SIGMA 10 Register */
  #define REG_HSMC_SIGMA11                     (0xF8014554U) /**< \brief (HSMC) PMECC Error Location SIGMA 11 Register */
  #define REG_HSMC_SIGMA12                     (0xF8014558U) /**< \brief (HSMC) PMECC Error Location SIGMA 12 Register */
  #define REG_HSMC_SIGMA13                     (0xF801455CU) /**< \brief (HSMC) PMECC Error Location SIGMA 13 Register */
  #define REG_HSMC_SIGMA14                     (0xF8014560U) /**< \brief (HSMC) PMECC Error Location SIGMA 14 Register */
  #define REG_HSMC_SIGMA15                     (0xF8014564U) /**< \brief (HSMC) PMECC Error Location SIGMA 15 Register */
  #define REG_HSMC_SIGMA16                     (0xF8014568U) /**< \brief (HSMC) PMECC Error Location SIGMA 16 Register */
  #define REG_HSMC_SIGMA17                     (0xF801456CU) /**< \brief (HSMC) PMECC Error Location SIGMA 17 Register */
  #define REG_HSMC_SIGMA18                     (0xF8014570U) /**< \brief (HSMC) PMECC Error Location SIGMA 18 Register */
  #define REG_HSMC_SIGMA19                     (0xF8014574U) /**< \brief (HSMC) PMECC Error Location SIGMA 19 Register */
  #define REG_HSMC_SIGMA20                     (0xF8014578U) /**< \brief (HSMC) PMECC Error Location SIGMA 20 Register */
  #define REG_HSMC_SIGMA21                     (0xF801457CU) /**< \brief (HSMC) PMECC Error Location SIGMA 21 Register */
  #define REG_HSMC_SIGMA22                     (0xF8014580U) /**< \brief (HSMC) PMECC Error Location SIGMA 22 Register */
  #define REG_HSMC_SIGMA23                     (0xF8014584U) /**< \brief (HSMC) PMECC Error Location SIGMA 23 Register */
  #define REG_HSMC_SIGMA24                     (0xF8014588U) /**< \brief (HSMC) PMECC Error Location SIGMA 24 Register */
  #define REG_HSMC_SIGMA25                     (0xF801458CU) /**< \brief (HSMC) PMECC Error Location SIGMA 25 Register */
  #define REG_HSMC_SIGMA26                     (0xF8014590U) /**< \brief (HSMC) PMECC Error Location SIGMA 26 Register */
  #define REG_HSMC_SIGMA27                     (0xF8014594U) /**< \brief (HSMC) PMECC Error Location SIGMA 27 Register */
  #define REG_HSMC_SIGMA28                     (0xF8014598U) /**< \brief (HSMC) PMECC Error Location SIGMA 28 Register */
  #define REG_HSMC_SIGMA29                     (0xF801459CU) /**< \brief (HSMC) PMECC Error Location SIGMA 29 Register */
  #define REG_HSMC_SIGMA30                     (0xF80145A0U) /**< \brief (HSMC) PMECC Error Location SIGMA 30 Register */
  #define REG_HSMC_SIGMA31                     (0xF80145A4U) /**< \brief (HSMC) PMECC Error Location SIGMA 31 Register */
  #define REG_HSMC_SIGMA32                     (0xF80145A8U) /**< \brief (HSMC) PMECC Error Location SIGMA 32 Register */
  #define REG_HSMC_ERRLOC                      (0xF80145ACU) /**< \brief (HSMC) PMECC Error Location 0 Register */
  #define REG_HSMC_SETUP0                      (0xF8014700U) /**< \brief (HSMC) HSMC Setup Register (CS_number = 0) */
  #define REG_HSMC_PULSE0                      (0xF8014704U) /**< \brief (HSMC) HSMC Pulse Register (CS_number = 0) */
  #define REG_HSMC_CYCLE0                      (0xF8014708U) /**< \brief (HSMC) HSMC Cycle Register (CS_number = 0) */
  #define REG_HSMC_TIMINGS0                    (0xF801470CU) /**< \brief (HSMC) HSMC Timings Register (CS_number = 0) */
  #define REG_HSMC_MODE0                       (0xF8014710U) /**< \brief (HSMC) HSMC Mode Register (CS_number = 0) */
  #define REG_HSMC_SETUP1                      (0xF8014714U) /**< \brief (HSMC) HSMC Setup Register (CS_number = 1) */
  #define REG_HSMC_PULSE1                      (0xF8014718U) /**< \brief (HSMC) HSMC Pulse Register (CS_number = 1) */
  #define REG_HSMC_CYCLE1                      (0xF801471CU) /**< \brief (HSMC) HSMC Cycle Register (CS_number = 1) */
  #define REG_HSMC_TIMINGS1                    (0xF8014720U) /**< \brief (HSMC) HSMC Timings Register (CS_number = 1) */
  #define REG_HSMC_MODE1                       (0xF8014724U) /**< \brief (HSMC) HSMC Mode Register (CS_number = 1) */
  #define REG_HSMC_SETUP2                      (0xF8014728U) /**< \brief (HSMC) HSMC Setup Register (CS_number = 2) */
  #define REG_HSMC_PULSE2                      (0xF801472CU) /**< \brief (HSMC) HSMC Pulse Register (CS_number = 2) */
  #define REG_HSMC_CYCLE2                      (0xF8014730U) /**< \brief (HSMC) HSMC Cycle Register (CS_number = 2) */
  #define REG_HSMC_TIMINGS2                    (0xF8014734U) /**< \brief (HSMC) HSMC Timings Register (CS_number = 2) */
  #define REG_HSMC_MODE2                       (0xF8014738U) /**< \brief (HSMC) HSMC Mode Register (CS_number = 2) */
  #define REG_HSMC_SETUP3                      (0xF801473CU) /**< \brief (HSMC) HSMC Setup Register (CS_number = 3) */
  #define REG_HSMC_PULSE3                      (0xF8014740U) /**< \brief (HSMC) HSMC Pulse Register (CS_number = 3) */
  #define REG_HSMC_CYCLE3                      (0xF8014744U) /**< \brief (HSMC) HSMC Cycle Register (CS_number = 3) */
  #define REG_HSMC_TIMINGS3                    (0xF8014748U) /**< \brief (HSMC) HSMC Timings Register (CS_number = 3) */
  #define REG_HSMC_MODE3                       (0xF801474CU) /**< \brief (HSMC) HSMC Mode Register (CS_number = 3) */
  #define REG_HSMC_OCMS                        (0xF80147A0U) /**< \brief (HSMC) HSMC Off Chip Memory Scrambling Register */
  #define REG_HSMC_KEY1                        (0xF80147A4U) /**< \brief (HSMC) HSMC Off Chip Memory Scrambling KEY1 Register */
  #define REG_HSMC_KEY2                        (0xF80147A8U) /**< \brief (HSMC) HSMC Off Chip Memory Scrambling KEY2 Register */
  #define REG_HSMC_WPMR                        (0xF80147E4U) /**< \brief (HSMC) HSMC Write Protection Mode Register */
  #define REG_HSMC_WPSR                        (0xF80147E8U) /**< \brief (HSMC) HSMC Write Protection Status Register */
  #define REG_HSMC_ADDRSIZE                    (0xF80147ECU) /**< \brief (HSMC) HSMC Address Size Register */
  #define REG_HSMC_IPNAME                      (0xF80147F0U) /**< \brief (HSMC) HSMC Name1 Register */
  #define REG_HSMC_FEATURES                    (0xF80147F8U) /**< \brief (HSMC) HSMC Features Register */
  #define REG_HSMC_VERSION                     (0xF80147FCU) /**< \brief (HSMC) HSMC Version Register */
#else
  #define REG_HSMC_CFG        (*(__IO uint32_t*)0xF8014000U) /**< \brief (HSMC) HSMC NFC Configuration Register */
  #define REG_HSMC_CTRL       (*(__O  uint32_t*)0xF8014004U) /**< \brief (HSMC) HSMC NFC Control Register */
  #define REG_HSMC_SR         (*(__I  uint32_t*)0xF8014008U) /**< \brief (HSMC) HSMC NFC Status Register */
  #define REG_HSMC_IER        (*(__O  uint32_t*)0xF801400CU) /**< \brief (HSMC) HSMC NFC Interrupt Enable Register */
  #define REG_HSMC_IDR        (*(__O  uint32_t*)0xF8014010U) /**< \brief (HSMC) HSMC NFC Interrupt Disable Register */
  #define REG_HSMC_IMR        (*(__I  uint32_t*)0xF8014014U) /**< \brief (HSMC) HSMC NFC Interrupt Mask Register */
  #define REG_HSMC_ADDR       (*(__IO uint32_t*)0xF8014018U) /**< \brief (HSMC) HSMC NFC Address Cycle Zero Register */
  #define REG_HSMC_BANK       (*(__IO uint32_t*)0xF801401CU) /**< \brief (HSMC) HSMC Bank Address Register */
  #define REG_HSMC_PMECCFG    (*(__IO uint32_t*)0xF8014070U) /**< \brief (HSMC) PMECC Configuration Register */
  #define REG_HSMC_PMECCSAREA (*(__IO uint32_t*)0xF8014074U) /**< \brief (HSMC) PMECC Spare Area Size Register */
  #define REG_HSMC_PMECCSADDR (*(__IO uint32_t*)0xF8014078U) /**< \brief (HSMC) PMECC Start Address Register */
  #define REG_HSMC_PMECCEADDR (*(__IO uint32_t*)0xF801407CU) /**< \brief (HSMC) PMECC End Address Register */
  #define REG_HSMC_PMECCTRL   (*(__O  uint32_t*)0xF8014084U) /**< \brief (HSMC) PMECC Control Register */
  #define REG_HSMC_PMECCSR    (*(__I  uint32_t*)0xF8014088U) /**< \brief (HSMC) PMECC Status Register */
  #define REG_HSMC_PMECCIER   (*(__O  uint32_t*)0xF801408CU) /**< \brief (HSMC) PMECC Interrupt Enable register */
  #define REG_HSMC_PMECCIDR   (*(__O  uint32_t*)0xF8014090U) /**< \brief (HSMC) PMECC Interrupt Disable Register */
  #define REG_HSMC_PMECCIMR   (*(__I  uint32_t*)0xF8014094U) /**< \brief (HSMC) PMECC Interrupt Mask Register */
  #define REG_HSMC_PMECCISR   (*(__I  uint32_t*)0xF8014098U) /**< \brief (HSMC) PMECC Interrupt Status Register */
  #define REG_HSMC_PMECC0_0   (*(__I  uint32_t*)0xF80140B0U) /**< \brief (HSMC) PMECC Redundancy 0 Register (sec_num = 0) */
  #define REG_HSMC_PMECC1_0   (*(__I  uint32_t*)0xF80140B4U) /**< \brief (HSMC) PMECC Redundancy 1 Register (sec_num = 0) */
  #define REG_HSMC_PMECC2_0   (*(__I  uint32_t*)0xF80140B8U) /**< \brief (HSMC) PMECC Redundancy 2 Register (sec_num = 0) */
  #define REG_HSMC_PMECC3_0   (*(__I  uint32_t*)0xF80140BCU) /**< \brief (HSMC) PMECC Redundancy 3 Register (sec_num = 0) */
  #define REG_HSMC_PMECC4_0   (*(__I  uint32_t*)0xF80140C0U) /**< \brief (HSMC) PMECC Redundancy 4 Register (sec_num = 0) */
  #define REG_HSMC_PMECC5_0   (*(__I  uint32_t*)0xF80140C4U) /**< \brief (HSMC) PMECC Redundancy 5 Register (sec_num = 0) */
  #define REG_HSMC_PMECC6_0   (*(__I  uint32_t*)0xF80140C8U) /**< \brief (HSMC) PMECC Redundancy 6 Register (sec_num = 0) */
  #define REG_HSMC_PMECC7_0   (*(__I  uint32_t*)0xF80140CCU) /**< \brief (HSMC) PMECC Redundancy 7 Register (sec_num = 0) */
  #define REG_HSMC_PMECC8_0   (*(__I  uint32_t*)0xF80140D0U) /**< \brief (HSMC) PMECC Redundancy 8 Register (sec_num = 0) */
  #define REG_HSMC_PMECC9_0   (*(__I  uint32_t*)0xF80140D4U) /**< \brief (HSMC) PMECC Redundancy 9 Register (sec_num = 0) */
  #define REG_HSMC_PMECC10_0  (*(__I  uint32_t*)0xF80140D8U) /**< \brief (HSMC) PMECC Redundancy 10 Register (sec_num = 0) */
  #define REG_HSMC_PMECC0_1   (*(__I  uint32_t*)0xF80140F0U) /**< \brief (HSMC) PMECC Redundancy 0 Register (sec_num = 1) */
  #define REG_HSMC_PMECC1_1   (*(__I  uint32_t*)0xF80140F4U) /**< \brief (HSMC) PMECC Redundancy 1 Register (sec_num = 1) */
  #define REG_HSMC_PMECC2_1   (*(__I  uint32_t*)0xF80140F8U) /**< \brief (HSMC) PMECC Redundancy 2 Register (sec_num = 1) */
  #define REG_HSMC_PMECC3_1   (*(__I  uint32_t*)0xF80140FCU) /**< \brief (HSMC) PMECC Redundancy 3 Register (sec_num = 1) */
  #define REG_HSMC_PMECC4_1   (*(__I  uint32_t*)0xF8014100U) /**< \brief (HSMC) PMECC Redundancy 4 Register (sec_num = 1) */
  #define REG_HSMC_PMECC5_1   (*(__I  uint32_t*)0xF8014104U) /**< \brief (HSMC) PMECC Redundancy 5 Register (sec_num = 1) */
  #define REG_HSMC_PMECC6_1   (*(__I  uint32_t*)0xF8014108U) /**< \brief (HSMC) PMECC Redundancy 6 Register (sec_num = 1) */
  #define REG_HSMC_PMECC7_1   (*(__I  uint32_t*)0xF801410CU) /**< \brief (HSMC) PMECC Redundancy 7 Register (sec_num = 1) */
  #define REG_HSMC_PMECC8_1   (*(__I  uint32_t*)0xF8014110U) /**< \brief (HSMC) PMECC Redundancy 8 Register (sec_num = 1) */
  #define REG_HSMC_PMECC9_1   (*(__I  uint32_t*)0xF8014114U) /**< \brief (HSMC) PMECC Redundancy 9 Register (sec_num = 1) */
  #define REG_HSMC_PMECC10_1  (*(__I  uint32_t*)0xF8014118U) /**< \brief (HSMC) PMECC Redundancy 10 Register (sec_num = 1) */
  #define REG_HSMC_PMECC0_2   (*(__I  uint32_t*)0xF8014130U) /**< \brief (HSMC) PMECC Redundancy 0 Register (sec_num = 2) */
  #define REG_HSMC_PMECC1_2   (*(__I  uint32_t*)0xF8014134U) /**< \brief (HSMC) PMECC Redundancy 1 Register (sec_num = 2) */
  #define REG_HSMC_PMECC2_2   (*(__I  uint32_t*)0xF8014138U) /**< \brief (HSMC) PMECC Redundancy 2 Register (sec_num = 2) */
  #define REG_HSMC_PMECC3_2   (*(__I  uint32_t*)0xF801413CU) /**< \brief (HSMC) PMECC Redundancy 3 Register (sec_num = 2) */
  #define REG_HSMC_PMECC4_2   (*(__I  uint32_t*)0xF8014140U) /**< \brief (HSMC) PMECC Redundancy 4 Register (sec_num = 2) */
  #define REG_HSMC_PMECC5_2   (*(__I  uint32_t*)0xF8014144U) /**< \brief (HSMC) PMECC Redundancy 5 Register (sec_num = 2) */
  #define REG_HSMC_PMECC6_2   (*(__I  uint32_t*)0xF8014148U) /**< \brief (HSMC) PMECC Redundancy 6 Register (sec_num = 2) */
  #define REG_HSMC_PMECC7_2   (*(__I  uint32_t*)0xF801414CU) /**< \brief (HSMC) PMECC Redundancy 7 Register (sec_num = 2) */
  #define REG_HSMC_PMECC8_2   (*(__I  uint32_t*)0xF8014150U) /**< \brief (HSMC) PMECC Redundancy 8 Register (sec_num = 2) */
  #define REG_HSMC_PMECC9_2   (*(__I  uint32_t*)0xF8014154U) /**< \brief (HSMC) PMECC Redundancy 9 Register (sec_num = 2) */
  #define REG_HSMC_PMECC10_2  (*(__I  uint32_t*)0xF8014158U) /**< \brief (HSMC) PMECC Redundancy 10 Register (sec_num = 2) */
  #define REG_HSMC_PMECC0_3   (*(__I  uint32_t*)0xF8014170U) /**< \brief (HSMC) PMECC Redundancy 0 Register (sec_num = 3) */
  #define REG_HSMC_PMECC1_3   (*(__I  uint32_t*)0xF8014174U) /**< \brief (HSMC) PMECC Redundancy 1 Register (sec_num = 3) */
  #define REG_HSMC_PMECC2_3   (*(__I  uint32_t*)0xF8014178U) /**< \brief (HSMC) PMECC Redundancy 2 Register (sec_num = 3) */
  #define REG_HSMC_PMECC3_3   (*(__I  uint32_t*)0xF801417CU) /**< \brief (HSMC) PMECC Redundancy 3 Register (sec_num = 3) */
  #define REG_HSMC_PMECC4_3   (*(__I  uint32_t*)0xF8014180U) /**< \brief (HSMC) PMECC Redundancy 4 Register (sec_num = 3) */
  #define REG_HSMC_PMECC5_3   (*(__I  uint32_t*)0xF8014184U) /**< \brief (HSMC) PMECC Redundancy 5 Register (sec_num = 3) */
  #define REG_HSMC_PMECC6_3   (*(__I  uint32_t*)0xF8014188U) /**< \brief (HSMC) PMECC Redundancy 6 Register (sec_num = 3) */
  #define REG_HSMC_PMECC7_3   (*(__I  uint32_t*)0xF801418CU) /**< \brief (HSMC) PMECC Redundancy 7 Register (sec_num = 3) */
  #define REG_HSMC_PMECC8_3   (*(__I  uint32_t*)0xF8014190U) /**< \brief (HSMC) PMECC Redundancy 8 Register (sec_num = 3) */
  #define REG_HSMC_PMECC9_3   (*(__I  uint32_t*)0xF8014194U) /**< \brief (HSMC) PMECC Redundancy 9 Register (sec_num = 3) */
  #define REG_HSMC_PMECC10_3  (*(__I  uint32_t*)0xF8014198U) /**< \brief (HSMC) PMECC Redundancy 10 Register (sec_num = 3) */
  #define REG_HSMC_PMECC0_4   (*(__I  uint32_t*)0xF80141B0U) /**< \brief (HSMC) PMECC Redundancy 0 Register (sec_num = 4) */
  #define REG_HSMC_PMECC1_4   (*(__I  uint32_t*)0xF80141B4U) /**< \brief (HSMC) PMECC Redundancy 1 Register (sec_num = 4) */
  #define REG_HSMC_PMECC2_4   (*(__I  uint32_t*)0xF80141B8U) /**< \brief (HSMC) PMECC Redundancy 2 Register (sec_num = 4) */
  #define REG_HSMC_PMECC3_4   (*(__I  uint32_t*)0xF80141BCU) /**< \brief (HSMC) PMECC Redundancy 3 Register (sec_num = 4) */
  #define REG_HSMC_PMECC4_4   (*(__I  uint32_t*)0xF80141C0U) /**< \brief (HSMC) PMECC Redundancy 4 Register (sec_num = 4) */
  #define REG_HSMC_PMECC5_4   (*(__I  uint32_t*)0xF80141C4U) /**< \brief (HSMC) PMECC Redundancy 5 Register (sec_num = 4) */
  #define REG_HSMC_PMECC6_4   (*(__I  uint32_t*)0xF80141C8U) /**< \brief (HSMC) PMECC Redundancy 6 Register (sec_num = 4) */
  #define REG_HSMC_PMECC7_4   (*(__I  uint32_t*)0xF80141CCU) /**< \brief (HSMC) PMECC Redundancy 7 Register (sec_num = 4) */
  #define REG_HSMC_PMECC8_4   (*(__I  uint32_t*)0xF80141D0U) /**< \brief (HSMC) PMECC Redundancy 8 Register (sec_num = 4) */
  #define REG_HSMC_PMECC9_4   (*(__I  uint32_t*)0xF80141D4U) /**< \brief (HSMC) PMECC Redundancy 9 Register (sec_num = 4) */
  #define REG_HSMC_PMECC10_4  (*(__I  uint32_t*)0xF80141D8U) /**< \brief (HSMC) PMECC Redundancy 10 Register (sec_num = 4) */
  #define REG_HSMC_PMECC0_5   (*(__I  uint32_t*)0xF80141F0U) /**< \brief (HSMC) PMECC Redundancy 0 Register (sec_num = 5) */
  #define REG_HSMC_PMECC1_5   (*(__I  uint32_t*)0xF80141F4U) /**< \brief (HSMC) PMECC Redundancy 1 Register (sec_num = 5) */
  #define REG_HSMC_PMECC2_5   (*(__I  uint32_t*)0xF80141F8U) /**< \brief (HSMC) PMECC Redundancy 2 Register (sec_num = 5) */
  #define REG_HSMC_PMECC3_5   (*(__I  uint32_t*)0xF80141FCU) /**< \brief (HSMC) PMECC Redundancy 3 Register (sec_num = 5) */
  #define REG_HSMC_PMECC4_5   (*(__I  uint32_t*)0xF8014200U) /**< \brief (HSMC) PMECC Redundancy 4 Register (sec_num = 5) */
  #define REG_HSMC_PMECC5_5   (*(__I  uint32_t*)0xF8014204U) /**< \brief (HSMC) PMECC Redundancy 5 Register (sec_num = 5) */
  #define REG_HSMC_PMECC6_5   (*(__I  uint32_t*)0xF8014208U) /**< \brief (HSMC) PMECC Redundancy 6 Register (sec_num = 5) */
  #define REG_HSMC_PMECC7_5   (*(__I  uint32_t*)0xF801420CU) /**< \brief (HSMC) PMECC Redundancy 7 Register (sec_num = 5) */
  #define REG_HSMC_PMECC8_5   (*(__I  uint32_t*)0xF8014210U) /**< \brief (HSMC) PMECC Redundancy 8 Register (sec_num = 5) */
  #define REG_HSMC_PMECC9_5   (*(__I  uint32_t*)0xF8014214U) /**< \brief (HSMC) PMECC Redundancy 9 Register (sec_num = 5) */
  #define REG_HSMC_PMECC10_5  (*(__I  uint32_t*)0xF8014218U) /**< \brief (HSMC) PMECC Redundancy 10 Register (sec_num = 5) */
  #define REG_HSMC_PMECC0_6   (*(__I  uint32_t*)0xF8014230U) /**< \brief (HSMC) PMECC Redundancy 0 Register (sec_num = 6) */
  #define REG_HSMC_PMECC1_6   (*(__I  uint32_t*)0xF8014234U) /**< \brief (HSMC) PMECC Redundancy 1 Register (sec_num = 6) */
  #define REG_HSMC_PMECC2_6   (*(__I  uint32_t*)0xF8014238U) /**< \brief (HSMC) PMECC Redundancy 2 Register (sec_num = 6) */
  #define REG_HSMC_PMECC3_6   (*(__I  uint32_t*)0xF801423CU) /**< \brief (HSMC) PMECC Redundancy 3 Register (sec_num = 6) */
  #define REG_HSMC_PMECC4_6   (*(__I  uint32_t*)0xF8014240U) /**< \brief (HSMC) PMECC Redundancy 4 Register (sec_num = 6) */
  #define REG_HSMC_PMECC5_6   (*(__I  uint32_t*)0xF8014244U) /**< \brief (HSMC) PMECC Redundancy 5 Register (sec_num = 6) */
  #define REG_HSMC_PMECC6_6   (*(__I  uint32_t*)0xF8014248U) /**< \brief (HSMC) PMECC Redundancy 6 Register (sec_num = 6) */
  #define REG_HSMC_PMECC7_6   (*(__I  uint32_t*)0xF801424CU) /**< \brief (HSMC) PMECC Redundancy 7 Register (sec_num = 6) */
  #define REG_HSMC_PMECC8_6   (*(__I  uint32_t*)0xF8014250U) /**< \brief (HSMC) PMECC Redundancy 8 Register (sec_num = 6) */
  #define REG_HSMC_PMECC9_6   (*(__I  uint32_t*)0xF8014254U) /**< \brief (HSMC) PMECC Redundancy 9 Register (sec_num = 6) */
  #define REG_HSMC_PMECC10_6  (*(__I  uint32_t*)0xF8014258U) /**< \brief (HSMC) PMECC Redundancy 10 Register (sec_num = 6) */
  #define REG_HSMC_PMECC0_7   (*(__I  uint32_t*)0xF8014270U) /**< \brief (HSMC) PMECC Redundancy 0 Register (sec_num = 7) */
  #define REG_HSMC_PMECC1_7   (*(__I  uint32_t*)0xF8014274U) /**< \brief (HSMC) PMECC Redundancy 1 Register (sec_num = 7) */
  #define REG_HSMC_PMECC2_7   (*(__I  uint32_t*)0xF8014278U) /**< \brief (HSMC) PMECC Redundancy 2 Register (sec_num = 7) */
  #define REG_HSMC_PMECC3_7   (*(__I  uint32_t*)0xF801427CU) /**< \brief (HSMC) PMECC Redundancy 3 Register (sec_num = 7) */
  #define REG_HSMC_PMECC4_7   (*(__I  uint32_t*)0xF8014280U) /**< \brief (HSMC) PMECC Redundancy 4 Register (sec_num = 7) */
  #define REG_HSMC_PMECC5_7   (*(__I  uint32_t*)0xF8014284U) /**< \brief (HSMC) PMECC Redundancy 5 Register (sec_num = 7) */
  #define REG_HSMC_PMECC6_7   (*(__I  uint32_t*)0xF8014288U) /**< \brief (HSMC) PMECC Redundancy 6 Register (sec_num = 7) */
  #define REG_HSMC_PMECC7_7   (*(__I  uint32_t*)0xF801428CU) /**< \brief (HSMC) PMECC Redundancy 7 Register (sec_num = 7) */
  #define REG_HSMC_PMECC8_7   (*(__I  uint32_t*)0xF8014290U) /**< \brief (HSMC) PMECC Redundancy 8 Register (sec_num = 7) */
  #define REG_HSMC_PMECC9_7   (*(__I  uint32_t*)0xF8014294U) /**< \brief (HSMC) PMECC Redundancy 9 Register (sec_num = 7) */
  #define REG_HSMC_PMECC10_7  (*(__I  uint32_t*)0xF8014298U) /**< \brief (HSMC) PMECC Redundancy 10 Register (sec_num = 7) */
  #define REG_HSMC_REM0_0     (*(__I  uint32_t*)0xF80142B0U) /**< \brief (HSMC) PMECC Remainder 0 Register (sec_num = 0) */
  #define REG_HSMC_REM1_0     (*(__I  uint32_t*)0xF80142B4U) /**< \brief (HSMC) PMECC Remainder 1 Register (sec_num = 0) */
  #define REG_HSMC_REM2_0     (*(__I  uint32_t*)0xF80142B8U) /**< \brief (HSMC) PMECC Remainder 2 Register (sec_num = 0) */
  #define REG_HSMC_REM3_0     (*(__I  uint32_t*)0xF80142BCU) /**< \brief (HSMC) PMECC Remainder 3 Register (sec_num = 0) */
  #define REG_HSMC_REM4_0     (*(__I  uint32_t*)0xF80142C0U) /**< \brief (HSMC) PMECC Remainder 4 Register (sec_num = 0) */
  #define REG_HSMC_REM5_0     (*(__I  uint32_t*)0xF80142C4U) /**< \brief (HSMC) PMECC Remainder 5 Register (sec_num = 0) */
  #define REG_HSMC_REM6_0     (*(__I  uint32_t*)0xF80142C8U) /**< \brief (HSMC) PMECC Remainder 6 Register (sec_num = 0) */
  #define REG_HSMC_REM7_0     (*(__I  uint32_t*)0xF80142CCU) /**< \brief (HSMC) PMECC Remainder 7 Register (sec_num = 0) */
  #define REG_HSMC_REM8_0     (*(__I  uint32_t*)0xF80142D0U) /**< \brief (HSMC) PMECC Remainder 8 Register (sec_num = 0) */
  #define REG_HSMC_REM9_0     (*(__I  uint32_t*)0xF80142D4U) /**< \brief (HSMC) PMECC Remainder 9 Register (sec_num = 0) */
  #define REG_HSMC_REM10_0    (*(__I  uint32_t*)0xF80142D8U) /**< \brief (HSMC) PMECC Remainder 10 Register (sec_num = 0) */
  #define REG_HSMC_REM11_0    (*(__I  uint32_t*)0xF80142DCU) /**< \brief (HSMC) PMECC Remainder 11 Register (sec_num = 0) */
  #define REG_HSMC_REM0_1     (*(__I  uint32_t*)0xF80142F0U) /**< \brief (HSMC) PMECC Remainder 0 Register (sec_num = 1) */
  #define REG_HSMC_REM1_1     (*(__I  uint32_t*)0xF80142F4U) /**< \brief (HSMC) PMECC Remainder 1 Register (sec_num = 1) */
  #define REG_HSMC_REM2_1     (*(__I  uint32_t*)0xF80142F8U) /**< \brief (HSMC) PMECC Remainder 2 Register (sec_num = 1) */
  #define REG_HSMC_REM3_1     (*(__I  uint32_t*)0xF80142FCU) /**< \brief (HSMC) PMECC Remainder 3 Register (sec_num = 1) */
  #define REG_HSMC_REM4_1     (*(__I  uint32_t*)0xF8014300U) /**< \brief (HSMC) PMECC Remainder 4 Register (sec_num = 1) */
  #define REG_HSMC_REM5_1     (*(__I  uint32_t*)0xF8014304U) /**< \brief (HSMC) PMECC Remainder 5 Register (sec_num = 1) */
  #define REG_HSMC_REM6_1     (*(__I  uint32_t*)0xF8014308U) /**< \brief (HSMC) PMECC Remainder 6 Register (sec_num = 1) */
  #define REG_HSMC_REM7_1     (*(__I  uint32_t*)0xF801430CU) /**< \brief (HSMC) PMECC Remainder 7 Register (sec_num = 1) */
  #define REG_HSMC_REM8_1     (*(__I  uint32_t*)0xF8014310U) /**< \brief (HSMC) PMECC Remainder 8 Register (sec_num = 1) */
  #define REG_HSMC_REM9_1     (*(__I  uint32_t*)0xF8014314U) /**< \brief (HSMC) PMECC Remainder 9 Register (sec_num = 1) */
  #define REG_HSMC_REM10_1    (*(__I  uint32_t*)0xF8014318U) /**< \brief (HSMC) PMECC Remainder 10 Register (sec_num = 1) */
  #define REG_HSMC_REM11_1    (*(__I  uint32_t*)0xF801431CU) /**< \brief (HSMC) PMECC Remainder 11 Register (sec_num = 1) */
  #define REG_HSMC_REM0_2     (*(__I  uint32_t*)0xF8014330U) /**< \brief (HSMC) PMECC Remainder 0 Register (sec_num = 2) */
  #define REG_HSMC_REM1_2     (*(__I  uint32_t*)0xF8014334U) /**< \brief (HSMC) PMECC Remainder 1 Register (sec_num = 2) */
  #define REG_HSMC_REM2_2     (*(__I  uint32_t*)0xF8014338U) /**< \brief (HSMC) PMECC Remainder 2 Register (sec_num = 2) */
  #define REG_HSMC_REM3_2     (*(__I  uint32_t*)0xF801433CU) /**< \brief (HSMC) PMECC Remainder 3 Register (sec_num = 2) */
  #define REG_HSMC_REM4_2     (*(__I  uint32_t*)0xF8014340U) /**< \brief (HSMC) PMECC Remainder 4 Register (sec_num = 2) */
  #define REG_HSMC_REM5_2     (*(__I  uint32_t*)0xF8014344U) /**< \brief (HSMC) PMECC Remainder 5 Register (sec_num = 2) */
  #define REG_HSMC_REM6_2     (*(__I  uint32_t*)0xF8014348U) /**< \brief (HSMC) PMECC Remainder 6 Register (sec_num = 2) */
  #define REG_HSMC_REM7_2     (*(__I  uint32_t*)0xF801434CU) /**< \brief (HSMC) PMECC Remainder 7 Register (sec_num = 2) */
  #define REG_HSMC_REM8_2     (*(__I  uint32_t*)0xF8014350U) /**< \brief (HSMC) PMECC Remainder 8 Register (sec_num = 2) */
  #define REG_HSMC_REM9_2     (*(__I  uint32_t*)0xF8014354U) /**< \brief (HSMC) PMECC Remainder 9 Register (sec_num = 2) */
  #define REG_HSMC_REM10_2    (*(__I  uint32_t*)0xF8014358U) /**< \brief (HSMC) PMECC Remainder 10 Register (sec_num = 2) */
  #define REG_HSMC_REM11_2    (*(__I  uint32_t*)0xF801435CU) /**< \brief (HSMC) PMECC Remainder 11 Register (sec_num = 2) */
  #define REG_HSMC_REM0_3     (*(__I  uint32_t*)0xF8014370U) /**< \brief (HSMC) PMECC Remainder 0 Register (sec_num = 3) */
  #define REG_HSMC_REM1_3     (*(__I  uint32_t*)0xF8014374U) /**< \brief (HSMC) PMECC Remainder 1 Register (sec_num = 3) */
  #define REG_HSMC_REM2_3     (*(__I  uint32_t*)0xF8014378U) /**< \brief (HSMC) PMECC Remainder 2 Register (sec_num = 3) */
  #define REG_HSMC_REM3_3     (*(__I  uint32_t*)0xF801437CU) /**< \brief (HSMC) PMECC Remainder 3 Register (sec_num = 3) */
  #define REG_HSMC_REM4_3     (*(__I  uint32_t*)0xF8014380U) /**< \brief (HSMC) PMECC Remainder 4 Register (sec_num = 3) */
  #define REG_HSMC_REM5_3     (*(__I  uint32_t*)0xF8014384U) /**< \brief (HSMC) PMECC Remainder 5 Register (sec_num = 3) */
  #define REG_HSMC_REM6_3     (*(__I  uint32_t*)0xF8014388U) /**< \brief (HSMC) PMECC Remainder 6 Register (sec_num = 3) */
  #define REG_HSMC_REM7_3     (*(__I  uint32_t*)0xF801438CU) /**< \brief (HSMC) PMECC Remainder 7 Register (sec_num = 3) */
  #define REG_HSMC_REM8_3     (*(__I  uint32_t*)0xF8014390U) /**< \brief (HSMC) PMECC Remainder 8 Register (sec_num = 3) */
  #define REG_HSMC_REM9_3     (*(__I  uint32_t*)0xF8014394U) /**< \brief (HSMC) PMECC Remainder 9 Register (sec_num = 3) */
  #define REG_HSMC_REM10_3    (*(__I  uint32_t*)0xF8014398U) /**< \brief (HSMC) PMECC Remainder 10 Register (sec_num = 3) */
  #define REG_HSMC_REM11_3    (*(__I  uint32_t*)0xF801439CU) /**< \brief (HSMC) PMECC Remainder 11 Register (sec_num = 3) */
  #define REG_HSMC_REM0_4     (*(__I  uint32_t*)0xF80143B0U) /**< \brief (HSMC) PMECC Remainder 0 Register (sec_num = 4) */
  #define REG_HSMC_REM1_4     (*(__I  uint32_t*)0xF80143B4U) /**< \brief (HSMC) PMECC Remainder 1 Register (sec_num = 4) */
  #define REG_HSMC_REM2_4     (*(__I  uint32_t*)0xF80143B8U) /**< \brief (HSMC) PMECC Remainder 2 Register (sec_num = 4) */
  #define REG_HSMC_REM3_4     (*(__I  uint32_t*)0xF80143BCU) /**< \brief (HSMC) PMECC Remainder 3 Register (sec_num = 4) */
  #define REG_HSMC_REM4_4     (*(__I  uint32_t*)0xF80143C0U) /**< \brief (HSMC) PMECC Remainder 4 Register (sec_num = 4) */
  #define REG_HSMC_REM5_4     (*(__I  uint32_t*)0xF80143C4U) /**< \brief (HSMC) PMECC Remainder 5 Register (sec_num = 4) */
  #define REG_HSMC_REM6_4     (*(__I  uint32_t*)0xF80143C8U) /**< \brief (HSMC) PMECC Remainder 6 Register (sec_num = 4) */
  #define REG_HSMC_REM7_4     (*(__I  uint32_t*)0xF80143CCU) /**< \brief (HSMC) PMECC Remainder 7 Register (sec_num = 4) */
  #define REG_HSMC_REM8_4     (*(__I  uint32_t*)0xF80143D0U) /**< \brief (HSMC) PMECC Remainder 8 Register (sec_num = 4) */
  #define REG_HSMC_REM9_4     (*(__I  uint32_t*)0xF80143D4U) /**< \brief (HSMC) PMECC Remainder 9 Register (sec_num = 4) */
  #define REG_HSMC_REM10_4    (*(__I  uint32_t*)0xF80143D8U) /**< \brief (HSMC) PMECC Remainder 10 Register (sec_num = 4) */
  #define REG_HSMC_REM11_4    (*(__I  uint32_t*)0xF80143DCU) /**< \brief (HSMC) PMECC Remainder 11 Register (sec_num = 4) */
  #define REG_HSMC_REM0_5     (*(__I  uint32_t*)0xF80143F0U) /**< \brief (HSMC) PMECC Remainder 0 Register (sec_num = 5) */
  #define REG_HSMC_REM1_5     (*(__I  uint32_t*)0xF80143F4U) /**< \brief (HSMC) PMECC Remainder 1 Register (sec_num = 5) */
  #define REG_HSMC_REM2_5     (*(__I  uint32_t*)0xF80143F8U) /**< \brief (HSMC) PMECC Remainder 2 Register (sec_num = 5) */
  #define REG_HSMC_REM3_5     (*(__I  uint32_t*)0xF80143FCU) /**< \brief (HSMC) PMECC Remainder 3 Register (sec_num = 5) */
  #define REG_HSMC_REM4_5     (*(__I  uint32_t*)0xF8014400U) /**< \brief (HSMC) PMECC Remainder 4 Register (sec_num = 5) */
  #define REG_HSMC_REM5_5     (*(__I  uint32_t*)0xF8014404U) /**< \brief (HSMC) PMECC Remainder 5 Register (sec_num = 5) */
  #define REG_HSMC_REM6_5     (*(__I  uint32_t*)0xF8014408U) /**< \brief (HSMC) PMECC Remainder 6 Register (sec_num = 5) */
  #define REG_HSMC_REM7_5     (*(__I  uint32_t*)0xF801440CU) /**< \brief (HSMC) PMECC Remainder 7 Register (sec_num = 5) */
  #define REG_HSMC_REM8_5     (*(__I  uint32_t*)0xF8014410U) /**< \brief (HSMC) PMECC Remainder 8 Register (sec_num = 5) */
  #define REG_HSMC_REM9_5     (*(__I  uint32_t*)0xF8014414U) /**< \brief (HSMC) PMECC Remainder 9 Register (sec_num = 5) */
  #define REG_HSMC_REM10_5    (*(__I  uint32_t*)0xF8014418U) /**< \brief (HSMC) PMECC Remainder 10 Register (sec_num = 5) */
  #define REG_HSMC_REM11_5    (*(__I  uint32_t*)0xF801441CU) /**< \brief (HSMC) PMECC Remainder 11 Register (sec_num = 5) */
  #define REG_HSMC_REM0_6     (*(__I  uint32_t*)0xF8014430U) /**< \brief (HSMC) PMECC Remainder 0 Register (sec_num = 6) */
  #define REG_HSMC_REM1_6     (*(__I  uint32_t*)0xF8014434U) /**< \brief (HSMC) PMECC Remainder 1 Register (sec_num = 6) */
  #define REG_HSMC_REM2_6     (*(__I  uint32_t*)0xF8014438U) /**< \brief (HSMC) PMECC Remainder 2 Register (sec_num = 6) */
  #define REG_HSMC_REM3_6     (*(__I  uint32_t*)0xF801443CU) /**< \brief (HSMC) PMECC Remainder 3 Register (sec_num = 6) */
  #define REG_HSMC_REM4_6     (*(__I  uint32_t*)0xF8014440U) /**< \brief (HSMC) PMECC Remainder 4 Register (sec_num = 6) */
  #define REG_HSMC_REM5_6     (*(__I  uint32_t*)0xF8014444U) /**< \brief (HSMC) PMECC Remainder 5 Register (sec_num = 6) */
  #define REG_HSMC_REM6_6     (*(__I  uint32_t*)0xF8014448U) /**< \brief (HSMC) PMECC Remainder 6 Register (sec_num = 6) */
  #define REG_HSMC_REM7_6     (*(__I  uint32_t*)0xF801444CU) /**< \brief (HSMC) PMECC Remainder 7 Register (sec_num = 6) */
  #define REG_HSMC_REM8_6     (*(__I  uint32_t*)0xF8014450U) /**< \brief (HSMC) PMECC Remainder 8 Register (sec_num = 6) */
  #define REG_HSMC_REM9_6     (*(__I  uint32_t*)0xF8014454U) /**< \brief (HSMC) PMECC Remainder 9 Register (sec_num = 6) */
  #define REG_HSMC_REM10_6    (*(__I  uint32_t*)0xF8014458U) /**< \brief (HSMC) PMECC Remainder 10 Register (sec_num = 6) */
  #define REG_HSMC_REM11_6    (*(__I  uint32_t*)0xF801445CU) /**< \brief (HSMC) PMECC Remainder 11 Register (sec_num = 6) */
  #define REG_HSMC_REM0_7     (*(__I  uint32_t*)0xF8014470U) /**< \brief (HSMC) PMECC Remainder 0 Register (sec_num = 7) */
  #define REG_HSMC_REM1_7     (*(__I  uint32_t*)0xF8014474U) /**< \brief (HSMC) PMECC Remainder 1 Register (sec_num = 7) */
  #define REG_HSMC_REM2_7     (*(__I  uint32_t*)0xF8014478U) /**< \brief (HSMC) PMECC Remainder 2 Register (sec_num = 7) */
  #define REG_HSMC_REM3_7     (*(__I  uint32_t*)0xF801447CU) /**< \brief (HSMC) PMECC Remainder 3 Register (sec_num = 7) */
  #define REG_HSMC_REM4_7     (*(__I  uint32_t*)0xF8014480U) /**< \brief (HSMC) PMECC Remainder 4 Register (sec_num = 7) */
  #define REG_HSMC_REM5_7     (*(__I  uint32_t*)0xF8014484U) /**< \brief (HSMC) PMECC Remainder 5 Register (sec_num = 7) */
  #define REG_HSMC_REM6_7     (*(__I  uint32_t*)0xF8014488U) /**< \brief (HSMC) PMECC Remainder 6 Register (sec_num = 7) */
  #define REG_HSMC_REM7_7     (*(__I  uint32_t*)0xF801448CU) /**< \brief (HSMC) PMECC Remainder 7 Register (sec_num = 7) */
  #define REG_HSMC_REM8_7     (*(__I  uint32_t*)0xF8014490U) /**< \brief (HSMC) PMECC Remainder 8 Register (sec_num = 7) */
  #define REG_HSMC_REM9_7     (*(__I  uint32_t*)0xF8014494U) /**< \brief (HSMC) PMECC Remainder 9 Register (sec_num = 7) */
  #define REG_HSMC_REM10_7    (*(__I  uint32_t*)0xF8014498U) /**< \brief (HSMC) PMECC Remainder 10 Register (sec_num = 7) */
  #define REG_HSMC_REM11_7    (*(__I  uint32_t*)0xF801449CU) /**< \brief (HSMC) PMECC Remainder 11 Register (sec_num = 7) */
  #define REG_HSMC_ELCFG      (*(__IO uint32_t*)0xF8014500U) /**< \brief (HSMC) PMECC Error Location Configuration Register */
  #define REG_HSMC_ELPRIM     (*(__I  uint32_t*)0xF8014504U) /**< \brief (HSMC) PMECC Error Location Primitive Register */
  #define REG_HSMC_ELEN       (*(__O  uint32_t*)0xF8014508U) /**< \brief (HSMC) PMECC Error Location Enable Register */
  #define REG_HSMC_ELDIS      (*(__O  uint32_t*)0xF801450CU) /**< \brief (HSMC) PMECC Error Location Disable Register */
  #define REG_HSMC_ELSR       (*(__I  uint32_t*)0xF8014510U) /**< \brief (HSMC) PMECC Error Location Status Register */
  #define REG_HSMC_ELIER      (*(__O  uint32_t*)0xF8014514U) /**< \brief (HSMC) PMECC Error Location Interrupt Enable register */
  #define REG_HSMC_ELIDR      (*(__O  uint32_t*)0xF8014518U) /**< \brief (HSMC) PMECC Error Location Interrupt Disable Register */
  #define REG_HSMC_ELIMR      (*(__I  uint32_t*)0xF801451CU) /**< \brief (HSMC) PMECC Error Location Interrupt Mask Register */
  #define REG_HSMC_ELISR      (*(__I  uint32_t*)0xF8014520U) /**< \brief (HSMC) PMECC Error Location Interrupt Status Register */
  #define REG_HSMC_SIGMA0     (*(__IO uint32_t*)0xF8014528U) /**< \brief (HSMC) PMECC Error Location SIGMA 0 Register */
  #define REG_HSMC_SIGMA1     (*(__IO uint32_t*)0xF801452CU) /**< \brief (HSMC) PMECC Error Location SIGMA 1 Register */
  #define REG_HSMC_SIGMA2     (*(__IO uint32_t*)0xF8014530U) /**< \brief (HSMC) PMECC Error Location SIGMA 2 Register */
  #define REG_HSMC_SIGMA3     (*(__IO uint32_t*)0xF8014534U) /**< \brief (HSMC) PMECC Error Location SIGMA 3 Register */
  #define REG_HSMC_SIGMA4     (*(__IO uint32_t*)0xF8014538U) /**< \brief (HSMC) PMECC Error Location SIGMA 4 Register */
  #define REG_HSMC_SIGMA5     (*(__IO uint32_t*)0xF801453CU) /**< \brief (HSMC) PMECC Error Location SIGMA 5 Register */
  #define REG_HSMC_SIGMA6     (*(__IO uint32_t*)0xF8014540U) /**< \brief (HSMC) PMECC Error Location SIGMA 6 Register */
  #define REG_HSMC_SIGMA7     (*(__IO uint32_t*)0xF8014544U) /**< \brief (HSMC) PMECC Error Location SIGMA 7 Register */
  #define REG_HSMC_SIGMA8     (*(__IO uint32_t*)0xF8014548U) /**< \brief (HSMC) PMECC Error Location SIGMA 8 Register */
  #define REG_HSMC_SIGMA9     (*(__IO uint32_t*)0xF801454CU) /**< \brief (HSMC) PMECC Error Location SIGMA 9 Register */
  #define REG_HSMC_SIGMA10    (*(__IO uint32_t*)0xF8014550U) /**< \brief (HSMC) PMECC Error Location SIGMA 10 Register */
  #define REG_HSMC_SIGMA11    (*(__IO uint32_t*)0xF8014554U) /**< \brief (HSMC) PMECC Error Location SIGMA 11 Register */
  #define REG_HSMC_SIGMA12    (*(__IO uint32_t*)0xF8014558U) /**< \brief (HSMC) PMECC Error Location SIGMA 12 Register */
  #define REG_HSMC_SIGMA13    (*(__IO uint32_t*)0xF801455CU) /**< \brief (HSMC) PMECC Error Location SIGMA 13 Register */
  #define REG_HSMC_SIGMA14    (*(__IO uint32_t*)0xF8014560U) /**< \brief (HSMC) PMECC Error Location SIGMA 14 Register */
  #define REG_HSMC_SIGMA15    (*(__IO uint32_t*)0xF8014564U) /**< \brief (HSMC) PMECC Error Location SIGMA 15 Register */
  #define REG_HSMC_SIGMA16    (*(__IO uint32_t*)0xF8014568U) /**< \brief (HSMC) PMECC Error Location SIGMA 16 Register */
  #define REG_HSMC_SIGMA17    (*(__IO uint32_t*)0xF801456CU) /**< \brief (HSMC) PMECC Error Location SIGMA 17 Register */
  #define REG_HSMC_SIGMA18    (*(__IO uint32_t*)0xF8014570U) /**< \brief (HSMC) PMECC Error Location SIGMA 18 Register */
  #define REG_HSMC_SIGMA19    (*(__IO uint32_t*)0xF8014574U) /**< \brief (HSMC) PMECC Error Location SIGMA 19 Register */
  #define REG_HSMC_SIGMA20    (*(__IO uint32_t*)0xF8014578U) /**< \brief (HSMC) PMECC Error Location SIGMA 20 Register */
  #define REG_HSMC_SIGMA21    (*(__IO uint32_t*)0xF801457CU) /**< \brief (HSMC) PMECC Error Location SIGMA 21 Register */
  #define REG_HSMC_SIGMA22    (*(__IO uint32_t*)0xF8014580U) /**< \brief (HSMC) PMECC Error Location SIGMA 22 Register */
  #define REG_HSMC_SIGMA23    (*(__IO uint32_t*)0xF8014584U) /**< \brief (HSMC) PMECC Error Location SIGMA 23 Register */
  #define REG_HSMC_SIGMA24    (*(__IO uint32_t*)0xF8014588U) /**< \brief (HSMC) PMECC Error Location SIGMA 24 Register */
  #define REG_HSMC_SIGMA25    (*(__IO uint32_t*)0xF801458CU) /**< \brief (HSMC) PMECC Error Location SIGMA 25 Register */
  #define REG_HSMC_SIGMA26    (*(__IO uint32_t*)0xF8014590U) /**< \brief (HSMC) PMECC Error Location SIGMA 26 Register */
  #define REG_HSMC_SIGMA27    (*(__IO uint32_t*)0xF8014594U) /**< \brief (HSMC) PMECC Error Location SIGMA 27 Register */
  #define REG_HSMC_SIGMA28    (*(__IO uint32_t*)0xF8014598U) /**< \brief (HSMC) PMECC Error Location SIGMA 28 Register */
  #define REG_HSMC_SIGMA29    (*(__IO uint32_t*)0xF801459CU) /**< \brief (HSMC) PMECC Error Location SIGMA 29 Register */
  #define REG_HSMC_SIGMA30    (*(__IO uint32_t*)0xF80145A0U) /**< \brief (HSMC) PMECC Error Location SIGMA 30 Register */
  #define REG_HSMC_SIGMA31    (*(__IO uint32_t*)0xF80145A4U) /**< \brief (HSMC) PMECC Error Location SIGMA 31 Register */
  #define REG_HSMC_SIGMA32    (*(__IO uint32_t*)0xF80145A8U) /**< \brief (HSMC) PMECC Error Location SIGMA 32 Register */
  #define REG_HSMC_ERRLOC     (*(__I  uint32_t*)0xF80145ACU) /**< \brief (HSMC) PMECC Error Location 0 Register */
  #define REG_HSMC_SETUP0     (*(__IO uint32_t*)0xF8014700U) /**< \brief (HSMC) HSMC Setup Register (CS_number = 0) */
  #define REG_HSMC_PULSE0     (*(__IO uint32_t*)0xF8014704U) /**< \brief (HSMC) HSMC Pulse Register (CS_number = 0) */
  #define REG_HSMC_CYCLE0     (*(__IO uint32_t*)0xF8014708U) /**< \brief (HSMC) HSMC Cycle Register (CS_number = 0) */
  #define REG_HSMC_TIMINGS0   (*(__IO uint32_t*)0xF801470CU) /**< \brief (HSMC) HSMC Timings Register (CS_number = 0) */
  #define REG_HSMC_MODE0      (*(__IO uint32_t*)0xF8014710U) /**< \brief (HSMC) HSMC Mode Register (CS_number = 0) */
  #define REG_HSMC_SETUP1     (*(__IO uint32_t*)0xF8014714U) /**< \brief (HSMC) HSMC Setup Register (CS_number = 1) */
  #define REG_HSMC_PULSE1     (*(__IO uint32_t*)0xF8014718U) /**< \brief (HSMC) HSMC Pulse Register (CS_number = 1) */
  #define REG_HSMC_CYCLE1     (*(__IO uint32_t*)0xF801471CU) /**< \brief (HSMC) HSMC Cycle Register (CS_number = 1) */
  #define REG_HSMC_TIMINGS1   (*(__IO uint32_t*)0xF8014720U) /**< \brief (HSMC) HSMC Timings Register (CS_number = 1) */
  #define REG_HSMC_MODE1      (*(__IO uint32_t*)0xF8014724U) /**< \brief (HSMC) HSMC Mode Register (CS_number = 1) */
  #define REG_HSMC_SETUP2     (*(__IO uint32_t*)0xF8014728U) /**< \brief (HSMC) HSMC Setup Register (CS_number = 2) */
  #define REG_HSMC_PULSE2     (*(__IO uint32_t*)0xF801472CU) /**< \brief (HSMC) HSMC Pulse Register (CS_number = 2) */
  #define REG_HSMC_CYCLE2     (*(__IO uint32_t*)0xF8014730U) /**< \brief (HSMC) HSMC Cycle Register (CS_number = 2) */
  #define REG_HSMC_TIMINGS2   (*(__IO uint32_t*)0xF8014734U) /**< \brief (HSMC) HSMC Timings Register (CS_number = 2) */
  #define REG_HSMC_MODE2      (*(__IO uint32_t*)0xF8014738U) /**< \brief (HSMC) HSMC Mode Register (CS_number = 2) */
  #define REG_HSMC_SETUP3     (*(__IO uint32_t*)0xF801473CU) /**< \brief (HSMC) HSMC Setup Register (CS_number = 3) */
  #define REG_HSMC_PULSE3     (*(__IO uint32_t*)0xF8014740U) /**< \brief (HSMC) HSMC Pulse Register (CS_number = 3) */
  #define REG_HSMC_CYCLE3     (*(__IO uint32_t*)0xF8014744U) /**< \brief (HSMC) HSMC Cycle Register (CS_number = 3) */
  #define REG_HSMC_TIMINGS3   (*(__IO uint32_t*)0xF8014748U) /**< \brief (HSMC) HSMC Timings Register (CS_number = 3) */
  #define REG_HSMC_MODE3      (*(__IO uint32_t*)0xF801474CU) /**< \brief (HSMC) HSMC Mode Register (CS_number = 3) */
  #define REG_HSMC_OCMS       (*(__IO uint32_t*)0xF80147A0U) /**< \brief (HSMC) HSMC Off Chip Memory Scrambling Register */
  #define REG_HSMC_KEY1       (*(__O  uint32_t*)0xF80147A4U) /**< \brief (HSMC) HSMC Off Chip Memory Scrambling KEY1 Register */
  #define REG_HSMC_KEY2       (*(__O  uint32_t*)0xF80147A8U) /**< \brief (HSMC) HSMC Off Chip Memory Scrambling KEY2 Register */
  #define REG_HSMC_WPMR       (*(__IO uint32_t*)0xF80147E4U) /**< \brief (HSMC) HSMC Write Protection Mode Register */
  #define REG_HSMC_WPSR       (*(__I  uint32_t*)0xF80147E8U) /**< \brief (HSMC) HSMC Write Protection Status Register */
  #define REG_HSMC_ADDRSIZE   (*(__I  uint32_t*)0xF80147ECU) /**< \brief (HSMC) HSMC Address Size Register */
  #define REG_HSMC_IPNAME     (*(__I  uint32_t*)0xF80147F0U) /**< \brief (HSMC) HSMC Name1 Register */
  #define REG_HSMC_FEATURES   (*(__I  uint32_t*)0xF80147F8U) /**< \brief (HSMC) HSMC Features Register */
  #define REG_HSMC_VERSION    (*(__I  uint32_t*)0xF80147FCU) /**< \brief (HSMC) HSMC Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for PDMIC peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_PDMIC_CR                       (0xF8018000U) /**< \brief (PDMIC) Control Register */
  #define REG_PDMIC_MR                       (0xF8018004U) /**< \brief (PDMIC) Mode Register */
  #define REG_PDMIC_CDR                      (0xF8018014U) /**< \brief (PDMIC) Converted Data Register */
  #define REG_PDMIC_IER                      (0xF8018018U) /**< \brief (PDMIC) Interrupt Enable Register */
  #define REG_PDMIC_IDR                      (0xF801801CU) /**< \brief (PDMIC) Interrupt Disable Register */
  #define REG_PDMIC_IMR                      (0xF8018020U) /**< \brief (PDMIC) Interrupt Mask Register */
  #define REG_PDMIC_ISR                      (0xF8018024U) /**< \brief (PDMIC) Interrupt Status Register */
  #define REG_PDMIC_DSPR0                    (0xF8018058U) /**< \brief (PDMIC) DSP Configuration Register 0 */
  #define REG_PDMIC_DSPR1                    (0xF801805CU) /**< \brief (PDMIC) DSP Configuration Register 1 */
  #define REG_PDMIC_WPMR                     (0xF80180E4U) /**< \brief (PDMIC) Write Protection Mode Register */
  #define REG_PDMIC_WPSR                     (0xF80180E8U) /**< \brief (PDMIC) Write Protection Status Register */
  #define REG_PDMIC_VERSION                  (0xF80180FCU) /**< \brief (PDMIC) Version Register */
#else
  #define REG_PDMIC_CR      (*(__IO uint32_t*)0xF8018000U) /**< \brief (PDMIC) Control Register */
  #define REG_PDMIC_MR      (*(__IO uint32_t*)0xF8018004U) /**< \brief (PDMIC) Mode Register */
  #define REG_PDMIC_CDR     (*(__I  uint32_t*)0xF8018014U) /**< \brief (PDMIC) Converted Data Register */
  #define REG_PDMIC_IER     (*(__O  uint32_t*)0xF8018018U) /**< \brief (PDMIC) Interrupt Enable Register */
  #define REG_PDMIC_IDR     (*(__O  uint32_t*)0xF801801CU) /**< \brief (PDMIC) Interrupt Disable Register */
  #define REG_PDMIC_IMR     (*(__I  uint32_t*)0xF8018020U) /**< \brief (PDMIC) Interrupt Mask Register */
  #define REG_PDMIC_ISR     (*(__I  uint32_t*)0xF8018024U) /**< \brief (PDMIC) Interrupt Status Register */
  #define REG_PDMIC_DSPR0   (*(__IO uint32_t*)0xF8018058U) /**< \brief (PDMIC) DSP Configuration Register 0 */
  #define REG_PDMIC_DSPR1   (*(__IO uint32_t*)0xF801805CU) /**< \brief (PDMIC) DSP Configuration Register 1 */
  #define REG_PDMIC_WPMR    (*(__IO uint32_t*)0xF80180E4U) /**< \brief (PDMIC) Write Protection Mode Register */
  #define REG_PDMIC_WPSR    (*(__I  uint32_t*)0xF80180E8U) /**< \brief (PDMIC) Write Protection Status Register */
  #define REG_PDMIC_VERSION (*(__I  uint32_t*)0xF80180FCU) /**< \brief (PDMIC) Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for UART0 peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_UART0_CR                        (0xF801C000U) /**< \brief (UART0) Control Register */
  #define REG_UART0_MR                        (0xF801C004U) /**< \brief (UART0) Mode Register */
  #define REG_UART0_IER                       (0xF801C008U) /**< \brief (UART0) Interrupt Enable Register */
  #define REG_UART0_IDR                       (0xF801C00CU) /**< \brief (UART0) Interrupt Disable Register */
  #define REG_UART0_IMR                       (0xF801C010U) /**< \brief (UART0) Interrupt Mask Register */
  #define REG_UART0_SR                        (0xF801C014U) /**< \brief (UART0) Status Register */
  #define REG_UART0_RHR                       (0xF801C018U) /**< \brief (UART0) Receive Holding Register */
  #define REG_UART0_THR                       (0xF801C01CU) /**< \brief (UART0) Transmit Holding Register */
  #define REG_UART0_BRGR                      (0xF801C020U) /**< \brief (UART0) Baud Rate Generator Register */
  #define REG_UART0_CMPR                      (0xF801C024U) /**< \brief (UART0) Comparison Register */
  #define REG_UART0_WPMR                      (0xF801C0E4U) /**< \brief (UART0) Write Protection Mode Register */
  #define REG_UART0_ADDRSIZE                  (0xF801C0ECU) /**< \brief (UART0) Address Size Register */
  #define REG_UART0_IPNAME                    (0xF801C0F0U) /**< \brief (UART0) IP Name 1 Register */
  #define REG_UART0_FEATURE                   (0xF801C0F8U) /**< \brief (UART0) Feature Register */
  #define REG_UART0_VERSION                   (0xF801C0FCU) /**< \brief (UART0) Version Register */
#else
  #define REG_UART0_CR       (*(__O  uint32_t*)0xF801C000U) /**< \brief (UART0) Control Register */
  #define REG_UART0_MR       (*(__IO uint32_t*)0xF801C004U) /**< \brief (UART0) Mode Register */
  #define REG_UART0_IER      (*(__O  uint32_t*)0xF801C008U) /**< \brief (UART0) Interrupt Enable Register */
  #define REG_UART0_IDR      (*(__O  uint32_t*)0xF801C00CU) /**< \brief (UART0) Interrupt Disable Register */
  #define REG_UART0_IMR      (*(__I  uint32_t*)0xF801C010U) /**< \brief (UART0) Interrupt Mask Register */
  #define REG_UART0_SR       (*(__I  uint32_t*)0xF801C014U) /**< \brief (UART0) Status Register */
  #define REG_UART0_RHR      (*(__I  uint32_t*)0xF801C018U) /**< \brief (UART0) Receive Holding Register */
  #define REG_UART0_THR      (*(__O  uint32_t*)0xF801C01CU) /**< \brief (UART0) Transmit Holding Register */
  #define REG_UART0_BRGR     (*(__IO uint32_t*)0xF801C020U) /**< \brief (UART0) Baud Rate Generator Register */
  #define REG_UART0_CMPR     (*(__IO uint32_t*)0xF801C024U) /**< \brief (UART0) Comparison Register */
  #define REG_UART0_WPMR     (*(__IO uint32_t*)0xF801C0E4U) /**< \brief (UART0) Write Protection Mode Register */
  #define REG_UART0_ADDRSIZE (*(__IO uint32_t*)0xF801C0ECU) /**< \brief (UART0) Address Size Register */
  #define REG_UART0_IPNAME   (*(__IO uint32_t*)0xF801C0F0U) /**< \brief (UART0) IP Name 1 Register */
  #define REG_UART0_FEATURE  (*(__IO uint32_t*)0xF801C0F8U) /**< \brief (UART0) Feature Register */
  #define REG_UART0_VERSION  (*(__I  uint32_t*)0xF801C0FCU) /**< \brief (UART0) Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for UART1 peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_UART1_CR                        (0xF8020000U) /**< \brief (UART1) Control Register */
  #define REG_UART1_MR                        (0xF8020004U) /**< \brief (UART1) Mode Register */
  #define REG_UART1_IER                       (0xF8020008U) /**< \brief (UART1) Interrupt Enable Register */
  #define REG_UART1_IDR                       (0xF802000CU) /**< \brief (UART1) Interrupt Disable Register */
  #define REG_UART1_IMR                       (0xF8020010U) /**< \brief (UART1) Interrupt Mask Register */
  #define REG_UART1_SR                        (0xF8020014U) /**< \brief (UART1) Status Register */
  #define REG_UART1_RHR                       (0xF8020018U) /**< \brief (UART1) Receive Holding Register */
  #define REG_UART1_THR                       (0xF802001CU) /**< \brief (UART1) Transmit Holding Register */
  #define REG_UART1_BRGR                      (0xF8020020U) /**< \brief (UART1) Baud Rate Generator Register */
  #define REG_UART1_CMPR                      (0xF8020024U) /**< \brief (UART1) Comparison Register */
  #define REG_UART1_WPMR                      (0xF80200E4U) /**< \brief (UART1) Write Protection Mode Register */
  #define REG_UART1_ADDRSIZE                  (0xF80200ECU) /**< \brief (UART1) Address Size Register */
  #define REG_UART1_IPNAME                    (0xF80200F0U) /**< \brief (UART1) IP Name 1 Register */
  #define REG_UART1_FEATURE                   (0xF80200F8U) /**< \brief (UART1) Feature Register */
  #define REG_UART1_VERSION                   (0xF80200FCU) /**< \brief (UART1) Version Register */
#else
  #define REG_UART1_CR       (*(__O  uint32_t*)0xF8020000U) /**< \brief (UART1) Control Register */
  #define REG_UART1_MR       (*(__IO uint32_t*)0xF8020004U) /**< \brief (UART1) Mode Register */
  #define REG_UART1_IER      (*(__O  uint32_t*)0xF8020008U) /**< \brief (UART1) Interrupt Enable Register */
  #define REG_UART1_IDR      (*(__O  uint32_t*)0xF802000CU) /**< \brief (UART1) Interrupt Disable Register */
  #define REG_UART1_IMR      (*(__I  uint32_t*)0xF8020010U) /**< \brief (UART1) Interrupt Mask Register */
  #define REG_UART1_SR       (*(__I  uint32_t*)0xF8020014U) /**< \brief (UART1) Status Register */
  #define REG_UART1_RHR      (*(__I  uint32_t*)0xF8020018U) /**< \brief (UART1) Receive Holding Register */
  #define REG_UART1_THR      (*(__O  uint32_t*)0xF802001CU) /**< \brief (UART1) Transmit Holding Register */
  #define REG_UART1_BRGR     (*(__IO uint32_t*)0xF8020020U) /**< \brief (UART1) Baud Rate Generator Register */
  #define REG_UART1_CMPR     (*(__IO uint32_t*)0xF8020024U) /**< \brief (UART1) Comparison Register */
  #define REG_UART1_WPMR     (*(__IO uint32_t*)0xF80200E4U) /**< \brief (UART1) Write Protection Mode Register */
  #define REG_UART1_ADDRSIZE (*(__IO uint32_t*)0xF80200ECU) /**< \brief (UART1) Address Size Register */
  #define REG_UART1_IPNAME   (*(__IO uint32_t*)0xF80200F0U) /**< \brief (UART1) IP Name 1 Register */
  #define REG_UART1_FEATURE  (*(__IO uint32_t*)0xF80200F8U) /**< \brief (UART1) Feature Register */
  #define REG_UART1_VERSION  (*(__I  uint32_t*)0xF80200FCU) /**< \brief (UART1) Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for UART2 peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_UART2_CR                        (0xF8024000U) /**< \brief (UART2) Control Register */
  #define REG_UART2_MR                        (0xF8024004U) /**< \brief (UART2) Mode Register */
  #define REG_UART2_IER                       (0xF8024008U) /**< \brief (UART2) Interrupt Enable Register */
  #define REG_UART2_IDR                       (0xF802400CU) /**< \brief (UART2) Interrupt Disable Register */
  #define REG_UART2_IMR                       (0xF8024010U) /**< \brief (UART2) Interrupt Mask Register */
  #define REG_UART2_SR                        (0xF8024014U) /**< \brief (UART2) Status Register */
  #define REG_UART2_RHR                       (0xF8024018U) /**< \brief (UART2) Receive Holding Register */
  #define REG_UART2_THR                       (0xF802401CU) /**< \brief (UART2) Transmit Holding Register */
  #define REG_UART2_BRGR                      (0xF8024020U) /**< \brief (UART2) Baud Rate Generator Register */
  #define REG_UART2_CMPR                      (0xF8024024U) /**< \brief (UART2) Comparison Register */
  #define REG_UART2_WPMR                      (0xF80240E4U) /**< \brief (UART2) Write Protection Mode Register */
  #define REG_UART2_ADDRSIZE                  (0xF80240ECU) /**< \brief (UART2) Address Size Register */
  #define REG_UART2_IPNAME                    (0xF80240F0U) /**< \brief (UART2) IP Name 1 Register */
  #define REG_UART2_FEATURE                   (0xF80240F8U) /**< \brief (UART2) Feature Register */
  #define REG_UART2_VERSION                   (0xF80240FCU) /**< \brief (UART2) Version Register */
#else
  #define REG_UART2_CR       (*(__O  uint32_t*)0xF8024000U) /**< \brief (UART2) Control Register */
  #define REG_UART2_MR       (*(__IO uint32_t*)0xF8024004U) /**< \brief (UART2) Mode Register */
  #define REG_UART2_IER      (*(__O  uint32_t*)0xF8024008U) /**< \brief (UART2) Interrupt Enable Register */
  #define REG_UART2_IDR      (*(__O  uint32_t*)0xF802400CU) /**< \brief (UART2) Interrupt Disable Register */
  #define REG_UART2_IMR      (*(__I  uint32_t*)0xF8024010U) /**< \brief (UART2) Interrupt Mask Register */
  #define REG_UART2_SR       (*(__I  uint32_t*)0xF8024014U) /**< \brief (UART2) Status Register */
  #define REG_UART2_RHR      (*(__I  uint32_t*)0xF8024018U) /**< \brief (UART2) Receive Holding Register */
  #define REG_UART2_THR      (*(__O  uint32_t*)0xF802401CU) /**< \brief (UART2) Transmit Holding Register */
  #define REG_UART2_BRGR     (*(__IO uint32_t*)0xF8024020U) /**< \brief (UART2) Baud Rate Generator Register */
  #define REG_UART2_CMPR     (*(__IO uint32_t*)0xF8024024U) /**< \brief (UART2) Comparison Register */
  #define REG_UART2_WPMR     (*(__IO uint32_t*)0xF80240E4U) /**< \brief (UART2) Write Protection Mode Register */
  #define REG_UART2_ADDRSIZE (*(__IO uint32_t*)0xF80240ECU) /**< \brief (UART2) Address Size Register */
  #define REG_UART2_IPNAME   (*(__IO uint32_t*)0xF80240F0U) /**< \brief (UART2) IP Name 1 Register */
  #define REG_UART2_FEATURE  (*(__IO uint32_t*)0xF80240F8U) /**< \brief (UART2) Feature Register */
  #define REG_UART2_VERSION  (*(__I  uint32_t*)0xF80240FCU) /**< \brief (UART2) Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for TWIHS0 peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_TWIHS0_CR                     (0xF8028000U) /**< \brief (TWIHS0) Control Register */
  #define REG_TWIHS0_MMR                    (0xF8028004U) /**< \brief (TWIHS0) Master Mode Register */
  #define REG_TWIHS0_SMR                    (0xF8028008U) /**< \brief (TWIHS0) Slave Mode Register */
  #define REG_TWIHS0_IADR                   (0xF802800CU) /**< \brief (TWIHS0) Internal Address Register */
  #define REG_TWIHS0_CWGR                   (0xF8028010U) /**< \brief (TWIHS0) Clock Waveform Generator Register */
  #define REG_TWIHS0_SR                     (0xF8028020U) /**< \brief (TWIHS0) Status Register */
  #define REG_TWIHS0_IER                    (0xF8028024U) /**< \brief (TWIHS0) Interrupt Enable Register */
  #define REG_TWIHS0_IDR                    (0xF8028028U) /**< \brief (TWIHS0) Interrupt Disable Register */
  #define REG_TWIHS0_IMR                    (0xF802802CU) /**< \brief (TWIHS0) Interrupt Mask Register */
  #define REG_TWIHS0_RHR                    (0xF8028030U) /**< \brief (TWIHS0) Receive Holding Register */
  #define REG_TWIHS0_THR                    (0xF8028034U) /**< \brief (TWIHS0) Transmit Holding Register */
  #define REG_TWIHS0_SMBTR                  (0xF8028038U) /**< \brief (TWIHS0) SMBus Timing Register */
  #define REG_TWIHS0_ACR                    (0xF8028040U) /**< \brief (TWIHS0) Alternative Command Register */
  #define REG_TWIHS0_FILTR                  (0xF8028044U) /**< \brief (TWIHS0) Filter Register */
  #define REG_TWIHS0_SWMR                   (0xF802804CU) /**< \brief (TWIHS0) SleepWalking Matching Register */
  #define REG_TWIHS0_DR                     (0xF80280D0U) /**< \brief (TWIHS0) Debug Register */
  #define REG_TWIHS0_WPMR                   (0xF80280E4U) /**< \brief (TWIHS0) Write Protection Mode Register */
  #define REG_TWIHS0_WPSR                   (0xF80280E8U) /**< \brief (TWIHS0) Write Protection Status Register */
  #define REG_TWIHS0_VER                    (0xF80280FCU) /**< \brief (TWIHS0) Version Register */
#else
  #define REG_TWIHS0_CR    (*(__O  uint32_t*)0xF8028000U) /**< \brief (TWIHS0) Control Register */
  #define REG_TWIHS0_MMR   (*(__IO uint32_t*)0xF8028004U) /**< \brief (TWIHS0) Master Mode Register */
  #define REG_TWIHS0_SMR   (*(__IO uint32_t*)0xF8028008U) /**< \brief (TWIHS0) Slave Mode Register */
  #define REG_TWIHS0_IADR  (*(__IO uint32_t*)0xF802800CU) /**< \brief (TWIHS0) Internal Address Register */
  #define REG_TWIHS0_CWGR  (*(__IO uint32_t*)0xF8028010U) /**< \brief (TWIHS0) Clock Waveform Generator Register */
  #define REG_TWIHS0_SR    (*(__I  uint32_t*)0xF8028020U) /**< \brief (TWIHS0) Status Register */
  #define REG_TWIHS0_IER   (*(__O  uint32_t*)0xF8028024U) /**< \brief (TWIHS0) Interrupt Enable Register */
  #define REG_TWIHS0_IDR   (*(__O  uint32_t*)0xF8028028U) /**< \brief (TWIHS0) Interrupt Disable Register */
  #define REG_TWIHS0_IMR   (*(__I  uint32_t*)0xF802802CU) /**< \brief (TWIHS0) Interrupt Mask Register */
  #define REG_TWIHS0_RHR   (*(__I  uint32_t*)0xF8028030U) /**< \brief (TWIHS0) Receive Holding Register */
  #define REG_TWIHS0_THR   (*(__O  uint32_t*)0xF8028034U) /**< \brief (TWIHS0) Transmit Holding Register */
  #define REG_TWIHS0_SMBTR (*(__IO uint32_t*)0xF8028038U) /**< \brief (TWIHS0) SMBus Timing Register */
  #define REG_TWIHS0_ACR   (*(__IO uint32_t*)0xF8028040U) /**< \brief (TWIHS0) Alternative Command Register */
  #define REG_TWIHS0_FILTR (*(__IO uint32_t*)0xF8028044U) /**< \brief (TWIHS0) Filter Register */
  #define REG_TWIHS0_SWMR  (*(__IO uint32_t*)0xF802804CU) /**< \brief (TWIHS0) SleepWalking Matching Register */
  #define REG_TWIHS0_DR    (*(__I  uint32_t*)0xF80280D0U) /**< \brief (TWIHS0) Debug Register */
  #define REG_TWIHS0_WPMR  (*(__IO uint32_t*)0xF80280E4U) /**< \brief (TWIHS0) Write Protection Mode Register */
  #define REG_TWIHS0_WPSR  (*(__I  uint32_t*)0xF80280E8U) /**< \brief (TWIHS0) Write Protection Status Register */
  #define REG_TWIHS0_VER   (*(__I  uint32_t*)0xF80280FCU) /**< \brief (TWIHS0) Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for PWM peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_PWM_CLK                       (0xF802C000U) /**< \brief (PWM) PWM Clock Register */
  #define REG_PWM_ENA                       (0xF802C004U) /**< \brief (PWM) PWM Enable Register */
  #define REG_PWM_DIS                       (0xF802C008U) /**< \brief (PWM) PWM Disable Register */
  #define REG_PWM_SR                        (0xF802C00CU) /**< \brief (PWM) PWM Status Register */
  #define REG_PWM_IER1                      (0xF802C010U) /**< \brief (PWM) PWM Interrupt Enable Register 1 */
  #define REG_PWM_IDR1                      (0xF802C014U) /**< \brief (PWM) PWM Interrupt Disable Register 1 */
  #define REG_PWM_IMR1                      (0xF802C018U) /**< \brief (PWM) PWM Interrupt Mask Register 1 */
  #define REG_PWM_ISR1                      (0xF802C01CU) /**< \brief (PWM) PWM Interrupt Status Register 1 */
  #define REG_PWM_SCM                       (0xF802C020U) /**< \brief (PWM) PWM Sync Channels Mode Register */
  #define REG_PWM_DMAR                      (0xF802C024U) /**< \brief (PWM) PWM DMA Register */
  #define REG_PWM_SCUC                      (0xF802C028U) /**< \brief (PWM) PWM Sync Channels Update Control Register */
  #define REG_PWM_SCUP                      (0xF802C02CU) /**< \brief (PWM) PWM Sync Channels Update Period Register */
  #define REG_PWM_SCUPUPD                   (0xF802C030U) /**< \brief (PWM) PWM Sync Channels Update Period Update Register */
  #define REG_PWM_IER2                      (0xF802C034U) /**< \brief (PWM) PWM Interrupt Enable Register 2 */
  #define REG_PWM_IDR2                      (0xF802C038U) /**< \brief (PWM) PWM Interrupt Disable Register 2 */
  #define REG_PWM_IMR2                      (0xF802C03CU) /**< \brief (PWM) PWM Interrupt Mask Register 2 */
  #define REG_PWM_ISR2                      (0xF802C040U) /**< \brief (PWM) PWM Interrupt Status Register 2 */
  #define REG_PWM_OOV                       (0xF802C044U) /**< \brief (PWM) PWM Output Override Value Register */
  #define REG_PWM_OS                        (0xF802C048U) /**< \brief (PWM) PWM Output Selection Register */
  #define REG_PWM_OSS                       (0xF802C04CU) /**< \brief (PWM) PWM Output Selection Set Register */
  #define REG_PWM_OSC                       (0xF802C050U) /**< \brief (PWM) PWM Output Selection Clear Register */
  #define REG_PWM_OSSUPD                    (0xF802C054U) /**< \brief (PWM) PWM Output Selection Set Update Register */
  #define REG_PWM_OSCUPD                    (0xF802C058U) /**< \brief (PWM) PWM Output Selection Clear Update Register */
  #define REG_PWM_FMR                       (0xF802C05CU) /**< \brief (PWM) PWM Fault Mode Register */
  #define REG_PWM_FSR                       (0xF802C060U) /**< \brief (PWM) PWM Fault Status Register */
  #define REG_PWM_FCR                       (0xF802C064U) /**< \brief (PWM) PWM Fault Clear Register */
  #define REG_PWM_FPV1                      (0xF802C068U) /**< \brief (PWM) PWM Fault Protection Value Register 1 */
  #define REG_PWM_FPE                       (0xF802C06CU) /**< \brief (PWM) PWM Fault Protection Enable Register */
  #define REG_PWM_ELMR                      (0xF802C07CU) /**< \brief (PWM) PWM Event Line 0 Mode Register */
  #define REG_PWM_SSPR                      (0xF802C0A0U) /**< \brief (PWM) PWM Spread Spectrum Register */
  #define REG_PWM_SSPUP                     (0xF802C0A4U) /**< \brief (PWM) PWM Spread Spectrum Update Register */
  #define REG_PWM_SMMR                      (0xF802C0B0U) /**< \brief (PWM) PWM Stepper Motor Mode Register */
  #define REG_PWM_FPV2                      (0xF802C0C0U) /**< \brief (PWM) PWM Fault Protection Value 2 Register */
  #define REG_PWM_WPCR                      (0xF802C0E4U) /**< \brief (PWM) PWM Write Protection Control Register */
  #define REG_PWM_WPSR                      (0xF802C0E8U) /**< \brief (PWM) PWM Write Protection Status Register */
  #define REG_PWM_VERSION                   (0xF802C0FCU) /**< \brief (PWM) Version Register */
  #define REG_PWM_CMPV0                     (0xF802C130U) /**< \brief (PWM) PWM Comparison 0 Value Register */
  #define REG_PWM_CMPVUPD0                  (0xF802C134U) /**< \brief (PWM) PWM Comparison 0 Value Update Register */
  #define REG_PWM_CMPM0                     (0xF802C138U) /**< \brief (PWM) PWM Comparison 0 Mode Register */
  #define REG_PWM_CMPMUPD0                  (0xF802C13CU) /**< \brief (PWM) PWM Comparison 0 Mode Update Register */
  #define REG_PWM_CMPV1                     (0xF802C140U) /**< \brief (PWM) PWM Comparison 1 Value Register */
  #define REG_PWM_CMPVUPD1                  (0xF802C144U) /**< \brief (PWM) PWM Comparison 1 Value Update Register */
  #define REG_PWM_CMPM1                     (0xF802C148U) /**< \brief (PWM) PWM Comparison 1 Mode Register */
  #define REG_PWM_CMPMUPD1                  (0xF802C14CU) /**< \brief (PWM) PWM Comparison 1 Mode Update Register */
  #define REG_PWM_CMPV2                     (0xF802C150U) /**< \brief (PWM) PWM Comparison 2 Value Register */
  #define REG_PWM_CMPVUPD2                  (0xF802C154U) /**< \brief (PWM) PWM Comparison 2 Value Update Register */
  #define REG_PWM_CMPM2                     (0xF802C158U) /**< \brief (PWM) PWM Comparison 2 Mode Register */
  #define REG_PWM_CMPMUPD2                  (0xF802C15CU) /**< \brief (PWM) PWM Comparison 2 Mode Update Register */
  #define REG_PWM_CMPV3                     (0xF802C160U) /**< \brief (PWM) PWM Comparison 3 Value Register */
  #define REG_PWM_CMPVUPD3                  (0xF802C164U) /**< \brief (PWM) PWM Comparison 3 Value Update Register */
  #define REG_PWM_CMPM3                     (0xF802C168U) /**< \brief (PWM) PWM Comparison 3 Mode Register */
  #define REG_PWM_CMPMUPD3                  (0xF802C16CU) /**< \brief (PWM) PWM Comparison 3 Mode Update Register */
  #define REG_PWM_CMPV4                     (0xF802C170U) /**< \brief (PWM) PWM Comparison 4 Value Register */
  #define REG_PWM_CMPVUPD4                  (0xF802C174U) /**< \brief (PWM) PWM Comparison 4 Value Update Register */
  #define REG_PWM_CMPM4                     (0xF802C178U) /**< \brief (PWM) PWM Comparison 4 Mode Register */
  #define REG_PWM_CMPMUPD4                  (0xF802C17CU) /**< \brief (PWM) PWM Comparison 4 Mode Update Register */
  #define REG_PWM_CMPV5                     (0xF802C180U) /**< \brief (PWM) PWM Comparison 5 Value Register */
  #define REG_PWM_CMPVUPD5                  (0xF802C184U) /**< \brief (PWM) PWM Comparison 5 Value Update Register */
  #define REG_PWM_CMPM5                     (0xF802C188U) /**< \brief (PWM) PWM Comparison 5 Mode Register */
  #define REG_PWM_CMPMUPD5                  (0xF802C18CU) /**< \brief (PWM) PWM Comparison 5 Mode Update Register */
  #define REG_PWM_CMPV6                     (0xF802C190U) /**< \brief (PWM) PWM Comparison 6 Value Register */
  #define REG_PWM_CMPVUPD6                  (0xF802C194U) /**< \brief (PWM) PWM Comparison 6 Value Update Register */
  #define REG_PWM_CMPM6                     (0xF802C198U) /**< \brief (PWM) PWM Comparison 6 Mode Register */
  #define REG_PWM_CMPMUPD6                  (0xF802C19CU) /**< \brief (PWM) PWM Comparison 6 Mode Update Register */
  #define REG_PWM_CMPV7                     (0xF802C1A0U) /**< \brief (PWM) PWM Comparison 7 Value Register */
  #define REG_PWM_CMPVUPD7                  (0xF802C1A4U) /**< \brief (PWM) PWM Comparison 7 Value Update Register */
  #define REG_PWM_CMPM7                     (0xF802C1A8U) /**< \brief (PWM) PWM Comparison 7 Mode Register */
  #define REG_PWM_CMPMUPD7                  (0xF802C1ACU) /**< \brief (PWM) PWM Comparison 7 Mode Update Register */
  #define REG_PWM_CMR0                      (0xF802C200U) /**< \brief (PWM) PWM Channel Mode Register (ch_num = 0) */
  #define REG_PWM_CDTY0                     (0xF802C204U) /**< \brief (PWM) PWM Channel Duty Cycle Register (ch_num = 0) */
  #define REG_PWM_CDTYUPD0                  (0xF802C208U) /**< \brief (PWM) PWM Channel Duty Cycle Update Register (ch_num = 0) */
  #define REG_PWM_CPRD0                     (0xF802C20CU) /**< \brief (PWM) PWM Channel Period Register (ch_num = 0) */
  #define REG_PWM_CPRDUPD0                  (0xF802C210U) /**< \brief (PWM) PWM Channel Period Update Register (ch_num = 0) */
  #define REG_PWM_CCNT0                     (0xF802C214U) /**< \brief (PWM) PWM Channel Counter Register (ch_num = 0) */
  #define REG_PWM_DT0                       (0xF802C218U) /**< \brief (PWM) PWM Channel Dead Time Register (ch_num = 0) */
  #define REG_PWM_DTUPD0                    (0xF802C21CU) /**< \brief (PWM) PWM Channel Dead Time Update Register (ch_num = 0) */
  #define REG_PWM_CMR1                      (0xF802C220U) /**< \brief (PWM) PWM Channel Mode Register (ch_num = 1) */
  #define REG_PWM_CDTY1                     (0xF802C224U) /**< \brief (PWM) PWM Channel Duty Cycle Register (ch_num = 1) */
  #define REG_PWM_CDTYUPD1                  (0xF802C228U) /**< \brief (PWM) PWM Channel Duty Cycle Update Register (ch_num = 1) */
  #define REG_PWM_CPRD1                     (0xF802C22CU) /**< \brief (PWM) PWM Channel Period Register (ch_num = 1) */
  #define REG_PWM_CPRDUPD1                  (0xF802C230U) /**< \brief (PWM) PWM Channel Period Update Register (ch_num = 1) */
  #define REG_PWM_CCNT1                     (0xF802C234U) /**< \brief (PWM) PWM Channel Counter Register (ch_num = 1) */
  #define REG_PWM_DT1                       (0xF802C238U) /**< \brief (PWM) PWM Channel Dead Time Register (ch_num = 1) */
  #define REG_PWM_DTUPD1                    (0xF802C23CU) /**< \brief (PWM) PWM Channel Dead Time Update Register (ch_num = 1) */
  #define REG_PWM_CMR2                      (0xF802C240U) /**< \brief (PWM) PWM Channel Mode Register (ch_num = 2) */
  #define REG_PWM_CDTY2                     (0xF802C244U) /**< \brief (PWM) PWM Channel Duty Cycle Register (ch_num = 2) */
  #define REG_PWM_CDTYUPD2                  (0xF802C248U) /**< \brief (PWM) PWM Channel Duty Cycle Update Register (ch_num = 2) */
  #define REG_PWM_CPRD2                     (0xF802C24CU) /**< \brief (PWM) PWM Channel Period Register (ch_num = 2) */
  #define REG_PWM_CPRDUPD2                  (0xF802C250U) /**< \brief (PWM) PWM Channel Period Update Register (ch_num = 2) */
  #define REG_PWM_CCNT2                     (0xF802C254U) /**< \brief (PWM) PWM Channel Counter Register (ch_num = 2) */
  #define REG_PWM_DT2                       (0xF802C258U) /**< \brief (PWM) PWM Channel Dead Time Register (ch_num = 2) */
  #define REG_PWM_DTUPD2                    (0xF802C25CU) /**< \brief (PWM) PWM Channel Dead Time Update Register (ch_num = 2) */
  #define REG_PWM_CMR3                      (0xF802C260U) /**< \brief (PWM) PWM Channel Mode Register (ch_num = 3) */
  #define REG_PWM_CDTY3                     (0xF802C264U) /**< \brief (PWM) PWM Channel Duty Cycle Register (ch_num = 3) */
  #define REG_PWM_CDTYUPD3                  (0xF802C268U) /**< \brief (PWM) PWM Channel Duty Cycle Update Register (ch_num = 3) */
  #define REG_PWM_CPRD3                     (0xF802C26CU) /**< \brief (PWM) PWM Channel Period Register (ch_num = 3) */
  #define REG_PWM_CPRDUPD3                  (0xF802C270U) /**< \brief (PWM) PWM Channel Period Update Register (ch_num = 3) */
  #define REG_PWM_CCNT3                     (0xF802C274U) /**< \brief (PWM) PWM Channel Counter Register (ch_num = 3) */
  #define REG_PWM_DT3                       (0xF802C278U) /**< \brief (PWM) PWM Channel Dead Time Register (ch_num = 3) */
  #define REG_PWM_DTUPD3                    (0xF802C27CU) /**< \brief (PWM) PWM Channel Dead Time Update Register (ch_num = 3) */
  #define REG_PWM_CMUPD0                    (0xF802C400U) /**< \brief (PWM) PWM Channel Mode Update Register (ch_num = 0) */
  #define REG_PWM_CAE0                      (0xF802C404U) /**< \brief (PWM) PWM Channel Additional Edge Register (ch_num = 0) */
  #define REG_PWM_CAEUPD0                   (0xF802C408U) /**< \brief (PWM) PWM Channel Additional Edge Update Register (ch_num = 0) */
  #define REG_PWM_CMUPD1                    (0xF802C420U) /**< \brief (PWM) PWM Channel Mode Update Register (ch_num = 1) */
  #define REG_PWM_CAE1                      (0xF802C424U) /**< \brief (PWM) PWM Channel Additional Edge Register (ch_num = 1) */
  #define REG_PWM_CAEUPD1                   (0xF802C428U) /**< \brief (PWM) PWM Channel Additional Edge Update Register (ch_num = 1) */
  #define REG_PWM_ETRG1                     (0xF802C42CU) /**< \brief (PWM) PWM External Trigger Register (trg_num = 1) */
  #define REG_PWM_LEBR1                     (0xF802C430U) /**< \brief (PWM) PWM Leading-Edge Blanking Register (trg_num = 1) */
  #define REG_PWM_CMUPD2                    (0xF802C440U) /**< \brief (PWM) PWM Channel Mode Update Register (ch_num = 2) */
  #define REG_PWM_CAE2                      (0xF802C444U) /**< \brief (PWM) PWM Channel Additional Edge Register (ch_num = 2) */
  #define REG_PWM_CAEUPD2                   (0xF802C448U) /**< \brief (PWM) PWM Channel Additional Edge Update Register (ch_num = 2) */
  #define REG_PWM_ETRG2                     (0xF802C44CU) /**< \brief (PWM) PWM External Trigger Register (trg_num = 2) */
  #define REG_PWM_LEBR2                     (0xF802C450U) /**< \brief (PWM) PWM Leading-Edge Blanking Register (trg_num = 2) */
  #define REG_PWM_CMUPD3                    (0xF802C460U) /**< \brief (PWM) PWM Channel Mode Update Register (ch_num = 3) */
  #define REG_PWM_CAE3                      (0xF802C464U) /**< \brief (PWM) PWM Channel Additional Edge Register (ch_num = 3) */
  #define REG_PWM_CAEUPD3                   (0xF802C468U) /**< \brief (PWM) PWM Channel Additional Edge Update Register (ch_num = 3) */
  #define REG_PWM_ETRG3                     (0xF802C46CU) /**< \brief (PWM) PWM External Trigger Register (trg_num = 3) */
  #define REG_PWM_LEBR3                     (0xF802C470U) /**< \brief (PWM) PWM Leading-Edge Blanking Register (trg_num = 3) */
#else
  #define REG_PWM_CLK      (*(__IO uint32_t*)0xF802C000U) /**< \brief (PWM) PWM Clock Register */
  #define REG_PWM_ENA      (*(__O  uint32_t*)0xF802C004U) /**< \brief (PWM) PWM Enable Register */
  #define REG_PWM_DIS      (*(__O  uint32_t*)0xF802C008U) /**< \brief (PWM) PWM Disable Register */
  #define REG_PWM_SR       (*(__I  uint32_t*)0xF802C00CU) /**< \brief (PWM) PWM Status Register */
  #define REG_PWM_IER1     (*(__O  uint32_t*)0xF802C010U) /**< \brief (PWM) PWM Interrupt Enable Register 1 */
  #define REG_PWM_IDR1     (*(__O  uint32_t*)0xF802C014U) /**< \brief (PWM) PWM Interrupt Disable Register 1 */
  #define REG_PWM_IMR1     (*(__I  uint32_t*)0xF802C018U) /**< \brief (PWM) PWM Interrupt Mask Register 1 */
  #define REG_PWM_ISR1     (*(__I  uint32_t*)0xF802C01CU) /**< \brief (PWM) PWM Interrupt Status Register 1 */
  #define REG_PWM_SCM      (*(__IO uint32_t*)0xF802C020U) /**< \brief (PWM) PWM Sync Channels Mode Register */
  #define REG_PWM_DMAR     (*(__O  uint32_t*)0xF802C024U) /**< \brief (PWM) PWM DMA Register */
  #define REG_PWM_SCUC     (*(__IO uint32_t*)0xF802C028U) /**< \brief (PWM) PWM Sync Channels Update Control Register */
  #define REG_PWM_SCUP     (*(__IO uint32_t*)0xF802C02CU) /**< \brief (PWM) PWM Sync Channels Update Period Register */
  #define REG_PWM_SCUPUPD  (*(__O  uint32_t*)0xF802C030U) /**< \brief (PWM) PWM Sync Channels Update Period Update Register */
  #define REG_PWM_IER2     (*(__O  uint32_t*)0xF802C034U) /**< \brief (PWM) PWM Interrupt Enable Register 2 */
  #define REG_PWM_IDR2     (*(__O  uint32_t*)0xF802C038U) /**< \brief (PWM) PWM Interrupt Disable Register 2 */
  #define REG_PWM_IMR2     (*(__I  uint32_t*)0xF802C03CU) /**< \brief (PWM) PWM Interrupt Mask Register 2 */
  #define REG_PWM_ISR2     (*(__I  uint32_t*)0xF802C040U) /**< \brief (PWM) PWM Interrupt Status Register 2 */
  #define REG_PWM_OOV      (*(__IO uint32_t*)0xF802C044U) /**< \brief (PWM) PWM Output Override Value Register */
  #define REG_PWM_OS       (*(__IO uint32_t*)0xF802C048U) /**< \brief (PWM) PWM Output Selection Register */
  #define REG_PWM_OSS      (*(__O  uint32_t*)0xF802C04CU) /**< \brief (PWM) PWM Output Selection Set Register */
  #define REG_PWM_OSC      (*(__O  uint32_t*)0xF802C050U) /**< \brief (PWM) PWM Output Selection Clear Register */
  #define REG_PWM_OSSUPD   (*(__O  uint32_t*)0xF802C054U) /**< \brief (PWM) PWM Output Selection Set Update Register */
  #define REG_PWM_OSCUPD   (*(__O  uint32_t*)0xF802C058U) /**< \brief (PWM) PWM Output Selection Clear Update Register */
  #define REG_PWM_FMR      (*(__IO uint32_t*)0xF802C05CU) /**< \brief (PWM) PWM Fault Mode Register */
  #define REG_PWM_FSR      (*(__I  uint32_t*)0xF802C060U) /**< \brief (PWM) PWM Fault Status Register */
  #define REG_PWM_FCR      (*(__O  uint32_t*)0xF802C064U) /**< \brief (PWM) PWM Fault Clear Register */
  #define REG_PWM_FPV1     (*(__IO uint32_t*)0xF802C068U) /**< \brief (PWM) PWM Fault Protection Value Register 1 */
  #define REG_PWM_FPE      (*(__IO uint32_t*)0xF802C06CU) /**< \brief (PWM) PWM Fault Protection Enable Register */
  #define REG_PWM_ELMR     (*(__IO uint32_t*)0xF802C07CU) /**< \brief (PWM) PWM Event Line 0 Mode Register */
  #define REG_PWM_SSPR     (*(__IO uint32_t*)0xF802C0A0U) /**< \brief (PWM) PWM Spread Spectrum Register */
  #define REG_PWM_SSPUP    (*(__O  uint32_t*)0xF802C0A4U) /**< \brief (PWM) PWM Spread Spectrum Update Register */
  #define REG_PWM_SMMR     (*(__IO uint32_t*)0xF802C0B0U) /**< \brief (PWM) PWM Stepper Motor Mode Register */
  #define REG_PWM_FPV2     (*(__IO uint32_t*)0xF802C0C0U) /**< \brief (PWM) PWM Fault Protection Value 2 Register */
  #define REG_PWM_WPCR     (*(__O  uint32_t*)0xF802C0E4U) /**< \brief (PWM) PWM Write Protection Control Register */
  #define REG_PWM_WPSR     (*(__I  uint32_t*)0xF802C0E8U) /**< \brief (PWM) PWM Write Protection Status Register */
  #define REG_PWM_VERSION  (*(__I  uint32_t*)0xF802C0FCU) /**< \brief (PWM) Version Register */
  #define REG_PWM_CMPV0    (*(__IO uint32_t*)0xF802C130U) /**< \brief (PWM) PWM Comparison 0 Value Register */
  #define REG_PWM_CMPVUPD0 (*(__O  uint32_t*)0xF802C134U) /**< \brief (PWM) PWM Comparison 0 Value Update Register */
  #define REG_PWM_CMPM0    (*(__IO uint32_t*)0xF802C138U) /**< \brief (PWM) PWM Comparison 0 Mode Register */
  #define REG_PWM_CMPMUPD0 (*(__O  uint32_t*)0xF802C13CU) /**< \brief (PWM) PWM Comparison 0 Mode Update Register */
  #define REG_PWM_CMPV1    (*(__IO uint32_t*)0xF802C140U) /**< \brief (PWM) PWM Comparison 1 Value Register */
  #define REG_PWM_CMPVUPD1 (*(__O  uint32_t*)0xF802C144U) /**< \brief (PWM) PWM Comparison 1 Value Update Register */
  #define REG_PWM_CMPM1    (*(__IO uint32_t*)0xF802C148U) /**< \brief (PWM) PWM Comparison 1 Mode Register */
  #define REG_PWM_CMPMUPD1 (*(__O  uint32_t*)0xF802C14CU) /**< \brief (PWM) PWM Comparison 1 Mode Update Register */
  #define REG_PWM_CMPV2    (*(__IO uint32_t*)0xF802C150U) /**< \brief (PWM) PWM Comparison 2 Value Register */
  #define REG_PWM_CMPVUPD2 (*(__O  uint32_t*)0xF802C154U) /**< \brief (PWM) PWM Comparison 2 Value Update Register */
  #define REG_PWM_CMPM2    (*(__IO uint32_t*)0xF802C158U) /**< \brief (PWM) PWM Comparison 2 Mode Register */
  #define REG_PWM_CMPMUPD2 (*(__O  uint32_t*)0xF802C15CU) /**< \brief (PWM) PWM Comparison 2 Mode Update Register */
  #define REG_PWM_CMPV3    (*(__IO uint32_t*)0xF802C160U) /**< \brief (PWM) PWM Comparison 3 Value Register */
  #define REG_PWM_CMPVUPD3 (*(__O  uint32_t*)0xF802C164U) /**< \brief (PWM) PWM Comparison 3 Value Update Register */
  #define REG_PWM_CMPM3    (*(__IO uint32_t*)0xF802C168U) /**< \brief (PWM) PWM Comparison 3 Mode Register */
  #define REG_PWM_CMPMUPD3 (*(__O  uint32_t*)0xF802C16CU) /**< \brief (PWM) PWM Comparison 3 Mode Update Register */
  #define REG_PWM_CMPV4    (*(__IO uint32_t*)0xF802C170U) /**< \brief (PWM) PWM Comparison 4 Value Register */
  #define REG_PWM_CMPVUPD4 (*(__O  uint32_t*)0xF802C174U) /**< \brief (PWM) PWM Comparison 4 Value Update Register */
  #define REG_PWM_CMPM4    (*(__IO uint32_t*)0xF802C178U) /**< \brief (PWM) PWM Comparison 4 Mode Register */
  #define REG_PWM_CMPMUPD4 (*(__O  uint32_t*)0xF802C17CU) /**< \brief (PWM) PWM Comparison 4 Mode Update Register */
  #define REG_PWM_CMPV5    (*(__IO uint32_t*)0xF802C180U) /**< \brief (PWM) PWM Comparison 5 Value Register */
  #define REG_PWM_CMPVUPD5 (*(__O  uint32_t*)0xF802C184U) /**< \brief (PWM) PWM Comparison 5 Value Update Register */
  #define REG_PWM_CMPM5    (*(__IO uint32_t*)0xF802C188U) /**< \brief (PWM) PWM Comparison 5 Mode Register */
  #define REG_PWM_CMPMUPD5 (*(__O  uint32_t*)0xF802C18CU) /**< \brief (PWM) PWM Comparison 5 Mode Update Register */
  #define REG_PWM_CMPV6    (*(__IO uint32_t*)0xF802C190U) /**< \brief (PWM) PWM Comparison 6 Value Register */
  #define REG_PWM_CMPVUPD6 (*(__O  uint32_t*)0xF802C194U) /**< \brief (PWM) PWM Comparison 6 Value Update Register */
  #define REG_PWM_CMPM6    (*(__IO uint32_t*)0xF802C198U) /**< \brief (PWM) PWM Comparison 6 Mode Register */
  #define REG_PWM_CMPMUPD6 (*(__O  uint32_t*)0xF802C19CU) /**< \brief (PWM) PWM Comparison 6 Mode Update Register */
  #define REG_PWM_CMPV7    (*(__IO uint32_t*)0xF802C1A0U) /**< \brief (PWM) PWM Comparison 7 Value Register */
  #define REG_PWM_CMPVUPD7 (*(__O  uint32_t*)0xF802C1A4U) /**< \brief (PWM) PWM Comparison 7 Value Update Register */
  #define REG_PWM_CMPM7    (*(__IO uint32_t*)0xF802C1A8U) /**< \brief (PWM) PWM Comparison 7 Mode Register */
  #define REG_PWM_CMPMUPD7 (*(__O  uint32_t*)0xF802C1ACU) /**< \brief (PWM) PWM Comparison 7 Mode Update Register */
  #define REG_PWM_CMR0     (*(__IO uint32_t*)0xF802C200U) /**< \brief (PWM) PWM Channel Mode Register (ch_num = 0) */
  #define REG_PWM_CDTY0    (*(__IO uint32_t*)0xF802C204U) /**< \brief (PWM) PWM Channel Duty Cycle Register (ch_num = 0) */
  #define REG_PWM_CDTYUPD0 (*(__O  uint32_t*)0xF802C208U) /**< \brief (PWM) PWM Channel Duty Cycle Update Register (ch_num = 0) */
  #define REG_PWM_CPRD0    (*(__IO uint32_t*)0xF802C20CU) /**< \brief (PWM) PWM Channel Period Register (ch_num = 0) */
  #define REG_PWM_CPRDUPD0 (*(__O  uint32_t*)0xF802C210U) /**< \brief (PWM) PWM Channel Period Update Register (ch_num = 0) */
  #define REG_PWM_CCNT0    (*(__I  uint32_t*)0xF802C214U) /**< \brief (PWM) PWM Channel Counter Register (ch_num = 0) */
  #define REG_PWM_DT0      (*(__IO uint32_t*)0xF802C218U) /**< \brief (PWM) PWM Channel Dead Time Register (ch_num = 0) */
  #define REG_PWM_DTUPD0   (*(__O  uint32_t*)0xF802C21CU) /**< \brief (PWM) PWM Channel Dead Time Update Register (ch_num = 0) */
  #define REG_PWM_CMR1     (*(__IO uint32_t*)0xF802C220U) /**< \brief (PWM) PWM Channel Mode Register (ch_num = 1) */
  #define REG_PWM_CDTY1    (*(__IO uint32_t*)0xF802C224U) /**< \brief (PWM) PWM Channel Duty Cycle Register (ch_num = 1) */
  #define REG_PWM_CDTYUPD1 (*(__O  uint32_t*)0xF802C228U) /**< \brief (PWM) PWM Channel Duty Cycle Update Register (ch_num = 1) */
  #define REG_PWM_CPRD1    (*(__IO uint32_t*)0xF802C22CU) /**< \brief (PWM) PWM Channel Period Register (ch_num = 1) */
  #define REG_PWM_CPRDUPD1 (*(__O  uint32_t*)0xF802C230U) /**< \brief (PWM) PWM Channel Period Update Register (ch_num = 1) */
  #define REG_PWM_CCNT1    (*(__I  uint32_t*)0xF802C234U) /**< \brief (PWM) PWM Channel Counter Register (ch_num = 1) */
  #define REG_PWM_DT1      (*(__IO uint32_t*)0xF802C238U) /**< \brief (PWM) PWM Channel Dead Time Register (ch_num = 1) */
  #define REG_PWM_DTUPD1   (*(__O  uint32_t*)0xF802C23CU) /**< \brief (PWM) PWM Channel Dead Time Update Register (ch_num = 1) */
  #define REG_PWM_CMR2     (*(__IO uint32_t*)0xF802C240U) /**< \brief (PWM) PWM Channel Mode Register (ch_num = 2) */
  #define REG_PWM_CDTY2    (*(__IO uint32_t*)0xF802C244U) /**< \brief (PWM) PWM Channel Duty Cycle Register (ch_num = 2) */
  #define REG_PWM_CDTYUPD2 (*(__O  uint32_t*)0xF802C248U) /**< \brief (PWM) PWM Channel Duty Cycle Update Register (ch_num = 2) */
  #define REG_PWM_CPRD2    (*(__IO uint32_t*)0xF802C24CU) /**< \brief (PWM) PWM Channel Period Register (ch_num = 2) */
  #define REG_PWM_CPRDUPD2 (*(__O  uint32_t*)0xF802C250U) /**< \brief (PWM) PWM Channel Period Update Register (ch_num = 2) */
  #define REG_PWM_CCNT2    (*(__I  uint32_t*)0xF802C254U) /**< \brief (PWM) PWM Channel Counter Register (ch_num = 2) */
  #define REG_PWM_DT2      (*(__IO uint32_t*)0xF802C258U) /**< \brief (PWM) PWM Channel Dead Time Register (ch_num = 2) */
  #define REG_PWM_DTUPD2   (*(__O  uint32_t*)0xF802C25CU) /**< \brief (PWM) PWM Channel Dead Time Update Register (ch_num = 2) */
  #define REG_PWM_CMR3     (*(__IO uint32_t*)0xF802C260U) /**< \brief (PWM) PWM Channel Mode Register (ch_num = 3) */
  #define REG_PWM_CDTY3    (*(__IO uint32_t*)0xF802C264U) /**< \brief (PWM) PWM Channel Duty Cycle Register (ch_num = 3) */
  #define REG_PWM_CDTYUPD3 (*(__O  uint32_t*)0xF802C268U) /**< \brief (PWM) PWM Channel Duty Cycle Update Register (ch_num = 3) */
  #define REG_PWM_CPRD3    (*(__IO uint32_t*)0xF802C26CU) /**< \brief (PWM) PWM Channel Period Register (ch_num = 3) */
  #define REG_PWM_CPRDUPD3 (*(__O  uint32_t*)0xF802C270U) /**< \brief (PWM) PWM Channel Period Update Register (ch_num = 3) */
  #define REG_PWM_CCNT3    (*(__I  uint32_t*)0xF802C274U) /**< \brief (PWM) PWM Channel Counter Register (ch_num = 3) */
  #define REG_PWM_DT3      (*(__IO uint32_t*)0xF802C278U) /**< \brief (PWM) PWM Channel Dead Time Register (ch_num = 3) */
  #define REG_PWM_DTUPD3   (*(__O  uint32_t*)0xF802C27CU) /**< \brief (PWM) PWM Channel Dead Time Update Register (ch_num = 3) */
  #define REG_PWM_CMUPD0   (*(__O  uint32_t*)0xF802C400U) /**< \brief (PWM) PWM Channel Mode Update Register (ch_num = 0) */
  #define REG_PWM_CAE0     (*(__IO uint32_t*)0xF802C404U) /**< \brief (PWM) PWM Channel Additional Edge Register (ch_num = 0) */
  #define REG_PWM_CAEUPD0  (*(__O  uint32_t*)0xF802C408U) /**< \brief (PWM) PWM Channel Additional Edge Update Register (ch_num = 0) */
  #define REG_PWM_CMUPD1   (*(__O  uint32_t*)0xF802C420U) /**< \brief (PWM) PWM Channel Mode Update Register (ch_num = 1) */
  #define REG_PWM_CAE1     (*(__IO uint32_t*)0xF802C424U) /**< \brief (PWM) PWM Channel Additional Edge Register (ch_num = 1) */
  #define REG_PWM_CAEUPD1  (*(__O  uint32_t*)0xF802C428U) /**< \brief (PWM) PWM Channel Additional Edge Update Register (ch_num = 1) */
  #define REG_PWM_ETRG1    (*(__IO uint32_t*)0xF802C42CU) /**< \brief (PWM) PWM External Trigger Register (trg_num = 1) */
  #define REG_PWM_LEBR1    (*(__IO uint32_t*)0xF802C430U) /**< \brief (PWM) PWM Leading-Edge Blanking Register (trg_num = 1) */
  #define REG_PWM_CMUPD2   (*(__O  uint32_t*)0xF802C440U) /**< \brief (PWM) PWM Channel Mode Update Register (ch_num = 2) */
  #define REG_PWM_CAE2     (*(__IO uint32_t*)0xF802C444U) /**< \brief (PWM) PWM Channel Additional Edge Register (ch_num = 2) */
  #define REG_PWM_CAEUPD2  (*(__O  uint32_t*)0xF802C448U) /**< \brief (PWM) PWM Channel Additional Edge Update Register (ch_num = 2) */
  #define REG_PWM_ETRG2    (*(__IO uint32_t*)0xF802C44CU) /**< \brief (PWM) PWM External Trigger Register (trg_num = 2) */
  #define REG_PWM_LEBR2    (*(__IO uint32_t*)0xF802C450U) /**< \brief (PWM) PWM Leading-Edge Blanking Register (trg_num = 2) */
  #define REG_PWM_CMUPD3   (*(__O  uint32_t*)0xF802C460U) /**< \brief (PWM) PWM Channel Mode Update Register (ch_num = 3) */
  #define REG_PWM_CAE3     (*(__IO uint32_t*)0xF802C464U) /**< \brief (PWM) PWM Channel Additional Edge Register (ch_num = 3) */
  #define REG_PWM_CAEUPD3  (*(__O  uint32_t*)0xF802C468U) /**< \brief (PWM) PWM Channel Additional Edge Update Register (ch_num = 3) */
  #define REG_PWM_ETRG3    (*(__IO uint32_t*)0xF802C46CU) /**< \brief (PWM) PWM External Trigger Register (trg_num = 3) */
  #define REG_PWM_LEBR3    (*(__IO uint32_t*)0xF802C470U) /**< \brief (PWM) PWM Leading-Edge Blanking Register (trg_num = 3) */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for SFR peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_SFR_EMA                         (0xF8030000U) /**< \brief (SFR) Memory Margin Adjustment Register */
  #define REG_SFR_DDRCFG                      (0xF8030004U) /**< \brief (SFR) DDR Configuration Register */
  #define REG_SFR_OHCIICR                     (0xF8030010U) /**< \brief (SFR) OHCI Interrupt Configuration Register */
  #define REG_SFR_OHCIISR                     (0xF8030014U) /**< \brief (SFR) OHCI Interrupt Status Register */
  #define REG_SFR_CORTEX                      (0xF803001CU) /**< \brief (SFR) Cortex Configuration Register */
  #define REG_SFR_AHB                         (0xF8030020U) /**< \brief (SFR) AHB Configuration Register */
  #define REG_SFR_BRIDGE                      (0xF8030024U) /**< \brief (SFR) Bridge Configuration Register */
  #define REG_SFR_SECURE                      (0xF8030028U) /**< \brief (SFR) Security Configuration Register */
  #define REG_SFR_UTMICKTRIM                  (0xF8030030U) /**< \brief (SFR) UTMI Clock Trimming Register */
  #define REG_SFR_UTMIHSTRIM                  (0xF8030034U) /**< \brief (SFR) UTMI High Speed Trimming Register */
  #define REG_SFR_UTMIFSTRIM                  (0xF8030038U) /**< \brief (SFR) UTMI Full Speed Trimming Register */
  #define REG_SFR_UTMISWAP                    (0xF803003CU) /**< \brief (SFR) UTMI DP/DM Pin Swapping Register */
  #define REG_SFR_EBICFG                      (0xF8030040U) /**< \brief (SFR) EBI Configuration Register */
  #define REG_SFR_ANACFG                      (0xF8030044U) /**< \brief (SFR) Analog Configuration Register */
  #define REG_SFR_CAN                         (0xF8030048U) /**< \brief (SFR) CAN memories address based Register */
  #define REG_SFR_SN0                         (0xF803004CU) /**< \brief (SFR) Serial Number 0 Register */
  #define REG_SFR_SN1                         (0xF8030050U) /**< \brief (SFR) Seriel Number 1 Register */
  #define REG_SFR_AICREDIR                    (0xF8030054U) /**< \brief (SFR) AIC interrupt Redirection Register */
  #define REG_SFR_L2CC_HRAMC                  (0xF8030058U) /**< \brief (SFR) L2CC_HRAMC1 */
  #define REG_SFR_RM0                         (0xF803005CU) /**< \brief (SFR) ReadMargin0 Register */
  #define REG_SFR_RM1                         (0xF8030060U) /**< \brief (SFR) ReadMargin1 Register */
  #define REG_SFR_RM2                         (0xF8030064U) /**< \brief (SFR) ReadMargin2 Register */
  #define REG_SFR_RM3                         (0xF8030068U) /**< \brief (SFR) ReadMargin3 Register */
  #define REG_SFR_RM4                         (0xF803006CU) /**< \brief (SFR) ReadMargin4 Register */
  #define REG_SFR_RM5                         (0xF8030070U) /**< \brief (SFR) ReadMargin5 Register */
  #define REG_SFR_RM6                         (0xF8030074U) /**< \brief (SFR) ReadMargin6 Register */
  #define REG_SFR_RM7                         (0xF8030078U) /**< \brief (SFR) ReadMargin7 Register */
  #define REG_SFR_I2SCLKSEL                   (0xF8030090U) /**< \brief (SFR) I2S Register */
#else
  #define REG_SFR_EMA        (*(__IO uint32_t*)0xF8030000U) /**< \brief (SFR) Memory Margin Adjustment Register */
  #define REG_SFR_DDRCFG     (*(__IO uint32_t*)0xF8030004U) /**< \brief (SFR) DDR Configuration Register */
  #define REG_SFR_OHCIICR    (*(__IO uint32_t*)0xF8030010U) /**< \brief (SFR) OHCI Interrupt Configuration Register */
  #define REG_SFR_OHCIISR    (*(__I  uint32_t*)0xF8030014U) /**< \brief (SFR) OHCI Interrupt Status Register */
  #define REG_SFR_CORTEX     (*(__IO uint32_t*)0xF803001CU) /**< \brief (SFR) Cortex Configuration Register */
  #define REG_SFR_AHB        (*(__IO uint32_t*)0xF8030020U) /**< \brief (SFR) AHB Configuration Register */
  #define REG_SFR_BRIDGE     (*(__IO uint32_t*)0xF8030024U) /**< \brief (SFR) Bridge Configuration Register */
  #define REG_SFR_SECURE     (*(__IO uint32_t*)0xF8030028U) /**< \brief (SFR) Security Configuration Register */
  #define REG_SFR_UTMICKTRIM (*(__IO uint32_t*)0xF8030030U) /**< \brief (SFR) UTMI Clock Trimming Register */
  #define REG_SFR_UTMIHSTRIM (*(__IO uint32_t*)0xF8030034U) /**< \brief (SFR) UTMI High Speed Trimming Register */
  #define REG_SFR_UTMIFSTRIM (*(__IO uint32_t*)0xF8030038U) /**< \brief (SFR) UTMI Full Speed Trimming Register */
  #define REG_SFR_UTMISWAP   (*(__IO uint32_t*)0xF803003CU) /**< \brief (SFR) UTMI DP/DM Pin Swapping Register */
  #define REG_SFR_EBICFG     (*(__IO uint32_t*)0xF8030040U) /**< \brief (SFR) EBI Configuration Register */
  #define REG_SFR_ANACFG     (*(__IO uint32_t*)0xF8030044U) /**< \brief (SFR) Analog Configuration Register */
  #define REG_SFR_CAN        (*(__IO uint32_t*)0xF8030048U) /**< \brief (SFR) CAN memories address based Register */
  #define REG_SFR_SN0        (*(__I  uint32_t*)0xF803004CU) /**< \brief (SFR) Serial Number 0 Register */
  #define REG_SFR_SN1        (*(__I  uint32_t*)0xF8030050U) /**< \brief (SFR) Seriel Number 1 Register */
  #define REG_SFR_AICREDIR   (*(__IO uint32_t*)0xF8030054U) /**< \brief (SFR) AIC interrupt Redirection Register */
  #define REG_SFR_L2CC_HRAMC (*(__IO uint32_t*)0xF8030058U) /**< \brief (SFR) L2CC_HRAMC1 */
  #define REG_SFR_RM0        (*(__IO uint32_t*)0xF803005CU) /**< \brief (SFR) ReadMargin0 Register */
  #define REG_SFR_RM1        (*(__IO uint32_t*)0xF8030060U) /**< \brief (SFR) ReadMargin1 Register */
  #define REG_SFR_RM2        (*(__IO uint32_t*)0xF8030064U) /**< \brief (SFR) ReadMargin2 Register */
  #define REG_SFR_RM3        (*(__IO uint32_t*)0xF8030068U) /**< \brief (SFR) ReadMargin3 Register */
  #define REG_SFR_RM4        (*(__IO uint32_t*)0xF803006CU) /**< \brief (SFR) ReadMargin4 Register */
  #define REG_SFR_RM5        (*(__IO uint32_t*)0xF8030070U) /**< \brief (SFR) ReadMargin5 Register */
  #define REG_SFR_RM6        (*(__IO uint32_t*)0xF8030074U) /**< \brief (SFR) ReadMargin6 Register */
  #define REG_SFR_RM7        (*(__IO uint32_t*)0xF8030078U) /**< \brief (SFR) ReadMargin7 Register */
  #define REG_SFR_I2SCLKSEL  (*(__IO uint32_t*)0xF8030090U) /**< \brief (SFR) I2S Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for FLEXCOM0 peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_FLEXCOM0_MR                           (0xF8034000U) /**< \brief (FLEXCOM0) FLEXCOM Mode Register */
  #define REG_FLEXCOM0_RHR                          (0xF8034010U) /**< \brief (FLEXCOM0) FLEXCOM Receive Holding Register */
  #define REG_FLEXCOM0_THR                          (0xF8034020U) /**< \brief (FLEXCOM0) FLEXCOM Transmit Holding Register */
  #define REG_FLEXCOM0_VERSION                      (0xF80340FCU) /**< \brief (FLEXCOM0) FLEXCOM Version Register */
  #define REG_FLEXCOM0_US_CR                        (0xF8034200U) /**< \brief (FLEXCOM0) USART Control Register */
  #define REG_FLEXCOM0_US_MR                        (0xF8034204U) /**< \brief (FLEXCOM0) USART Mode Register */
  #define REG_FLEXCOM0_US_IER                       (0xF8034208U) /**< \brief (FLEXCOM0) USART Interrupt Enable Register */
  #define REG_FLEXCOM0_US_IDR                       (0xF803420CU) /**< \brief (FLEXCOM0) USART Interrupt Disable Register */
  #define REG_FLEXCOM0_US_IMR                       (0xF8034210U) /**< \brief (FLEXCOM0) USART Interrupt Mask Register */
  #define REG_FLEXCOM0_US_CSR                       (0xF8034214U) /**< \brief (FLEXCOM0) USART Channel Status Register */
  #define REG_FLEXCOM0_US_RHR                       (0xF8034218U) /**< \brief (FLEXCOM0) USART Receive Holding Register */
  #define REG_FLEXCOM0_US_THR                       (0xF803421CU) /**< \brief (FLEXCOM0) USART Transmit Holding Register */
  #define REG_FLEXCOM0_US_BRGR                      (0xF8034220U) /**< \brief (FLEXCOM0) USART Baud Rate Generator Register */
  #define REG_FLEXCOM0_US_RTOR                      (0xF8034224U) /**< \brief (FLEXCOM0) USART Receiver Timeout Register */
  #define REG_FLEXCOM0_US_TTGR                      (0xF8034228U) /**< \brief (FLEXCOM0) USART Transmitter Timeguard Register */
  #define REG_FLEXCOM0_US_FIDI                      (0xF8034240U) /**< \brief (FLEXCOM0) USART FI DI Ratio Register */
  #define REG_FLEXCOM0_US_NER                       (0xF8034244U) /**< \brief (FLEXCOM0) USART Number of Errors Register */
  #define REG_FLEXCOM0_US_IF                        (0xF803424CU) /**< \brief (FLEXCOM0) USART IrDA Filter Register */
  #define REG_FLEXCOM0_US_MAN                       (0xF8034250U) /**< \brief (FLEXCOM0) USART Manchester Configuration Register */
  #define REG_FLEXCOM0_US_LINMR                     (0xF8034254U) /**< \brief (FLEXCOM0) USART LIN Mode Register */
  #define REG_FLEXCOM0_US_LINIR                     (0xF8034258U) /**< \brief (FLEXCOM0) USART LIN Identifier Register */
  #define REG_FLEXCOM0_US_LINBRR                    (0xF803425CU) /**< \brief (FLEXCOM0) USART LIN Baud Rate Register */
  #define REG_FLEXCOM0_US_CMPR                      (0xF8034290U) /**< \brief (FLEXCOM0) USART Comparison Register */
  #define REG_FLEXCOM0_US_WPMR                      (0xF80342E4U) /**< \brief (FLEXCOM0) USART Write Protection Mode Register */
  #define REG_FLEXCOM0_US_WPSR                      (0xF80342E8U) /**< \brief (FLEXCOM0) USART Write Protection Status Register */
  #define REG_FLEXCOM0_US_VERSION                   (0xF80342FCU) /**< \brief (FLEXCOM0) USART Version Register */
  #define REG_FLEXCOM0_SPI_CR                       (0xF8034400U) /**< \brief (FLEXCOM0) SPI Control Register */
  #define REG_FLEXCOM0_SPI_MR                       (0xF8034404U) /**< \brief (FLEXCOM0) SPI Mode Register */
  #define REG_FLEXCOM0_SPI_RDR                      (0xF8034408U) /**< \brief (FLEXCOM0) SPI Receive Data Register */
  #define REG_FLEXCOM0_SPI_TDR                      (0xF803440CU) /**< \brief (FLEXCOM0) SPI Transmit Data Register */
  #define REG_FLEXCOM0_SPI_SR                       (0xF8034410U) /**< \brief (FLEXCOM0) SPI Status Register */
  #define REG_FLEXCOM0_SPI_IER                      (0xF8034414U) /**< \brief (FLEXCOM0) SPI Interrupt Enable Register */
  #define REG_FLEXCOM0_SPI_IDR                      (0xF8034418U) /**< \brief (FLEXCOM0) SPI Interrupt Disable Register */
  #define REG_FLEXCOM0_SPI_IMR                      (0xF803441CU) /**< \brief (FLEXCOM0) SPI Interrupt Mask Register */
  #define REG_FLEXCOM0_SPI_CSR                      (0xF8034430U) /**< \brief (FLEXCOM0) SPI Chip Select Register */
  #define REG_FLEXCOM0_SPI_CMPR                     (0xF8034448U) /**< \brief (FLEXCOM0) SPI Comparison Register */
  #define REG_FLEXCOM0_SPI_WPMR                     (0xF80344E4U) /**< \brief (FLEXCOM0) SPI Write Protection Mode Register */
  #define REG_FLEXCOM0_SPI_WPSR                     (0xF80344E8U) /**< \brief (FLEXCOM0) SPI Write Protection Status Register */
  #define REG_FLEXCOM0_SPI_VERSION                  (0xF80344FCU) /**< \brief (FLEXCOM0) SPI Version Register */
  #define REG_FLEXCOM0_TWI_CR                       (0xF8034600U) /**< \brief (FLEXCOM0) TWI Control Register */
  #define REG_FLEXCOM0_TWI_MMR                      (0xF8034604U) /**< \brief (FLEXCOM0) TWI Master Mode Register */
  #define REG_FLEXCOM0_TWI_SMR                      (0xF8034608U) /**< \brief (FLEXCOM0) TWI Slave Mode Register */
  #define REG_FLEXCOM0_TWI_IADR                     (0xF803460CU) /**< \brief (FLEXCOM0) TWI Internal Address Register */
  #define REG_FLEXCOM0_TWI_CWGR                     (0xF8034610U) /**< \brief (FLEXCOM0) TWI Clock Waveform Generator Register */
  #define REG_FLEXCOM0_TWI_SR                       (0xF8034620U) /**< \brief (FLEXCOM0) TWI Status Register */
  #define REG_FLEXCOM0_TWI_IER                      (0xF8034624U) /**< \brief (FLEXCOM0) TWI Interrupt Enable Register */
  #define REG_FLEXCOM0_TWI_IDR                      (0xF8034628U) /**< \brief (FLEXCOM0) TWI Interrupt Disable Register */
  #define REG_FLEXCOM0_TWI_IMR                      (0xF803462CU) /**< \brief (FLEXCOM0) TWI Interrupt Mask Register */
  #define REG_FLEXCOM0_TWI_RHR                      (0xF8034630U) /**< \brief (FLEXCOM0) TWI Receive Holding Register */
  #define REG_FLEXCOM0_TWI_THR                      (0xF8034634U) /**< \brief (FLEXCOM0) TWI Transmit Holding Register */
  #define REG_FLEXCOM0_TWI_SMBTR                    (0xF8034638U) /**< \brief (FLEXCOM0) TWI SMBus Timing Register */
  #define REG_FLEXCOM0_TWI_ACR                      (0xF8034640U) /**< \brief (FLEXCOM0) TWI Alternative Command Register */
  #define REG_FLEXCOM0_TWI_FILTR                    (0xF8034644U) /**< \brief (FLEXCOM0) TWI Filter Register */
  #define REG_FLEXCOM0_TWI_SWMR                     (0xF803464CU) /**< \brief (FLEXCOM0) TWI SleepWalking Matching Register */
  #define REG_FLEXCOM0_TWI_DR                       (0xF80346D0U) /**< \brief (FLEXCOM0) TWI Debug Register */
  #define REG_FLEXCOM0_TWI_WPMR                     (0xF80346E4U) /**< \brief (FLEXCOM0) TWI Protection Mode Register */
  #define REG_FLEXCOM0_TWI_WPSR                     (0xF80346E8U) /**< \brief (FLEXCOM0) TWI Protection Status Register */
  #define REG_FLEXCOM0_TWI_VER                      (0xF80346FCU) /**< \brief (FLEXCOM0) TWI Version Register */
#else
  #define REG_FLEXCOM0_MR          (*(__IO uint32_t*)0xF8034000U) /**< \brief (FLEXCOM0) FLEXCOM Mode Register */
  #define REG_FLEXCOM0_RHR         (*(__I  uint32_t*)0xF8034010U) /**< \brief (FLEXCOM0) FLEXCOM Receive Holding Register */
  #define REG_FLEXCOM0_THR         (*(__IO uint32_t*)0xF8034020U) /**< \brief (FLEXCOM0) FLEXCOM Transmit Holding Register */
  #define REG_FLEXCOM0_VERSION     (*(__I  uint32_t*)0xF80340FCU) /**< \brief (FLEXCOM0) FLEXCOM Version Register */
  #define REG_FLEXCOM0_US_CR       (*(__O  uint32_t*)0xF8034200U) /**< \brief (FLEXCOM0) USART Control Register */
  #define REG_FLEXCOM0_US_MR       (*(__IO uint32_t*)0xF8034204U) /**< \brief (FLEXCOM0) USART Mode Register */
  #define REG_FLEXCOM0_US_IER      (*(__O  uint32_t*)0xF8034208U) /**< \brief (FLEXCOM0) USART Interrupt Enable Register */
  #define REG_FLEXCOM0_US_IDR      (*(__O  uint32_t*)0xF803420CU) /**< \brief (FLEXCOM0) USART Interrupt Disable Register */
  #define REG_FLEXCOM0_US_IMR      (*(__I  uint32_t*)0xF8034210U) /**< \brief (FLEXCOM0) USART Interrupt Mask Register */
  #define REG_FLEXCOM0_US_CSR      (*(__I  uint32_t*)0xF8034214U) /**< \brief (FLEXCOM0) USART Channel Status Register */
  #define REG_FLEXCOM0_US_RHR      (*(__I  uint32_t*)0xF8034218U) /**< \brief (FLEXCOM0) USART Receive Holding Register */
  #define REG_FLEXCOM0_US_THR      (*(__O  uint32_t*)0xF803421CU) /**< \brief (FLEXCOM0) USART Transmit Holding Register */
  #define REG_FLEXCOM0_US_BRGR     (*(__IO uint32_t*)0xF8034220U) /**< \brief (FLEXCOM0) USART Baud Rate Generator Register */
  #define REG_FLEXCOM0_US_RTOR     (*(__IO uint32_t*)0xF8034224U) /**< \brief (FLEXCOM0) USART Receiver Timeout Register */
  #define REG_FLEXCOM0_US_TTGR     (*(__IO uint32_t*)0xF8034228U) /**< \brief (FLEXCOM0) USART Transmitter Timeguard Register */
  #define REG_FLEXCOM0_US_FIDI     (*(__IO uint32_t*)0xF8034240U) /**< \brief (FLEXCOM0) USART FI DI Ratio Register */
  #define REG_FLEXCOM0_US_NER      (*(__I  uint32_t*)0xF8034244U) /**< \brief (FLEXCOM0) USART Number of Errors Register */
  #define REG_FLEXCOM0_US_IF       (*(__IO uint32_t*)0xF803424CU) /**< \brief (FLEXCOM0) USART IrDA Filter Register */
  #define REG_FLEXCOM0_US_MAN      (*(__IO uint32_t*)0xF8034250U) /**< \brief (FLEXCOM0) USART Manchester Configuration Register */
  #define REG_FLEXCOM0_US_LINMR    (*(__IO uint32_t*)0xF8034254U) /**< \brief (FLEXCOM0) USART LIN Mode Register */
  #define REG_FLEXCOM0_US_LINIR    (*(__IO uint32_t*)0xF8034258U) /**< \brief (FLEXCOM0) USART LIN Identifier Register */
  #define REG_FLEXCOM0_US_LINBRR   (*(__I  uint32_t*)0xF803425CU) /**< \brief (FLEXCOM0) USART LIN Baud Rate Register */
  #define REG_FLEXCOM0_US_CMPR     (*(__IO uint32_t*)0xF8034290U) /**< \brief (FLEXCOM0) USART Comparison Register */
  #define REG_FLEXCOM0_US_WPMR     (*(__IO uint32_t*)0xF80342E4U) /**< \brief (FLEXCOM0) USART Write Protection Mode Register */
  #define REG_FLEXCOM0_US_WPSR     (*(__I  uint32_t*)0xF80342E8U) /**< \brief (FLEXCOM0) USART Write Protection Status Register */
  #define REG_FLEXCOM0_US_VERSION  (*(__I  uint32_t*)0xF80342FCU) /**< \brief (FLEXCOM0) USART Version Register */
  #define REG_FLEXCOM0_SPI_CR      (*(__O  uint32_t*)0xF8034400U) /**< \brief (FLEXCOM0) SPI Control Register */
  #define REG_FLEXCOM0_SPI_MR      (*(__IO uint32_t*)0xF8034404U) /**< \brief (FLEXCOM0) SPI Mode Register */
  #define REG_FLEXCOM0_SPI_RDR     (*(__I  uint32_t*)0xF8034408U) /**< \brief (FLEXCOM0) SPI Receive Data Register */
  #define REG_FLEXCOM0_SPI_TDR     (*(__O  uint32_t*)0xF803440CU) /**< \brief (FLEXCOM0) SPI Transmit Data Register */
  #define REG_FLEXCOM0_SPI_SR      (*(__I  uint32_t*)0xF8034410U) /**< \brief (FLEXCOM0) SPI Status Register */
  #define REG_FLEXCOM0_SPI_IER     (*(__O  uint32_t*)0xF8034414U) /**< \brief (FLEXCOM0) SPI Interrupt Enable Register */
  #define REG_FLEXCOM0_SPI_IDR     (*(__O  uint32_t*)0xF8034418U) /**< \brief (FLEXCOM0) SPI Interrupt Disable Register */
  #define REG_FLEXCOM0_SPI_IMR     (*(__I  uint32_t*)0xF803441CU) /**< \brief (FLEXCOM0) SPI Interrupt Mask Register */
  #define REG_FLEXCOM0_SPI_CSR     (*(__IO uint32_t*)0xF8034430U) /**< \brief (FLEXCOM0) SPI Chip Select Register */
  #define REG_FLEXCOM0_SPI_CMPR    (*(__IO uint32_t*)0xF8034448U) /**< \brief (FLEXCOM0) SPI Comparison Register */
  #define REG_FLEXCOM0_SPI_WPMR    (*(__IO uint32_t*)0xF80344E4U) /**< \brief (FLEXCOM0) SPI Write Protection Mode Register */
  #define REG_FLEXCOM0_SPI_WPSR    (*(__I  uint32_t*)0xF80344E8U) /**< \brief (FLEXCOM0) SPI Write Protection Status Register */
  #define REG_FLEXCOM0_SPI_VERSION (*(__I  uint32_t*)0xF80344FCU) /**< \brief (FLEXCOM0) SPI Version Register */
  #define REG_FLEXCOM0_TWI_CR      (*(__O  uint32_t*)0xF8034600U) /**< \brief (FLEXCOM0) TWI Control Register */
  #define REG_FLEXCOM0_TWI_MMR     (*(__IO uint32_t*)0xF8034604U) /**< \brief (FLEXCOM0) TWI Master Mode Register */
  #define REG_FLEXCOM0_TWI_SMR     (*(__IO uint32_t*)0xF8034608U) /**< \brief (FLEXCOM0) TWI Slave Mode Register */
  #define REG_FLEXCOM0_TWI_IADR    (*(__IO uint32_t*)0xF803460CU) /**< \brief (FLEXCOM0) TWI Internal Address Register */
  #define REG_FLEXCOM0_TWI_CWGR    (*(__IO uint32_t*)0xF8034610U) /**< \brief (FLEXCOM0) TWI Clock Waveform Generator Register */
  #define REG_FLEXCOM0_TWI_SR      (*(__I  uint32_t*)0xF8034620U) /**< \brief (FLEXCOM0) TWI Status Register */
  #define REG_FLEXCOM0_TWI_IER     (*(__O  uint32_t*)0xF8034624U) /**< \brief (FLEXCOM0) TWI Interrupt Enable Register */
  #define REG_FLEXCOM0_TWI_IDR     (*(__O  uint32_t*)0xF8034628U) /**< \brief (FLEXCOM0) TWI Interrupt Disable Register */
  #define REG_FLEXCOM0_TWI_IMR     (*(__I  uint32_t*)0xF803462CU) /**< \brief (FLEXCOM0) TWI Interrupt Mask Register */
  #define REG_FLEXCOM0_TWI_RHR     (*(__I  uint32_t*)0xF8034630U) /**< \brief (FLEXCOM0) TWI Receive Holding Register */
  #define REG_FLEXCOM0_TWI_THR     (*(__O  uint32_t*)0xF8034634U) /**< \brief (FLEXCOM0) TWI Transmit Holding Register */
  #define REG_FLEXCOM0_TWI_SMBTR   (*(__IO uint32_t*)0xF8034638U) /**< \brief (FLEXCOM0) TWI SMBus Timing Register */
  #define REG_FLEXCOM0_TWI_ACR     (*(__IO uint32_t*)0xF8034640U) /**< \brief (FLEXCOM0) TWI Alternative Command Register */
  #define REG_FLEXCOM0_TWI_FILTR   (*(__IO uint32_t*)0xF8034644U) /**< \brief (FLEXCOM0) TWI Filter Register */
  #define REG_FLEXCOM0_TWI_SWMR    (*(__IO uint32_t*)0xF803464CU) /**< \brief (FLEXCOM0) TWI SleepWalking Matching Register */
  #define REG_FLEXCOM0_TWI_DR      (*(__I  uint32_t*)0xF80346D0U) /**< \brief (FLEXCOM0) TWI Debug Register */
  #define REG_FLEXCOM0_TWI_WPMR    (*(__IO uint32_t*)0xF80346E4U) /**< \brief (FLEXCOM0) TWI Protection Mode Register */
  #define REG_FLEXCOM0_TWI_WPSR    (*(__I  uint32_t*)0xF80346E8U) /**< \brief (FLEXCOM0) TWI Protection Status Register */
  #define REG_FLEXCOM0_TWI_VER     (*(__I  uint32_t*)0xF80346FCU) /**< \brief (FLEXCOM0) TWI Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for FLEXCOM1 peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_FLEXCOM1_MR                           (0xF8038000U) /**< \brief (FLEXCOM1) FLEXCOM Mode Register */
  #define REG_FLEXCOM1_RHR                          (0xF8038010U) /**< \brief (FLEXCOM1) FLEXCOM Receive Holding Register */
  #define REG_FLEXCOM1_THR                          (0xF8038020U) /**< \brief (FLEXCOM1) FLEXCOM Transmit Holding Register */
  #define REG_FLEXCOM1_VERSION                      (0xF80380FCU) /**< \brief (FLEXCOM1) FLEXCOM Version Register */
  #define REG_FLEXCOM1_US_CR                        (0xF8038200U) /**< \brief (FLEXCOM1) USART Control Register */
  #define REG_FLEXCOM1_US_MR                        (0xF8038204U) /**< \brief (FLEXCOM1) USART Mode Register */
  #define REG_FLEXCOM1_US_IER                       (0xF8038208U) /**< \brief (FLEXCOM1) USART Interrupt Enable Register */
  #define REG_FLEXCOM1_US_IDR                       (0xF803820CU) /**< \brief (FLEXCOM1) USART Interrupt Disable Register */
  #define REG_FLEXCOM1_US_IMR                       (0xF8038210U) /**< \brief (FLEXCOM1) USART Interrupt Mask Register */
  #define REG_FLEXCOM1_US_CSR                       (0xF8038214U) /**< \brief (FLEXCOM1) USART Channel Status Register */
  #define REG_FLEXCOM1_US_RHR                       (0xF8038218U) /**< \brief (FLEXCOM1) USART Receive Holding Register */
  #define REG_FLEXCOM1_US_THR                       (0xF803821CU) /**< \brief (FLEXCOM1) USART Transmit Holding Register */
  #define REG_FLEXCOM1_US_BRGR                      (0xF8038220U) /**< \brief (FLEXCOM1) USART Baud Rate Generator Register */
  #define REG_FLEXCOM1_US_RTOR                      (0xF8038224U) /**< \brief (FLEXCOM1) USART Receiver Timeout Register */
  #define REG_FLEXCOM1_US_TTGR                      (0xF8038228U) /**< \brief (FLEXCOM1) USART Transmitter Timeguard Register */
  #define REG_FLEXCOM1_US_FIDI                      (0xF8038240U) /**< \brief (FLEXCOM1) USART FI DI Ratio Register */
  #define REG_FLEXCOM1_US_NER                       (0xF8038244U) /**< \brief (FLEXCOM1) USART Number of Errors Register */
  #define REG_FLEXCOM1_US_IF                        (0xF803824CU) /**< \brief (FLEXCOM1) USART IrDA Filter Register */
  #define REG_FLEXCOM1_US_MAN                       (0xF8038250U) /**< \brief (FLEXCOM1) USART Manchester Configuration Register */
  #define REG_FLEXCOM1_US_LINMR                     (0xF8038254U) /**< \brief (FLEXCOM1) USART LIN Mode Register */
  #define REG_FLEXCOM1_US_LINIR                     (0xF8038258U) /**< \brief (FLEXCOM1) USART LIN Identifier Register */
  #define REG_FLEXCOM1_US_LINBRR                    (0xF803825CU) /**< \brief (FLEXCOM1) USART LIN Baud Rate Register */
  #define REG_FLEXCOM1_US_CMPR                      (0xF8038290U) /**< \brief (FLEXCOM1) USART Comparison Register */
  #define REG_FLEXCOM1_US_WPMR                      (0xF80382E4U) /**< \brief (FLEXCOM1) USART Write Protection Mode Register */
  #define REG_FLEXCOM1_US_WPSR                      (0xF80382E8U) /**< \brief (FLEXCOM1) USART Write Protection Status Register */
  #define REG_FLEXCOM1_US_VERSION                   (0xF80382FCU) /**< \brief (FLEXCOM1) USART Version Register */
  #define REG_FLEXCOM1_SPI_CR                       (0xF8038400U) /**< \brief (FLEXCOM1) SPI Control Register */
  #define REG_FLEXCOM1_SPI_MR                       (0xF8038404U) /**< \brief (FLEXCOM1) SPI Mode Register */
  #define REG_FLEXCOM1_SPI_RDR                      (0xF8038408U) /**< \brief (FLEXCOM1) SPI Receive Data Register */
  #define REG_FLEXCOM1_SPI_TDR                      (0xF803840CU) /**< \brief (FLEXCOM1) SPI Transmit Data Register */
  #define REG_FLEXCOM1_SPI_SR                       (0xF8038410U) /**< \brief (FLEXCOM1) SPI Status Register */
  #define REG_FLEXCOM1_SPI_IER                      (0xF8038414U) /**< \brief (FLEXCOM1) SPI Interrupt Enable Register */
  #define REG_FLEXCOM1_SPI_IDR                      (0xF8038418U) /**< \brief (FLEXCOM1) SPI Interrupt Disable Register */
  #define REG_FLEXCOM1_SPI_IMR                      (0xF803841CU) /**< \brief (FLEXCOM1) SPI Interrupt Mask Register */
  #define REG_FLEXCOM1_SPI_CSR                      (0xF8038430U) /**< \brief (FLEXCOM1) SPI Chip Select Register */
  #define REG_FLEXCOM1_SPI_CMPR                     (0xF8038448U) /**< \brief (FLEXCOM1) SPI Comparison Register */
  #define REG_FLEXCOM1_SPI_WPMR                     (0xF80384E4U) /**< \brief (FLEXCOM1) SPI Write Protection Mode Register */
  #define REG_FLEXCOM1_SPI_WPSR                     (0xF80384E8U) /**< \brief (FLEXCOM1) SPI Write Protection Status Register */
  #define REG_FLEXCOM1_SPI_VERSION                  (0xF80384FCU) /**< \brief (FLEXCOM1) SPI Version Register */
  #define REG_FLEXCOM1_TWI_CR                       (0xF8038600U) /**< \brief (FLEXCOM1) TWI Control Register */
  #define REG_FLEXCOM1_TWI_MMR                      (0xF8038604U) /**< \brief (FLEXCOM1) TWI Master Mode Register */
  #define REG_FLEXCOM1_TWI_SMR                      (0xF8038608U) /**< \brief (FLEXCOM1) TWI Slave Mode Register */
  #define REG_FLEXCOM1_TWI_IADR                     (0xF803860CU) /**< \brief (FLEXCOM1) TWI Internal Address Register */
  #define REG_FLEXCOM1_TWI_CWGR                     (0xF8038610U) /**< \brief (FLEXCOM1) TWI Clock Waveform Generator Register */
  #define REG_FLEXCOM1_TWI_SR                       (0xF8038620U) /**< \brief (FLEXCOM1) TWI Status Register */
  #define REG_FLEXCOM1_TWI_IER                      (0xF8038624U) /**< \brief (FLEXCOM1) TWI Interrupt Enable Register */
  #define REG_FLEXCOM1_TWI_IDR                      (0xF8038628U) /**< \brief (FLEXCOM1) TWI Interrupt Disable Register */
  #define REG_FLEXCOM1_TWI_IMR                      (0xF803862CU) /**< \brief (FLEXCOM1) TWI Interrupt Mask Register */
  #define REG_FLEXCOM1_TWI_RHR                      (0xF8038630U) /**< \brief (FLEXCOM1) TWI Receive Holding Register */
  #define REG_FLEXCOM1_TWI_THR                      (0xF8038634U) /**< \brief (FLEXCOM1) TWI Transmit Holding Register */
  #define REG_FLEXCOM1_TWI_SMBTR                    (0xF8038638U) /**< \brief (FLEXCOM1) TWI SMBus Timing Register */
  #define REG_FLEXCOM1_TWI_ACR                      (0xF8038640U) /**< \brief (FLEXCOM1) TWI Alternative Command Register */
  #define REG_FLEXCOM1_TWI_FILTR                    (0xF8038644U) /**< \brief (FLEXCOM1) TWI Filter Register */
  #define REG_FLEXCOM1_TWI_SWMR                     (0xF803864CU) /**< \brief (FLEXCOM1) TWI SleepWalking Matching Register */
  #define REG_FLEXCOM1_TWI_DR                       (0xF80386D0U) /**< \brief (FLEXCOM1) TWI Debug Register */
  #define REG_FLEXCOM1_TWI_WPMR                     (0xF80386E4U) /**< \brief (FLEXCOM1) TWI Protection Mode Register */
  #define REG_FLEXCOM1_TWI_WPSR                     (0xF80386E8U) /**< \brief (FLEXCOM1) TWI Protection Status Register */
  #define REG_FLEXCOM1_TWI_VER                      (0xF80386FCU) /**< \brief (FLEXCOM1) TWI Version Register */
#else
  #define REG_FLEXCOM1_MR          (*(__IO uint32_t*)0xF8038000U) /**< \brief (FLEXCOM1) FLEXCOM Mode Register */
  #define REG_FLEXCOM1_RHR         (*(__I  uint32_t*)0xF8038010U) /**< \brief (FLEXCOM1) FLEXCOM Receive Holding Register */
  #define REG_FLEXCOM1_THR         (*(__IO uint32_t*)0xF8038020U) /**< \brief (FLEXCOM1) FLEXCOM Transmit Holding Register */
  #define REG_FLEXCOM1_VERSION     (*(__I  uint32_t*)0xF80380FCU) /**< \brief (FLEXCOM1) FLEXCOM Version Register */
  #define REG_FLEXCOM1_US_CR       (*(__O  uint32_t*)0xF8038200U) /**< \brief (FLEXCOM1) USART Control Register */
  #define REG_FLEXCOM1_US_MR       (*(__IO uint32_t*)0xF8038204U) /**< \brief (FLEXCOM1) USART Mode Register */
  #define REG_FLEXCOM1_US_IER      (*(__O  uint32_t*)0xF8038208U) /**< \brief (FLEXCOM1) USART Interrupt Enable Register */
  #define REG_FLEXCOM1_US_IDR      (*(__O  uint32_t*)0xF803820CU) /**< \brief (FLEXCOM1) USART Interrupt Disable Register */
  #define REG_FLEXCOM1_US_IMR      (*(__I  uint32_t*)0xF8038210U) /**< \brief (FLEXCOM1) USART Interrupt Mask Register */
  #define REG_FLEXCOM1_US_CSR      (*(__I  uint32_t*)0xF8038214U) /**< \brief (FLEXCOM1) USART Channel Status Register */
  #define REG_FLEXCOM1_US_RHR      (*(__I  uint32_t*)0xF8038218U) /**< \brief (FLEXCOM1) USART Receive Holding Register */
  #define REG_FLEXCOM1_US_THR      (*(__O  uint32_t*)0xF803821CU) /**< \brief (FLEXCOM1) USART Transmit Holding Register */
  #define REG_FLEXCOM1_US_BRGR     (*(__IO uint32_t*)0xF8038220U) /**< \brief (FLEXCOM1) USART Baud Rate Generator Register */
  #define REG_FLEXCOM1_US_RTOR     (*(__IO uint32_t*)0xF8038224U) /**< \brief (FLEXCOM1) USART Receiver Timeout Register */
  #define REG_FLEXCOM1_US_TTGR     (*(__IO uint32_t*)0xF8038228U) /**< \brief (FLEXCOM1) USART Transmitter Timeguard Register */
  #define REG_FLEXCOM1_US_FIDI     (*(__IO uint32_t*)0xF8038240U) /**< \brief (FLEXCOM1) USART FI DI Ratio Register */
  #define REG_FLEXCOM1_US_NER      (*(__I  uint32_t*)0xF8038244U) /**< \brief (FLEXCOM1) USART Number of Errors Register */
  #define REG_FLEXCOM1_US_IF       (*(__IO uint32_t*)0xF803824CU) /**< \brief (FLEXCOM1) USART IrDA Filter Register */
  #define REG_FLEXCOM1_US_MAN      (*(__IO uint32_t*)0xF8038250U) /**< \brief (FLEXCOM1) USART Manchester Configuration Register */
  #define REG_FLEXCOM1_US_LINMR    (*(__IO uint32_t*)0xF8038254U) /**< \brief (FLEXCOM1) USART LIN Mode Register */
  #define REG_FLEXCOM1_US_LINIR    (*(__IO uint32_t*)0xF8038258U) /**< \brief (FLEXCOM1) USART LIN Identifier Register */
  #define REG_FLEXCOM1_US_LINBRR   (*(__I  uint32_t*)0xF803825CU) /**< \brief (FLEXCOM1) USART LIN Baud Rate Register */
  #define REG_FLEXCOM1_US_CMPR     (*(__IO uint32_t*)0xF8038290U) /**< \brief (FLEXCOM1) USART Comparison Register */
  #define REG_FLEXCOM1_US_WPMR     (*(__IO uint32_t*)0xF80382E4U) /**< \brief (FLEXCOM1) USART Write Protection Mode Register */
  #define REG_FLEXCOM1_US_WPSR     (*(__I  uint32_t*)0xF80382E8U) /**< \brief (FLEXCOM1) USART Write Protection Status Register */
  #define REG_FLEXCOM1_US_VERSION  (*(__I  uint32_t*)0xF80382FCU) /**< \brief (FLEXCOM1) USART Version Register */
  #define REG_FLEXCOM1_SPI_CR      (*(__O  uint32_t*)0xF8038400U) /**< \brief (FLEXCOM1) SPI Control Register */
  #define REG_FLEXCOM1_SPI_MR      (*(__IO uint32_t*)0xF8038404U) /**< \brief (FLEXCOM1) SPI Mode Register */
  #define REG_FLEXCOM1_SPI_RDR     (*(__I  uint32_t*)0xF8038408U) /**< \brief (FLEXCOM1) SPI Receive Data Register */
  #define REG_FLEXCOM1_SPI_TDR     (*(__O  uint32_t*)0xF803840CU) /**< \brief (FLEXCOM1) SPI Transmit Data Register */
  #define REG_FLEXCOM1_SPI_SR      (*(__I  uint32_t*)0xF8038410U) /**< \brief (FLEXCOM1) SPI Status Register */
  #define REG_FLEXCOM1_SPI_IER     (*(__O  uint32_t*)0xF8038414U) /**< \brief (FLEXCOM1) SPI Interrupt Enable Register */
  #define REG_FLEXCOM1_SPI_IDR     (*(__O  uint32_t*)0xF8038418U) /**< \brief (FLEXCOM1) SPI Interrupt Disable Register */
  #define REG_FLEXCOM1_SPI_IMR     (*(__I  uint32_t*)0xF803841CU) /**< \brief (FLEXCOM1) SPI Interrupt Mask Register */
  #define REG_FLEXCOM1_SPI_CSR     (*(__IO uint32_t*)0xF8038430U) /**< \brief (FLEXCOM1) SPI Chip Select Register */
  #define REG_FLEXCOM1_SPI_CMPR    (*(__IO uint32_t*)0xF8038448U) /**< \brief (FLEXCOM1) SPI Comparison Register */
  #define REG_FLEXCOM1_SPI_WPMR    (*(__IO uint32_t*)0xF80384E4U) /**< \brief (FLEXCOM1) SPI Write Protection Mode Register */
  #define REG_FLEXCOM1_SPI_WPSR    (*(__I  uint32_t*)0xF80384E8U) /**< \brief (FLEXCOM1) SPI Write Protection Status Register */
  #define REG_FLEXCOM1_SPI_VERSION (*(__I  uint32_t*)0xF80384FCU) /**< \brief (FLEXCOM1) SPI Version Register */
  #define REG_FLEXCOM1_TWI_CR      (*(__O  uint32_t*)0xF8038600U) /**< \brief (FLEXCOM1) TWI Control Register */
  #define REG_FLEXCOM1_TWI_MMR     (*(__IO uint32_t*)0xF8038604U) /**< \brief (FLEXCOM1) TWI Master Mode Register */
  #define REG_FLEXCOM1_TWI_SMR     (*(__IO uint32_t*)0xF8038608U) /**< \brief (FLEXCOM1) TWI Slave Mode Register */
  #define REG_FLEXCOM1_TWI_IADR    (*(__IO uint32_t*)0xF803860CU) /**< \brief (FLEXCOM1) TWI Internal Address Register */
  #define REG_FLEXCOM1_TWI_CWGR    (*(__IO uint32_t*)0xF8038610U) /**< \brief (FLEXCOM1) TWI Clock Waveform Generator Register */
  #define REG_FLEXCOM1_TWI_SR      (*(__I  uint32_t*)0xF8038620U) /**< \brief (FLEXCOM1) TWI Status Register */
  #define REG_FLEXCOM1_TWI_IER     (*(__O  uint32_t*)0xF8038624U) /**< \brief (FLEXCOM1) TWI Interrupt Enable Register */
  #define REG_FLEXCOM1_TWI_IDR     (*(__O  uint32_t*)0xF8038628U) /**< \brief (FLEXCOM1) TWI Interrupt Disable Register */
  #define REG_FLEXCOM1_TWI_IMR     (*(__I  uint32_t*)0xF803862CU) /**< \brief (FLEXCOM1) TWI Interrupt Mask Register */
  #define REG_FLEXCOM1_TWI_RHR     (*(__I  uint32_t*)0xF8038630U) /**< \brief (FLEXCOM1) TWI Receive Holding Register */
  #define REG_FLEXCOM1_TWI_THR     (*(__O  uint32_t*)0xF8038634U) /**< \brief (FLEXCOM1) TWI Transmit Holding Register */
  #define REG_FLEXCOM1_TWI_SMBTR   (*(__IO uint32_t*)0xF8038638U) /**< \brief (FLEXCOM1) TWI SMBus Timing Register */
  #define REG_FLEXCOM1_TWI_ACR     (*(__IO uint32_t*)0xF8038640U) /**< \brief (FLEXCOM1) TWI Alternative Command Register */
  #define REG_FLEXCOM1_TWI_FILTR   (*(__IO uint32_t*)0xF8038644U) /**< \brief (FLEXCOM1) TWI Filter Register */
  #define REG_FLEXCOM1_TWI_SWMR    (*(__IO uint32_t*)0xF803864CU) /**< \brief (FLEXCOM1) TWI SleepWalking Matching Register */
  #define REG_FLEXCOM1_TWI_DR      (*(__I  uint32_t*)0xF80386D0U) /**< \brief (FLEXCOM1) TWI Debug Register */
  #define REG_FLEXCOM1_TWI_WPMR    (*(__IO uint32_t*)0xF80386E4U) /**< \brief (FLEXCOM1) TWI Protection Mode Register */
  #define REG_FLEXCOM1_TWI_WPSR    (*(__I  uint32_t*)0xF80386E8U) /**< \brief (FLEXCOM1) TWI Protection Status Register */
  #define REG_FLEXCOM1_TWI_VER     (*(__I  uint32_t*)0xF80386FCU) /**< \brief (FLEXCOM1) TWI Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for SAIC peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_SAIC_SSR                      (0xF803C000U) /**< \brief (SAIC) Source Select Register */
  #define REG_SAIC_SMR                      (0xF803C004U) /**< \brief (SAIC) Source Mode Register */
  #define REG_SAIC_SVR                      (0xF803C008U) /**< \brief (SAIC) Source Vector Register */
  #define REG_SAIC_IVR                      (0xF803C010U) /**< \brief (SAIC) Interrupt Vector Register */
  #define REG_SAIC_FVR                      (0xF803C014U) /**< \brief (SAIC) FIQ Vector Register */
  #define REG_SAIC_ISR                      (0xF803C018U) /**< \brief (SAIC) Interrupt Status Register */
  #define REG_SAIC_IPR0                     (0xF803C020U) /**< \brief (SAIC) Interrupt Pending Register 0 */
  #define REG_SAIC_IPR1                     (0xF803C024U) /**< \brief (SAIC) Interrupt Pending Register 1 */
  #define REG_SAIC_IPR2                     (0xF803C028U) /**< \brief (SAIC) Interrupt Pending Register 2 */
  #define REG_SAIC_IPR3                     (0xF803C02CU) /**< \brief (SAIC) Interrupt Pending Register 3 */
  #define REG_SAIC_IMR                      (0xF803C030U) /**< \brief (SAIC) Interrupt Mask Register */
  #define REG_SAIC_CISR                     (0xF803C034U) /**< \brief (SAIC) Core Interrupt Status Register */
  #define REG_SAIC_EOICR                    (0xF803C038U) /**< \brief (SAIC) End of Interrupt Command Register */
  #define REG_SAIC_SPU                      (0xF803C03CU) /**< \brief (SAIC) Spurious Interrupt Vector Register */
  #define REG_SAIC_IECR                     (0xF803C040U) /**< \brief (SAIC) Interrupt Enable Command Register */
  #define REG_SAIC_IDCR                     (0xF803C044U) /**< \brief (SAIC) Interrupt Disable Command Register */
  #define REG_SAIC_ICCR                     (0xF803C048U) /**< \brief (SAIC) Interrupt Clear Command Register */
  #define REG_SAIC_ISCR                     (0xF803C04CU) /**< \brief (SAIC) Interrupt Set Command Register */
  #define REG_SAIC_DCR                      (0xF803C06CU) /**< \brief (SAIC) Debug Control Register */
  #define REG_SAIC_WPMR                     (0xF803C0E4U) /**< \brief (SAIC) Write Protection Mode Register */
  #define REG_SAIC_WPSR                     (0xF803C0E8U) /**< \brief (SAIC) Write Protection Status Register */
  #define REG_SAIC_VERSION                  (0xF803C0FCU) /**< \brief (SAIC) AIC Version Register */
#else
  #define REG_SAIC_SSR     (*(__IO uint32_t*)0xF803C000U) /**< \brief (SAIC) Source Select Register */
  #define REG_SAIC_SMR     (*(__IO uint32_t*)0xF803C004U) /**< \brief (SAIC) Source Mode Register */
  #define REG_SAIC_SVR     (*(__IO uint32_t*)0xF803C008U) /**< \brief (SAIC) Source Vector Register */
  #define REG_SAIC_IVR     (*(__I  uint32_t*)0xF803C010U) /**< \brief (SAIC) Interrupt Vector Register */
  #define REG_SAIC_FVR     (*(__I  uint32_t*)0xF803C014U) /**< \brief (SAIC) FIQ Vector Register */
  #define REG_SAIC_ISR     (*(__I  uint32_t*)0xF803C018U) /**< \brief (SAIC) Interrupt Status Register */
  #define REG_SAIC_IPR0    (*(__I  uint32_t*)0xF803C020U) /**< \brief (SAIC) Interrupt Pending Register 0 */
  #define REG_SAIC_IPR1    (*(__I  uint32_t*)0xF803C024U) /**< \brief (SAIC) Interrupt Pending Register 1 */
  #define REG_SAIC_IPR2    (*(__I  uint32_t*)0xF803C028U) /**< \brief (SAIC) Interrupt Pending Register 2 */
  #define REG_SAIC_IPR3    (*(__I  uint32_t*)0xF803C02CU) /**< \brief (SAIC) Interrupt Pending Register 3 */
  #define REG_SAIC_IMR     (*(__I  uint32_t*)0xF803C030U) /**< \brief (SAIC) Interrupt Mask Register */
  #define REG_SAIC_CISR    (*(__I  uint32_t*)0xF803C034U) /**< \brief (SAIC) Core Interrupt Status Register */
  #define REG_SAIC_EOICR   (*(__O  uint32_t*)0xF803C038U) /**< \brief (SAIC) End of Interrupt Command Register */
  #define REG_SAIC_SPU     (*(__IO uint32_t*)0xF803C03CU) /**< \brief (SAIC) Spurious Interrupt Vector Register */
  #define REG_SAIC_IECR    (*(__O  uint32_t*)0xF803C040U) /**< \brief (SAIC) Interrupt Enable Command Register */
  #define REG_SAIC_IDCR    (*(__O  uint32_t*)0xF803C044U) /**< \brief (SAIC) Interrupt Disable Command Register */
  #define REG_SAIC_ICCR    (*(__O  uint32_t*)0xF803C048U) /**< \brief (SAIC) Interrupt Clear Command Register */
  #define REG_SAIC_ISCR    (*(__O  uint32_t*)0xF803C04CU) /**< \brief (SAIC) Interrupt Set Command Register */
  #define REG_SAIC_DCR     (*(__IO uint32_t*)0xF803C06CU) /**< \brief (SAIC) Debug Control Register */
  #define REG_SAIC_WPMR    (*(__IO uint32_t*)0xF803C0E4U) /**< \brief (SAIC) Write Protection Mode Register */
  #define REG_SAIC_WPSR    (*(__I  uint32_t*)0xF803C0E8U) /**< \brief (SAIC) Write Protection Status Register */
  #define REG_SAIC_VERSION (*(__I  uint32_t*)0xF803C0FCU) /**< \brief (SAIC) AIC Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for ICM peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_ICM_CFG                       (0xF8040000U) /**< \brief (ICM) Configuration Register */
  #define REG_ICM_CTRL                      (0xF8040004U) /**< \brief (ICM) Control Register */
  #define REG_ICM_SR                        (0xF8040008U) /**< \brief (ICM) Status Register */
  #define REG_ICM_IER                       (0xF8040010U) /**< \brief (ICM) Interrupt Enable Register */
  #define REG_ICM_IDR                       (0xF8040014U) /**< \brief (ICM) Interrupt Disable Register */
  #define REG_ICM_IMR                       (0xF8040018U) /**< \brief (ICM) Interrupt Mask Register */
  #define REG_ICM_ISR                       (0xF804001CU) /**< \brief (ICM) Interrupt Status Register */
  #define REG_ICM_UASR                      (0xF8040020U) /**< \brief (ICM) Undefined Access Status Register */
  #define REG_ICM_DSCR                      (0xF8040030U) /**< \brief (ICM) Region Descriptor Area Start Address Register */
  #define REG_ICM_HASH                      (0xF8040034U) /**< \brief (ICM) Region Hash Area Start Address Register */
  #define REG_ICM_UIHVAL                    (0xF8040038U) /**< \brief (ICM) User Initial Hash Value 0 Register */
  #define REG_ICM_ADDRSIZE                  (0xF80400ECU) /**< \brief (ICM) Address Size Register */
  #define REG_ICM_IPNAME                    (0xF80400F0U) /**< \brief (ICM) IP Name 1 Register */
  #define REG_ICM_FEATURES                  (0xF80400F8U) /**< \brief (ICM) Feature Register */
  #define REG_ICM_VERSION                   (0xF80400FCU) /**< \brief (ICM) Version Register */
#else
  #define REG_ICM_CFG      (*(__IO uint32_t*)0xF8040000U) /**< \brief (ICM) Configuration Register */
  #define REG_ICM_CTRL     (*(__O  uint32_t*)0xF8040004U) /**< \brief (ICM) Control Register */
  #define REG_ICM_SR       (*(__O  uint32_t*)0xF8040008U) /**< \brief (ICM) Status Register */
  #define REG_ICM_IER      (*(__O  uint32_t*)0xF8040010U) /**< \brief (ICM) Interrupt Enable Register */
  #define REG_ICM_IDR      (*(__O  uint32_t*)0xF8040014U) /**< \brief (ICM) Interrupt Disable Register */
  #define REG_ICM_IMR      (*(__I  uint32_t*)0xF8040018U) /**< \brief (ICM) Interrupt Mask Register */
  #define REG_ICM_ISR      (*(__I  uint32_t*)0xF804001CU) /**< \brief (ICM) Interrupt Status Register */
  #define REG_ICM_UASR     (*(__I  uint32_t*)0xF8040020U) /**< \brief (ICM) Undefined Access Status Register */
  #define REG_ICM_DSCR     (*(__IO uint32_t*)0xF8040030U) /**< \brief (ICM) Region Descriptor Area Start Address Register */
  #define REG_ICM_HASH     (*(__IO uint32_t*)0xF8040034U) /**< \brief (ICM) Region Hash Area Start Address Register */
  #define REG_ICM_UIHVAL   (*(__O  uint32_t*)0xF8040038U) /**< \brief (ICM) User Initial Hash Value 0 Register */
  #define REG_ICM_ADDRSIZE (*(__I  uint32_t*)0xF80400ECU) /**< \brief (ICM) Address Size Register */
  #define REG_ICM_IPNAME   (*(__I  uint32_t*)0xF80400F0U) /**< \brief (ICM) IP Name 1 Register */
  #define REG_ICM_FEATURES (*(__I  uint32_t*)0xF80400F8U) /**< \brief (ICM) Feature Register */
  #define REG_ICM_VERSION  (*(__I  uint32_t*)0xF80400FCU) /**< \brief (ICM) Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for RSTC peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_RSTC_CR                  (0xF8048000U) /**< \brief (RSTC) Control Register */
  #define REG_RSTC_SR                  (0xF8048004U) /**< \brief (RSTC) Status Register */
  #define REG_RSTC_MR                  (0xF8048008U) /**< \brief (RSTC) Mode Register */
#else
  #define REG_RSTC_CR (*(__O  uint32_t*)0xF8048000U) /**< \brief (RSTC) Control Register */
  #define REG_RSTC_SR (*(__I  uint32_t*)0xF8048004U) /**< \brief (RSTC) Status Register */
  #define REG_RSTC_MR (*(__IO uint32_t*)0xF8048008U) /**< \brief (RSTC) Mode Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for SHDWC peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_SHDWC_CR                    (0xF8048010U) /**< \brief (SHDWC) Shutdown Control Register */
  #define REG_SHDWC_MR                    (0xF8048014U) /**< \brief (SHDWC) Shutdown Mode Register */
  #define REG_SHDWC_SR                    (0xF8048018U) /**< \brief (SHDWC) Shutdown Status Register */
  #define REG_SHDWC_WUIR                  (0xF804801CU) /**< \brief (SHDWC) Shutdown Wake-up Inputs Register */
#else
  #define REG_SHDWC_CR   (*(__O  uint32_t*)0xF8048010U) /**< \brief (SHDWC) Shutdown Control Register */
  #define REG_SHDWC_MR   (*(__IO uint32_t*)0xF8048014U) /**< \brief (SHDWC) Shutdown Mode Register */
  #define REG_SHDWC_SR   (*(__I  uint32_t*)0xF8048018U) /**< \brief (SHDWC) Shutdown Status Register */
  #define REG_SHDWC_WUIR (*(__IO uint32_t*)0xF804801CU) /**< \brief (SHDWC) Shutdown Wake-up Inputs Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for PIT peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_PIT_MR                    (0xF8048030U) /**< \brief (PIT) Mode Register */
  #define REG_PIT_SR                    (0xF8048034U) /**< \brief (PIT) Status Register */
  #define REG_PIT_PIVR                  (0xF8048038U) /**< \brief (PIT) Periodic Interval Value Register */
  #define REG_PIT_PIIR                  (0xF804803CU) /**< \brief (PIT) Periodic Interval Image Register */
#else
  #define REG_PIT_MR   (*(__IO uint32_t*)0xF8048030U) /**< \brief (PIT) Mode Register */
  #define REG_PIT_SR   (*(__I  uint32_t*)0xF8048034U) /**< \brief (PIT) Status Register */
  #define REG_PIT_PIVR (*(__I  uint32_t*)0xF8048038U) /**< \brief (PIT) Periodic Interval Value Register */
  #define REG_PIT_PIIR (*(__I  uint32_t*)0xF804803CU) /**< \brief (PIT) Periodic Interval Image Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for WDT peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_WDT_CR                  (0xF8048040U) /**< \brief (WDT) Control Register */
  #define REG_WDT_MR                  (0xF8048044U) /**< \brief (WDT) Mode Register */
  #define REG_WDT_SR                  (0xF8048048U) /**< \brief (WDT) Status Register */
#else
  #define REG_WDT_CR (*(__O  uint32_t*)0xF8048040U) /**< \brief (WDT) Control Register */
  #define REG_WDT_MR (*(__IO uint32_t*)0xF8048044U) /**< \brief (WDT) Mode Register */
  #define REG_WDT_SR (*(__I  uint32_t*)0xF8048048U) /**< \brief (WDT) Status Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for SCKC peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_SCKC_CR                  (0xF8048050U) /**< \brief (SCKC) Slow Clock Controller Configuration Register */
#else
  #define REG_SCKC_CR (*(__IO uint32_t*)0xF8048050U) /**< \brief (SCKC) Slow Clock Controller Configuration Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for RTC peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_RTC_CR                       (0xF80480B0U) /**< \brief (RTC) Control Register */
  #define REG_RTC_MR                       (0xF80480B4U) /**< \brief (RTC) Mode Register */
  #define REG_RTC_TIMR                     (0xF80480B8U) /**< \brief (RTC) Time Register */
  #define REG_RTC_CALR                     (0xF80480BCU) /**< \brief (RTC) Calendar Register */
  #define REG_RTC_TIMALR                   (0xF80480C0U) /**< \brief (RTC) Time Alarm Register */
  #define REG_RTC_CALALR                   (0xF80480C4U) /**< \brief (RTC) Calendar Alarm Register */
  #define REG_RTC_SR                       (0xF80480C8U) /**< \brief (RTC) Status Register */
  #define REG_RTC_SCCR                     (0xF80480CCU) /**< \brief (RTC) Status Clear Command Register */
  #define REG_RTC_IER                      (0xF80480D0U) /**< \brief (RTC) Interrupt Enable Register */
  #define REG_RTC_IDR                      (0xF80480D4U) /**< \brief (RTC) Interrupt Disable Register */
  #define REG_RTC_IMR                      (0xF80480D8U) /**< \brief (RTC) Interrupt Mask Register */
  #define REG_RTC_VER                      (0xF80480DCU) /**< \brief (RTC) Valid Entry Register */
  #define REG_RTC_TSTR0                    (0xF8048160U) /**< \brief (RTC) TimeStamp Time Register 0 */
  #define REG_RTC_TSDR0                    (0xF8048164U) /**< \brief (RTC) TimeStamp Date Register 0 */
  #define REG_RTC_TSSR0                    (0xF8048168U) /**< \brief (RTC) TimeStamp Source Register 0 */
  #define REG_RTC_TSTR1                    (0xF804816CU) /**< \brief (RTC) TimeStamp Time Register 1 */
  #define REG_RTC_TSDR1                    (0xF8048170U) /**< \brief (RTC) TimeStamp Date Register 1 */
  #define REG_RTC_TSSR1                    (0xF8048174U) /**< \brief (RTC) TimeStamp Source Register 1 */
  #define REG_RTC_MSR                      (0xF8048180U) /**< \brief (RTC) Milliseconds Register */
  #define REG_RTC_VERSION                  (0xF80481ACU) /**< \brief (RTC) Version Register */
#else
  #define REG_RTC_CR      (*(__IO uint32_t*)0xF80480B0U) /**< \brief (RTC) Control Register */
  #define REG_RTC_MR      (*(__IO uint32_t*)0xF80480B4U) /**< \brief (RTC) Mode Register */
  #define REG_RTC_TIMR    (*(__IO uint32_t*)0xF80480B8U) /**< \brief (RTC) Time Register */
  #define REG_RTC_CALR    (*(__IO uint32_t*)0xF80480BCU) /**< \brief (RTC) Calendar Register */
  #define REG_RTC_TIMALR  (*(__IO uint32_t*)0xF80480C0U) /**< \brief (RTC) Time Alarm Register */
  #define REG_RTC_CALALR  (*(__IO uint32_t*)0xF80480C4U) /**< \brief (RTC) Calendar Alarm Register */
  #define REG_RTC_SR      (*(__I  uint32_t*)0xF80480C8U) /**< \brief (RTC) Status Register */
  #define REG_RTC_SCCR    (*(__O  uint32_t*)0xF80480CCU) /**< \brief (RTC) Status Clear Command Register */
  #define REG_RTC_IER     (*(__O  uint32_t*)0xF80480D0U) /**< \brief (RTC) Interrupt Enable Register */
  #define REG_RTC_IDR     (*(__O  uint32_t*)0xF80480D4U) /**< \brief (RTC) Interrupt Disable Register */
  #define REG_RTC_IMR     (*(__I  uint32_t*)0xF80480D8U) /**< \brief (RTC) Interrupt Mask Register */
  #define REG_RTC_VER     (*(__I  uint32_t*)0xF80480DCU) /**< \brief (RTC) Valid Entry Register */
  #define REG_RTC_TSTR0   (*(__I  uint32_t*)0xF8048160U) /**< \brief (RTC) TimeStamp Time Register 0 */
  #define REG_RTC_TSDR0   (*(__I  uint32_t*)0xF8048164U) /**< \brief (RTC) TimeStamp Date Register 0 */
  #define REG_RTC_TSSR0   (*(__I  uint32_t*)0xF8048168U) /**< \brief (RTC) TimeStamp Source Register 0 */
  #define REG_RTC_TSTR1   (*(__I  uint32_t*)0xF804816CU) /**< \brief (RTC) TimeStamp Time Register 1 */
  #define REG_RTC_TSDR1   (*(__I  uint32_t*)0xF8048170U) /**< \brief (RTC) TimeStamp Date Register 1 */
  #define REG_RTC_TSSR1   (*(__I  uint32_t*)0xF8048174U) /**< \brief (RTC) TimeStamp Source Register 1 */
  #define REG_RTC_MSR     (*(__I  uint32_t*)0xF8048180U) /**< \brief (RTC) Milliseconds Register */
  #define REG_RTC_VERSION (*(__I  uint32_t*)0xF80481ACU) /**< \brief (RTC) Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for ACC peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_ACC_CR                    (0xF804A000U) /**< \brief (ACC) Control Register */
  #define REG_ACC_MR                    (0xF804A004U) /**< \brief (ACC) Mode Register */
  #define REG_ACC_IER                   (0xF804A024U) /**< \brief (ACC) Interrupt Enable Register */
  #define REG_ACC_IDR                   (0xF804A028U) /**< \brief (ACC) Interrupt Disable Register */
  #define REG_ACC_IMR                   (0xF804A02CU) /**< \brief (ACC) Interrupt Mask Register */
  #define REG_ACC_ISR                   (0xF804A030U) /**< \brief (ACC) Interrupt Status Register */
  #define REG_ACC_ACR                   (0xF804A094U) /**< \brief (ACC) Analog Control Register */
  #define REG_ACC_WPMR                  (0xF804A0E4U) /**< \brief (ACC) Write Protection Mode Register */
  #define REG_ACC_WPSR                  (0xF804A0E8U) /**< \brief (ACC) Write Protection Status Register */
  #define REG_ACC_VER                   (0xF804A0FCU) /**< \brief (ACC) Version Register */
#else
  #define REG_ACC_CR   (*(__O  uint32_t*)0xF804A000U) /**< \brief (ACC) Control Register */
  #define REG_ACC_MR   (*(__IO uint32_t*)0xF804A004U) /**< \brief (ACC) Mode Register */
  #define REG_ACC_IER  (*(__O  uint32_t*)0xF804A024U) /**< \brief (ACC) Interrupt Enable Register */
  #define REG_ACC_IDR  (*(__O  uint32_t*)0xF804A028U) /**< \brief (ACC) Interrupt Disable Register */
  #define REG_ACC_IMR  (*(__I  uint32_t*)0xF804A02CU) /**< \brief (ACC) Interrupt Mask Register */
  #define REG_ACC_ISR  (*(__I  uint32_t*)0xF804A030U) /**< \brief (ACC) Interrupt Status Register */
  #define REG_ACC_ACR  (*(__IO uint32_t*)0xF804A094U) /**< \brief (ACC) Analog Control Register */
  #define REG_ACC_WPMR (*(__IO uint32_t*)0xF804A0E4U) /**< \brief (ACC) Write Protection Mode Register */
  #define REG_ACC_WPSR (*(__I  uint32_t*)0xF804A0E8U) /**< \brief (ACC) Write Protection Status Register */
  #define REG_ACC_VER  (*(__I  uint32_t*)0xF804A0FCU) /**< \brief (ACC) Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for SFC peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_SFC_KR                       (0xF804C000U) /**< \brief (SFC) SFC Key Register */
  #define REG_SFC_MR                       (0xF804C004U) /**< \brief (SFC) SFC Mode Register */
  #define REG_SFC_IER                      (0xF804C010U) /**< \brief (SFC) SFC Interrupt Enable Register */
  #define REG_SFC_IDR                      (0xF804C014U) /**< \brief (SFC) SFC Interrupt Disable Register */
  #define REG_SFC_IMR                      (0xF804C018U) /**< \brief (SFC) SFC Interrupt Mask Register */
  #define REG_SFC_SR                       (0xF804C01CU) /**< \brief (SFC) SFC Status Register */
  #define REG_SFC_DR                       (0xF804C020U) /**< \brief (SFC) SFC Data Register */
  #define REG_SFC_VERSION                  (0xF804C0FCU) /**< \brief (SFC) Version Register */
#else
  #define REG_SFC_KR      (*(__O  uint32_t*)0xF804C000U) /**< \brief (SFC) SFC Key Register */
  #define REG_SFC_MR      (*(__IO uint32_t*)0xF804C004U) /**< \brief (SFC) SFC Mode Register */
  #define REG_SFC_IER     (*(__IO uint32_t*)0xF804C010U) /**< \brief (SFC) SFC Interrupt Enable Register */
  #define REG_SFC_IDR     (*(__IO uint32_t*)0xF804C014U) /**< \brief (SFC) SFC Interrupt Disable Register */
  #define REG_SFC_IMR     (*(__I  uint32_t*)0xF804C018U) /**< \brief (SFC) SFC Interrupt Mask Register */
  #define REG_SFC_SR      (*(__I  uint32_t*)0xF804C01CU) /**< \brief (SFC) SFC Status Register */
  #define REG_SFC_DR      (*(__IO uint32_t*)0xF804C020U) /**< \brief (SFC) SFC Data Register */
  #define REG_SFC_VERSION (*(__I  uint32_t*)0xF804C0FCU) /**< \brief (SFC) Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for I2SC0 peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_I2SC0_CR                       (0xF8050000U) /**< \brief (I2SC0) Control Register */
  #define REG_I2SC0_MR                       (0xF8050004U) /**< \brief (I2SC0) Mode Register */
  #define REG_I2SC0_SR                       (0xF8050008U) /**< \brief (I2SC0) Status Register */
  #define REG_I2SC0_SCR                      (0xF805000CU) /**< \brief (I2SC0) Status Clear Register */
  #define REG_I2SC0_SSR                      (0xF8050010U) /**< \brief (I2SC0) Status Set Register */
  #define REG_I2SC0_IER                      (0xF8050014U) /**< \brief (I2SC0) Interrupt Enable Register */
  #define REG_I2SC0_IDR                      (0xF8050018U) /**< \brief (I2SC0) Interrupt Disable Register */
  #define REG_I2SC0_IMR                      (0xF805001CU) /**< \brief (I2SC0) Interrupt Mask Register */
  #define REG_I2SC0_RHR                      (0xF8050020U) /**< \brief (I2SC0) Receiver Holding Register */
  #define REG_I2SC0_THR                      (0xF8050024U) /**< \brief (I2SC0) Transmitter Holding Register */
  #define REG_I2SC0_VERSION                  (0xF8050028U) /**< \brief (I2SC0) Version Register */
#else
  #define REG_I2SC0_CR      (*(__O  uint32_t*)0xF8050000U) /**< \brief (I2SC0) Control Register */
  #define REG_I2SC0_MR      (*(__IO uint32_t*)0xF8050004U) /**< \brief (I2SC0) Mode Register */
  #define REG_I2SC0_SR      (*(__I  uint32_t*)0xF8050008U) /**< \brief (I2SC0) Status Register */
  #define REG_I2SC0_SCR     (*(__O  uint32_t*)0xF805000CU) /**< \brief (I2SC0) Status Clear Register */
  #define REG_I2SC0_SSR     (*(__O  uint32_t*)0xF8050010U) /**< \brief (I2SC0) Status Set Register */
  #define REG_I2SC0_IER     (*(__O  uint32_t*)0xF8050014U) /**< \brief (I2SC0) Interrupt Enable Register */
  #define REG_I2SC0_IDR     (*(__O  uint32_t*)0xF8050018U) /**< \brief (I2SC0) Interrupt Disable Register */
  #define REG_I2SC0_IMR     (*(__I  uint32_t*)0xF805001CU) /**< \brief (I2SC0) Interrupt Mask Register */
  #define REG_I2SC0_RHR     (*(__I  uint32_t*)0xF8050020U) /**< \brief (I2SC0) Receiver Holding Register */
  #define REG_I2SC0_THR     (*(__O  uint32_t*)0xF8050024U) /**< \brief (I2SC0) Transmitter Holding Register */
  #define REG_I2SC0_VERSION (*(__I  uint32_t*)0xF8050028U) /**< \brief (I2SC0) Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for CAN0 peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_CAN0_CREL                    (0xF8054000U) /**< \brief (CAN0) Mode Register */
  #define REG_CAN0_ENDN                    (0xF8054004U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_CUST                    (0xF8054008U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_FBTP                    (0xF805400CU) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_TEST                    (0xF8054010U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_RWD                     (0xF8054014U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_CCCR                    (0xF8054018U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_BTP                     (0xF805401CU) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_TSCC                    (0xF8054020U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_TSVC                    (0xF8054024U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_TOCC                    (0xF8054028U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_TOCV                    (0xF805402CU) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_ECR                     (0xF8054040U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_PSR                     (0xF8054044U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_IR                      (0xF8054050U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_IE                      (0xF8054054U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_ILS                     (0xF8054058U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_ILE                     (0xF805405CU) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_GFC                     (0xF8054080U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_SIDFC                   (0xF8054084U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_XIDFC                   (0xF8054088U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_XIDAM                   (0xF8054090U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_HPMS                    (0xF8054094U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_NDAT1                   (0xF8054098U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_NDAT2                   (0xF805409CU) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_RXF0C                   (0xF80540A0U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_RXF0S                   (0xF80540A4U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_RXF0A                   (0xF80540A8U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_RXBC                    (0xF80540ACU) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_RXF1C                   (0xF80540B0U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_RXF1S                   (0xF80540B4U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_RXF1A                   (0xF80540B8U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_RXESC                   (0xF80540BCU) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_TXBC                    (0xF80540C0U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_TXFQS                   (0xF80540C4U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_TXESC                   (0xF80540C8U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_TXBRP                   (0xF80540CCU) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_TXBAR                   (0xF80540D0U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_TXBCR                   (0xF80540D4U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_TXBTO                   (0xF80540D8U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_TXBCF                   (0xF80540DCU) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_TXBTIE                  (0xF80540E0U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_TXBCIE                  (0xF80540E4U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_TXEFC                   (0xF80540F0U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_TXEFS                   (0xF80540F4U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_TXEFA                   (0xF80540F8U) /**< \brief (CAN0) Interrupt Enable Register */
#else
  #define REG_CAN0_CREL   (*(__IO uint32_t*)0xF8054000U) /**< \brief (CAN0) Mode Register */
  #define REG_CAN0_ENDN   (*(__O  uint32_t*)0xF8054004U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_CUST   (*(__O  uint32_t*)0xF8054008U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_FBTP   (*(__O  uint32_t*)0xF805400CU) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_TEST   (*(__O  uint32_t*)0xF8054010U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_RWD    (*(__O  uint32_t*)0xF8054014U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_CCCR   (*(__O  uint32_t*)0xF8054018U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_BTP    (*(__O  uint32_t*)0xF805401CU) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_TSCC   (*(__O  uint32_t*)0xF8054020U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_TSVC   (*(__O  uint32_t*)0xF8054024U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_TOCC   (*(__O  uint32_t*)0xF8054028U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_TOCV   (*(__O  uint32_t*)0xF805402CU) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_ECR    (*(__O  uint32_t*)0xF8054040U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_PSR    (*(__O  uint32_t*)0xF8054044U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_IR     (*(__O  uint32_t*)0xF8054050U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_IE     (*(__O  uint32_t*)0xF8054054U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_ILS    (*(__O  uint32_t*)0xF8054058U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_ILE    (*(__O  uint32_t*)0xF805405CU) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_GFC    (*(__O  uint32_t*)0xF8054080U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_SIDFC  (*(__O  uint32_t*)0xF8054084U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_XIDFC  (*(__O  uint32_t*)0xF8054088U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_XIDAM  (*(__O  uint32_t*)0xF8054090U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_HPMS   (*(__O  uint32_t*)0xF8054094U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_NDAT1  (*(__O  uint32_t*)0xF8054098U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_NDAT2  (*(__O  uint32_t*)0xF805409CU) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_RXF0C  (*(__O  uint32_t*)0xF80540A0U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_RXF0S  (*(__O  uint32_t*)0xF80540A4U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_RXF0A  (*(__O  uint32_t*)0xF80540A8U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_RXBC   (*(__O  uint32_t*)0xF80540ACU) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_RXF1C  (*(__O  uint32_t*)0xF80540B0U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_RXF1S  (*(__O  uint32_t*)0xF80540B4U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_RXF1A  (*(__O  uint32_t*)0xF80540B8U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_RXESC  (*(__O  uint32_t*)0xF80540BCU) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_TXBC   (*(__O  uint32_t*)0xF80540C0U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_TXFQS  (*(__O  uint32_t*)0xF80540C4U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_TXESC  (*(__O  uint32_t*)0xF80540C8U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_TXBRP  (*(__O  uint32_t*)0xF80540CCU) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_TXBAR  (*(__O  uint32_t*)0xF80540D0U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_TXBCR  (*(__O  uint32_t*)0xF80540D4U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_TXBTO  (*(__O  uint32_t*)0xF80540D8U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_TXBCF  (*(__O  uint32_t*)0xF80540DCU) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_TXBTIE (*(__O  uint32_t*)0xF80540E0U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_TXBCIE (*(__O  uint32_t*)0xF80540E4U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_TXEFC  (*(__O  uint32_t*)0xF80540F0U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_TXEFS  (*(__O  uint32_t*)0xF80540F4U) /**< \brief (CAN0) Interrupt Enable Register */
  #define REG_CAN0_TXEFA  (*(__O  uint32_t*)0xF80540F8U) /**< \brief (CAN0) Interrupt Enable Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for SPI1 peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_SPI1_CR                       (0xFC000000U) /**< \brief (SPI1) Control Register */
  #define REG_SPI1_MR                       (0xFC000004U) /**< \brief (SPI1) Mode Register */
  #define REG_SPI1_RDR                      (0xFC000008U) /**< \brief (SPI1) Receive Data Register */
  #define REG_SPI1_TDR                      (0xFC00000CU) /**< \brief (SPI1) Transmit Data Register */
  #define REG_SPI1_SR                       (0xFC000010U) /**< \brief (SPI1) Status Register */
  #define REG_SPI1_IER                      (0xFC000014U) /**< \brief (SPI1) Interrupt Enable Register */
  #define REG_SPI1_IDR                      (0xFC000018U) /**< \brief (SPI1) Interrupt Disable Register */
  #define REG_SPI1_IMR                      (0xFC00001CU) /**< \brief (SPI1) Interrupt Mask Register */
  #define REG_SPI1_CSR                      (0xFC000030U) /**< \brief (SPI1) Chip Select Register */
  #define REG_SPI1_CMPR                     (0xFC000048U) /**< \brief (SPI1) SPI Comparison Register */
  #define REG_SPI1_WPMR                     (0xFC0000E4U) /**< \brief (SPI1) Write Protection Mode Register */
  #define REG_SPI1_WPSR                     (0xFC0000E8U) /**< \brief (SPI1) Write Protection Status Register */
  #define REG_SPI1_VERSION                  (0xFC0000FCU) /**< \brief (SPI1) Version Register */
#else
  #define REG_SPI1_CR      (*(__O  uint32_t*)0xFC000000U) /**< \brief (SPI1) Control Register */
  #define REG_SPI1_MR      (*(__IO uint32_t*)0xFC000004U) /**< \brief (SPI1) Mode Register */
  #define REG_SPI1_RDR     (*(__I  uint32_t*)0xFC000008U) /**< \brief (SPI1) Receive Data Register */
  #define REG_SPI1_TDR     (*(__O  uint32_t*)0xFC00000CU) /**< \brief (SPI1) Transmit Data Register */
  #define REG_SPI1_SR      (*(__I  uint32_t*)0xFC000010U) /**< \brief (SPI1) Status Register */
  #define REG_SPI1_IER     (*(__O  uint32_t*)0xFC000014U) /**< \brief (SPI1) Interrupt Enable Register */
  #define REG_SPI1_IDR     (*(__O  uint32_t*)0xFC000018U) /**< \brief (SPI1) Interrupt Disable Register */
  #define REG_SPI1_IMR     (*(__I  uint32_t*)0xFC00001CU) /**< \brief (SPI1) Interrupt Mask Register */
  #define REG_SPI1_CSR     (*(__IO uint32_t*)0xFC000030U) /**< \brief (SPI1) Chip Select Register */
  #define REG_SPI1_CMPR    (*(__IO uint32_t*)0xFC000048U) /**< \brief (SPI1) SPI Comparison Register */
  #define REG_SPI1_WPMR    (*(__IO uint32_t*)0xFC0000E4U) /**< \brief (SPI1) Write Protection Mode Register */
  #define REG_SPI1_WPSR    (*(__I  uint32_t*)0xFC0000E8U) /**< \brief (SPI1) Write Protection Status Register */
  #define REG_SPI1_VERSION (*(__I  uint32_t*)0xFC0000FCU) /**< \brief (SPI1) Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for SSC1 peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_SSC1_CR                       (0xFC004000U) /**< \brief (SSC1) Control Register */
  #define REG_SSC1_CMR                      (0xFC004004U) /**< \brief (SSC1) Clock Mode Register */
  #define REG_SSC1_RCMR                     (0xFC004010U) /**< \brief (SSC1) Receive Clock Mode Register */
  #define REG_SSC1_RFMR                     (0xFC004014U) /**< \brief (SSC1) Receive Frame Mode Register */
  #define REG_SSC1_TCMR                     (0xFC004018U) /**< \brief (SSC1) Transmit Clock Mode Register */
  #define REG_SSC1_TFMR                     (0xFC00401CU) /**< \brief (SSC1) Transmit Frame Mode Register */
  #define REG_SSC1_RHR                      (0xFC004020U) /**< \brief (SSC1) Receive Holding Register */
  #define REG_SSC1_THR                      (0xFC004024U) /**< \brief (SSC1) Transmit Holding Register */
  #define REG_SSC1_RSHR                     (0xFC004030U) /**< \brief (SSC1) Receive Sync. Holding Register */
  #define REG_SSC1_TSHR                     (0xFC004034U) /**< \brief (SSC1) Transmit Sync. Holding Register */
  #define REG_SSC1_RC0R                     (0xFC004038U) /**< \brief (SSC1) Receive Compare 0 Register */
  #define REG_SSC1_RC1R                     (0xFC00403CU) /**< \brief (SSC1) Receive Compare 1 Register */
  #define REG_SSC1_SR                       (0xFC004040U) /**< \brief (SSC1) Status Register */
  #define REG_SSC1_IER                      (0xFC004044U) /**< \brief (SSC1) Interrupt Enable Register */
  #define REG_SSC1_IDR                      (0xFC004048U) /**< \brief (SSC1) Interrupt Disable Register */
  #define REG_SSC1_IMR                      (0xFC00404CU) /**< \brief (SSC1) Interrupt Mask Register */
  #define REG_SSC1_WPMR                     (0xFC0040E4U) /**< \brief (SSC1) Write Protection Mode Register */
  #define REG_SSC1_WPSR                     (0xFC0040E8U) /**< \brief (SSC1) Write Protection Status Register */
  #define REG_SSC1_VERSION                  (0xFC0040FCU) /**< \brief (SSC1) Version Register */
#else
  #define REG_SSC1_CR      (*(__O  uint32_t*)0xFC004000U) /**< \brief (SSC1) Control Register */
  #define REG_SSC1_CMR     (*(__IO uint32_t*)0xFC004004U) /**< \brief (SSC1) Clock Mode Register */
  #define REG_SSC1_RCMR    (*(__IO uint32_t*)0xFC004010U) /**< \brief (SSC1) Receive Clock Mode Register */
  #define REG_SSC1_RFMR    (*(__IO uint32_t*)0xFC004014U) /**< \brief (SSC1) Receive Frame Mode Register */
  #define REG_SSC1_TCMR    (*(__IO uint32_t*)0xFC004018U) /**< \brief (SSC1) Transmit Clock Mode Register */
  #define REG_SSC1_TFMR    (*(__IO uint32_t*)0xFC00401CU) /**< \brief (SSC1) Transmit Frame Mode Register */
  #define REG_SSC1_RHR     (*(__I  uint32_t*)0xFC004020U) /**< \brief (SSC1) Receive Holding Register */
  #define REG_SSC1_THR     (*(__O  uint32_t*)0xFC004024U) /**< \brief (SSC1) Transmit Holding Register */
  #define REG_SSC1_RSHR    (*(__I  uint32_t*)0xFC004030U) /**< \brief (SSC1) Receive Sync. Holding Register */
  #define REG_SSC1_TSHR    (*(__IO uint32_t*)0xFC004034U) /**< \brief (SSC1) Transmit Sync. Holding Register */
  #define REG_SSC1_RC0R    (*(__IO uint32_t*)0xFC004038U) /**< \brief (SSC1) Receive Compare 0 Register */
  #define REG_SSC1_RC1R    (*(__IO uint32_t*)0xFC00403CU) /**< \brief (SSC1) Receive Compare 1 Register */
  #define REG_SSC1_SR      (*(__I  uint32_t*)0xFC004040U) /**< \brief (SSC1) Status Register */
  #define REG_SSC1_IER     (*(__O  uint32_t*)0xFC004044U) /**< \brief (SSC1) Interrupt Enable Register */
  #define REG_SSC1_IDR     (*(__O  uint32_t*)0xFC004048U) /**< \brief (SSC1) Interrupt Disable Register */
  #define REG_SSC1_IMR     (*(__I  uint32_t*)0xFC00404CU) /**< \brief (SSC1) Interrupt Mask Register */
  #define REG_SSC1_WPMR    (*(__IO uint32_t*)0xFC0040E4U) /**< \brief (SSC1) Write Protection Mode Register */
  #define REG_SSC1_WPSR    (*(__I  uint32_t*)0xFC0040E8U) /**< \brief (SSC1) Write Protection Status Register */
  #define REG_SSC1_VERSION (*(__I  uint32_t*)0xFC0040FCU) /**< \brief (SSC1) Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for UART3 peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_UART3_CR                        (0xFC008000U) /**< \brief (UART3) Control Register */
  #define REG_UART3_MR                        (0xFC008004U) /**< \brief (UART3) Mode Register */
  #define REG_UART3_IER                       (0xFC008008U) /**< \brief (UART3) Interrupt Enable Register */
  #define REG_UART3_IDR                       (0xFC00800CU) /**< \brief (UART3) Interrupt Disable Register */
  #define REG_UART3_IMR                       (0xFC008010U) /**< \brief (UART3) Interrupt Mask Register */
  #define REG_UART3_SR                        (0xFC008014U) /**< \brief (UART3) Status Register */
  #define REG_UART3_RHR                       (0xFC008018U) /**< \brief (UART3) Receive Holding Register */
  #define REG_UART3_THR                       (0xFC00801CU) /**< \brief (UART3) Transmit Holding Register */
  #define REG_UART3_BRGR                      (0xFC008020U) /**< \brief (UART3) Baud Rate Generator Register */
  #define REG_UART3_CMPR                      (0xFC008024U) /**< \brief (UART3) Comparison Register */
  #define REG_UART3_WPMR                      (0xFC0080E4U) /**< \brief (UART3) Write Protection Mode Register */
  #define REG_UART3_ADDRSIZE                  (0xFC0080ECU) /**< \brief (UART3) Address Size Register */
  #define REG_UART3_IPNAME                    (0xFC0080F0U) /**< \brief (UART3) IP Name 1 Register */
  #define REG_UART3_FEATURE                   (0xFC0080F8U) /**< \brief (UART3) Feature Register */
  #define REG_UART3_VERSION                   (0xFC0080FCU) /**< \brief (UART3) Version Register */
#else
  #define REG_UART3_CR       (*(__O  uint32_t*)0xFC008000U) /**< \brief (UART3) Control Register */
  #define REG_UART3_MR       (*(__IO uint32_t*)0xFC008004U) /**< \brief (UART3) Mode Register */
  #define REG_UART3_IER      (*(__O  uint32_t*)0xFC008008U) /**< \brief (UART3) Interrupt Enable Register */
  #define REG_UART3_IDR      (*(__O  uint32_t*)0xFC00800CU) /**< \brief (UART3) Interrupt Disable Register */
  #define REG_UART3_IMR      (*(__I  uint32_t*)0xFC008010U) /**< \brief (UART3) Interrupt Mask Register */
  #define REG_UART3_SR       (*(__I  uint32_t*)0xFC008014U) /**< \brief (UART3) Status Register */
  #define REG_UART3_RHR      (*(__I  uint32_t*)0xFC008018U) /**< \brief (UART3) Receive Holding Register */
  #define REG_UART3_THR      (*(__O  uint32_t*)0xFC00801CU) /**< \brief (UART3) Transmit Holding Register */
  #define REG_UART3_BRGR     (*(__IO uint32_t*)0xFC008020U) /**< \brief (UART3) Baud Rate Generator Register */
  #define REG_UART3_CMPR     (*(__IO uint32_t*)0xFC008024U) /**< \brief (UART3) Comparison Register */
  #define REG_UART3_WPMR     (*(__IO uint32_t*)0xFC0080E4U) /**< \brief (UART3) Write Protection Mode Register */
  #define REG_UART3_ADDRSIZE (*(__IO uint32_t*)0xFC0080ECU) /**< \brief (UART3) Address Size Register */
  #define REG_UART3_IPNAME   (*(__IO uint32_t*)0xFC0080F0U) /**< \brief (UART3) IP Name 1 Register */
  #define REG_UART3_FEATURE  (*(__IO uint32_t*)0xFC0080F8U) /**< \brief (UART3) Feature Register */
  #define REG_UART3_VERSION  (*(__I  uint32_t*)0xFC0080FCU) /**< \brief (UART3) Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for UART4 peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_UART4_CR                        (0xFC00C000U) /**< \brief (UART4) Control Register */
  #define REG_UART4_MR                        (0xFC00C004U) /**< \brief (UART4) Mode Register */
  #define REG_UART4_IER                       (0xFC00C008U) /**< \brief (UART4) Interrupt Enable Register */
  #define REG_UART4_IDR                       (0xFC00C00CU) /**< \brief (UART4) Interrupt Disable Register */
  #define REG_UART4_IMR                       (0xFC00C010U) /**< \brief (UART4) Interrupt Mask Register */
  #define REG_UART4_SR                        (0xFC00C014U) /**< \brief (UART4) Status Register */
  #define REG_UART4_RHR                       (0xFC00C018U) /**< \brief (UART4) Receive Holding Register */
  #define REG_UART4_THR                       (0xFC00C01CU) /**< \brief (UART4) Transmit Holding Register */
  #define REG_UART4_BRGR                      (0xFC00C020U) /**< \brief (UART4) Baud Rate Generator Register */
  #define REG_UART4_CMPR                      (0xFC00C024U) /**< \brief (UART4) Comparison Register */
  #define REG_UART4_WPMR                      (0xFC00C0E4U) /**< \brief (UART4) Write Protection Mode Register */
  #define REG_UART4_ADDRSIZE                  (0xFC00C0ECU) /**< \brief (UART4) Address Size Register */
  #define REG_UART4_IPNAME                    (0xFC00C0F0U) /**< \brief (UART4) IP Name 1 Register */
  #define REG_UART4_FEATURE                   (0xFC00C0F8U) /**< \brief (UART4) Feature Register */
  #define REG_UART4_VERSION                   (0xFC00C0FCU) /**< \brief (UART4) Version Register */
#else
  #define REG_UART4_CR       (*(__O  uint32_t*)0xFC00C000U) /**< \brief (UART4) Control Register */
  #define REG_UART4_MR       (*(__IO uint32_t*)0xFC00C004U) /**< \brief (UART4) Mode Register */
  #define REG_UART4_IER      (*(__O  uint32_t*)0xFC00C008U) /**< \brief (UART4) Interrupt Enable Register */
  #define REG_UART4_IDR      (*(__O  uint32_t*)0xFC00C00CU) /**< \brief (UART4) Interrupt Disable Register */
  #define REG_UART4_IMR      (*(__I  uint32_t*)0xFC00C010U) /**< \brief (UART4) Interrupt Mask Register */
  #define REG_UART4_SR       (*(__I  uint32_t*)0xFC00C014U) /**< \brief (UART4) Status Register */
  #define REG_UART4_RHR      (*(__I  uint32_t*)0xFC00C018U) /**< \brief (UART4) Receive Holding Register */
  #define REG_UART4_THR      (*(__O  uint32_t*)0xFC00C01CU) /**< \brief (UART4) Transmit Holding Register */
  #define REG_UART4_BRGR     (*(__IO uint32_t*)0xFC00C020U) /**< \brief (UART4) Baud Rate Generator Register */
  #define REG_UART4_CMPR     (*(__IO uint32_t*)0xFC00C024U) /**< \brief (UART4) Comparison Register */
  #define REG_UART4_WPMR     (*(__IO uint32_t*)0xFC00C0E4U) /**< \brief (UART4) Write Protection Mode Register */
  #define REG_UART4_ADDRSIZE (*(__IO uint32_t*)0xFC00C0ECU) /**< \brief (UART4) Address Size Register */
  #define REG_UART4_IPNAME   (*(__IO uint32_t*)0xFC00C0F0U) /**< \brief (UART4) IP Name 1 Register */
  #define REG_UART4_FEATURE  (*(__IO uint32_t*)0xFC00C0F8U) /**< \brief (UART4) Feature Register */
  #define REG_UART4_VERSION  (*(__I  uint32_t*)0xFC00C0FCU) /**< \brief (UART4) Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for FLEXCOM2 peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_FLEXCOM2_MR                           (0xFC010000U) /**< \brief (FLEXCOM2) FLEXCOM Mode Register */
  #define REG_FLEXCOM2_RHR                          (0xFC010010U) /**< \brief (FLEXCOM2) FLEXCOM Receive Holding Register */
  #define REG_FLEXCOM2_THR                          (0xFC010020U) /**< \brief (FLEXCOM2) FLEXCOM Transmit Holding Register */
  #define REG_FLEXCOM2_VERSION                      (0xFC0100FCU) /**< \brief (FLEXCOM2) FLEXCOM Version Register */
  #define REG_FLEXCOM2_US_CR                        (0xFC010200U) /**< \brief (FLEXCOM2) USART Control Register */
  #define REG_FLEXCOM2_US_MR                        (0xFC010204U) /**< \brief (FLEXCOM2) USART Mode Register */
  #define REG_FLEXCOM2_US_IER                       (0xFC010208U) /**< \brief (FLEXCOM2) USART Interrupt Enable Register */
  #define REG_FLEXCOM2_US_IDR                       (0xFC01020CU) /**< \brief (FLEXCOM2) USART Interrupt Disable Register */
  #define REG_FLEXCOM2_US_IMR                       (0xFC010210U) /**< \brief (FLEXCOM2) USART Interrupt Mask Register */
  #define REG_FLEXCOM2_US_CSR                       (0xFC010214U) /**< \brief (FLEXCOM2) USART Channel Status Register */
  #define REG_FLEXCOM2_US_RHR                       (0xFC010218U) /**< \brief (FLEXCOM2) USART Receive Holding Register */
  #define REG_FLEXCOM2_US_THR                       (0xFC01021CU) /**< \brief (FLEXCOM2) USART Transmit Holding Register */
  #define REG_FLEXCOM2_US_BRGR                      (0xFC010220U) /**< \brief (FLEXCOM2) USART Baud Rate Generator Register */
  #define REG_FLEXCOM2_US_RTOR                      (0xFC010224U) /**< \brief (FLEXCOM2) USART Receiver Timeout Register */
  #define REG_FLEXCOM2_US_TTGR                      (0xFC010228U) /**< \brief (FLEXCOM2) USART Transmitter Timeguard Register */
  #define REG_FLEXCOM2_US_FIDI                      (0xFC010240U) /**< \brief (FLEXCOM2) USART FI DI Ratio Register */
  #define REG_FLEXCOM2_US_NER                       (0xFC010244U) /**< \brief (FLEXCOM2) USART Number of Errors Register */
  #define REG_FLEXCOM2_US_IF                        (0xFC01024CU) /**< \brief (FLEXCOM2) USART IrDA Filter Register */
  #define REG_FLEXCOM2_US_MAN                       (0xFC010250U) /**< \brief (FLEXCOM2) USART Manchester Configuration Register */
  #define REG_FLEXCOM2_US_LINMR                     (0xFC010254U) /**< \brief (FLEXCOM2) USART LIN Mode Register */
  #define REG_FLEXCOM2_US_LINIR                     (0xFC010258U) /**< \brief (FLEXCOM2) USART LIN Identifier Register */
  #define REG_FLEXCOM2_US_LINBRR                    (0xFC01025CU) /**< \brief (FLEXCOM2) USART LIN Baud Rate Register */
  #define REG_FLEXCOM2_US_CMPR                      (0xFC010290U) /**< \brief (FLEXCOM2) USART Comparison Register */
  #define REG_FLEXCOM2_US_WPMR                      (0xFC0102E4U) /**< \brief (FLEXCOM2) USART Write Protection Mode Register */
  #define REG_FLEXCOM2_US_WPSR                      (0xFC0102E8U) /**< \brief (FLEXCOM2) USART Write Protection Status Register */
  #define REG_FLEXCOM2_US_VERSION                   (0xFC0102FCU) /**< \brief (FLEXCOM2) USART Version Register */
  #define REG_FLEXCOM2_SPI_CR                       (0xFC010400U) /**< \brief (FLEXCOM2) SPI Control Register */
  #define REG_FLEXCOM2_SPI_MR                       (0xFC010404U) /**< \brief (FLEXCOM2) SPI Mode Register */
  #define REG_FLEXCOM2_SPI_RDR                      (0xFC010408U) /**< \brief (FLEXCOM2) SPI Receive Data Register */
  #define REG_FLEXCOM2_SPI_TDR                      (0xFC01040CU) /**< \brief (FLEXCOM2) SPI Transmit Data Register */
  #define REG_FLEXCOM2_SPI_SR                       (0xFC010410U) /**< \brief (FLEXCOM2) SPI Status Register */
  #define REG_FLEXCOM2_SPI_IER                      (0xFC010414U) /**< \brief (FLEXCOM2) SPI Interrupt Enable Register */
  #define REG_FLEXCOM2_SPI_IDR                      (0xFC010418U) /**< \brief (FLEXCOM2) SPI Interrupt Disable Register */
  #define REG_FLEXCOM2_SPI_IMR                      (0xFC01041CU) /**< \brief (FLEXCOM2) SPI Interrupt Mask Register */
  #define REG_FLEXCOM2_SPI_CSR                      (0xFC010430U) /**< \brief (FLEXCOM2) SPI Chip Select Register */
  #define REG_FLEXCOM2_SPI_CMPR                     (0xFC010448U) /**< \brief (FLEXCOM2) SPI Comparison Register */
  #define REG_FLEXCOM2_SPI_WPMR                     (0xFC0104E4U) /**< \brief (FLEXCOM2) SPI Write Protection Mode Register */
  #define REG_FLEXCOM2_SPI_WPSR                     (0xFC0104E8U) /**< \brief (FLEXCOM2) SPI Write Protection Status Register */
  #define REG_FLEXCOM2_SPI_VERSION                  (0xFC0104FCU) /**< \brief (FLEXCOM2) SPI Version Register */
  #define REG_FLEXCOM2_TWI_CR                       (0xFC010600U) /**< \brief (FLEXCOM2) TWI Control Register */
  #define REG_FLEXCOM2_TWI_MMR                      (0xFC010604U) /**< \brief (FLEXCOM2) TWI Master Mode Register */
  #define REG_FLEXCOM2_TWI_SMR                      (0xFC010608U) /**< \brief (FLEXCOM2) TWI Slave Mode Register */
  #define REG_FLEXCOM2_TWI_IADR                     (0xFC01060CU) /**< \brief (FLEXCOM2) TWI Internal Address Register */
  #define REG_FLEXCOM2_TWI_CWGR                     (0xFC010610U) /**< \brief (FLEXCOM2) TWI Clock Waveform Generator Register */
  #define REG_FLEXCOM2_TWI_SR                       (0xFC010620U) /**< \brief (FLEXCOM2) TWI Status Register */
  #define REG_FLEXCOM2_TWI_IER                      (0xFC010624U) /**< \brief (FLEXCOM2) TWI Interrupt Enable Register */
  #define REG_FLEXCOM2_TWI_IDR                      (0xFC010628U) /**< \brief (FLEXCOM2) TWI Interrupt Disable Register */
  #define REG_FLEXCOM2_TWI_IMR                      (0xFC01062CU) /**< \brief (FLEXCOM2) TWI Interrupt Mask Register */
  #define REG_FLEXCOM2_TWI_RHR                      (0xFC010630U) /**< \brief (FLEXCOM2) TWI Receive Holding Register */
  #define REG_FLEXCOM2_TWI_THR                      (0xFC010634U) /**< \brief (FLEXCOM2) TWI Transmit Holding Register */
  #define REG_FLEXCOM2_TWI_SMBTR                    (0xFC010638U) /**< \brief (FLEXCOM2) TWI SMBus Timing Register */
  #define REG_FLEXCOM2_TWI_ACR                      (0xFC010640U) /**< \brief (FLEXCOM2) TWI Alternative Command Register */
  #define REG_FLEXCOM2_TWI_FILTR                    (0xFC010644U) /**< \brief (FLEXCOM2) TWI Filter Register */
  #define REG_FLEXCOM2_TWI_SWMR                     (0xFC01064CU) /**< \brief (FLEXCOM2) TWI SleepWalking Matching Register */
  #define REG_FLEXCOM2_TWI_DR                       (0xFC0106D0U) /**< \brief (FLEXCOM2) TWI Debug Register */
  #define REG_FLEXCOM2_TWI_WPMR                     (0xFC0106E4U) /**< \brief (FLEXCOM2) TWI Protection Mode Register */
  #define REG_FLEXCOM2_TWI_WPSR                     (0xFC0106E8U) /**< \brief (FLEXCOM2) TWI Protection Status Register */
  #define REG_FLEXCOM2_TWI_VER                      (0xFC0106FCU) /**< \brief (FLEXCOM2) TWI Version Register */
#else
  #define REG_FLEXCOM2_MR          (*(__IO uint32_t*)0xFC010000U) /**< \brief (FLEXCOM2) FLEXCOM Mode Register */
  #define REG_FLEXCOM2_RHR         (*(__I  uint32_t*)0xFC010010U) /**< \brief (FLEXCOM2) FLEXCOM Receive Holding Register */
  #define REG_FLEXCOM2_THR         (*(__IO uint32_t*)0xFC010020U) /**< \brief (FLEXCOM2) FLEXCOM Transmit Holding Register */
  #define REG_FLEXCOM2_VERSION     (*(__I  uint32_t*)0xFC0100FCU) /**< \brief (FLEXCOM2) FLEXCOM Version Register */
  #define REG_FLEXCOM2_US_CR       (*(__O  uint32_t*)0xFC010200U) /**< \brief (FLEXCOM2) USART Control Register */
  #define REG_FLEXCOM2_US_MR       (*(__IO uint32_t*)0xFC010204U) /**< \brief (FLEXCOM2) USART Mode Register */
  #define REG_FLEXCOM2_US_IER      (*(__O  uint32_t*)0xFC010208U) /**< \brief (FLEXCOM2) USART Interrupt Enable Register */
  #define REG_FLEXCOM2_US_IDR      (*(__O  uint32_t*)0xFC01020CU) /**< \brief (FLEXCOM2) USART Interrupt Disable Register */
  #define REG_FLEXCOM2_US_IMR      (*(__I  uint32_t*)0xFC010210U) /**< \brief (FLEXCOM2) USART Interrupt Mask Register */
  #define REG_FLEXCOM2_US_CSR      (*(__I  uint32_t*)0xFC010214U) /**< \brief (FLEXCOM2) USART Channel Status Register */
  #define REG_FLEXCOM2_US_RHR      (*(__I  uint32_t*)0xFC010218U) /**< \brief (FLEXCOM2) USART Receive Holding Register */
  #define REG_FLEXCOM2_US_THR      (*(__O  uint32_t*)0xFC01021CU) /**< \brief (FLEXCOM2) USART Transmit Holding Register */
  #define REG_FLEXCOM2_US_BRGR     (*(__IO uint32_t*)0xFC010220U) /**< \brief (FLEXCOM2) USART Baud Rate Generator Register */
  #define REG_FLEXCOM2_US_RTOR     (*(__IO uint32_t*)0xFC010224U) /**< \brief (FLEXCOM2) USART Receiver Timeout Register */
  #define REG_FLEXCOM2_US_TTGR     (*(__IO uint32_t*)0xFC010228U) /**< \brief (FLEXCOM2) USART Transmitter Timeguard Register */
  #define REG_FLEXCOM2_US_FIDI     (*(__IO uint32_t*)0xFC010240U) /**< \brief (FLEXCOM2) USART FI DI Ratio Register */
  #define REG_FLEXCOM2_US_NER      (*(__I  uint32_t*)0xFC010244U) /**< \brief (FLEXCOM2) USART Number of Errors Register */
  #define REG_FLEXCOM2_US_IF       (*(__IO uint32_t*)0xFC01024CU) /**< \brief (FLEXCOM2) USART IrDA Filter Register */
  #define REG_FLEXCOM2_US_MAN      (*(__IO uint32_t*)0xFC010250U) /**< \brief (FLEXCOM2) USART Manchester Configuration Register */
  #define REG_FLEXCOM2_US_LINMR    (*(__IO uint32_t*)0xFC010254U) /**< \brief (FLEXCOM2) USART LIN Mode Register */
  #define REG_FLEXCOM2_US_LINIR    (*(__IO uint32_t*)0xFC010258U) /**< \brief (FLEXCOM2) USART LIN Identifier Register */
  #define REG_FLEXCOM2_US_LINBRR   (*(__I  uint32_t*)0xFC01025CU) /**< \brief (FLEXCOM2) USART LIN Baud Rate Register */
  #define REG_FLEXCOM2_US_CMPR     (*(__IO uint32_t*)0xFC010290U) /**< \brief (FLEXCOM2) USART Comparison Register */
  #define REG_FLEXCOM2_US_WPMR     (*(__IO uint32_t*)0xFC0102E4U) /**< \brief (FLEXCOM2) USART Write Protection Mode Register */
  #define REG_FLEXCOM2_US_WPSR     (*(__I  uint32_t*)0xFC0102E8U) /**< \brief (FLEXCOM2) USART Write Protection Status Register */
  #define REG_FLEXCOM2_US_VERSION  (*(__I  uint32_t*)0xFC0102FCU) /**< \brief (FLEXCOM2) USART Version Register */
  #define REG_FLEXCOM2_SPI_CR      (*(__O  uint32_t*)0xFC010400U) /**< \brief (FLEXCOM2) SPI Control Register */
  #define REG_FLEXCOM2_SPI_MR      (*(__IO uint32_t*)0xFC010404U) /**< \brief (FLEXCOM2) SPI Mode Register */
  #define REG_FLEXCOM2_SPI_RDR     (*(__I  uint32_t*)0xFC010408U) /**< \brief (FLEXCOM2) SPI Receive Data Register */
  #define REG_FLEXCOM2_SPI_TDR     (*(__O  uint32_t*)0xFC01040CU) /**< \brief (FLEXCOM2) SPI Transmit Data Register */
  #define REG_FLEXCOM2_SPI_SR      (*(__I  uint32_t*)0xFC010410U) /**< \brief (FLEXCOM2) SPI Status Register */
  #define REG_FLEXCOM2_SPI_IER     (*(__O  uint32_t*)0xFC010414U) /**< \brief (FLEXCOM2) SPI Interrupt Enable Register */
  #define REG_FLEXCOM2_SPI_IDR     (*(__O  uint32_t*)0xFC010418U) /**< \brief (FLEXCOM2) SPI Interrupt Disable Register */
  #define REG_FLEXCOM2_SPI_IMR     (*(__I  uint32_t*)0xFC01041CU) /**< \brief (FLEXCOM2) SPI Interrupt Mask Register */
  #define REG_FLEXCOM2_SPI_CSR     (*(__IO uint32_t*)0xFC010430U) /**< \brief (FLEXCOM2) SPI Chip Select Register */
  #define REG_FLEXCOM2_SPI_CMPR    (*(__IO uint32_t*)0xFC010448U) /**< \brief (FLEXCOM2) SPI Comparison Register */
  #define REG_FLEXCOM2_SPI_WPMR    (*(__IO uint32_t*)0xFC0104E4U) /**< \brief (FLEXCOM2) SPI Write Protection Mode Register */
  #define REG_FLEXCOM2_SPI_WPSR    (*(__I  uint32_t*)0xFC0104E8U) /**< \brief (FLEXCOM2) SPI Write Protection Status Register */
  #define REG_FLEXCOM2_SPI_VERSION (*(__I  uint32_t*)0xFC0104FCU) /**< \brief (FLEXCOM2) SPI Version Register */
  #define REG_FLEXCOM2_TWI_CR      (*(__O  uint32_t*)0xFC010600U) /**< \brief (FLEXCOM2) TWI Control Register */
  #define REG_FLEXCOM2_TWI_MMR     (*(__IO uint32_t*)0xFC010604U) /**< \brief (FLEXCOM2) TWI Master Mode Register */
  #define REG_FLEXCOM2_TWI_SMR     (*(__IO uint32_t*)0xFC010608U) /**< \brief (FLEXCOM2) TWI Slave Mode Register */
  #define REG_FLEXCOM2_TWI_IADR    (*(__IO uint32_t*)0xFC01060CU) /**< \brief (FLEXCOM2) TWI Internal Address Register */
  #define REG_FLEXCOM2_TWI_CWGR    (*(__IO uint32_t*)0xFC010610U) /**< \brief (FLEXCOM2) TWI Clock Waveform Generator Register */
  #define REG_FLEXCOM2_TWI_SR      (*(__I  uint32_t*)0xFC010620U) /**< \brief (FLEXCOM2) TWI Status Register */
  #define REG_FLEXCOM2_TWI_IER     (*(__O  uint32_t*)0xFC010624U) /**< \brief (FLEXCOM2) TWI Interrupt Enable Register */
  #define REG_FLEXCOM2_TWI_IDR     (*(__O  uint32_t*)0xFC010628U) /**< \brief (FLEXCOM2) TWI Interrupt Disable Register */
  #define REG_FLEXCOM2_TWI_IMR     (*(__I  uint32_t*)0xFC01062CU) /**< \brief (FLEXCOM2) TWI Interrupt Mask Register */
  #define REG_FLEXCOM2_TWI_RHR     (*(__I  uint32_t*)0xFC010630U) /**< \brief (FLEXCOM2) TWI Receive Holding Register */
  #define REG_FLEXCOM2_TWI_THR     (*(__O  uint32_t*)0xFC010634U) /**< \brief (FLEXCOM2) TWI Transmit Holding Register */
  #define REG_FLEXCOM2_TWI_SMBTR   (*(__IO uint32_t*)0xFC010638U) /**< \brief (FLEXCOM2) TWI SMBus Timing Register */
  #define REG_FLEXCOM2_TWI_ACR     (*(__IO uint32_t*)0xFC010640U) /**< \brief (FLEXCOM2) TWI Alternative Command Register */
  #define REG_FLEXCOM2_TWI_FILTR   (*(__IO uint32_t*)0xFC010644U) /**< \brief (FLEXCOM2) TWI Filter Register */
  #define REG_FLEXCOM2_TWI_SWMR    (*(__IO uint32_t*)0xFC01064CU) /**< \brief (FLEXCOM2) TWI SleepWalking Matching Register */
  #define REG_FLEXCOM2_TWI_DR      (*(__I  uint32_t*)0xFC0106D0U) /**< \brief (FLEXCOM2) TWI Debug Register */
  #define REG_FLEXCOM2_TWI_WPMR    (*(__IO uint32_t*)0xFC0106E4U) /**< \brief (FLEXCOM2) TWI Protection Mode Register */
  #define REG_FLEXCOM2_TWI_WPSR    (*(__I  uint32_t*)0xFC0106E8U) /**< \brief (FLEXCOM2) TWI Protection Status Register */
  #define REG_FLEXCOM2_TWI_VER     (*(__I  uint32_t*)0xFC0106FCU) /**< \brief (FLEXCOM2) TWI Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for FLEXCOM3 peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_FLEXCOM3_MR                           (0xFC014000U) /**< \brief (FLEXCOM3) FLEXCOM Mode Register */
  #define REG_FLEXCOM3_RHR                          (0xFC014010U) /**< \brief (FLEXCOM3) FLEXCOM Receive Holding Register */
  #define REG_FLEXCOM3_THR                          (0xFC014020U) /**< \brief (FLEXCOM3) FLEXCOM Transmit Holding Register */
  #define REG_FLEXCOM3_VERSION                      (0xFC0140FCU) /**< \brief (FLEXCOM3) FLEXCOM Version Register */
  #define REG_FLEXCOM3_US_CR                        (0xFC014200U) /**< \brief (FLEXCOM3) USART Control Register */
  #define REG_FLEXCOM3_US_MR                        (0xFC014204U) /**< \brief (FLEXCOM3) USART Mode Register */
  #define REG_FLEXCOM3_US_IER                       (0xFC014208U) /**< \brief (FLEXCOM3) USART Interrupt Enable Register */
  #define REG_FLEXCOM3_US_IDR                       (0xFC01420CU) /**< \brief (FLEXCOM3) USART Interrupt Disable Register */
  #define REG_FLEXCOM3_US_IMR                       (0xFC014210U) /**< \brief (FLEXCOM3) USART Interrupt Mask Register */
  #define REG_FLEXCOM3_US_CSR                       (0xFC014214U) /**< \brief (FLEXCOM3) USART Channel Status Register */
  #define REG_FLEXCOM3_US_RHR                       (0xFC014218U) /**< \brief (FLEXCOM3) USART Receive Holding Register */
  #define REG_FLEXCOM3_US_THR                       (0xFC01421CU) /**< \brief (FLEXCOM3) USART Transmit Holding Register */
  #define REG_FLEXCOM3_US_BRGR                      (0xFC014220U) /**< \brief (FLEXCOM3) USART Baud Rate Generator Register */
  #define REG_FLEXCOM3_US_RTOR                      (0xFC014224U) /**< \brief (FLEXCOM3) USART Receiver Timeout Register */
  #define REG_FLEXCOM3_US_TTGR                      (0xFC014228U) /**< \brief (FLEXCOM3) USART Transmitter Timeguard Register */
  #define REG_FLEXCOM3_US_FIDI                      (0xFC014240U) /**< \brief (FLEXCOM3) USART FI DI Ratio Register */
  #define REG_FLEXCOM3_US_NER                       (0xFC014244U) /**< \brief (FLEXCOM3) USART Number of Errors Register */
  #define REG_FLEXCOM3_US_IF                        (0xFC01424CU) /**< \brief (FLEXCOM3) USART IrDA Filter Register */
  #define REG_FLEXCOM3_US_MAN                       (0xFC014250U) /**< \brief (FLEXCOM3) USART Manchester Configuration Register */
  #define REG_FLEXCOM3_US_LINMR                     (0xFC014254U) /**< \brief (FLEXCOM3) USART LIN Mode Register */
  #define REG_FLEXCOM3_US_LINIR                     (0xFC014258U) /**< \brief (FLEXCOM3) USART LIN Identifier Register */
  #define REG_FLEXCOM3_US_LINBRR                    (0xFC01425CU) /**< \brief (FLEXCOM3) USART LIN Baud Rate Register */
  #define REG_FLEXCOM3_US_CMPR                      (0xFC014290U) /**< \brief (FLEXCOM3) USART Comparison Register */
  #define REG_FLEXCOM3_US_WPMR                      (0xFC0142E4U) /**< \brief (FLEXCOM3) USART Write Protection Mode Register */
  #define REG_FLEXCOM3_US_WPSR                      (0xFC0142E8U) /**< \brief (FLEXCOM3) USART Write Protection Status Register */
  #define REG_FLEXCOM3_US_VERSION                   (0xFC0142FCU) /**< \brief (FLEXCOM3) USART Version Register */
  #define REG_FLEXCOM3_SPI_CR                       (0xFC014400U) /**< \brief (FLEXCOM3) SPI Control Register */
  #define REG_FLEXCOM3_SPI_MR                       (0xFC014404U) /**< \brief (FLEXCOM3) SPI Mode Register */
  #define REG_FLEXCOM3_SPI_RDR                      (0xFC014408U) /**< \brief (FLEXCOM3) SPI Receive Data Register */
  #define REG_FLEXCOM3_SPI_TDR                      (0xFC01440CU) /**< \brief (FLEXCOM3) SPI Transmit Data Register */
  #define REG_FLEXCOM3_SPI_SR                       (0xFC014410U) /**< \brief (FLEXCOM3) SPI Status Register */
  #define REG_FLEXCOM3_SPI_IER                      (0xFC014414U) /**< \brief (FLEXCOM3) SPI Interrupt Enable Register */
  #define REG_FLEXCOM3_SPI_IDR                      (0xFC014418U) /**< \brief (FLEXCOM3) SPI Interrupt Disable Register */
  #define REG_FLEXCOM3_SPI_IMR                      (0xFC01441CU) /**< \brief (FLEXCOM3) SPI Interrupt Mask Register */
  #define REG_FLEXCOM3_SPI_CSR                      (0xFC014430U) /**< \brief (FLEXCOM3) SPI Chip Select Register */
  #define REG_FLEXCOM3_SPI_CMPR                     (0xFC014448U) /**< \brief (FLEXCOM3) SPI Comparison Register */
  #define REG_FLEXCOM3_SPI_WPMR                     (0xFC0144E4U) /**< \brief (FLEXCOM3) SPI Write Protection Mode Register */
  #define REG_FLEXCOM3_SPI_WPSR                     (0xFC0144E8U) /**< \brief (FLEXCOM3) SPI Write Protection Status Register */
  #define REG_FLEXCOM3_SPI_VERSION                  (0xFC0144FCU) /**< \brief (FLEXCOM3) SPI Version Register */
  #define REG_FLEXCOM3_TWI_CR                       (0xFC014600U) /**< \brief (FLEXCOM3) TWI Control Register */
  #define REG_FLEXCOM3_TWI_MMR                      (0xFC014604U) /**< \brief (FLEXCOM3) TWI Master Mode Register */
  #define REG_FLEXCOM3_TWI_SMR                      (0xFC014608U) /**< \brief (FLEXCOM3) TWI Slave Mode Register */
  #define REG_FLEXCOM3_TWI_IADR                     (0xFC01460CU) /**< \brief (FLEXCOM3) TWI Internal Address Register */
  #define REG_FLEXCOM3_TWI_CWGR                     (0xFC014610U) /**< \brief (FLEXCOM3) TWI Clock Waveform Generator Register */
  #define REG_FLEXCOM3_TWI_SR                       (0xFC014620U) /**< \brief (FLEXCOM3) TWI Status Register */
  #define REG_FLEXCOM3_TWI_IER                      (0xFC014624U) /**< \brief (FLEXCOM3) TWI Interrupt Enable Register */
  #define REG_FLEXCOM3_TWI_IDR                      (0xFC014628U) /**< \brief (FLEXCOM3) TWI Interrupt Disable Register */
  #define REG_FLEXCOM3_TWI_IMR                      (0xFC01462CU) /**< \brief (FLEXCOM3) TWI Interrupt Mask Register */
  #define REG_FLEXCOM3_TWI_RHR                      (0xFC014630U) /**< \brief (FLEXCOM3) TWI Receive Holding Register */
  #define REG_FLEXCOM3_TWI_THR                      (0xFC014634U) /**< \brief (FLEXCOM3) TWI Transmit Holding Register */
  #define REG_FLEXCOM3_TWI_SMBTR                    (0xFC014638U) /**< \brief (FLEXCOM3) TWI SMBus Timing Register */
  #define REG_FLEXCOM3_TWI_ACR                      (0xFC014640U) /**< \brief (FLEXCOM3) TWI Alternative Command Register */
  #define REG_FLEXCOM3_TWI_FILTR                    (0xFC014644U) /**< \brief (FLEXCOM3) TWI Filter Register */
  #define REG_FLEXCOM3_TWI_SWMR                     (0xFC01464CU) /**< \brief (FLEXCOM3) TWI SleepWalking Matching Register */
  #define REG_FLEXCOM3_TWI_DR                       (0xFC0146D0U) /**< \brief (FLEXCOM3) TWI Debug Register */
  #define REG_FLEXCOM3_TWI_WPMR                     (0xFC0146E4U) /**< \brief (FLEXCOM3) TWI Protection Mode Register */
  #define REG_FLEXCOM3_TWI_WPSR                     (0xFC0146E8U) /**< \brief (FLEXCOM3) TWI Protection Status Register */
  #define REG_FLEXCOM3_TWI_VER                      (0xFC0146FCU) /**< \brief (FLEXCOM3) TWI Version Register */
#else
  #define REG_FLEXCOM3_MR          (*(__IO uint32_t*)0xFC014000U) /**< \brief (FLEXCOM3) FLEXCOM Mode Register */
  #define REG_FLEXCOM3_RHR         (*(__I  uint32_t*)0xFC014010U) /**< \brief (FLEXCOM3) FLEXCOM Receive Holding Register */
  #define REG_FLEXCOM3_THR         (*(__IO uint32_t*)0xFC014020U) /**< \brief (FLEXCOM3) FLEXCOM Transmit Holding Register */
  #define REG_FLEXCOM3_VERSION     (*(__I  uint32_t*)0xFC0140FCU) /**< \brief (FLEXCOM3) FLEXCOM Version Register */
  #define REG_FLEXCOM3_US_CR       (*(__O  uint32_t*)0xFC014200U) /**< \brief (FLEXCOM3) USART Control Register */
  #define REG_FLEXCOM3_US_MR       (*(__IO uint32_t*)0xFC014204U) /**< \brief (FLEXCOM3) USART Mode Register */
  #define REG_FLEXCOM3_US_IER      (*(__O  uint32_t*)0xFC014208U) /**< \brief (FLEXCOM3) USART Interrupt Enable Register */
  #define REG_FLEXCOM3_US_IDR      (*(__O  uint32_t*)0xFC01420CU) /**< \brief (FLEXCOM3) USART Interrupt Disable Register */
  #define REG_FLEXCOM3_US_IMR      (*(__I  uint32_t*)0xFC014210U) /**< \brief (FLEXCOM3) USART Interrupt Mask Register */
  #define REG_FLEXCOM3_US_CSR      (*(__I  uint32_t*)0xFC014214U) /**< \brief (FLEXCOM3) USART Channel Status Register */
  #define REG_FLEXCOM3_US_RHR      (*(__I  uint32_t*)0xFC014218U) /**< \brief (FLEXCOM3) USART Receive Holding Register */
  #define REG_FLEXCOM3_US_THR      (*(__O  uint32_t*)0xFC01421CU) /**< \brief (FLEXCOM3) USART Transmit Holding Register */
  #define REG_FLEXCOM3_US_BRGR     (*(__IO uint32_t*)0xFC014220U) /**< \brief (FLEXCOM3) USART Baud Rate Generator Register */
  #define REG_FLEXCOM3_US_RTOR     (*(__IO uint32_t*)0xFC014224U) /**< \brief (FLEXCOM3) USART Receiver Timeout Register */
  #define REG_FLEXCOM3_US_TTGR     (*(__IO uint32_t*)0xFC014228U) /**< \brief (FLEXCOM3) USART Transmitter Timeguard Register */
  #define REG_FLEXCOM3_US_FIDI     (*(__IO uint32_t*)0xFC014240U) /**< \brief (FLEXCOM3) USART FI DI Ratio Register */
  #define REG_FLEXCOM3_US_NER      (*(__I  uint32_t*)0xFC014244U) /**< \brief (FLEXCOM3) USART Number of Errors Register */
  #define REG_FLEXCOM3_US_IF       (*(__IO uint32_t*)0xFC01424CU) /**< \brief (FLEXCOM3) USART IrDA Filter Register */
  #define REG_FLEXCOM3_US_MAN      (*(__IO uint32_t*)0xFC014250U) /**< \brief (FLEXCOM3) USART Manchester Configuration Register */
  #define REG_FLEXCOM3_US_LINMR    (*(__IO uint32_t*)0xFC014254U) /**< \brief (FLEXCOM3) USART LIN Mode Register */
  #define REG_FLEXCOM3_US_LINIR    (*(__IO uint32_t*)0xFC014258U) /**< \brief (FLEXCOM3) USART LIN Identifier Register */
  #define REG_FLEXCOM3_US_LINBRR   (*(__I  uint32_t*)0xFC01425CU) /**< \brief (FLEXCOM3) USART LIN Baud Rate Register */
  #define REG_FLEXCOM3_US_CMPR     (*(__IO uint32_t*)0xFC014290U) /**< \brief (FLEXCOM3) USART Comparison Register */
  #define REG_FLEXCOM3_US_WPMR     (*(__IO uint32_t*)0xFC0142E4U) /**< \brief (FLEXCOM3) USART Write Protection Mode Register */
  #define REG_FLEXCOM3_US_WPSR     (*(__I  uint32_t*)0xFC0142E8U) /**< \brief (FLEXCOM3) USART Write Protection Status Register */
  #define REG_FLEXCOM3_US_VERSION  (*(__I  uint32_t*)0xFC0142FCU) /**< \brief (FLEXCOM3) USART Version Register */
  #define REG_FLEXCOM3_SPI_CR      (*(__O  uint32_t*)0xFC014400U) /**< \brief (FLEXCOM3) SPI Control Register */
  #define REG_FLEXCOM3_SPI_MR      (*(__IO uint32_t*)0xFC014404U) /**< \brief (FLEXCOM3) SPI Mode Register */
  #define REG_FLEXCOM3_SPI_RDR     (*(__I  uint32_t*)0xFC014408U) /**< \brief (FLEXCOM3) SPI Receive Data Register */
  #define REG_FLEXCOM3_SPI_TDR     (*(__O  uint32_t*)0xFC01440CU) /**< \brief (FLEXCOM3) SPI Transmit Data Register */
  #define REG_FLEXCOM3_SPI_SR      (*(__I  uint32_t*)0xFC014410U) /**< \brief (FLEXCOM3) SPI Status Register */
  #define REG_FLEXCOM3_SPI_IER     (*(__O  uint32_t*)0xFC014414U) /**< \brief (FLEXCOM3) SPI Interrupt Enable Register */
  #define REG_FLEXCOM3_SPI_IDR     (*(__O  uint32_t*)0xFC014418U) /**< \brief (FLEXCOM3) SPI Interrupt Disable Register */
  #define REG_FLEXCOM3_SPI_IMR     (*(__I  uint32_t*)0xFC01441CU) /**< \brief (FLEXCOM3) SPI Interrupt Mask Register */
  #define REG_FLEXCOM3_SPI_CSR     (*(__IO uint32_t*)0xFC014430U) /**< \brief (FLEXCOM3) SPI Chip Select Register */
  #define REG_FLEXCOM3_SPI_CMPR    (*(__IO uint32_t*)0xFC014448U) /**< \brief (FLEXCOM3) SPI Comparison Register */
  #define REG_FLEXCOM3_SPI_WPMR    (*(__IO uint32_t*)0xFC0144E4U) /**< \brief (FLEXCOM3) SPI Write Protection Mode Register */
  #define REG_FLEXCOM3_SPI_WPSR    (*(__I  uint32_t*)0xFC0144E8U) /**< \brief (FLEXCOM3) SPI Write Protection Status Register */
  #define REG_FLEXCOM3_SPI_VERSION (*(__I  uint32_t*)0xFC0144FCU) /**< \brief (FLEXCOM3) SPI Version Register */
  #define REG_FLEXCOM3_TWI_CR      (*(__O  uint32_t*)0xFC014600U) /**< \brief (FLEXCOM3) TWI Control Register */
  #define REG_FLEXCOM3_TWI_MMR     (*(__IO uint32_t*)0xFC014604U) /**< \brief (FLEXCOM3) TWI Master Mode Register */
  #define REG_FLEXCOM3_TWI_SMR     (*(__IO uint32_t*)0xFC014608U) /**< \brief (FLEXCOM3) TWI Slave Mode Register */
  #define REG_FLEXCOM3_TWI_IADR    (*(__IO uint32_t*)0xFC01460CU) /**< \brief (FLEXCOM3) TWI Internal Address Register */
  #define REG_FLEXCOM3_TWI_CWGR    (*(__IO uint32_t*)0xFC014610U) /**< \brief (FLEXCOM3) TWI Clock Waveform Generator Register */
  #define REG_FLEXCOM3_TWI_SR      (*(__I  uint32_t*)0xFC014620U) /**< \brief (FLEXCOM3) TWI Status Register */
  #define REG_FLEXCOM3_TWI_IER     (*(__O  uint32_t*)0xFC014624U) /**< \brief (FLEXCOM3) TWI Interrupt Enable Register */
  #define REG_FLEXCOM3_TWI_IDR     (*(__O  uint32_t*)0xFC014628U) /**< \brief (FLEXCOM3) TWI Interrupt Disable Register */
  #define REG_FLEXCOM3_TWI_IMR     (*(__I  uint32_t*)0xFC01462CU) /**< \brief (FLEXCOM3) TWI Interrupt Mask Register */
  #define REG_FLEXCOM3_TWI_RHR     (*(__I  uint32_t*)0xFC014630U) /**< \brief (FLEXCOM3) TWI Receive Holding Register */
  #define REG_FLEXCOM3_TWI_THR     (*(__O  uint32_t*)0xFC014634U) /**< \brief (FLEXCOM3) TWI Transmit Holding Register */
  #define REG_FLEXCOM3_TWI_SMBTR   (*(__IO uint32_t*)0xFC014638U) /**< \brief (FLEXCOM3) TWI SMBus Timing Register */
  #define REG_FLEXCOM3_TWI_ACR     (*(__IO uint32_t*)0xFC014640U) /**< \brief (FLEXCOM3) TWI Alternative Command Register */
  #define REG_FLEXCOM3_TWI_FILTR   (*(__IO uint32_t*)0xFC014644U) /**< \brief (FLEXCOM3) TWI Filter Register */
  #define REG_FLEXCOM3_TWI_SWMR    (*(__IO uint32_t*)0xFC01464CU) /**< \brief (FLEXCOM3) TWI SleepWalking Matching Register */
  #define REG_FLEXCOM3_TWI_DR      (*(__I  uint32_t*)0xFC0146D0U) /**< \brief (FLEXCOM3) TWI Debug Register */
  #define REG_FLEXCOM3_TWI_WPMR    (*(__IO uint32_t*)0xFC0146E4U) /**< \brief (FLEXCOM3) TWI Protection Mode Register */
  #define REG_FLEXCOM3_TWI_WPSR    (*(__I  uint32_t*)0xFC0146E8U) /**< \brief (FLEXCOM3) TWI Protection Status Register */
  #define REG_FLEXCOM3_TWI_VER     (*(__I  uint32_t*)0xFC0146FCU) /**< \brief (FLEXCOM3) TWI Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for FLEXCOM4 peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_FLEXCOM4_MR                           (0xFC018000U) /**< \brief (FLEXCOM4) FLEXCOM Mode Register */
  #define REG_FLEXCOM4_RHR                          (0xFC018010U) /**< \brief (FLEXCOM4) FLEXCOM Receive Holding Register */
  #define REG_FLEXCOM4_THR                          (0xFC018020U) /**< \brief (FLEXCOM4) FLEXCOM Transmit Holding Register */
  #define REG_FLEXCOM4_VERSION                      (0xFC0180FCU) /**< \brief (FLEXCOM4) FLEXCOM Version Register */
  #define REG_FLEXCOM4_US_CR                        (0xFC018200U) /**< \brief (FLEXCOM4) USART Control Register */
  #define REG_FLEXCOM4_US_MR                        (0xFC018204U) /**< \brief (FLEXCOM4) USART Mode Register */
  #define REG_FLEXCOM4_US_IER                       (0xFC018208U) /**< \brief (FLEXCOM4) USART Interrupt Enable Register */
  #define REG_FLEXCOM4_US_IDR                       (0xFC01820CU) /**< \brief (FLEXCOM4) USART Interrupt Disable Register */
  #define REG_FLEXCOM4_US_IMR                       (0xFC018210U) /**< \brief (FLEXCOM4) USART Interrupt Mask Register */
  #define REG_FLEXCOM4_US_CSR                       (0xFC018214U) /**< \brief (FLEXCOM4) USART Channel Status Register */
  #define REG_FLEXCOM4_US_RHR                       (0xFC018218U) /**< \brief (FLEXCOM4) USART Receive Holding Register */
  #define REG_FLEXCOM4_US_THR                       (0xFC01821CU) /**< \brief (FLEXCOM4) USART Transmit Holding Register */
  #define REG_FLEXCOM4_US_BRGR                      (0xFC018220U) /**< \brief (FLEXCOM4) USART Baud Rate Generator Register */
  #define REG_FLEXCOM4_US_RTOR                      (0xFC018224U) /**< \brief (FLEXCOM4) USART Receiver Timeout Register */
  #define REG_FLEXCOM4_US_TTGR                      (0xFC018228U) /**< \brief (FLEXCOM4) USART Transmitter Timeguard Register */
  #define REG_FLEXCOM4_US_FIDI                      (0xFC018240U) /**< \brief (FLEXCOM4) USART FI DI Ratio Register */
  #define REG_FLEXCOM4_US_NER                       (0xFC018244U) /**< \brief (FLEXCOM4) USART Number of Errors Register */
  #define REG_FLEXCOM4_US_IF                        (0xFC01824CU) /**< \brief (FLEXCOM4) USART IrDA Filter Register */
  #define REG_FLEXCOM4_US_MAN                       (0xFC018250U) /**< \brief (FLEXCOM4) USART Manchester Configuration Register */
  #define REG_FLEXCOM4_US_LINMR                     (0xFC018254U) /**< \brief (FLEXCOM4) USART LIN Mode Register */
  #define REG_FLEXCOM4_US_LINIR                     (0xFC018258U) /**< \brief (FLEXCOM4) USART LIN Identifier Register */
  #define REG_FLEXCOM4_US_LINBRR                    (0xFC01825CU) /**< \brief (FLEXCOM4) USART LIN Baud Rate Register */
  #define REG_FLEXCOM4_US_CMPR                      (0xFC018290U) /**< \brief (FLEXCOM4) USART Comparison Register */
  #define REG_FLEXCOM4_US_WPMR                      (0xFC0182E4U) /**< \brief (FLEXCOM4) USART Write Protection Mode Register */
  #define REG_FLEXCOM4_US_WPSR                      (0xFC0182E8U) /**< \brief (FLEXCOM4) USART Write Protection Status Register */
  #define REG_FLEXCOM4_US_VERSION                   (0xFC0182FCU) /**< \brief (FLEXCOM4) USART Version Register */
  #define REG_FLEXCOM4_SPI_CR                       (0xFC018400U) /**< \brief (FLEXCOM4) SPI Control Register */
  #define REG_FLEXCOM4_SPI_MR                       (0xFC018404U) /**< \brief (FLEXCOM4) SPI Mode Register */
  #define REG_FLEXCOM4_SPI_RDR                      (0xFC018408U) /**< \brief (FLEXCOM4) SPI Receive Data Register */
  #define REG_FLEXCOM4_SPI_TDR                      (0xFC01840CU) /**< \brief (FLEXCOM4) SPI Transmit Data Register */
  #define REG_FLEXCOM4_SPI_SR                       (0xFC018410U) /**< \brief (FLEXCOM4) SPI Status Register */
  #define REG_FLEXCOM4_SPI_IER                      (0xFC018414U) /**< \brief (FLEXCOM4) SPI Interrupt Enable Register */
  #define REG_FLEXCOM4_SPI_IDR                      (0xFC018418U) /**< \brief (FLEXCOM4) SPI Interrupt Disable Register */
  #define REG_FLEXCOM4_SPI_IMR                      (0xFC01841CU) /**< \brief (FLEXCOM4) SPI Interrupt Mask Register */
  #define REG_FLEXCOM4_SPI_CSR                      (0xFC018430U) /**< \brief (FLEXCOM4) SPI Chip Select Register */
  #define REG_FLEXCOM4_SPI_CMPR                     (0xFC018448U) /**< \brief (FLEXCOM4) SPI Comparison Register */
  #define REG_FLEXCOM4_SPI_WPMR                     (0xFC0184E4U) /**< \brief (FLEXCOM4) SPI Write Protection Mode Register */
  #define REG_FLEXCOM4_SPI_WPSR                     (0xFC0184E8U) /**< \brief (FLEXCOM4) SPI Write Protection Status Register */
  #define REG_FLEXCOM4_SPI_VERSION                  (0xFC0184FCU) /**< \brief (FLEXCOM4) SPI Version Register */
  #define REG_FLEXCOM4_TWI_CR                       (0xFC018600U) /**< \brief (FLEXCOM4) TWI Control Register */
  #define REG_FLEXCOM4_TWI_MMR                      (0xFC018604U) /**< \brief (FLEXCOM4) TWI Master Mode Register */
  #define REG_FLEXCOM4_TWI_SMR                      (0xFC018608U) /**< \brief (FLEXCOM4) TWI Slave Mode Register */
  #define REG_FLEXCOM4_TWI_IADR                     (0xFC01860CU) /**< \brief (FLEXCOM4) TWI Internal Address Register */
  #define REG_FLEXCOM4_TWI_CWGR                     (0xFC018610U) /**< \brief (FLEXCOM4) TWI Clock Waveform Generator Register */
  #define REG_FLEXCOM4_TWI_SR                       (0xFC018620U) /**< \brief (FLEXCOM4) TWI Status Register */
  #define REG_FLEXCOM4_TWI_IER                      (0xFC018624U) /**< \brief (FLEXCOM4) TWI Interrupt Enable Register */
  #define REG_FLEXCOM4_TWI_IDR                      (0xFC018628U) /**< \brief (FLEXCOM4) TWI Interrupt Disable Register */
  #define REG_FLEXCOM4_TWI_IMR                      (0xFC01862CU) /**< \brief (FLEXCOM4) TWI Interrupt Mask Register */
  #define REG_FLEXCOM4_TWI_RHR                      (0xFC018630U) /**< \brief (FLEXCOM4) TWI Receive Holding Register */
  #define REG_FLEXCOM4_TWI_THR                      (0xFC018634U) /**< \brief (FLEXCOM4) TWI Transmit Holding Register */
  #define REG_FLEXCOM4_TWI_SMBTR                    (0xFC018638U) /**< \brief (FLEXCOM4) TWI SMBus Timing Register */
  #define REG_FLEXCOM4_TWI_ACR                      (0xFC018640U) /**< \brief (FLEXCOM4) TWI Alternative Command Register */
  #define REG_FLEXCOM4_TWI_FILTR                    (0xFC018644U) /**< \brief (FLEXCOM4) TWI Filter Register */
  #define REG_FLEXCOM4_TWI_SWMR                     (0xFC01864CU) /**< \brief (FLEXCOM4) TWI SleepWalking Matching Register */
  #define REG_FLEXCOM4_TWI_DR                       (0xFC0186D0U) /**< \brief (FLEXCOM4) TWI Debug Register */
  #define REG_FLEXCOM4_TWI_WPMR                     (0xFC0186E4U) /**< \brief (FLEXCOM4) TWI Protection Mode Register */
  #define REG_FLEXCOM4_TWI_WPSR                     (0xFC0186E8U) /**< \brief (FLEXCOM4) TWI Protection Status Register */
  #define REG_FLEXCOM4_TWI_VER                      (0xFC0186FCU) /**< \brief (FLEXCOM4) TWI Version Register */
#else
  #define REG_FLEXCOM4_MR          (*(__IO uint32_t*)0xFC018000U) /**< \brief (FLEXCOM4) FLEXCOM Mode Register */
  #define REG_FLEXCOM4_RHR         (*(__I  uint32_t*)0xFC018010U) /**< \brief (FLEXCOM4) FLEXCOM Receive Holding Register */
  #define REG_FLEXCOM4_THR         (*(__IO uint32_t*)0xFC018020U) /**< \brief (FLEXCOM4) FLEXCOM Transmit Holding Register */
  #define REG_FLEXCOM4_VERSION     (*(__I  uint32_t*)0xFC0180FCU) /**< \brief (FLEXCOM4) FLEXCOM Version Register */
  #define REG_FLEXCOM4_US_CR       (*(__O  uint32_t*)0xFC018200U) /**< \brief (FLEXCOM4) USART Control Register */
  #define REG_FLEXCOM4_US_MR       (*(__IO uint32_t*)0xFC018204U) /**< \brief (FLEXCOM4) USART Mode Register */
  #define REG_FLEXCOM4_US_IER      (*(__O  uint32_t*)0xFC018208U) /**< \brief (FLEXCOM4) USART Interrupt Enable Register */
  #define REG_FLEXCOM4_US_IDR      (*(__O  uint32_t*)0xFC01820CU) /**< \brief (FLEXCOM4) USART Interrupt Disable Register */
  #define REG_FLEXCOM4_US_IMR      (*(__I  uint32_t*)0xFC018210U) /**< \brief (FLEXCOM4) USART Interrupt Mask Register */
  #define REG_FLEXCOM4_US_CSR      (*(__I  uint32_t*)0xFC018214U) /**< \brief (FLEXCOM4) USART Channel Status Register */
  #define REG_FLEXCOM4_US_RHR      (*(__I  uint32_t*)0xFC018218U) /**< \brief (FLEXCOM4) USART Receive Holding Register */
  #define REG_FLEXCOM4_US_THR      (*(__O  uint32_t*)0xFC01821CU) /**< \brief (FLEXCOM4) USART Transmit Holding Register */
  #define REG_FLEXCOM4_US_BRGR     (*(__IO uint32_t*)0xFC018220U) /**< \brief (FLEXCOM4) USART Baud Rate Generator Register */
  #define REG_FLEXCOM4_US_RTOR     (*(__IO uint32_t*)0xFC018224U) /**< \brief (FLEXCOM4) USART Receiver Timeout Register */
  #define REG_FLEXCOM4_US_TTGR     (*(__IO uint32_t*)0xFC018228U) /**< \brief (FLEXCOM4) USART Transmitter Timeguard Register */
  #define REG_FLEXCOM4_US_FIDI     (*(__IO uint32_t*)0xFC018240U) /**< \brief (FLEXCOM4) USART FI DI Ratio Register */
  #define REG_FLEXCOM4_US_NER      (*(__I  uint32_t*)0xFC018244U) /**< \brief (FLEXCOM4) USART Number of Errors Register */
  #define REG_FLEXCOM4_US_IF       (*(__IO uint32_t*)0xFC01824CU) /**< \brief (FLEXCOM4) USART IrDA Filter Register */
  #define REG_FLEXCOM4_US_MAN      (*(__IO uint32_t*)0xFC018250U) /**< \brief (FLEXCOM4) USART Manchester Configuration Register */
  #define REG_FLEXCOM4_US_LINMR    (*(__IO uint32_t*)0xFC018254U) /**< \brief (FLEXCOM4) USART LIN Mode Register */
  #define REG_FLEXCOM4_US_LINIR    (*(__IO uint32_t*)0xFC018258U) /**< \brief (FLEXCOM4) USART LIN Identifier Register */
  #define REG_FLEXCOM4_US_LINBRR   (*(__I  uint32_t*)0xFC01825CU) /**< \brief (FLEXCOM4) USART LIN Baud Rate Register */
  #define REG_FLEXCOM4_US_CMPR     (*(__IO uint32_t*)0xFC018290U) /**< \brief (FLEXCOM4) USART Comparison Register */
  #define REG_FLEXCOM4_US_WPMR     (*(__IO uint32_t*)0xFC0182E4U) /**< \brief (FLEXCOM4) USART Write Protection Mode Register */
  #define REG_FLEXCOM4_US_WPSR     (*(__I  uint32_t*)0xFC0182E8U) /**< \brief (FLEXCOM4) USART Write Protection Status Register */
  #define REG_FLEXCOM4_US_VERSION  (*(__I  uint32_t*)0xFC0182FCU) /**< \brief (FLEXCOM4) USART Version Register */
  #define REG_FLEXCOM4_SPI_CR      (*(__O  uint32_t*)0xFC018400U) /**< \brief (FLEXCOM4) SPI Control Register */
  #define REG_FLEXCOM4_SPI_MR      (*(__IO uint32_t*)0xFC018404U) /**< \brief (FLEXCOM4) SPI Mode Register */
  #define REG_FLEXCOM4_SPI_RDR     (*(__I  uint32_t*)0xFC018408U) /**< \brief (FLEXCOM4) SPI Receive Data Register */
  #define REG_FLEXCOM4_SPI_TDR     (*(__O  uint32_t*)0xFC01840CU) /**< \brief (FLEXCOM4) SPI Transmit Data Register */
  #define REG_FLEXCOM4_SPI_SR      (*(__I  uint32_t*)0xFC018410U) /**< \brief (FLEXCOM4) SPI Status Register */
  #define REG_FLEXCOM4_SPI_IER     (*(__O  uint32_t*)0xFC018414U) /**< \brief (FLEXCOM4) SPI Interrupt Enable Register */
  #define REG_FLEXCOM4_SPI_IDR     (*(__O  uint32_t*)0xFC018418U) /**< \brief (FLEXCOM4) SPI Interrupt Disable Register */
  #define REG_FLEXCOM4_SPI_IMR     (*(__I  uint32_t*)0xFC01841CU) /**< \brief (FLEXCOM4) SPI Interrupt Mask Register */
  #define REG_FLEXCOM4_SPI_CSR     (*(__IO uint32_t*)0xFC018430U) /**< \brief (FLEXCOM4) SPI Chip Select Register */
  #define REG_FLEXCOM4_SPI_CMPR    (*(__IO uint32_t*)0xFC018448U) /**< \brief (FLEXCOM4) SPI Comparison Register */
  #define REG_FLEXCOM4_SPI_WPMR    (*(__IO uint32_t*)0xFC0184E4U) /**< \brief (FLEXCOM4) SPI Write Protection Mode Register */
  #define REG_FLEXCOM4_SPI_WPSR    (*(__I  uint32_t*)0xFC0184E8U) /**< \brief (FLEXCOM4) SPI Write Protection Status Register */
  #define REG_FLEXCOM4_SPI_VERSION (*(__I  uint32_t*)0xFC0184FCU) /**< \brief (FLEXCOM4) SPI Version Register */
  #define REG_FLEXCOM4_TWI_CR      (*(__O  uint32_t*)0xFC018600U) /**< \brief (FLEXCOM4) TWI Control Register */
  #define REG_FLEXCOM4_TWI_MMR     (*(__IO uint32_t*)0xFC018604U) /**< \brief (FLEXCOM4) TWI Master Mode Register */
  #define REG_FLEXCOM4_TWI_SMR     (*(__IO uint32_t*)0xFC018608U) /**< \brief (FLEXCOM4) TWI Slave Mode Register */
  #define REG_FLEXCOM4_TWI_IADR    (*(__IO uint32_t*)0xFC01860CU) /**< \brief (FLEXCOM4) TWI Internal Address Register */
  #define REG_FLEXCOM4_TWI_CWGR    (*(__IO uint32_t*)0xFC018610U) /**< \brief (FLEXCOM4) TWI Clock Waveform Generator Register */
  #define REG_FLEXCOM4_TWI_SR      (*(__I  uint32_t*)0xFC018620U) /**< \brief (FLEXCOM4) TWI Status Register */
  #define REG_FLEXCOM4_TWI_IER     (*(__O  uint32_t*)0xFC018624U) /**< \brief (FLEXCOM4) TWI Interrupt Enable Register */
  #define REG_FLEXCOM4_TWI_IDR     (*(__O  uint32_t*)0xFC018628U) /**< \brief (FLEXCOM4) TWI Interrupt Disable Register */
  #define REG_FLEXCOM4_TWI_IMR     (*(__I  uint32_t*)0xFC01862CU) /**< \brief (FLEXCOM4) TWI Interrupt Mask Register */
  #define REG_FLEXCOM4_TWI_RHR     (*(__I  uint32_t*)0xFC018630U) /**< \brief (FLEXCOM4) TWI Receive Holding Register */
  #define REG_FLEXCOM4_TWI_THR     (*(__O  uint32_t*)0xFC018634U) /**< \brief (FLEXCOM4) TWI Transmit Holding Register */
  #define REG_FLEXCOM4_TWI_SMBTR   (*(__IO uint32_t*)0xFC018638U) /**< \brief (FLEXCOM4) TWI SMBus Timing Register */
  #define REG_FLEXCOM4_TWI_ACR     (*(__IO uint32_t*)0xFC018640U) /**< \brief (FLEXCOM4) TWI Alternative Command Register */
  #define REG_FLEXCOM4_TWI_FILTR   (*(__IO uint32_t*)0xFC018644U) /**< \brief (FLEXCOM4) TWI Filter Register */
  #define REG_FLEXCOM4_TWI_SWMR    (*(__IO uint32_t*)0xFC01864CU) /**< \brief (FLEXCOM4) TWI SleepWalking Matching Register */
  #define REG_FLEXCOM4_TWI_DR      (*(__I  uint32_t*)0xFC0186D0U) /**< \brief (FLEXCOM4) TWI Debug Register */
  #define REG_FLEXCOM4_TWI_WPMR    (*(__IO uint32_t*)0xFC0186E4U) /**< \brief (FLEXCOM4) TWI Protection Mode Register */
  #define REG_FLEXCOM4_TWI_WPSR    (*(__I  uint32_t*)0xFC0186E8U) /**< \brief (FLEXCOM4) TWI Protection Status Register */
  #define REG_FLEXCOM4_TWI_VER     (*(__I  uint32_t*)0xFC0186FCU) /**< \brief (FLEXCOM4) TWI Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for TRNG peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_TRNG_CR                      (0xFC01C000U) /**< \brief (TRNG) Control Register */
  #define REG_TRNG_IER                     (0xFC01C010U) /**< \brief (TRNG) Interrupt Enable Register */
  #define REG_TRNG_IDR                     (0xFC01C014U) /**< \brief (TRNG) Interrupt Disable Register */
  #define REG_TRNG_IMR                     (0xFC01C018U) /**< \brief (TRNG) Interrupt Mask Register */
  #define REG_TRNG_ISR                     (0xFC01C01CU) /**< \brief (TRNG) Interrupt Status Register */
  #define REG_TRNG_ODATA                   (0xFC01C050U) /**< \brief (TRNG) Output Data Register */
  #define REG_TRNG_VERSION                 (0xFC01C0FCU) /**< \brief (TRNG) Version Register */
#else
  #define REG_TRNG_CR      (*(__O uint32_t*)0xFC01C000U) /**< \brief (TRNG) Control Register */
  #define REG_TRNG_IER     (*(__O uint32_t*)0xFC01C010U) /**< \brief (TRNG) Interrupt Enable Register */
  #define REG_TRNG_IDR     (*(__O uint32_t*)0xFC01C014U) /**< \brief (TRNG) Interrupt Disable Register */
  #define REG_TRNG_IMR     (*(__I uint32_t*)0xFC01C018U) /**< \brief (TRNG) Interrupt Mask Register */
  #define REG_TRNG_ISR     (*(__I uint32_t*)0xFC01C01CU) /**< \brief (TRNG) Interrupt Status Register */
  #define REG_TRNG_ODATA   (*(__I uint32_t*)0xFC01C050U) /**< \brief (TRNG) Output Data Register */
  #define REG_TRNG_VERSION (*(__I uint32_t*)0xFC01C0FCU) /**< \brief (TRNG) Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for AIC peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_AIC_SSR                      (0xFC020000U) /**< \brief (AIC) Source Select Register */
  #define REG_AIC_SMR                      (0xFC020004U) /**< \brief (AIC) Source Mode Register */
  #define REG_AIC_SVR                      (0xFC020008U) /**< \brief (AIC) Source Vector Register */
  #define REG_AIC_IVR                      (0xFC020010U) /**< \brief (AIC) Interrupt Vector Register */
  #define REG_AIC_FVR                      (0xFC020014U) /**< \brief (AIC) FIQ Vector Register */
  #define REG_AIC_ISR                      (0xFC020018U) /**< \brief (AIC) Interrupt Status Register */
  #define REG_AIC_IPR0                     (0xFC020020U) /**< \brief (AIC) Interrupt Pending Register 0 */
  #define REG_AIC_IPR1                     (0xFC020024U) /**< \brief (AIC) Interrupt Pending Register 1 */
  #define REG_AIC_IPR2                     (0xFC020028U) /**< \brief (AIC) Interrupt Pending Register 2 */
  #define REG_AIC_IPR3                     (0xFC02002CU) /**< \brief (AIC) Interrupt Pending Register 3 */
  #define REG_AIC_IMR                      (0xFC020030U) /**< \brief (AIC) Interrupt Mask Register */
  #define REG_AIC_CISR                     (0xFC020034U) /**< \brief (AIC) Core Interrupt Status Register */
  #define REG_AIC_EOICR                    (0xFC020038U) /**< \brief (AIC) End of Interrupt Command Register */
  #define REG_AIC_SPU                      (0xFC02003CU) /**< \brief (AIC) Spurious Interrupt Vector Register */
  #define REG_AIC_IECR                     (0xFC020040U) /**< \brief (AIC) Interrupt Enable Command Register */
  #define REG_AIC_IDCR                     (0xFC020044U) /**< \brief (AIC) Interrupt Disable Command Register */
  #define REG_AIC_ICCR                     (0xFC020048U) /**< \brief (AIC) Interrupt Clear Command Register */
  #define REG_AIC_ISCR                     (0xFC02004CU) /**< \brief (AIC) Interrupt Set Command Register */
  #define REG_AIC_DCR                      (0xFC02006CU) /**< \brief (AIC) Debug Control Register */
  #define REG_AIC_WPMR                     (0xFC0200E4U) /**< \brief (AIC) Write Protection Mode Register */
  #define REG_AIC_WPSR                     (0xFC0200E8U) /**< \brief (AIC) Write Protection Status Register */
  #define REG_AIC_VERSION                  (0xFC0200FCU) /**< \brief (AIC) AIC Version Register */
#else
  #define REG_AIC_SSR     (*(__IO uint32_t*)0xFC020000U) /**< \brief (AIC) Source Select Register */
  #define REG_AIC_SMR     (*(__IO uint32_t*)0xFC020004U) /**< \brief (AIC) Source Mode Register */
  #define REG_AIC_SVR     (*(__IO uint32_t*)0xFC020008U) /**< \brief (AIC) Source Vector Register */
  #define REG_AIC_IVR     (*(__I  uint32_t*)0xFC020010U) /**< \brief (AIC) Interrupt Vector Register */
  #define REG_AIC_FVR     (*(__I  uint32_t*)0xFC020014U) /**< \brief (AIC) FIQ Vector Register */
  #define REG_AIC_ISR     (*(__I  uint32_t*)0xFC020018U) /**< \brief (AIC) Interrupt Status Register */
  #define REG_AIC_IPR0    (*(__I  uint32_t*)0xFC020020U) /**< \brief (AIC) Interrupt Pending Register 0 */
  #define REG_AIC_IPR1    (*(__I  uint32_t*)0xFC020024U) /**< \brief (AIC) Interrupt Pending Register 1 */
  #define REG_AIC_IPR2    (*(__I  uint32_t*)0xFC020028U) /**< \brief (AIC) Interrupt Pending Register 2 */
  #define REG_AIC_IPR3    (*(__I  uint32_t*)0xFC02002CU) /**< \brief (AIC) Interrupt Pending Register 3 */
  #define REG_AIC_IMR     (*(__I  uint32_t*)0xFC020030U) /**< \brief (AIC) Interrupt Mask Register */
  #define REG_AIC_CISR    (*(__I  uint32_t*)0xFC020034U) /**< \brief (AIC) Core Interrupt Status Register */
  #define REG_AIC_EOICR   (*(__O  uint32_t*)0xFC020038U) /**< \brief (AIC) End of Interrupt Command Register */
  #define REG_AIC_SPU     (*(__IO uint32_t*)0xFC02003CU) /**< \brief (AIC) Spurious Interrupt Vector Register */
  #define REG_AIC_IECR    (*(__O  uint32_t*)0xFC020040U) /**< \brief (AIC) Interrupt Enable Command Register */
  #define REG_AIC_IDCR    (*(__O  uint32_t*)0xFC020044U) /**< \brief (AIC) Interrupt Disable Command Register */
  #define REG_AIC_ICCR    (*(__O  uint32_t*)0xFC020048U) /**< \brief (AIC) Interrupt Clear Command Register */
  #define REG_AIC_ISCR    (*(__O  uint32_t*)0xFC02004CU) /**< \brief (AIC) Interrupt Set Command Register */
  #define REG_AIC_DCR     (*(__IO uint32_t*)0xFC02006CU) /**< \brief (AIC) Debug Control Register */
  #define REG_AIC_WPMR    (*(__IO uint32_t*)0xFC0200E4U) /**< \brief (AIC) Write Protection Mode Register */
  #define REG_AIC_WPSR    (*(__I  uint32_t*)0xFC0200E8U) /**< \brief (AIC) Write Protection Status Register */
  #define REG_AIC_VERSION (*(__I  uint32_t*)0xFC0200FCU) /**< \brief (AIC) AIC Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for TWIHS1 peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_TWIHS1_CR                     (0xFC028000U) /**< \brief (TWIHS1) Control Register */
  #define REG_TWIHS1_MMR                    (0xFC028004U) /**< \brief (TWIHS1) Master Mode Register */
  #define REG_TWIHS1_SMR                    (0xFC028008U) /**< \brief (TWIHS1) Slave Mode Register */
  #define REG_TWIHS1_IADR                   (0xFC02800CU) /**< \brief (TWIHS1) Internal Address Register */
  #define REG_TWIHS1_CWGR                   (0xFC028010U) /**< \brief (TWIHS1) Clock Waveform Generator Register */
  #define REG_TWIHS1_SR                     (0xFC028020U) /**< \brief (TWIHS1) Status Register */
  #define REG_TWIHS1_IER                    (0xFC028024U) /**< \brief (TWIHS1) Interrupt Enable Register */
  #define REG_TWIHS1_IDR                    (0xFC028028U) /**< \brief (TWIHS1) Interrupt Disable Register */
  #define REG_TWIHS1_IMR                    (0xFC02802CU) /**< \brief (TWIHS1) Interrupt Mask Register */
  #define REG_TWIHS1_RHR                    (0xFC028030U) /**< \brief (TWIHS1) Receive Holding Register */
  #define REG_TWIHS1_THR                    (0xFC028034U) /**< \brief (TWIHS1) Transmit Holding Register */
  #define REG_TWIHS1_SMBTR                  (0xFC028038U) /**< \brief (TWIHS1) SMBus Timing Register */
  #define REG_TWIHS1_ACR                    (0xFC028040U) /**< \brief (TWIHS1) Alternative Command Register */
  #define REG_TWIHS1_FILTR                  (0xFC028044U) /**< \brief (TWIHS1) Filter Register */
  #define REG_TWIHS1_SWMR                   (0xFC02804CU) /**< \brief (TWIHS1) SleepWalking Matching Register */
  #define REG_TWIHS1_DR                     (0xFC0280D0U) /**< \brief (TWIHS1) Debug Register */
  #define REG_TWIHS1_WPMR                   (0xFC0280E4U) /**< \brief (TWIHS1) Write Protection Mode Register */
  #define REG_TWIHS1_WPSR                   (0xFC0280E8U) /**< \brief (TWIHS1) Write Protection Status Register */
  #define REG_TWIHS1_VER                    (0xFC0280FCU) /**< \brief (TWIHS1) Version Register */
#else
  #define REG_TWIHS1_CR    (*(__O  uint32_t*)0xFC028000U) /**< \brief (TWIHS1) Control Register */
  #define REG_TWIHS1_MMR   (*(__IO uint32_t*)0xFC028004U) /**< \brief (TWIHS1) Master Mode Register */
  #define REG_TWIHS1_SMR   (*(__IO uint32_t*)0xFC028008U) /**< \brief (TWIHS1) Slave Mode Register */
  #define REG_TWIHS1_IADR  (*(__IO uint32_t*)0xFC02800CU) /**< \brief (TWIHS1) Internal Address Register */
  #define REG_TWIHS1_CWGR  (*(__IO uint32_t*)0xFC028010U) /**< \brief (TWIHS1) Clock Waveform Generator Register */
  #define REG_TWIHS1_SR    (*(__I  uint32_t*)0xFC028020U) /**< \brief (TWIHS1) Status Register */
  #define REG_TWIHS1_IER   (*(__O  uint32_t*)0xFC028024U) /**< \brief (TWIHS1) Interrupt Enable Register */
  #define REG_TWIHS1_IDR   (*(__O  uint32_t*)0xFC028028U) /**< \brief (TWIHS1) Interrupt Disable Register */
  #define REG_TWIHS1_IMR   (*(__I  uint32_t*)0xFC02802CU) /**< \brief (TWIHS1) Interrupt Mask Register */
  #define REG_TWIHS1_RHR   (*(__I  uint32_t*)0xFC028030U) /**< \brief (TWIHS1) Receive Holding Register */
  #define REG_TWIHS1_THR   (*(__O  uint32_t*)0xFC028034U) /**< \brief (TWIHS1) Transmit Holding Register */
  #define REG_TWIHS1_SMBTR (*(__IO uint32_t*)0xFC028038U) /**< \brief (TWIHS1) SMBus Timing Register */
  #define REG_TWIHS1_ACR   (*(__IO uint32_t*)0xFC028040U) /**< \brief (TWIHS1) Alternative Command Register */
  #define REG_TWIHS1_FILTR (*(__IO uint32_t*)0xFC028044U) /**< \brief (TWIHS1) Filter Register */
  #define REG_TWIHS1_SWMR  (*(__IO uint32_t*)0xFC02804CU) /**< \brief (TWIHS1) SleepWalking Matching Register */
  #define REG_TWIHS1_DR    (*(__I  uint32_t*)0xFC0280D0U) /**< \brief (TWIHS1) Debug Register */
  #define REG_TWIHS1_WPMR  (*(__IO uint32_t*)0xFC0280E4U) /**< \brief (TWIHS1) Write Protection Mode Register */
  #define REG_TWIHS1_WPSR  (*(__I  uint32_t*)0xFC0280E8U) /**< \brief (TWIHS1) Write Protection Status Register */
  #define REG_TWIHS1_VER   (*(__I  uint32_t*)0xFC0280FCU) /**< \brief (TWIHS1) Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for UDPHS peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_UDPHS_CTRL                         (0xFC02C000U) /**< \brief (UDPHS) UDPHS Control Register */
  #define REG_UDPHS_FNUM                         (0xFC02C004U) /**< \brief (UDPHS) UDPHS Frame Number Register */
  #define REG_UDPHS_IEN                          (0xFC02C010U) /**< \brief (UDPHS) UDPHS Interrupt Enable Register */
  #define REG_UDPHS_INTSTA                       (0xFC02C014U) /**< \brief (UDPHS) UDPHS Interrupt Status Register */
  #define REG_UDPHS_CLRINT                       (0xFC02C018U) /**< \brief (UDPHS) UDPHS Clear Interrupt Register */
  #define REG_UDPHS_EPTRST                       (0xFC02C01CU) /**< \brief (UDPHS) UDPHS Endpoints Reset Register */
  #define REG_UDPHS_TSTSOFCNT                    (0xFC02C0D0U) /**< \brief (UDPHS) UDPHS Test SOF Counter Register */
  #define REG_UDPHS_TSTCNTA                      (0xFC02C0D4U) /**< \brief (UDPHS) UDPHS Test A Counter Register */
  #define REG_UDPHS_TSTCNTB                      (0xFC02C0D8U) /**< \brief (UDPHS) UDPHS Test B Counter Register */
  #define REG_UDPHS_TSTMODEREG                   (0xFC02C0DCU) /**< \brief (UDPHS) UDPHS Test Mode Register */
  #define REG_UDPHS_TST                          (0xFC02C0E0U) /**< \brief (UDPHS) UDPHS Test Register */
  #define REG_UDPHS_ADDRSIZE                     (0xFC02C0ECU) /**< \brief (UDPHS) UDPHS IP Address Size Register */
  #define REG_UDPHS_IPNAME                       (0xFC02C0F0U) /**< \brief (UDPHS) UDPHS IP Name1 Register */
  #define REG_UDPHS_FEATURES                     (0xFC02C0F8U) /**< \brief (UDPHS) UDPHS Features Register */
  #define REG_UDPHS_VERSION                      (0xFC02C0FCU) /**< \brief (UDPHS) UDPHS Version Register */
  #define REG_UDPHS_EPTCFG0                      (0xFC02C100U) /**< \brief (UDPHS) UDPHS Endpoint Configuration Register (endpoint = 0) */
  #define REG_UDPHS_EPTCTLENB0                   (0xFC02C104U) /**< \brief (UDPHS) UDPHS Endpoint Control Enable Register (endpoint = 0) */
  #define REG_UDPHS_EPTCTLDIS0                   (0xFC02C108U) /**< \brief (UDPHS) UDPHS Endpoint Control Disable Register (endpoint = 0) */
  #define REG_UDPHS_EPTCTL0                      (0xFC02C10CU) /**< \brief (UDPHS) UDPHS Endpoint Control Register (endpoint = 0) */
  #define REG_UDPHS_EPTSETSTA0                   (0xFC02C114U) /**< \brief (UDPHS) UDPHS Endpoint Set Status Register (endpoint = 0) */
  #define REG_UDPHS_EPTCLRSTA0                   (0xFC02C118U) /**< \brief (UDPHS) UDPHS Endpoint Clear Status Register (endpoint = 0) */
  #define REG_UDPHS_EPTSTA0                      (0xFC02C11CU) /**< \brief (UDPHS) UDPHS Endpoint Status Register (endpoint = 0) */
  #define REG_UDPHS_EPTCFG1                      (0xFC02C120U) /**< \brief (UDPHS) UDPHS Endpoint Configuration Register (endpoint = 1) */
  #define REG_UDPHS_EPTCTLENB1                   (0xFC02C124U) /**< \brief (UDPHS) UDPHS Endpoint Control Enable Register (endpoint = 1) */
  #define REG_UDPHS_EPTCTLDIS1                   (0xFC02C128U) /**< \brief (UDPHS) UDPHS Endpoint Control Disable Register (endpoint = 1) */
  #define REG_UDPHS_EPTCTL1                      (0xFC02C12CU) /**< \brief (UDPHS) UDPHS Endpoint Control Register (endpoint = 1) */
  #define REG_UDPHS_EPTSETSTA1                   (0xFC02C134U) /**< \brief (UDPHS) UDPHS Endpoint Set Status Register (endpoint = 1) */
  #define REG_UDPHS_EPTCLRSTA1                   (0xFC02C138U) /**< \brief (UDPHS) UDPHS Endpoint Clear Status Register (endpoint = 1) */
  #define REG_UDPHS_EPTSTA1                      (0xFC02C13CU) /**< \brief (UDPHS) UDPHS Endpoint Status Register (endpoint = 1) */
  #define REG_UDPHS_EPTCFG2                      (0xFC02C140U) /**< \brief (UDPHS) UDPHS Endpoint Configuration Register (endpoint = 2) */
  #define REG_UDPHS_EPTCTLENB2                   (0xFC02C144U) /**< \brief (UDPHS) UDPHS Endpoint Control Enable Register (endpoint = 2) */
  #define REG_UDPHS_EPTCTLDIS2                   (0xFC02C148U) /**< \brief (UDPHS) UDPHS Endpoint Control Disable Register (endpoint = 2) */
  #define REG_UDPHS_EPTCTL2                      (0xFC02C14CU) /**< \brief (UDPHS) UDPHS Endpoint Control Register (endpoint = 2) */
  #define REG_UDPHS_EPTSETSTA2                   (0xFC02C154U) /**< \brief (UDPHS) UDPHS Endpoint Set Status Register (endpoint = 2) */
  #define REG_UDPHS_EPTCLRSTA2                   (0xFC02C158U) /**< \brief (UDPHS) UDPHS Endpoint Clear Status Register (endpoint = 2) */
  #define REG_UDPHS_EPTSTA2                      (0xFC02C15CU) /**< \brief (UDPHS) UDPHS Endpoint Status Register (endpoint = 2) */
  #define REG_UDPHS_EPTCFG3                      (0xFC02C160U) /**< \brief (UDPHS) UDPHS Endpoint Configuration Register (endpoint = 3) */
  #define REG_UDPHS_EPTCTLENB3                   (0xFC02C164U) /**< \brief (UDPHS) UDPHS Endpoint Control Enable Register (endpoint = 3) */
  #define REG_UDPHS_EPTCTLDIS3                   (0xFC02C168U) /**< \brief (UDPHS) UDPHS Endpoint Control Disable Register (endpoint = 3) */
  #define REG_UDPHS_EPTCTL3                      (0xFC02C16CU) /**< \brief (UDPHS) UDPHS Endpoint Control Register (endpoint = 3) */
  #define REG_UDPHS_EPTSETSTA3                   (0xFC02C174U) /**< \brief (UDPHS) UDPHS Endpoint Set Status Register (endpoint = 3) */
  #define REG_UDPHS_EPTCLRSTA3                   (0xFC02C178U) /**< \brief (UDPHS) UDPHS Endpoint Clear Status Register (endpoint = 3) */
  #define REG_UDPHS_EPTSTA3                      (0xFC02C17CU) /**< \brief (UDPHS) UDPHS Endpoint Status Register (endpoint = 3) */
  #define REG_UDPHS_EPTCFG4                      (0xFC02C180U) /**< \brief (UDPHS) UDPHS Endpoint Configuration Register (endpoint = 4) */
  #define REG_UDPHS_EPTCTLENB4                   (0xFC02C184U) /**< \brief (UDPHS) UDPHS Endpoint Control Enable Register (endpoint = 4) */
  #define REG_UDPHS_EPTCTLDIS4                   (0xFC02C188U) /**< \brief (UDPHS) UDPHS Endpoint Control Disable Register (endpoint = 4) */
  #define REG_UDPHS_EPTCTL4                      (0xFC02C18CU) /**< \brief (UDPHS) UDPHS Endpoint Control Register (endpoint = 4) */
  #define REG_UDPHS_EPTSETSTA4                   (0xFC02C194U) /**< \brief (UDPHS) UDPHS Endpoint Set Status Register (endpoint = 4) */
  #define REG_UDPHS_EPTCLRSTA4                   (0xFC02C198U) /**< \brief (UDPHS) UDPHS Endpoint Clear Status Register (endpoint = 4) */
  #define REG_UDPHS_EPTSTA4                      (0xFC02C19CU) /**< \brief (UDPHS) UDPHS Endpoint Status Register (endpoint = 4) */
  #define REG_UDPHS_EPTCFG5                      (0xFC02C1A0U) /**< \brief (UDPHS) UDPHS Endpoint Configuration Register (endpoint = 5) */
  #define REG_UDPHS_EPTCTLENB5                   (0xFC02C1A4U) /**< \brief (UDPHS) UDPHS Endpoint Control Enable Register (endpoint = 5) */
  #define REG_UDPHS_EPTCTLDIS5                   (0xFC02C1A8U) /**< \brief (UDPHS) UDPHS Endpoint Control Disable Register (endpoint = 5) */
  #define REG_UDPHS_EPTCTL5                      (0xFC02C1ACU) /**< \brief (UDPHS) UDPHS Endpoint Control Register (endpoint = 5) */
  #define REG_UDPHS_EPTSETSTA5                   (0xFC02C1B4U) /**< \brief (UDPHS) UDPHS Endpoint Set Status Register (endpoint = 5) */
  #define REG_UDPHS_EPTCLRSTA5                   (0xFC02C1B8U) /**< \brief (UDPHS) UDPHS Endpoint Clear Status Register (endpoint = 5) */
  #define REG_UDPHS_EPTSTA5                      (0xFC02C1BCU) /**< \brief (UDPHS) UDPHS Endpoint Status Register (endpoint = 5) */
  #define REG_UDPHS_EPTCFG6                      (0xFC02C1C0U) /**< \brief (UDPHS) UDPHS Endpoint Configuration Register (endpoint = 6) */
  #define REG_UDPHS_EPTCTLENB6                   (0xFC02C1C4U) /**< \brief (UDPHS) UDPHS Endpoint Control Enable Register (endpoint = 6) */
  #define REG_UDPHS_EPTCTLDIS6                   (0xFC02C1C8U) /**< \brief (UDPHS) UDPHS Endpoint Control Disable Register (endpoint = 6) */
  #define REG_UDPHS_EPTCTL6                      (0xFC02C1CCU) /**< \brief (UDPHS) UDPHS Endpoint Control Register (endpoint = 6) */
  #define REG_UDPHS_EPTSETSTA6                   (0xFC02C1D4U) /**< \brief (UDPHS) UDPHS Endpoint Set Status Register (endpoint = 6) */
  #define REG_UDPHS_EPTCLRSTA6                   (0xFC02C1D8U) /**< \brief (UDPHS) UDPHS Endpoint Clear Status Register (endpoint = 6) */
  #define REG_UDPHS_EPTSTA6                      (0xFC02C1DCU) /**< \brief (UDPHS) UDPHS Endpoint Status Register (endpoint = 6) */
  #define REG_UDPHS_EPTCFG7                      (0xFC02C1E0U) /**< \brief (UDPHS) UDPHS Endpoint Configuration Register (endpoint = 7) */
  #define REG_UDPHS_EPTCTLENB7                   (0xFC02C1E4U) /**< \brief (UDPHS) UDPHS Endpoint Control Enable Register (endpoint = 7) */
  #define REG_UDPHS_EPTCTLDIS7                   (0xFC02C1E8U) /**< \brief (UDPHS) UDPHS Endpoint Control Disable Register (endpoint = 7) */
  #define REG_UDPHS_EPTCTL7                      (0xFC02C1ECU) /**< \brief (UDPHS) UDPHS Endpoint Control Register (endpoint = 7) */
  #define REG_UDPHS_EPTSETSTA7                   (0xFC02C1F4U) /**< \brief (UDPHS) UDPHS Endpoint Set Status Register (endpoint = 7) */
  #define REG_UDPHS_EPTCLRSTA7                   (0xFC02C1F8U) /**< \brief (UDPHS) UDPHS Endpoint Clear Status Register (endpoint = 7) */
  #define REG_UDPHS_EPTSTA7                      (0xFC02C1FCU) /**< \brief (UDPHS) UDPHS Endpoint Status Register (endpoint = 7) */
  #define REG_UDPHS_EPTCFG8                      (0xFC02C200U) /**< \brief (UDPHS) UDPHS Endpoint Configuration Register (endpoint = 8) */
  #define REG_UDPHS_EPTCTLENB8                   (0xFC02C204U) /**< \brief (UDPHS) UDPHS Endpoint Control Enable Register (endpoint = 8) */
  #define REG_UDPHS_EPTCTLDIS8                   (0xFC02C208U) /**< \brief (UDPHS) UDPHS Endpoint Control Disable Register (endpoint = 8) */
  #define REG_UDPHS_EPTCTL8                      (0xFC02C20CU) /**< \brief (UDPHS) UDPHS Endpoint Control Register (endpoint = 8) */
  #define REG_UDPHS_EPTSETSTA8                   (0xFC02C214U) /**< \brief (UDPHS) UDPHS Endpoint Set Status Register (endpoint = 8) */
  #define REG_UDPHS_EPTCLRSTA8                   (0xFC02C218U) /**< \brief (UDPHS) UDPHS Endpoint Clear Status Register (endpoint = 8) */
  #define REG_UDPHS_EPTSTA8                      (0xFC02C21CU) /**< \brief (UDPHS) UDPHS Endpoint Status Register (endpoint = 8) */
  #define REG_UDPHS_EPTCFG9                      (0xFC02C220U) /**< \brief (UDPHS) UDPHS Endpoint Configuration Register (endpoint = 9) */
  #define REG_UDPHS_EPTCTLENB9                   (0xFC02C224U) /**< \brief (UDPHS) UDPHS Endpoint Control Enable Register (endpoint = 9) */
  #define REG_UDPHS_EPTCTLDIS9                   (0xFC02C228U) /**< \brief (UDPHS) UDPHS Endpoint Control Disable Register (endpoint = 9) */
  #define REG_UDPHS_EPTCTL9                      (0xFC02C22CU) /**< \brief (UDPHS) UDPHS Endpoint Control Register (endpoint = 9) */
  #define REG_UDPHS_EPTSETSTA9                   (0xFC02C234U) /**< \brief (UDPHS) UDPHS Endpoint Set Status Register (endpoint = 9) */
  #define REG_UDPHS_EPTCLRSTA9                   (0xFC02C238U) /**< \brief (UDPHS) UDPHS Endpoint Clear Status Register (endpoint = 9) */
  #define REG_UDPHS_EPTSTA9                      (0xFC02C23CU) /**< \brief (UDPHS) UDPHS Endpoint Status Register (endpoint = 9) */
  #define REG_UDPHS_EPTCFG10                     (0xFC02C240U) /**< \brief (UDPHS) UDPHS Endpoint Configuration Register (endpoint = 10) */
  #define REG_UDPHS_EPTCTLENB10                  (0xFC02C244U) /**< \brief (UDPHS) UDPHS Endpoint Control Enable Register (endpoint = 10) */
  #define REG_UDPHS_EPTCTLDIS10                  (0xFC02C248U) /**< \brief (UDPHS) UDPHS Endpoint Control Disable Register (endpoint = 10) */
  #define REG_UDPHS_EPTCTL10                     (0xFC02C24CU) /**< \brief (UDPHS) UDPHS Endpoint Control Register (endpoint = 10) */
  #define REG_UDPHS_EPTSETSTA10                  (0xFC02C254U) /**< \brief (UDPHS) UDPHS Endpoint Set Status Register (endpoint = 10) */
  #define REG_UDPHS_EPTCLRSTA10                  (0xFC02C258U) /**< \brief (UDPHS) UDPHS Endpoint Clear Status Register (endpoint = 10) */
  #define REG_UDPHS_EPTSTA10                     (0xFC02C25CU) /**< \brief (UDPHS) UDPHS Endpoint Status Register (endpoint = 10) */
  #define REG_UDPHS_EPTCFG11                     (0xFC02C260U) /**< \brief (UDPHS) UDPHS Endpoint Configuration Register (endpoint = 11) */
  #define REG_UDPHS_EPTCTLENB11                  (0xFC02C264U) /**< \brief (UDPHS) UDPHS Endpoint Control Enable Register (endpoint = 11) */
  #define REG_UDPHS_EPTCTLDIS11                  (0xFC02C268U) /**< \brief (UDPHS) UDPHS Endpoint Control Disable Register (endpoint = 11) */
  #define REG_UDPHS_EPTCTL11                     (0xFC02C26CU) /**< \brief (UDPHS) UDPHS Endpoint Control Register (endpoint = 11) */
  #define REG_UDPHS_EPTSETSTA11                  (0xFC02C274U) /**< \brief (UDPHS) UDPHS Endpoint Set Status Register (endpoint = 11) */
  #define REG_UDPHS_EPTCLRSTA11                  (0xFC02C278U) /**< \brief (UDPHS) UDPHS Endpoint Clear Status Register (endpoint = 11) */
  #define REG_UDPHS_EPTSTA11                     (0xFC02C27CU) /**< \brief (UDPHS) UDPHS Endpoint Status Register (endpoint = 11) */
  #define REG_UDPHS_EPTCFG12                     (0xFC02C280U) /**< \brief (UDPHS) UDPHS Endpoint Configuration Register (endpoint = 12) */
  #define REG_UDPHS_EPTCTLENB12                  (0xFC02C284U) /**< \brief (UDPHS) UDPHS Endpoint Control Enable Register (endpoint = 12) */
  #define REG_UDPHS_EPTCTLDIS12                  (0xFC02C288U) /**< \brief (UDPHS) UDPHS Endpoint Control Disable Register (endpoint = 12) */
  #define REG_UDPHS_EPTCTL12                     (0xFC02C28CU) /**< \brief (UDPHS) UDPHS Endpoint Control Register (endpoint = 12) */
  #define REG_UDPHS_EPTSETSTA12                  (0xFC02C294U) /**< \brief (UDPHS) UDPHS Endpoint Set Status Register (endpoint = 12) */
  #define REG_UDPHS_EPTCLRSTA12                  (0xFC02C298U) /**< \brief (UDPHS) UDPHS Endpoint Clear Status Register (endpoint = 12) */
  #define REG_UDPHS_EPTSTA12                     (0xFC02C29CU) /**< \brief (UDPHS) UDPHS Endpoint Status Register (endpoint = 12) */
  #define REG_UDPHS_EPTCFG13                     (0xFC02C2A0U) /**< \brief (UDPHS) UDPHS Endpoint Configuration Register (endpoint = 13) */
  #define REG_UDPHS_EPTCTLENB13                  (0xFC02C2A4U) /**< \brief (UDPHS) UDPHS Endpoint Control Enable Register (endpoint = 13) */
  #define REG_UDPHS_EPTCTLDIS13                  (0xFC02C2A8U) /**< \brief (UDPHS) UDPHS Endpoint Control Disable Register (endpoint = 13) */
  #define REG_UDPHS_EPTCTL13                     (0xFC02C2ACU) /**< \brief (UDPHS) UDPHS Endpoint Control Register (endpoint = 13) */
  #define REG_UDPHS_EPTSETSTA13                  (0xFC02C2B4U) /**< \brief (UDPHS) UDPHS Endpoint Set Status Register (endpoint = 13) */
  #define REG_UDPHS_EPTCLRSTA13                  (0xFC02C2B8U) /**< \brief (UDPHS) UDPHS Endpoint Clear Status Register (endpoint = 13) */
  #define REG_UDPHS_EPTSTA13                     (0xFC02C2BCU) /**< \brief (UDPHS) UDPHS Endpoint Status Register (endpoint = 13) */
  #define REG_UDPHS_EPTCFG14                     (0xFC02C2C0U) /**< \brief (UDPHS) UDPHS Endpoint Configuration Register (endpoint = 14) */
  #define REG_UDPHS_EPTCTLENB14                  (0xFC02C2C4U) /**< \brief (UDPHS) UDPHS Endpoint Control Enable Register (endpoint = 14) */
  #define REG_UDPHS_EPTCTLDIS14                  (0xFC02C2C8U) /**< \brief (UDPHS) UDPHS Endpoint Control Disable Register (endpoint = 14) */
  #define REG_UDPHS_EPTCTL14                     (0xFC02C2CCU) /**< \brief (UDPHS) UDPHS Endpoint Control Register (endpoint = 14) */
  #define REG_UDPHS_EPTSETSTA14                  (0xFC02C2D4U) /**< \brief (UDPHS) UDPHS Endpoint Set Status Register (endpoint = 14) */
  #define REG_UDPHS_EPTCLRSTA14                  (0xFC02C2D8U) /**< \brief (UDPHS) UDPHS Endpoint Clear Status Register (endpoint = 14) */
  #define REG_UDPHS_EPTSTA14                     (0xFC02C2DCU) /**< \brief (UDPHS) UDPHS Endpoint Status Register (endpoint = 14) */
  #define REG_UDPHS_EPTCFG15                     (0xFC02C2E0U) /**< \brief (UDPHS) UDPHS Endpoint Configuration Register (endpoint = 15) */
  #define REG_UDPHS_EPTCTLENB15                  (0xFC02C2E4U) /**< \brief (UDPHS) UDPHS Endpoint Control Enable Register (endpoint = 15) */
  #define REG_UDPHS_EPTCTLDIS15                  (0xFC02C2E8U) /**< \brief (UDPHS) UDPHS Endpoint Control Disable Register (endpoint = 15) */
  #define REG_UDPHS_EPTCTL15                     (0xFC02C2ECU) /**< \brief (UDPHS) UDPHS Endpoint Control Register (endpoint = 15) */
  #define REG_UDPHS_EPTSETSTA15                  (0xFC02C2F4U) /**< \brief (UDPHS) UDPHS Endpoint Set Status Register (endpoint = 15) */
  #define REG_UDPHS_EPTCLRSTA15                  (0xFC02C2F8U) /**< \brief (UDPHS) UDPHS Endpoint Clear Status Register (endpoint = 15) */
  #define REG_UDPHS_EPTSTA15                     (0xFC02C2FCU) /**< \brief (UDPHS) UDPHS Endpoint Status Register (endpoint = 15) */
  #define REG_UDPHS_DMANXTDSC0                   (0xFC02C300U) /**< \brief (UDPHS) UDPHS DMA Next Descriptor Address Register (channel = 0) */
  #define REG_UDPHS_DMAADDRESS0                  (0xFC02C304U) /**< \brief (UDPHS) UDPHS DMA Channel Address Register (channel = 0) */
  #define REG_UDPHS_DMACONTROL0                  (0xFC02C308U) /**< \brief (UDPHS) UDPHS DMA Channel Control Register (channel = 0) */
  #define REG_UDPHS_DMASTATUS0                   (0xFC02C30CU) /**< \brief (UDPHS) UDPHS DMA Channel Status Register (channel = 0) */
  #define REG_UDPHS_DMANXTDSC1                   (0xFC02C310U) /**< \brief (UDPHS) UDPHS DMA Next Descriptor Address Register (channel = 1) */
  #define REG_UDPHS_DMAADDRESS1                  (0xFC02C314U) /**< \brief (UDPHS) UDPHS DMA Channel Address Register (channel = 1) */
  #define REG_UDPHS_DMACONTROL1                  (0xFC02C318U) /**< \brief (UDPHS) UDPHS DMA Channel Control Register (channel = 1) */
  #define REG_UDPHS_DMASTATUS1                   (0xFC02C31CU) /**< \brief (UDPHS) UDPHS DMA Channel Status Register (channel = 1) */
  #define REG_UDPHS_DMANXTDSC2                   (0xFC02C320U) /**< \brief (UDPHS) UDPHS DMA Next Descriptor Address Register (channel = 2) */
  #define REG_UDPHS_DMAADDRESS2                  (0xFC02C324U) /**< \brief (UDPHS) UDPHS DMA Channel Address Register (channel = 2) */
  #define REG_UDPHS_DMACONTROL2                  (0xFC02C328U) /**< \brief (UDPHS) UDPHS DMA Channel Control Register (channel = 2) */
  #define REG_UDPHS_DMASTATUS2                   (0xFC02C32CU) /**< \brief (UDPHS) UDPHS DMA Channel Status Register (channel = 2) */
  #define REG_UDPHS_DMANXTDSC3                   (0xFC02C330U) /**< \brief (UDPHS) UDPHS DMA Next Descriptor Address Register (channel = 3) */
  #define REG_UDPHS_DMAADDRESS3                  (0xFC02C334U) /**< \brief (UDPHS) UDPHS DMA Channel Address Register (channel = 3) */
  #define REG_UDPHS_DMACONTROL3                  (0xFC02C338U) /**< \brief (UDPHS) UDPHS DMA Channel Control Register (channel = 3) */
  #define REG_UDPHS_DMASTATUS3                   (0xFC02C33CU) /**< \brief (UDPHS) UDPHS DMA Channel Status Register (channel = 3) */
  #define REG_UDPHS_DMANXTDSC4                   (0xFC02C340U) /**< \brief (UDPHS) UDPHS DMA Next Descriptor Address Register (channel = 4) */
  #define REG_UDPHS_DMAADDRESS4                  (0xFC02C344U) /**< \brief (UDPHS) UDPHS DMA Channel Address Register (channel = 4) */
  #define REG_UDPHS_DMACONTROL4                  (0xFC02C348U) /**< \brief (UDPHS) UDPHS DMA Channel Control Register (channel = 4) */
  #define REG_UDPHS_DMASTATUS4                   (0xFC02C34CU) /**< \brief (UDPHS) UDPHS DMA Channel Status Register (channel = 4) */
  #define REG_UDPHS_DMANXTDSC5                   (0xFC02C350U) /**< \brief (UDPHS) UDPHS DMA Next Descriptor Address Register (channel = 5) */
  #define REG_UDPHS_DMAADDRESS5                  (0xFC02C354U) /**< \brief (UDPHS) UDPHS DMA Channel Address Register (channel = 5) */
  #define REG_UDPHS_DMACONTROL5                  (0xFC02C358U) /**< \brief (UDPHS) UDPHS DMA Channel Control Register (channel = 5) */
  #define REG_UDPHS_DMASTATUS5                   (0xFC02C35CU) /**< \brief (UDPHS) UDPHS DMA Channel Status Register (channel = 5) */
  #define REG_UDPHS_DMANXTDSC6                   (0xFC02C360U) /**< \brief (UDPHS) UDPHS DMA Next Descriptor Address Register (channel = 6) */
  #define REG_UDPHS_DMAADDRESS6                  (0xFC02C364U) /**< \brief (UDPHS) UDPHS DMA Channel Address Register (channel = 6) */
  #define REG_UDPHS_DMACONTROL6                  (0xFC02C368U) /**< \brief (UDPHS) UDPHS DMA Channel Control Register (channel = 6) */
  #define REG_UDPHS_DMASTATUS6                   (0xFC02C36CU) /**< \brief (UDPHS) UDPHS DMA Channel Status Register (channel = 6) */
#else
  #define REG_UDPHS_CTRL        (*(__IO uint32_t*)0xFC02C000U) /**< \brief (UDPHS) UDPHS Control Register */
  #define REG_UDPHS_FNUM        (*(__I  uint32_t*)0xFC02C004U) /**< \brief (UDPHS) UDPHS Frame Number Register */
  #define REG_UDPHS_IEN         (*(__IO uint32_t*)0xFC02C010U) /**< \brief (UDPHS) UDPHS Interrupt Enable Register */
  #define REG_UDPHS_INTSTA      (*(__I  uint32_t*)0xFC02C014U) /**< \brief (UDPHS) UDPHS Interrupt Status Register */
  #define REG_UDPHS_CLRINT      (*(__O  uint32_t*)0xFC02C018U) /**< \brief (UDPHS) UDPHS Clear Interrupt Register */
  #define REG_UDPHS_EPTRST      (*(__O  uint32_t*)0xFC02C01CU) /**< \brief (UDPHS) UDPHS Endpoints Reset Register */
  #define REG_UDPHS_TSTSOFCNT   (*(__IO uint32_t*)0xFC02C0D0U) /**< \brief (UDPHS) UDPHS Test SOF Counter Register */
  #define REG_UDPHS_TSTCNTA     (*(__IO uint32_t*)0xFC02C0D4U) /**< \brief (UDPHS) UDPHS Test A Counter Register */
  #define REG_UDPHS_TSTCNTB     (*(__IO uint32_t*)0xFC02C0D8U) /**< \brief (UDPHS) UDPHS Test B Counter Register */
  #define REG_UDPHS_TSTMODEREG  (*(__IO uint32_t*)0xFC02C0DCU) /**< \brief (UDPHS) UDPHS Test Mode Register */
  #define REG_UDPHS_TST         (*(__IO uint32_t*)0xFC02C0E0U) /**< \brief (UDPHS) UDPHS Test Register */
  #define REG_UDPHS_ADDRSIZE    (*(__I  uint32_t*)0xFC02C0ECU) /**< \brief (UDPHS) UDPHS IP Address Size Register */
  #define REG_UDPHS_IPNAME      (*(__I  uint32_t*)0xFC02C0F0U) /**< \brief (UDPHS) UDPHS IP Name1 Register */
  #define REG_UDPHS_FEATURES    (*(__I  uint32_t*)0xFC02C0F8U) /**< \brief (UDPHS) UDPHS Features Register */
  #define REG_UDPHS_VERSION     (*(__I  uint32_t*)0xFC02C0FCU) /**< \brief (UDPHS) UDPHS Version Register */
  #define REG_UDPHS_EPTCFG0     (*(__IO uint32_t*)0xFC02C100U) /**< \brief (UDPHS) UDPHS Endpoint Configuration Register (endpoint = 0) */
  #define REG_UDPHS_EPTCTLENB0  (*(__O  uint32_t*)0xFC02C104U) /**< \brief (UDPHS) UDPHS Endpoint Control Enable Register (endpoint = 0) */
  #define REG_UDPHS_EPTCTLDIS0  (*(__O  uint32_t*)0xFC02C108U) /**< \brief (UDPHS) UDPHS Endpoint Control Disable Register (endpoint = 0) */
  #define REG_UDPHS_EPTCTL0     (*(__I  uint32_t*)0xFC02C10CU) /**< \brief (UDPHS) UDPHS Endpoint Control Register (endpoint = 0) */
  #define REG_UDPHS_EPTSETSTA0  (*(__O  uint32_t*)0xFC02C114U) /**< \brief (UDPHS) UDPHS Endpoint Set Status Register (endpoint = 0) */
  #define REG_UDPHS_EPTCLRSTA0  (*(__O  uint32_t*)0xFC02C118U) /**< \brief (UDPHS) UDPHS Endpoint Clear Status Register (endpoint = 0) */
  #define REG_UDPHS_EPTSTA0     (*(__I  uint32_t*)0xFC02C11CU) /**< \brief (UDPHS) UDPHS Endpoint Status Register (endpoint = 0) */
  #define REG_UDPHS_EPTCFG1     (*(__IO uint32_t*)0xFC02C120U) /**< \brief (UDPHS) UDPHS Endpoint Configuration Register (endpoint = 1) */
  #define REG_UDPHS_EPTCTLENB1  (*(__O  uint32_t*)0xFC02C124U) /**< \brief (UDPHS) UDPHS Endpoint Control Enable Register (endpoint = 1) */
  #define REG_UDPHS_EPTCTLDIS1  (*(__O  uint32_t*)0xFC02C128U) /**< \brief (UDPHS) UDPHS Endpoint Control Disable Register (endpoint = 1) */
  #define REG_UDPHS_EPTCTL1     (*(__I  uint32_t*)0xFC02C12CU) /**< \brief (UDPHS) UDPHS Endpoint Control Register (endpoint = 1) */
  #define REG_UDPHS_EPTSETSTA1  (*(__O  uint32_t*)0xFC02C134U) /**< \brief (UDPHS) UDPHS Endpoint Set Status Register (endpoint = 1) */
  #define REG_UDPHS_EPTCLRSTA1  (*(__O  uint32_t*)0xFC02C138U) /**< \brief (UDPHS) UDPHS Endpoint Clear Status Register (endpoint = 1) */
  #define REG_UDPHS_EPTSTA1     (*(__I  uint32_t*)0xFC02C13CU) /**< \brief (UDPHS) UDPHS Endpoint Status Register (endpoint = 1) */
  #define REG_UDPHS_EPTCFG2     (*(__IO uint32_t*)0xFC02C140U) /**< \brief (UDPHS) UDPHS Endpoint Configuration Register (endpoint = 2) */
  #define REG_UDPHS_EPTCTLENB2  (*(__O  uint32_t*)0xFC02C144U) /**< \brief (UDPHS) UDPHS Endpoint Control Enable Register (endpoint = 2) */
  #define REG_UDPHS_EPTCTLDIS2  (*(__O  uint32_t*)0xFC02C148U) /**< \brief (UDPHS) UDPHS Endpoint Control Disable Register (endpoint = 2) */
  #define REG_UDPHS_EPTCTL2     (*(__I  uint32_t*)0xFC02C14CU) /**< \brief (UDPHS) UDPHS Endpoint Control Register (endpoint = 2) */
  #define REG_UDPHS_EPTSETSTA2  (*(__O  uint32_t*)0xFC02C154U) /**< \brief (UDPHS) UDPHS Endpoint Set Status Register (endpoint = 2) */
  #define REG_UDPHS_EPTCLRSTA2  (*(__O  uint32_t*)0xFC02C158U) /**< \brief (UDPHS) UDPHS Endpoint Clear Status Register (endpoint = 2) */
  #define REG_UDPHS_EPTSTA2     (*(__I  uint32_t*)0xFC02C15CU) /**< \brief (UDPHS) UDPHS Endpoint Status Register (endpoint = 2) */
  #define REG_UDPHS_EPTCFG3     (*(__IO uint32_t*)0xFC02C160U) /**< \brief (UDPHS) UDPHS Endpoint Configuration Register (endpoint = 3) */
  #define REG_UDPHS_EPTCTLENB3  (*(__O  uint32_t*)0xFC02C164U) /**< \brief (UDPHS) UDPHS Endpoint Control Enable Register (endpoint = 3) */
  #define REG_UDPHS_EPTCTLDIS3  (*(__O  uint32_t*)0xFC02C168U) /**< \brief (UDPHS) UDPHS Endpoint Control Disable Register (endpoint = 3) */
  #define REG_UDPHS_EPTCTL3     (*(__I  uint32_t*)0xFC02C16CU) /**< \brief (UDPHS) UDPHS Endpoint Control Register (endpoint = 3) */
  #define REG_UDPHS_EPTSETSTA3  (*(__O  uint32_t*)0xFC02C174U) /**< \brief (UDPHS) UDPHS Endpoint Set Status Register (endpoint = 3) */
  #define REG_UDPHS_EPTCLRSTA3  (*(__O  uint32_t*)0xFC02C178U) /**< \brief (UDPHS) UDPHS Endpoint Clear Status Register (endpoint = 3) */
  #define REG_UDPHS_EPTSTA3     (*(__I  uint32_t*)0xFC02C17CU) /**< \brief (UDPHS) UDPHS Endpoint Status Register (endpoint = 3) */
  #define REG_UDPHS_EPTCFG4     (*(__IO uint32_t*)0xFC02C180U) /**< \brief (UDPHS) UDPHS Endpoint Configuration Register (endpoint = 4) */
  #define REG_UDPHS_EPTCTLENB4  (*(__O  uint32_t*)0xFC02C184U) /**< \brief (UDPHS) UDPHS Endpoint Control Enable Register (endpoint = 4) */
  #define REG_UDPHS_EPTCTLDIS4  (*(__O  uint32_t*)0xFC02C188U) /**< \brief (UDPHS) UDPHS Endpoint Control Disable Register (endpoint = 4) */
  #define REG_UDPHS_EPTCTL4     (*(__I  uint32_t*)0xFC02C18CU) /**< \brief (UDPHS) UDPHS Endpoint Control Register (endpoint = 4) */
  #define REG_UDPHS_EPTSETSTA4  (*(__O  uint32_t*)0xFC02C194U) /**< \brief (UDPHS) UDPHS Endpoint Set Status Register (endpoint = 4) */
  #define REG_UDPHS_EPTCLRSTA4  (*(__O  uint32_t*)0xFC02C198U) /**< \brief (UDPHS) UDPHS Endpoint Clear Status Register (endpoint = 4) */
  #define REG_UDPHS_EPTSTA4     (*(__I  uint32_t*)0xFC02C19CU) /**< \brief (UDPHS) UDPHS Endpoint Status Register (endpoint = 4) */
  #define REG_UDPHS_EPTCFG5     (*(__IO uint32_t*)0xFC02C1A0U) /**< \brief (UDPHS) UDPHS Endpoint Configuration Register (endpoint = 5) */
  #define REG_UDPHS_EPTCTLENB5  (*(__O  uint32_t*)0xFC02C1A4U) /**< \brief (UDPHS) UDPHS Endpoint Control Enable Register (endpoint = 5) */
  #define REG_UDPHS_EPTCTLDIS5  (*(__O  uint32_t*)0xFC02C1A8U) /**< \brief (UDPHS) UDPHS Endpoint Control Disable Register (endpoint = 5) */
  #define REG_UDPHS_EPTCTL5     (*(__I  uint32_t*)0xFC02C1ACU) /**< \brief (UDPHS) UDPHS Endpoint Control Register (endpoint = 5) */
  #define REG_UDPHS_EPTSETSTA5  (*(__O  uint32_t*)0xFC02C1B4U) /**< \brief (UDPHS) UDPHS Endpoint Set Status Register (endpoint = 5) */
  #define REG_UDPHS_EPTCLRSTA5  (*(__O  uint32_t*)0xFC02C1B8U) /**< \brief (UDPHS) UDPHS Endpoint Clear Status Register (endpoint = 5) */
  #define REG_UDPHS_EPTSTA5     (*(__I  uint32_t*)0xFC02C1BCU) /**< \brief (UDPHS) UDPHS Endpoint Status Register (endpoint = 5) */
  #define REG_UDPHS_EPTCFG6     (*(__IO uint32_t*)0xFC02C1C0U) /**< \brief (UDPHS) UDPHS Endpoint Configuration Register (endpoint = 6) */
  #define REG_UDPHS_EPTCTLENB6  (*(__O  uint32_t*)0xFC02C1C4U) /**< \brief (UDPHS) UDPHS Endpoint Control Enable Register (endpoint = 6) */
  #define REG_UDPHS_EPTCTLDIS6  (*(__O  uint32_t*)0xFC02C1C8U) /**< \brief (UDPHS) UDPHS Endpoint Control Disable Register (endpoint = 6) */
  #define REG_UDPHS_EPTCTL6     (*(__I  uint32_t*)0xFC02C1CCU) /**< \brief (UDPHS) UDPHS Endpoint Control Register (endpoint = 6) */
  #define REG_UDPHS_EPTSETSTA6  (*(__O  uint32_t*)0xFC02C1D4U) /**< \brief (UDPHS) UDPHS Endpoint Set Status Register (endpoint = 6) */
  #define REG_UDPHS_EPTCLRSTA6  (*(__O  uint32_t*)0xFC02C1D8U) /**< \brief (UDPHS) UDPHS Endpoint Clear Status Register (endpoint = 6) */
  #define REG_UDPHS_EPTSTA6     (*(__I  uint32_t*)0xFC02C1DCU) /**< \brief (UDPHS) UDPHS Endpoint Status Register (endpoint = 6) */
  #define REG_UDPHS_EPTCFG7     (*(__IO uint32_t*)0xFC02C1E0U) /**< \brief (UDPHS) UDPHS Endpoint Configuration Register (endpoint = 7) */
  #define REG_UDPHS_EPTCTLENB7  (*(__O  uint32_t*)0xFC02C1E4U) /**< \brief (UDPHS) UDPHS Endpoint Control Enable Register (endpoint = 7) */
  #define REG_UDPHS_EPTCTLDIS7  (*(__O  uint32_t*)0xFC02C1E8U) /**< \brief (UDPHS) UDPHS Endpoint Control Disable Register (endpoint = 7) */
  #define REG_UDPHS_EPTCTL7     (*(__I  uint32_t*)0xFC02C1ECU) /**< \brief (UDPHS) UDPHS Endpoint Control Register (endpoint = 7) */
  #define REG_UDPHS_EPTSETSTA7  (*(__O  uint32_t*)0xFC02C1F4U) /**< \brief (UDPHS) UDPHS Endpoint Set Status Register (endpoint = 7) */
  #define REG_UDPHS_EPTCLRSTA7  (*(__O  uint32_t*)0xFC02C1F8U) /**< \brief (UDPHS) UDPHS Endpoint Clear Status Register (endpoint = 7) */
  #define REG_UDPHS_EPTSTA7     (*(__I  uint32_t*)0xFC02C1FCU) /**< \brief (UDPHS) UDPHS Endpoint Status Register (endpoint = 7) */
  #define REG_UDPHS_EPTCFG8     (*(__IO uint32_t*)0xFC02C200U) /**< \brief (UDPHS) UDPHS Endpoint Configuration Register (endpoint = 8) */
  #define REG_UDPHS_EPTCTLENB8  (*(__O  uint32_t*)0xFC02C204U) /**< \brief (UDPHS) UDPHS Endpoint Control Enable Register (endpoint = 8) */
  #define REG_UDPHS_EPTCTLDIS8  (*(__O  uint32_t*)0xFC02C208U) /**< \brief (UDPHS) UDPHS Endpoint Control Disable Register (endpoint = 8) */
  #define REG_UDPHS_EPTCTL8     (*(__I  uint32_t*)0xFC02C20CU) /**< \brief (UDPHS) UDPHS Endpoint Control Register (endpoint = 8) */
  #define REG_UDPHS_EPTSETSTA8  (*(__O  uint32_t*)0xFC02C214U) /**< \brief (UDPHS) UDPHS Endpoint Set Status Register (endpoint = 8) */
  #define REG_UDPHS_EPTCLRSTA8  (*(__O  uint32_t*)0xFC02C218U) /**< \brief (UDPHS) UDPHS Endpoint Clear Status Register (endpoint = 8) */
  #define REG_UDPHS_EPTSTA8     (*(__I  uint32_t*)0xFC02C21CU) /**< \brief (UDPHS) UDPHS Endpoint Status Register (endpoint = 8) */
  #define REG_UDPHS_EPTCFG9     (*(__IO uint32_t*)0xFC02C220U) /**< \brief (UDPHS) UDPHS Endpoint Configuration Register (endpoint = 9) */
  #define REG_UDPHS_EPTCTLENB9  (*(__O  uint32_t*)0xFC02C224U) /**< \brief (UDPHS) UDPHS Endpoint Control Enable Register (endpoint = 9) */
  #define REG_UDPHS_EPTCTLDIS9  (*(__O  uint32_t*)0xFC02C228U) /**< \brief (UDPHS) UDPHS Endpoint Control Disable Register (endpoint = 9) */
  #define REG_UDPHS_EPTCTL9     (*(__I  uint32_t*)0xFC02C22CU) /**< \brief (UDPHS) UDPHS Endpoint Control Register (endpoint = 9) */
  #define REG_UDPHS_EPTSETSTA9  (*(__O  uint32_t*)0xFC02C234U) /**< \brief (UDPHS) UDPHS Endpoint Set Status Register (endpoint = 9) */
  #define REG_UDPHS_EPTCLRSTA9  (*(__O  uint32_t*)0xFC02C238U) /**< \brief (UDPHS) UDPHS Endpoint Clear Status Register (endpoint = 9) */
  #define REG_UDPHS_EPTSTA9     (*(__I  uint32_t*)0xFC02C23CU) /**< \brief (UDPHS) UDPHS Endpoint Status Register (endpoint = 9) */
  #define REG_UDPHS_EPTCFG10    (*(__IO uint32_t*)0xFC02C240U) /**< \brief (UDPHS) UDPHS Endpoint Configuration Register (endpoint = 10) */
  #define REG_UDPHS_EPTCTLENB10 (*(__O  uint32_t*)0xFC02C244U) /**< \brief (UDPHS) UDPHS Endpoint Control Enable Register (endpoint = 10) */
  #define REG_UDPHS_EPTCTLDIS10 (*(__O  uint32_t*)0xFC02C248U) /**< \brief (UDPHS) UDPHS Endpoint Control Disable Register (endpoint = 10) */
  #define REG_UDPHS_EPTCTL10    (*(__I  uint32_t*)0xFC02C24CU) /**< \brief (UDPHS) UDPHS Endpoint Control Register (endpoint = 10) */
  #define REG_UDPHS_EPTSETSTA10 (*(__O  uint32_t*)0xFC02C254U) /**< \brief (UDPHS) UDPHS Endpoint Set Status Register (endpoint = 10) */
  #define REG_UDPHS_EPTCLRSTA10 (*(__O  uint32_t*)0xFC02C258U) /**< \brief (UDPHS) UDPHS Endpoint Clear Status Register (endpoint = 10) */
  #define REG_UDPHS_EPTSTA10    (*(__I  uint32_t*)0xFC02C25CU) /**< \brief (UDPHS) UDPHS Endpoint Status Register (endpoint = 10) */
  #define REG_UDPHS_EPTCFG11    (*(__IO uint32_t*)0xFC02C260U) /**< \brief (UDPHS) UDPHS Endpoint Configuration Register (endpoint = 11) */
  #define REG_UDPHS_EPTCTLENB11 (*(__O  uint32_t*)0xFC02C264U) /**< \brief (UDPHS) UDPHS Endpoint Control Enable Register (endpoint = 11) */
  #define REG_UDPHS_EPTCTLDIS11 (*(__O  uint32_t*)0xFC02C268U) /**< \brief (UDPHS) UDPHS Endpoint Control Disable Register (endpoint = 11) */
  #define REG_UDPHS_EPTCTL11    (*(__I  uint32_t*)0xFC02C26CU) /**< \brief (UDPHS) UDPHS Endpoint Control Register (endpoint = 11) */
  #define REG_UDPHS_EPTSETSTA11 (*(__O  uint32_t*)0xFC02C274U) /**< \brief (UDPHS) UDPHS Endpoint Set Status Register (endpoint = 11) */
  #define REG_UDPHS_EPTCLRSTA11 (*(__O  uint32_t*)0xFC02C278U) /**< \brief (UDPHS) UDPHS Endpoint Clear Status Register (endpoint = 11) */
  #define REG_UDPHS_EPTSTA11    (*(__I  uint32_t*)0xFC02C27CU) /**< \brief (UDPHS) UDPHS Endpoint Status Register (endpoint = 11) */
  #define REG_UDPHS_EPTCFG12    (*(__IO uint32_t*)0xFC02C280U) /**< \brief (UDPHS) UDPHS Endpoint Configuration Register (endpoint = 12) */
  #define REG_UDPHS_EPTCTLENB12 (*(__O  uint32_t*)0xFC02C284U) /**< \brief (UDPHS) UDPHS Endpoint Control Enable Register (endpoint = 12) */
  #define REG_UDPHS_EPTCTLDIS12 (*(__O  uint32_t*)0xFC02C288U) /**< \brief (UDPHS) UDPHS Endpoint Control Disable Register (endpoint = 12) */
  #define REG_UDPHS_EPTCTL12    (*(__I  uint32_t*)0xFC02C28CU) /**< \brief (UDPHS) UDPHS Endpoint Control Register (endpoint = 12) */
  #define REG_UDPHS_EPTSETSTA12 (*(__O  uint32_t*)0xFC02C294U) /**< \brief (UDPHS) UDPHS Endpoint Set Status Register (endpoint = 12) */
  #define REG_UDPHS_EPTCLRSTA12 (*(__O  uint32_t*)0xFC02C298U) /**< \brief (UDPHS) UDPHS Endpoint Clear Status Register (endpoint = 12) */
  #define REG_UDPHS_EPTSTA12    (*(__I  uint32_t*)0xFC02C29CU) /**< \brief (UDPHS) UDPHS Endpoint Status Register (endpoint = 12) */
  #define REG_UDPHS_EPTCFG13    (*(__IO uint32_t*)0xFC02C2A0U) /**< \brief (UDPHS) UDPHS Endpoint Configuration Register (endpoint = 13) */
  #define REG_UDPHS_EPTCTLENB13 (*(__O  uint32_t*)0xFC02C2A4U) /**< \brief (UDPHS) UDPHS Endpoint Control Enable Register (endpoint = 13) */
  #define REG_UDPHS_EPTCTLDIS13 (*(__O  uint32_t*)0xFC02C2A8U) /**< \brief (UDPHS) UDPHS Endpoint Control Disable Register (endpoint = 13) */
  #define REG_UDPHS_EPTCTL13    (*(__I  uint32_t*)0xFC02C2ACU) /**< \brief (UDPHS) UDPHS Endpoint Control Register (endpoint = 13) */
  #define REG_UDPHS_EPTSETSTA13 (*(__O  uint32_t*)0xFC02C2B4U) /**< \brief (UDPHS) UDPHS Endpoint Set Status Register (endpoint = 13) */
  #define REG_UDPHS_EPTCLRSTA13 (*(__O  uint32_t*)0xFC02C2B8U) /**< \brief (UDPHS) UDPHS Endpoint Clear Status Register (endpoint = 13) */
  #define REG_UDPHS_EPTSTA13    (*(__I  uint32_t*)0xFC02C2BCU) /**< \brief (UDPHS) UDPHS Endpoint Status Register (endpoint = 13) */
  #define REG_UDPHS_EPTCFG14    (*(__IO uint32_t*)0xFC02C2C0U) /**< \brief (UDPHS) UDPHS Endpoint Configuration Register (endpoint = 14) */
  #define REG_UDPHS_EPTCTLENB14 (*(__O  uint32_t*)0xFC02C2C4U) /**< \brief (UDPHS) UDPHS Endpoint Control Enable Register (endpoint = 14) */
  #define REG_UDPHS_EPTCTLDIS14 (*(__O  uint32_t*)0xFC02C2C8U) /**< \brief (UDPHS) UDPHS Endpoint Control Disable Register (endpoint = 14) */
  #define REG_UDPHS_EPTCTL14    (*(__I  uint32_t*)0xFC02C2CCU) /**< \brief (UDPHS) UDPHS Endpoint Control Register (endpoint = 14) */
  #define REG_UDPHS_EPTSETSTA14 (*(__O  uint32_t*)0xFC02C2D4U) /**< \brief (UDPHS) UDPHS Endpoint Set Status Register (endpoint = 14) */
  #define REG_UDPHS_EPTCLRSTA14 (*(__O  uint32_t*)0xFC02C2D8U) /**< \brief (UDPHS) UDPHS Endpoint Clear Status Register (endpoint = 14) */
  #define REG_UDPHS_EPTSTA14    (*(__I  uint32_t*)0xFC02C2DCU) /**< \brief (UDPHS) UDPHS Endpoint Status Register (endpoint = 14) */
  #define REG_UDPHS_EPTCFG15    (*(__IO uint32_t*)0xFC02C2E0U) /**< \brief (UDPHS) UDPHS Endpoint Configuration Register (endpoint = 15) */
  #define REG_UDPHS_EPTCTLENB15 (*(__O  uint32_t*)0xFC02C2E4U) /**< \brief (UDPHS) UDPHS Endpoint Control Enable Register (endpoint = 15) */
  #define REG_UDPHS_EPTCTLDIS15 (*(__O  uint32_t*)0xFC02C2E8U) /**< \brief (UDPHS) UDPHS Endpoint Control Disable Register (endpoint = 15) */
  #define REG_UDPHS_EPTCTL15    (*(__I  uint32_t*)0xFC02C2ECU) /**< \brief (UDPHS) UDPHS Endpoint Control Register (endpoint = 15) */
  #define REG_UDPHS_EPTSETSTA15 (*(__O  uint32_t*)0xFC02C2F4U) /**< \brief (UDPHS) UDPHS Endpoint Set Status Register (endpoint = 15) */
  #define REG_UDPHS_EPTCLRSTA15 (*(__O  uint32_t*)0xFC02C2F8U) /**< \brief (UDPHS) UDPHS Endpoint Clear Status Register (endpoint = 15) */
  #define REG_UDPHS_EPTSTA15    (*(__I  uint32_t*)0xFC02C2FCU) /**< \brief (UDPHS) UDPHS Endpoint Status Register (endpoint = 15) */
  #define REG_UDPHS_DMANXTDSC0  (*(__IO uint32_t*)0xFC02C300U) /**< \brief (UDPHS) UDPHS DMA Next Descriptor Address Register (channel = 0) */
  #define REG_UDPHS_DMAADDRESS0 (*(__IO uint32_t*)0xFC02C304U) /**< \brief (UDPHS) UDPHS DMA Channel Address Register (channel = 0) */
  #define REG_UDPHS_DMACONTROL0 (*(__IO uint32_t*)0xFC02C308U) /**< \brief (UDPHS) UDPHS DMA Channel Control Register (channel = 0) */
  #define REG_UDPHS_DMASTATUS0  (*(__IO uint32_t*)0xFC02C30CU) /**< \brief (UDPHS) UDPHS DMA Channel Status Register (channel = 0) */
  #define REG_UDPHS_DMANXTDSC1  (*(__IO uint32_t*)0xFC02C310U) /**< \brief (UDPHS) UDPHS DMA Next Descriptor Address Register (channel = 1) */
  #define REG_UDPHS_DMAADDRESS1 (*(__IO uint32_t*)0xFC02C314U) /**< \brief (UDPHS) UDPHS DMA Channel Address Register (channel = 1) */
  #define REG_UDPHS_DMACONTROL1 (*(__IO uint32_t*)0xFC02C318U) /**< \brief (UDPHS) UDPHS DMA Channel Control Register (channel = 1) */
  #define REG_UDPHS_DMASTATUS1  (*(__IO uint32_t*)0xFC02C31CU) /**< \brief (UDPHS) UDPHS DMA Channel Status Register (channel = 1) */
  #define REG_UDPHS_DMANXTDSC2  (*(__IO uint32_t*)0xFC02C320U) /**< \brief (UDPHS) UDPHS DMA Next Descriptor Address Register (channel = 2) */
  #define REG_UDPHS_DMAADDRESS2 (*(__IO uint32_t*)0xFC02C324U) /**< \brief (UDPHS) UDPHS DMA Channel Address Register (channel = 2) */
  #define REG_UDPHS_DMACONTROL2 (*(__IO uint32_t*)0xFC02C328U) /**< \brief (UDPHS) UDPHS DMA Channel Control Register (channel = 2) */
  #define REG_UDPHS_DMASTATUS2  (*(__IO uint32_t*)0xFC02C32CU) /**< \brief (UDPHS) UDPHS DMA Channel Status Register (channel = 2) */
  #define REG_UDPHS_DMANXTDSC3  (*(__IO uint32_t*)0xFC02C330U) /**< \brief (UDPHS) UDPHS DMA Next Descriptor Address Register (channel = 3) */
  #define REG_UDPHS_DMAADDRESS3 (*(__IO uint32_t*)0xFC02C334U) /**< \brief (UDPHS) UDPHS DMA Channel Address Register (channel = 3) */
  #define REG_UDPHS_DMACONTROL3 (*(__IO uint32_t*)0xFC02C338U) /**< \brief (UDPHS) UDPHS DMA Channel Control Register (channel = 3) */
  #define REG_UDPHS_DMASTATUS3  (*(__IO uint32_t*)0xFC02C33CU) /**< \brief (UDPHS) UDPHS DMA Channel Status Register (channel = 3) */
  #define REG_UDPHS_DMANXTDSC4  (*(__IO uint32_t*)0xFC02C340U) /**< \brief (UDPHS) UDPHS DMA Next Descriptor Address Register (channel = 4) */
  #define REG_UDPHS_DMAADDRESS4 (*(__IO uint32_t*)0xFC02C344U) /**< \brief (UDPHS) UDPHS DMA Channel Address Register (channel = 4) */
  #define REG_UDPHS_DMACONTROL4 (*(__IO uint32_t*)0xFC02C348U) /**< \brief (UDPHS) UDPHS DMA Channel Control Register (channel = 4) */
  #define REG_UDPHS_DMASTATUS4  (*(__IO uint32_t*)0xFC02C34CU) /**< \brief (UDPHS) UDPHS DMA Channel Status Register (channel = 4) */
  #define REG_UDPHS_DMANXTDSC5  (*(__IO uint32_t*)0xFC02C350U) /**< \brief (UDPHS) UDPHS DMA Next Descriptor Address Register (channel = 5) */
  #define REG_UDPHS_DMAADDRESS5 (*(__IO uint32_t*)0xFC02C354U) /**< \brief (UDPHS) UDPHS DMA Channel Address Register (channel = 5) */
  #define REG_UDPHS_DMACONTROL5 (*(__IO uint32_t*)0xFC02C358U) /**< \brief (UDPHS) UDPHS DMA Channel Control Register (channel = 5) */
  #define REG_UDPHS_DMASTATUS5  (*(__IO uint32_t*)0xFC02C35CU) /**< \brief (UDPHS) UDPHS DMA Channel Status Register (channel = 5) */
  #define REG_UDPHS_DMANXTDSC6  (*(__IO uint32_t*)0xFC02C360U) /**< \brief (UDPHS) UDPHS DMA Next Descriptor Address Register (channel = 6) */
  #define REG_UDPHS_DMAADDRESS6 (*(__IO uint32_t*)0xFC02C364U) /**< \brief (UDPHS) UDPHS DMA Channel Address Register (channel = 6) */
  #define REG_UDPHS_DMACONTROL6 (*(__IO uint32_t*)0xFC02C368U) /**< \brief (UDPHS) UDPHS DMA Channel Control Register (channel = 6) */
  #define REG_UDPHS_DMASTATUS6  (*(__IO uint32_t*)0xFC02C36CU) /**< \brief (UDPHS) UDPHS DMA Channel Status Register (channel = 6) */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for ADC peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_ADC_CR                       (0xFC030000U) /**< \brief (ADC) Control Register */
  #define REG_ADC_MR                       (0xFC030004U) /**< \brief (ADC) Mode Register */
  #define REG_ADC_SEQR1                    (0xFC030008U) /**< \brief (ADC) Channel Sequence Register 1 */
  #define REG_ADC_SEQR2                    (0xFC03000CU) /**< \brief (ADC) Channel Sequence Register 2 */
  #define REG_ADC_CHER                     (0xFC030010U) /**< \brief (ADC) Channel Enable Register */
  #define REG_ADC_CHDR                     (0xFC030014U) /**< \brief (ADC) Channel Disable Register */
  #define REG_ADC_CHSR                     (0xFC030018U) /**< \brief (ADC) Channel Status Register */
  #define REG_ADC_LCDR                     (0xFC030020U) /**< \brief (ADC) Last Converted Data Register */
  #define REG_ADC_IER                      (0xFC030024U) /**< \brief (ADC) Interrupt Enable Register */
  #define REG_ADC_IDR                      (0xFC030028U) /**< \brief (ADC) Interrupt Disable Register */
  #define REG_ADC_IMR                      (0xFC03002CU) /**< \brief (ADC) Interrupt Mask Register */
  #define REG_ADC_ISR                      (0xFC030030U) /**< \brief (ADC) Interrupt Status Register */
  #define REG_ADC_LCTMR                    (0xFC030034U) /**< \brief (ADC) Last Channel Trigger Mode Register */
  #define REG_ADC_LCCWR                    (0xFC030038U) /**< \brief (ADC) Last Channel Compare Window Register */
  #define REG_ADC_OVER                     (0xFC03003CU) /**< \brief (ADC) Overrun Status Register */
  #define REG_ADC_EMR                      (0xFC030040U) /**< \brief (ADC) Extended Mode Register */
  #define REG_ADC_CWR                      (0xFC030044U) /**< \brief (ADC) Compare Window Register */
  #define REG_ADC_CGR                      (0xFC030048U) /**< \brief (ADC) Channel Gain Register */
  #define REG_ADC_COR                      (0xFC03004CU) /**< \brief (ADC) Channel Offset Register */
  #define REG_ADC_CDR0                     (0xFC030050U) /**< \brief (ADC) Channel Data Register 0 */
  #define REG_ADC_CDR1                     (0xFC030054U) /**< \brief (ADC) Channel Data Register 1 */
  #define REG_ADC_CDR2                     (0xFC030058U) /**< \brief (ADC) Channel Data Register 2 */
  #define REG_ADC_CDR3                     (0xFC03005CU) /**< \brief (ADC) Channel Data Register 3 */
  #define REG_ADC_CDR4                     (0xFC030060U) /**< \brief (ADC) Channel Data Register 4 */
  #define REG_ADC_CDR5                     (0xFC030064U) /**< \brief (ADC) Channel Data Register 5 */
  #define REG_ADC_CDR6                     (0xFC030068U) /**< \brief (ADC) Channel Data Register 6 */
  #define REG_ADC_CDR7                     (0xFC03006CU) /**< \brief (ADC) Channel Data Register 7 */
  #define REG_ADC_CDR8                     (0xFC030070U) /**< \brief (ADC) Channel Data Register 8 */
  #define REG_ADC_CDR9                     (0xFC030074U) /**< \brief (ADC) Channel Data Register 9 */
  #define REG_ADC_CDR10                    (0xFC030078U) /**< \brief (ADC) Channel Data Register 10 */
  #define REG_ADC_CDR11                    (0xFC03007CU) /**< \brief (ADC) Channel Data Register 11 */
  #define REG_ADC_CDR12                    (0xFC030080U) /**< \brief (ADC) Channel Data Register 12 */
  #define REG_ADC_CDR13                    (0xFC030084U) /**< \brief (ADC) Channel Data Register 13 */
  #define REG_ADC_CDR14                    (0xFC030088U) /**< \brief (ADC) Channel Data Register 14 */
  #define REG_ADC_CDR15                    (0xFC03008CU) /**< \brief (ADC) Channel Data Register 15 */
  #define REG_ADC_CDR16                    (0xFC030090U) /**< \brief (ADC) Channel Data Register 16 */
  #define REG_ADC_ACR                      (0xFC030094U) /**< \brief (ADC) Analog Control Register */
  #define REG_ADC_TSMR                     (0xFC0300B0U) /**< \brief (ADC) Touchscreen Mode Register */
  #define REG_ADC_XPOSR                    (0xFC0300B4U) /**< \brief (ADC) Touchscreen X Position Register */
  #define REG_ADC_YPOSR                    (0xFC0300B8U) /**< \brief (ADC) Touchscreen Y Position Register */
  #define REG_ADC_PRESSR                   (0xFC0300BCU) /**< \brief (ADC) Touchscreen Pressure Register */
  #define REG_ADC_TRGR                     (0xFC0300C0U) /**< \brief (ADC) Trigger Register */
  #define REG_ADC_WPMR                     (0xFC0300E4U) /**< \brief (ADC) Write Protection Mode Register */
  #define REG_ADC_WPSR                     (0xFC0300E8U) /**< \brief (ADC) Write Protection Status Register */
  #define REG_ADC_VERSION                  (0xFC0300FCU) /**< \brief (ADC) Version Register */
#else
  #define REG_ADC_CR      (*(__O  uint32_t*)0xFC030000U) /**< \brief (ADC) Control Register */
  #define REG_ADC_MR      (*(__IO uint32_t*)0xFC030004U) /**< \brief (ADC) Mode Register */
  #define REG_ADC_SEQR1   (*(__IO uint32_t*)0xFC030008U) /**< \brief (ADC) Channel Sequence Register 1 */
  #define REG_ADC_SEQR2   (*(__IO uint32_t*)0xFC03000CU) /**< \brief (ADC) Channel Sequence Register 2 */
  #define REG_ADC_CHER    (*(__O  uint32_t*)0xFC030010U) /**< \brief (ADC) Channel Enable Register */
  #define REG_ADC_CHDR    (*(__O  uint32_t*)0xFC030014U) /**< \brief (ADC) Channel Disable Register */
  #define REG_ADC_CHSR    (*(__I  uint32_t*)0xFC030018U) /**< \brief (ADC) Channel Status Register */
  #define REG_ADC_LCDR    (*(__I  uint32_t*)0xFC030020U) /**< \brief (ADC) Last Converted Data Register */
  #define REG_ADC_IER     (*(__O  uint32_t*)0xFC030024U) /**< \brief (ADC) Interrupt Enable Register */
  #define REG_ADC_IDR     (*(__O  uint32_t*)0xFC030028U) /**< \brief (ADC) Interrupt Disable Register */
  #define REG_ADC_IMR     (*(__I  uint32_t*)0xFC03002CU) /**< \brief (ADC) Interrupt Mask Register */
  #define REG_ADC_ISR     (*(__I  uint32_t*)0xFC030030U) /**< \brief (ADC) Interrupt Status Register */
  #define REG_ADC_LCTMR   (*(__IO uint32_t*)0xFC030034U) /**< \brief (ADC) Last Channel Trigger Mode Register */
  #define REG_ADC_LCCWR   (*(__IO uint32_t*)0xFC030038U) /**< \brief (ADC) Last Channel Compare Window Register */
  #define REG_ADC_OVER    (*(__I  uint32_t*)0xFC03003CU) /**< \brief (ADC) Overrun Status Register */
  #define REG_ADC_EMR     (*(__IO uint32_t*)0xFC030040U) /**< \brief (ADC) Extended Mode Register */
  #define REG_ADC_CWR     (*(__IO uint32_t*)0xFC030044U) /**< \brief (ADC) Compare Window Register */
  #define REG_ADC_CGR     (*(__IO uint32_t*)0xFC030048U) /**< \brief (ADC) Channel Gain Register */
  #define REG_ADC_COR     (*(__IO uint32_t*)0xFC03004CU) /**< \brief (ADC) Channel Offset Register */
  #define REG_ADC_CDR0    (*(__I  uint32_t*)0xFC030050U) /**< \brief (ADC) Channel Data Register 0 */
  #define REG_ADC_CDR1    (*(__I  uint32_t*)0xFC030054U) /**< \brief (ADC) Channel Data Register 1 */
  #define REG_ADC_CDR2    (*(__I  uint32_t*)0xFC030058U) /**< \brief (ADC) Channel Data Register 2 */
  #define REG_ADC_CDR3    (*(__I  uint32_t*)0xFC03005CU) /**< \brief (ADC) Channel Data Register 3 */
  #define REG_ADC_CDR4    (*(__I  uint32_t*)0xFC030060U) /**< \brief (ADC) Channel Data Register 4 */
  #define REG_ADC_CDR5    (*(__I  uint32_t*)0xFC030064U) /**< \brief (ADC) Channel Data Register 5 */
  #define REG_ADC_CDR6    (*(__I  uint32_t*)0xFC030068U) /**< \brief (ADC) Channel Data Register 6 */
  #define REG_ADC_CDR7    (*(__I  uint32_t*)0xFC03006CU) /**< \brief (ADC) Channel Data Register 7 */
  #define REG_ADC_CDR8    (*(__I  uint32_t*)0xFC030070U) /**< \brief (ADC) Channel Data Register 8 */
  #define REG_ADC_CDR9    (*(__I  uint32_t*)0xFC030074U) /**< \brief (ADC) Channel Data Register 9 */
  #define REG_ADC_CDR10   (*(__I  uint32_t*)0xFC030078U) /**< \brief (ADC) Channel Data Register 10 */
  #define REG_ADC_CDR11   (*(__I  uint32_t*)0xFC03007CU) /**< \brief (ADC) Channel Data Register 11 */
  #define REG_ADC_CDR12   (*(__I  uint32_t*)0xFC030080U) /**< \brief (ADC) Channel Data Register 12 */
  #define REG_ADC_CDR13   (*(__I  uint32_t*)0xFC030084U) /**< \brief (ADC) Channel Data Register 13 */
  #define REG_ADC_CDR14   (*(__I  uint32_t*)0xFC030088U) /**< \brief (ADC) Channel Data Register 14 */
  #define REG_ADC_CDR15   (*(__I  uint32_t*)0xFC03008CU) /**< \brief (ADC) Channel Data Register 15 */
  #define REG_ADC_CDR16   (*(__I  uint32_t*)0xFC030090U) /**< \brief (ADC) Channel Data Register 16 */
  #define REG_ADC_ACR     (*(__IO uint32_t*)0xFC030094U) /**< \brief (ADC) Analog Control Register */
  #define REG_ADC_TSMR    (*(__IO uint32_t*)0xFC0300B0U) /**< \brief (ADC) Touchscreen Mode Register */
  #define REG_ADC_XPOSR   (*(__I  uint32_t*)0xFC0300B4U) /**< \brief (ADC) Touchscreen X Position Register */
  #define REG_ADC_YPOSR   (*(__I  uint32_t*)0xFC0300B8U) /**< \brief (ADC) Touchscreen Y Position Register */
  #define REG_ADC_PRESSR  (*(__I  uint32_t*)0xFC0300BCU) /**< \brief (ADC) Touchscreen Pressure Register */
  #define REG_ADC_TRGR    (*(__IO uint32_t*)0xFC0300C0U) /**< \brief (ADC) Trigger Register */
  #define REG_ADC_WPMR    (*(__IO uint32_t*)0xFC0300E4U) /**< \brief (ADC) Write Protection Mode Register */
  #define REG_ADC_WPSR    (*(__I  uint32_t*)0xFC0300E8U) /**< \brief (ADC) Write Protection Status Register */
  #define REG_ADC_VERSION (*(__I  uint32_t*)0xFC0300FCU) /**< \brief (ADC) Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for PIOA peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_PIO_MSKR0                      (0xFC038000U) /**< \brief (PIOA) PIO Mask Register (io_group = 0) */
  #define REG_PIO_CFGR0                      (0xFC038004U) /**< \brief (PIOA) PIO Configuration Register (io_group = 0) */
  #define REG_PIO_PDSR0                      (0xFC038008U) /**< \brief (PIOA) PIO Pin Data Status Register (io_group = 0) */
  #define REG_PIO_LOCKSR0                    (0xFC03800CU) /**< \brief (PIOA) PIO Lock Status Register (io_group = 0) */
  #define REG_PIO_SODR0                      (0xFC038010U) /**< \brief (PIOA) PIO Set Output Data Register (io_group = 0) */
  #define REG_PIO_CODR0                      (0xFC038014U) /**< \brief (PIOA) PIO Clear Output Data Register (io_group = 0) */
  #define REG_PIO_ODSR0                      (0xFC038018U) /**< \brief (PIOA) PIO Output Data Status Register (io_group = 0) */
  #define REG_PIO_IER0                       (0xFC038020U) /**< \brief (PIOA) PIO Interrupt Enable Register (io_group = 0) */
  #define REG_PIO_IDR0                       (0xFC038024U) /**< \brief (PIOA) PIO Interrupt Disable Register (io_group = 0) */
  #define REG_PIO_IMR0                       (0xFC038028U) /**< \brief (PIOA) PIO Interrupt Mask Register (io_group = 0) */
  #define REG_PIO_ISR0                       (0xFC03802CU) /**< \brief (PIOA) PIO Interrupt Status Register (io_group = 0) */
  #define REG_PIO_IOFR0                      (0xFC03803CU) /**< \brief (PIOA) PIO I/O Freeze Register (io_group = 0) */
  #define REG_PIO_MSKR1                      (0xFC038040U) /**< \brief (PIOA) PIO Mask Register (io_group = 1) */
  #define REG_PIO_CFGR1                      (0xFC038044U) /**< \brief (PIOA) PIO Configuration Register (io_group = 1) */
  #define REG_PIO_PDSR1                      (0xFC038048U) /**< \brief (PIOA) PIO Pin Data Status Register (io_group = 1) */
  #define REG_PIO_LOCKSR1                    (0xFC03804CU) /**< \brief (PIOA) PIO Lock Status Register (io_group = 1) */
  #define REG_PIO_SODR1                      (0xFC038050U) /**< \brief (PIOA) PIO Set Output Data Register (io_group = 1) */
  #define REG_PIO_CODR1                      (0xFC038054U) /**< \brief (PIOA) PIO Clear Output Data Register (io_group = 1) */
  #define REG_PIO_ODSR1                      (0xFC038058U) /**< \brief (PIOA) PIO Output Data Status Register (io_group = 1) */
  #define REG_PIO_IER1                       (0xFC038060U) /**< \brief (PIOA) PIO Interrupt Enable Register (io_group = 1) */
  #define REG_PIO_IDR1                       (0xFC038064U) /**< \brief (PIOA) PIO Interrupt Disable Register (io_group = 1) */
  #define REG_PIO_IMR1                       (0xFC038068U) /**< \brief (PIOA) PIO Interrupt Mask Register (io_group = 1) */
  #define REG_PIO_ISR1                       (0xFC03806CU) /**< \brief (PIOA) PIO Interrupt Status Register (io_group = 1) */
  #define REG_PIO_IOFR1                      (0xFC03807CU) /**< \brief (PIOA) PIO I/O Freeze Register (io_group = 1) */
  #define REG_PIO_MSKR2                      (0xFC038080U) /**< \brief (PIOA) PIO Mask Register (io_group = 2) */
  #define REG_PIO_CFGR2                      (0xFC038084U) /**< \brief (PIOA) PIO Configuration Register (io_group = 2) */
  #define REG_PIO_PDSR2                      (0xFC038088U) /**< \brief (PIOA) PIO Pin Data Status Register (io_group = 2) */
  #define REG_PIO_LOCKSR2                    (0xFC03808CU) /**< \brief (PIOA) PIO Lock Status Register (io_group = 2) */
  #define REG_PIO_SODR2                      (0xFC038090U) /**< \brief (PIOA) PIO Set Output Data Register (io_group = 2) */
  #define REG_PIO_CODR2                      (0xFC038094U) /**< \brief (PIOA) PIO Clear Output Data Register (io_group = 2) */
  #define REG_PIO_ODSR2                      (0xFC038098U) /**< \brief (PIOA) PIO Output Data Status Register (io_group = 2) */
  #define REG_PIO_IER2                       (0xFC0380A0U) /**< \brief (PIOA) PIO Interrupt Enable Register (io_group = 2) */
  #define REG_PIO_IDR2                       (0xFC0380A4U) /**< \brief (PIOA) PIO Interrupt Disable Register (io_group = 2) */
  #define REG_PIO_IMR2                       (0xFC0380A8U) /**< \brief (PIOA) PIO Interrupt Mask Register (io_group = 2) */
  #define REG_PIO_ISR2                       (0xFC0380ACU) /**< \brief (PIOA) PIO Interrupt Status Register (io_group = 2) */
  #define REG_PIO_IOFR2                      (0xFC0380BCU) /**< \brief (PIOA) PIO I/O Freeze Register (io_group = 2) */
  #define REG_PIO_MSKR3                      (0xFC0380C0U) /**< \brief (PIOA) PIO Mask Register (io_group = 3) */
  #define REG_PIO_CFGR3                      (0xFC0380C4U) /**< \brief (PIOA) PIO Configuration Register (io_group = 3) */
  #define REG_PIO_PDSR3                      (0xFC0380C8U) /**< \brief (PIOA) PIO Pin Data Status Register (io_group = 3) */
  #define REG_PIO_LOCKSR3                    (0xFC0380CCU) /**< \brief (PIOA) PIO Lock Status Register (io_group = 3) */
  #define REG_PIO_SODR3                      (0xFC0380D0U) /**< \brief (PIOA) PIO Set Output Data Register (io_group = 3) */
  #define REG_PIO_CODR3                      (0xFC0380D4U) /**< \brief (PIOA) PIO Clear Output Data Register (io_group = 3) */
  #define REG_PIO_ODSR3                      (0xFC0380D8U) /**< \brief (PIOA) PIO Output Data Status Register (io_group = 3) */
  #define REG_PIO_IER3                       (0xFC0380E0U) /**< \brief (PIOA) PIO Interrupt Enable Register (io_group = 3) */
  #define REG_PIO_IDR3                       (0xFC0380E4U) /**< \brief (PIOA) PIO Interrupt Disable Register (io_group = 3) */
  #define REG_PIO_IMR3                       (0xFC0380E8U) /**< \brief (PIOA) PIO Interrupt Mask Register (io_group = 3) */
  #define REG_PIO_ISR3                       (0xFC0380ECU) /**< \brief (PIOA) PIO Interrupt Status Register (io_group = 3) */
  #define REG_PIO_IOFR3                      (0xFC0380FCU) /**< \brief (PIOA) PIO I/O Freeze Register (io_group = 3) */
  #define REG_PIO_TPFR                       (0xFC0385D0U) /**< \brief (PIOA) PIO Tamper Freeze Register */
  #define REG_PIO_WPMR                       (0xFC0385E0U) /**< \brief (PIOA) PIO Write Protection Mode Register */
  #define REG_PIO_WPSR                       (0xFC0385E4U) /**< \brief (PIOA) PIO Write Protection Status Register */
  #define REG_PIO_VERSION                    (0xFC0385FCU) /**< \brief (PIOA) Version Register */
  #define REG_S_PIO_MSKR0                    (0xFC039000U) /**< \brief (PIOA) Secure PIO Mask Register (io_group = 0) */
  #define REG_S_PIO_CFGR0                    (0xFC039004U) /**< \brief (PIOA) Secure PIO Configuration Register (io_group = 0) */
  #define REG_S_PIO_PDSR0                    (0xFC039008U) /**< \brief (PIOA) Secure PIO Pin Data Status Register (io_group = 0) */
  #define REG_S_PIO_LOCKSR0                  (0xFC03900CU) /**< \brief (PIOA) Secure PIO Lock Status Register (io_group = 0) */
  #define REG_S_PIO_SODR0                    (0xFC039010U) /**< \brief (PIOA) Secure PIO Set Output Data Register (io_group = 0) */
  #define REG_S_PIO_CODR0                    (0xFC039014U) /**< \brief (PIOA) Secure PIO Clear Output Data Register (io_group = 0) */
  #define REG_S_PIO_ODSR0                    (0xFC039018U) /**< \brief (PIOA) Secure PIO Output Data Status Register (io_group = 0) */
  #define REG_S_PIO_IER0                     (0xFC039020U) /**< \brief (PIOA) Secure PIO Interrupt Enable Register (io_group = 0) */
  #define REG_S_PIO_IDR0                     (0xFC039024U) /**< \brief (PIOA) Secure PIO Interrupt Disable Register (io_group = 0) */
  #define REG_S_PIO_IMR0                     (0xFC039028U) /**< \brief (PIOA) Secure PIO Interrupt Mask Register (io_group = 0) */
  #define REG_S_PIO_ISR0                     (0xFC03902CU) /**< \brief (PIOA) Secure PIO Interrupt Status Register (io_group = 0) */
  #define REG_S_PIO_SIONR0                   (0xFC039030U) /**< \brief (PIOA) Secure PIO Set I/O Non-Secure Register (io_group = 0) */
  #define REG_S_PIO_SIOSR0                   (0xFC039034U) /**< \brief (PIOA) Secure PIO Set I/O Secure Register (io_group = 0) */
  #define REG_S_PIO_IOSSR0                   (0xFC039038U) /**< \brief (PIOA) Secure PIO I/O Security Status Register (io_group = 0) */
  #define REG_S_PIO_IOFR0                    (0xFC03903CU) /**< \brief (PIOA) Secure PIO I/O Freeze Register (io_group = 0) */
  #define REG_S_PIO_MSKR1                    (0xFC039040U) /**< \brief (PIOA) Secure PIO Mask Register (io_group = 1) */
  #define REG_S_PIO_CFGR1                    (0xFC039044U) /**< \brief (PIOA) Secure PIO Configuration Register (io_group = 1) */
  #define REG_S_PIO_PDSR1                    (0xFC039048U) /**< \brief (PIOA) Secure PIO Pin Data Status Register (io_group = 1) */
  #define REG_S_PIO_LOCKSR1                  (0xFC03904CU) /**< \brief (PIOA) Secure PIO Lock Status Register (io_group = 1) */
  #define REG_S_PIO_SODR1                    (0xFC039050U) /**< \brief (PIOA) Secure PIO Set Output Data Register (io_group = 1) */
  #define REG_S_PIO_CODR1                    (0xFC039054U) /**< \brief (PIOA) Secure PIO Clear Output Data Register (io_group = 1) */
  #define REG_S_PIO_ODSR1                    (0xFC039058U) /**< \brief (PIOA) Secure PIO Output Data Status Register (io_group = 1) */
  #define REG_S_PIO_IER1                     (0xFC039060U) /**< \brief (PIOA) Secure PIO Interrupt Enable Register (io_group = 1) */
  #define REG_S_PIO_IDR1                     (0xFC039064U) /**< \brief (PIOA) Secure PIO Interrupt Disable Register (io_group = 1) */
  #define REG_S_PIO_IMR1                     (0xFC039068U) /**< \brief (PIOA) Secure PIO Interrupt Mask Register (io_group = 1) */
  #define REG_S_PIO_ISR1                     (0xFC03906CU) /**< \brief (PIOA) Secure PIO Interrupt Status Register (io_group = 1) */
  #define REG_S_PIO_SIONR1                   (0xFC039070U) /**< \brief (PIOA) Secure PIO Set I/O Non-Secure Register (io_group = 1) */
  #define REG_S_PIO_SIOSR1                   (0xFC039074U) /**< \brief (PIOA) Secure PIO Set I/O Secure Register (io_group = 1) */
  #define REG_S_PIO_IOSSR1                   (0xFC039078U) /**< \brief (PIOA) Secure PIO I/O Security Status Register (io_group = 1) */
  #define REG_S_PIO_IOFR1                    (0xFC03907CU) /**< \brief (PIOA) Secure PIO I/O Freeze Register (io_group = 1) */
  #define REG_S_PIO_MSKR2                    (0xFC039080U) /**< \brief (PIOA) Secure PIO Mask Register (io_group = 2) */
  #define REG_S_PIO_CFGR2                    (0xFC039084U) /**< \brief (PIOA) Secure PIO Configuration Register (io_group = 2) */
  #define REG_S_PIO_PDSR2                    (0xFC039088U) /**< \brief (PIOA) Secure PIO Pin Data Status Register (io_group = 2) */
  #define REG_S_PIO_LOCKSR2                  (0xFC03908CU) /**< \brief (PIOA) Secure PIO Lock Status Register (io_group = 2) */
  #define REG_S_PIO_SODR2                    (0xFC039090U) /**< \brief (PIOA) Secure PIO Set Output Data Register (io_group = 2) */
  #define REG_S_PIO_CODR2                    (0xFC039094U) /**< \brief (PIOA) Secure PIO Clear Output Data Register (io_group = 2) */
  #define REG_S_PIO_ODSR2                    (0xFC039098U) /**< \brief (PIOA) Secure PIO Output Data Status Register (io_group = 2) */
  #define REG_S_PIO_IER2                     (0xFC0390A0U) /**< \brief (PIOA) Secure PIO Interrupt Enable Register (io_group = 2) */
  #define REG_S_PIO_IDR2                     (0xFC0390A4U) /**< \brief (PIOA) Secure PIO Interrupt Disable Register (io_group = 2) */
  #define REG_S_PIO_IMR2                     (0xFC0390A8U) /**< \brief (PIOA) Secure PIO Interrupt Mask Register (io_group = 2) */
  #define REG_S_PIO_ISR2                     (0xFC0390ACU) /**< \brief (PIOA) Secure PIO Interrupt Status Register (io_group = 2) */
  #define REG_S_PIO_SIONR2                   (0xFC0390B0U) /**< \brief (PIOA) Secure PIO Set I/O Non-Secure Register (io_group = 2) */
  #define REG_S_PIO_SIOSR2                   (0xFC0390B4U) /**< \brief (PIOA) Secure PIO Set I/O Secure Register (io_group = 2) */
  #define REG_S_PIO_IOSSR2                   (0xFC0390B8U) /**< \brief (PIOA) Secure PIO I/O Security Status Register (io_group = 2) */
  #define REG_S_PIO_IOFR2                    (0xFC0390BCU) /**< \brief (PIOA) Secure PIO I/O Freeze Register (io_group = 2) */
  #define REG_S_PIO_MSKR3                    (0xFC0390C0U) /**< \brief (PIOA) Secure PIO Mask Register (io_group = 3) */
  #define REG_S_PIO_CFGR3                    (0xFC0390C4U) /**< \brief (PIOA) Secure PIO Configuration Register (io_group = 3) */
  #define REG_S_PIO_PDSR3                    (0xFC0390C8U) /**< \brief (PIOA) Secure PIO Pin Data Status Register (io_group = 3) */
  #define REG_S_PIO_LOCKSR3                  (0xFC0390CCU) /**< \brief (PIOA) Secure PIO Lock Status Register (io_group = 3) */
  #define REG_S_PIO_SODR3                    (0xFC0390D0U) /**< \brief (PIOA) Secure PIO Set Output Data Register (io_group = 3) */
  #define REG_S_PIO_CODR3                    (0xFC0390D4U) /**< \brief (PIOA) Secure PIO Clear Output Data Register (io_group = 3) */
  #define REG_S_PIO_ODSR3                    (0xFC0390D8U) /**< \brief (PIOA) Secure PIO Output Data Status Register (io_group = 3) */
  #define REG_S_PIO_IER3                     (0xFC0390E0U) /**< \brief (PIOA) Secure PIO Interrupt Enable Register (io_group = 3) */
  #define REG_S_PIO_IDR3                     (0xFC0390E4U) /**< \brief (PIOA) Secure PIO Interrupt Disable Register (io_group = 3) */
  #define REG_S_PIO_IMR3                     (0xFC0390E8U) /**< \brief (PIOA) Secure PIO Interrupt Mask Register (io_group = 3) */
  #define REG_S_PIO_ISR3                     (0xFC0390ECU) /**< \brief (PIOA) Secure PIO Interrupt Status Register (io_group = 3) */
  #define REG_S_PIO_SIONR3                   (0xFC0390F0U) /**< \brief (PIOA) Secure PIO Set I/O Non-Secure Register (io_group = 3) */
  #define REG_S_PIO_SIOSR3                   (0xFC0390F4U) /**< \brief (PIOA) Secure PIO Set I/O Secure Register (io_group = 3) */
  #define REG_S_PIO_IOSSR3                   (0xFC0390F8U) /**< \brief (PIOA) Secure PIO I/O Security Status Register (io_group = 3) */
  #define REG_S_PIO_IOFR3                    (0xFC0390FCU) /**< \brief (PIOA) Secure PIO I/O Freeze Register (io_group = 3) */
  #define REG_S_PIO_DELAYR                   (0xFC039400U) /**< \brief (PIOA) Secure PIO I/O Delay Register (delay_reg = 0) */
  #define REG_S_PIO_SCDR                     (0xFC039500U) /**< \brief (PIOA) Secure PIO Slow Clock Divider Debouncing Register */
  #define REG_S_PIO_TPFR                     (0xFC0395D0U) /**< \brief (PIOA) Secure PIO Tamper Freeze Register */
  #define REG_PIO_DLFR                       (0xFC0395D4U) /**< \brief (PIOA) Secure PIO Delay Freeze Register */
  #define REG_S_PIO_WPMR                     (0xFC0395E0U) /**< \brief (PIOA) Secure PIO Write Protection Mode Register */
  #define REG_S_PIO_WPSR                     (0xFC0395E4U) /**< \brief (PIOA) Secure PIO Write Protection Status Register */
#else
  #define REG_PIO_MSKR0     (*(__IO uint32_t*)0xFC038000U) /**< \brief (PIOA) PIO Mask Register (io_group = 0) */
  #define REG_PIO_CFGR0     (*(__IO uint32_t*)0xFC038004U) /**< \brief (PIOA) PIO Configuration Register (io_group = 0) */
  #define REG_PIO_PDSR0     (*(__I  uint32_t*)0xFC038008U) /**< \brief (PIOA) PIO Pin Data Status Register (io_group = 0) */
  #define REG_PIO_LOCKSR0   (*(__I  uint32_t*)0xFC03800CU) /**< \brief (PIOA) PIO Lock Status Register (io_group = 0) */
  #define REG_PIO_SODR0     (*(__O  uint32_t*)0xFC038010U) /**< \brief (PIOA) PIO Set Output Data Register (io_group = 0) */
  #define REG_PIO_CODR0     (*(__O  uint32_t*)0xFC038014U) /**< \brief (PIOA) PIO Clear Output Data Register (io_group = 0) */
  #define REG_PIO_ODSR0     (*(__IO uint32_t*)0xFC038018U) /**< \brief (PIOA) PIO Output Data Status Register (io_group = 0) */
  #define REG_PIO_IER0      (*(__O  uint32_t*)0xFC038020U) /**< \brief (PIOA) PIO Interrupt Enable Register (io_group = 0) */
  #define REG_PIO_IDR0      (*(__O  uint32_t*)0xFC038024U) /**< \brief (PIOA) PIO Interrupt Disable Register (io_group = 0) */
  #define REG_PIO_IMR0      (*(__I  uint32_t*)0xFC038028U) /**< \brief (PIOA) PIO Interrupt Mask Register (io_group = 0) */
  #define REG_PIO_ISR0      (*(__I  uint32_t*)0xFC03802CU) /**< \brief (PIOA) PIO Interrupt Status Register (io_group = 0) */
  #define REG_PIO_IOFR0     (*(__O  uint32_t*)0xFC03803CU) /**< \brief (PIOA) PIO I/O Freeze Register (io_group = 0) */
  #define REG_PIO_MSKR1     (*(__IO uint32_t*)0xFC038040U) /**< \brief (PIOA) PIO Mask Register (io_group = 1) */
  #define REG_PIO_CFGR1     (*(__IO uint32_t*)0xFC038044U) /**< \brief (PIOA) PIO Configuration Register (io_group = 1) */
  #define REG_PIO_PDSR1     (*(__I  uint32_t*)0xFC038048U) /**< \brief (PIOA) PIO Pin Data Status Register (io_group = 1) */
  #define REG_PIO_LOCKSR1   (*(__I  uint32_t*)0xFC03804CU) /**< \brief (PIOA) PIO Lock Status Register (io_group = 1) */
  #define REG_PIO_SODR1     (*(__O  uint32_t*)0xFC038050U) /**< \brief (PIOA) PIO Set Output Data Register (io_group = 1) */
  #define REG_PIO_CODR1     (*(__O  uint32_t*)0xFC038054U) /**< \brief (PIOA) PIO Clear Output Data Register (io_group = 1) */
  #define REG_PIO_ODSR1     (*(__IO uint32_t*)0xFC038058U) /**< \brief (PIOA) PIO Output Data Status Register (io_group = 1) */
  #define REG_PIO_IER1      (*(__O  uint32_t*)0xFC038060U) /**< \brief (PIOA) PIO Interrupt Enable Register (io_group = 1) */
  #define REG_PIO_IDR1      (*(__O  uint32_t*)0xFC038064U) /**< \brief (PIOA) PIO Interrupt Disable Register (io_group = 1) */
  #define REG_PIO_IMR1      (*(__I  uint32_t*)0xFC038068U) /**< \brief (PIOA) PIO Interrupt Mask Register (io_group = 1) */
  #define REG_PIO_ISR1      (*(__I  uint32_t*)0xFC03806CU) /**< \brief (PIOA) PIO Interrupt Status Register (io_group = 1) */
  #define REG_PIO_IOFR1     (*(__O  uint32_t*)0xFC03807CU) /**< \brief (PIOA) PIO I/O Freeze Register (io_group = 1) */
  #define REG_PIO_MSKR2     (*(__IO uint32_t*)0xFC038080U) /**< \brief (PIOA) PIO Mask Register (io_group = 2) */
  #define REG_PIO_CFGR2     (*(__IO uint32_t*)0xFC038084U) /**< \brief (PIOA) PIO Configuration Register (io_group = 2) */
  #define REG_PIO_PDSR2     (*(__I  uint32_t*)0xFC038088U) /**< \brief (PIOA) PIO Pin Data Status Register (io_group = 2) */
  #define REG_PIO_LOCKSR2   (*(__I  uint32_t*)0xFC03808CU) /**< \brief (PIOA) PIO Lock Status Register (io_group = 2) */
  #define REG_PIO_SODR2     (*(__O  uint32_t*)0xFC038090U) /**< \brief (PIOA) PIO Set Output Data Register (io_group = 2) */
  #define REG_PIO_CODR2     (*(__O  uint32_t*)0xFC038094U) /**< \brief (PIOA) PIO Clear Output Data Register (io_group = 2) */
  #define REG_PIO_ODSR2     (*(__IO uint32_t*)0xFC038098U) /**< \brief (PIOA) PIO Output Data Status Register (io_group = 2) */
  #define REG_PIO_IER2      (*(__O  uint32_t*)0xFC0380A0U) /**< \brief (PIOA) PIO Interrupt Enable Register (io_group = 2) */
  #define REG_PIO_IDR2      (*(__O  uint32_t*)0xFC0380A4U) /**< \brief (PIOA) PIO Interrupt Disable Register (io_group = 2) */
  #define REG_PIO_IMR2      (*(__I  uint32_t*)0xFC0380A8U) /**< \brief (PIOA) PIO Interrupt Mask Register (io_group = 2) */
  #define REG_PIO_ISR2      (*(__I  uint32_t*)0xFC0380ACU) /**< \brief (PIOA) PIO Interrupt Status Register (io_group = 2) */
  #define REG_PIO_IOFR2     (*(__O  uint32_t*)0xFC0380BCU) /**< \brief (PIOA) PIO I/O Freeze Register (io_group = 2) */
  #define REG_PIO_MSKR3     (*(__IO uint32_t*)0xFC0380C0U) /**< \brief (PIOA) PIO Mask Register (io_group = 3) */
  #define REG_PIO_CFGR3     (*(__IO uint32_t*)0xFC0380C4U) /**< \brief (PIOA) PIO Configuration Register (io_group = 3) */
  #define REG_PIO_PDSR3     (*(__I  uint32_t*)0xFC0380C8U) /**< \brief (PIOA) PIO Pin Data Status Register (io_group = 3) */
  #define REG_PIO_LOCKSR3   (*(__I  uint32_t*)0xFC0380CCU) /**< \brief (PIOA) PIO Lock Status Register (io_group = 3) */
  #define REG_PIO_SODR3     (*(__O  uint32_t*)0xFC0380D0U) /**< \brief (PIOA) PIO Set Output Data Register (io_group = 3) */
  #define REG_PIO_CODR3     (*(__O  uint32_t*)0xFC0380D4U) /**< \brief (PIOA) PIO Clear Output Data Register (io_group = 3) */
  #define REG_PIO_ODSR3     (*(__IO uint32_t*)0xFC0380D8U) /**< \brief (PIOA) PIO Output Data Status Register (io_group = 3) */
  #define REG_PIO_IER3      (*(__O  uint32_t*)0xFC0380E0U) /**< \brief (PIOA) PIO Interrupt Enable Register (io_group = 3) */
  #define REG_PIO_IDR3      (*(__O  uint32_t*)0xFC0380E4U) /**< \brief (PIOA) PIO Interrupt Disable Register (io_group = 3) */
  #define REG_PIO_IMR3      (*(__I  uint32_t*)0xFC0380E8U) /**< \brief (PIOA) PIO Interrupt Mask Register (io_group = 3) */
  #define REG_PIO_ISR3      (*(__I  uint32_t*)0xFC0380ECU) /**< \brief (PIOA) PIO Interrupt Status Register (io_group = 3) */
  #define REG_PIO_IOFR3     (*(__O  uint32_t*)0xFC0380FCU) /**< \brief (PIOA) PIO I/O Freeze Register (io_group = 3) */
  #define REG_PIO_TPFR      (*(__IO uint32_t*)0xFC0385D0U) /**< \brief (PIOA) PIO Tamper Freeze Register */
  #define REG_PIO_WPMR      (*(__IO uint32_t*)0xFC0385E0U) /**< \brief (PIOA) PIO Write Protection Mode Register */
  #define REG_PIO_WPSR      (*(__I  uint32_t*)0xFC0385E4U) /**< \brief (PIOA) PIO Write Protection Status Register */
  #define REG_PIO_VERSION   (*(__I  uint32_t*)0xFC0385FCU) /**< \brief (PIOA) Version Register */
  #define REG_S_PIO_MSKR0   (*(__IO uint32_t*)0xFC039000U) /**< \brief (PIOA) Secure PIO Mask Register (io_group = 0) */
  #define REG_S_PIO_CFGR0   (*(__IO uint32_t*)0xFC039004U) /**< \brief (PIOA) Secure PIO Configuration Register (io_group = 0) */
  #define REG_S_PIO_PDSR0   (*(__I  uint32_t*)0xFC039008U) /**< \brief (PIOA) Secure PIO Pin Data Status Register (io_group = 0) */
  #define REG_S_PIO_LOCKSR0 (*(__I  uint32_t*)0xFC03900CU) /**< \brief (PIOA) Secure PIO Lock Status Register (io_group = 0) */
  #define REG_S_PIO_SODR0   (*(__O  uint32_t*)0xFC039010U) /**< \brief (PIOA) Secure PIO Set Output Data Register (io_group = 0) */
  #define REG_S_PIO_CODR0   (*(__O  uint32_t*)0xFC039014U) /**< \brief (PIOA) Secure PIO Clear Output Data Register (io_group = 0) */
  #define REG_S_PIO_ODSR0   (*(__IO uint32_t*)0xFC039018U) /**< \brief (PIOA) Secure PIO Output Data Status Register (io_group = 0) */
  #define REG_S_PIO_IER0    (*(__O  uint32_t*)0xFC039020U) /**< \brief (PIOA) Secure PIO Interrupt Enable Register (io_group = 0) */
  #define REG_S_PIO_IDR0    (*(__O  uint32_t*)0xFC039024U) /**< \brief (PIOA) Secure PIO Interrupt Disable Register (io_group = 0) */
  #define REG_S_PIO_IMR0    (*(__I  uint32_t*)0xFC039028U) /**< \brief (PIOA) Secure PIO Interrupt Mask Register (io_group = 0) */
  #define REG_S_PIO_ISR0    (*(__I  uint32_t*)0xFC03902CU) /**< \brief (PIOA) Secure PIO Interrupt Status Register (io_group = 0) */
  #define REG_S_PIO_SIONR0  (*(__O  uint32_t*)0xFC039030U) /**< \brief (PIOA) Secure PIO Set I/O Non-Secure Register (io_group = 0) */
  #define REG_S_PIO_SIOSR0  (*(__O  uint32_t*)0xFC039034U) /**< \brief (PIOA) Secure PIO Set I/O Secure Register (io_group = 0) */
  #define REG_S_PIO_IOSSR0  (*(__I  uint32_t*)0xFC039038U) /**< \brief (PIOA) Secure PIO I/O Security Status Register (io_group = 0) */
  #define REG_S_PIO_IOFR0   (*(__O  uint32_t*)0xFC03903CU) /**< \brief (PIOA) Secure PIO I/O Freeze Register (io_group = 0) */
  #define REG_S_PIO_MSKR1   (*(__IO uint32_t*)0xFC039040U) /**< \brief (PIOA) Secure PIO Mask Register (io_group = 1) */
  #define REG_S_PIO_CFGR1   (*(__IO uint32_t*)0xFC039044U) /**< \brief (PIOA) Secure PIO Configuration Register (io_group = 1) */
  #define REG_S_PIO_PDSR1   (*(__I  uint32_t*)0xFC039048U) /**< \brief (PIOA) Secure PIO Pin Data Status Register (io_group = 1) */
  #define REG_S_PIO_LOCKSR1 (*(__I  uint32_t*)0xFC03904CU) /**< \brief (PIOA) Secure PIO Lock Status Register (io_group = 1) */
  #define REG_S_PIO_SODR1   (*(__O  uint32_t*)0xFC039050U) /**< \brief (PIOA) Secure PIO Set Output Data Register (io_group = 1) */
  #define REG_S_PIO_CODR1   (*(__O  uint32_t*)0xFC039054U) /**< \brief (PIOA) Secure PIO Clear Output Data Register (io_group = 1) */
  #define REG_S_PIO_ODSR1   (*(__IO uint32_t*)0xFC039058U) /**< \brief (PIOA) Secure PIO Output Data Status Register (io_group = 1) */
  #define REG_S_PIO_IER1    (*(__O  uint32_t*)0xFC039060U) /**< \brief (PIOA) Secure PIO Interrupt Enable Register (io_group = 1) */
  #define REG_S_PIO_IDR1    (*(__O  uint32_t*)0xFC039064U) /**< \brief (PIOA) Secure PIO Interrupt Disable Register (io_group = 1) */
  #define REG_S_PIO_IMR1    (*(__I  uint32_t*)0xFC039068U) /**< \brief (PIOA) Secure PIO Interrupt Mask Register (io_group = 1) */
  #define REG_S_PIO_ISR1    (*(__I  uint32_t*)0xFC03906CU) /**< \brief (PIOA) Secure PIO Interrupt Status Register (io_group = 1) */
  #define REG_S_PIO_SIONR1  (*(__O  uint32_t*)0xFC039070U) /**< \brief (PIOA) Secure PIO Set I/O Non-Secure Register (io_group = 1) */
  #define REG_S_PIO_SIOSR1  (*(__O  uint32_t*)0xFC039074U) /**< \brief (PIOA) Secure PIO Set I/O Secure Register (io_group = 1) */
  #define REG_S_PIO_IOSSR1  (*(__I  uint32_t*)0xFC039078U) /**< \brief (PIOA) Secure PIO I/O Security Status Register (io_group = 1) */
  #define REG_S_PIO_IOFR1   (*(__O  uint32_t*)0xFC03907CU) /**< \brief (PIOA) Secure PIO I/O Freeze Register (io_group = 1) */
  #define REG_S_PIO_MSKR2   (*(__IO uint32_t*)0xFC039080U) /**< \brief (PIOA) Secure PIO Mask Register (io_group = 2) */
  #define REG_S_PIO_CFGR2   (*(__IO uint32_t*)0xFC039084U) /**< \brief (PIOA) Secure PIO Configuration Register (io_group = 2) */
  #define REG_S_PIO_PDSR2   (*(__I  uint32_t*)0xFC039088U) /**< \brief (PIOA) Secure PIO Pin Data Status Register (io_group = 2) */
  #define REG_S_PIO_LOCKSR2 (*(__I  uint32_t*)0xFC03908CU) /**< \brief (PIOA) Secure PIO Lock Status Register (io_group = 2) */
  #define REG_S_PIO_SODR2   (*(__O  uint32_t*)0xFC039090U) /**< \brief (PIOA) Secure PIO Set Output Data Register (io_group = 2) */
  #define REG_S_PIO_CODR2   (*(__O  uint32_t*)0xFC039094U) /**< \brief (PIOA) Secure PIO Clear Output Data Register (io_group = 2) */
  #define REG_S_PIO_ODSR2   (*(__IO uint32_t*)0xFC039098U) /**< \brief (PIOA) Secure PIO Output Data Status Register (io_group = 2) */
  #define REG_S_PIO_IER2    (*(__O  uint32_t*)0xFC0390A0U) /**< \brief (PIOA) Secure PIO Interrupt Enable Register (io_group = 2) */
  #define REG_S_PIO_IDR2    (*(__O  uint32_t*)0xFC0390A4U) /**< \brief (PIOA) Secure PIO Interrupt Disable Register (io_group = 2) */
  #define REG_S_PIO_IMR2    (*(__I  uint32_t*)0xFC0390A8U) /**< \brief (PIOA) Secure PIO Interrupt Mask Register (io_group = 2) */
  #define REG_S_PIO_ISR2    (*(__I  uint32_t*)0xFC0390ACU) /**< \brief (PIOA) Secure PIO Interrupt Status Register (io_group = 2) */
  #define REG_S_PIO_SIONR2  (*(__O  uint32_t*)0xFC0390B0U) /**< \brief (PIOA) Secure PIO Set I/O Non-Secure Register (io_group = 2) */
  #define REG_S_PIO_SIOSR2  (*(__O  uint32_t*)0xFC0390B4U) /**< \brief (PIOA) Secure PIO Set I/O Secure Register (io_group = 2) */
  #define REG_S_PIO_IOSSR2  (*(__I  uint32_t*)0xFC0390B8U) /**< \brief (PIOA) Secure PIO I/O Security Status Register (io_group = 2) */
  #define REG_S_PIO_IOFR2   (*(__O  uint32_t*)0xFC0390BCU) /**< \brief (PIOA) Secure PIO I/O Freeze Register (io_group = 2) */
  #define REG_S_PIO_MSKR3   (*(__IO uint32_t*)0xFC0390C0U) /**< \brief (PIOA) Secure PIO Mask Register (io_group = 3) */
  #define REG_S_PIO_CFGR3   (*(__IO uint32_t*)0xFC0390C4U) /**< \brief (PIOA) Secure PIO Configuration Register (io_group = 3) */
  #define REG_S_PIO_PDSR3   (*(__I  uint32_t*)0xFC0390C8U) /**< \brief (PIOA) Secure PIO Pin Data Status Register (io_group = 3) */
  #define REG_S_PIO_LOCKSR3 (*(__I  uint32_t*)0xFC0390CCU) /**< \brief (PIOA) Secure PIO Lock Status Register (io_group = 3) */
  #define REG_S_PIO_SODR3   (*(__O  uint32_t*)0xFC0390D0U) /**< \brief (PIOA) Secure PIO Set Output Data Register (io_group = 3) */
  #define REG_S_PIO_CODR3   (*(__O  uint32_t*)0xFC0390D4U) /**< \brief (PIOA) Secure PIO Clear Output Data Register (io_group = 3) */
  #define REG_S_PIO_ODSR3   (*(__IO uint32_t*)0xFC0390D8U) /**< \brief (PIOA) Secure PIO Output Data Status Register (io_group = 3) */
  #define REG_S_PIO_IER3    (*(__O  uint32_t*)0xFC0390E0U) /**< \brief (PIOA) Secure PIO Interrupt Enable Register (io_group = 3) */
  #define REG_S_PIO_IDR3    (*(__O  uint32_t*)0xFC0390E4U) /**< \brief (PIOA) Secure PIO Interrupt Disable Register (io_group = 3) */
  #define REG_S_PIO_IMR3    (*(__I  uint32_t*)0xFC0390E8U) /**< \brief (PIOA) Secure PIO Interrupt Mask Register (io_group = 3) */
  #define REG_S_PIO_ISR3    (*(__I  uint32_t*)0xFC0390ECU) /**< \brief (PIOA) Secure PIO Interrupt Status Register (io_group = 3) */
  #define REG_S_PIO_SIONR3  (*(__O  uint32_t*)0xFC0390F0U) /**< \brief (PIOA) Secure PIO Set I/O Non-Secure Register (io_group = 3) */
  #define REG_S_PIO_SIOSR3  (*(__O  uint32_t*)0xFC0390F4U) /**< \brief (PIOA) Secure PIO Set I/O Secure Register (io_group = 3) */
  #define REG_S_PIO_IOSSR3  (*(__I  uint32_t*)0xFC0390F8U) /**< \brief (PIOA) Secure PIO I/O Security Status Register (io_group = 3) */
  #define REG_S_PIO_IOFR3   (*(__O  uint32_t*)0xFC0390FCU) /**< \brief (PIOA) Secure PIO I/O Freeze Register (io_group = 3) */
  #define REG_S_PIO_DELAYR  (*(__IO uint32_t*)0xFC039400U) /**< \brief (PIOA) Secure PIO I/O Delay Register (delay_reg = 0) */
  #define REG_S_PIO_SCDR    (*(__IO uint32_t*)0xFC039500U) /**< \brief (PIOA) Secure PIO Slow Clock Divider Debouncing Register */
  #define REG_S_PIO_TPFR    (*(__IO uint32_t*)0xFC0395D0U) /**< \brief (PIOA) Secure PIO Tamper Freeze Register */
  #define REG_PIO_DLFR      (*(__IO uint32_t*)0xFC0395D4U) /**< \brief (PIOA) Secure PIO Delay Freeze Register */
  #define REG_S_PIO_WPMR    (*(__IO uint32_t*)0xFC0395E0U) /**< \brief (PIOA) Secure PIO Write Protection Mode Register */
  #define REG_S_PIO_WPSR    (*(__I  uint32_t*)0xFC0395E4U) /**< \brief (PIOA) Secure PIO Write Protection Status Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for MATRIX1 peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_MATRIX1_MCFG                     (0xFC03C000U) /**< \brief (MATRIX1) Master Configuration Register */
  #define REG_MATRIX1_SCFG                     (0xFC03C040U) /**< \brief (MATRIX1) Slave Configuration Register */
  #define REG_MATRIX1_PRAS0                    (0xFC03C080U) /**< \brief (MATRIX1) Priority Register A for Slave 0 */
  #define REG_MATRIX1_PRBS0                    (0xFC03C084U) /**< \brief (MATRIX1) Priority Register B for Slave 0 */
  #define REG_MATRIX1_PRAS1                    (0xFC03C088U) /**< \brief (MATRIX1) Priority Register A for Slave 1 */
  #define REG_MATRIX1_PRBS1                    (0xFC03C08CU) /**< \brief (MATRIX1) Priority Register B for Slave 1 */
  #define REG_MATRIX1_PRAS2                    (0xFC03C090U) /**< \brief (MATRIX1) Priority Register A for Slave 2 */
  #define REG_MATRIX1_PRBS2                    (0xFC03C094U) /**< \brief (MATRIX1) Priority Register B for Slave 2 */
  #define REG_MATRIX1_PRAS3                    (0xFC03C098U) /**< \brief (MATRIX1) Priority Register A for Slave 3 */
  #define REG_MATRIX1_PRBS3                    (0xFC03C09CU) /**< \brief (MATRIX1) Priority Register B for Slave 3 */
  #define REG_MATRIX1_PRAS4                    (0xFC03C0A0U) /**< \brief (MATRIX1) Priority Register A for Slave 4 */
  #define REG_MATRIX1_PRBS4                    (0xFC03C0A4U) /**< \brief (MATRIX1) Priority Register B for Slave 4 */
  #define REG_MATRIX1_PRAS5                    (0xFC03C0A8U) /**< \brief (MATRIX1) Priority Register A for Slave 5 */
  #define REG_MATRIX1_PRBS5                    (0xFC03C0ACU) /**< \brief (MATRIX1) Priority Register B for Slave 5 */
  #define REG_MATRIX1_PRAS6                    (0xFC03C0B0U) /**< \brief (MATRIX1) Priority Register A for Slave 6 */
  #define REG_MATRIX1_PRBS6                    (0xFC03C0B4U) /**< \brief (MATRIX1) Priority Register B for Slave 6 */
  #define REG_MATRIX1_PRAS7                    (0xFC03C0B8U) /**< \brief (MATRIX1) Priority Register A for Slave 7 */
  #define REG_MATRIX1_PRBS7                    (0xFC03C0BCU) /**< \brief (MATRIX1) Priority Register B for Slave 7 */
  #define REG_MATRIX1_PRAS8                    (0xFC03C0C0U) /**< \brief (MATRIX1) Priority Register A for Slave 8 */
  #define REG_MATRIX1_PRBS8                    (0xFC03C0C4U) /**< \brief (MATRIX1) Priority Register B for Slave 8 */
  #define REG_MATRIX1_PRAS9                    (0xFC03C0C8U) /**< \brief (MATRIX1) Priority Register A for Slave 9 */
  #define REG_MATRIX1_PRBS9                    (0xFC03C0CCU) /**< \brief (MATRIX1) Priority Register B for Slave 9 */
  #define REG_MATRIX1_PRAS10                   (0xFC03C0D0U) /**< \brief (MATRIX1) Priority Register A for Slave 10 */
  #define REG_MATRIX1_PRBS10                   (0xFC03C0D4U) /**< \brief (MATRIX1) Priority Register B for Slave 10 */
  #define REG_MATRIX1_PRAS11                   (0xFC03C0D8U) /**< \brief (MATRIX1) Priority Register A for Slave 11 */
  #define REG_MATRIX1_PRBS11                   (0xFC03C0DCU) /**< \brief (MATRIX1) Priority Register B for Slave 11 */
  #define REG_MATRIX1_PRAS12                   (0xFC03C0E0U) /**< \brief (MATRIX1) Priority Register A for Slave 12 */
  #define REG_MATRIX1_PRBS12                   (0xFC03C0E4U) /**< \brief (MATRIX1) Priority Register B for Slave 12 */
  #define REG_MATRIX1_PRAS13                   (0xFC03C0E8U) /**< \brief (MATRIX1) Priority Register A for Slave 13 */
  #define REG_MATRIX1_PRBS13                   (0xFC03C0ECU) /**< \brief (MATRIX1) Priority Register B for Slave 13 */
  #define REG_MATRIX1_PRAS14                   (0xFC03C0F0U) /**< \brief (MATRIX1) Priority Register A for Slave 14 */
  #define REG_MATRIX1_PRBS14                   (0xFC03C0F4U) /**< \brief (MATRIX1) Priority Register B for Slave 14 */
  #define REG_MATRIX1_PRAS15                   (0xFC03C0F8U) /**< \brief (MATRIX1) Priority Register A for Slave 15 */
  #define REG_MATRIX1_PRBS15                   (0xFC03C0FCU) /**< \brief (MATRIX1) Priority Register B for Slave 15 */
  #define REG_MATRIX1_MRCR                     (0xFC03C100U) /**< \brief (MATRIX1) Master Remap Control Register */
  #define REG_MATRIX1_SFR                      (0xFC03C110U) /**< \brief (MATRIX1) Special Function Register */
  #define REG_MATRIX1_MEIER                    (0xFC03C150U) /**< \brief (MATRIX1) Master Error Interrupt Enable Register */
  #define REG_MATRIX1_MEIDR                    (0xFC03C154U) /**< \brief (MATRIX1) Master Error Interrupt Disable Register */
  #define REG_MATRIX1_MEIMR                    (0xFC03C158U) /**< \brief (MATRIX1) Master Error Interrupt Mask Register */
  #define REG_MATRIX1_MESR                     (0xFC03C15CU) /**< \brief (MATRIX1) Master Error Status Register */
  #define REG_MATRIX1_MEAR                     (0xFC03C160U) /**< \brief (MATRIX1) Master 0 Error Address Register */
  #define REG_MATRIX1_WPMR                     (0xFC03C1E4U) /**< \brief (MATRIX1) Write Protect Mode Register */
  #define REG_MATRIX1_WPSR                     (0xFC03C1E8U) /**< \brief (MATRIX1) Write Protect Status Register */
  #define REG_MATRIX1_VERSION                  (0xFC03C1FCU) /**< \brief (MATRIX1) Version Register */
  #define REG_MATRIX1_SSR                      (0xFC03C200U) /**< \brief (MATRIX1) Security Slave 0 Register */
  #define REG_MATRIX1_SASSR                    (0xFC03C240U) /**< \brief (MATRIX1) Security Areas Split Slave 0 Register */
  #define REG_MATRIX1_SRTSR                    (0xFC03C280U) /**< \brief (MATRIX1) Security Region Top Slave 0 Register */
  #define REG_MATRIX1_SPSELR                   (0xFC03C2C0U) /**< \brief (MATRIX1) Security Peripheral Select 1 Register */
#else
  #define REG_MATRIX1_MCFG    (*(__IO uint32_t*)0xFC03C000U) /**< \brief (MATRIX1) Master Configuration Register */
  #define REG_MATRIX1_SCFG    (*(__IO uint32_t*)0xFC03C040U) /**< \brief (MATRIX1) Slave Configuration Register */
  #define REG_MATRIX1_PRAS0   (*(__IO uint32_t*)0xFC03C080U) /**< \brief (MATRIX1) Priority Register A for Slave 0 */
  #define REG_MATRIX1_PRBS0   (*(__IO uint32_t*)0xFC03C084U) /**< \brief (MATRIX1) Priority Register B for Slave 0 */
  #define REG_MATRIX1_PRAS1   (*(__IO uint32_t*)0xFC03C088U) /**< \brief (MATRIX1) Priority Register A for Slave 1 */
  #define REG_MATRIX1_PRBS1   (*(__IO uint32_t*)0xFC03C08CU) /**< \brief (MATRIX1) Priority Register B for Slave 1 */
  #define REG_MATRIX1_PRAS2   (*(__IO uint32_t*)0xFC03C090U) /**< \brief (MATRIX1) Priority Register A for Slave 2 */
  #define REG_MATRIX1_PRBS2   (*(__IO uint32_t*)0xFC03C094U) /**< \brief (MATRIX1) Priority Register B for Slave 2 */
  #define REG_MATRIX1_PRAS3   (*(__IO uint32_t*)0xFC03C098U) /**< \brief (MATRIX1) Priority Register A for Slave 3 */
  #define REG_MATRIX1_PRBS3   (*(__IO uint32_t*)0xFC03C09CU) /**< \brief (MATRIX1) Priority Register B for Slave 3 */
  #define REG_MATRIX1_PRAS4   (*(__IO uint32_t*)0xFC03C0A0U) /**< \brief (MATRIX1) Priority Register A for Slave 4 */
  #define REG_MATRIX1_PRBS4   (*(__IO uint32_t*)0xFC03C0A4U) /**< \brief (MATRIX1) Priority Register B for Slave 4 */
  #define REG_MATRIX1_PRAS5   (*(__IO uint32_t*)0xFC03C0A8U) /**< \brief (MATRIX1) Priority Register A for Slave 5 */
  #define REG_MATRIX1_PRBS5   (*(__IO uint32_t*)0xFC03C0ACU) /**< \brief (MATRIX1) Priority Register B for Slave 5 */
  #define REG_MATRIX1_PRAS6   (*(__IO uint32_t*)0xFC03C0B0U) /**< \brief (MATRIX1) Priority Register A for Slave 6 */
  #define REG_MATRIX1_PRBS6   (*(__IO uint32_t*)0xFC03C0B4U) /**< \brief (MATRIX1) Priority Register B for Slave 6 */
  #define REG_MATRIX1_PRAS7   (*(__IO uint32_t*)0xFC03C0B8U) /**< \brief (MATRIX1) Priority Register A for Slave 7 */
  #define REG_MATRIX1_PRBS7   (*(__IO uint32_t*)0xFC03C0BCU) /**< \brief (MATRIX1) Priority Register B for Slave 7 */
  #define REG_MATRIX1_PRAS8   (*(__IO uint32_t*)0xFC03C0C0U) /**< \brief (MATRIX1) Priority Register A for Slave 8 */
  #define REG_MATRIX1_PRBS8   (*(__IO uint32_t*)0xFC03C0C4U) /**< \brief (MATRIX1) Priority Register B for Slave 8 */
  #define REG_MATRIX1_PRAS9   (*(__IO uint32_t*)0xFC03C0C8U) /**< \brief (MATRIX1) Priority Register A for Slave 9 */
  #define REG_MATRIX1_PRBS9   (*(__IO uint32_t*)0xFC03C0CCU) /**< \brief (MATRIX1) Priority Register B for Slave 9 */
  #define REG_MATRIX1_PRAS10  (*(__IO uint32_t*)0xFC03C0D0U) /**< \brief (MATRIX1) Priority Register A for Slave 10 */
  #define REG_MATRIX1_PRBS10  (*(__IO uint32_t*)0xFC03C0D4U) /**< \brief (MATRIX1) Priority Register B for Slave 10 */
  #define REG_MATRIX1_PRAS11  (*(__IO uint32_t*)0xFC03C0D8U) /**< \brief (MATRIX1) Priority Register A for Slave 11 */
  #define REG_MATRIX1_PRBS11  (*(__IO uint32_t*)0xFC03C0DCU) /**< \brief (MATRIX1) Priority Register B for Slave 11 */
  #define REG_MATRIX1_PRAS12  (*(__IO uint32_t*)0xFC03C0E0U) /**< \brief (MATRIX1) Priority Register A for Slave 12 */
  #define REG_MATRIX1_PRBS12  (*(__IO uint32_t*)0xFC03C0E4U) /**< \brief (MATRIX1) Priority Register B for Slave 12 */
  #define REG_MATRIX1_PRAS13  (*(__IO uint32_t*)0xFC03C0E8U) /**< \brief (MATRIX1) Priority Register A for Slave 13 */
  #define REG_MATRIX1_PRBS13  (*(__IO uint32_t*)0xFC03C0ECU) /**< \brief (MATRIX1) Priority Register B for Slave 13 */
  #define REG_MATRIX1_PRAS14  (*(__IO uint32_t*)0xFC03C0F0U) /**< \brief (MATRIX1) Priority Register A for Slave 14 */
  #define REG_MATRIX1_PRBS14  (*(__IO uint32_t*)0xFC03C0F4U) /**< \brief (MATRIX1) Priority Register B for Slave 14 */
  #define REG_MATRIX1_PRAS15  (*(__IO uint32_t*)0xFC03C0F8U) /**< \brief (MATRIX1) Priority Register A for Slave 15 */
  #define REG_MATRIX1_PRBS15  (*(__IO uint32_t*)0xFC03C0FCU) /**< \brief (MATRIX1) Priority Register B for Slave 15 */
  #define REG_MATRIX1_MRCR    (*(__IO uint32_t*)0xFC03C100U) /**< \brief (MATRIX1) Master Remap Control Register */
  #define REG_MATRIX1_SFR     (*(__IO uint32_t*)0xFC03C110U) /**< \brief (MATRIX1) Special Function Register */
  #define REG_MATRIX1_MEIER   (*(__O  uint32_t*)0xFC03C150U) /**< \brief (MATRIX1) Master Error Interrupt Enable Register */
  #define REG_MATRIX1_MEIDR   (*(__O  uint32_t*)0xFC03C154U) /**< \brief (MATRIX1) Master Error Interrupt Disable Register */
  #define REG_MATRIX1_MEIMR   (*(__I  uint32_t*)0xFC03C158U) /**< \brief (MATRIX1) Master Error Interrupt Mask Register */
  #define REG_MATRIX1_MESR    (*(__I  uint32_t*)0xFC03C15CU) /**< \brief (MATRIX1) Master Error Status Register */
  #define REG_MATRIX1_MEAR    (*(__I  uint32_t*)0xFC03C160U) /**< \brief (MATRIX1) Master 0 Error Address Register */
  #define REG_MATRIX1_WPMR    (*(__IO uint32_t*)0xFC03C1E4U) /**< \brief (MATRIX1) Write Protect Mode Register */
  #define REG_MATRIX1_WPSR    (*(__I  uint32_t*)0xFC03C1E8U) /**< \brief (MATRIX1) Write Protect Status Register */
  #define REG_MATRIX1_VERSION (*(__I  uint32_t*)0xFC03C1FCU) /**< \brief (MATRIX1) Version Register */
  #define REG_MATRIX1_SSR     (*(__IO uint32_t*)0xFC03C200U) /**< \brief (MATRIX1) Security Slave 0 Register */
  #define REG_MATRIX1_SASSR   (*(__IO uint32_t*)0xFC03C240U) /**< \brief (MATRIX1) Security Areas Split Slave 0 Register */
  #define REG_MATRIX1_SRTSR   (*(__IO uint32_t*)0xFC03C280U) /**< \brief (MATRIX1) Security Region Top Slave 0 Register */
  #define REG_MATRIX1_SPSELR  (*(__IO uint32_t*)0xFC03C2C0U) /**< \brief (MATRIX1) Security Peripheral Select 1 Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for SECUMOD peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_SECUMOD_CR                        (0xFC040000U) /**< \brief (SECUMOD) Control Register */
  #define REG_SECUMOD_SYSR                      (0xFC040004U) /**< \brief (SECUMOD) System Status Register */
  #define REG_SECUMOD_SR                        (0xFC040008U) /**< \brief (SECUMOD) Status Register */
  #define REG_SECUMOD_ASR                       (0xFC04000CU) /**< \brief (SECUMOD) Auxiliary Status Register */
  #define REG_SECUMOD_SCR                       (0xFC040010U) /**< \brief (SECUMOD) Status Clear Register */
  #define REG_SECUMOD_RAMRDY                    (0xFC040014U) /**< \brief (SECUMOD) RAM Access Ready Register */
  #define REG_SECUMOD_PIOBU                     (0xFC040018U) /**< \brief (SECUMOD) PIO Backup Register */
  #define REG_SECUMOD_VBUFR                     (0xFC040058U) /**< \brief (SECUMOD) VDDBU Filter Register */
  #define REG_SECUMOD_VIOFR                     (0xFC04005CU) /**< \brief (SECUMOD) VDDIO Filter Register */
  #define REG_SECUMOD_VDDRFR                    (0xFC040060U) /**< \brief (SECUMOD) VDDDDR Filter Register */
  #define REG_SECUMOD_VCOREFR                   (0xFC040064U) /**< \brief (SECUMOD) VDDCORE Filter Register */
  #define REG_SECUMOD_JTAGCR                    (0xFC040068U) /**< \brief (SECUMOD) JTAG Protection Control Register */
  #define REG_SECUMOD_DYSTUNE                   (0xFC04006CU) /**< \brief (SECUMOD) Dynamic Signatures Tuning Register */
  #define REG_SECUMOD_SCRKEY                    (0xFC040070U) /**< \brief (SECUMOD) Scrambling Key Register */
  #define REG_SECUMOD_RAMACC                    (0xFC040074U) /**< \brief (SECUMOD) Ram Access Rights Register */
  #define REG_SECUMOD_RAMACCSR                  (0xFC040078U) /**< \brief (SECUMOD) Ram Access Rights Status Register */
  #define REG_SECUMOD_BMPR                      (0xFC04007CU) /**< \brief (SECUMOD) Backup Mode Protection Register */
  #define REG_SECUMOD_NMPR                      (0xFC040080U) /**< \brief (SECUMOD) Normal Mode Protection Register */
  #define REG_SECUMOD_NIEPR                     (0xFC040084U) /**< \brief (SECUMOD) Normal Interrupt Enable Protection Register */
  #define REG_SECUMOD_NIDPR                     (0xFC040088U) /**< \brief (SECUMOD) Normal Interrupt Disable Protection Register */
  #define REG_SECUMOD_NIMPR                     (0xFC04008CU) /**< \brief (SECUMOD) Normal Interrupt Mask Protection Register */
  #define REG_SECUMOD_WKPR                      (0xFC040090U) /**< \brief (SECUMOD) Wake Up Protection Register */
#else
  #define REG_SECUMOD_CR       (*(__O  uint32_t*)0xFC040000U) /**< \brief (SECUMOD) Control Register */
  #define REG_SECUMOD_SYSR     (*(__IO uint32_t*)0xFC040004U) /**< \brief (SECUMOD) System Status Register */
  #define REG_SECUMOD_SR       (*(__I  uint32_t*)0xFC040008U) /**< \brief (SECUMOD) Status Register */
  #define REG_SECUMOD_ASR      (*(__I  uint32_t*)0xFC04000CU) /**< \brief (SECUMOD) Auxiliary Status Register */
  #define REG_SECUMOD_SCR      (*(__O  uint32_t*)0xFC040010U) /**< \brief (SECUMOD) Status Clear Register */
  #define REG_SECUMOD_RAMRDY   (*(__I  uint32_t*)0xFC040014U) /**< \brief (SECUMOD) RAM Access Ready Register */
  #define REG_SECUMOD_PIOBU    (*(__IO uint32_t*)0xFC040018U) /**< \brief (SECUMOD) PIO Backup Register */
  #define REG_SECUMOD_VBUFR    (*(__IO uint32_t*)0xFC040058U) /**< \brief (SECUMOD) VDDBU Filter Register */
  #define REG_SECUMOD_VIOFR    (*(__IO uint32_t*)0xFC04005CU) /**< \brief (SECUMOD) VDDIO Filter Register */
  #define REG_SECUMOD_VDDRFR   (*(__IO uint32_t*)0xFC040060U) /**< \brief (SECUMOD) VDDDDR Filter Register */
  #define REG_SECUMOD_VCOREFR  (*(__IO uint32_t*)0xFC040064U) /**< \brief (SECUMOD) VDDCORE Filter Register */
  #define REG_SECUMOD_JTAGCR   (*(__IO uint32_t*)0xFC040068U) /**< \brief (SECUMOD) JTAG Protection Control Register */
  #define REG_SECUMOD_DYSTUNE  (*(__IO uint32_t*)0xFC04006CU) /**< \brief (SECUMOD) Dynamic Signatures Tuning Register */
  #define REG_SECUMOD_SCRKEY   (*(__IO uint32_t*)0xFC040070U) /**< \brief (SECUMOD) Scrambling Key Register */
  #define REG_SECUMOD_RAMACC   (*(__IO uint32_t*)0xFC040074U) /**< \brief (SECUMOD) Ram Access Rights Register */
  #define REG_SECUMOD_RAMACCSR (*(__IO uint32_t*)0xFC040078U) /**< \brief (SECUMOD) Ram Access Rights Status Register */
  #define REG_SECUMOD_BMPR     (*(__IO uint32_t*)0xFC04007CU) /**< \brief (SECUMOD) Backup Mode Protection Register */
  #define REG_SECUMOD_NMPR     (*(__IO uint32_t*)0xFC040080U) /**< \brief (SECUMOD) Normal Mode Protection Register */
  #define REG_SECUMOD_NIEPR    (*(__O  uint32_t*)0xFC040084U) /**< \brief (SECUMOD) Normal Interrupt Enable Protection Register */
  #define REG_SECUMOD_NIDPR    (*(__O  uint32_t*)0xFC040088U) /**< \brief (SECUMOD) Normal Interrupt Disable Protection Register */
  #define REG_SECUMOD_NIMPR    (*(__I  uint32_t*)0xFC04008CU) /**< \brief (SECUMOD) Normal Interrupt Mask Protection Register */
  #define REG_SECUMOD_WKPR     (*(__IO uint32_t*)0xFC040090U) /**< \brief (SECUMOD) Wake Up Protection Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for TDES peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_TDES_CR                         (0xFC044000U) /**< \brief (TDES) Control Register */
  #define REG_TDES_MR                         (0xFC044004U) /**< \brief (TDES) Mode Register */
  #define REG_TDES_IER                        (0xFC044010U) /**< \brief (TDES) Interrupt Enable Register */
  #define REG_TDES_IDR                        (0xFC044014U) /**< \brief (TDES) Interrupt Disable Register */
  #define REG_TDES_IMR                        (0xFC044018U) /**< \brief (TDES) Interrupt Mask Register */
  #define REG_TDES_ISR                        (0xFC04401CU) /**< \brief (TDES) Interrupt Status Register */
  #define REG_TDES_KEY1WR                     (0xFC044020U) /**< \brief (TDES) Key 1 Word Register */
  #define REG_TDES_KEY2WR                     (0xFC044028U) /**< \brief (TDES) Key 2 Word Register */
  #define REG_TDES_KEY3WR                     (0xFC044030U) /**< \brief (TDES) Key 3 Word Register */
  #define REG_TDES_IDATAR                     (0xFC044040U) /**< \brief (TDES) Input Data Register */
  #define REG_TDES_ODATAR                     (0xFC044050U) /**< \brief (TDES) Output Data Register */
  #define REG_TDES_IVR                        (0xFC044060U) /**< \brief (TDES) Initialization Vector Register */
  #define REG_TDES_XTEA_RNDR                  (0xFC044070U) /**< \brief (TDES) XTEA Rounds Register */
  #define REG_TDES_VERSION                    (0xFC0440FCU) /**< \brief (TDES) Version Register */
#else
  #define REG_TDES_CR        (*(__O  uint32_t*)0xFC044000U) /**< \brief (TDES) Control Register */
  #define REG_TDES_MR        (*(__IO uint32_t*)0xFC044004U) /**< \brief (TDES) Mode Register */
  #define REG_TDES_IER       (*(__O  uint32_t*)0xFC044010U) /**< \brief (TDES) Interrupt Enable Register */
  #define REG_TDES_IDR       (*(__O  uint32_t*)0xFC044014U) /**< \brief (TDES) Interrupt Disable Register */
  #define REG_TDES_IMR       (*(__I  uint32_t*)0xFC044018U) /**< \brief (TDES) Interrupt Mask Register */
  #define REG_TDES_ISR       (*(__I  uint32_t*)0xFC04401CU) /**< \brief (TDES) Interrupt Status Register */
  #define REG_TDES_KEY1WR    (*(__O  uint32_t*)0xFC044020U) /**< \brief (TDES) Key 1 Word Register */
  #define REG_TDES_KEY2WR    (*(__O  uint32_t*)0xFC044028U) /**< \brief (TDES) Key 2 Word Register */
  #define REG_TDES_KEY3WR    (*(__O  uint32_t*)0xFC044030U) /**< \brief (TDES) Key 3 Word Register */
  #define REG_TDES_IDATAR    (*(__O  uint32_t*)0xFC044040U) /**< \brief (TDES) Input Data Register */
  #define REG_TDES_ODATAR    (*(__I  uint32_t*)0xFC044050U) /**< \brief (TDES) Output Data Register */
  #define REG_TDES_IVR       (*(__O  uint32_t*)0xFC044060U) /**< \brief (TDES) Initialization Vector Register */
  #define REG_TDES_XTEA_RNDR (*(__IO uint32_t*)0xFC044070U) /**< \brief (TDES) XTEA Rounds Register */
  #define REG_TDES_VERSION   (*(__I  uint32_t*)0xFC0440FCU) /**< \brief (TDES) Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for CLASSD peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_CLASSD_CR                       (0xFC048000U) /**< \brief (CLASSD) Control Register */
  #define REG_CLASSD_MR                       (0xFC048004U) /**< \brief (CLASSD) Mode Register */
  #define REG_CLASSD_INTPMR                   (0xFC048008U) /**< \brief (CLASSD) Interpolator Mode Register */
  #define REG_CLASSD_INTSR                    (0xFC04800CU) /**< \brief (CLASSD) Interpolator Status Register */
  #define REG_CLASSD_THR                      (0xFC048010U) /**< \brief (CLASSD) Transmit Holding Register */
  #define REG_CLASSD_IER                      (0xFC048014U) /**< \brief (CLASSD) Interrupt Enable Register */
  #define REG_CLASSD_IDR                      (0xFC048018U) /**< \brief (CLASSD) Interrupt Disable Register */
  #define REG_CLASSD_IMR                      (0xFC04801CU) /**< \brief (CLASSD) Interrupt Mask Register */
  #define REG_CLASSD_ISR                      (0xFC048020U) /**< \brief (CLASSD) Interrupt Status Register */
  #define REG_CLASSD_WPMR                     (0xFC0480E4U) /**< \brief (CLASSD) Write Protection Mode Register */
  #define REG_CLASSD_VERSION                  (0xFC0480FCU) /**< \brief (CLASSD) IP Version Register */
#else
  #define REG_CLASSD_CR      (*(__O  uint32_t*)0xFC048000U) /**< \brief (CLASSD) Control Register */
  #define REG_CLASSD_MR      (*(__IO uint32_t*)0xFC048004U) /**< \brief (CLASSD) Mode Register */
  #define REG_CLASSD_INTPMR  (*(__IO uint32_t*)0xFC048008U) /**< \brief (CLASSD) Interpolator Mode Register */
  #define REG_CLASSD_INTSR   (*(__I  uint32_t*)0xFC04800CU) /**< \brief (CLASSD) Interpolator Status Register */
  #define REG_CLASSD_THR     (*(__IO uint32_t*)0xFC048010U) /**< \brief (CLASSD) Transmit Holding Register */
  #define REG_CLASSD_IER     (*(__O  uint32_t*)0xFC048014U) /**< \brief (CLASSD) Interrupt Enable Register */
  #define REG_CLASSD_IDR     (*(__O  uint32_t*)0xFC048018U) /**< \brief (CLASSD) Interrupt Disable Register */
  #define REG_CLASSD_IMR     (*(__IO uint32_t*)0xFC04801CU) /**< \brief (CLASSD) Interrupt Mask Register */
  #define REG_CLASSD_ISR     (*(__I  uint32_t*)0xFC048020U) /**< \brief (CLASSD) Interrupt Status Register */
  #define REG_CLASSD_WPMR    (*(__IO uint32_t*)0xFC0480E4U) /**< \brief (CLASSD) Write Protection Mode Register */
  #define REG_CLASSD_VERSION (*(__I  uint32_t*)0xFC0480FCU) /**< \brief (CLASSD) IP Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for I2SC1 peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_I2SC1_CR                       (0xFC04C000U) /**< \brief (I2SC1) Control Register */
  #define REG_I2SC1_MR                       (0xFC04C004U) /**< \brief (I2SC1) Mode Register */
  #define REG_I2SC1_SR                       (0xFC04C008U) /**< \brief (I2SC1) Status Register */
  #define REG_I2SC1_SCR                      (0xFC04C00CU) /**< \brief (I2SC1) Status Clear Register */
  #define REG_I2SC1_SSR                      (0xFC04C010U) /**< \brief (I2SC1) Status Set Register */
  #define REG_I2SC1_IER                      (0xFC04C014U) /**< \brief (I2SC1) Interrupt Enable Register */
  #define REG_I2SC1_IDR                      (0xFC04C018U) /**< \brief (I2SC1) Interrupt Disable Register */
  #define REG_I2SC1_IMR                      (0xFC04C01CU) /**< \brief (I2SC1) Interrupt Mask Register */
  #define REG_I2SC1_RHR                      (0xFC04C020U) /**< \brief (I2SC1) Receiver Holding Register */
  #define REG_I2SC1_THR                      (0xFC04C024U) /**< \brief (I2SC1) Transmitter Holding Register */
  #define REG_I2SC1_VERSION                  (0xFC04C028U) /**< \brief (I2SC1) Version Register */
#else
  #define REG_I2SC1_CR      (*(__O  uint32_t*)0xFC04C000U) /**< \brief (I2SC1) Control Register */
  #define REG_I2SC1_MR      (*(__IO uint32_t*)0xFC04C004U) /**< \brief (I2SC1) Mode Register */
  #define REG_I2SC1_SR      (*(__I  uint32_t*)0xFC04C008U) /**< \brief (I2SC1) Status Register */
  #define REG_I2SC1_SCR     (*(__O  uint32_t*)0xFC04C00CU) /**< \brief (I2SC1) Status Clear Register */
  #define REG_I2SC1_SSR     (*(__O  uint32_t*)0xFC04C010U) /**< \brief (I2SC1) Status Set Register */
  #define REG_I2SC1_IER     (*(__O  uint32_t*)0xFC04C014U) /**< \brief (I2SC1) Interrupt Enable Register */
  #define REG_I2SC1_IDR     (*(__O  uint32_t*)0xFC04C018U) /**< \brief (I2SC1) Interrupt Disable Register */
  #define REG_I2SC1_IMR     (*(__I  uint32_t*)0xFC04C01CU) /**< \brief (I2SC1) Interrupt Mask Register */
  #define REG_I2SC1_RHR     (*(__I  uint32_t*)0xFC04C020U) /**< \brief (I2SC1) Receiver Holding Register */
  #define REG_I2SC1_THR     (*(__O  uint32_t*)0xFC04C024U) /**< \brief (I2SC1) Transmitter Holding Register */
  #define REG_I2SC1_VERSION (*(__I  uint32_t*)0xFC04C028U) /**< \brief (I2SC1) Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for CAN1 peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_CAN1_CREL                    (0xFC050000U) /**< \brief (CAN1) Mode Register */
  #define REG_CAN1_ENDN                    (0xFC050004U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_CUST                    (0xFC050008U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_FBTP                    (0xFC05000CU) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_TEST                    (0xFC050010U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_RWD                     (0xFC050014U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_CCCR                    (0xFC050018U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_BTP                     (0xFC05001CU) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_TSCC                    (0xFC050020U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_TSVC                    (0xFC050024U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_TOCC                    (0xFC050028U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_TOCV                    (0xFC05002CU) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_ECR                     (0xFC050040U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_PSR                     (0xFC050044U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_IR                      (0xFC050050U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_IE                      (0xFC050054U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_ILS                     (0xFC050058U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_ILE                     (0xFC05005CU) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_GFC                     (0xFC050080U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_SIDFC                   (0xFC050084U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_XIDFC                   (0xFC050088U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_XIDAM                   (0xFC050090U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_HPMS                    (0xFC050094U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_NDAT1                   (0xFC050098U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_NDAT2                   (0xFC05009CU) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_RXF0C                   (0xFC0500A0U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_RXF0S                   (0xFC0500A4U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_RXF0A                   (0xFC0500A8U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_RXBC                    (0xFC0500ACU) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_RXF1C                   (0xFC0500B0U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_RXF1S                   (0xFC0500B4U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_RXF1A                   (0xFC0500B8U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_RXESC                   (0xFC0500BCU) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_TXBC                    (0xFC0500C0U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_TXFQS                   (0xFC0500C4U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_TXESC                   (0xFC0500C8U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_TXBRP                   (0xFC0500CCU) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_TXBAR                   (0xFC0500D0U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_TXBCR                   (0xFC0500D4U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_TXBTO                   (0xFC0500D8U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_TXBCF                   (0xFC0500DCU) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_TXBTIE                  (0xFC0500E0U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_TXBCIE                  (0xFC0500E4U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_TXEFC                   (0xFC0500F0U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_TXEFS                   (0xFC0500F4U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_TXEFA                   (0xFC0500F8U) /**< \brief (CAN1) Interrupt Enable Register */
#else
  #define REG_CAN1_CREL   (*(__IO uint32_t*)0xFC050000U) /**< \brief (CAN1) Mode Register */
  #define REG_CAN1_ENDN   (*(__O  uint32_t*)0xFC050004U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_CUST   (*(__O  uint32_t*)0xFC050008U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_FBTP   (*(__O  uint32_t*)0xFC05000CU) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_TEST   (*(__O  uint32_t*)0xFC050010U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_RWD    (*(__O  uint32_t*)0xFC050014U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_CCCR   (*(__O  uint32_t*)0xFC050018U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_BTP    (*(__O  uint32_t*)0xFC05001CU) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_TSCC   (*(__O  uint32_t*)0xFC050020U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_TSVC   (*(__O  uint32_t*)0xFC050024U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_TOCC   (*(__O  uint32_t*)0xFC050028U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_TOCV   (*(__O  uint32_t*)0xFC05002CU) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_ECR    (*(__O  uint32_t*)0xFC050040U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_PSR    (*(__O  uint32_t*)0xFC050044U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_IR     (*(__O  uint32_t*)0xFC050050U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_IE     (*(__O  uint32_t*)0xFC050054U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_ILS    (*(__O  uint32_t*)0xFC050058U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_ILE    (*(__O  uint32_t*)0xFC05005CU) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_GFC    (*(__O  uint32_t*)0xFC050080U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_SIDFC  (*(__O  uint32_t*)0xFC050084U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_XIDFC  (*(__O  uint32_t*)0xFC050088U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_XIDAM  (*(__O  uint32_t*)0xFC050090U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_HPMS   (*(__O  uint32_t*)0xFC050094U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_NDAT1  (*(__O  uint32_t*)0xFC050098U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_NDAT2  (*(__O  uint32_t*)0xFC05009CU) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_RXF0C  (*(__O  uint32_t*)0xFC0500A0U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_RXF0S  (*(__O  uint32_t*)0xFC0500A4U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_RXF0A  (*(__O  uint32_t*)0xFC0500A8U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_RXBC   (*(__O  uint32_t*)0xFC0500ACU) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_RXF1C  (*(__O  uint32_t*)0xFC0500B0U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_RXF1S  (*(__O  uint32_t*)0xFC0500B4U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_RXF1A  (*(__O  uint32_t*)0xFC0500B8U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_RXESC  (*(__O  uint32_t*)0xFC0500BCU) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_TXBC   (*(__O  uint32_t*)0xFC0500C0U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_TXFQS  (*(__O  uint32_t*)0xFC0500C4U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_TXESC  (*(__O  uint32_t*)0xFC0500C8U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_TXBRP  (*(__O  uint32_t*)0xFC0500CCU) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_TXBAR  (*(__O  uint32_t*)0xFC0500D0U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_TXBCR  (*(__O  uint32_t*)0xFC0500D4U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_TXBTO  (*(__O  uint32_t*)0xFC0500D8U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_TXBCF  (*(__O  uint32_t*)0xFC0500DCU) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_TXBTIE (*(__O  uint32_t*)0xFC0500E0U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_TXBCIE (*(__O  uint32_t*)0xFC0500E4U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_TXEFC  (*(__O  uint32_t*)0xFC0500F0U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_TXEFS  (*(__O  uint32_t*)0xFC0500F4U) /**< \brief (CAN1) Interrupt Enable Register */
  #define REG_CAN1_TXEFA  (*(__O  uint32_t*)0xFC0500F8U) /**< \brief (CAN1) Interrupt Enable Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/* ========== Register definition for CHIPID peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_CHIPID_CIDR                 (0xFC069000U) /**< \brief (CHIPID) Chip ID Register */
  #define REG_CHIPID_EXID                 (0xFC069004U) /**< \brief (CHIPID) Chip ID Extension Register */
#else
  #define REG_CHIPID_CIDR (*(__I uint32_t*)0xFC069000U) /**< \brief (CHIPID) Chip ID Register */
  #define REG_CHIPID_EXID (*(__I uint32_t*)0xFC069004U) /**< \brief (CHIPID) Chip ID Extension Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/*@}*/

/* ============================================================================= */
/**  SOFTWARE API DEFINITION FOR SDMMC */
/* ============================================================================= */
/** \addtogroup SAMA5D2_SDMMC SDMMC */
/*@{*/

#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief SDMMC hardware registers */
typedef struct {
  __IO uint32_t SDMMC_SSAR;         /**< \brief (SDMMC Offset: 0x000) SDMA System Address - Argument 2 Register */
  __IO uint16_t SDMMC_BSR;          /**< \brief (SDMMC Offset: 0x004) Block Size Register */
  __IO uint16_t SDMMC_BCR;          /**< \brief (SDMMC Offset: 0x006) Block Count Register */
  __IO uint32_t SDMMC_ARG1R;        /**< \brief (SDMMC Offset: 0x008) Argument 1 Register */
  __IO uint16_t SDMMC_TMR;          /**< \brief (SDMMC Offset: 0x00C) Transfer Mode Register */
  __IO uint16_t SDMMC_CR;           /**< \brief (SDMMC Offset: 0x00E) Command Register */
  __I  uint32_t SDMMC_RR[4];        /**< \brief (SDMMC Offset: 0x010) Response Register */
  __IO uint32_t SDMMC_BDPR;         /**< \brief (SDMMC Offset: 0x020) Buffer Data Port Register */
  __I  uint32_t SDMMC_PSR;          /**< \brief (SDMMC Offset: 0x024) Present State Register */
  __IO uint8_t  SDMMC_HC1R;         /**< \brief (SDMMC Offset: 0x028) Host Control 1 Register */
  __IO uint8_t  SDMMC_PCR;          /**< \brief (SDMMC Offset: 0x029) Power Control Register */
  __IO uint8_t  SDMMC_BGCR;         /**< \brief (SDMMC Offset: 0x02A) Block Gap Control Register */
  __IO uint8_t  SDMMC_WCR;          /**< \brief (SDMMC Offset: 0x02B) Wakeup Control Register */
  __IO uint16_t SDMMC_CCR;          /**< \brief (SDMMC Offset: 0x02C) Clock Control Register */
  __IO uint8_t  SDMMC_TCR;          /**< \brief (SDMMC Offset: 0x02E) Timeout Control Register */
  __IO uint8_t  SDMMC_SRR;          /**< \brief (SDMMC Offset: 0x02F) Software Reset Register */
  __IO uint16_t SDMMC_NISTR;        /**< \brief (SDMMC Offset: 0x030) Normal Interrupt Status Register */
  __IO uint16_t SDMMC_EISTR;        /**< \brief (SDMMC Offset: 0x032) Error Interrupt Status Register */
  __IO uint16_t SDMMC_NISTER;       /**< \brief (SDMMC Offset: 0x034) Normal Interrupt Status Enable Register */
  __IO uint16_t SDMMC_EISTER;       /**< \brief (SDMMC Offset: 0x036) Error Interrupt Status Enable Register */
  __IO uint16_t SDMMC_NISIER;       /**< \brief (SDMMC Offset: 0x038) Normal Interrupt Signal Enable Register */
  __IO uint16_t SDMMC_EISIER;       /**< \brief (SDMMC Offset: 0x03A) Error Interrupt Signal Enable Register */
  __IO uint16_t SDMMC_ACESR;        /**< \brief (SDMMC Offset: 0x03C) Auto CMD Error Status Register */
  __IO uint16_t SDMMC_HC2R;         /**< \brief (SDMMC Offset: 0x03E) Host Control 2 Register */
  __IO uint32_t SDMMC_CAR[2];       /**< \brief (SDMMC Offset: 0x040) Capabilities Register */
  __IO uint32_t SDMMC_MCCAR;        /**< \brief (SDMMC Offset: 0x048) Maximum Current Capabilities Register */
  __I  uint32_t SDMMC_RSVD1;        /**< \brief (SDMMC Offset: 0x04C) Reserved */
  __O  uint16_t SDMMC_FERACES;      /**< \brief (SDMMC Offset: 0x050) Force Event Register for Auto CMD Error Status */
  __O  uint16_t SDMMC_FEREIS;       /**< \brief (SDMMC Offset: 0x052) Force Event Register for Error Interrupt Status */
  __I  uint8_t  SDMMC_AESR;         /**< \brief (SDMMC Offset: 0x054) ADMA Error Status Register */
  __I  uint8_t  SDMMC_RSVD2[3];     /**< \brief (SDMMC Offset: 0x055 - 0x57) Reserved */
  __IO uint32_t SDMMC_ASAR[2];      /**< \brief (SDMMC Offset: 0x058) ADMA System Address Register */
  __IO uint16_t SDMMC_PVR[8];       /**< \brief (SDMMC Offset: 0x060) Preset Value Register */
  __I  uint32_t SDMMC_RSVD3[28];    /**< \brief (SDMMC Offset: 0x070 - 0xDC) Reserved */
  __IO uint32_t SDMMC_SBC;          /**< \brief (SDMMC Offset: 0x0E0) Shared Bus Control Register */
  __I  uint32_t SDMMC_RSVD4[6];     /**< \brief (SDMMC Offset: 0x0E4 - 0xF8) Reserved */
  __I  uint16_t SDMMC_SISR;         /**< \brief (SDMMC Offset: 0x0FC) Slot Interrupt Status Register */
  __I  uint16_t SDMMC_HCVR;         /**< \brief (SDMMC Offset: 0x0FE) Host Controller Version Register */

  __I  uint32_t SDMMC_RSVD5[64];    /**< \brief (SDMMC Offset: 0x100 - 0x1FC) Reserved */

  __I  uint32_t SDMMC_APSR;         /**< \brief (SDMMC Offset: 0x200) Additionnal Present State Register */
  __IO uint8_t  SDMMC_MC1R;         /**< \brief (SDMMC Offset: 0x204) MMC Control 1 Register */
  __O  uint8_t  SDMMC_MC2R;         /**< \brief (SDMMC Offset: 0x205) MMC Control 2 Register */
  __I  uint8_t  SDMMC_RSVD6[2];     /**< \brief (SDMMC Offset: 0x206 - 0x207) Reserved */      
  __IO uint32_t SDMMC_ACR;          /**< \brief (SDMMC Offset: 0x208) AHB Control Register */
  __IO uint32_t SDMMC_CC2R;         /**< \brief (SDMMC Offset: 0x20C) Clock Control 2 Register */
  __IO uint8_t  SDMMC_RTC1R;        /**< \brief (SDMMC Offset: 0x210) Retuning Timer Control 1 Register */
  __O  uint8_t  SDMMC_RTC2R;        /**< \brief (SDMMC Offset: 0x211) Retuning Timer Control 2 Register */
  __I  uint8_t  SDMMC_RSVD7[2];     /**< \brief (SDMMC Offset: 0x212 - 0x213) Reserved */      
  __IO uint32_t SDMMC_RTCVR;        /**< \brief (SDMMC Offset: 0x214) Retuning Timer Counter Value Register */
  __IO uint32_t SDMMC_RTIER;        /**< \brief (SDMMC Offset: 0x218) Retuning Timer Interrupt Enable Register */
  __IO uint32_t SDMMC_RTSR;         /**< \brief (SDMMC Offset: 0x21C) Retuning Timer Status Register */
  __IO uint32_t SDMMC_TUNCR;        /**< \brief (SDMMC Offset: 0x220) Tuning Control Register */
  __I  uint32_t SDMMC_TUNSR;        /**< \brief (SDMMC Offset: 0x224) Tuning Status Register */
  __I  uint32_t SDMMC_RSVD8[2];     /**< \brief (SDMMC Offset: 0x228 - 0x22C) Reserved */
  __IO uint32_t SDMMC_CACR;         /**< \brief (SDMMC Offset: 0x230) Capabilities Control Register */
  __I  uint32_t SDMMC_RSVD9[3];     /**< \brief (SDMMC Offset: 0x234 - 0x23C) Reserved */
  __IO uint32_t SDMMC_CALCR;        /**< \brief (SDMMC Offset: 0x240) Calibration Control Register */
  __I  uint32_t SDMMC_RSVD10[42];   /**< \brief (SDMMC Offset: 0x244 - 0x2F8) Reserved */
  __I  uint32_t SDMMC_VERSION;      /**< \brief (SDMMC Offset: 0x2FC) Version Register */
} Sdmmc;
#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */



/* --------  SDMMC_SSAR (SDMMC Offset: 0x000) SDMA System Address - Argument 2 Register */
#define SDMMC_SSAR_ADDRESS_Pos 0
#define SDMMC_SSAR_ADDRESS_Msk (0xFFFFFFFFu << SDMMC_SSAR_ADDRESS_Pos)
#define SDMMC_SSAR_ARGUMENT2_Pos 0
#define SDMMC_SSAR_ARGUMENT2_Msk (0xFFFFFFFFu << SDMMC_SSAR_ARGUMENT2_Pos)
/* --------  SDMMC_BSR (SDMMC Offset: 0x004) Block Size Register */
#define SDMMC_BSR_BLOCKSIZE_Pos 0
#define SDMMC_BSR_BLOCKSIZE_Msk (0xFFFu << SDMMC_BSR_BLOCKSIZE_Pos)
#define SDMMC_BSR_BOUNDARY_Pos 12
#define SDMMC_BSR_BOUNDARY_Msk (0x7u << SDMMC_BSR_BLOCKSIZE_Pos)
/* --------  SDMMC_BCR (SDMMC Offset: 0x006) Block Count Register */
#define SDMMC_BCR_BLKCOUNT_Pos 0
#define SDMMC_BCR_BLKCOUNT_Msk (0xFFFFu << SDMMC_BCR_BLKCOUNT_Pos)
/* --------  SDMMC_ARG1R (SDMMC Offset: 0x008) Argument 1 Register */
#define SDMMC_ARG1R_ARGUMENT1_Pos 0
#define SDMMC_ARG1R_ARGUMENT1_Msk (0xFFFFFFFFu << SDMMC_ARG1R_ARGUMENT1_Pos)
/* --------  SDMMC_TMR (SDMMC Offset: 0x00C) Transfer Mode Register */
#define SDMMC_TMR_DMAEN (0x1u << 0)
#define SDMMC_TMR_BLCCNTEN (0x1u << 1)
#define SDMMC_TMR_ACMDEN_Pos 2
#define SDMMC_TMR_ACMDEN_Msk (0x3u << SDMMC_TMR_ACMDEN_Pos)
#define   SDMMC_TMR_ACMDEN_DIS (0x0u << 2)
#define   SDMMC_TMR_ACMDEN_ACMD12 (0x1u << 2)
#define   SDMMC_TMR_ACMDEN_ACMD23 (0x2u << 2)
#define SDMMC_TMR_DATTRSFRDIR (0x1u << 4)
#define   SDMMC_TMR_DATTRSFRDIR_WR (0x0u << 4)
#define   SDMMC_TMR_DATTRSFRDIR_RD (0x1u << 4)
#define SDMMC_TMR_MULTISINGLEBLOCK (0x1u << 5)
/* --------  SDMMC_CR (SDMMC Offset: 0x00E) Command Register */
#define SDMMC_CR_RESPTYP_Pos 0
#define SDMMC_CR_RESPTYP_Msk (0x3u << SDMMC_CR_RESPTYP_Pos)
#define   SDMMC_CR_RESPTYP_NORESP (0x0u << 0)
#define   SDMMC_CR_RESPTYP_RL136 (0x1u << 0)
#define   SDMMC_CR_RESPTYP_RL48 (0x2u << 0)
#define   SDMMC_CR_RESPTYP_RL48BUSY (0x3u << 0)
#define SDMMC_CR_CMDCRCCHKEN (0x1u << 3)
#define SDMMC_CR_CMDIDXCHKEN (0x1u << 4)
#define SDMMC_CR_DATAPRES (0x1u << 5)
#define SDMMC_CR_CMDTYP_Pos 6
#define SDMMC_CR_CMDTYP_Msk (0x3u << SDMMC_CR_CMDTYP_Pos)
#define   SDMMC_CR_CMDTYP_NORMAL (0x0u << 6)
#define   SDMMC_CR_CMDTYP_SUSPEND (0x1u << 6)
#define   SDMMC_CR_CMDTYP_RESUME (0x2u << 6)
#define   SDMMC_CR_CMDTYP_ABORT (0x3u << 6)
#define SDMMC_CR_CMDIDX_Pos 8
#define SDMMC_CR_CMDIDX_Msk (0x3F << SDMMC_CR_CMDIDX_Pos)
/* --------  SDMMC_RR[4] (SDMMC Offset: 0x010) Response Register */
#define SDMMC_RR_CMDRESP_Pos 0
#define SDMMC_RR_CMDRESP_Msk (0xFFFFFFFFu << SDMMC_RR_CMDRESP_Pos)
/* --------  SDMMC_BDPR Buffer Data Port Register */
#define SDMMC_BDPR_BUFDATA_Pos 0
#define SDMMC_BDPR_BUFDATA_Msk (0xFFFFFFFFu << SDMMC_BDPR_BUFDATA_Pos)
/* --------  SDMMC_PSR (SDMMC Offset: 0x024) Present State Register */
#define SDMMC_PSR_CMDINHIBITCMD (0x1u << 0)
#define SDMMC_PSR_CMDINHIBITDAT (0x1u << 1)
#define SDMMC_PSR_DATLINEACTIVE (0x1u << 2)
#define SDMMC_PSR_RETUNINGREQ (0x1u << 3)
#define SDMMC_PSR_WRTRSFRACTIVE (0x1u << 8)
#define SDMMC_PSR_RDTRSFRACTIVE (0x1u << 9)
#define SDMMC_PSR_BUFWREN (0x1u << 10)
#define SDMMC_PSR_BUFRDEN (0x1u << 11)
#define SDMMC_PSR_CARDINSERTED (0x1u << 16)
#define SDMMC_PSR_CARDSTATSTAB (0x1u << 17)
#define SDMMC_PSR_CARDDETPINLVL (0x1u << 18)
#define SDMMC_PSR_WRPROTPINLVL (0x1u << 19)
#define SDMMC_PSR_DATLINELVL_Pos 20
#define SDMMC_PSR_DATLINELVL_Msk (0xFu << SDMMC_PSR_DATLINELVL_Pos)
#define SDMMC_PSR_CMDLINELVL (0x1u << 24)
/* --------  SDMMC_HC1R (SDMMC Offset: 0x028) Host Control 1 Register */
#define SDMMC_HC1R_LEDCTRL (0x1u << 0)
#define SDMMC_HC1R_DATAWIDTH (0x1u << 1)
#define SDMMC_HC1R_HIGHSPEEDEN (0x1u << 2)
#define SDMMC_HC1R_DMASEL_Pos 3
#define SDMMC_HC1R_DMASEL_Msk (0x3u << SDMMC_HC1R_DMASEL_Pos)
#define   SDMMC_HC1R_DMASEL_SDMA (0x0u << 3)
#define   SDMMC_HC1R_DMASEL_ADMA32 (0x2u << 3)
#define   SDMMC_HC1R_DMASEL_ADMA64 (0x3u << 3)
#define SDMMC_HC1R_EXTDATAWIDTH (0x1u << 5)
#define SDMMC_HC1R_CARDDETTSTLVL (0x1u << 6)
#define SDMMC_HC1R_CARDDETSIGSEL (0x1u << 7)
/* --------  SDMMC_PCR (SDMMC Offset: 0x029) Power Control Register */
#define SDMMC_PCR_SDBUSPOWER (0x1u << 0)
#define SDMMC_PCR_SDBUSVSEL_Pos 1
#define SDMMC_PCR_SDBUSVSEL_Msk (0x7u << SDMMC_PCR_SDBUSVSEL_Pos)
/* --------  SDMMC_BGCR (SDMMC Offset: 0x02A) Block Gap Control Register */
#define SDMMC_BGCR_STPBLKGAPREQ (0x1u << 0)
#define SDMMC_BGCR_CONTINUEREQ (0x1u << 1)
#define SDMMC_BGCR_READWAITCTRL (0x1u << 2)
#define SDMMC_BGCR_INTBLKGAP (0x1u << 3)
/* --------  SDMMC_WCR (SDMMC Offset: 0x02B) Wakeup Control Register */
#define SDMMC_WCR_WKENCARDINT (0x1u << 0)
#define SDMMC_WCR_WKENCARDINSERT (0x1u << 1)
#define SDMMC_WCR_WKENCARDREMOVAL (0x1u << 2)
/* --------  SDMMC_CCR (SDMMC Offset: 0x02C) Clock Control Register */
#define SDMMC_CCR_INTCLKEN (0x1u << 0)
#define SDMMC_CCR_INTCLKSTABLE (0x1u << 1)
#define SDMMC_CCR_SDCLKEN (0x1u << 2)
#define SDMMC_CCR_CLKGENSEL (0x1u << 5)
#define SDMMC_CCR_UPSDCLKFREQSEL_Pos 6
#define SDMMC_CCR_UPSDCLKFREQSEL_Msk (0x3u << SDMMC_CCR_UPSDCLKFREQSEL_Pos)
#define SDMMC_CCR_SDCLKFREQSEL_Pos 8
#define SDMMC_CCR_SDCLKFREQSEL_Msk (0xFFu << SDMMC_CCR_SDCLKFREQSEL_Pos)
/* --------  SDMMC_TCR (SDMMC Offset: 0x02E) Timeout Control Register */
#define SDMMC_TCR_DATTIMEOUTCNT_Pos 0
#define SDMMC_TCR_DATTIMEOUTCNT_Msk (0xFu << SDMMC_TCR_DATTIMEOUTCNT_Pos)
/* --------  SDMMC_SRR (SDMMC Offset: 0x02F) Software Reset Register */
#define SDMMC_SRR_SOFTRESALL (0x1u << 0)
#define SDMMC_SRR_SOFTRESCMD (0x1u << 1)
#define SDMMC_SRR_SOFTRESDAT (0x1u << 2)
/* --------  SDMMC_NISTR (SDMMC Offset: 0x030) Normal Interrupt Status Register */
#define SDMMC_NISTR_CMDCOMPLT (0x1u << 0)
#define SDMMC_NISTR_TRSFRCOMPLT (0x1u << 1)
#define SDMMC_NISTR_BLKGAPEVT (0x1u << 2)
#define SDMMC_NISTR_DMAINT (0x1u << 3)
#define SDMMC_NISTR_BUFWRRDY (0x1u << 4)
#define SDMMC_NISTR_BUFRDRDY (0x1u << 5)
#define SDMMC_NISTR_CARDINSERT (0x1u << 6)
#define SDMMC_NISTR_CARDREMOVAL (0x1u << 7)
#define SDMMC_NISTR_CARDINT (0x1u << 8)
#define SDMMC_NISTR_INTA (0x1u << 9)
#define SDMMC_NISTR_INTB (0x1u << 10)
#define SDMMC_NISTR_INTC (0x1u << 11)
#define SDMMC_NISTR_RETUNEVT (0x1u << 12)
#define SDMMC_NISTR_BOOTACKRCVD (0x1u << 14)
#define SDMMC_NISTR_ERRORINT (0x1u << 15)
/* --------  SDMMC_EISTR (SDMMC Offset: 0x032) Error Interrupt Status Register */
#define SDMMC_EISTR_CMDTIMEOUT (0x1u << 0)
#define SDMMC_EISTR_CMDCRC (0x1u << 1)
#define SDMMC_EISTR_CMDENDBIT (0x1u << 2)
#define SDMMC_EISTR_CMDIDX (0x1u << 3)
#define SDMMC_EISTR_DATTIMEOUT (0x1u << 4)
#define SDMMC_EISTR_DATCRC (0x1u << 5)
#define SDMMC_EISTR_DATENDBIT (0x1u << 6)
#define SDMMC_EISTR_CURRLIMIT (0x1u << 7)
#define SDMMC_EISTR_ACMD12 (0x1u << 8)
#define SDMMC_EISTR_ADMA (0x1u << 9)
#define SDMMC_EISTR_TUNING (0x1u << 10)
#define SDMMC_EISTR_BOOTACKERR (0x1u << 12)
/* --------  SDMMC_NISTER (SDMMC Offset: 0x034) Normal Interrupt Status Enable Register */
#define SDMMC_NISTER_CMDCOMPLT (0x1u << 0)
#define SDMMC_NISTER_TRSFRCOMPLT (0x1u << 1)
#define SDMMC_NISTER_BLKGAPEVT (0x1u << 2)
#define SDMMC_NISTER_DMAINT (0x1u << 3)
#define SDMMC_NISTER_BUFWRRDY (0x1u << 4)
#define SDMMC_NISTER_BUFRDRDY (0x1u << 5)
#define SDMMC_NISTER_CARDINSERT (0x1u << 6)
#define SDMMC_NISTER_CARDREMOVAL (0x1u << 7)
#define SDMMC_NISTER_CARDINT (0x1u << 8)
#define SDMMC_NISTER_INTA (0x1u << 9)
#define SDMMC_NISTER_INTB (0x1u << 10)
#define SDMMC_NISTER_INTC (0x1u << 11)
#define SDMMC_NISTER_RETUNEVT (0x1u << 12)
#define SDMMC_NISTER_BOOTACKRCVD (0x1u << 14)
/* --------  SDMMC_EISTER (SDMMC Offset: 0x036) Error Interrupt Status Enable Register */
#define SDMMC_EISTER_CMDTIMEOUT (0x1u << 0)
#define SDMMC_EISTER_CMDCRC (0x1u << 1)
#define SDMMC_EISTER_CMDENDBIT (0x1u << 2)
#define SDMMC_EISTER_CMDIDX (0x1u << 3)
#define SDMMC_EISTER_DATTIMEOUT (0x1u << 4)
#define SDMMC_EISTER_DATCRC (0x1u << 5)
#define SDMMC_EISTER_DATENDBIT (0x1u << 6)
#define SDMMC_EISTER_CURRLIMIT (0x1u << 7)
#define SDMMC_EISTER_ACMD12 (0x1u << 8)
#define SDMMC_EISTER_ADMA (0x1u << 9)
#define SDMMC_EISTER_TUNING (0x1u << 10)
#define SDMMC_EISTER_BOOTACKERR (0x1u << 12)
/* --------  SDMMC_NISIER (SDMMC Offset: 0x038) Normal Interrupt Signal Enable Register */
#define SDMMC_NISIER_CMDCOMPLT (0x1u << 0)
#define SDMMC_NISIER_TRSFRCOMPLT (0x1u << 1)
#define SDMMC_NISIER_BLKGAPEVT (0x1u << 2)
#define SDMMC_NISIER_DMAINT (0x1u << 3)
#define SDMMC_NISIER_BUFWRRDY (0x1u << 4)
#define SDMMC_NISIER_BUFRDRDY (0x1u << 5)
#define SDMMC_NISIER_CARDINSERT (0x1u << 6)
#define SDMMC_NISIER_CARDREMOVAL (0x1u << 7)
#define SDMMC_NISIER_CARDINT (0x1u << 8)
#define SDMMC_NISIER_INTA (0x1u << 9)
#define SDMMC_NISIER_INTB (0x1u << 10)
#define SDMMC_NISIER_INTC (0x1u << 11)
#define SDMMC_NISIER_RETUNEVT (0x1u << 12)
#define SDMMC_NISIER_BOOTACKRCVD (0x1u << 14)
/* --------  SDMMC_EISIER (SDMMC Offset: 0x03A) Error Interrupt Signal Enable Register */
#define SDMMC_EISIER_CMDTIMEOUT (0x1u << 0)
#define SDMMC_EISIER_CMDCRC (0x1u << 1)
#define SDMMC_EISIER_CMDENDBIT (0x1u << 2)
#define SDMMC_EISIER_CMDIDX (0x1u << 3)
#define SDMMC_EISIER_DATTIMEOUT (0x1u << 4)
#define SDMMC_EISIER_DATCRC (0x1u << 5)
#define SDMMC_EISIER_DATENDBIT (0x1u << 6)
#define SDMMC_EISIER_CURRLIMIT (0x1u << 7)
#define SDMMC_EISIER_ACMD12 (0x1u << 8)
#define SDMMC_EISIER_ADMA (0x1u << 9)
#define SDMMC_EISIER_TUNING (0x1u << 10)
#define SDMMC_EISIER_BOOTACKERR (0x1u << 12)
/* --------  SDMMC_ACESR (SDMMC Offset: 0x03C) Auto CMD Error Status Register */
#define SDMMC_ACESR_ACMD12NOTEXEC (0x1u << 0)
#define SDMMC_ACESR_ACMDTIMEOUT (0x1u << 1)
#define SDMMC_ACESR_ACMDCRC (0x1u << 2)
#define SDMMC_ACESR_ACMDENDBIT (0x1u << 3)
#define SDMMC_ACESR_ACMDIDX (0x1u << 4)
#define SDMMC_ACESR_CMDNOTISSUED (0x1u << 7)
/* --------  SDMMC_HC2R (SDMMC Offset: 0x03E) Host Control 2 Register */
#define SDMMC_HC2R_UHSMODESEL_Pos 0
#define SDMMC_HC2R_UHSMODESEL_Msk (0x7u << SDMMC_HC2R_UHSMODESEL_Pos)
#define   SDMMC_HC2R_UHSMODESEL_SDR12 (0x0u << 0)
#define   SDMMC_HC2R_UHSMODESEL_SDR25 (0x1u << 0)
#define   SDMMC_HC2R_UHSMODESEL_SDR50 (0x2u << 0)
#define   SDMMC_HC2R_UHSMODESEL_SDR104 (0x3u << 0)
#define   SDMMC_HC2R_UHSMODESEL_DDR50 (0x4u << 0)
#define SDMMC_HC2R_18VSIGNALSEL (0x1u << 3)
#define SDMMC_HC2R_DRIVERSEL_Pos 4
#define SDMMC_HC2R_DRIVERSEL_Msk (0x3u << SDMMC_HC2R_DRIVERSEL_Pos)
#define   SDMMC_HC2R_DRIVERSEL_TYPEB (0x0u << 4)
#define   SDMMC_HC2R_DRIVERSEL_TYPEA (0x1u << 4)
#define   SDMMC_HC2R_DRIVERSEL_TYPEC (0x2u << 4)
#define   SDMMC_HC2R_DRIVERSEL_TYPED (0x3u << 4)
#define SDMMC_HC2R_EXECTUNING (0x1u << 6)
#define SDMMC_HC2R_SAMPCLKSEL (0x1u << 7)
#define SDMMC_HC2R_ASYNCINTEN (0x1u << 14)
#define SDMMC_HC2R_PRESVALEN (0x1u << 15)
/* --------  SDMMC_CAR[0] (SDMMC Offset: 0x040) Capabilities Register */
#define SDMMC_CAR_TIMEOUTCLKFREQ_Pos 0
#define SDMMC_CAR_TIMEOUTCLKFREQ_Msk (0x3Fu << SDMMC_CAR_TIMEOUTCLKFREQ_Pos)
#define SDMMC_CAR_TIMEOUTCLKUNIT (0x1u << 7)
#define SDMMC_CAR_BASECLKFREQ_Pos 8
#define SDMMC_CAR_BASECLKFREQ_Msk (0xFFu << SDMMC_CAR_BASECLKFREQ_Pos)
#define SDMMC_CAR_MAXBLKLEN_Pos 16
#define SDMMC_CAR_MAXBLKLEN_Msk (0x3Fu << SDMMC_CAR_MAXBLKLEN_Pos)
#define SDMMC_CAR_8BITSUP (0x1u << 18)
#define SDMMC_CAR_ADMA2SUP (0x1u << 19)
#define SDMMC_CAR_HIGHSPEEDSUP (0x1u << 21)
#define SDMMC_CAR_SDMASUP (0x1u << 22)
#define SDMMC_CAR_SUSPRESUMSUP (0x1u << 23)
#define SDMMC_CAR_VOLT33VSUP (0x1u << 24)
#define SDMMC_CAR_VOLT30VSUP (0x1u << 25)
#define SDMMC_CAR_VOLT18VSUP (0x1u << 26)
#define SDMMC_CAR_64BITSYSBUSSUP (0x1u << 28)
#define SDMMC_CAR_ASYNCINTSUP (0x1u << 29)
#define SDMMC_CAR_SLOTTYPE_Pos 30
#define SDMMC_CAR_SLOTTYPE_Msk (0x3Fu << SDMMC_CAR_SLOTTYPE_Pos)
#define   SDMMC_CAR_SLOTTYPE_REMOVABLECARD (0x0u << 30)
#define   SDMMC_CAR_SLOTTYPE_EMBEDDED (0x1u << 30)
#define   SDMMC_CAR_SLOTTYPE_SHAREDBUS (0x2u << 30)
/* --------  SDMMC_CAR[1] (SDMMC Offset: 0x04C) Capabilities Register */
#define SDMMC_CAR_SDR50SUP (0x1u << 0)
#define SDMMC_CAR_SDR104SUP (0x1u << 1)
#define SDMMC_CAR_DDR50SUP (0x1u << 2)
#define SDMMC_CAR_DRIVERTYPEASUP (0x1u << 4)
#define SDMMC_CAR_DRIVERTYPECSUP (0x1u << 5)
#define SDMMC_CAR_DRIVERTYPEDSUP (0x1u << 6)
#define SDMMC_CAR_TIMERCNTRETUNING_Pos 8
#define SDMMC_CAR_TIMERCNTRETUNING_Msk (0xFu << SDMMC_CAR_TIMERCNTRETUNING_Pos)
#define SDMMC_CAR_TUNINGFORSDR50 (0x1u << 13)
#define SDMMC_CAR_RETUNINGMODES_Pos 14
#define SDMMC_CAR_RETUNINGMODES_Msk (0xFu << SDMMC_CAR_RETUNINGMODES_Pos)
#define   SDMMC_CAR_RETUNINGMODES_MODE1 (0x0u << 14)
#define   SDMMC_CAR_RETUNINGMODES_MODE2 (0x1u << 14)
#define   SDMMC_CAR_RETUNINGMODES_MODE3 (0x2u << 14)
#define SDMMC_CAR_CLKMULTIPLIER_Pos 16
#define SDMMC_CAR_CLKMULTIPLIER_Msk (0xFFu << SDMMC_CAR_RETUNINGMODES_Pos)
/* --------  SDMMC_MCCAR (SDMMC Offset: 0x048) Maximum Current Capabilities Register */
#define SDMMC_MCCAR_MAXCURR33V_Pos 0
#define SDMMC_MCCAR_MAXCURR33V_Msk (0xFFu << SDMMC_MCCAR_MAXCURR33V_Pos)
#define SDMMC_MCCAR_MAXCURR30V_Pos 8
#define SDMMC_MCCAR_MAXCURR30V_Msk (0xFFu << SDMMC_MCCAR_MAXCURR30V_Pos)
#define SDMMC_MCCAR_MAXCURR18V_Pos 16
#define SDMMC_MCCAR_MAXCURR18V_Msk (0xFFu << SDMMC_MCCAR_MAXCURR18V_Pos)
/* --------  SDMMC_FERACES (SDMMC Offset: 0x050) Force Event Register for Auto CMD Error Status */
#define SDMMC_FERACES_ACMD12NOTEXEC (0x1u << 0)
#define SDMMC_FERACES_ACMDTIMEOUT (0x1u << 1)
#define SDMMC_FERACES_ACMDCRC (0x1u << 2)
#define SDMMC_FERACES_ACMDENDBIT (0x1u << 3)
#define SDMMC_FERACES_ACMDIDX (0x1u << 4)
#define SDMMC_FERACES_CMDNOTISSUED (0x1u << 7)
/* --------  SDMMC_FEREIS (SDMMC Offset: 0x052) Force Event Register for Error Interrupt Status */
#define SDMMC_FEREIS_CMDTIMEOUT (0x1u << 0)
#define SDMMC_FEREIS_CMDCRC (0x1u << 1)
#define SDMMC_FEREIS_CMDENDBIT (0x1u << 2)
#define SDMMC_FEREIS_CMDIDX (0x1u << 3)
#define SDMMC_FEREIS_DATTIMEOUT (0x1u << 4)
#define SDMMC_FEREIS_DATCRC (0x1u << 5)
#define SDMMC_FEREIS_DATENDBIT (0x1u << 6)
#define SDMMC_FEREIS_CURRLIMIT (0x1u << 7)
#define SDMMC_FEREIS_ACMD12 (0x1u << 8)
#define SDMMC_FEREIS_ADMA (0x1u << 9)
/* --------  SDMMC_AESR (SDMMC Offset: 0x054) ADMA Error Status Register */
#define SDMMC_AESR_ERRORSTATE_Pos 0
#define SDMMC_AESR_ERRORSTATE_Msk (0x3u << SDMMC_AESR_ERRORSTATE_Pos)
#define   SDMMC_AESR_ERRORSTATE_STOP (0x0u << 0)
#define   SDMMC_AESR_ERRORSTATE_FDS (0x1u << 0)
#define   SDMMC_AESR_ERRORSTATE_TFR (0x3u << 0)
#define SDMMC_AESR_LENGTHMISMATCH (0x1u << 2)
/* --------  SDMMC_ASAR[2] (SDMMC Offset: 0x058) ADMA System Address Register */
#define SDMMC_ASAR_ADMASYSADDR_Pos 0
#define SDMMC_ASAR_ADMASYSADDR_Msk (0xFFFFFFFFu << SDMMC_ASAR_ADMASYSADDR_Pos)
/* --------  SDMMC_PVR[8] (SDMMC Offset: 0x060) Preset Value Register */
#define SDMMC_PVR_SDCLKFREQSEL_Pos 0
#define SDMMC_PVR_SDCLKFREQSEL_Msk (0x3FFu << SDMMC_PVR_SDCLKFREQSEL_Pos)
#define SDMMC_PVR_CLKGENSEL (0x1u << 10)
#define SDMMC_PVR_DRIVERSEL_Pos 14
#define SDMMC_PVR_DRIVERSEL_Msk (0x3u << SDMMC_HC2R_DRIVERSEL_Pos)
/* --------  SDMMC_SBC (SDMMC Offset: 0x0E0) Shared Bus Control Register */
#define SDMMC_SBC_NBCLKPINS_Pos 0
#define SDMMC_SBC_NBCLKPINS_Msk (0x7u << SDMMC_SBC_NBCLKPINS_Pos)
#define SDMMC_SBC_NBINTPINS_Pos 4
#define SDMMC_SBC_NBINTPINS_Msk (0x3u << SDMMC_SBC_NBINTPINS_Pos)
#define SDMMC_SBC_BUSWIDTHPRES_Pos 8
#define SDMMC_SBC_BUSWIDTHPRES_Msk (0x7Fu << SDMMC_SBC_BUSWIDTHPRES_Pos)
#define SDMMC_SBC_CLKPINSEL_Pos 16
#define SDMMC_SBC_CLKPINSEL_Msk (0x7u << SDMMC_SBC_CLKPINSEL_Pos)
#define SDMMC_SBC_INTPINSEL_Pos 20
#define SDMMC_SBC_INTPINSEL_Msk (0x7u << SDMMC_SBC_INTPINSEL_Pos)
#define SDMMC_SBC_BACKENDPWRCTRL_Pos 24
#define SDMMC_SBC_BACKENDPWRCTRL_Msk (0x7Fu << SDMMC_SBC_BACKENDPWRCTRL_Pos)
/* --------  SDMMC_SISR (SDMMC Offset: 0x0FC) Slot Interrupt Status Register */
#define SDMMC_SISR_INTSIGSLOT_Pos 0
#define SDMMC_SISR_INTSIGSLOT_Msk (0xFFu << SDMMC_SISR_INTSIGSLOT_Pos)
/* --------  SDMMC_HCVR (SDMMC Offset: 0x0FE) Host Controller Version Register */
#define SDMMC_HCVR_SPECVER_Pos 0
#define SDMMC_HCVR_SPECVER_Msk (0xFFu << SDMMC_HCVR_SPECVER_Pos)
#define SDMMC_HCVR_VENDORVER_Pos 0
#define SDMMC_HCVR_VENDORVER_Msk (0xFFu << SDMMC_HCVR_VENDORVER_Pos)
/* --------  SDMMC_APSR (SDMMC Offset: 0x200) Additionnal Present State Register */
#define SDMMC_APSR_HIGHDATLINELVL_Pos 0
#define SDMMC_APSR_HIGHDATLINELVL_Msk (0xFu << SDMMC_PSR_HIGHDATLINELVL_Pos)
/* --------  SDMMC_MC1R (SDMMC Offset: 0x204) MMC Control 1 Register */
#define SDMMC_MC1R_CMDTYP_Pos 0
#define SDMMC_MC1R_CMDTYP_Msk (0x3u << SDMMC_MC1R_CMDTYP_Pos)
#define SDMMC_MC1R_CMDTYP_NORMAL (0x0u << 0)
#define SDMMC_MC1R_CMDTYP_WAITIRQ (0x1u << 0)
#define SDMMC_MC1R_CMDTYP_STREAM (0x2u << 0)
#define SDMMC_MC1R_CMDTYP_BOOT (0x3u << 0)
#define SDMMC_MC1R_DDR (0x1u << 3)
#define SDMMC_MC1R_OPENDRAIN (0x1u << 4)
#define SDMMC_MC1R_BOOTACK (0x1u << 5)
#define SDMMC_MC1R_RSTN (0x1u << 6)
#define SDMMC_MC1R_FORCECD (0x1u << 7)
/* --------  SDMMC_MC2R (SDMMC Offset: 0x205) MMC Control 2 Register */
#define SDMMC_MC2R_SENDRESP (0x1u << 0)
#define SDMMC_MC2R_ABORTBOOT (0x1u << 1)
/* --------  SDMMC_ACR (SDMMC Offset: 0x208) AHB Control Register */
#define SDMMC_ACR_BURSTMAX_Pos 0
#define SDMMC_ACR_BURSTMAX_Msk (0x3u << SDMMC_ACR_BURSTMAX_Pos)
#define   SDMMC_ACR_BURSTMAX_INCR16 (0x0u << 0)
#define   SDMMC_ACR_BURSTMAX_INCR8 (0x1u << 0)
#define   SDMMC_ACR_BURSTMAX_INCR4 (0x2u << 0)
#define   SDMMC_ACR_BURSTMAX_SINGLE (0x3u << 0)
#define SDMMC_ACR_HNBREQDIS (0x1u << 4)
#define SDMMC_ACR_BOUND1KBDIS (0x1u << 5)
/* --------  SDMMC_CC2R (SDMMC Offset: 0x20C) Clock Control 2 Register */
#define SDMMC_CC2R_FORCESDCLKDIS (0x1u << 0)
/* --------  SDMMC_RTC1R (SDMMC Offset: 0x210) Retuning Timer Control 1 Register */
#define SDMMC_RTC1R_TIMEREN (0x1u << 0)
/* --------  SDMMC_RTC2R (SDMMC Offset: 0x211) Retuning Timer Control 2 Register */
#define SDMMC_RTC2R_RELOAD (0x1u << 0)
/* --------  SDMMC_RTCVR (SDMMC Offset: 0x214) Retuning Timer Counter Value Register */
#define SDMMC_RTCVR_TIMERCNTVALUE_Pos 0
#define SDMMC_RTCVR_TIMERCNTVALUE_Msk (0xFu << SDMMC_RTCVR_TIMERCNTVALUE_Pos)
/* --------  SDMMC_RTIER (SDMMC Offset: 0x218) Retuning Timer Interrupt Enable Register */
#define SDMMC_RTIER_TIMEREVTSTEN (0x1u << 0)
#define SDMMC_RTIER_TIMEREVTSIGNEN (0x1u << 8)
/* --------  SDMMC_RTSR (SDMMC Offset: 0x21C) Retuning Timer Status Register */
#define SDMMC_RTSR_TIMEREVT (0x1u << 0)
#define SDMMC_RTSR_TIMEREVTSLOT (0x1u << 8)
/* --------  SDMMC_TUNCR (SDMMC Offset: 0x220) Tuning Control Register */
#define SDMMC_TUNCR_SAMPLINGPT (0x1u << 0)
/* --------  SDMMC_TUNSR (SDMMC Offset: 0x224) Tuning Status Register */
#define SDMMC_TUNSR_KO2OK_Pos 0
#define SDMMC_TUNSR_KO2OK_Msk (0xFFu << SDMMC_TUNSR_KO2OK_Pos)
#define SDMMC_TUNSR_OK2KO_Pos 8
#define SDMMC_TUNSR_OK2KO_Msk (0xFFu << SDMMC_TUNSR_OK2KO_Pos)
#define SDMMC_TUNSR_HLFPER_Pos 16
#define SDMMC_TUNSR_HLFPER_Msk (0xFFu << SDMMC_TUNSR_HLFPER_Pos)
#define SDMMC_TUNSR_PERIOD_Pos 24
#define SDMMC_TUNSR_PERIOD_Msk (0xFFu << SDMMC_TUNSR_PERIOD_Pos)
/* --------  SDMMC_CACR (SDMMC Offset: 0x230) Capabilities Control Register */
#define SDMMC_CACR_CAPWREN (0x1u << 0)
/* --------  SDMMC_CALCR (SDMMC Offset: 0x240) Calibration Control Register */
#define SDMMC_CALCR_EN (0x1u << 0)
#define SDMMC_CALCR_ALWYSON (0x1u << 4)
#define SDMMC_CALCR_TUNINGDIS (0x1u << 5)
#define SDMMC_CALCR_CNTVAL_Pos 8
#define SDMMC_CALCR_CNTVAL_Msk (0xFFu << SDMMC_CALCR_CNTVAL_Pos)
#define SDMMC_CALCR_CALN_Pos 16
#define SDMMC_CALCR_CALN_Msk (0xFu << SDMMC_CALCR_CALN_Pos)
#define SDMMC_CALCR_CALP_Pos 24
#define SDMMC_CALCR_CALP_Msk (0xFu << SDMMC_CALCR_CALP_Pos)
/* --------  SDMMC_VERSION (SDMMC Offset: 0x2FC) Version Register */
#define SDMMC_VERSION_VERSION_Pos 0
#define SDMMC_VERSION_VERSION_Msk (0xFFFu << SDMMC_VERSION_VERSION_Pos)
#define SDMMC_VERSION_MFN_Pos 16
#define SDMMC_VERSION_MFN_Msk (0x7u << SDMMC_VERSION_MFN_Pos)

/* ========== Register definition for SDMMC0 peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_SDMMC0_SSAR                         (0xA0000000U) /**< \brief (SDMMC0) SDMA System Address - Argument 2 Register */
  #define REG_SDMMC0_BSR                          (0xA0000004U) /**< \brief (SDMMC0) Block Size Register */
  #define REG_SDMMC0_BCR                          (0xA0000006U) /**< \brief (SDMMC0) Block Count Register */
  #define REG_SDMMC0_ARG1R                        (0xA0000008U) /**< \brief (SDMMC0) Argument 1 Register */
  #define REG_SDMMC0_TMR                          (0xA000000CU) /**< \brief (SDMMC0) Transfer Mode Register */
  #define REG_SDMMC0_CR                           (0xA000000EU) /**< \brief (SDMMC0) Command Register */
  #define REG_SDMMC0_RR0                          (0xA0000010U) /**< \brief (SDMMC0) Response Register */
  #define REG_SDMMC0_RR1                          (0xA0000014U) /**< \brief (SDMMC0) Response Register */
  #define REG_SDMMC0_RR2                          (0xA0000018U) /**< \brief (SDMMC0) Response Register */
  #define REG_SDMMC0_RR3                          (0xA000001CU) /**< \brief (SDMMC0) Response Register */
  #define REG_SDMMC0_BDPR                         (0xA0000020U) /**< \brief (SDMMC0) Buffer Data Port Register */
  #define REG_SDMMC0_PSR                          (0xA0000024U) /**< \brief (SDMMC0) Present State Register */
  #define REG_SDMMC0_HC1R                         (0xA0000028U) /**< \brief (SDMMC0) Host Control 1 Register */
  #define REG_SDMMC0_PCR                          (0xA0000029U) /**< \brief (SDMMC0) Power Control Register */
  #define REG_SDMMC0_BGCR                         (0xA000002AU) /**< \brief (SDMMC0) Block Gap Control Register */
  #define REG_SDMMC0_WCR                          (0xA000002BU) /**< \brief (SDMMC0) Wakeup Control Register */
  #define REG_SDMMC0_CCR                          (0xA000002CU) /**< \brief (SDMMC0) Clock Control Register */
  #define REG_SDMMC0_TCR                          (0xA000002EU) /**< \brief (SDMMC0) Timeout Control Register */
  #define REG_SDMMC0_SRR                          (0xA000002FU) /**< \brief (SDMMC0) Software Reset Register */
  #define REG_SDMMC0_NISTR                        (0xA0000030U) /**< \brief (SDMMC0) Normal Interrupt Status Register */
  #define REG_SDMMC0_EISTR                        (0xA0000032U) /**< \brief (SDMMC0) Error Interrupt Status Register */
  #define REG_SDMMC0_NISTER                       (0xA0000034U) /**< \brief (SDMMC0) Normal Interrupt Status Enable Register */
  #define REG_SDMMC0_EISTER                       (0xA0000036U) /**< \brief (SDMMC0) Error Interrupt Status Enable Register */
  #define REG_SDMMC0_NISIER                       (0xA0000038U) /**< \brief (SDMMC0) Normal Interrupt Signal Enable Register */
  #define REG_SDMMC0_EISIER                       (0xA000003AU) /**< \brief (SDMMC0) Error Interrupt Signal Enable Register */
  #define REG_SDMMC0_ACESR                        (0xA000003CU) /**< \brief (SDMMC0) Auto CMD Error Status Register */
  #define REG_SDMMC0_HC2R                         (0xA000003EU) /**< \brief (SDMMC0) Host Control 2 Register */
  #define REG_SDMMC0_CAR0                         (0xA0000040U) /**< \brief (SDMMC0) Capabilities Register */
  #define REG_SDMMC0_CAR1                         (0xA0000044U) /**< \brief (SDMMC0) Capabilities Register */
  #define REG_SDMMC0_MCCAR                        (0xA0000048U) /**< \brief (SDMMC0) Maximum Current Capabilities Register */
  #define REG_SDMMC0_FERACES                      (0xA0000050U) /**< \brief (SDMMC0) Force Event Register for Auto CMD Error Status */
  #define REG_SDMMC0_FEREIS                       (0xA0000052U) /**< \brief (SDMMC0) Force Event Register for Error Interrupt Status */
  #define REG_SDMMC0_AESR                         (0xA0000054U) /**< \brief (SDMMC0) ADMA Error Status Register */
  #define REG_SDMMC0_ASAR0                        (0xA0000058U) /**< \brief (SDMMC0) ADMA System Address Register */
  #define REG_SDMMC0_ASAR1                        (0xA0000058U) /**< \brief (SDMMC0) ADMA System Address Register */
  #define REG_SDMMC0_PVR0                         (0xA0000060U) /**< \brief (SDMMC0) Preset Value Register */
  #define REG_SDMMC0_PVR1                         (0xA0000062U) /**< \brief (SDMMC0) Preset Value Register */
  #define REG_SDMMC0_PVR2                         (0xA0000064U) /**< \brief (SDMMC0) Preset Value Register */
  #define REG_SDMMC0_PVR3                         (0xA0000066U) /**< \brief (SDMMC0) Preset Value Register */
  #define REG_SDMMC0_PVR4                         (0xA0000068U) /**< \brief (SDMMC0) Preset Value Register */
  #define REG_SDMMC0_PVR5                         (0xA000006AU) /**< \brief (SDMMC0) Preset Value Register */
  #define REG_SDMMC0_PVR6                         (0xA000006CU) /**< \brief (SDMMC0) Preset Value Register */
  #define REG_SDMMC0_PVR7                         (0xA000006EU) /**< \brief (SDMMC0) Preset Value Register */
  #define REG_SDMMC0_SBC                          (0xA00000E0U) /**< \brief (SDMMC0) Shared Bus Control Register */
  #define REG_SDMMC0_SISR                         (0xA00000FCU) /**< \brief (SDMMC0) Slot Interrupt Status Register */
  #define REG_SDMMC0_HCVR                         (0xA00000FEU) /**< \brief (SDMMC0) Host Controller Version Register */
  #define REG_SDMMC0_APSR                         (0xA0000200U) /**< \brief (SDMMC0) Additionnal Present State Register */
  #define REG_SDMMC0_MC1R                         (0xA0000204U) /**< \brief (SDMMC0) MMC Control 1 Register */
  #define REG_SDMMC0_MC2R                         (0xA0000205U) /**< \brief (SDMMC0) MMC Control 2 Register */
  #define REG_SDMMC0_ACR                          (0xA0000208U) /**< \brief (SDMMC0) AHB Control Register */
  #define REG_SDMMC0_CC2R                         (0xA000020CU) /**< \brief (SDMMC0) Clock Control 2 Register */
  #define REG_SDMMC0_RTC1R                        (0xA0000210U) /**< \brief (SDMMC0) Retuning Timer Control 1 Register */
  #define REG_SDMMC0_RTC2R                        (0xA0000211U) /**< \brief (SDMMC0) Retuning Timer Control 2 Register */
  #define REG_SDMMC0_RTCVR                        (0xA0000214U) /**< \brief (SDMMC0) Retuning Timer Counter Value Register */
  #define REG_SDMMC0_RTIER                        (0xA0000218U) /**< \brief (SDMMC0) Retuning Timer Interrupt Enable Register */
  #define REG_SDMMC0_RTSR                         (0xA000021CU) /**< \brief (SDMMC0) Retuning Timer Status Register */
  #define REG_SDMMC0_TUNCR                        (0xA0000220U) /**< \brief (SDMMC0) Tuning Control Register */
  #define REG_SDMMC0_TUNSR                        (0xA0000224U) /**< \brief (SDMMC0) Tuning Status Register */
  #define REG_SDMMC0_CACR                         (0xA0000230U) /**< \brief (SDMMC0) Capabilities Control Register */
  #define REG_SDMMC0_CALCR                        (0xA0000240U) /**< \brief (SDMMC0) Calibration Control Register */
  #define REG_SDMMC0_VERSION                      (0xA00002FCU) /**< \brief (SDMMC0) Version Register */
#else
  #define REG_SDMMC0_SSAR        (*(__IO uint32_t) 0xA0000000U) /**< \brief (SDMMC0) SDMA System Address - Argument 2 Register */
  #define REG_SDMMC0_BSR         (*(__IO uint16_t) 0xA0000004U) /**< \brief (SDMMC0) Block Size Register */
  #define REG_SDMMC0_BCR         (*(__IO uint16_t) 0xA0000006U) /**< \brief (SDMMC0) Block Count Register */
  #define REG_SDMMC0_ARG1R       (*(__IO uint32_t) 0xA0000008U) /**< \brief (SDMMC0) Argument 1 Register */
  #define REG_SDMMC0_TMR         (*(__IO uint16_t) 0xA000000CU) /**< \brief (SDMMC0) Transfer Mode Register */
  #define REG_SDMMC0_CR          (*(__IO uint16_t) 0xA000000EU) /**< \brief (SDMMC0) Command Register */
  #define REG_SDMMC0_RR0         (*(__I  uint32_t) 0xA0000010U) /**< \brief (SDMMC0) Response Register */
  #define REG_SDMMC0_RR1         (*(__I  uint32_t) 0xA0000014U) /**< \brief (SDMMC0) Response Register */
  #define REG_SDMMC0_RR2         (*(__I  uint32_t) 0xA0000018U) /**< \brief (SDMMC0) Response Register */
  #define REG_SDMMC0_RR3         (*(__I  uint32_t) 0xA000001CU) /**< \brief (SDMMC0) Response Register */
  #define REG_SDMMC0_BDPR        (*(__IO uint32_t) 0xA0000020U) /**< \brief (SDMMC0) Buffer Data Port Register */
  #define REG_SDMMC0_PSR         (*(__I  uint32_t) 0xA0000024U) /**< \brief (SDMMC0) Present State Register */
  #define REG_SDMMC0_HC1R        (*(__IO uint8_t ) 0xA0000028U) /**< \brief (SDMMC0) Host Control 1 Register */
  #define REG_SDMMC0_PCR         (*(__IO uint8_t ) 0xA0000029U) /**< \brief (SDMMC0) Power Control Register */
  #define REG_SDMMC0_BGCR        (*(__IO uint8_t ) 0xA000002AU) /**< \brief (SDMMC0) Block Gap Control Register */
  #define REG_SDMMC0_WCR         (*(__IO uint8_t ) 0xA000002BU) /**< \brief (SDMMC0) Wakeup Control Register */
  #define REG_SDMMC0_CCR         (*(__IO uint16_t) 0xA000002CU) /**< \brief (SDMMC0) Clock Control Register */
  #define REG_SDMMC0_TCR         (*(__IO uint8_t ) 0xA000002EU) /**< \brief (SDMMC0) Timeout Control Register */
  #define REG_SDMMC0_SRR         (*(__IO uint8_t ) 0xA000002FU) /**< \brief (SDMMC0) Software Reset Register */
  #define REG_SDMMC0_NISTR       (*(__IO uint16_t) 0xA0000030U) /**< \brief (SDMMC0) Normal Interrupt Status Register */
  #define REG_SDMMC0_EISTR       (*(__IO uint16_t) 0xA0000032U) /**< \brief (SDMMC0) Error Interrupt Status Register */
  #define REG_SDMMC0_NISTER      (*(__IO uint16_t) 0xA0000034U) /**< \brief (SDMMC0) Normal Interrupt Status Enable Register */
  #define REG_SDMMC0_EISTER      (*(__IO uint16_t) 0xA0000036U) /**< \brief (SDMMC0) Error Interrupt Status Enable Register */
  #define REG_SDMMC0_NISIER      (*(__IO uint16_t) 0xA0000038U) /**< \brief (SDMMC0) Normal Interrupt Signal Enable Register */
  #define REG_SDMMC0_EISIER      (*(__IO uint16_t) 0xA000003AU) /**< \brief (SDMMC0) Error Interrupt Signal Enable Register */
  #define REG_SDMMC0_ACESR       (*(__IO uint16_t) 0xA000003CU) /**< \brief (SDMMC0) Auto CMD Error Status Register */
  #define REG_SDMMC0_HC2R        (*(__IO uint16_t) 0xA000003EU) /**< \brief (SDMMC0) Host Control 2 Register */
  #define REG_SDMMC0_CAR0        (*(__IO uint32_t) 0xA0000040U) /**< \brief (SDMMC0) Capabilities Register */
  #define REG_SDMMC0_CAR1        (*(__IO uint32_t) 0xA0000044U) /**< \brief (SDMMC0) Capabilities Register */
  #define REG_SDMMC0_MCCAR       (*(__IO uint32_t) 0xA0000048U) /**< \brief (SDMMC0) Maximum Current Capabilities Register */
  #define REG_SDMMC0_FERACES     (*(__O  uint16_t) 0xA0000050U) /**< \brief (SDMMC0) Force Event Register for Auto CMD Error Status */
  #define REG_SDMMC0_FEREIS      (*(__O  uint16_t) 0xA0000052U) /**< \brief (SDMMC0) Force Event Register for Error Interrupt Status */
  #define REG_SDMMC0_AESR        (*(__I  uint8_t ) 0xA0000054U) /**< \brief (SDMMC0) ADMA Error Status Register */
  #define REG_SDMMC0_ASAR0       (*(__IO uint32_t) 0xA0000058U) /**< \brief (SDMMC0) ADMA System Address Register */
  #define REG_SDMMC0_ASAR1       (*(__IO uint32_t) 0xA0000058U) /**< \brief (SDMMC0) ADMA System Address Register */
  #define REG_SDMMC0_PVR0        (*(__IO uint16_t) 0xA0000060U) /**< \brief (SDMMC0) Preset Value Register */
  #define REG_SDMMC0_PVR1        (*(__IO uint16_t) 0xA0000062U) /**< \brief (SDMMC0) Preset Value Register */
  #define REG_SDMMC0_PVR2        (*(__IO uint16_t) 0xA0000064U) /**< \brief (SDMMC0) Preset Value Register */
  #define REG_SDMMC0_PVR3        (*(__IO uint16_t) 0xA0000066U) /**< \brief (SDMMC0) Preset Value Register */
  #define REG_SDMMC0_PVR4        (*(__IO uint16_t) 0xA0000068U) /**< \brief (SDMMC0) Preset Value Register */
  #define REG_SDMMC0_PVR5        (*(__IO uint16_t) 0xA000006AU) /**< \brief (SDMMC0) Preset Value Register */
  #define REG_SDMMC0_PVR6        (*(__IO uint16_t) 0xA000006CU) /**< \brief (SDMMC0) Preset Value Register */
  #define REG_SDMMC0_PVR7        (*(__IO uint16_t) 0xA000006EU) /**< \brief (SDMMC0) Preset Value Register */
  #define REG_SDMMC0_SBC         (*(__IO uint32_t) 0xA00000E0U) /**< \brief (SDMMC0) Shared Bus Control Register */
  #define REG_SDMMC0_SISR        (*(__I  uint16_t) 0xA00000FCU) /**< \brief (SDMMC0) Slot Interrupt Status Register */
  #define REG_SDMMC0_HCVR        (*(__I  uint16_t) 0xA00000FEU) /**< \brief (SDMMC0) Host Controller Version Register */
  #define REG_SDMMC0_APSR        (*(__I  uint32_t) 0xA0000200U) /**< \brief (SDMMC0) Additionnal Present State Register */
  #define REG_SDMMC0_MC1R        (*(__IO uint8_t ) 0xA0000204U) /**< \brief (SDMMC0) MMC Control 1 Register */
  #define REG_SDMMC0_MC2R        (*(__O  uint8_t ) 0xA0000205U) /**< \brief (SDMMC0) MMC Control 2 Register */
  #define REG_SDMMC0_ACR         (*(__IO uint32_t) 0xA0000208U) /**< \brief (SDMMC0) AHB Control Register */
  #define REG_SDMMC0_CC2R        (*(__IO uint32_t) 0xA000020CU) /**< \brief (SDMMC0) Clock Control 2 Register */
  #define REG_SDMMC0_RTC1R       (*(__IO uint8_t ) 0xA0000210U) /**< \brief (SDMMC0) Retuning Timer Control 1 Register */
  #define REG_SDMMC0_RTC2R       (*(__O  uint8_t ) 0xA0000211U) /**< \brief (SDMMC0) Retuning Timer Control 2 Register */
  #define REG_SDMMC0_RTCVR       (*(__IO uint32_t) 0xA0000214U) /**< \brief (SDMMC0) Retuning Timer Counter Value Register */
  #define REG_SDMMC0_RTIER       (*(__IO uint32_t) 0xA0000218U) /**< \brief (SDMMC0) Retuning Timer Interrupt Enable Register */
  #define REG_SDMMC0_RTSR        (*(__IO uint32_t) 0xA000021CU) /**< \brief (SDMMC0) Retuning Timer Status Register */
  #define REG_SDMMC0_TUNCR       (*(__IO uint32_t) 0xA0000220U) /**< \brief (SDMMC0) Tuning Control Register */
  #define REG_SDMMC0_TUNSR       (*(__I  uint32_t) 0xA0000224U) /**< \brief (SDMMC0) Tuning Status Register */
  #define REG_SDMMC0_CACR        (*(__IO uint32_t) 0xA0000230U) /**< \brief (SDMMC0) Capabilities Control Register */
  #define REG_SDMMC0_CALCR       (*(__IO uint32_t) 0xA0000240U) /**< \brief (SDMMC0) Calibration Control Register */
  #define REG_SDMMC0_VERSION     (*(__I  uint32_t) 0xA00002FCU) /**< \brief (SDMMC0) Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */

/* ========== Register definition for SDMMC1 peripheral ========== */
#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
  #define REG_SDMMC1_SSAR                         (0xB0000000U) /**< \brief (SDMMC1) SDMA System Address - Argument 2 Register */
  #define REG_SDMMC1_BSR                          (0xB0000004U) /**< \brief (SDMMC1) Block Size Register */
  #define REG_SDMMC1_BCR                          (0xB0000006U) /**< \brief (SDMMC1) Block Count Register */
  #define REG_SDMMC1_ARG1R                        (0xB0000008U) /**< \brief (SDMMC1) Argument 1 Register */
  #define REG_SDMMC1_TMR                          (0xB000000CU) /**< \brief (SDMMC1) Transfer Mode Register */
  #define REG_SDMMC1_CR                           (0xB000000EU) /**< \brief (SDMMC1) Command Register */
  #define REG_SDMMC1_RR0                          (0xB0000010U) /**< \brief (SDMMC1) Response Register */
  #define REG_SDMMC1_RR1                          (0xB0000014U) /**< \brief (SDMMC1) Response Register */
  #define REG_SDMMC1_RR2                          (0xB0000018U) /**< \brief (SDMMC1) Response Register */
  #define REG_SDMMC1_RR3                          (0xB000001CU) /**< \brief (SDMMC1) Response Register */
  #define REG_SDMMC1_BDPR                         (0xB0000020U) /**< \brief (SDMMC1) Buffer Data Port Register */
  #define REG_SDMMC1_PSR                          (0xB0000024U) /**< \brief (SDMMC1) Present State Register */
  #define REG_SDMMC1_HC1R                         (0xB0000028U) /**< \brief (SDMMC1) Host Control 1 Register */
  #define REG_SDMMC1_PCR                          (0xB0000029U) /**< \brief (SDMMC1) Power Control Register */
  #define REG_SDMMC1_BGCR                         (0xB000002AU) /**< \brief (SDMMC1) Block Gap Control Register */
  #define REG_SDMMC1_WCR                          (0xB000002BU) /**< \brief (SDMMC1) Wakeup Control Register */
  #define REG_SDMMC1_CCR                          (0xB000002CU) /**< \brief (SDMMC1) Clock Control Register */
  #define REG_SDMMC1_TCR                          (0xB000002EU) /**< \brief (SDMMC1) Timeout Control Register */
  #define REG_SDMMC1_SRR                          (0xB000002FU) /**< \brief (SDMMC1) Software Reset Register */
  #define REG_SDMMC1_NISTR                        (0xB0000030U) /**< \brief (SDMMC1) Normal Interrupt Status Register */
  #define REG_SDMMC1_EISTR                        (0xB0000032U) /**< \brief (SDMMC1) Error Interrupt Status Register */
  #define REG_SDMMC1_NISTER                       (0xB0000034U) /**< \brief (SDMMC1) Normal Interrupt Status Enable Register */
  #define REG_SDMMC1_EISTER                       (0xB0000036U) /**< \brief (SDMMC1) Error Interrupt Status Enable Register */
  #define REG_SDMMC1_NISIER                       (0xB0000038U) /**< \brief (SDMMC1) Normal Interrupt Signal Enable Register */
  #define REG_SDMMC1_EISIER                       (0xB000003AU) /**< \brief (SDMMC1) Error Interrupt Signal Enable Register */
  #define REG_SDMMC1_ACESR                        (0xB000003CU) /**< \brief (SDMMC1) Auto CMD Error Status Register */
  #define REG_SDMMC1_HC2R                         (0xB000003EU) /**< \brief (SDMMC1) Host Control 2 Register */
  #define REG_SDMMC1_CAR0                         (0xB0000040U) /**< \brief (SDMMC1) Capabilities Register */
  #define REG_SDMMC1_CAR1                         (0xB0000044U) /**< \brief (SDMMC1) Capabilities Register */
  #define REG_SDMMC1_MCCAR                        (0xB0000048U) /**< \brief (SDMMC1) Maximum Current Capabilities Register */
  #define REG_SDMMC1_FERACES                      (0xB0000050U) /**< \brief (SDMMC1) Force Event Register for Auto CMD Error Status */
  #define REG_SDMMC1_FEREIS                       (0xB0000052U) /**< \brief (SDMMC1) Force Event Register for Error Interrupt Status */
  #define REG_SDMMC1_AESR                         (0xB0000054U) /**< \brief (SDMMC1) ADMA Error Status Register */
  #define REG_SDMMC1_ASAR0                        (0xB0000058U) /**< \brief (SDMMC1) ADMA System Address Register */
  #define REG_SDMMC1_ASAR1                        (0xB0000058U) /**< \brief (SDMMC1) ADMA System Address Register */
  #define REG_SDMMC1_PVR0                         (0xB0000060U) /**< \brief (SDMMC1) Preset Value Register */
  #define REG_SDMMC1_PVR1                         (0xB0000062U) /**< \brief (SDMMC1) Preset Value Register */
  #define REG_SDMMC1_PVR2                         (0xB0000064U) /**< \brief (SDMMC1) Preset Value Register */
  #define REG_SDMMC1_PVR3                         (0xB0000066U) /**< \brief (SDMMC1) Preset Value Register */
  #define REG_SDMMC1_PVR4                         (0xB0000068U) /**< \brief (SDMMC1) Preset Value Register */
  #define REG_SDMMC1_PVR5                         (0xB000006AU) /**< \brief (SDMMC1) Preset Value Register */
  #define REG_SDMMC1_PVR6                         (0xB000006CU) /**< \brief (SDMMC1) Preset Value Register */
  #define REG_SDMMC1_PVR7                         (0xB000006EU) /**< \brief (SDMMC1) Preset Value Register */
  #define REG_SDMMC1_SBC                          (0xB00000E0U) /**< \brief (SDMMC1) Shared Bus Control Register */
  #define REG_SDMMC1_SISR                         (0xB00000FCU) /**< \brief (SDMMC1) Slot Interrupt Status Register */
  #define REG_SDMMC1_HCVR                         (0xB00000FEU) /**< \brief (SDMMC1) Host Controller Version Register */
  #define REG_SDMMC1_APSR                         (0xB0000200U) /**< \brief (SDMMC1) Additionnal Present State Register */
  #define REG_SDMMC1_MC1R                         (0xB0000204U) /**< \brief (SDMMC1) MMC Control 1 Register */
  #define REG_SDMMC1_MC2R                         (0xB0000205U) /**< \brief (SDMMC1) MMC Control 2 Register */
  #define REG_SDMMC1_ACR                          (0xB0000208U) /**< \brief (SDMMC1) AHB Control Register */
  #define REG_SDMMC1_CC2R                         (0xB000020CU) /**< \brief (SDMMC1) Clock Control 2 Register */
  #define REG_SDMMC1_RTC1R                        (0xB0000210U) /**< \brief (SDMMC1) Retuning Timer Control 1 Register */
  #define REG_SDMMC1_RTC2R                        (0xB0000211U) /**< \brief (SDMMC1) Retuning Timer Control 2 Register */
  #define REG_SDMMC1_RTCVR                        (0xB0000214U) /**< \brief (SDMMC1) Retuning Timer Counter Value Register */
  #define REG_SDMMC1_RTIER                        (0xB0000218U) /**< \brief (SDMMC1) Retuning Timer Interrupt Enable Register */
  #define REG_SDMMC1_RTSR                         (0xB000021CU) /**< \brief (SDMMC1) Retuning Timer Status Register */
  #define REG_SDMMC1_TUNCR                        (0xB0000220U) /**< \brief (SDMMC1) Tuning Control Register */
  #define REG_SDMMC1_TUNSR                        (0xB0000224U) /**< \brief (SDMMC1) Tuning Status Register */
  #define REG_SDMMC1_CACR                         (0xB0000230U) /**< \brief (SDMMC1) Capabilities Control Register */
  #define REG_SDMMC1_CALCR                        (0xB0000240U) /**< \brief (SDMMC1) Calibration Control Register */
  #define REG_SDMMC1_VERSION                      (0xB00002FCU) /**< \brief (SDMMC1) Version Register */
#else
  #define REG_SDMMC1_SSAR        (*(__IO uint32_t) 0xB0000000U) /**< \brief (SDMMC1) SDMA System Address - Argument 2 Register */
  #define REG_SDMMC1_BSR         (*(__IO uint16_t) 0xB0000004U) /**< \brief (SDMMC1) Block Size Register */
  #define REG_SDMMC1_BCR         (*(__IO uint16_t) 0xB0000006U) /**< \brief (SDMMC1) Block Count Register */
  #define REG_SDMMC1_ARG1R       (*(__IO uint32_t) 0xB0000008U) /**< \brief (SDMMC1) Argument 1 Register */
  #define REG_SDMMC1_TMR         (*(__IO uint16_t) 0xB000000CU) /**< \brief (SDMMC1) Transfer Mode Register */
  #define REG_SDMMC1_CR          (*(__IO uint16_t) 0xB000000EU) /**< \brief (SDMMC1) Command Register */
  #define REG_SDMMC1_RR0         (*(__I  uint32_t) 0xB0000010U) /**< \brief (SDMMC1) Response Register */
  #define REG_SDMMC1_RR1         (*(__I  uint32_t) 0xB0000014U) /**< \brief (SDMMC1) Response Register */
  #define REG_SDMMC1_RR2         (*(__I  uint32_t) 0xB0000018U) /**< \brief (SDMMC1) Response Register */
  #define REG_SDMMC1_RR3         (*(__I  uint32_t) 0xB000001CU) /**< \brief (SDMMC1) Response Register */
  #define REG_SDMMC1_BDPR        (*(__IO uint32_t) 0xB0000020U) /**< \brief (SDMMC1) Buffer Data Port Register */
  #define REG_SDMMC1_PSR         (*(__I  uint32_t) 0xB0000024U) /**< \brief (SDMMC1) Present State Register */
  #define REG_SDMMC1_HC1R        (*(__IO uint8_t ) 0xB0000028U) /**< \brief (SDMMC1) Host Control 1 Register */
  #define REG_SDMMC1_PCR         (*(__IO uint8_t ) 0xB0000029U) /**< \brief (SDMMC1) Power Control Register */
  #define REG_SDMMC1_BGCR        (*(__IO uint8_t ) 0xB000002AU) /**< \brief (SDMMC1) Block Gap Control Register */
  #define REG_SDMMC1_WCR         (*(__IO uint8_t ) 0xB000002BU) /**< \brief (SDMMC1) Wakeup Control Register */
  #define REG_SDMMC1_CCR         (*(__IO uint16_t) 0xB000002CU) /**< \brief (SDMMC1) Clock Control Register */
  #define REG_SDMMC1_TCR         (*(__IO uint8_t ) 0xB000002EU) /**< \brief (SDMMC1) Timeout Control Register */
  #define REG_SDMMC1_SRR         (*(__IO uint8_t ) 0xB000002FU) /**< \brief (SDMMC1) Software Reset Register */
  #define REG_SDMMC1_NISTR       (*(__IO uint16_t) 0xB0000030U) /**< \brief (SDMMC1) Normal Interrupt Status Register */
  #define REG_SDMMC1_EISTR       (*(__IO uint16_t) 0xB0000032U) /**< \brief (SDMMC1) Error Interrupt Status Register */
  #define REG_SDMMC1_NISTER      (*(__IO uint16_t) 0xB0000034U) /**< \brief (SDMMC1) Normal Interrupt Status Enable Register */
  #define REG_SDMMC1_EISTER      (*(__IO uint16_t) 0xB0000036U) /**< \brief (SDMMC1) Error Interrupt Status Enable Register */
  #define REG_SDMMC1_NISIER      (*(__IO uint16_t) 0xB0000038U) /**< \brief (SDMMC1) Normal Interrupt Signal Enable Register */
  #define REG_SDMMC1_EISIER      (*(__IO uint16_t) 0xB000003AU) /**< \brief (SDMMC1) Error Interrupt Signal Enable Register */
  #define REG_SDMMC1_ACESR       (*(__IO uint16_t) 0xB000003CU) /**< \brief (SDMMC1) Auto CMD Error Status Register */
  #define REG_SDMMC1_HC2R        (*(__IO uint16_t) 0xB000003EU) /**< \brief (SDMMC1) Host Control 2 Register */
  #define REG_SDMMC1_CAR0        (*(__IO uint32_t) 0xB0000040U) /**< \brief (SDMMC1) Capabilities Register */
  #define REG_SDMMC1_CAR1        (*(__IO uint32_t) 0xB0000044U) /**< \brief (SDMMC1) Capabilities Register */
  #define REG_SDMMC1_MCCAR       (*(__IO uint32_t) 0xB0000048U) /**< \brief (SDMMC1) Maximum Current Capabilities Register */
  #define REG_SDMMC1_FERACES     (*(__O  uint16_t) 0xB0000050U) /**< \brief (SDMMC1) Force Event Register for Auto CMD Error Status */
  #define REG_SDMMC1_FEREIS      (*(__O  uint16_t) 0xB0000052U) /**< \brief (SDMMC1) Force Event Register for Error Interrupt Status */
  #define REG_SDMMC1_AESR        (*(__I  uint8_t ) 0xB0000054U) /**< \brief (SDMMC1) ADMA Error Status Register */
  #define REG_SDMMC1_ASAR0       (*(__IO uint32_t) 0xB0000058U) /**< \brief (SDMMC1) ADMA System Address Register */
  #define REG_SDMMC1_ASAR1       (*(__IO uint32_t) 0xB0000058U) /**< \brief (SDMMC1) ADMA System Address Register */
  #define REG_SDMMC1_PVR0        (*(__IO uint16_t) 0xB0000060U) /**< \brief (SDMMC1) Preset Value Register */
  #define REG_SDMMC1_PVR1        (*(__IO uint16_t) 0xB0000062U) /**< \brief (SDMMC1) Preset Value Register */
  #define REG_SDMMC1_PVR2        (*(__IO uint16_t) 0xB0000064U) /**< \brief (SDMMC1) Preset Value Register */
  #define REG_SDMMC1_PVR3        (*(__IO uint16_t) 0xB0000066U) /**< \brief (SDMMC1) Preset Value Register */
  #define REG_SDMMC1_PVR4        (*(__IO uint16_t) 0xB0000068U) /**< \brief (SDMMC1) Preset Value Register */
  #define REG_SDMMC1_PVR5        (*(__IO uint16_t) 0xB000006AU) /**< \brief (SDMMC1) Preset Value Register */
  #define REG_SDMMC1_PVR6        (*(__IO uint16_t) 0xB000006CU) /**< \brief (SDMMC1) Preset Value Register */
  #define REG_SDMMC1_PVR7        (*(__IO uint16_t) 0xB000006EU) /**< \brief (SDMMC1) Preset Value Register */
  #define REG_SDMMC1_SBC         (*(__IO uint32_t) 0xB00000E0U) /**< \brief (SDMMC1) Shared Bus Control Register */
  #define REG_SDMMC1_SISR        (*(__I  uint16_t) 0xB00000FCU) /**< \brief (SDMMC1) Slot Interrupt Status Register */
  #define REG_SDMMC1_HCVR        (*(__I  uint16_t) 0xB00000FEU) /**< \brief (SDMMC1) Host Controller Version Register */
  #define REG_SDMMC1_APSR        (*(__I  uint32_t) 0xB0000200U) /**< \brief (SDMMC1) Additionnal Present State Register */
  #define REG_SDMMC1_MC1R        (*(__IO uint8_t ) 0xB0000204U) /**< \brief (SDMMC1) MMC Control 1 Register */
  #define REG_SDMMC1_MC2R        (*(__O  uint8_t ) 0xB0000205U) /**< \brief (SDMMC1) MMC Control 2 Register */
  #define REG_SDMMC1_ACR         (*(__IO uint32_t) 0xB0000208U) /**< \brief (SDMMC1) AHB Control Register */
  #define REG_SDMMC1_CC2R        (*(__IO uint32_t) 0xB000020CU) /**< \brief (SDMMC1) Clock Control 2 Register */
  #define REG_SDMMC1_RTC1R       (*(__IO uint8_t ) 0xB0000210U) /**< \brief (SDMMC1) Retuning Timer Control 1 Register */
  #define REG_SDMMC1_RTC2R       (*(__O  uint8_t ) 0xB0000211U) /**< \brief (SDMMC1) Retuning Timer Control 2 Register */
  #define REG_SDMMC1_RTCVR       (*(__IO uint32_t) 0xB0000214U) /**< \brief (SDMMC1) Retuning Timer Counter Value Register */
  #define REG_SDMMC1_RTIER       (*(__IO uint32_t) 0xB0000218U) /**< \brief (SDMMC1) Retuning Timer Interrupt Enable Register */
  #define REG_SDMMC1_RTSR        (*(__IO uint32_t) 0xB000021CU) /**< \brief (SDMMC1) Retuning Timer Status Register */
  #define REG_SDMMC1_TUNCR       (*(__IO uint32_t) 0xB0000220U) /**< \brief (SDMMC1) Tuning Control Register */
  #define REG_SDMMC1_TUNSR       (*(__I  uint32_t) 0xB0000224U) /**< \brief (SDMMC1) Tuning Status Register */
  #define REG_SDMMC1_CACR        (*(__IO uint32_t) 0xB0000230U) /**< \brief (SDMMC1) Capabilities Control Register */
  #define REG_SDMMC1_CALCR       (*(__IO uint32_t) 0xB0000240U) /**< \brief (SDMMC1) Calibration Control Register */
  #define REG_SDMMC1_VERSION     (*(__I  uint32_t) 0xB00002FCU) /**< \brief (SDMMC1) Version Register */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/*@}*/


/* ************************************************************************** */
/*   PERIPHERAL ID DEFINITIONS FOR SAMA5D2 */
/* ************************************************************************** */
/** \addtogroup SAMA5D2_id Peripheral Ids Definitions */
/*@{*/

#define ID_SAIC_FIQ    ( 0) /**< \brief FIQ Interrupt ID (SAIC_FIQ) */
#define ID_PMC         ( 1) /**< \brief System Controller Interrupt (PMC) */
#define ID_ARM_PMU     ( 2) /**< \brief Performance Monitor Unit (PMU) (ARM_PMU) */
#define ID_PIT         ( 3) /**< \brief Periodic Interval Timer Interrupt (PIT) */
#define ID_WDT         ( 4) /**< \brief Watchdog timer Interrupt (WDT) */
#define ID_GMAC        ( 5) /**< \brief Ethernet MAC (GMAC) */
#define ID_XDMAC0      ( 6) /**< \brief DMA Controller 0 (XDMAC0) */
#define ID_XDMAC1      ( 7) /**< \brief DMA Controller 1 (XDMAC1) */
#define ID_ICM         ( 8) /**< \brief Integritry Check Monitor (ICM) */
#define ID_AES         ( 9) /**< \brief Advanced Enion Standard (AES) */
#define ID_AESB        (10) /**< \brief AES bridge (AESB) */
#define ID_TDES        (11) /**< \brief Triple Data Enion Standard (TDES) */
#define ID_SHA         (12) /**< \brief SHA Signature (SHA) */
#define ID_MPDDRC      (13) /**< \brief MPDDR controller (MPDDRC) */
#define ID_MATRIX1     (14) /**< \brief H32MX, 32-bit AHB Matrix (MATRIX1) */
#define ID_MATRIX0     (15) /**< \brief H64MX, 64-bit AHB Matrix (MATRIX0) */
#define ID_SECUMOD     (16) /**< \brief Secure Module (SECUMOD) */
#define ID_HSMC        (17) /**< \brief Multi-bit ECC Interrupt (HSMC) */
#define ID_PIOA        (18) /**< \brief Parallel I/O Controller (PIOA) */
#define ID_FLEXCOM0    (19) /**< \brief FLEXCOM 0 (FLEXCOM0) */
#define ID_FLEXCOM1    (20) /**< \brief FLEXCOM 1 (FLEXCOM1) */
#define ID_FLEXCOM2    (21) /**< \brief FLEXCOM 2 (FLEXCOM2) */
#define ID_FLEXCOM3    (22) /**< \brief FLEXCOM 3 (FLEXCOM3) */
#define ID_FLEXCOM4    (23) /**< \brief FLEXCOM 4 (FLEXCOM4) */
#define ID_UART0       (24) /**< \brief UART 0 (UART0) */
#define ID_UART1       (25) /**< \brief UART 1 (UART1) */
#define ID_UART2       (26) /**< \brief UART 2 (UART2) */
#define ID_UART3       (27) /**< \brief UART 3 (UART3) */
#define ID_UART4       (28) /**< \brief UART 4 (UART4) */
#define ID_TWIHS0      (29) /**< \brief Two-Wire Interface 0 (TWIHS0) */
#define ID_TWIHS1      (30) /**< \brief Two-Wire Interface 1 (TWIHS1) */
#define ID_SDHC0       (31) /**< \brief Ultra High Speed SD Host Controller 0 (SDHC0) */
#define ID_SDHC1       (32) /**< \brief Ultra High Speed SD Host Controller 1 (SDHC1) */
#define ID_SPI0        (33) /**< \brief Serial Peripheral Interface 0 (SPI0) */
#define ID_SPI1        (34) /**< \brief Serial Peripheral Interface 1 (SPI1) */
#define ID_TC0         (35) /**< \brief Timer Counter 0 (ch. 0, 1, 2) (TC0) */
#define ID_TC1         (36) /**< \brief Timer Counter 1 (ch. 3, 4, 5) (TC1) */
#define ID_PWM         (38) /**< \brief Pulse Width Modulation Controller0 (ch. 0, 1, 2, 3) (PWM) */
#define ID_ADC         (40) /**< \brief Touch Screen ADC Controller (ADC) */
#define ID_UHPHS       (41) /**< \brief USB Host High Speed (UHPHS) */
#define ID_UDPHS       (42) /**< \brief USB Device High Speed (UDPHS) */
#define ID_SSC0        (43) /**< \brief Synchronous Serial Controller 0 (SSC0) */
#define ID_SSC1        (44) /**< \brief Synchronous Serial Controller 1 (SSC1) */
#define ID_LCDC        (45) /**< \brief LCD Controller (LCDC) */
#define ID_ISI         (46) /**< \brief Camera Interface (ISI) */
#define ID_TRNG        (47) /**< \brief True Random Number Generator (TRNG) */
#define ID_PDMIC       (48) /**< \brief Pulse Density Modulation Interface Controller (PDMIC) */
#define ID_AIC_IRQ     (49) /**< \brief IRQ Interrupt ID (AIC_IRQ) */
#define ID_SFC         (50) /**< \brief Fuse Controller (SFC) */
#define ID_SECURAM     (51) /**< \brief Secured RAM (SECURAM) */
#define ID_QSPI0       (52) /**< \brief QSPI 0 (QSPI0) */
#define ID_QSPI1       (53) /**< \brief QSPI 1 (QSPI1) */
#define ID_I2SC0       (54) /**< \brief Inter-IC Sound Controller 0 (I2SC0) */
#define ID_I2SC1       (55) /**< \brief Inter-IC Sound Controller 1 (I2SC1) */
#define ID_CAN0_INT0   (56) /**< \brief MCAN 0 Interrupt0 (CAN0_INT0) */
#define ID_CAN1_INT0   (57) /**< \brief MCAN 1 Interrupt0 (CAN1_INT0) */
#define ID_PTC         (58) /**< \brief Peripheral Touch Controller (PTC) */
#define ID_CLASSD      (59) /**< \brief Audio Class D amplifier (CLASSD) */
#define ID_SFR         (60) /**< \brief Special Function Register  (SFR) */
#define ID_L2CC        (63) /**< \brief L2 Cache Controller (L2CC) */
#define ID_CAN0_INT1   (64) /**< \brief MCAN 0 Interrupt1 (CAN0_INT1) */
#define ID_CAN1_INT1   (65) /**< \brief MCAN 1 Interrupt1 (CAN1_INT1) */
#define ID_GMAC_Q1     (66) /**< \brief GMAC Queue 1 Interrupt (GMAC_Q1) */
#define ID_GMAC_Q2     (67) /**< \brief GMAC Queue 2 Interrupt (GMAC_Q2) */
#define ID_PIOB        (68) /**< \brief  (PIOB) */
#define ID_PIOC        (69) /**< \brief  (PIOC) */
#define ID_PIOD        (70) /**< \brief  (PIOD) */
#define ID_SDHC0_TIMER (71) /**< \brief  (SDHC0_TIMER) */
#define ID_RSTC        (73) /**< \brief System Controller Interrupt (RSTC) */
#define ID_RTC         (74) /**< \brief System Controller Interrupt (RTC) */
#define ID_ACC         (75) /**< \brief Analog Comparator (ACC) */
#define ID_RXLP        (76) /**< \brief Uart Low Power (RXLP) */
#define ID_SFRBU       (77) /**< \brief Special Function Register BackUp (SFRBU) */
#define ID_CHIPID      (78) /**< \brief Chip ID (CHIPID) */

#define ID_PERIPH_COUNT (79) /**< \brief Number of peripheral IDs */
/*@}*/

/* ************************************************************************** */
/*   BASE ADDRESS DEFINITIONS FOR SAMA5D2 */
/* ************************************************************************** */
/** \addtogroup SAMA5D2_base Peripheral Base Address Definitions */
/*@{*/

#if (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
#define AXIMX    (0x00600000U) /**< \brief (AXIMX   ) Base Address */
#define L2CC     (0x00A00000U) /**< \brief (L2CC    ) Base Address */
#define SDMMC0   (0xA0000000U) /**< \brief (SDMMC0  ) Base Address */
#define SDMMC1   (0xB0000000U) /**< \brief (SDMMC1  ) Base Address */
#define LCDC     (0xF0000000U) /**< \brief (LCDC    ) Base Address */
#define XDMAC1   (0xF0004000U) /**< \brief (XDMAC1  ) Base Address */
#define ISI      (0xF0008000U) /**< \brief (ISI     ) Base Address */
#define MPDDRC   (0xF000C000U) /**< \brief (MPDDRC  ) Base Address */
#define XDMAC0   (0xF0010000U) /**< \brief (XDMAC0  ) Base Address */
#define PMC      (0xF0014000U) /**< \brief (PMC     ) Base Address */
#define MATRIX0  (0xF0018000U) /**< \brief (MATRIX0 ) Base Address */
#define AESB     (0xF001C000U) /**< \brief (AESB    ) Base Address */
#define QSPI0    (0xF0020000U) /**< \brief (QSPI0   ) Base Address */
#define QSPI1    (0xF0024000U) /**< \brief (QSPI1   ) Base Address */
#define SHA      (0xF0028000U) /**< \brief (SHA     ) Base Address */
#define AES      (0xF002C000U) /**< \brief (AES     ) Base Address */
#define SPI0     (0xF8000000U) /**< \brief (SPI0    ) Base Address */
#define SSC0     (0xF8004000U) /**< \brief (SSC0    ) Base Address */
#define GMAC     (0xF8008000U) /**< \brief (GMAC    ) Base Address */
#define TC0      (0xF800C000U) /**< \brief (TC0     ) Base Address */
#define TC1      (0xF8010000U) /**< \brief (TC1     ) Base Address */
#define HSMC     (0xF8014000U) /**< \brief (HSMC    ) Base Address */
#define PDMIC    (0xF8018000U) /**< \brief (PDMIC   ) Base Address */
#define UART0    (0xF801C000U) /**< \brief (UART0   ) Base Address */
#define UART1    (0xF8020000U) /**< \brief (UART1   ) Base Address */
#define UART2    (0xF8024000U) /**< \brief (UART2   ) Base Address */
#define TWIHS0   (0xF8028000U) /**< \brief (TWIHS0  ) Base Address */
#define PWM      (0xF802C000U) /**< \brief (PWM     ) Base Address */
#define SFR      (0xF8030000U) /**< \brief (SFR     ) Base Address */
#define FLEXCOM0 (0xF8034000U) /**< \brief (FLEXCOM0) Base Address */
#define FLEXCOM1 (0xF8038000U) /**< \brief (FLEXCOM1) Base Address */
#define SAIC     (0xF803C000U) /**< \brief (SAIC    ) Base Address */
#define ICM      (0xF8040000U) /**< \brief (ICM     ) Base Address */
#define RSTC     (0xF8048000U) /**< \brief (RSTC    ) Base Address */
#define SHDWC    (0xF8048010U) /**< \brief (SHDWC   ) Base Address */
#define PIT      (0xF8048030U) /**< \brief (PIT     ) Base Address */
#define WDT      (0xF8048040U) /**< \brief (WDT     ) Base Address */
#define SCKC     (0xF8048050U) /**< \brief (SCKC    ) Base Address */
#define RTC      (0xF80480B0U) /**< \brief (RTC     ) Base Address */
#define ACC      (0xF804A000U) /**< \brief (ACC     ) Base Address */
#define SFC      (0xF804C000U) /**< \brief (SFC     ) Base Address */
#define I2SC0    (0xF8050000U) /**< \brief (I2SC0   ) Base Address */
#define CAN0     (0xF8054000U) /**< \brief (CAN0    ) Base Address */
#define SPI1     (0xFC000000U) /**< \brief (SPI1    ) Base Address */
#define SSC1     (0xFC004000U) /**< \brief (SSC1    ) Base Address */
#define UART3    (0xFC008000U) /**< \brief (UART3   ) Base Address */
#define UART4    (0xFC00C000U) /**< \brief (UART4   ) Base Address */
#define FLEXCOM2 (0xFC010000U) /**< \brief (FLEXCOM2) Base Address */
#define FLEXCOM3 (0xFC014000U) /**< \brief (FLEXCOM3) Base Address */
#define FLEXCOM4 (0xFC018000U) /**< \brief (FLEXCOM4) Base Address */
#define TRNG     (0xFC01C000U) /**< \brief (TRNG    ) Base Address */
#define AIC      (0xFC020000U) /**< \brief (AIC     ) Base Address */
#define TWIHS1   (0xFC028000U) /**< \brief (TWIHS1  ) Base Address */
#define UDPHS    (0xFC02C000U) /**< \brief (UDPHS   ) Base Address */
#define ADC      (0xFC030000U) /**< \brief (ADC     ) Base Address */
#define PIOA     (0xFC038000U) /**< \brief (PIOA    ) Base Address */
#define MATRIX1  (0xFC03C000U) /**< \brief (MATRIX1 ) Base Address */
#define SECUMOD  (0xFC040000U) /**< \brief (SECUMOD ) Base Address */
#define TDES     (0xFC044000U) /**< \brief (TDES    ) Base Address */
#define CLASSD   (0xFC048000U) /**< \brief (CLASSD  ) Base Address */
#define I2SC1    (0xFC04C000U) /**< \brief (I2SC1   ) Base Address */
#define CAN1     (0xFC050000U) /**< \brief (CAN1    ) Base Address */
#define CHIPID   (0xFC069000U) /**< \brief (CHIPID  ) Base Address */
#else
#define AXIMX    ((Aximx    *)0x00600000U) /**< \brief (AXIMX   ) Base Address */
#define L2CC     ((L2cc     *)0x00A00000U) /**< \brief (L2CC    ) Base Address */
#define SDMMC0   ((Sdmmc    *)0xA0000000U) /**< \brief (SDMMC0  ) Base Address */
#define SDMMC1   ((Sdmmc    *)0xB0000000U) /**< \brief (SDMMC1  ) Base Address */
#define LCDC     ((Lcdc     *)0xF0000000U) /**< \brief (LCDC    ) Base Address */
#define XDMAC1   ((Xdmac    *)0xF0004000U) /**< \brief (XDMAC1  ) Base Address */
#define ISI      ((Isi      *)0xF0008000U) /**< \brief (ISI     ) Base Address */
#define MPDDRC   ((Mpddrc   *)0xF000C000U) /**< \brief (MPDDRC  ) Base Address */
#define XDMAC0   ((Xdmac    *)0xF0010000U) /**< \brief (XDMAC0  ) Base Address */
#define PMC      ((Pmc      *)0xF0014000U) /**< \brief (PMC     ) Base Address */
#define MATRIX0  ((Matrix   *)0xF0018000U) /**< \brief (MATRIX0 ) Base Address */
#define AESB     ((Aesb     *)0xF001C000U) /**< \brief (AESB    ) Base Address */
#define QSPI0    ((Qspi     *)0xF0020000U) /**< \brief (QSPI0   ) Base Address */
#define QSPI1    ((Qspi     *)0xF0024000U) /**< \brief (QSPI1   ) Base Address */
#define SHA      ((Sha      *)0xF0028000U) /**< \brief (SHA     ) Base Address */
#define AES      ((Aes      *)0xF002C000U) /**< \brief (AES     ) Base Address */
#define SPI0     ((Spi      *)0xF8000000U) /**< \brief (SPI0    ) Base Address */
#define SSC0     ((Ssc      *)0xF8004000U) /**< \brief (SSC0    ) Base Address */
#define GMAC     ((Gmac     *)0xF8008000U) /**< \brief (GMAC    ) Base Address */
#define TC0      ((Tc       *)0xF800C000U) /**< \brief (TC0     ) Base Address */
#define TC1      ((Tc       *)0xF8010000U) /**< \brief (TC1     ) Base Address */
#define HSMC     ((Smc      *)0xF8014000U) /**< \brief (HSMC    ) Base Address */
#define PDMIC    ((Pdmic    *)0xF8018000U) /**< \brief (PDMIC   ) Base Address */
#define UART0    ((Uart     *)0xF801C000U) /**< \brief (UART0   ) Base Address */
#define UART1    ((Uart     *)0xF8020000U) /**< \brief (UART1   ) Base Address */
#define UART2    ((Uart     *)0xF8024000U) /**< \brief (UART2   ) Base Address */
#define TWIHS0   ((Twihs    *)0xF8028000U) /**< \brief (TWIHS0  ) Base Address */
#define PWM      ((Pwm      *)0xF802C000U) /**< \brief (PWM     ) Base Address */
#define SFR      ((Sfr      *)0xF8030000U) /**< \brief (SFR     ) Base Address */
#define FLEXCOM0 ((Flexcom  *)0xF8034000U) /**< \brief (FLEXCOM0) Base Address */
#define FLEXCOM1 ((Flexcom  *)0xF8038000U) /**< \brief (FLEXCOM1) Base Address */
#define SAIC     ((Aic      *)0xF803C000U) /**< \brief (SAIC    ) Base Address */
#define ICM      ((Icm      *)0xF8040000U) /**< \brief (ICM     ) Base Address */
#define RSTC     ((Rstc     *)0xF8048000U) /**< \brief (RSTC    ) Base Address */
#define SHDWC    ((Shdwc    *)0xF8048010U) /**< \brief (SHDWC   ) Base Address */
#define PIT      ((Pit      *)0xF8048030U) /**< \brief (PIT     ) Base Address */
#define WDT      ((Wdt      *)0xF8048040U) /**< \brief (WDT     ) Base Address */
#define SCKC     ((Sckc     *)0xF8048050U) /**< \brief (SCKC    ) Base Address */
#define RTC      ((Rtc      *)0xF80480B0U) /**< \brief (RTC     ) Base Address */
#define ACC      ((Acc      *)0xF804A000U) /**< \brief (ACC     ) Base Address */
#define SFC      ((Sfc      *)0xF804C000U) /**< \brief (SFC     ) Base Address */
#define I2SC0    ((I2sc     *)0xF8050000U) /**< \brief (I2SC0   ) Base Address */
#define CAN0     ((Can      *)0xF8054000U) /**< \brief (CAN0    ) Base Address */
#define SPI1     ((Spi      *)0xFC000000U) /**< \brief (SPI1    ) Base Address */
#define SSC1     ((Ssc      *)0xFC004000U) /**< \brief (SSC1    ) Base Address */
#define UART3    ((Uart     *)0xFC008000U) /**< \brief (UART3   ) Base Address */
#define UART4    ((Uart     *)0xFC00C000U) /**< \brief (UART4   ) Base Address */
#define FLEXCOM2 ((Flexcom  *)0xFC010000U) /**< \brief (FLEXCOM2) Base Address */
#define FLEXCOM3 ((Flexcom  *)0xFC014000U) /**< \brief (FLEXCOM3) Base Address */
#define FLEXCOM4 ((Flexcom  *)0xFC018000U) /**< \brief (FLEXCOM4) Base Address */
#define TRNG     ((Trng     *)0xFC01C000U) /**< \brief (TRNG    ) Base Address */
#define AIC      ((Aic      *)0xFC020000U) /**< \brief (AIC     ) Base Address */
#define TWIHS1   ((Twihs    *)0xFC028000U) /**< \brief (TWIHS1  ) Base Address */
#define UDPHS    ((Udphs    *)0xFC02C000U) /**< \brief (UDPHS   ) Base Address */
#define ADC      ((Adc      *)0xFC030000U) /**< \brief (ADC     ) Base Address */
#define PIOA     ((Pio      *)0xFC038000U) /**< \brief (PIOA    ) Base Address */
#define MATRIX1  ((Matrix   *)0xFC03C000U) /**< \brief (MATRIX1 ) Base Address */
#define SECUMOD  ((Secumod  *)0xFC040000U) /**< \brief (SECUMOD ) Base Address */
#define TDES     ((Tdes     *)0xFC044000U) /**< \brief (TDES    ) Base Address */
#define CLASSD   ((Classd   *)0xFC048000U) /**< \brief (CLASSD  ) Base Address */
#define I2SC1    ((I2sc     *)0xFC04C000U) /**< \brief (I2SC1   ) Base Address */
#define CAN1     ((Can      *)0xFC050000U) /**< \brief (CAN1    ) Base Address */
#define CHIPID   ((Chipid   *)0xFC069000U) /**< \brief (CHIPID  ) Base Address */
#endif /* (defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
/*@}*/

/* ************************************************************************** */
/*   PIO DEFINITIONS FOR SAMA5D2 */
/* ************************************************************************** */
/** \addtogroup SAMA5D2_pio Peripheral Pio Definitions */
/*@{*/

#define PIO_PA0                (1u << 0)  /**< \brief Pin Controlled by PA0 */
#define PIO_PA1                (1u << 1)  /**< \brief Pin Controlled by PA1 */
#define PIO_PA2                (1u << 2)  /**< \brief Pin Controlled by PA2 */
#define PIO_PA3                (1u << 3)  /**< \brief Pin Controlled by PA3 */
#define PIO_PA4                (1u << 4)  /**< \brief Pin Controlled by PA4 */
#define PIO_PA5                (1u << 5)  /**< \brief Pin Controlled by PA5 */
#define PIO_PA6                (1u << 6)  /**< \brief Pin Controlled by PA6 */
#define PIO_PA7                (1u << 7)  /**< \brief Pin Controlled by PA7 */
#define PIO_PA8                (1u << 8)  /**< \brief Pin Controlled by PA8 */
#define PIO_PA9                (1u << 9)  /**< \brief Pin Controlled by PA9 */
#define PIO_PA10               (1u << 10) /**< \brief Pin Controlled by PA10 */
#define PIO_PA11               (1u << 11) /**< \brief Pin Controlled by PA11 */
#define PIO_PA12               (1u << 12) /**< \brief Pin Controlled by PA12 */
#define PIO_PA13               (1u << 13) /**< \brief Pin Controlled by PA13 */
#define PIO_PA14               (1u << 14) /**< \brief Pin Controlled by PA14 */
#define PIO_PA15               (1u << 15) /**< \brief Pin Controlled by PA15 */
#define PIO_PA16               (1u << 16) /**< \brief Pin Controlled by PA16 */
#define PIO_PA17               (1u << 17) /**< \brief Pin Controlled by PA17 */
#define PIO_PA18               (1u << 18) /**< \brief Pin Controlled by PA18 */
#define PIO_PA19               (1u << 19) /**< \brief Pin Controlled by PA19 */
#define PIO_PA20               (1u << 20) /**< \brief Pin Controlled by PA20 */
#define PIO_PA21               (1u << 21) /**< \brief Pin Controlled by PA21 */
#define PIO_PA22               (1u << 22) /**< \brief Pin Controlled by PA22 */
#define PIO_PA23               (1u << 23) /**< \brief Pin Controlled by PA23 */
#define PIO_PA24               (1u << 24) /**< \brief Pin Controlled by PA24 */
#define PIO_PA25               (1u << 25) /**< \brief Pin Controlled by PA25 */
#define PIO_PA26               (1u << 26) /**< \brief Pin Controlled by PA26 */
#define PIO_PA27               (1u << 27) /**< \brief Pin Controlled by PA27 */
#define PIO_PA28               (1u << 28) /**< \brief Pin Controlled by PA28 */
#define PIO_PA29               (1u << 29) /**< \brief Pin Controlled by PA29 */
#define PIO_PA30               (1u << 30) /**< \brief Pin Controlled by PA30 */
#define PIO_PA31               (1u << 31) /**< \brief Pin Controlled by PA31 */
#define PIO_PB0                (1u << 0)  /**< \brief Pin Controlled by PB0 */
#define PIO_PB1                (1u << 1)  /**< \brief Pin Controlled by PB1 */
#define PIO_PB2                (1u << 2)  /**< \brief Pin Controlled by PB2 */
#define PIO_PB3                (1u << 3)  /**< \brief Pin Controlled by PB3 */
#define PIO_PB4                (1u << 4)  /**< \brief Pin Controlled by PB4 */
#define PIO_PB5                (1u << 5)  /**< \brief Pin Controlled by PB5 */
#define PIO_PB6                (1u << 6)  /**< \brief Pin Controlled by PB6 */
#define PIO_PB7                (1u << 7)  /**< \brief Pin Controlled by PB7 */
#define PIO_PB8                (1u << 8)  /**< \brief Pin Controlled by PB8 */
#define PIO_PB9                (1u << 9)  /**< \brief Pin Controlled by PB9 */
#define PIO_PB10               (1u << 10) /**< \brief Pin Controlled by PB10 */
#define PIO_PB11               (1u << 11) /**< \brief Pin Controlled by PB11 */
#define PIO_PB12               (1u << 12) /**< \brief Pin Controlled by PB12 */
#define PIO_PB13               (1u << 13) /**< \brief Pin Controlled by PB13 */
#define PIO_PB14               (1u << 14) /**< \brief Pin Controlled by PB14 */
#define PIO_PB15               (1u << 15) /**< \brief Pin Controlled by PB15 */
#define PIO_PB16               (1u << 16) /**< \brief Pin Controlled by PB16 */
#define PIO_PB17               (1u << 17) /**< \brief Pin Controlled by PB17 */
#define PIO_PB18               (1u << 18) /**< \brief Pin Controlled by PB18 */
#define PIO_PB19               (1u << 19) /**< \brief Pin Controlled by PB19 */
#define PIO_PB20               (1u << 20) /**< \brief Pin Controlled by PB20 */
#define PIO_PB21               (1u << 21) /**< \brief Pin Controlled by PB21 */
#define PIO_PB22               (1u << 22) /**< \brief Pin Controlled by PB22 */
#define PIO_PB23               (1u << 23) /**< \brief Pin Controlled by PB23 */
#define PIO_PB24               (1u << 24) /**< \brief Pin Controlled by PB24 */
#define PIO_PB25               (1u << 25) /**< \brief Pin Controlled by PB25 */
#define PIO_PB26               (1u << 26) /**< \brief Pin Controlled by PB26 */
#define PIO_PB27               (1u << 27) /**< \brief Pin Controlled by PB27 */
#define PIO_PB28               (1u << 28) /**< \brief Pin Controlled by PB28 */
#define PIO_PB29               (1u << 29) /**< \brief Pin Controlled by PB29 */
#define PIO_PB30               (1u << 30) /**< \brief Pin Controlled by PB30 */
#define PIO_PB31               (1u << 31) /**< \brief Pin Controlled by PB31 */
#define PIO_PC0                (1u << 0)  /**< \brief Pin Controlled by PC0 */
#define PIO_PC1                (1u << 1)  /**< \brief Pin Controlled by PC1 */
#define PIO_PC2                (1u << 2)  /**< \brief Pin Controlled by PC2 */
#define PIO_PC3                (1u << 3)  /**< \brief Pin Controlled by PC3 */
#define PIO_PC4                (1u << 4)  /**< \brief Pin Controlled by PC4 */
#define PIO_PC5                (1u << 5)  /**< \brief Pin Controlled by PC5 */
#define PIO_PC6                (1u << 6)  /**< \brief Pin Controlled by PC6 */
#define PIO_PC7                (1u << 7)  /**< \brief Pin Controlled by PC7 */
#define PIO_PC8                (1u << 8)  /**< \brief Pin Controlled by PC8 */
#define PIO_PC9                (1u << 9)  /**< \brief Pin Controlled by PC9 */
#define PIO_PC10               (1u << 10) /**< \brief Pin Controlled by PC10 */
#define PIO_PC11               (1u << 11) /**< \brief Pin Controlled by PC11 */
#define PIO_PC12               (1u << 12) /**< \brief Pin Controlled by PC12 */
#define PIO_PC13               (1u << 13) /**< \brief Pin Controlled by PC13 */
#define PIO_PC14               (1u << 14) /**< \brief Pin Controlled by PC14 */
#define PIO_PC15               (1u << 15) /**< \brief Pin Controlled by PC15 */
#define PIO_PC16               (1u << 16) /**< \brief Pin Controlled by PC16 */
#define PIO_PC17               (1u << 17) /**< \brief Pin Controlled by PC17 */
#define PIO_PC18               (1u << 18) /**< \brief Pin Controlled by PC18 */
#define PIO_PC19               (1u << 19) /**< \brief Pin Controlled by PC19 */
#define PIO_PC20               (1u << 20) /**< \brief Pin Controlled by PC20 */
#define PIO_PC21               (1u << 21) /**< \brief Pin Controlled by PC21 */
#define PIO_PC22               (1u << 22) /**< \brief Pin Controlled by PC22 */
#define PIO_PC23               (1u << 23) /**< \brief Pin Controlled by PC23 */
#define PIO_PC24               (1u << 24) /**< \brief Pin Controlled by PC24 */
#define PIO_PC25               (1u << 25) /**< \brief Pin Controlled by PC25 */
#define PIO_PC26               (1u << 26) /**< \brief Pin Controlled by PC26 */
#define PIO_PC27               (1u << 27) /**< \brief Pin Controlled by PC27 */
#define PIO_PC28               (1u << 28) /**< \brief Pin Controlled by PC28 */
#define PIO_PC29               (1u << 29) /**< \brief Pin Controlled by PC29 */
#define PIO_PC30               (1u << 30) /**< \brief Pin Controlled by PC30 */
#define PIO_PC31               (1u << 31) /**< \brief Pin Controlled by PC31 */
#define PIO_PD0                (1u << 0)  /**< \brief Pin Controlled by PD0 */
#define PIO_PD1                (1u << 1)  /**< \brief Pin Controlled by PD1 */
#define PIO_PD2                (1u << 2)  /**< \brief Pin Controlled by PD2 */
#define PIO_PD3                (1u << 3)  /**< \brief Pin Controlled by PD3 */
#define PIO_PD4                (1u << 4)  /**< \brief Pin Controlled by PD4 */
#define PIO_PD5                (1u << 5)  /**< \brief Pin Controlled by PD5 */
#define PIO_PD6                (1u << 6)  /**< \brief Pin Controlled by PD6 */
#define PIO_PD7                (1u << 7)  /**< \brief Pin Controlled by PD7 */
#define PIO_PD8                (1u << 8)  /**< \brief Pin Controlled by PD8 */
#define PIO_PD9                (1u << 9)  /**< \brief Pin Controlled by PD9 */
#define PIO_PD10               (1u << 10) /**< \brief Pin Controlled by PD10 */
#define PIO_PD11               (1u << 11) /**< \brief Pin Controlled by PD11 */
#define PIO_PD12               (1u << 12) /**< \brief Pin Controlled by PD12 */
#define PIO_PD13               (1u << 13) /**< \brief Pin Controlled by PD13 */
#define PIO_PD14               (1u << 14) /**< \brief Pin Controlled by PD14 */
#define PIO_PD15               (1u << 15) /**< \brief Pin Controlled by PD15 */
#define PIO_PD16               (1u << 16) /**< \brief Pin Controlled by PD16 */
#define PIO_PD17               (1u << 17) /**< \brief Pin Controlled by PD17 */
#define PIO_PD18               (1u << 18) /**< \brief Pin Controlled by PD18 */
#define PIO_PD19               (1u << 19) /**< \brief Pin Controlled by PD19 */
#define PIO_PD20               (1u << 20) /**< \brief Pin Controlled by PD20 */
#define PIO_PD21               (1u << 21) /**< \brief Pin Controlled by PD21 */
#define PIO_PD22               (1u << 22) /**< \brief Pin Controlled by PD22 */
#define PIO_PD23               (1u << 23) /**< \brief Pin Controlled by PD23 */
#define PIO_PD24               (1u << 24) /**< \brief Pin Controlled by PD24 */
#define PIO_PD25               (1u << 25) /**< \brief Pin Controlled by PD25 */
#define PIO_PD26               (1u << 26) /**< \brief Pin Controlled by PD26 */
#define PIO_PD27               (1u << 27) /**< \brief Pin Controlled by PD27 */
#define PIO_PD28               (1u << 28) /**< \brief Pin Controlled by PD28 */
#define PIO_PD29               (1u << 29) /**< \brief Pin Controlled by PD29 */
#define PIO_PD30               (1u << 30) /**< \brief Pin Controlled by PD30 */
#define PIO_PD31               (1u << 31) /**< \brief Pin Controlled by PD31 */
/* ========== Pio definition for ADC peripheral ========== */
#define PIO_PD19X1_AD0         (1u << 19) /**< \brief Adc signal: AD0 */
#define PIO_PD20X1_AD1         (1u << 20) /**< \brief Adc signal: AD1 */
#define PIO_PD29X1_AD10        (1u << 29) /**< \brief Adc signal: AD10 */
#define PIO_PD30X1_AD11        (1u << 30) /**< \brief Adc signal: AD11 */
#define PIO_PD21X1_AD2         (1u << 21) /**< \brief Adc signal: AD2 */
#define PIO_PD22X1_AD3         (1u << 22) /**< \brief Adc signal: AD3 */
#define PIO_PD23X1_AD4         (1u << 23) /**< \brief Adc signal: AD4 */
#define PIO_PD24X1_AD5         (1u << 24) /**< \brief Adc signal: AD5 */
#define PIO_PD25X1_AD6         (1u << 25) /**< \brief Adc signal: AD6 */
#define PIO_PD26X1_AD7         (1u << 26) /**< \brief Adc signal: AD7 */
#define PIO_PD27X1_AD8         (1u << 27) /**< \brief Adc signal: AD8 */
#define PIO_PD28X1_AD9         (1u << 28) /**< \brief Adc signal: AD9 */
#define PIO_PD31A_ADTRG        (1u << 31) /**< \brief Adc signal: ADTRG */
/* ========== Pio definition for AIC peripheral ========== */
#define PIO_PB4C_FIQ           (1u << 4)  /**< \brief Aic signal: FIQ */
#define PIO_PC8C_FIQ           (1u << 8)  /**< \brief Aic signal: FIQ */
#define PIO_PC9A_FIQ           (1u << 9)  /**< \brief Aic signal: FIQ */
#define PIO_PD3B_FIQ           (1u << 3)  /**< \brief Aic signal: FIQ */
#define PIO_PA12B_IRQ          (1u << 12) /**< \brief Aic signal: IRQ */
#define PIO_PA21A_IRQ          (1u << 21) /**< \brief Aic signal: IRQ */
#define PIO_PB3C_IRQ           (1u << 3)  /**< \brief Aic signal: IRQ */
#define PIO_PD31C_IRQ          (1u << 31) /**< \brief Aic signal: IRQ */
/* ========== Pio definition for ARM peripheral ========== */
#define PIO_PA26C_NTRST        (1u << 26) /**< \brief Arm signal: NTRST */
#define PIO_PD10A_NTRST        (1u << 10) /**< \brief Arm signal: NTRST */
#define PIO_PD18A_NTRST        (1u << 18) /**< \brief Arm signal: NTRST */
#define PIO_PD31B_NTRST        (1u << 31) /**< \brief Arm signal: NTRST */
#define PIO_PA22C_TCK          (1u << 22) /**< \brief Arm signal: TCK */
#define PIO_PD6A_TCK           (1u << 6)  /**< \brief Arm signal: TCK */
#define PIO_PD14A_TCK          (1u << 14) /**< \brief Arm signal: TCK */
#define PIO_PD27B_TCK          (1u << 27) /**< \brief Arm signal: TCK */
#define PIO_PA23C_TDI          (1u << 23) /**< \brief Arm signal: TDI */
#define PIO_PD7A_TDI           (1u << 7)  /**< \brief Arm signal: TDI */
#define PIO_PD15A_TDI          (1u << 15) /**< \brief Arm signal: TDI */
#define PIO_PD28B_TDI          (1u << 28) /**< \brief Arm signal: TDI */
#define PIO_PA24C_TDO          (1u << 24) /**< \brief Arm signal: TDO */
#define PIO_PD8A_TDO           (1u << 8)  /**< \brief Arm signal: TDO */
#define PIO_PD16A_TDO          (1u << 16) /**< \brief Arm signal: TDO */
#define PIO_PD29B_TDO          (1u << 29) /**< \brief Arm signal: TDO */
#define PIO_PA25C_TMS          (1u << 25) /**< \brief Arm signal: TMS */
#define PIO_PD9A_TMS           (1u << 9)  /**< \brief Arm signal: TMS */
#define PIO_PD17A_TMS          (1u << 17) /**< \brief Arm signal: TMS */
#define PIO_PD30B_TMS          (1u << 30) /**< \brief Arm signal: TMS */
/* ========== Pio definition for CAN0 peripheral ========== */
#define PIO_PC2C_CANRX0        (1u << 2)  /**< \brief Can0 signal: CANRX0 */
#define PIO_PC11E_CANRX0       (1u << 11) /**< \brief Can0 signal: CANRX0 */
#define PIO_PC1C_CANTX0        (1u << 1)  /**< \brief Can0 signal: CANTX0 */
#define PIO_PC10E_CANTX0       (1u << 10) /**< \brief Can0 signal: CANTX0 */
/* ========== Pio definition for CAN1 peripheral ========== */
#define PIO_PC27D_CANRX1       (1u << 27) /**< \brief Can1 signal: CANRX1 */
#define PIO_PC26D_CANTX1       (1u << 26) /**< \brief Can1 signal: CANTX1 */
/* ========== Pio definition for CLASSD peripheral ========== */
#define PIO_PA31F_UPWMNLN      (1u << 31) /**< \brief Classd signal: UPWMNLN */
#define PIO_PA30F_UPWMNLP      (1u << 30) /**< \brief Classd signal: UPWMNLP */
#define PIO_PB4F_UPWMNRN       (1u << 4)  /**< \brief Classd signal: UPWMNRN */
#define PIO_PB3F_UPWMNRP       (1u << 3)  /**< \brief Classd signal: UPWMNRP */
#define PIO_PA29F_UPWMPLTPWMLN (1u << 29) /**< \brief Classd signal: UPWMPLTPWMLN */
#define PIO_PA28F_UPWMPLTPWMLP (1u << 28) /**< \brief Classd signal: UPWMPLTPWMLP */
#define PIO_PB2F_UPWMPRTPWMRN  (1u << 2)  /**< \brief Classd signal: UPWMPRTPWMRN */
#define PIO_PB1F_UPWMPRTPWMRP  (1u << 1)  /**< \brief Classd signal: UPWMPRTPWMRP */
/* ========== Pio definition for EBI peripheral ========== */
#define PIO_PB11B_A0           (1u << 11) /**< \brief Ebi signal: A0/NBS0 */
#define PIO_PB11B_NBS0         (1u << 11) /**< \brief Ebi signal: A0/NBS0 */
#define PIO_PC11F_A0           (1u << 11) /**< \brief Ebi signal: A0/NBS0 */
#define PIO_PC11F_NBS0         (1u << 11) /**< \brief Ebi signal: A0/NBS0 */
#define PIO_PB12B_A1           (1u << 12) /**< \brief Ebi signal: A1 */
#define PIO_PC12F_A1           (1u << 12) /**< \brief Ebi signal: A1 */
#define PIO_PB21B_A10          (1u << 21) /**< \brief Ebi signal: A10 */
#define PIO_PC21F_A10          (1u << 21) /**< \brief Ebi signal: A10 */
#define PIO_PB22B_A11          (1u << 22) /**< \brief Ebi signal: A11 */
#define PIO_PC22F_A11          (1u << 22) /**< \brief Ebi signal: A11 */
#define PIO_PB23B_A12          (1u << 23) /**< \brief Ebi signal: A12 */
#define PIO_PC23F_A12          (1u << 23) /**< \brief Ebi signal: A12 */
#define PIO_PB24B_A13          (1u << 24) /**< \brief Ebi signal: A13 */
#define PIO_PC24F_A13          (1u << 24) /**< \brief Ebi signal: A13 */
#define PIO_PB25B_A14          (1u << 25) /**< \brief Ebi signal: A14 */
#define PIO_PC25F_A14          (1u << 25) /**< \brief Ebi signal: A14 */
#define PIO_PB26B_A15          (1u << 26) /**< \brief Ebi signal: A15 */
#define PIO_PC26F_A15          (1u << 26) /**< \brief Ebi signal: A15 */
#define PIO_PB27B_A16          (1u << 27) /**< \brief Ebi signal: A16 */
#define PIO_PC27F_A16          (1u << 27) /**< \brief Ebi signal: A16 */
#define PIO_PB28B_A17          (1u << 28) /**< \brief Ebi signal: A17 */
#define PIO_PC28F_A17          (1u << 28) /**< \brief Ebi signal: A17 */
#define PIO_PB29B_A18          (1u << 29) /**< \brief Ebi signal: A18 */
#define PIO_PC29F_A18          (1u << 29) /**< \brief Ebi signal: A18 */
#define PIO_PB30B_A19          (1u << 30) /**< \brief Ebi signal: A19 */
#define PIO_PC30F_A19          (1u << 30) /**< \brief Ebi signal: A19 */
#define PIO_PB13B_A2           (1u << 13) /**< \brief Ebi signal: A2 */
#define PIO_PC13F_A2           (1u << 13) /**< \brief Ebi signal: A2 */
#define PIO_PB31B_A20          (1u << 31) /**< \brief Ebi signal: A20 */
#define PIO_PC31F_A20          (1u << 31) /**< \brief Ebi signal: A20 */
#define PIO_PA10F_A21          (1u << 10) /**< \brief Ebi signal: A21/NANDALE */
#define PIO_PA10F_NANDALE      (1u << 10) /**< \brief Ebi signal: A21/NANDALE */
#define PIO_PB0B_A21           (1u << 0)  /**< \brief Ebi signal: A21/NANDALE */
#define PIO_PB0B_NANDALE       (1u << 0)  /**< \brief Ebi signal: A21/NANDALE */
#define PIO_PA11F_A22          (1u << 11) /**< \brief Ebi signal: A22/NANDCLE */
#define PIO_PA11F_NANDCLE      (1u << 11) /**< \brief Ebi signal: A22/NANDCLE */
#define PIO_PB1B_A22           (1u << 1)  /**< \brief Ebi signal: A22/NANDCLE */
#define PIO_PB1B_NANDCLE       (1u << 1)  /**< \brief Ebi signal: A22/NANDCLE */
#define PIO_PC0B_A23           (1u << 0)  /**< \brief Ebi signal: A23 */
#define PIO_PD0F_A23           (1u << 0)  /**< \brief Ebi signal: A23 */
#define PIO_PC1B_A24           (1u << 1)  /**< \brief Ebi signal: A24 */
#define PIO_PD1F_A24           (1u << 1)  /**< \brief Ebi signal: A24 */
#define PIO_PC2B_A25           (1u << 2)  /**< \brief Ebi signal: A25 */
#define PIO_PD2F_A25           (1u << 2)  /**< \brief Ebi signal: A25 */
#define PIO_PB14B_A3           (1u << 14) /**< \brief Ebi signal: A3 */
#define PIO_PC14F_A3           (1u << 14) /**< \brief Ebi signal: A3 */
#define PIO_PB15B_A4           (1u << 15) /**< \brief Ebi signal: A4 */
#define PIO_PC15F_A4           (1u << 15) /**< \brief Ebi signal: A4 */
#define PIO_PB16B_A5           (1u << 16) /**< \brief Ebi signal: A5 */
#define PIO_PC16F_A5           (1u << 16) /**< \brief Ebi signal: A5 */
#define PIO_PB17B_A6           (1u << 17) /**< \brief Ebi signal: A6 */
#define PIO_PC17F_A6           (1u << 17) /**< \brief Ebi signal: A6 */
#define PIO_PB18B_A7           (1u << 18) /**< \brief Ebi signal: A7 */
#define PIO_PC18F_A7           (1u << 18) /**< \brief Ebi signal: A7 */
#define PIO_PB19B_A8           (1u << 19) /**< \brief Ebi signal: A8 */
#define PIO_PC19F_A8           (1u << 19) /**< \brief Ebi signal: A8 */
#define PIO_PB20B_A9           (1u << 20) /**< \brief Ebi signal: A9 */
#define PIO_PC20F_A9           (1u << 20) /**< \brief Ebi signal: A9 */
#define PIO_PA0F_D0            (1u << 0)  /**< \brief Ebi signal: D0 */
#define PIO_PA22B_D0           (1u << 22) /**< \brief Ebi signal: D0 */
#define PIO_PA1F_D1            (1u << 1)  /**< \brief Ebi signal: D1 */
#define PIO_PA23B_D1           (1u << 23) /**< \brief Ebi signal: D1 */
#define PIO_PA15F_D10          (1u << 15) /**< \brief Ebi signal: D10 */
#define PIO_PB5B_D10           (1u << 5)  /**< \brief Ebi signal: D10 */
#define PIO_PA16F_D11          (1u << 16) /**< \brief Ebi signal: D11 */
#define PIO_PB6B_D11           (1u << 6)  /**< \brief Ebi signal: D11 */
#define PIO_PA17F_D12          (1u << 17) /**< \brief Ebi signal: D12 */
#define PIO_PB7B_D12           (1u << 7)  /**< \brief Ebi signal: D12 */
#define PIO_PA18F_D13          (1u << 18) /**< \brief Ebi signal: D13 */
#define PIO_PB8B_D13           (1u << 8)  /**< \brief Ebi signal: D13 */
#define PIO_PA19F_D14          (1u << 19) /**< \brief Ebi signal: D14 */
#define PIO_PB9B_D14           (1u << 9)  /**< \brief Ebi signal: D14 */
#define PIO_PA20F_D15          (1u << 20) /**< \brief Ebi signal: D15 */
#define PIO_PB10B_D15          (1u << 10) /**< \brief Ebi signal: D15 */
#define PIO_PA2F_D2            (1u << 2)  /**< \brief Ebi signal: D2 */
#define PIO_PA24B_D2           (1u << 24) /**< \brief Ebi signal: D2 */
#define PIO_PA3F_D3            (1u << 3)  /**< \brief Ebi signal: D3 */
#define PIO_PA25B_D3           (1u << 25) /**< \brief Ebi signal: D3 */
#define PIO_PA4F_D4            (1u << 4)  /**< \brief Ebi signal: D4 */
#define PIO_PA26B_D4           (1u << 26) /**< \brief Ebi signal: D4 */
#define PIO_PA5F_D5            (1u << 5)  /**< \brief Ebi signal: D5 */
#define PIO_PA27B_D5           (1u << 27) /**< \brief Ebi signal: D5 */
#define PIO_PA6F_D6            (1u << 6)  /**< \brief Ebi signal: D6 */
#define PIO_PA28B_D6           (1u << 28) /**< \brief Ebi signal: D6 */
#define PIO_PA7F_D7            (1u << 7)  /**< \brief Ebi signal: D7 */
#define PIO_PA29B_D7           (1u << 29) /**< \brief Ebi signal: D7 */
#define PIO_PA13F_D8           (1u << 13) /**< \brief Ebi signal: D8 */
#define PIO_PB3B_D8            (1u << 3)  /**< \brief Ebi signal: D8 */
#define PIO_PA14F_D9           (1u << 14) /**< \brief Ebi signal: D9 */
#define PIO_PB4B_D9            (1u << 4)  /**< \brief Ebi signal: D9 */
#define PIO_PA21F_NANDRDY      (1u << 21) /**< \brief Ebi signal: NANDRDY */
#define PIO_PC8B_NANDRDY       (1u << 8)  /**< \brief Ebi signal: NANDRDY */
#define PIO_PD8F_NANDRDY       (1u << 8)  /**< \brief Ebi signal: NANDRDY */
#define PIO_PC5B_NCS0          (1u << 5)  /**< \brief Ebi signal: NCS0 */
#define PIO_PD4F_NCS0          (1u << 4)  /**< \brief Ebi signal: NCS0 */
#define PIO_PC6B_NCS1          (1u << 6)  /**< \brief Ebi signal: NCS1 */
#define PIO_PD5F_NCS1          (1u << 5)  /**< \brief Ebi signal: NCS1 */
#define PIO_PC7B_NCS2          (1u << 7)  /**< \brief Ebi signal: NCS2 */
#define PIO_PD6F_NCS2          (1u << 6)  /**< \brief Ebi signal: NCS2 */
#define PIO_PA9F_NCS3          (1u << 9)  /**< \brief Ebi signal: NCS3 */
#define PIO_PA31B_NCS3         (1u << 31) /**< \brief Ebi signal: NCS3 */
#define PIO_PA12F_NRD          (1u << 12) /**< \brief Ebi signal: NRD/NANDOE */
#define PIO_PA12F_NANDOE       (1u << 12) /**< \brief Ebi signal: NRD/NANDOE */
#define PIO_PB2B_NRD           (1u << 2)  /**< \brief Ebi signal: NRD/NANDOE */
#define PIO_PB2B_NANDOE        (1u << 2)  /**< \brief Ebi signal: NRD/NANDOE */
#define PIO_PC3B_NWAIT         (1u << 3)  /**< \brief Ebi signal: NWAIT */
#define PIO_PD3F_NWAIT         (1u << 3)  /**< \brief Ebi signal: NWAIT */
#define PIO_PA8F_NWE           (1u << 8)  /**< \brief Ebi signal: NWE/NANDWE */
#define PIO_PA8F_NANDWE        (1u << 8)  /**< \brief Ebi signal: NWE/NANDWE */
#define PIO_PA30B_NWE          (1u << 30) /**< \brief Ebi signal: NWE/NANDWE */
#define PIO_PA30B_NANDWE       (1u << 30) /**< \brief Ebi signal: NWE/NANDWE */
#define PIO_PC4B_NWR1          (1u << 4)  /**< \brief Ebi signal: NWR1/NBS1 */
#define PIO_PC4B_NBS1          (1u << 4)  /**< \brief Ebi signal: NWR1/NBS1 */
#define PIO_PD7F_NWR1          (1u << 7)  /**< \brief Ebi signal: NWR1/NBS1 */
#define PIO_PD7F_NBS1          (1u << 7)  /**< \brief Ebi signal: NWR1/NBS1 */
/* ========== Pio definition for FLEXCOM0 peripheral ========== */
#define PIO_PB28C_FLEXCOM0_IO1 (1u << 28) /**< \brief Flexcom0 signal: FLEXCOM0_IO1 */
#define PIO_PB29C_FLEXCOM0_IO2 (1u << 29) /**< \brief Flexcom0 signal: FLEXCOM0_IO2 */
#define PIO_PB30C_FLEXCOM0_IO3 (1u << 30) /**< \brief Flexcom0 signal: FLEXCOM0_IO3 */
#define PIO_PB31C_FLEXCOM0_IO4 (1u << 31) /**< \brief Flexcom0 signal: FLEXCOM0_IO4 */
#define PIO_PC0C_FLEXCOM0_O1   (1u << 0)  /**< \brief Flexcom0 signal: FLEXCOM0_O1 */
/* ========== Pio definition for FLEXCOM1 peripheral ========== */
#define PIO_PA24A_FLEXCOM1_IO1 (1u << 24) /**< \brief Flexcom1 signal: FLEXCOM1_IO1 */
#define PIO_PA23A_FLEXCOM1_IO2 (1u << 23) /**< \brief Flexcom1 signal: FLEXCOM1_IO2 */
#define PIO_PA22A_FLEXCOM1_IO3 (1u << 22) /**< \brief Flexcom1 signal: FLEXCOM1_IO3 */
#define PIO_PA25A_FLEXCOM1_IO4 (1u << 25) /**< \brief Flexcom1 signal: FLEXCOM1_IO4 */
#define PIO_PA26A_FLEXCOM1_O1  (1u << 26) /**< \brief Flexcom1 signal: FLEXCOM1_O1 */
/* ========== Pio definition for FLEXCOM2 peripheral ========== */
#define PIO_PA6E_FLEXCOM2_IO1  (1u << 6)  /**< \brief Flexcom2 signal: FLEXCOM2_IO1 */
#define PIO_PD26C_FLEXCOM2_IO1 (1u << 26) /**< \brief Flexcom2 signal: FLEXCOM2_IO1 */
#define PIO_PA7E_FLEXCOM2_IO2  (1u << 7)  /**< \brief Flexcom2 signal: FLEXCOM2_IO2 */
#define PIO_PD27C_FLEXCOM2_IO2 (1u << 27) /**< \brief Flexcom2 signal: FLEXCOM2_IO2 */
#define PIO_PA8E_FLEXCOM2_IO3  (1u << 8)  /**< \brief Flexcom2 signal: FLEXCOM2_IO3 */
#define PIO_PD28C_FLEXCOM2_IO3 (1u << 28) /**< \brief Flexcom2 signal: FLEXCOM2_IO3 */
#define PIO_PA9E_FLEXCOM2_IO4  (1u << 9)  /**< \brief Flexcom2 signal: FLEXCOM2_IO4 */
#define PIO_PD29C_FLEXCOM2_IO4 (1u << 29) /**< \brief Flexcom2 signal: FLEXCOM2_IO4 */
#define PIO_PA10E_FLEXCOM2_O1  (1u << 10) /**< \brief Flexcom2 signal: FLEXCOM2_O1 */
#define PIO_PD30C_FLEXCOM2_O1  (1u << 30) /**< \brief Flexcom2 signal: FLEXCOM2_O1 */
/* ========== Pio definition for FLEXCOM3 peripheral ========== */
#define PIO_PA15E_FLEXCOM3_IO1 (1u << 15) /**< \brief Flexcom3 signal: FLEXCOM3_IO1 */
#define PIO_PB23E_FLEXCOM3_IO1 (1u << 23) /**< \brief Flexcom3 signal: FLEXCOM3_IO1 */
#define PIO_PC20E_FLEXCOM3_IO1 (1u << 20) /**< \brief Flexcom3 signal: FLEXCOM3_IO1 */
#define PIO_PA13E_FLEXCOM3_IO2 (1u << 13) /**< \brief Flexcom3 signal: FLEXCOM3_IO2 */
#define PIO_PB22E_FLEXCOM3_IO2 (1u << 22) /**< \brief Flexcom3 signal: FLEXCOM3_IO2 */
#define PIO_PC19E_FLEXCOM3_IO2 (1u << 19) /**< \brief Flexcom3 signal: FLEXCOM3_IO2 */
#define PIO_PA14E_FLEXCOM3_IO3 (1u << 14) /**< \brief Flexcom3 signal: FLEXCOM3_IO3 */
#define PIO_PB21E_FLEXCOM3_IO3 (1u << 21) /**< \brief Flexcom3 signal: FLEXCOM3_IO3 */
#define PIO_PC18E_FLEXCOM3_IO3 (1u << 18) /**< \brief Flexcom3 signal: FLEXCOM3_IO3 */
#define PIO_PA16E_FLEXCOM3_IO4 (1u << 16) /**< \brief Flexcom3 signal: FLEXCOM3_IO4 */
#define PIO_PB24E_FLEXCOM3_IO4 (1u << 24) /**< \brief Flexcom3 signal: FLEXCOM3_IO4 */
#define PIO_PC21E_FLEXCOM3_IO4 (1u << 21) /**< \brief Flexcom3 signal: FLEXCOM3_IO4 */
#define PIO_PA17E_FLEXCOM3_O1  (1u << 17) /**< \brief Flexcom3 signal: FLEXCOM3_O1 */
#define PIO_PB25E_FLEXCOM3_O1  (1u << 25) /**< \brief Flexcom3 signal: FLEXCOM3_O1 */
#define PIO_PC22E_FLEXCOM3_O1  (1u << 22) /**< \brief Flexcom3 signal: FLEXCOM3_O1 */
/* ========== Pio definition for FLEXCOM4 peripheral ========== */
#define PIO_PC28B_FLEXCOM4_IO1 (1u << 28) /**< \brief Flexcom4 signal: FLEXCOM4_IO1 */
#define PIO_PD12B_FLEXCOM4_IO1 (1u << 12) /**< \brief Flexcom4 signal: FLEXCOM4_IO1 */
#define PIO_PD21C_FLEXCOM4_IO1 (1u << 21) /**< \brief Flexcom4 signal: FLEXCOM4_IO1 */
#define PIO_PC29B_FLEXCOM4_IO2 (1u << 29) /**< \brief Flexcom4 signal: FLEXCOM4_IO2 */
#define PIO_PD13B_FLEXCOM4_IO2 (1u << 13) /**< \brief Flexcom4 signal: FLEXCOM4_IO2 */
#define PIO_PD22C_FLEXCOM4_IO2 (1u << 22) /**< \brief Flexcom4 signal: FLEXCOM4_IO2 */
#define PIO_PC30B_FLEXCOM4_IO3 (1u << 30) /**< \brief Flexcom4 signal: FLEXCOM4_IO3 */
#define PIO_PD14B_FLEXCOM4_IO3 (1u << 14) /**< \brief Flexcom4 signal: FLEXCOM4_IO3 */
#define PIO_PD23C_FLEXCOM4_IO3 (1u << 23) /**< \brief Flexcom4 signal: FLEXCOM4_IO3 */
#define PIO_PC31B_FLEXCOM4_IO4 (1u << 31) /**< \brief Flexcom4 signal: FLEXCOM4_IO4 */
#define PIO_PD15B_FLEXCOM4_IO4 (1u << 15) /**< \brief Flexcom4 signal: FLEXCOM4_IO4 */
#define PIO_PD24C_FLEXCOM4_IO4 (1u << 24) /**< \brief Flexcom4 signal: FLEXCOM4_IO4 */
#define PIO_PD0B_FLEXCOM4_O1   (1u << 0)  /**< \brief Flexcom4 signal: FLEXCOM4_O1 */
#define PIO_PD16B_FLEXCOM4_O1  (1u << 16) /**< \brief Flexcom4 signal: FLEXCOM4_O1 */
#define PIO_PD25C_FLEXCOM4_O1  (1u << 25) /**< \brief Flexcom4 signal: FLEXCOM4_O1 */
/* ========== Pio definition for GMAC peripheral ========== */
#define PIO_PB9F_GCOL          (1u << 9)  /**< \brief Gmac signal: GCOL */
#define PIO_PC23B_GCOL         (1u << 23) /**< \brief Gmac signal: GCOL */
#define PIO_PD4D_GCOL          (1u << 4)  /**< \brief Gmac signal: GCOL */
#define PIO_PB8F_GCRS          (1u << 8)  /**< \brief Gmac signal: GCRS */
#define PIO_PC22B_GCRS         (1u << 22) /**< \brief Gmac signal: GCRS */
#define PIO_PD3D_GCRS          (1u << 3)  /**< \brief Gmac signal: GCRS */
#define PIO_PB22F_GMDC         (1u << 22) /**< \brief Gmac signal: GMDC */
#define PIO_PC18B_GMDC         (1u << 18) /**< \brief Gmac signal: GMDC */
#define PIO_PD17D_GMDC         (1u << 17) /**< \brief Gmac signal: GMDC */
#define PIO_PB23F_GMDIO        (1u << 23) /**< \brief Gmac signal: GMDIO */
#define PIO_PC19B_GMDIO        (1u << 19) /**< \brief Gmac signal: GMDIO */
#define PIO_PD18D_GMDIO        (1u << 18) /**< \brief Gmac signal: GMDIO */
#define PIO_PB18F_GRX0         (1u << 18) /**< \brief Gmac signal: GRX0 */
#define PIO_PC14B_GRX0         (1u << 14) /**< \brief Gmac signal: GRX0 */
#define PIO_PD13D_GRX0         (1u << 13) /**< \brief Gmac signal: GRX0 */
#define PIO_PB19F_GRX1         (1u << 19) /**< \brief Gmac signal: GRX1 */
#define PIO_PC15B_GRX1         (1u << 15) /**< \brief Gmac signal: GRX1 */
#define PIO_PD14D_GRX1         (1u << 14) /**< \brief Gmac signal: GRX1 */
#define PIO_PB10F_GRX2         (1u << 10) /**< \brief Gmac signal: GRX2 */
#define PIO_PC24B_GRX2         (1u << 24) /**< \brief Gmac signal: GRX2 */
#define PIO_PD5D_GRX2          (1u << 5)  /**< \brief Gmac signal: GRX2 */
#define PIO_PB11F_GRX3         (1u << 11) /**< \brief Gmac signal: GRX3 */
#define PIO_PC25B_GRX3         (1u << 25) /**< \brief Gmac signal: GRX3 */
#define PIO_PD6D_GRX3          (1u << 6)  /**< \brief Gmac signal: GRX3 */
#define PIO_PB7F_GRXCK         (1u << 7)  /**< \brief Gmac signal: GRXCK */
#define PIO_PC20B_GRXCK        (1u << 20) /**< \brief Gmac signal: GRXCK */
#define PIO_PD1D_GRXCK         (1u << 1)  /**< \brief Gmac signal: GRXCK */
#define PIO_PB16F_GRXDV        (1u << 16) /**< \brief Gmac signal: GRXDV */
#define PIO_PC12B_GRXDV        (1u << 12) /**< \brief Gmac signal: GRXDV */
#define PIO_PD11D_GRXDV        (1u << 11) /**< \brief Gmac signal: GRXDV */
#define PIO_PB17F_GRXER        (1u << 17) /**< \brief Gmac signal: GRXER */
#define PIO_PC13B_GRXER        (1u << 13) /**< \brief Gmac signal: GRXER */
#define PIO_PD12D_GRXER        (1u << 12) /**< \brief Gmac signal: GRXER */
#define PIO_PB5F_GTSUCOMP      (1u << 5)  /**< \brief Gmac signal: GTSUCOMP */
#define PIO_PC9B_GTSUCOMP      (1u << 9)  /**< \brief Gmac signal: GTSUCOMP */
#define PIO_PD0D_GTSUCOMP      (1u << 0)  /**< \brief Gmac signal: GTSUCOMP */
#define PIO_PB20F_GTX0         (1u << 20) /**< \brief Gmac signal: GTX0 */
#define PIO_PC16B_GTX0         (1u << 16) /**< \brief Gmac signal: GTX0 */
#define PIO_PD15D_GTX0         (1u << 15) /**< \brief Gmac signal: GTX0 */
#define PIO_PB21F_GTX1         (1u << 21) /**< \brief Gmac signal: GTX1 */
#define PIO_PC17B_GTX1         (1u << 17) /**< \brief Gmac signal: GTX1 */
#define PIO_PD16D_GTX1         (1u << 16) /**< \brief Gmac signal: GTX1 */
#define PIO_PB12F_GTX2         (1u << 12) /**< \brief Gmac signal: GTX2 */
#define PIO_PC26B_GTX2         (1u << 26) /**< \brief Gmac signal: GTX2 */
#define PIO_PD7D_GTX2          (1u << 7)  /**< \brief Gmac signal: GTX2 */
#define PIO_PB13F_GTX3         (1u << 13) /**< \brief Gmac signal: GTX3 */
#define PIO_PC27B_GTX3         (1u << 27) /**< \brief Gmac signal: GTX3 */
#define PIO_PD8D_GTX3          (1u << 8)  /**< \brief Gmac signal: GTX3 */
#define PIO_PB14F_GTXCK        (1u << 14) /**< \brief Gmac signal: GTXCK */
#define PIO_PC10B_GTXCK        (1u << 10) /**< \brief Gmac signal: GTXCK */
#define PIO_PD9D_GTXCK         (1u << 9)  /**< \brief Gmac signal: GTXCK */
#define PIO_PB15F_GTXEN        (1u << 15) /**< \brief Gmac signal: GTXEN */
#define PIO_PC11B_GTXEN        (1u << 11) /**< \brief Gmac signal: GTXEN */
#define PIO_PD10D_GTXEN        (1u << 10) /**< \brief Gmac signal: GTXEN */
#define PIO_PB6F_GTXER         (1u << 6)  /**< \brief Gmac signal: GTXER */
#define PIO_PC21B_GTXER        (1u << 21) /**< \brief Gmac signal: GTXER */
#define PIO_PD2D_GTXER         (1u << 2)  /**< \brief Gmac signal: GTXER */
/* ========== Pio definition for I2SC0 peripheral ========== */
#define PIO_PC1E_I2SCK0        (1u << 1)  /**< \brief I2sc0 signal: I2SCK0 */
#define PIO_PD19E_I2SCK0       (1u << 19) /**< \brief I2sc0 signal: I2SCK0 */
#define PIO_PC4E_I2SDI0        (1u << 4)  /**< \brief I2sc0 signal: I2SDI0 */
#define PIO_PD22E_I2SDI0       (1u << 22) /**< \brief I2sc0 signal: I2SDI0 */
#define PIO_PC5E_I2SDO0        (1u << 5)  /**< \brief I2sc0 signal: I2SDO0 */
#define PIO_PD23E_I2SDO0       (1u << 23) /**< \brief I2sc0 signal: I2SDO0 */
#define PIO_PC2E_I2SMCK0       (1u << 2)  /**< \brief I2sc0 signal: I2SMCK0 */
#define PIO_PD20E_I2SMCK0      (1u << 20) /**< \brief I2sc0 signal: I2SMCK0 */
#define PIO_PC3E_I2SWS0        (1u << 3)  /**< \brief I2sc0 signal: I2SWS0 */
#define PIO_PD21E_I2SWS0       (1u << 21) /**< \brief I2sc0 signal: I2SWS0 */
/* ========== Pio definition for I2SC1 peripheral ========== */
#define PIO_PA15D_I2SCK1       (1u << 15) /**< \brief I2sc1 signal: I2SCK1 */
#define PIO_PB15D_I2SCK1       (1u << 15) /**< \brief I2sc1 signal: I2SCK1 */
#define PIO_PA17D_I2SDI1       (1u << 17) /**< \brief I2sc1 signal: I2SDI1 */
#define PIO_PB17D_I2SDI1       (1u << 17) /**< \brief I2sc1 signal: I2SDI1 */
#define PIO_PA18D_I2SDO1       (1u << 18) /**< \brief I2sc1 signal: I2SDO1 */
#define PIO_PB18D_I2SDO1       (1u << 18) /**< \brief I2sc1 signal: I2SDO1 */
#define PIO_PA14D_I2SMCK1      (1u << 14) /**< \brief I2sc1 signal: I2SMCK1 */
#define PIO_PB14D_I2SMCK1      (1u << 14) /**< \brief I2sc1 signal: I2SMCK1 */
#define PIO_PA16D_I2SWS1       (1u << 16) /**< \brief I2sc1 signal: I2SWS1 */
#define PIO_PB16D_I2SWS1       (1u << 16) /**< \brief I2sc1 signal: I2SWS1 */
/* ========== Pio definition for ISI peripheral ========== */
#define PIO_PB26F_ISI_D0       (1u << 26) /**< \brief Isi signal: ISI_D0 */
#define PIO_PC9C_ISI_D0        (1u << 9)  /**< \brief Isi signal: ISI_D0 */
#define PIO_PD7E_ISI_D0        (1u << 7)  /**< \brief Isi signal: ISI_D0 */
#define PIO_PB27F_ISI_D1       (1u << 27) /**< \brief Isi signal: ISI_D1 */
#define PIO_PC10C_ISI_D1       (1u << 10) /**< \brief Isi signal: ISI_D1 */
#define PIO_PD8E_ISI_D1        (1u << 8)  /**< \brief Isi signal: ISI_D1 */
#define PIO_PB24F_ISI_D10      (1u << 24) /**< \brief Isi signal: ISI_D10 */
#define PIO_PC19C_ISI_D10      (1u << 19) /**< \brief Isi signal: ISI_D10 */
#define PIO_PD4E_ISI_D10       (1u << 4)  /**< \brief Isi signal: ISI_D10 */
#define PIO_PD18F_ISI_D10      (1u << 18) /**< \brief Isi signal: ISI_D10 */
#define PIO_PB25F_ISI_D11      (1u << 25) /**< \brief Isi signal: ISI_D11 */
#define PIO_PC20C_ISI_D11      (1u << 20) /**< \brief Isi signal: ISI_D11 */
#define PIO_PD3E_ISI_D11       (1u << 3)  /**< \brief Isi signal: ISI_D11 */
#define PIO_PD19F_ISI_D11      (1u << 19) /**< \brief Isi signal: ISI_D11 */
#define PIO_PB28F_ISI_D2       (1u << 28) /**< \brief Isi signal: ISI_D2 */
#define PIO_PC11C_ISI_D2       (1u << 11) /**< \brief Isi signal: ISI_D2 */
#define PIO_PD9E_ISI_D2        (1u << 9)  /**< \brief Isi signal: ISI_D2 */
#define PIO_PB29F_ISI_D3       (1u << 29) /**< \brief Isi signal: ISI_D3 */
#define PIO_PC12C_ISI_D3       (1u << 12) /**< \brief Isi signal: ISI_D3 */
#define PIO_PD10E_ISI_D3       (1u << 10) /**< \brief Isi signal: ISI_D3 */
#define PIO_PB30F_ISI_D4       (1u << 30) /**< \brief Isi signal: ISI_D4 */
#define PIO_PC13C_ISI_D4       (1u << 13) /**< \brief Isi signal: ISI_D4 */
#define PIO_PD11E_ISI_D4       (1u << 11) /**< \brief Isi signal: ISI_D4 */
#define PIO_PD12F_ISI_D4       (1u << 12) /**< \brief Isi signal: ISI_D4 */
#define PIO_PB31F_ISI_D5       (1u << 31) /**< \brief Isi signal: ISI_D5 */
#define PIO_PC14C_ISI_D5       (1u << 14) /**< \brief Isi signal: ISI_D5 */
#define PIO_PD12E_ISI_D5       (1u << 12) /**< \brief Isi signal: ISI_D5 */
#define PIO_PD13F_ISI_D5       (1u << 13) /**< \brief Isi signal: ISI_D5 */
#define PIO_PC0F_ISI_D6        (1u << 0)  /**< \brief Isi signal: ISI_D6 */
#define PIO_PC15C_ISI_D6       (1u << 15) /**< \brief Isi signal: ISI_D6 */
#define PIO_PD13E_ISI_D6       (1u << 13) /**< \brief Isi signal: ISI_D6 */
#define PIO_PD14F_ISI_D6       (1u << 14) /**< \brief Isi signal: ISI_D6 */
#define PIO_PC1F_ISI_D7        (1u << 1)  /**< \brief Isi signal: ISI_D7 */
#define PIO_PC16C_ISI_D7       (1u << 16) /**< \brief Isi signal: ISI_D7 */
#define PIO_PD14E_ISI_D7       (1u << 14) /**< \brief Isi signal: ISI_D7 */
#define PIO_PD15F_ISI_D7       (1u << 15) /**< \brief Isi signal: ISI_D7 */
#define PIO_PC2F_ISI_D8        (1u << 2)  /**< \brief Isi signal: ISI_D8 */
#define PIO_PC17C_ISI_D8       (1u << 17) /**< \brief Isi signal: ISI_D8 */
#define PIO_PD6E_ISI_D8        (1u << 6)  /**< \brief Isi signal: ISI_D8 */
#define PIO_PD16F_ISI_D8       (1u << 16) /**< \brief Isi signal: ISI_D8 */
#define PIO_PC3F_ISI_D9        (1u << 3)  /**< \brief Isi signal: ISI_D9 */
#define PIO_PC18C_ISI_D9       (1u << 18) /**< \brief Isi signal: ISI_D9 */
#define PIO_PD5E_ISI_D9        (1u << 5)  /**< \brief Isi signal: ISI_D9 */
#define PIO_PD17F_ISI_D9       (1u << 17) /**< \brief Isi signal: ISI_D9 */
#define PIO_PC8F_ISI_FIELD     (1u << 8)  /**< \brief Isi signal: ISI_FIELD */
#define PIO_PC25C_ISI_FIELD    (1u << 25) /**< \brief Isi signal: ISI_FIELD */
#define PIO_PD18E_ISI_FIELD    (1u << 18) /**< \brief Isi signal: ISI_FIELD */
#define PIO_PD23F_ISI_FIELD    (1u << 23) /**< \brief Isi signal: ISI_FIELD */
#define PIO_PC6F_ISI_HSYNC     (1u << 6)  /**< \brief Isi signal: ISI_HSYNC */
#define PIO_PC23C_ISI_HSYNC    (1u << 23) /**< \brief Isi signal: ISI_HSYNC */
#define PIO_PD17E_ISI_HSYNC    (1u << 17) /**< \brief Isi signal: ISI_HSYNC */
#define PIO_PD22F_ISI_HSYNC    (1u << 22) /**< \brief Isi signal: ISI_HSYNC */
#define PIO_PC7F_ISI_MCK       (1u << 7)  /**< \brief Isi signal: ISI_MCK */
#define PIO_PC24C_ISI_MCK      (1u << 24) /**< \brief Isi signal: ISI_MCK */
#define PIO_PD2E_ISI_MCK       (1u << 2)  /**< \brief Isi signal: ISI_MCK */
#define PIO_PD11F_ISI_MCK      (1u << 11) /**< \brief Isi signal: ISI_MCK */
#define PIO_PC4F_ISI_PCK       (1u << 4)  /**< \brief Isi signal: ISI_PCK */
#define PIO_PC21C_ISI_PCK      (1u << 21) /**< \brief Isi signal: ISI_PCK */
#define PIO_PD15E_ISI_PCK      (1u << 15) /**< \brief Isi signal: ISI_PCK */
#define PIO_PD20F_ISI_PCK      (1u << 20) /**< \brief Isi signal: ISI_PCK */
#define PIO_PC5F_ISI_VSYNC     (1u << 5)  /**< \brief Isi signal: ISI_VSYNC */
#define PIO_PC22C_ISI_VSYNC    (1u << 22) /**< \brief Isi signal: ISI_VSYNC */
#define PIO_PD16E_ISI_VSYNC    (1u << 16) /**< \brief Isi signal: ISI_VSYNC */
#define PIO_PD21F_ISI_VSYNC    (1u << 21) /**< \brief Isi signal: ISI_VSYNC */
/* ========== Pio definition for LCDC peripheral ========== */
#define PIO_PB11A_LCDDAT0      (1u << 11) /**< \brief Lcdc signal: LCDDAT0 */
#define PIO_PB12A_LCDDAT1      (1u << 12) /**< \brief Lcdc signal: LCDDAT1 */
#define PIO_PB21A_LCDDAT10     (1u << 21) /**< \brief Lcdc signal: LCDDAT10 */
#define PIO_PC16A_LCDDAT10     (1u << 16) /**< \brief Lcdc signal: LCDDAT10 */
#define PIO_PB22A_LCDDAT11     (1u << 22) /**< \brief Lcdc signal: LCDDAT11 */
#define PIO_PC17A_LCDDAT11     (1u << 17) /**< \brief Lcdc signal: LCDDAT11 */
#define PIO_PB23A_LCDDAT12     (1u << 23) /**< \brief Lcdc signal: LCDDAT12 */
#define PIO_PC18A_LCDDAT12     (1u << 18) /**< \brief Lcdc signal: LCDDAT12 */
#define PIO_PB24A_LCDDAT13     (1u << 24) /**< \brief Lcdc signal: LCDDAT13 */
#define PIO_PC19A_LCDDAT13     (1u << 19) /**< \brief Lcdc signal: LCDDAT13 */
#define PIO_PB25A_LCDDAT14     (1u << 25) /**< \brief Lcdc signal: LCDDAT14 */
#define PIO_PC20A_LCDDAT14     (1u << 20) /**< \brief Lcdc signal: LCDDAT14 */
#define PIO_PB26A_LCDDAT15     (1u << 26) /**< \brief Lcdc signal: LCDDAT15 */
#define PIO_PC21A_LCDDAT15     (1u << 21) /**< \brief Lcdc signal: LCDDAT15 */
#define PIO_PB27A_LCDDAT16     (1u << 27) /**< \brief Lcdc signal: LCDDAT16 */
#define PIO_PB28A_LCDDAT17     (1u << 28) /**< \brief Lcdc signal: LCDDAT17 */
#define PIO_PB29A_LCDDAT18     (1u << 29) /**< \brief Lcdc signal: LCDDAT18 */
#define PIO_PC22A_LCDDAT18     (1u << 22) /**< \brief Lcdc signal: LCDDAT18 */
#define PIO_PB30A_LCDDAT19     (1u << 30) /**< \brief Lcdc signal: LCDDAT19 */
#define PIO_PC23A_LCDDAT19     (1u << 23) /**< \brief Lcdc signal: LCDDAT19 */
#define PIO_PB13A_LCDDAT2      (1u << 13) /**< \brief Lcdc signal: LCDDAT2 */
#define PIO_PC10A_LCDDAT2      (1u << 10) /**< \brief Lcdc signal: LCDDAT2 */
#define PIO_PB31A_LCDDAT20     (1u << 31) /**< \brief Lcdc signal: LCDDAT20 */
#define PIO_PC24A_LCDDAT20     (1u << 24) /**< \brief Lcdc signal: LCDDAT20 */
#define PIO_PC0A_LCDDAT21      (1u << 0)  /**< \brief Lcdc signal: LCDDAT21 */
#define PIO_PC25A_LCDDAT21     (1u << 25) /**< \brief Lcdc signal: LCDDAT21 */
#define PIO_PC1A_LCDDAT22      (1u << 1)  /**< \brief Lcdc signal: LCDDAT22 */
#define PIO_PC26A_LCDDAT22     (1u << 26) /**< \brief Lcdc signal: LCDDAT22 */
#define PIO_PC2A_LCDDAT23      (1u << 2)  /**< \brief Lcdc signal: LCDDAT23 */
#define PIO_PC27A_LCDDAT23     (1u << 27) /**< \brief Lcdc signal: LCDDAT23 */
#define PIO_PB14A_LCDDAT3      (1u << 14) /**< \brief Lcdc signal: LCDDAT3 */
#define PIO_PC11A_LCDDAT3      (1u << 11) /**< \brief Lcdc signal: LCDDAT3 */
#define PIO_PB15A_LCDDAT4      (1u << 15) /**< \brief Lcdc signal: LCDDAT4 */
#define PIO_PC12A_LCDDAT4      (1u << 12) /**< \brief Lcdc signal: LCDDAT4 */
#define PIO_PB16A_LCDDAT5      (1u << 16) /**< \brief Lcdc signal: LCDDAT5 */
#define PIO_PC13A_LCDDAT5      (1u << 13) /**< \brief Lcdc signal: LCDDAT5 */
#define PIO_PB17A_LCDDAT6      (1u << 17) /**< \brief Lcdc signal: LCDDAT6 */
#define PIO_PC14A_LCDDAT6      (1u << 14) /**< \brief Lcdc signal: LCDDAT6 */
#define PIO_PB18A_LCDDAT7      (1u << 18) /**< \brief Lcdc signal: LCDDAT7 */
#define PIO_PC15A_LCDDAT7      (1u << 15) /**< \brief Lcdc signal: LCDDAT7 */
#define PIO_PB19A_LCDDAT8      (1u << 19) /**< \brief Lcdc signal: LCDDAT8 */
#define PIO_PB20A_LCDDAT9      (1u << 20) /**< \brief Lcdc signal: LCDDAT9 */
#define PIO_PC8A_LCDDEN        (1u << 8)  /**< \brief Lcdc signal: LCDDEN */
#define PIO_PD1A_LCDDEN        (1u << 1)  /**< \brief Lcdc signal: LCDDEN */
#define PIO_PC4A_LCDDISP       (1u << 4)  /**< \brief Lcdc signal: LCDDISP */
#define PIO_PC29A_LCDDISP      (1u << 29) /**< \brief Lcdc signal: LCDDISP */
#define PIO_PC6A_LCDHSYNC      (1u << 6)  /**< \brief Lcdc signal: LCDHSYNC */
#define PIO_PC31A_LCDHSYNC     (1u << 31) /**< \brief Lcdc signal: LCDHSYNC */
#define PIO_PC7A_LCDPCK        (1u << 7)  /**< \brief Lcdc signal: LCDPCK */
#define PIO_PD0A_LCDPCK        (1u << 0)  /**< \brief Lcdc signal: LCDPCK */
#define PIO_PC3A_LCDPWM        (1u << 3)  /**< \brief Lcdc signal: LCDPWM */
#define PIO_PC28A_LCDPWM       (1u << 28) /**< \brief Lcdc signal: LCDPWM */
#define PIO_PC5A_LCDVSYNC      (1u << 5)  /**< \brief Lcdc signal: LCDVSYNC */
#define PIO_PC30A_LCDVSYNC     (1u << 30) /**< \brief Lcdc signal: LCDVSYNC */
/* ========== Pio definition for PDMIC peripheral ========== */
#define PIO_PB12D_PDMCLK       (1u << 12) /**< \brief Pdmic signal: PDMCLK */
#define PIO_PB27D_PDMCLK       (1u << 27) /**< \brief Pdmic signal: PDMCLK */
#define PIO_PB11D_PDMDAT       (1u << 11) /**< \brief Pdmic signal: PDMDAT */
#define PIO_PB26D_PDMDAT       (1u << 26) /**< \brief Pdmic signal: PDMDAT */
/* ========== Pio definition for PMC peripheral ========== */
#define PIO_PC8D_PCK0          (1u << 8)  /**< \brief Pmc signal: PCK0 */
#define PIO_PD19A_PCK0         (1u << 19) /**< \brief Pmc signal: PCK0 */
#define PIO_PD31E_PCK0         (1u << 31) /**< \brief Pmc signal: PCK0 */
#define PIO_PB13C_PCK1         (1u << 13) /**< \brief Pmc signal: PCK1 */
#define PIO_PB20E_PCK1         (1u << 20) /**< \brief Pmc signal: PCK1 */
#define PIO_PC27C_PCK1         (1u << 27) /**< \brief Pmc signal: PCK1 */
#define PIO_PD6B_PCK1          (1u << 6)  /**< \brief Pmc signal: PCK1 */
#define PIO_PA21B_PCK2         (1u << 21) /**< \brief Pmc signal: PCK2 */
#define PIO_PC28C_PCK2         (1u << 28) /**< \brief Pmc signal: PCK2 */
#define PIO_PD11B_PCK2         (1u << 11) /**< \brief Pmc signal: PCK2 */
/* ========== Pio definition for PWM peripheral ========== */
#define PIO_PB3D_PWMEXTRG0     (1u << 3)  /**< \brief Pwm signal: PWMEXTRG0 */
#define PIO_PB10C_PWMEXTRG1    (1u << 10) /**< \brief Pwm signal: PWMEXTRG1 */
#define PIO_PB2D_PWMFI0        (1u << 2)  /**< \brief Pwm signal: PWMFI0 */
#define PIO_PB9C_PWMFI1        (1u << 9)  /**< \brief Pwm signal: PWMFI1 */
#define PIO_PA30D_PWMH0        (1u << 30) /**< \brief Pwm signal: PWMH0 */
#define PIO_PB0D_PWMH1         (1u << 0)  /**< \brief Pwm signal: PWMH1 */
#define PIO_PB5C_PWMH2         (1u << 5)  /**< \brief Pwm signal: PWMH2 */
#define PIO_PB7C_PWMH3         (1u << 7)  /**< \brief Pwm signal: PWMH3 */
#define PIO_PA31D_PWML0        (1u << 31) /**< \brief Pwm signal: PWML0 */
#define PIO_PB1D_PWML1         (1u << 1)  /**< \brief Pwm signal: PWML1 */
#define PIO_PB6C_PWML2         (1u << 6)  /**< \brief Pwm signal: PWML2 */
#define PIO_PB8C_PWML3         (1u << 8)  /**< \brief Pwm signal: PWML3 */
/* ========== Pio definition for QSPI0 peripheral ========== */
#define PIO_PA1B_QSPI0_CS      (1u << 1)  /**< \brief Qspi0 signal: QSPI0_CS */
#define PIO_PA15C_QSPI0_CS     (1u << 15) /**< \brief Qspi0 signal: QSPI0_CS */
#define PIO_PA23F_QSPI0_CS     (1u << 23) /**< \brief Qspi0 signal: QSPI0_CS */
#define PIO_PA2B_QSPI0_IO0     (1u << 2)  /**< \brief Qspi0 signal: QSPI0_IO0 */
#define PIO_PA16C_QSPI0_IO0    (1u << 16) /**< \brief Qspi0 signal: QSPI0_IO0 */
#define PIO_PA24F_QSPI0_IO0    (1u << 24) /**< \brief Qspi0 signal: QSPI0_IO0 */
#define PIO_PA3B_QSPI0_IO1     (1u << 3)  /**< \brief Qspi0 signal: QSPI0_IO1 */
#define PIO_PA17C_QSPI0_IO1    (1u << 17) /**< \brief Qspi0 signal: QSPI0_IO1 */
#define PIO_PA25F_QSPI0_IO1    (1u << 25) /**< \brief Qspi0 signal: QSPI0_IO1 */
#define PIO_PA4B_QSPI0_IO2     (1u << 4)  /**< \brief Qspi0 signal: QSPI0_IO2 */
#define PIO_PA18C_QSPI0_IO2    (1u << 18) /**< \brief Qspi0 signal: QSPI0_IO2 */
#define PIO_PA26F_QSPI0_IO2    (1u << 26) /**< \brief Qspi0 signal: QSPI0_IO2 */
#define PIO_PA5B_QSPI0_IO3     (1u << 5)  /**< \brief Qspi0 signal: QSPI0_IO3 */
#define PIO_PA19C_QSPI0_IO3    (1u << 19) /**< \brief Qspi0 signal: QSPI0_IO3 */
#define PIO_PA27F_QSPI0_IO3    (1u << 27) /**< \brief Qspi0 signal: QSPI0_IO3 */
#define PIO_PA0B_QSPI0_SCK     (1u << 0)  /**< \brief Qspi0 signal: QSPI0_SCK */
#define PIO_PA14C_QSPI0_SCK    (1u << 14) /**< \brief Qspi0 signal: QSPI0_SCK */
#define PIO_PA22F_QSPI0_SCK    (1u << 22) /**< \brief Qspi0 signal: QSPI0_SCK */
/* ========== Pio definition for QSPI1 peripheral ========== */
#define PIO_PA11B_QSPI1_CS     (1u << 11) /**< \brief Qspi1 signal: QSPI1_CS */
#define PIO_PB6D_QSPI1_CS      (1u << 6)  /**< \brief Qspi1 signal: QSPI1_CS */
#define PIO_PB15E_QSPI1_CS     (1u << 15) /**< \brief Qspi1 signal: QSPI1_CS */
#define PIO_PA7B_QSPI1_IO0     (1u << 7)  /**< \brief Qspi1 signal: QSPI1_IO0 */
#define PIO_PB7D_QSPI1_IO0     (1u << 7)  /**< \brief Qspi1 signal: QSPI1_IO0 */
#define PIO_PB16E_QSPI1_IO0    (1u << 16) /**< \brief Qspi1 signal: QSPI1_IO0 */
#define PIO_PA8B_QSPI1_IO1     (1u << 8)  /**< \brief Qspi1 signal: QSPI1_IO1 */
#define PIO_PB8D_QSPI1_IO1     (1u << 8)  /**< \brief Qspi1 signal: QSPI1_IO1 */
#define PIO_PB17E_QSPI1_IO1    (1u << 17) /**< \brief Qspi1 signal: QSPI1_IO1 */
#define PIO_PA9B_QSPI1_IO2     (1u << 9)  /**< \brief Qspi1 signal: QSPI1_IO2 */
#define PIO_PB9D_QSPI1_IO2     (1u << 9)  /**< \brief Qspi1 signal: QSPI1_IO2 */
#define PIO_PB18E_QSPI1_IO2    (1u << 18) /**< \brief Qspi1 signal: QSPI1_IO2 */
#define PIO_PA10B_QSPI1_IO3    (1u << 10) /**< \brief Qspi1 signal: QSPI1_IO3 */
#define PIO_PB10D_QSPI1_IO3    (1u << 10) /**< \brief Qspi1 signal: QSPI1_IO3 */
#define PIO_PB19E_QSPI1_IO3    (1u << 19) /**< \brief Qspi1 signal: QSPI1_IO3 */
#define PIO_PA6B_QSPI1_SCK     (1u << 6)  /**< \brief Qspi1 signal: QSPI1_SCK */
#define PIO_PB5D_QSPI1_SCK     (1u << 5)  /**< \brief Qspi1 signal: QSPI1_SCK */
#define PIO_PB14E_QSPI1_SCK    (1u << 14) /**< \brief Qspi1 signal: QSPI1_SCK */
/* ========== Pio definition for SPI0 peripheral ========== */
#define PIO_PA16A_SPI0_MISO    (1u << 16) /**< \brief Spi0 signal: SPI0_MISO */
#define PIO_PA31C_SPI0_MISO    (1u << 31) /**< \brief Spi0 signal: SPI0_MISO */
#define PIO_PA15A_SPI0_MOSI    (1u << 15) /**< \brief Spi0 signal: SPI0_MOSI */
#define PIO_PB0C_SPI0_MOSI     (1u << 0)  /**< \brief Spi0 signal: SPI0_MOSI */
#define PIO_PA17A_SPI0_NPCS0   (1u << 17) /**< \brief Spi0 signal: SPI0_NPCS0 */
#define PIO_PA30C_SPI0_NPCS0   (1u << 30) /**< \brief Spi0 signal: SPI0_NPCS0 */
#define PIO_PA18A_SPI0_NPCS1   (1u << 18) /**< \brief Spi0 signal: SPI0_NPCS1 */
#define PIO_PA29C_SPI0_NPCS1   (1u << 29) /**< \brief Spi0 signal: SPI0_NPCS1 */
#define PIO_PA19A_SPI0_NPCS2   (1u << 19) /**< \brief Spi0 signal: SPI0_NPCS2 */
#define PIO_PA27C_SPI0_NPCS2   (1u << 27) /**< \brief Spi0 signal: SPI0_NPCS2 */
#define PIO_PA20A_SPI0_NPCS3   (1u << 20) /**< \brief Spi0 signal: SPI0_NPCS3 */
#define PIO_PA28C_SPI0_NPCS3   (1u << 28) /**< \brief Spi0 signal: SPI0_NPCS3 */
#define PIO_PA14A_SPI0_SPCK    (1u << 14) /**< \brief Spi0 signal: SPI0_SPCK */
#define PIO_PB1C_SPI0_SPCK     (1u << 1)  /**< \brief Spi0 signal: SPI0_SPCK */
/* ========== Pio definition for SPI1 peripheral ========== */
#define PIO_PA24D_SPI1_MISO    (1u << 24) /**< \brief Spi1 signal: SPI1_MISO */
#define PIO_PC3D_SPI1_MISO     (1u << 3)  /**< \brief Spi1 signal: SPI1_MISO */
#define PIO_PD27A_SPI1_MISO    (1u << 27) /**< \brief Spi1 signal: SPI1_MISO */
#define PIO_PA23D_SPI1_MOSI    (1u << 23) /**< \brief Spi1 signal: SPI1_MOSI */
#define PIO_PC2D_SPI1_MOSI     (1u << 2)  /**< \brief Spi1 signal: SPI1_MOSI */
#define PIO_PD26A_SPI1_MOSI    (1u << 26) /**< \brief Spi1 signal: SPI1_MOSI */
#define PIO_PA25D_SPI1_NPCS0   (1u << 25) /**< \brief Spi1 signal: SPI1_NPCS0 */
#define PIO_PC4D_SPI1_NPCS0    (1u << 4)  /**< \brief Spi1 signal: SPI1_NPCS0 */
#define PIO_PD28A_SPI1_NPCS0   (1u << 28) /**< \brief Spi1 signal: SPI1_NPCS0 */
#define PIO_PA26D_SPI1_NPCS1   (1u << 26) /**< \brief Spi1 signal: SPI1_NPCS1 */
#define PIO_PC5D_SPI1_NPCS1    (1u << 5)  /**< \brief Spi1 signal: SPI1_NPCS1 */
#define PIO_PD29A_SPI1_NPCS1   (1u << 29) /**< \brief Spi1 signal: SPI1_NPCS1 */
#define PIO_PA27D_SPI1_NPCS2   (1u << 27) /**< \brief Spi1 signal: SPI1_NPCS2 */
#define PIO_PC6D_SPI1_NPCS2    (1u << 6)  /**< \brief Spi1 signal: SPI1_NPCS2 */
#define PIO_PD30A_SPI1_NPCS2   (1u << 30) /**< \brief Spi1 signal: SPI1_NPCS2 */
#define PIO_PA28D_SPI1_NPCS3   (1u << 28) /**< \brief Spi1 signal: SPI1_NPCS3 */
#define PIO_PC7D_SPI1_NPCS3    (1u << 7)  /**< \brief Spi1 signal: SPI1_NPCS3 */
#define PIO_PA22D_SPI1_SPCK    (1u << 22) /**< \brief Spi1 signal: SPI1_SPCK */
#define PIO_PC1D_SPI1_SPCK     (1u << 1)  /**< \brief Spi1 signal: SPI1_SPCK */
#define PIO_PD25A_SPI1_SPCK    (1u << 25) /**< \brief Spi1 signal: SPI1_SPCK */
/* ========== Pio definition for SSC0 peripheral ========== */
#define PIO_PB23C_RD0          (1u << 23) /**< \brief Ssc0 signal: RD0 */
#define PIO_PC15E_RD0          (1u << 15) /**< \brief Ssc0 signal: RD0 */
#define PIO_PB25C_RF0          (1u << 25) /**< \brief Ssc0 signal: RF0 */
#define PIO_PC17E_RF0          (1u << 17) /**< \brief Ssc0 signal: RF0 */
#define PIO_PB24C_RK0          (1u << 24) /**< \brief Ssc0 signal: RK0 */
#define PIO_PC16E_RK0          (1u << 16) /**< \brief Ssc0 signal: RK0 */
#define PIO_PB22C_TD0          (1u << 22) /**< \brief Ssc0 signal: TD0 */
#define PIO_PC14E_TD0          (1u << 14) /**< \brief Ssc0 signal: TD0 */
#define PIO_PB21C_TF0          (1u << 21) /**< \brief Ssc0 signal: TF0 */
#define PIO_PC13E_TF0          (1u << 13) /**< \brief Ssc0 signal: TF0 */
#define PIO_PB20C_TK0          (1u << 20) /**< \brief Ssc0 signal: TK0 */
#define PIO_PC12E_TK0          (1u << 12) /**< \brief Ssc0 signal: TK0 */
/* ========== Pio definition for SSC1 peripheral ========== */
#define PIO_PA17B_RD1          (1u << 17) /**< \brief Ssc1 signal: RD1 */
#define PIO_PB17C_RD1          (1u << 17) /**< \brief Ssc1 signal: RD1 */
#define PIO_PA19B_RF1          (1u << 19) /**< \brief Ssc1 signal: RF1 */
#define PIO_PB19C_RF1          (1u << 19) /**< \brief Ssc1 signal: RF1 */
#define PIO_PA18B_RK1          (1u << 18) /**< \brief Ssc1 signal: RK1 */
#define PIO_PB18C_RK1          (1u << 18) /**< \brief Ssc1 signal: RK1 */
#define PIO_PA16B_TD1          (1u << 16) /**< \brief Ssc1 signal: TD1 */
#define PIO_PB16C_TD1          (1u << 16) /**< \brief Ssc1 signal: TD1 */
#define PIO_PA15B_TF1          (1u << 15) /**< \brief Ssc1 signal: TF1 */
#define PIO_PB15C_TF1          (1u << 15) /**< \brief Ssc1 signal: TF1 */
#define PIO_PA14B_TK1          (1u << 14) /**< \brief Ssc1 signal: TK1 */
#define PIO_PB14C_TK1          (1u << 14) /**< \brief Ssc1 signal: TK1 */
/* ========== Pio definition for TC0 peripheral ========== */
#define PIO_PA21D_TCLK0        (1u << 21) /**< \brief Tc0 signal: TCLK0 */
#define PIO_PA29A_TCLK1        (1u << 29) /**< \brief Tc0 signal: TCLK1 */
#define PIO_PC5C_TCLK1         (1u << 5)  /**< \brief Tc0 signal: TCLK1 */
#define PIO_PD13A_TCLK1        (1u << 13) /**< \brief Tc0 signal: TCLK1 */
#define PIO_PB5A_TCLK2         (1u << 5)  /**< \brief Tc0 signal: TCLK2 */
#define PIO_PB24D_TCLK2        (1u << 24) /**< \brief Tc0 signal: TCLK2 */
#define PIO_PD22A_TCLK2        (1u << 22) /**< \brief Tc0 signal: TCLK2 */
#define PIO_PA19D_TIOA0        (1u << 19) /**< \brief Tc0 signal: TIOA0 */
#define PIO_PA27A_TIOA1        (1u << 27) /**< \brief Tc0 signal: TIOA1 */
#define PIO_PC3C_TIOA1         (1u << 3)  /**< \brief Tc0 signal: TIOA1 */
#define PIO_PD11A_TIOA1        (1u << 11) /**< \brief Tc0 signal: TIOA1 */
#define PIO_PB6A_TIOA2         (1u << 6)  /**< \brief Tc0 signal: TIOA2 */
#define PIO_PB22D_TIOA2        (1u << 22) /**< \brief Tc0 signal: TIOA2 */
#define PIO_PD20A_TIOA2        (1u << 20) /**< \brief Tc0 signal: TIOA2 */
#define PIO_PA20D_TIOB0        (1u << 20) /**< \brief Tc0 signal: TIOB0 */
#define PIO_PA28A_TIOB1        (1u << 28) /**< \brief Tc0 signal: TIOB1 */
#define PIO_PC4C_TIOB1         (1u << 4)  /**< \brief Tc0 signal: TIOB1 */
#define PIO_PD12A_TIOB1        (1u << 12) /**< \brief Tc0 signal: TIOB1 */
#define PIO_PB7A_TIOB2         (1u << 7)  /**< \brief Tc0 signal: TIOB2 */
#define PIO_PB23D_TIOB2        (1u << 23) /**< \brief Tc0 signal: TIOB2 */
#define PIO_PD21A_TIOB2        (1u << 21) /**< \brief Tc0 signal: TIOB2 */
/* ========== Pio definition for TC1 peripheral ========== */
#define PIO_PB8A_TCLK3         (1u << 8)  /**< \brief Tc1 signal: TCLK3 */
#define PIO_PB21D_TCLK3        (1u << 21) /**< \brief Tc1 signal: TCLK3 */
#define PIO_PD31D_TCLK3        (1u << 31) /**< \brief Tc1 signal: TCLK3 */
#define PIO_PA11D_TCLK4        (1u << 11) /**< \brief Tc1 signal: TCLK4 */
#define PIO_PC11D_TCLK4        (1u << 11) /**< \brief Tc1 signal: TCLK4 */
#define PIO_PA8D_TCLK5         (1u << 8)  /**< \brief Tc1 signal: TCLK5 */
#define PIO_PB30D_TCLK5        (1u << 30) /**< \brief Tc1 signal: TCLK5 */
#define PIO_PB9A_TIOA3         (1u << 9)  /**< \brief Tc1 signal: TIOA3 */
#define PIO_PB19D_TIOA3        (1u << 19) /**< \brief Tc1 signal: TIOA3 */
#define PIO_PD29D_TIOA3        (1u << 29) /**< \brief Tc1 signal: TIOA3 */
#define PIO_PA9D_TIOA4         (1u << 9)  /**< \brief Tc1 signal: TIOA4 */
#define PIO_PC9D_TIOA4         (1u << 9)  /**< \brief Tc1 signal: TIOA4 */
#define PIO_PA6D_TIOA5         (1u << 6)  /**< \brief Tc1 signal: TIOA5 */
#define PIO_PB28D_TIOA5        (1u << 28) /**< \brief Tc1 signal: TIOA5 */
#define PIO_PB10A_TIOB3        (1u << 10) /**< \brief Tc1 signal: TIOB3 */
#define PIO_PB20D_TIOB3        (1u << 20) /**< \brief Tc1 signal: TIOB3 */
#define PIO_PD30D_TIOB3        (1u << 30) /**< \brief Tc1 signal: TIOB3 */
#define PIO_PA10D_TIOB4        (1u << 10) /**< \brief Tc1 signal: TIOB4 */
#define PIO_PC10D_TIOB4        (1u << 10) /**< \brief Tc1 signal: TIOB4 */
#define PIO_PA7D_TIOB5         (1u << 7)  /**< \brief Tc1 signal: TIOB5 */
#define PIO_PB29D_TIOB5        (1u << 29) /**< \brief Tc1 signal: TIOB5 */
/* ========== Pio definition for TWIHS0 peripheral ========== */
#define PIO_PC0D_TWCK0         (1u << 0)  /**< \brief Twihs0 signal: TWCK0 */
#define PIO_PC28E_TWCK0        (1u << 28) /**< \brief Twihs0 signal: TWCK0 */
#define PIO_PD22B_TWCK0        (1u << 22) /**< \brief Twihs0 signal: TWCK0 */
#define PIO_PD30E_TWCK0        (1u << 30) /**< \brief Twihs0 signal: TWCK0 */
#define PIO_PB31D_TWD0         (1u << 31) /**< \brief Twihs0 signal: TWD0 */
#define PIO_PC27E_TWD0         (1u << 27) /**< \brief Twihs0 signal: TWD0 */
#define PIO_PD21B_TWD0         (1u << 21) /**< \brief Twihs0 signal: TWD0 */
#define PIO_PD29E_TWD0         (1u << 29) /**< \brief Twihs0 signal: TWD0 */
/* ========== Pio definition for TWIHS1 peripheral ========== */
#define PIO_PC7C_TWCK1         (1u << 7)  /**< \brief Twihs1 signal: TWCK1 */
#define PIO_PD5A_TWCK1         (1u << 5)  /**< \brief Twihs1 signal: TWCK1 */
#define PIO_PD20B_TWCK1        (1u << 20) /**< \brief Twihs1 signal: TWCK1 */
#define PIO_PC6C_TWD1          (1u << 6)  /**< \brief Twihs1 signal: TWD1 */
#define PIO_PD4A_TWD1          (1u << 4)  /**< \brief Twihs1 signal: TWD1 */
#define PIO_PD19B_TWD1         (1u << 19) /**< \brief Twihs1 signal: TWD1 */
/* ========== Pio definition for UART0 peripheral ========== */
#define PIO_PB26C_URXD0        (1u << 26) /**< \brief Uart0 signal: URXD0 */
#define PIO_PB27C_UTXD0        (1u << 27) /**< \brief Uart0 signal: UTXD0 */
/* ========== Pio definition for UART1 peripheral ========== */
#define PIO_PC7E_URXD1         (1u << 7)  /**< \brief Uart1 signal: URXD1 */
#define PIO_PD2A_URXD1         (1u << 2)  /**< \brief Uart1 signal: URXD1 */
#define PIO_PC8E_UTXD1         (1u << 8)  /**< \brief Uart1 signal: UTXD1 */
#define PIO_PD3A_UTXD1         (1u << 3)  /**< \brief Uart1 signal: UTXD1 */
/* ========== Pio definition for UART2 peripheral ========== */
#define PIO_PD4B_URXD2         (1u << 4)  /**< \brief Uart2 signal: URXD2 */
#define PIO_PD19C_URXD2        (1u << 19) /**< \brief Uart2 signal: URXD2 */
#define PIO_PD23A_URXD2        (1u << 23) /**< \brief Uart2 signal: URXD2 */
#define PIO_PD5B_UTXD2         (1u << 5)  /**< \brief Uart2 signal: UTXD2 */
#define PIO_PD20C_UTXD2        (1u << 20) /**< \brief Uart2 signal: UTXD2 */
#define PIO_PD24A_UTXD2        (1u << 24) /**< \brief Uart2 signal: UTXD2 */
/* ========== Pio definition for UART3 peripheral ========== */
#define PIO_PB11C_URXD3        (1u << 11) /**< \brief Uart3 signal: URXD3 */
#define PIO_PC12D_URXD3        (1u << 12) /**< \brief Uart3 signal: URXD3 */
#define PIO_PC31C_URXD3        (1u << 31) /**< \brief Uart3 signal: URXD3 */
#define PIO_PB12C_UTXD3        (1u << 12) /**< \brief Uart3 signal: UTXD3 */
#define PIO_PC13D_UTXD3        (1u << 13) /**< \brief Uart3 signal: UTXD3 */
#define PIO_PD0C_UTXD3         (1u << 0)  /**< \brief Uart3 signal: UTXD3 */
/* ========== Pio definition for UART4 peripheral ========== */
#define PIO_PB3A_URXD4         (1u << 3)  /**< \brief Uart4 signal: URXD4 */
#define PIO_PB4A_UTXD4         (1u << 4)  /**< \brief Uart4 signal: UTXD4 */
/* ========== Pio definition for HSDHC peripheral ========== */
#define PIO_PA0A_SDHC0CK       (1u << 0)   /**< \brief HSDHC signal: SDHC0_CK   */
#define PIO_PA1A_SDHC0CMD      (1u << 1)   /**< \brief HSDHC signal: SDHC0_CMD  */
#define PIO_PA2A_SDHC0DAT0     (1u << 2)   /**< \brief HSDHC signal: SDHC0_DAT0 */
#define PIO_PA3A_SDHC0DAT1     (1u << 3)   /**< \brief HSDHC signal: SDHC0_DAT1 */
#define PIO_PA4A_SDHC0DAT2     (1u << 4)   /**< \brief HSDHC signal: SDHC0_DAT2 */
#define PIO_PA5A_SDHC0DAT3     (1u << 5)   /**< \brief HSDHC signal: SDHC0_DAT3 */
#define PIO_PA12A_SDHC0WP      (1u << 12)  /**< \brief HSDHC signal: SDHC0_WP   */
#define PIO_PA13A_SDHC0CD      (1u << 13)  /**< \brief HSDHC signal: SDHC0_CD   */

/* ========== Pio indexes ========== */
#define PIO_PA0_IDX            0
#define PIO_PA1_IDX            1
#define PIO_PA2_IDX            2
#define PIO_PA3_IDX            3
#define PIO_PA4_IDX            4
#define PIO_PA5_IDX            5
#define PIO_PA6_IDX            6
#define PIO_PA7_IDX            7
#define PIO_PA8_IDX            8
#define PIO_PA9_IDX            9
#define PIO_PA10_IDX           10
#define PIO_PA11_IDX           11
#define PIO_PA12_IDX           12
#define PIO_PA13_IDX           13
#define PIO_PA14_IDX           14
#define PIO_PA15_IDX           15
#define PIO_PA16_IDX           16
#define PIO_PA17_IDX           17
#define PIO_PA18_IDX           18
#define PIO_PA19_IDX           19
#define PIO_PA20_IDX           20
#define PIO_PA21_IDX           21
#define PIO_PA22_IDX           22
#define PIO_PA23_IDX           23
#define PIO_PA24_IDX           24
#define PIO_PA25_IDX           25
#define PIO_PA26_IDX           26
#define PIO_PA27_IDX           27
#define PIO_PA28_IDX           28
#define PIO_PA29_IDX           29
#define PIO_PA30_IDX           30
#define PIO_PA31_IDX           31
#define PIO_PB0_IDX            32
#define PIO_PB1_IDX            33
#define PIO_PB2_IDX            34
#define PIO_PB3_IDX            35
#define PIO_PB4_IDX            36
#define PIO_PB5_IDX            37
#define PIO_PB6_IDX            38
#define PIO_PB7_IDX            39
#define PIO_PB8_IDX            40
#define PIO_PB9_IDX            41
#define PIO_PB10_IDX           42
#define PIO_PB11_IDX           43
#define PIO_PB12_IDX           44
#define PIO_PB13_IDX           45
#define PIO_PB14_IDX           46
#define PIO_PB15_IDX           47
#define PIO_PB16_IDX           48
#define PIO_PB17_IDX           49
#define PIO_PB18_IDX           50
#define PIO_PB19_IDX           51
#define PIO_PB20_IDX           52
#define PIO_PB21_IDX           53
#define PIO_PB22_IDX           54
#define PIO_PB23_IDX           55
#define PIO_PB24_IDX           56
#define PIO_PB25_IDX           57
#define PIO_PB26_IDX           58
#define PIO_PB27_IDX           59
#define PIO_PB28_IDX           60
#define PIO_PB29_IDX           61
#define PIO_PB30_IDX           62
#define PIO_PB31_IDX           63
#define PIO_PC0_IDX            64
#define PIO_PC1_IDX            65
#define PIO_PC2_IDX            66
#define PIO_PC3_IDX            67
#define PIO_PC4_IDX            68
#define PIO_PC5_IDX            69
#define PIO_PC6_IDX            70
#define PIO_PC7_IDX            71
#define PIO_PC8_IDX            72
#define PIO_PC9_IDX            73
#define PIO_PC10_IDX           74
#define PIO_PC11_IDX           75
#define PIO_PC12_IDX           76
#define PIO_PC13_IDX           77
#define PIO_PC14_IDX           78
#define PIO_PC15_IDX           79
#define PIO_PC16_IDX           80
#define PIO_PC17_IDX           81
#define PIO_PC18_IDX           82
#define PIO_PC19_IDX           83
#define PIO_PC20_IDX           84
#define PIO_PC21_IDX           85
#define PIO_PC22_IDX           86
#define PIO_PC23_IDX           87
#define PIO_PC24_IDX           88
#define PIO_PC25_IDX           89
#define PIO_PC26_IDX           90
#define PIO_PC27_IDX           91
#define PIO_PC28_IDX           92
#define PIO_PC29_IDX           93
#define PIO_PC30_IDX           94
#define PIO_PC31_IDX           95
#define PIO_PD0_IDX            96
#define PIO_PD1_IDX            97
#define PIO_PD2_IDX            98
#define PIO_PD3_IDX            99
#define PIO_PD4_IDX            100
#define PIO_PD5_IDX            101
#define PIO_PD6_IDX            102
#define PIO_PD7_IDX            103
#define PIO_PD8_IDX            104
#define PIO_PD9_IDX            105
#define PIO_PD10_IDX           106
#define PIO_PD11_IDX           107
#define PIO_PD12_IDX           108
#define PIO_PD13_IDX           109
#define PIO_PD14_IDX           110
#define PIO_PD15_IDX           111
#define PIO_PD16_IDX           112
#define PIO_PD17_IDX           113
#define PIO_PD18_IDX           114
#define PIO_PD19_IDX           115
#define PIO_PD20_IDX           116
#define PIO_PD21_IDX           117
#define PIO_PD22_IDX           118
#define PIO_PD23_IDX           119
#define PIO_PD24_IDX           120
#define PIO_PD25_IDX           121
#define PIO_PD26_IDX           122
#define PIO_PD27_IDX           123
#define PIO_PD28_IDX           124
#define PIO_PD29_IDX           125
#define PIO_PD30_IDX           126
#define PIO_PD31_IDX           127
/*@}*/

/* ************************************************************************** */
/*   MEMORY MAPPING DEFINITIONS FOR SAMA5D2 */
/* ************************************************************************** */


#define EBI_CS0_ADDR    (0x10000000u) /**< EBI Chip Select 0 base address */
#define DDR_CS_ADDR     (0x20000000u) /**< DDR Chip Select base address */
#define DDR_AES_CS_ADDR (0x40000000u) /**< DDR with AES Chip Select base address */
#define EBI_CS1_ADDR    (0x60000000u) /**< EBI Chip Select 1 base address */
#define EBI_CS2_ADDR    (0x70000000u) /**< EBI Chip Select 2 base address */
#define EBI_CS3_ADDR    (0x80000000u) /**< EBI Chip Select 3 base address */
#define QSPI_AES0_ADDR  (0x90000000u) /**< QPSI Memory crypted with AES 0 base address */
#define QSPI_AES1_ADDR  (0x98000000u) /**< QPSI Memory crypted with AES 1 base address */
#define SDHC0_ADDR      (0xA0000000u) /**< SDHC 0 base address */
#define SDHC1_ADDR      (0xB0000000u) /**< SDHC 1 base address */
#define NFC_ADDR        (0xC0000000u) /**< NAND Flash Controller Command base address */
#define QSPIMEM0_ADDR   (0xD0000000u) /**< QSPI Memory 0 base address */
#define QSPIMEM1_ADDR   (0xD8000000u) /**< QSPI Memory 1 base address */
#define IROM_ADDR       (0x00000000u) /**< Internal ROM base address */
#define ECC_ROM_ADDR    (0x00040000u) /**< ECC ROM base address */
#define NFC_RAM_ADDR    (0x00100000u) /**< NAND Flash Controller RAM base address */
#define IRAM0_ADDR      (0x00200000u) /**< Internal RAM 0 base address */
#define IRAM1_ADDR      (0x00220000u) /**< Internal RAM 1 base address */
#define UDPHS_RAM_ADDR  (0x00300000u) /**< USB High Speed Device Port RAM base address */
#define UHPHS_OHCI_ADDR (0x00400000u) /**< USB High Speed Device Port RAM base address */
#define UHPHS_EHCI_ADDR (0x00500000u) /**< USB High Speed Device Port RAM base address */
#define AXIMX_ADDR      (0x00600000u) /**< AXI Bus Matrix base address */
#define DAP_ADDR        (0x00700000u) /**< Debug Access Port base address */
#define PTCMEM_ADDR     (0x00800000u) /**< PTC Memory base address */

#define BSCR_ADDR       (0xF8048054u) /**< Boot Sequence Register base address */
#define GPBR_ADDR       (0xF8045400u) /**< General Purpose Backup Register */
#define SECURAM_ADDR    (0xF8044000u) /**< SecuRAM address */

/* ************************************************************************** */
/*   ELECTRICAL DEFINITIONS FOR SAMA5D2 */
/* ************************************************************************** */

/* %ATMEL_ELECTRICAL% */





/* ************************************************************************** */
/* Missing parts in sama5d2.h and aliases */

#define SMC            HSMC
#define ID_SMC         ID_HSMC
#define EBI_NF_ADDR    EBI_CS3_ADDR  /**< NAND Flash on EBI Chip Select 3 base address */

/// SMC
#define   SMC_PMECCFG_SECTORSZ_512  (0x0u << 4) /**< \brief  (PMECC) Sector Size 512 */
#define   SMC_PMECCFG_SECTORSZ_1024 (0x1u << 4) /**< \brief  (PMECC) Sector Size 1024 */

#define   SMC_PMECCFG_NANDWR_READ         (0x0 << 12) /**< \brief(SMC_PMECCFG) NANDWR is 0 */
#define   SMC_PMECCFG_NANDWR_WRITE        (0x1 << 12) /**< \brief(SMC_PMECCFG) NANDWR is 1 */

#define   SMC_PMECCFG_SPAREEN_SKIPPED     (0x0 << 16) /**< \brief(SMC_PMECCFG) Spare Zone is skipped */
#define   SMC_PMECCFG_SPAREEN_PROTECTED   (0x1 << 16) /**< \brief(SMC_PMECCFG) Spare Zone is ECC protected */

/* -------- NFCADDR_CMD : (AHB address) NFC address command -------- */
#define SMC_CMD_CMD1      (0xFF <<  2) /**< \brief  (HSMC4) Command Register Value for Cycle 1 */
#define SMC_CMD_CMD2      (0xFF << 10) /**< \brief  (HSMC4) Command Register Value for Cycle 2 */
#define SMC_CMD_VCMD2     (0x1 << 18)  /**< \brief  (HSMC4) Valid Cycle 2 Command */
#define SMC_CMD_ACYCLE    (0x7 << 19)  /**< \brief  (HSMC4) Number of Address required for the current command */
#define SMC_CMD_ACYCLE_SMC_ACYCLE_NONE    (0x0 << 19) /**< \brief  (HSMC4) No address cycle */
#define SMC_CMD_ACYCLE_SMC_ACYCLE_ONE     (0x1 << 19) /**< \brief  (HSMC4) One address cycle */
#define SMC_CMD_ACYCLE_SMC_ACYCLE_TWO     (0x2 << 19) /**< \brief  (HSMC4) Two address cycles */
#define SMC_CMD_ACYCLE_SMC_ACYCLE_THREE   (0x3 << 19) /**< \brief  (HSMC4) Three address cycles */
#define SMC_CMD_ACYCLE_SMC_ACYCLE_FOUR    (0x4 << 19) /**< \brief  (HSMC4) Four address cycles */
#define SMC_CMD_ACYCLE_SMC_ACYCLE_FIVE    (0x5 << 19) /**< \brief  (HSMC4) Five address cycles */
#define SMC_CMD_CSID      (0x7 << 22) /**< \brief  (HSMC4) Chip Select Identifier */
#define SMC_CMD_CSID_0                    (0x0 << 22) /**< \brief  (HSMC4) CS0 */
#define SMC_CMD_CSID_1                    (0x1 << 22) /**< \brief  (HSMC4) CS1 */
#define SMC_CMD_CSID_2                    (0x2 << 22) /**< \brief  (HSMC4) CS2 */
#define SMC_CMD_CSID_3                    (0x3 << 22) /**< \brief  (HSMC4) CS3 */
#define SMC_CMD_CSID_4                    (0x4 << 22) /**< \brief  (HSMC4) CS4 */
#define SMC_CMD_CSID_5                    (0x5 << 22) /**< \brief  (HSMC4) CS5 */
#define SMC_CMD_CSID_6                    (0x6 << 22) /**< \brief  (HSMC4) CS6 */
#define SMC_CMD_CSID_7                    (0x7 << 22) /**< \brief  (HSMC4) CS7 */
#define SMC_CMD_NFC_EN   (0x1 << 25) /**< \brief  (HSMC4) NFC Enable */
#define SMC_CMD_NFC_DIS  (0x0 << 25) /**< \brief  (HSMC4) NFC Disable */
#define SMC_CMD_NFC_WR   (0x1 << 26) /**< \brief  (HSMC4) NFCWR : Host Main Controller Write Enable */
#define SMC_CMD_NFC_RD   (0x0 << 26) /**< \brief  (HSMC4) NFCRD : Host Main Controller Write Disable */
#define SMC_CMD_NFC_CMD  (0x1 << 27) /**< \brief  (HSMC4) NFCMD : NFC will execute the the command in NCFADDR_CMD */


#define IRAM0_SIZE 		(0x00020000u)
#define IRAM1_SIZE 		(0x00020000u)

/* ************************************************************************** */


#ifdef __cplusplus
}
#endif

/*@}*/

#endif /* _SAMA5D2_ */
