// ---------------------------------------------------------
//   ATMEL Microcontroller Software Support
// ---------------------------------------------------------
// The software is delivered "AS IS" without warranty or
// condition of any  kind, either express, implied or
// statutory. This includes without limitation any warranty
// or condition with respect to merchantability or fitness
// for any particular purpose, or against the infringements of
// intellectual property rights of others.
// ---------------------------------------------------------
//  File: sam9xx5-ek-ddram.mac
//  User setup file for CSPY debugger.
//
// ---------------------------------------------------------

__var __tempo_var;
__var __dummy_read;
__var __data_test;
__var __mac_i;

__var REG_CKGR_MOR;
__var CKGR_MOR_MOSCXTEN;
__var CKGR_MOR_MOSCXTBY;
__var CKGR_MOR_MOSCRCEN;
__var CKGR_MOR_MOSCSEL;
__var REG_CKGR_MCFR;
__var CKGR_MCFR_MAINFRDY;
__var REG_PMC_SR;
__var PMC_SR_MCKRDY;
__var PMC_SR_LOCKA;
__var PMC_PCK_CSS_MAIN_CLK;
__var REG_CKGR_PLLAR;
__var REG_PMC_PLLICPR;
__var REG_PMC_MCKR;
__var PMC_MCKR_PLLADIV2_DIV2;
__var PMC_MCKR_PRES_Msk;
__var PMC_MCKR_PRES_CLOCK;
__var PMC_MCKR_MDIV_Msk;
__var PMC_MCKR_MDIV_PCK_DIV3;
__var PMC_MCKR_CSS_PLLA_CLK;
__var PMC_SR_MOSCSELS;

/*********************************************************************
*
*       execUserReset() : JTAG set initially to Full Speed
*/
execUserReset()
{
    __message "------------------------------ execUserReset ---------------------------------";
    CheckNoRemap();
    __message "-------------------------------Set PC Reset ----------------------------------";
    __writeMemory32(0xD3,0x98,"Register");        //*  Set CPSR
}

/*********************************************************************
*
*       execUserPreload() : JTAG set initially to 32kHz
*/
execUserPreload()
{
    __message "------------------------------ execUserPreload ---------------------------------";
    __hwReset(0);                     //* Hardware Reset: CPU is automatically halted after the reset (JTAG is already configured to 32kHz)

    __writeMemory32(0xD3,0x98,"Register"); //*  Set CPSR
    // DDR reset
    //MPDDRC->MPDDRC_LPR = MPDDRC_LPR_LPCB_DEEP_PWD |MPDDRC_LPR_CLK_FR_ENABLED;
    __writeMemory32(0x07,0xFFFFEA1C,"Memory");
    // Disable DDR clock
    //PMC->PMC_PCDR1 |= (1 << (ID_MPDDRC-32));
    __tempo_var = __readMemory32(0xFFFFFD08,"Memory");
    __tempo_var |= 0x00020000;
    __writeMemory32(__tempo_var,0xFFFFFD04,"Memory");   // Enable MPDDR controller clock

    // PMC->PMC_SCDR  |= PMC_SCER_DDRCK;
    __tempo_var = __readMemory32(0xFFFFFC08,"Memory");
    __tempo_var |= 0x00000084;
    __writeMemory32(__tempo_var,0xFFFFFC04,"Memory");   // System Clock Enable Register : Enable DDR clock

    PMC_SelectExt12M_Osc();
    PMC_SwitchMck2Main();
    PMC_SetPllA();
    PMC_SetMckPllaDiv();
    PMC_SetMckPrescaler();
    PMC_SetMckDivider();
    PMC_SwitchMck2Pll();
    __message "------------ PLL set to 792 MHz, MCK set to 132 MHz ------------";

    __initDDRAM();                     //* Init DDR2 memory
    __message "------------ DDR2 is initialized ------------";

    CheckNoRemap();                    //* Set the RAM memory at 0x0020 0000 & 0x0000 0000
    Watchdog();                        //* Watchdog Disable

    //*  Get the Chip ID  (AT91C_DBGU_C1R & AT91C_DBGU_C2R
    __mac_i=__readMemory32(0xFFFFEE40,"Memory");
    __message " ---------------------------------------- Chip ID   0x",__mac_i:%X;
}


/*********************************************************************
*
*       CheckRemap()
*
* Function description
*   Check the Remap.
*/

CheckNoRemap()
{
    __tempo_var = __readMemory32(0x00000000,"Memory");

    if (__tempo_var == 0xAA55AA55)
    {
       __data_test = 0x55AA55AA;
    }
    else
      {
         __data_test = 0xAA55AA55;
      }

    __writeMemory32(__data_test,0x00000000,"Memory");

    __dummy_read = __readMemory32(0x00000000,"Memory");

    __writeMemory32(__tempo_var,0x00000000,"Memory");

    if (__dummy_read == __data_test)
    {
       __message " ------------------------ The Remap is already done ------------------------";
    }
    else
      {
         __message " ------------------------ The Remap is not DONE ------------------------";
         __writeMemory32(0x00000001,0xFFFFED00,"Memory");
         __delay(2);
         __writeMemory32(0x00000001,0x00800000,"Memory");
         __delay(50);
         __message "------------ The Remap was executed ------------";
      }
}

/*********************************************************************
*
*       _Watchdog()
*
* Function description
*   Clear Watchdog
*/

Watchdog()
{
   // Watchdog Disable
   __writeMemory32(0x00008000,0xFFFFFE44,"Memory");
   __message " ------------------------ Watchdog Disable ------------------------";
}

/*********************************************************************
*
*       PMC_SelectExt12M_Osc()
*
* Function description
*   Select external 12MHz oscillator
*/
PMC_SelectExt12M_Osc()
{
    REG_CKGR_MOR = 0xFFFFFC20;
    CKGR_MOR_MOSCXTEN = (0x1 << 0);     /*(CKGR_MOR) Main Crystal Oscillator Enable */
    CKGR_MOR_MOSCXTBY = (0x1 << 1);     /*(CKGR_MOR) Main Crystal Oscillator Bypass */
    CKGR_MOR_MOSCRCEN = (0x1 << 3);     /*(CKGR_MOR) Main On-Chip RC Oscillator Enable */
    CKGR_MOR_MOSCSEL = (0x1 << 24);     /*(CKGR_MOR) Main Oscillator Selection */
    REG_CKGR_MCFR = 0xFFFFFC24;         /*(PMC) Main Clock Frequency Register */
    CKGR_MCFR_MAINFRDY = (0x1 << 16);   /*(CKGR_MCFR) Main Clock Ready */
    REG_PMC_SR = 0xFFFFFC68;            /*(PMC) Status Register */
    PMC_SR_MOSCSELS = (0x1 << 16);      /*(PMC_SR) Main Oscillator Selection Status */
    PMC_SR_MCKRDY = (0x1 << 3);         /*(PMC_SR) Master Clock Status */

    /* enable external OSC 12 MHz  */
    __tempo_var = __readMemory32(REG_CKGR_MOR,"Memory");
    __tempo_var |= CKGR_MOR_MOSCXTEN | (0x37 << 16);
    __writeMemory32(__tempo_var,REG_CKGR_MOR,"Memory");

    /* wait Main CLK Ready */
    while(!((__readMemory32(REG_CKGR_MCFR,"Memory")) & CKGR_MCFR_MAINFRDY));

    /* disable external OSC 12 MHz bypass */
    __tempo_var = __readMemory32(REG_CKGR_MOR,"Memory");
    __tempo_var = (__tempo_var & ~CKGR_MOR_MOSCXTBY) | (0x37 << 16);
    __writeMemory32(__tempo_var,REG_CKGR_MOR,"Memory");

    /* switch MAIN clock to external OSC 12 MHz*/
    __tempo_var = __readMemory32(REG_CKGR_MOR,"Memory");
    __tempo_var |= CKGR_MOR_MOSCSEL | (0x37 << 16);
    __writeMemory32(__tempo_var,REG_CKGR_MOR,"Memory");

    /* wait MAIN clock status change for external OSC 12 MHz selection*/
    while(!((__readMemory32(REG_PMC_SR,"Memory")) & PMC_SR_MOSCSELS));

    /* in case when MCK is running on MAIN CLK */
    while(!((__readMemory32(REG_PMC_SR,"Memory")) & PMC_SR_MCKRDY));

    /* disable internal RC 12 MHz*/
    //__tempo_var = __readMemory32(REG_CKGR_MOR,"Memory");
    //__tempo_var = (__tempo_var & ~CKGR_MOR_MOSCRCEN) | (0x37 << 16);
    //__writeMemory32(__tempo_var,REG_CKGR_MOR,"Memory");
    //__mac_i=__readMemory32(REG_CKGR_MOR,"Memory");
    __message " -------- PMC_SelectExt12M_Osc ---------- REG_CKGR_MOR  0x",__mac_i:%X;
}

/*********************************************************************
*
*       PMC_SwitchMck2Main()
*
* Function description
*   Switch PMC from MCK to main clock.
*/
PMC_SwitchMck2Main()
{
    REG_PMC_MCKR = 0xFFFFFC30;          /*(PMC) Master Clock Register */
    PMC_PCK_CSS_MAIN_CLK = (0x1 << 0);  /*(PMC_PCK[3]) Main Clock is selected */
    PMC_SR_MCKRDY = (0x1 << 3);         /*(PMC_SR) Master Clock Status */
    REG_PMC_SR = 0xFFFFFC68;            /*(PMC) Status Register */

    /* Select Main Oscillator as input clock for PCK and MCK */
    __tempo_var = __readMemory32(REG_PMC_MCKR,"Memory");
    __tempo_var = (__tempo_var & ~0x03)| PMC_PCK_CSS_MAIN_CLK ;
    __writeMemory32(__tempo_var, REG_PMC_MCKR,"Memory");
    while(!((__readMemory32(REG_PMC_SR,"Memory")) & PMC_SR_MCKRDY));
    __mac_i=__readMemory32(REG_PMC_MCKR,"Memory");
    __message " --------- PMC_SwitchMck2Main ----------- REG_PMC_MCKR  0x",__mac_i:%X;
}

/*********************************************************************
*
*       PMC_SetPllA()
*
* Function description
*   Configure PLLA Registe.
*/

PMC_SetPllA()
{
    REG_CKGR_PLLAR = 0xFFFFFC28;        /*(PMC) PLLA Register */
    REG_PMC_PLLICPR = 0xFFFFFC80;       /*(PMC) PLL Charge Pump Current Register */
    REG_PMC_SR = 0xFFFFFC68;            /*(PMC) Status Register */
    PMC_SR_LOCKA = (0x1 << 1);          /*(PMC_SR) PLLA Lock Status */

    __writeMemory32(((0x1 << 29) | (0x3F << 8) | ( 0 << 14) | (199 << 16) | 3 ), REG_CKGR_PLLAR,"Memory");
    __writeMemory32((0x03 << 8), REG_PMC_PLLICPR,"Memory");
    while(!((__readMemory32(REG_PMC_SR,"Memory")) & PMC_SR_LOCKA));
    __mac_i=__readMemory32(REG_CKGR_PLLAR,"Memory");
    __message " --------- PMC_SetPllA ---------------- REG_CKGR_PLLAR  0x",__mac_i:%X;
}

/*********************************************************************
*
*       PMC_SetMckPllaDiv()
*
* Function description
*   Configure MCK PLLA divider.
*/
PMC_SetMckPllaDiv()
{
    REG_PMC_MCKR = 0xFFFFFC30;             /*(PMC) Master Clock Register */
    PMC_MCKR_PLLADIV2_DIV2 = (0x1 << 12);  /*(PMC_MCKR) PLLA clock frequency is divided by 2. */

    __tempo_var = __readMemory32(REG_PMC_MCKR,"Memory");
    if ((__tempo_var & PMC_MCKR_PLLADIV2_DIV2) != PMC_MCKR_PLLADIV2_DIV2)
    {
        __tempo_var |= PMC_MCKR_PLLADIV2_DIV2;
        __writeMemory32(__tempo_var, REG_PMC_MCKR,"Memory");
        while(!((__readMemory32(REG_PMC_SR,"Memory")) & PMC_SR_MCKRDY));
    }
}

/*********************************************************************
*
*       PMC_SetMckPrescaler()
*
* Function description
*   Configure MCK Prescaler.
*/
PMC_SetMckPrescaler()
{
    REG_PMC_MCKR = 0xFFFFFC30;             /*(PMC) Master Clock Register */
    PMC_MCKR_PRES_Msk = (0x7 << 4);        /*(PMC_MCKR) Master/Processor Clock Prescaler */
    PMC_MCKR_PRES_CLOCK = (0x0 << 4);      /*(PMC_MCKR) Selected clock */

    /* Change MCK Prescaler divider in PMC_MCKR register */
    __tempo_var = __readMemory32(REG_PMC_MCKR,"Memory");
    __tempo_var = (__tempo_var & ~PMC_MCKR_PRES_Msk) | PMC_MCKR_PRES_CLOCK;
    __writeMemory32(__tempo_var, REG_PMC_MCKR,"Memory");
    while(!((__readMemory32(REG_PMC_SR,"Memory")) & PMC_SR_MCKRDY));
    __mac_i=__readMemory32(REG_PMC_MCKR,"Memory");
    __message " --------- PMC_SetMckPrescaler -------------- REG_PMC_MCKR  0x",__mac_i:%X;
}

/*********************************************************************
*
*       PMC_SetMckDivider()
*
* Function description
*   Configure MCK Divider.
*/
PMC_SetMckDivider()
{
    REG_PMC_MCKR = 0xFFFFFC30;             /*(PMC) Master Clock Register */
    PMC_MCKR_MDIV_Msk = (0x3 << 8);        /*(PMC_MCKR) Master Clock Division */
    PMC_MCKR_MDIV_PCK_DIV3 = (0x3 << 8);   /*(PMC_MCKR) Master Clock is Prescaler Output Clock divided by 3.SysClk DDR is equal to 2 x MCK. DDRCK is equal to MCK. */

    /* change MCK Prescaler divider in PMC_MCKR register */
    __tempo_var = __readMemory32(REG_PMC_MCKR,"Memory");
    __tempo_var = (__tempo_var & ~PMC_MCKR_MDIV_Msk) | PMC_MCKR_MDIV_PCK_DIV3;
    __writeMemory32(__tempo_var, REG_PMC_MCKR,"Memory");
    while(!((__readMemory32(REG_PMC_SR,"Memory")) & PMC_SR_MCKRDY));
    __mac_i=__readMemory32(REG_PMC_MCKR,"Memory");
    __message " --------- PMC_SetMckDivider -------------- REG_PMC_MCKR  0x",__mac_i:%X;
}

/*********************************************************************
*
*       PMC_SwitchMck2Pll()
*
* Function description
*   Switch PMC from MCK to PLL clock.
*/
PMC_SwitchMck2Pll()
{
    REG_PMC_MCKR = 0xFFFFFC30;             /*(PMC) Master Clock Register */
    PMC_MCKR_CSS_PLLA_CLK = (0x2 << 0);    /*(PMC_MCKR) PLLACK/PLLADIV2 is selected */

    /* Select PLL as input clock for PCK and MCK */
    __tempo_var = __readMemory32(REG_PMC_MCKR,"Memory");
    __tempo_var = (__tempo_var & ~0x03) | PMC_MCKR_CSS_PLLA_CLK;
    __writeMemory32(__tempo_var, REG_PMC_MCKR,"Memory");
    while(!((__readMemory32(REG_PMC_SR,"Memory")) & PMC_SR_MCKRDY));
    __mac_i=__readMemory32(REG_PMC_MCKR,"Memory");
    __message " --------- PMC_SwitchMck2Pll -------------- REG_PMC_MCKR  0x",__mac_i:%X;
}



// ---------------------------------------------------------------------------
//  Function Name       : __initDDRAM
//  Object              : Set DDR2 memory for working at 133 Mhz
// ---------------------------------------------------------------------------

__initDDRAM()
{
       __var tempVal;
    __message "-------------------------------Configuring the DDRAM controller------------\n";
    __message "-------------------------------MICRON DDRAM configuration------------------\n";

    // 0xFFFFE600 DDR2C Base Address

     __writeMemory32(0x0102030A,0xFFFFDF20,"Memory");    /* Rev. B EK and VB */

    /* Enable DDR2 clock x2 in PMC  PMC->PMC_SCER = PMC_SCER_DDRCK; */
    __writeMemory32(0x04,0xFFFFFC00,"Memory");

    /* Configure the DDR controller */

    // Disable anticipated read
    //WRITE(pDdrc, HDDRSDRC2_HS, (READ(pDdrc, HDDRSDRC2_HS) | AT91C_DDRC2_NO_ANT));
    tempVal = __readMemory32(0xFFFFE82C,"Memory");
    tempVal |= 0x04;
    __writeMemory32(tempVal,0xFFFFE82C,"Memory");


    // -----------------------Step 1-------------------
    // Program the memory device type
    // ------------------------------------------------

    //DDRSDRC->DDRSDRC_MD = DDRSDRC_MD_MD(DDR2_SDRAM) | DDRSDRC_MD_DBW;
    __writeMemory32(0x16,0xFFFFE820,"Memory");

    // -----------------------Step 2-------------------
    // 1. Program the features of DDR2-SDRAM device into
    //    the Configuration Register.
    // 2. Program the features of DDR2-SDRAM device into
    //    the Timing Register HDDRSDRC2_T0PR.
    // 3. Program the features of DDR2-SDRAM device into
    //    the Timing Register HDDRSDRC2_T1PR.
    // 4. Program the features of DDR2-SDRAM device into
    //    the Timing Register HDDRSDRC2_T2PR.
    // ------------------------------------------------

    /* DDRSDRC->DDRSDRC_CR = DDRSDRC_CR_NC(NC_DDR10_SDR9)  // 10 column bits (1K)
                            | DDRSDRC_CR_NR(NR_ROW_BIT_13) // 13 row bits    (8K)
                            | DDRSDRC_CR_CAS(3)            // CAS Latency 3
                            | (0x1 << 20);                 // (DDRSDRC) DDR2 8 bank
    */
    __writeMemory32(0x0000B9,0xFFFFE808,"Memory");

    /* assume timings for 7.5ns min clock period */
    /*
    DDRSDRC->DDRSDRC_T0PR = DDRSDRC_T0PR_TRAS(6)    //  6 * 7.5 = 45 ns
                          | DDRSDRC_T0PR_TRCD(2)    //  2 * 7.5 = 15 ns
                          | DDRSDRC_T0PR_TWR(2)     //  2 * 7.5 = 15 ns
                          | DDRSDRC_T0PR_TRC(8)     //  8 * 7.5 = 60 ns
                          | DDRSDRC_T0PR_TRP(2)     //  2 * 7.5 = 15 ns
                          | DDRSDRC_T0PR_TRRD(1)    //  2 * 7.5 = 15 ns
                          | DDRSDRC_T0PR_TWTR(1)    //  2 clock cycle
                          | DDRSDRC_T0PR_TMRD(2);   //  2 clock cycles
    */
    __writeMemory32(0x22228226,0xFFFFE80C,"Memory");

    /*
    DDRSDRC->DDRSDRC_T1PR = DDRSDRC_T1PR_TRFC(18)   // 18 * 7.5 = 135 ns (min 127.5 ns for 1Gb DDR)
                          | DDRSDRC_T1PR_TXSNR(19)  // 19 * 7.5 > 142.5ns TXSNR: Exit self refresh delay to non read command
                          | DDRSDRC_T1PR_TXSRD(200) // min 200 clock cycles, TXSRD: Exit self refresh delay to Read command
                          | DDRSDRC_T1PR_TXP(2);    //  2 * 7.5 = 15 ns
    */
    __writeMemory32(0x02c81c1b,0xFFFFE810,"Memory");

    /*
    DDRSDRC->DDRSDRC_T2PR = DDRSDRC_T2PR_TXARD(2)   //  min 2 clock cycles
                          | DDRSDRC_T2PR_TXARDS(7)  //  min 7 clock cycles
                          | DDRSDRC_T2PR_TRPA(3)
                          | DDRSDRC_T2PR_TRTP(1) ;  //  1 * 7.5 = 7.5 ns (min 7.5ns)
    */
    __writeMemory32(0x00C2228,0xFFFFE814,"Memory");

    // -----------------------Step 3-------------------
    // An NOP command is issued to the DDR2-SDRAM to
    // enable clock.
    // ------------------------------------------------
    // DDRSDRC->DDRSDRC_MR = DDRSDRC_MR_MODE(DDRC2_MODE_NOP_CMD);

    __writeMemory32(0x1,0xFFFFE800,"Memory");
    __writeMemory32(0x0,0x20000000,"Memory");

    // A minimum pause of 200 μs is provided to precede any signal toggle.
    __delay(200);

    // Now clocks which drive DDR2-SDRAM device are enabled

    // -----------------------Step 4-------------------
    // An NOP command is issued to the DDR2-SDRAM
    // ------------------------------------------------
    __writeMemory32(0x1,0xFFFFE800,"Memory");
    __writeMemory32(0x0,0x20000000,"Memory");
    // wait 400 ns min
    __delay(200);
    // Now CKE is driven high.

    // -----------------------Step 5-------------------
    // An all banks precharge command is issued to the
    // DDR2-SDRAM.
    // ------------------------------------------------

    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_PRCGALL_CMD
    __writeMemory32(0x2,0xFFFFE800,"Memory");
    __writeMemory32(0x0,0x20000000,"Memory");

    // wait 400 ns min
    __delay(1);

    // -----------------------Step 6-------------------
    // An Extended Mode Register set (EMRS2) cycle is
    // issued to chose between commercialor high
    // temperature operations
    // ------------------------------------------------

    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_EXT_LMR_CMD
    __writeMemory32(0x5,0xFFFFE800,"Memory");
    __writeMemory32(0x0,0x22000000,"Memory");  // The write address must be chosen so that BA[1] is set to 1 and BA[0] are set to 0.
    // wait 2 cycles min
    __delay(1);

    // -----------------------Step 7-------------------
    // An Extended Mode Register set (EMRS3) cycle is
    // issued to set all registers to 0.
    // ------------------------------------------------
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_EXT_LMR_CMD
    __writeMemory32(0x5,0xFFFFE800,"Memory");
    __writeMemory32(0x0,0x23000000,"Memory");  // The write address must be chosen so that BA[1] is set to 1 and BA[0] are set to 1.
    // wait 2 cycles min
    __delay(1);

    // -----------------------Step 8-------------------
    // An Extended Mode Register set (EMRS1) cycle is
    // issued to enable DLL.
    // ------------------------------------------------
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_EXT_LMR_CMD
    __writeMemory32(0x5,0xFFFFE800,"Memory");
    __writeMemory32(0x0,0x21000000,"Memory"); // The write address must be chosen so that BA[1] and BA[0] are set to 0.
    // An additional 200 cycles of clock are required for locking DLL
    __delay(1);

    // -----------------------Step 9-------------------
    // Program DLL field into the Configuration Register.
    // -------------------------------------------------

    // HDDRSDRC2_CR, cr | AT91C_DDRC2_DLL_RESET_ENABLED
    tempVal = __readMemory32(0xFFFFE808,"Memory");
    tempVal |= 0x80;
    __writeMemory32(tempVal,0xFFFFE808,"Memory");

    // -----------------------Step 10-------------------
    // A Mode Register set (MRS) cycle is issued to reset
    // DLL.
    // -------------------------------------------------
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_LMR_CMD
    __writeMemory32(0x3,0xFFFFE800,"Memory");
    __writeMemory32(0x0,0x20000000,"Memory"); // The write address must be chosen so that BA[1:0] bits are set to 0.
    // wait 2 cycles min
    __delay(1);

    // -----------------------Step 11-------------------
    // An all banks precharge command is issued to the
    // DDR2-SDRAM.
    // -------------------------------------------------
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_PRCGALL_CMD
    __writeMemory32(0x2,0xFFFFE800,"Memory");
    __writeMemory32(0x0,0x20000000,"Memory"); // Perform a write access to any DDR2-SDRAM address to acknowledge this command.
    // wait 2 cycles min
    __delay(1);

    // -----------------------Step 12-------------------
    // Two auto-refresh (CBR) cycles are provided.
    // Program the auto refresh command (CBR) into the
    // Mode Register.
    // -------------------------------------------------
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_RFSH_CMD
    __writeMemory32(0x4,0xFFFFE800,"Memory");
    __writeMemory32(0x0,0x20000000,"Memory"); // Performs a write access to any DDR2-SDRAM location twice to acknowledge these commands.
    // wait 2 cycles min
    __delay(1);
    // Set 2nd CBR
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_RFSH_CMD
    __writeMemory32(0x4,0xFFFFE800,"Memory");
    __writeMemory32(0x0,0x20000000,"Memory"); // Performs a write access to any DDR2-SDRAM location twice to acknowledge these commands.
    // wait 2 cycles min
    __delay(1);

    // -----------------------Step 13-------------------
    // Program DLL field into the Configuration Register
    // to low(Disable DLL reset).
    // -------------------------------------------------
    // HDDRSDRC2_CR, cr & (~AT91C_DDRC2_DLL_RESET_ENABLED)
    tempVal = __readMemory32(0xFFFFE808,"Memory");
    tempVal &= 0xFFFFFF7F;
    __writeMemory32(tempVal,0xFFFFE808,"Memory");
    // wait 2 cycles min
    __delay(1);

    // -----------------------Step 14-------------------
    // A Mode Register set (MRS) cycle is issued to
    // program the parameters of the DDR2-SDRAM devices
    // -------------------------------------------------
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_LMR_CMD
    __writeMemory32(0x3,0xFFFFE800,"Memory");
    __writeMemory32(0x0,0x20000000,"Memory"); // The write address must be chosen so that BA[1:0] are set to 0.
    // wait 2 cycles min
    __delay(1);

    // -----------------------Step 15-------------------
    // Program OCD field into the Configuration Register
    // to high (OCD calibration default)
    // -------------------------------------------------
    tempVal = __readMemory32(0xFFFFE808,"Memory");
    tempVal |= (0x07 << 12);
    __writeMemory32(tempVal,0xFFFFE808,"Memory");
    __delay(1);

    // -----------------------Step 16-------------------
    // An Extended Mode Register set (EMRS1) cycle is
    // issued to OCD default value.
    // -------------------------------------------------
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_EXT_LMR_CMD
    __writeMemory32(0x5,0xFFFFE800,"Memory");
    __writeMemory32(0x0,0x21000000,"Memory"); // The write address must be chosen so that BA[1] is set to 0 and BA[0] is set to 1.
    // wait 2 cycles min
    __delay(1);

    // -----------------------Step 17-------------------
    // Program OCD field into the Configuration Register
    // to low (OCD calibration mode exit).
    // -------------------------------------------------
    tempVal = __readMemory32(0xFFFFE808,"Memory");
    tempVal &= 0xFFFF8FFF;
    __writeMemory32(tempVal,0xFFFFE808,"Memory");
    __delay(1);

    // -----------------------Step 18-------------------
    // An Extended Mode Register set (EMRS1) cycle is
    // issued to enable OCD exit.
    // -------------------------------------------------
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_EXT_LMR_CMD
    __writeMemory32(0x5,0xFFFFE800,"Memory");
    __writeMemory32(0x0,0x21000000,"Memory"); // The write address must be chosen so that BA[1] is set to 1 and BA[0] is set to 1.
    // wait 2 cycles min
    __delay(1);


    // -----------------------Step 19,20-------------------
    // A mode Normal command is provided. Program the
    // Normal mode into Mode Register.
    // -------------------------------------------------
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_NORMAL_CMD
    __writeMemory32(0x0,0xFFFFE800,"Memory");
    __writeMemory32(0x0,0x20000000,"Memory"); // Perform a write access to any DDR2-SDRAM address.
    // wait 2 cycles min
    __delay(1);

    // -----------------------Step 21-------------------
    // Write the refresh rate into the count field in the
    // Refresh Timer register. The DDR2-SDRAM device requires a
    // refresh every 15.625 μs or 7.81 μs. With a 100
    // MHz frequency, the refresh timer count register must to
    // be set with (15.625 /100 MHz) = 1562 i.e. 0x061A or
    // (7.81 /100MHz) = 781 i.e. 0x030d
    // -------------------------------------------------
    // HDDRSDRC2_RTR, 0x00000411
    __writeMemory32(0x00000411,0xFFFFE804,"Memory");

    // Read optimization" shall be un-selected on this revision.
    __writeMemory32(0x04,0xFFFFE82C,"Memory");

    // OK now we are ready to work on the DDRSDR

    // wait for end of calibration
    __delay(1);

   __message "------------------------------- DDRAM configuration done -------------------------------";
}
